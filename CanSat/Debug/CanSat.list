
CanSat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08009d90  08009d90  00019d90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ec8  08009ec8  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08009ec8  08009ec8  00019ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ed0  08009ed0  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ed0  08009ed0  00019ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ed4  08009ed4  00019ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08009ed8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004508  20000100  08009fd8  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004608  08009fd8  00024608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .debug_info   000171fa  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004006  00000000  00000000  0003736d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001668  00000000  00000000  0003b378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001144  00000000  00000000  0003c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a42c  00000000  00000000  0003db24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d383  00000000  00000000  00057f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000999ab  00000000  00000000  000752d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060c8  00000000  00000000  0010ec80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00114d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000100 	.word	0x20000100
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d74 	.word	0x08009d74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000104 	.word	0x20000104
 80001dc:	08009d74 	.word	0x08009d74

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_ldivmod>:
 8000b08:	b97b      	cbnz	r3, 8000b2a <__aeabi_ldivmod+0x22>
 8000b0a:	b972      	cbnz	r2, 8000b2a <__aeabi_ldivmod+0x22>
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	bfbe      	ittt	lt
 8000b10:	2000      	movlt	r0, #0
 8000b12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b16:	e006      	blt.n	8000b26 <__aeabi_ldivmod+0x1e>
 8000b18:	bf08      	it	eq
 8000b1a:	2800      	cmpeq	r0, #0
 8000b1c:	bf1c      	itt	ne
 8000b1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b22:	f04f 30ff 	movne.w	r0, #4294967295
 8000b26:	f000 b9bb 	b.w	8000ea0 <__aeabi_idiv0>
 8000b2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b32:	2900      	cmp	r1, #0
 8000b34:	db09      	blt.n	8000b4a <__aeabi_ldivmod+0x42>
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db1a      	blt.n	8000b70 <__aeabi_ldivmod+0x68>
 8000b3a:	f000 f84d 	bl	8000bd8 <__udivmoddi4>
 8000b3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b46:	b004      	add	sp, #16
 8000b48:	4770      	bx	lr
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db1b      	blt.n	8000b8c <__aeabi_ldivmod+0x84>
 8000b54:	f000 f840 	bl	8000bd8 <__udivmoddi4>
 8000b58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b60:	b004      	add	sp, #16
 8000b62:	4240      	negs	r0, r0
 8000b64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b68:	4252      	negs	r2, r2
 8000b6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b6e:	4770      	bx	lr
 8000b70:	4252      	negs	r2, r2
 8000b72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b76:	f000 f82f 	bl	8000bd8 <__udivmoddi4>
 8000b7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b82:	b004      	add	sp, #16
 8000b84:	4240      	negs	r0, r0
 8000b86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8a:	4770      	bx	lr
 8000b8c:	4252      	negs	r2, r2
 8000b8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b92:	f000 f821 	bl	8000bd8 <__udivmoddi4>
 8000b96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b9e:	b004      	add	sp, #16
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <RxDecode>:
extern uint8_t RxBuffer[32];




uint8_t RxDecode (void){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
	uint8_t RxCheckSum = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	71fb      	strb	r3, [r7, #7]

	switch (RxBuffer[2]) {
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <RxDecode+0x58>)
 8000eb0:	789b      	ldrb	r3, [r3, #2]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d11d      	bne.n	8000ef2 <RxDecode+0x4e>
		case Init_Transmision:

			for (uint8_t n = 0; n < 8; ++n) {
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	71bb      	strb	r3, [r7, #6]
 8000eba:	e008      	b.n	8000ece <RxDecode+0x2a>
				RxCheckSum += RxBuffer[n];
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <RxDecode+0x58>)
 8000ec0:	5cd2      	ldrb	r2, [r2, r3]
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	71fb      	strb	r3, [r7, #7]
			for (uint8_t n = 0; n < 8; ++n) {
 8000ec8:	79bb      	ldrb	r3, [r7, #6]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	71bb      	strb	r3, [r7, #6]
 8000ece:	79bb      	ldrb	r3, [r7, #6]
 8000ed0:	2b07      	cmp	r3, #7
 8000ed2:	d9f3      	bls.n	8000ebc <RxDecode+0x18>
			}
			if(RxCheckSum!=RxBuffer[9])return InvalidChecksum;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <RxDecode+0x58>)
 8000ed6:	7a5b      	ldrb	r3, [r3, #9]
 8000ed8:	79fa      	ldrb	r2, [r7, #7]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d001      	beq.n	8000ee2 <RxDecode+0x3e>
 8000ede:	23ef      	movs	r3, #239	; 0xef
 8000ee0:	e008      	b.n	8000ef4 <RxDecode+0x50>
			NRF24_TxConfiguration();
 8000ee2:	f001 fa8f 	bl	8002404 <NRF24_TxConfiguration>
			Tx_CommandReplay(Init_Transmision);
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f000 f908 	bl	80010fc <Tx_CommandReplay>

			break;
 8000eec:	bf00      	nop
		default:
			return CommandNotFound;
			break;
	}

	return HAL_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e000      	b.n	8000ef4 <RxDecode+0x50>
			return CommandNotFound;
 8000ef2:	23ff      	movs	r3, #255	; 0xff
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000224 	.word	0x20000224

08000f00 <Tx_MainFrame>:
S32_t AngleX, AngleY;

extern uint8_t TxBuffer[32];
extern uint8_t RxBuffer[32];

void Tx_MainFrame(void){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
	AngleX.data =  (int32_t)(MPU6050.KalmanAngleX * 100);
 8000f06:	4b58      	ldr	r3, [pc, #352]	; (8001068 <Tx_MainFrame+0x168>)
 8000f08:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	4b56      	ldr	r3, [pc, #344]	; (800106c <Tx_MainFrame+0x16c>)
 8000f12:	f7ff fb21 	bl	8000558 <__aeabi_dmul>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f7ff fdcb 	bl	8000ab8 <__aeabi_d2iz>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4a52      	ldr	r2, [pc, #328]	; (8001070 <Tx_MainFrame+0x170>)
 8000f26:	6013      	str	r3, [r2, #0]
	AngleY.data =  (int32_t)(MPU6050.KalmanAngleY * 100);
 8000f28:	4b4f      	ldr	r3, [pc, #316]	; (8001068 <Tx_MainFrame+0x168>)
 8000f2a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	4b4e      	ldr	r3, [pc, #312]	; (800106c <Tx_MainFrame+0x16c>)
 8000f34:	f7ff fb10 	bl	8000558 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f7ff fdba 	bl	8000ab8 <__aeabi_d2iz>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4a4b      	ldr	r2, [pc, #300]	; (8001074 <Tx_MainFrame+0x174>)
 8000f48:	6013      	str	r3, [r2, #0]

	TxBuffer[0]  = 0xA5;
 8000f4a:	4b4b      	ldr	r3, [pc, #300]	; (8001078 <Tx_MainFrame+0x178>)
 8000f4c:	22a5      	movs	r2, #165	; 0xa5
 8000f4e:	701a      	strb	r2, [r3, #0]
	TxBuffer[1]  = 0x5A;
 8000f50:	4b49      	ldr	r3, [pc, #292]	; (8001078 <Tx_MainFrame+0x178>)
 8000f52:	225a      	movs	r2, #90	; 0x5a
 8000f54:	705a      	strb	r2, [r3, #1]
	TxBuffer[2]  = 0x10;
 8000f56:	4b48      	ldr	r3, [pc, #288]	; (8001078 <Tx_MainFrame+0x178>)
 8000f58:	2210      	movs	r2, #16
 8000f5a:	709a      	strb	r2, [r3, #2]
	TxBuffer[3]  = N_message;
 8000f5c:	4b47      	ldr	r3, [pc, #284]	; (800107c <Tx_MainFrame+0x17c>)
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	4b45      	ldr	r3, [pc, #276]	; (8001078 <Tx_MainFrame+0x178>)
 8000f62:	70da      	strb	r2, [r3, #3]

	TxBuffer[4]  = Temperature.bytes[0];
 8000f64:	4b46      	ldr	r3, [pc, #280]	; (8001080 <Tx_MainFrame+0x180>)
 8000f66:	781a      	ldrb	r2, [r3, #0]
 8000f68:	4b43      	ldr	r3, [pc, #268]	; (8001078 <Tx_MainFrame+0x178>)
 8000f6a:	711a      	strb	r2, [r3, #4]
	TxBuffer[5]  = Temperature.bytes[1];
 8000f6c:	4b44      	ldr	r3, [pc, #272]	; (8001080 <Tx_MainFrame+0x180>)
 8000f6e:	785a      	ldrb	r2, [r3, #1]
 8000f70:	4b41      	ldr	r3, [pc, #260]	; (8001078 <Tx_MainFrame+0x178>)
 8000f72:	715a      	strb	r2, [r3, #5]
	TxBuffer[6]  = Temperature.bytes[2];
 8000f74:	4b42      	ldr	r3, [pc, #264]	; (8001080 <Tx_MainFrame+0x180>)
 8000f76:	789a      	ldrb	r2, [r3, #2]
 8000f78:	4b3f      	ldr	r3, [pc, #252]	; (8001078 <Tx_MainFrame+0x178>)
 8000f7a:	719a      	strb	r2, [r3, #6]
	TxBuffer[7]  = Temperature.bytes[3];
 8000f7c:	4b40      	ldr	r3, [pc, #256]	; (8001080 <Tx_MainFrame+0x180>)
 8000f7e:	78da      	ldrb	r2, [r3, #3]
 8000f80:	4b3d      	ldr	r3, [pc, #244]	; (8001078 <Tx_MainFrame+0x178>)
 8000f82:	71da      	strb	r2, [r3, #7]

	TxBuffer[8]  = Altitud.bytes[0];
 8000f84:	4b3f      	ldr	r3, [pc, #252]	; (8001084 <Tx_MainFrame+0x184>)
 8000f86:	781a      	ldrb	r2, [r3, #0]
 8000f88:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <Tx_MainFrame+0x178>)
 8000f8a:	721a      	strb	r2, [r3, #8]
	TxBuffer[9]  = Altitud.bytes[1];
 8000f8c:	4b3d      	ldr	r3, [pc, #244]	; (8001084 <Tx_MainFrame+0x184>)
 8000f8e:	785a      	ldrb	r2, [r3, #1]
 8000f90:	4b39      	ldr	r3, [pc, #228]	; (8001078 <Tx_MainFrame+0x178>)
 8000f92:	725a      	strb	r2, [r3, #9]
	TxBuffer[10] = Altitud.bytes[2];
 8000f94:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <Tx_MainFrame+0x184>)
 8000f96:	789a      	ldrb	r2, [r3, #2]
 8000f98:	4b37      	ldr	r3, [pc, #220]	; (8001078 <Tx_MainFrame+0x178>)
 8000f9a:	729a      	strb	r2, [r3, #10]
	TxBuffer[11] = Altitud.bytes[3];
 8000f9c:	4b39      	ldr	r3, [pc, #228]	; (8001084 <Tx_MainFrame+0x184>)
 8000f9e:	78da      	ldrb	r2, [r3, #3]
 8000fa0:	4b35      	ldr	r3, [pc, #212]	; (8001078 <Tx_MainFrame+0x178>)
 8000fa2:	72da      	strb	r2, [r3, #11]

	TxBuffer[12] = Presure.bytes[0];
 8000fa4:	4b38      	ldr	r3, [pc, #224]	; (8001088 <Tx_MainFrame+0x188>)
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	4b33      	ldr	r3, [pc, #204]	; (8001078 <Tx_MainFrame+0x178>)
 8000faa:	731a      	strb	r2, [r3, #12]
	TxBuffer[13] = Presure.bytes[1];
 8000fac:	4b36      	ldr	r3, [pc, #216]	; (8001088 <Tx_MainFrame+0x188>)
 8000fae:	785a      	ldrb	r2, [r3, #1]
 8000fb0:	4b31      	ldr	r3, [pc, #196]	; (8001078 <Tx_MainFrame+0x178>)
 8000fb2:	735a      	strb	r2, [r3, #13]
	TxBuffer[14] = Presure.bytes[2];
 8000fb4:	4b34      	ldr	r3, [pc, #208]	; (8001088 <Tx_MainFrame+0x188>)
 8000fb6:	789a      	ldrb	r2, [r3, #2]
 8000fb8:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <Tx_MainFrame+0x178>)
 8000fba:	739a      	strb	r2, [r3, #14]
	TxBuffer[15] = Presure.bytes[3];
 8000fbc:	4b32      	ldr	r3, [pc, #200]	; (8001088 <Tx_MainFrame+0x188>)
 8000fbe:	78da      	ldrb	r2, [r3, #3]
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <Tx_MainFrame+0x178>)
 8000fc2:	73da      	strb	r2, [r3, #15]

	TxBuffer[16] = AngleX.bytes[0];
 8000fc4:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <Tx_MainFrame+0x170>)
 8000fc6:	781a      	ldrb	r2, [r3, #0]
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <Tx_MainFrame+0x178>)
 8000fca:	741a      	strb	r2, [r3, #16]
	TxBuffer[17] = AngleX.bytes[1];
 8000fcc:	4b28      	ldr	r3, [pc, #160]	; (8001070 <Tx_MainFrame+0x170>)
 8000fce:	785a      	ldrb	r2, [r3, #1]
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <Tx_MainFrame+0x178>)
 8000fd2:	745a      	strb	r2, [r3, #17]
	TxBuffer[18] = AngleX.bytes[2];
 8000fd4:	4b26      	ldr	r3, [pc, #152]	; (8001070 <Tx_MainFrame+0x170>)
 8000fd6:	789a      	ldrb	r2, [r3, #2]
 8000fd8:	4b27      	ldr	r3, [pc, #156]	; (8001078 <Tx_MainFrame+0x178>)
 8000fda:	749a      	strb	r2, [r3, #18]
	TxBuffer[19] = AngleX.bytes[3];
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <Tx_MainFrame+0x170>)
 8000fde:	78da      	ldrb	r2, [r3, #3]
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <Tx_MainFrame+0x178>)
 8000fe2:	74da      	strb	r2, [r3, #19]

	TxBuffer[20] = AngleY.bytes[0];
 8000fe4:	4b23      	ldr	r3, [pc, #140]	; (8001074 <Tx_MainFrame+0x174>)
 8000fe6:	781a      	ldrb	r2, [r3, #0]
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <Tx_MainFrame+0x178>)
 8000fea:	751a      	strb	r2, [r3, #20]
	TxBuffer[21] = AngleY.bytes[1];
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <Tx_MainFrame+0x174>)
 8000fee:	785a      	ldrb	r2, [r3, #1]
 8000ff0:	4b21      	ldr	r3, [pc, #132]	; (8001078 <Tx_MainFrame+0x178>)
 8000ff2:	755a      	strb	r2, [r3, #21]
	TxBuffer[22] = AngleY.bytes[2];
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <Tx_MainFrame+0x174>)
 8000ff6:	789a      	ldrb	r2, [r3, #2]
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <Tx_MainFrame+0x178>)
 8000ffa:	759a      	strb	r2, [r3, #22]
	TxBuffer[23] = AngleY.bytes[3];
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <Tx_MainFrame+0x174>)
 8000ffe:	78da      	ldrb	r2, [r3, #3]
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <Tx_MainFrame+0x178>)
 8001002:	75da      	strb	r2, [r3, #23]

	TxBuffer[24] = 0xFF;
 8001004:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <Tx_MainFrame+0x178>)
 8001006:	22ff      	movs	r2, #255	; 0xff
 8001008:	761a      	strb	r2, [r3, #24]
	TxBuffer[25] = 0xFF;
 800100a:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <Tx_MainFrame+0x178>)
 800100c:	22ff      	movs	r2, #255	; 0xff
 800100e:	765a      	strb	r2, [r3, #25]
	TxBuffer[26] = 0xFF;
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <Tx_MainFrame+0x178>)
 8001012:	22ff      	movs	r2, #255	; 0xff
 8001014:	769a      	strb	r2, [r3, #26]
	TxBuffer[27] = 0xFF;
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <Tx_MainFrame+0x178>)
 8001018:	22ff      	movs	r2, #255	; 0xff
 800101a:	76da      	strb	r2, [r3, #27]

	TxBuffer[28] = 0x00;
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <Tx_MainFrame+0x178>)
 800101e:	2200      	movs	r2, #0
 8001020:	771a      	strb	r2, [r3, #28]
	TxBuffer[29] = 0x00;
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <Tx_MainFrame+0x178>)
 8001024:	2200      	movs	r2, #0
 8001026:	775a      	strb	r2, [r3, #29]
	TxBuffer[30] = 0x00;
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <Tx_MainFrame+0x178>)
 800102a:	2200      	movs	r2, #0
 800102c:	779a      	strb	r2, [r3, #30]

	for (uint8_t n = 0; n < 30; ++n) {
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	e00b      	b.n	800104c <Tx_MainFrame+0x14c>
		CheckSum += TxBuffer[n];
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4a10      	ldr	r2, [pc, #64]	; (8001078 <Tx_MainFrame+0x178>)
 8001038:	5cd2      	ldrb	r2, [r2, r3]
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <Tx_MainFrame+0x18c>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <Tx_MainFrame+0x18c>)
 8001044:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < 30; ++n) {
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	3301      	adds	r3, #1
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	2b1d      	cmp	r3, #29
 8001050:	d9f0      	bls.n	8001034 <Tx_MainFrame+0x134>
	}
	TxBuffer[31] = CheckSum;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <Tx_MainFrame+0x18c>)
 8001054:	781a      	ldrb	r2, [r3, #0]
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <Tx_MainFrame+0x178>)
 8001058:	77da      	strb	r2, [r3, #31]
	CheckSum = 0;
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <Tx_MainFrame+0x18c>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000250 	.word	0x20000250
 800106c:	40590000 	.word	0x40590000
 8001070:	20000120 	.word	0x20000120
 8001074:	20000124 	.word	0x20000124
 8001078:	20000204 	.word	0x20000204
 800107c:	20000244 	.word	0x20000244
 8001080:	20000150 	.word	0x20000150
 8001084:	20000154 	.word	0x20000154
 8001088:	20000158 	.word	0x20000158
 800108c:	2000011c 	.word	0x2000011c

08001090 <Tx_SecondaryFrame>:

void Tx_SecondaryFrame(void){
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
	TxBuffer[0] = 0xA5;
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <Tx_SecondaryFrame+0x60>)
 8001098:	22a5      	movs	r2, #165	; 0xa5
 800109a:	701a      	strb	r2, [r3, #0]
	TxBuffer[1] = 0x5A;
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <Tx_SecondaryFrame+0x60>)
 800109e:	225a      	movs	r2, #90	; 0x5a
 80010a0:	705a      	strb	r2, [r3, #1]
	TxBuffer[2] = 0x20;
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <Tx_SecondaryFrame+0x60>)
 80010a4:	2220      	movs	r2, #32
 80010a6:	709a      	strb	r2, [r3, #2]
	TxBuffer[3] = N_message;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <Tx_SecondaryFrame+0x64>)
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <Tx_SecondaryFrame+0x60>)
 80010ae:	70da      	strb	r2, [r3, #3]

	for (uint8_t n = 0; n < 30; ++n) {
 80010b0:	2300      	movs	r3, #0
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	e00b      	b.n	80010ce <Tx_SecondaryFrame+0x3e>
		CheckSum += TxBuffer[n];
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4a0d      	ldr	r2, [pc, #52]	; (80010f0 <Tx_SecondaryFrame+0x60>)
 80010ba:	5cd2      	ldrb	r2, [r2, r3]
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <Tx_SecondaryFrame+0x68>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4413      	add	r3, r2
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <Tx_SecondaryFrame+0x68>)
 80010c6:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < 30; ++n) {
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	3301      	adds	r3, #1
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b1d      	cmp	r3, #29
 80010d2:	d9f0      	bls.n	80010b6 <Tx_SecondaryFrame+0x26>
	}

	TxBuffer[31] = CheckSum;
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <Tx_SecondaryFrame+0x68>)
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <Tx_SecondaryFrame+0x60>)
 80010da:	77da      	strb	r2, [r3, #31]
	CheckSum = 0;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <Tx_SecondaryFrame+0x68>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000204 	.word	0x20000204
 80010f4:	20000244 	.word	0x20000244
 80010f8:	2000011c 	.word	0x2000011c

080010fc <Tx_CommandReplay>:

void Tx_CommandReplay(uint8_t Replay2Send){
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	Struct2transmit = CommandReplay;
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <Tx_CommandReplay+0x68>)
 8001108:	2202      	movs	r2, #2
 800110a:	701a      	strb	r2, [r3, #0]
	switch (Replay2Send) {
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d122      	bne.n	8001158 <Tx_CommandReplay+0x5c>
		case Init_Transmision:
			TxBuffer[0] = 0xA5;
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <Tx_CommandReplay+0x6c>)
 8001114:	22a5      	movs	r2, #165	; 0xa5
 8001116:	701a      	strb	r2, [r3, #0]
			TxBuffer[1] = 0x5A;
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <Tx_CommandReplay+0x6c>)
 800111a:	225a      	movs	r2, #90	; 0x5a
 800111c:	705a      	strb	r2, [r3, #1]
			TxBuffer[2] = 0x01;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <Tx_CommandReplay+0x6c>)
 8001120:	2201      	movs	r2, #1
 8001122:	709a      	strb	r2, [r3, #2]


			for (uint8_t n = 0; n < 8; ++n) {
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e00b      	b.n	8001142 <Tx_CommandReplay+0x46>
				CheckSum += TxBuffer[n];
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <Tx_CommandReplay+0x6c>)
 800112e:	5cd2      	ldrb	r2, [r2, r3]
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <Tx_CommandReplay+0x70>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4413      	add	r3, r2
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <Tx_CommandReplay+0x70>)
 800113a:	701a      	strb	r2, [r3, #0]
			for (uint8_t n = 0; n < 8; ++n) {
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	3301      	adds	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	2b07      	cmp	r3, #7
 8001146:	d9f0      	bls.n	800112a <Tx_CommandReplay+0x2e>
			}

			TxBuffer[9]= CheckSum;
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <Tx_CommandReplay+0x70>)
 800114a:	781a      	ldrb	r2, [r3, #0]
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <Tx_CommandReplay+0x6c>)
 800114e:	725a      	strb	r2, [r3, #9]
			CheckSum = 0;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <Tx_CommandReplay+0x70>)
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
			break;
 8001156:	bf00      	nop
	}
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	20000245 	.word	0x20000245
 8001168:	20000204 	.word	0x20000204
 800116c:	2000011c 	.word	0x2000011c

08001170 <BMP280_checkState>:

extern NRF24_Config_t NRF24_Configurations_Struct;

uint8_t ErrorFlags = 0;

uint8_t BMP280_checkState(void){\
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	if(BMP280_read(ID)==0x58){
 8001174:	20d0      	movs	r0, #208	; 0xd0
 8001176:	f000 f8c5 	bl	8001304 <BMP280_read>
 800117a:	4603      	mov	r3, r0
 800117c:	2b58      	cmp	r3, #88	; 0x58
 800117e:	d101      	bne.n	8001184 <BMP280_checkState+0x14>
		return 0b00000001;
 8001180:	2301      	movs	r3, #1
 8001182:	e000      	b.n	8001186 <BMP280_checkState+0x16>
	}
	return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <NRF24_checkState>:

uint8_t NRF24_checkState(void){
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	NRF24_ActualConfiguration();
 8001190:	f000 ff38 	bl	8002004 <NRF24_ActualConfiguration>
	if(NRF24_Configurations_Struct.Actual.TX_ADDR[0]==NRF24_Configurations_Struct.Actual.TX_ADDR[4]){
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <NRF24_checkState+0x2c>)
 8001196:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <NRF24_checkState+0x2c>)
 800119c:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d106      	bne.n	80011b2 <NRF24_checkState+0x26>
		if(NRF24_Configurations_Struct.Actual.TX_ADDR[0]==0xE7) return 0b00000010;
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <NRF24_checkState+0x2c>)
 80011a6:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 80011aa:	2be7      	cmp	r3, #231	; 0xe7
 80011ac:	d101      	bne.n	80011b2 <NRF24_checkState+0x26>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e000      	b.n	80011b4 <NRF24_checkState+0x28>
	}
	return 0;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000015c 	.word	0x2000015c

080011bc <mpu6050_checkState>:

uint8_t mpu6050_checkState(void){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af04      	add	r7, sp, #16
	uint8_t state;
	HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x75, 1, &state, 1, 100);
 80011c2:	2364      	movs	r3, #100	; 0x64
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	2301      	movs	r3, #1
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	2275      	movs	r2, #117	; 0x75
 80011d2:	21d0      	movs	r1, #208	; 0xd0
 80011d4:	4806      	ldr	r0, [pc, #24]	; (80011f0 <mpu6050_checkState+0x34>)
 80011d6:	f003 fddd 	bl	8004d94 <HAL_I2C_Mem_Read>
	if (state == 104) return 0b00000100;
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b68      	cmp	r3, #104	; 0x68
 80011de:	d101      	bne.n	80011e4 <mpu6050_checkState+0x28>
 80011e0:	2304      	movs	r3, #4
 80011e2:	e000      	b.n	80011e6 <mpu6050_checkState+0x2a>
	return 0;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000050c 	.word	0x2000050c

080011f4 <ErrorFlags_check>:

void ErrorFlags_check(void){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
	uint8_t BMP280_error = BMP280_checkState();
 80011fa:	f7ff ffb9 	bl	8001170 <BMP280_checkState>
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	uint8_t NRF24_error = NRF24_checkState();
 8001202:	f7ff ffc3 	bl	800118c <NRF24_checkState>
 8001206:	4603      	mov	r3, r0
 8001208:	71bb      	strb	r3, [r7, #6]
	uint8_t mpu6050_error = mpu6050_checkState();
 800120a:	f7ff ffd7 	bl	80011bc <mpu6050_checkState>
 800120e:	4603      	mov	r3, r0
 8001210:	717b      	strb	r3, [r7, #5]
	ErrorFlags = 0;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <ErrorFlags_check+0x40>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
	ErrorFlags = BMP280_error|NRF24_error|mpu6050_error;
 8001218:	79fa      	ldrb	r2, [r7, #7]
 800121a:	79bb      	ldrb	r3, [r7, #6]
 800121c:	4313      	orrs	r3, r2
 800121e:	b2da      	uxtb	r2, r3
 8001220:	797b      	ldrb	r3, [r7, #5]
 8001222:	4313      	orrs	r3, r2
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b03      	ldr	r3, [pc, #12]	; (8001234 <ErrorFlags_check+0x40>)
 8001228:	701a      	strb	r2, [r3, #0]
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000128 	.word	0x20000128

08001238 <task_init_1ms>:

/**
  * @fn  	task_init_1ms
  * @brief  Inicializaciones para tarea de 1 milisegundo
  */
void task_init_1ms(void){
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <task_1ms>:

/**
  * @fn  	task_1ms
  * @brief  Ejecucion de tareas de 1 milisegundo
  */
void task_1ms(void){
 8001246:	b580      	push	{r7, lr}
 8001248:	af00      	add	r7, sp, #0
	NRF24_StateMachine();
 800124a:	f001 fbcf 	bl	80029ec <NRF24_StateMachine>

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}

08001252 <task_init_10ms>:

/**
  * @fn  	task_init_10ms
  * @brief  Inicializaciones para tarea de 10 milisegundos
  */
void task_init_10ms(void){
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <task_10ms>:

/**
  * @fn  	task_10ms
  * @brief  Ejecucion de tareas de 10 milisegundos
  */
void task_10ms(void){
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	MPU6050_calculate();
 8001264:	f001 ffb6 	bl	80031d4 <MPU6050_calculate>

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <task_init_100ms>:

/**
  * @fn  	task_init_100ms
  * @brief  Inicializaciones para tarea de 100 milisegundos
  */
void task_init_100ms(void){
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <task_100ms>:

/**
  * @fn  	task_100ms
  * @brief  Ejecucion de tareas de 100 milisegundos
  */
void task_100ms(void){
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
	BMP280_calculate();
 800127e:	f000 fd1b 	bl	8001cb8 <BMP280_calculate>
	ErrorFlags_check();
 8001282:	f7ff ffb7 	bl	80011f4 <ErrorFlags_check>

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}

0800128a <task_init_1000ms>:

/**
  * @fn  	task_init_1000ms
  * @brief  Inicializaciones para tarea de 1000 milisegundos
  */
void task_init_1000ms(void){
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <task_1000ms>:

/**
  * @fn  	task_1000ms
  * @brief  Ejecucion de tareas de 1000 milisegundos
  */
void task_1000ms(void){
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <BMP280_write>:
int32_t T_raw, P_raw, t_fine;
S32_t Temperature, Altitud;
U32_t Presure;


void BMP280_write(uint8_t Address, uint8_t Data){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	460a      	mov	r2, r1
 80012b2:	71fb      	strb	r3, [r7, #7]
 80012b4:	4613      	mov	r3, r2
 80012b6:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012be:	480f      	ldr	r0, [pc, #60]	; (80012fc <BMP280_write+0x54>)
 80012c0:	f003 fb10 	bl	80048e4 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80012ce:	1df9      	adds	r1, r7, #7
 80012d0:	2364      	movs	r3, #100	; 0x64
 80012d2:	2201      	movs	r2, #1
 80012d4:	480a      	ldr	r0, [pc, #40]	; (8001300 <BMP280_write+0x58>)
 80012d6:	f005 f896 	bl	8006406 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80012da:	1db9      	adds	r1, r7, #6
 80012dc:	2364      	movs	r3, #100	; 0x64
 80012de:	2201      	movs	r2, #1
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <BMP280_write+0x58>)
 80012e2:	f005 f890 	bl	8006406 <HAL_SPI_Transmit>

	BMP280_unselect();
 80012e6:	2201      	movs	r2, #1
 80012e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ec:	4803      	ldr	r0, [pc, #12]	; (80012fc <BMP280_write+0x54>)
 80012ee:	f003 faf9 	bl	80048e4 <HAL_GPIO_WritePin>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40020000 	.word	0x40020000
 8001300:	200005b8 	.word	0x200005b8

08001304 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001314:	b2db      	uxtb	r3, r3
 8001316:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800131e:	480e      	ldr	r0, [pc, #56]	; (8001358 <BMP280_read+0x54>)
 8001320:	f003 fae0 	bl	80048e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8001324:	f107 010f 	add.w	r1, r7, #15
 8001328:	2364      	movs	r3, #100	; 0x64
 800132a:	2201      	movs	r2, #1
 800132c:	480b      	ldr	r0, [pc, #44]	; (800135c <BMP280_read+0x58>)
 800132e:	f005 f86a 	bl	8006406 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8001332:	f107 010f 	add.w	r1, r7, #15
 8001336:	2364      	movs	r3, #100	; 0x64
 8001338:	2201      	movs	r2, #1
 800133a:	4808      	ldr	r0, [pc, #32]	; (800135c <BMP280_read+0x58>)
 800133c:	f005 f9a6 	bl	800668c <HAL_SPI_Receive>
	BMP280_unselect();
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001346:	4804      	ldr	r0, [pc, #16]	; (8001358 <BMP280_read+0x54>)
 8001348:	f003 facc 	bl	80048e4 <HAL_GPIO_WritePin>

	return Buffer;
 800134c:	7bfb      	ldrb	r3, [r7, #15]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40020000 	.word	0x40020000
 800135c:	200005b8 	.word	0x200005b8

08001360 <BMP280_config>:

void BMP280_config(void){
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8001364:	2157      	movs	r1, #87	; 0x57
 8001366:	20f4      	movs	r0, #244	; 0xf4
 8001368:	f7ff ff9e 	bl	80012a8 <BMP280_write>
	BMP280_write(config, 0x10);
 800136c:	2110      	movs	r1, #16
 800136e:	20f5      	movs	r0, #245	; 0xf5
 8001370:	f7ff ff9a 	bl	80012a8 <BMP280_write>
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}

08001378 <BMP280_calibrationData>:
	uint8_t Buffer   = BMP280_read(status);
	BMP280_im_update = (Buffer&0x01);
	BMP280_measuring = (Buffer&0x08)>>3;
}

void BMP280_calibrationData(void){
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 800137e:	2388      	movs	r3, #136	; 0x88
 8001380:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]
	BMP280_select();
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800139c:	4843      	ldr	r0, [pc, #268]	; (80014ac <BMP280_calibrationData+0x134>)
 800139e:	f003 faa1 	bl	80048e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80013a2:	f107 011f 	add.w	r1, r7, #31
 80013a6:	2364      	movs	r3, #100	; 0x64
 80013a8:	2201      	movs	r2, #1
 80013aa:	4841      	ldr	r0, [pc, #260]	; (80014b0 <BMP280_calibrationData+0x138>)
 80013ac:	f005 f82b 	bl	8006406 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 80013b0:	1d39      	adds	r1, r7, #4
 80013b2:	2364      	movs	r3, #100	; 0x64
 80013b4:	2218      	movs	r2, #24
 80013b6:	483e      	ldr	r0, [pc, #248]	; (80014b0 <BMP280_calibrationData+0x138>)
 80013b8:	f005 f968 	bl	800668c <HAL_SPI_Receive>
	BMP280_unselect();
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c2:	483a      	ldr	r0, [pc, #232]	; (80014ac <BMP280_calibrationData+0x134>)
 80013c4:	f003 fa8e 	bl	80048e4 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80013c8:	797b      	ldrb	r3, [r7, #5]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	793b      	ldrb	r3, [r7, #4]
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <BMP280_calibrationData+0x13c>)
 80013da:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	79bb      	ldrb	r3, [r7, #6]
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b21a      	sxth	r2, r3
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <BMP280_calibrationData+0x140>)
 80013ec:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 80013ee:	7a7b      	ldrb	r3, [r7, #9]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	7a3b      	ldrb	r3, [r7, #8]
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <BMP280_calibrationData+0x144>)
 80013fe:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8001400:	7afb      	ldrb	r3, [r7, #11]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	b21a      	sxth	r2, r3
 8001406:	7abb      	ldrb	r3, [r7, #10]
 8001408:	b21b      	sxth	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	b21b      	sxth	r3, r3
 800140e:	b29a      	uxth	r2, r3
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <BMP280_calibrationData+0x148>)
 8001412:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8001414:	7b7b      	ldrb	r3, [r7, #13]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	b21a      	sxth	r2, r3
 800141a:	7b3b      	ldrb	r3, [r7, #12]
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b21a      	sxth	r2, r3
 8001422:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <BMP280_calibrationData+0x14c>)
 8001424:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	b21a      	sxth	r2, r3
 800142c:	7bbb      	ldrb	r3, [r7, #14]
 800142e:	b21b      	sxth	r3, r3
 8001430:	4313      	orrs	r3, r2
 8001432:	b21a      	sxth	r2, r3
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <BMP280_calibrationData+0x150>)
 8001436:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8001438:	7c7b      	ldrb	r3, [r7, #17]
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	7c3b      	ldrb	r3, [r7, #16]
 8001440:	b21b      	sxth	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b21a      	sxth	r2, r3
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <BMP280_calibrationData+0x154>)
 8001448:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 800144a:	7cfb      	ldrb	r3, [r7, #19]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	b21a      	sxth	r2, r3
 8001450:	7cbb      	ldrb	r3, [r7, #18]
 8001452:	b21b      	sxth	r3, r3
 8001454:	4313      	orrs	r3, r2
 8001456:	b21a      	sxth	r2, r3
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <BMP280_calibrationData+0x158>)
 800145a:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 800145c:	7d7b      	ldrb	r3, [r7, #21]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21a      	sxth	r2, r3
 8001462:	7d3b      	ldrb	r3, [r7, #20]
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21a      	sxth	r2, r3
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <BMP280_calibrationData+0x15c>)
 800146c:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b21a      	sxth	r2, r3
 8001474:	7dbb      	ldrb	r3, [r7, #22]
 8001476:	b21b      	sxth	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b21a      	sxth	r2, r3
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <BMP280_calibrationData+0x160>)
 800147e:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8001480:	7e7b      	ldrb	r3, [r7, #25]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	b21a      	sxth	r2, r3
 8001486:	7e3b      	ldrb	r3, [r7, #24]
 8001488:	b21b      	sxth	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <BMP280_calibrationData+0x164>)
 8001490:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 8001492:	7efb      	ldrb	r3, [r7, #27]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	b21a      	sxth	r2, r3
 8001498:	7ebb      	ldrb	r3, [r7, #26]
 800149a:	b21b      	sxth	r3, r3
 800149c:	4313      	orrs	r3, r2
 800149e:	b21a      	sxth	r2, r3
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <BMP280_calibrationData+0x168>)
 80014a2:	801a      	strh	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	3720      	adds	r7, #32
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40020000 	.word	0x40020000
 80014b0:	200005b8 	.word	0x200005b8
 80014b4:	2000012a 	.word	0x2000012a
 80014b8:	2000012e 	.word	0x2000012e
 80014bc:	20000130 	.word	0x20000130
 80014c0:	2000012c 	.word	0x2000012c
 80014c4:	20000132 	.word	0x20000132
 80014c8:	20000134 	.word	0x20000134
 80014cc:	20000136 	.word	0x20000136
 80014d0:	20000138 	.word	0x20000138
 80014d4:	2000013a 	.word	0x2000013a
 80014d8:	2000013c 	.word	0x2000013c
 80014dc:	2000013e 	.word	0x2000013e
 80014e0:	20000140 	.word	0x20000140

080014e4 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 80014ea:	23f7      	movs	r3, #247	; 0xf7
 80014ec:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	2300      	movs	r3, #0
 80014f4:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 80014f6:	2200      	movs	r2, #0
 80014f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014fc:	4817      	ldr	r0, [pc, #92]	; (800155c <BMP280_readRawValues+0x78>)
 80014fe:	f003 f9f1 	bl	80048e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8001502:	1df9      	adds	r1, r7, #7
 8001504:	2364      	movs	r3, #100	; 0x64
 8001506:	2201      	movs	r2, #1
 8001508:	4815      	ldr	r0, [pc, #84]	; (8001560 <BMP280_readRawValues+0x7c>)
 800150a:	f004 ff7c 	bl	8006406 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 800150e:	4639      	mov	r1, r7
 8001510:	2364      	movs	r3, #100	; 0x64
 8001512:	2206      	movs	r2, #6
 8001514:	4812      	ldr	r0, [pc, #72]	; (8001560 <BMP280_readRawValues+0x7c>)
 8001516:	f005 f8b9 	bl	800668c <HAL_SPI_Receive>
	BMP280_unselect();
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001520:	480e      	ldr	r0, [pc, #56]	; (800155c <BMP280_readRawValues+0x78>)
 8001522:	f003 f9df 	bl	80048e4 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8001526:	783b      	ldrb	r3, [r7, #0]
 8001528:	031a      	lsls	r2, r3, #12
 800152a:	787b      	ldrb	r3, [r7, #1]
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	4313      	orrs	r3, r2
 8001530:	78ba      	ldrb	r2, [r7, #2]
 8001532:	0912      	lsrs	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	4313      	orrs	r3, r2
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <BMP280_readRawValues+0x80>)
 800153a:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	031a      	lsls	r2, r3, #12
 8001540:	793b      	ldrb	r3, [r7, #4]
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	4313      	orrs	r3, r2
 8001546:	797a      	ldrb	r2, [r7, #5]
 8001548:	0912      	lsrs	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	4313      	orrs	r3, r2
 800154e:	4a06      	ldr	r2, [pc, #24]	; (8001568 <BMP280_readRawValues+0x84>)
 8001550:	6013      	str	r3, [r2, #0]
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40020000 	.word	0x40020000
 8001560:	200005b8 	.word	0x200005b8
 8001564:	20000148 	.word	0x20000148
 8001568:	20000144 	.word	0x20000144

0800156c <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 800156c:	b480      	push	{r7}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <BMP280_measureT+0x74>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	10da      	asrs	r2, r3, #3
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <BMP280_measureT+0x78>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <BMP280_measureT+0x7c>)
 8001584:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001588:	fb02 f303 	mul.w	r3, r2, r3
 800158c:	12db      	asrs	r3, r3, #11
 800158e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	111b      	asrs	r3, r3, #4
 8001594:	4a13      	ldr	r2, [pc, #76]	; (80015e4 <BMP280_measureT+0x78>)
 8001596:	8812      	ldrh	r2, [r2, #0]
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	1112      	asrs	r2, r2, #4
 800159e:	4911      	ldr	r1, [pc, #68]	; (80015e4 <BMP280_measureT+0x78>)
 80015a0:	8809      	ldrh	r1, [r1, #0]
 80015a2:	1a52      	subs	r2, r2, r1
 80015a4:	fb02 f303 	mul.w	r3, r2, r3
 80015a8:	131b      	asrs	r3, r3, #12
 80015aa:	4a10      	ldr	r2, [pc, #64]	; (80015ec <BMP280_measureT+0x80>)
 80015ac:	f9b2 2000 	ldrsh.w	r2, [r2]
 80015b0:	fb02 f303 	mul.w	r3, r2, r3
 80015b4:	139b      	asrs	r3, r3, #14
 80015b6:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4413      	add	r3, r2
 80015be:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <BMP280_measureT+0x84>)
 80015c0:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <BMP280_measureT+0x84>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	3380      	adds	r3, #128	; 0x80
 80015ce:	121b      	asrs	r3, r3, #8
 80015d0:	60fb      	str	r3, [r7, #12]
	return T;
 80015d2:	68fb      	ldr	r3, [r7, #12]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	371c      	adds	r7, #28
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	20000144 	.word	0x20000144
 80015e4:	2000012a 	.word	0x2000012a
 80015e8:	2000012e 	.word	0x2000012e
 80015ec:	20000130 	.word	0x20000130
 80015f0:	2000014c 	.word	0x2000014c

080015f4 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 80015f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015f8:	b0ca      	sub	sp, #296	; 0x128
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001600:	4baf      	ldr	r3, [pc, #700]	; (80018c0 <BMP280_measureP+0x2cc>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	17da      	asrs	r2, r3, #31
 8001606:	461c      	mov	r4, r3
 8001608:	4615      	mov	r5, r2
 800160a:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800160e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001612:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001616:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800161a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800161e:	fb03 f102 	mul.w	r1, r3, r2
 8001622:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001626:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	18ca      	adds	r2, r1, r3
 8001630:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001634:	fba3 8903 	umull	r8, r9, r3, r3
 8001638:	eb02 0309 	add.w	r3, r2, r9
 800163c:	4699      	mov	r9, r3
 800163e:	4ba1      	ldr	r3, [pc, #644]	; (80018c4 <BMP280_measureP+0x2d0>)
 8001640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001644:	b21b      	sxth	r3, r3
 8001646:	17da      	asrs	r2, r3, #31
 8001648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800164c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001650:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001654:	4603      	mov	r3, r0
 8001656:	fb03 f209 	mul.w	r2, r3, r9
 800165a:	460b      	mov	r3, r1
 800165c:	fb08 f303 	mul.w	r3, r8, r3
 8001660:	4413      	add	r3, r2
 8001662:	4602      	mov	r2, r0
 8001664:	fba8 1202 	umull	r1, r2, r8, r2
 8001668:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800166c:	460a      	mov	r2, r1
 800166e:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001672:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001676:	4413      	add	r3, r2
 8001678:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800167c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001680:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001684:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001688:	4b8f      	ldr	r3, [pc, #572]	; (80018c8 <BMP280_measureP+0x2d4>)
 800168a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168e:	b21b      	sxth	r3, r3
 8001690:	17da      	asrs	r2, r3, #31
 8001692:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001696:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800169a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800169e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80016a2:	462a      	mov	r2, r5
 80016a4:	fb02 f203 	mul.w	r2, r2, r3
 80016a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016ac:	4621      	mov	r1, r4
 80016ae:	fb01 f303 	mul.w	r3, r1, r3
 80016b2:	441a      	add	r2, r3
 80016b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016b8:	4621      	mov	r1, r4
 80016ba:	fba3 1301 	umull	r1, r3, r3, r1
 80016be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80016c2:	460b      	mov	r3, r1
 80016c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80016c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80016cc:	18d3      	adds	r3, r2, r3
 80016ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80016d2:	f04f 0000 	mov.w	r0, #0
 80016d6:	f04f 0100 	mov.w	r1, #0
 80016da:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80016de:	462b      	mov	r3, r5
 80016e0:	0459      	lsls	r1, r3, #17
 80016e2:	4623      	mov	r3, r4
 80016e4:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80016e8:	4623      	mov	r3, r4
 80016ea:	0458      	lsls	r0, r3, #17
 80016ec:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80016f0:	1814      	adds	r4, r2, r0
 80016f2:	643c      	str	r4, [r7, #64]	; 0x40
 80016f4:	414b      	adcs	r3, r1
 80016f6:	647b      	str	r3, [r7, #68]	; 0x44
 80016f8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80016fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001700:	4b72      	ldr	r3, [pc, #456]	; (80018cc <BMP280_measureP+0x2d8>)
 8001702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001706:	b21b      	sxth	r3, r3
 8001708:	17da      	asrs	r2, r3, #31
 800170a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800170e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001712:	f04f 0000 	mov.w	r0, #0
 8001716:	f04f 0100 	mov.w	r1, #0
 800171a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800171e:	00d9      	lsls	r1, r3, #3
 8001720:	2000      	movs	r0, #0
 8001722:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001726:	1814      	adds	r4, r2, r0
 8001728:	63bc      	str	r4, [r7, #56]	; 0x38
 800172a:	414b      	adcs	r3, r1
 800172c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800172e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001732:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001736:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800173a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800173e:	fb03 f102 	mul.w	r1, r3, r2
 8001742:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001746:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800174a:	fb02 f303 	mul.w	r3, r2, r3
 800174e:	18ca      	adds	r2, r1, r3
 8001750:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001754:	fba3 1303 	umull	r1, r3, r3, r3
 8001758:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800175c:	460b      	mov	r3, r1
 800175e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001766:	18d3      	adds	r3, r2, r3
 8001768:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800176c:	4b58      	ldr	r3, [pc, #352]	; (80018d0 <BMP280_measureP+0x2dc>)
 800176e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001772:	b21b      	sxth	r3, r3
 8001774:	17da      	asrs	r2, r3, #31
 8001776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800177a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800177e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001782:	462b      	mov	r3, r5
 8001784:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001788:	4642      	mov	r2, r8
 800178a:	fb02 f203 	mul.w	r2, r2, r3
 800178e:	464b      	mov	r3, r9
 8001790:	4621      	mov	r1, r4
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	4413      	add	r3, r2
 8001798:	4622      	mov	r2, r4
 800179a:	4641      	mov	r1, r8
 800179c:	fba2 1201 	umull	r1, r2, r2, r1
 80017a0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80017a4:	460a      	mov	r2, r1
 80017a6:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80017aa:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80017ae:	4413      	add	r3, r2
 80017b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80017b4:	f04f 0000 	mov.w	r0, #0
 80017b8:	f04f 0100 	mov.w	r1, #0
 80017bc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80017c0:	4623      	mov	r3, r4
 80017c2:	0a18      	lsrs	r0, r3, #8
 80017c4:	462b      	mov	r3, r5
 80017c6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80017ca:	462b      	mov	r3, r5
 80017cc:	1219      	asrs	r1, r3, #8
 80017ce:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <BMP280_measureP+0x2e0>)
 80017d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	17da      	asrs	r2, r3, #31
 80017d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80017dc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80017e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017e4:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80017e8:	464a      	mov	r2, r9
 80017ea:	fb02 f203 	mul.w	r2, r2, r3
 80017ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80017f2:	4644      	mov	r4, r8
 80017f4:	fb04 f303 	mul.w	r3, r4, r3
 80017f8:	441a      	add	r2, r3
 80017fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017fe:	4644      	mov	r4, r8
 8001800:	fba3 4304 	umull	r4, r3, r3, r4
 8001804:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001808:	4623      	mov	r3, r4
 800180a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800180e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001812:	18d3      	adds	r3, r2, r3
 8001814:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001824:	464c      	mov	r4, r9
 8001826:	0323      	lsls	r3, r4, #12
 8001828:	4644      	mov	r4, r8
 800182a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800182e:	4644      	mov	r4, r8
 8001830:	0322      	lsls	r2, r4, #12
 8001832:	1884      	adds	r4, r0, r2
 8001834:	633c      	str	r4, [r7, #48]	; 0x30
 8001836:	eb41 0303 	adc.w	r3, r1, r3
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
 800183c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001840:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001844:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001848:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800184c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001850:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001854:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <BMP280_measureP+0x2e4>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	b29b      	uxth	r3, r3
 800185a:	2200      	movs	r2, #0
 800185c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001860:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001864:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001868:	462b      	mov	r3, r5
 800186a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800186e:	4642      	mov	r2, r8
 8001870:	fb02 f203 	mul.w	r2, r2, r3
 8001874:	464b      	mov	r3, r9
 8001876:	4621      	mov	r1, r4
 8001878:	fb01 f303 	mul.w	r3, r1, r3
 800187c:	4413      	add	r3, r2
 800187e:	4622      	mov	r2, r4
 8001880:	4641      	mov	r1, r8
 8001882:	fba2 1201 	umull	r1, r2, r2, r1
 8001886:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800188a:	460a      	mov	r2, r1
 800188c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001890:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001894:	4413      	add	r3, r2
 8001896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80018a6:	4629      	mov	r1, r5
 80018a8:	104a      	asrs	r2, r1, #1
 80018aa:	4629      	mov	r1, r5
 80018ac:	17cb      	asrs	r3, r1, #31
 80018ae:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 80018b2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80018b6:	4313      	orrs	r3, r2
 80018b8:	d110      	bne.n	80018dc <BMP280_measureP+0x2e8>
	{
	return 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e154      	b.n	8001b68 <BMP280_measureP+0x574>
 80018be:	bf00      	nop
 80018c0:	2000014c 	.word	0x2000014c
 80018c4:	2000013a 	.word	0x2000013a
 80018c8:	20000138 	.word	0x20000138
 80018cc:	20000136 	.word	0x20000136
 80018d0:	20000134 	.word	0x20000134
 80018d4:	20000132 	.word	0x20000132
 80018d8:	2000012c 	.word	0x2000012c
	}
	p = 1048576-adc_P;
 80018dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018e0:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80018e4:	17da      	asrs	r2, r3, #31
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018ea:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80018ee:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 80018f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018f6:	105b      	asrs	r3, r3, #1
 80018f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80018fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001900:	07db      	lsls	r3, r3, #31
 8001902:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001906:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800190a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800190e:	4621      	mov	r1, r4
 8001910:	1a89      	subs	r1, r1, r2
 8001912:	67b9      	str	r1, [r7, #120]	; 0x78
 8001914:	4629      	mov	r1, r5
 8001916:	eb61 0303 	sbc.w	r3, r1, r3
 800191a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800191c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001920:	4622      	mov	r2, r4
 8001922:	462b      	mov	r3, r5
 8001924:	1891      	adds	r1, r2, r2
 8001926:	6239      	str	r1, [r7, #32]
 8001928:	415b      	adcs	r3, r3
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
 800192c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001930:	4621      	mov	r1, r4
 8001932:	1851      	adds	r1, r2, r1
 8001934:	61b9      	str	r1, [r7, #24]
 8001936:	4629      	mov	r1, r5
 8001938:	414b      	adcs	r3, r1
 800193a:	61fb      	str	r3, [r7, #28]
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001948:	4649      	mov	r1, r9
 800194a:	018b      	lsls	r3, r1, #6
 800194c:	4641      	mov	r1, r8
 800194e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001952:	4641      	mov	r1, r8
 8001954:	018a      	lsls	r2, r1, #6
 8001956:	4641      	mov	r1, r8
 8001958:	1889      	adds	r1, r1, r2
 800195a:	6139      	str	r1, [r7, #16]
 800195c:	4649      	mov	r1, r9
 800195e:	eb43 0101 	adc.w	r1, r3, r1
 8001962:	6179      	str	r1, [r7, #20]
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001970:	4649      	mov	r1, r9
 8001972:	008b      	lsls	r3, r1, #2
 8001974:	4641      	mov	r1, r8
 8001976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800197a:	4641      	mov	r1, r8
 800197c:	008a      	lsls	r2, r1, #2
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	4603      	mov	r3, r0
 8001984:	4622      	mov	r2, r4
 8001986:	189b      	adds	r3, r3, r2
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	460b      	mov	r3, r1
 800198c:	462a      	mov	r2, r5
 800198e:	eb42 0303 	adc.w	r3, r2, r3
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80019a0:	4649      	mov	r1, r9
 80019a2:	008b      	lsls	r3, r1, #2
 80019a4:	4641      	mov	r1, r8
 80019a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80019aa:	4641      	mov	r1, r8
 80019ac:	008a      	lsls	r2, r1, #2
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	4603      	mov	r3, r0
 80019b4:	4622      	mov	r2, r4
 80019b6:	189b      	adds	r3, r3, r2
 80019b8:	673b      	str	r3, [r7, #112]	; 0x70
 80019ba:	462b      	mov	r3, r5
 80019bc:	460a      	mov	r2, r1
 80019be:	eb42 0303 	adc.w	r3, r2, r3
 80019c2:	677b      	str	r3, [r7, #116]	; 0x74
 80019c4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80019c8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80019cc:	f7ff f89c 	bl	8000b08 <__aeabi_ldivmod>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80019d8:	4b66      	ldr	r3, [pc, #408]	; (8001b74 <BMP280_measureP+0x580>)
 80019da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019de:	b21b      	sxth	r3, r3
 80019e0:	17da      	asrs	r2, r3, #31
 80019e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80019e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80019e6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80019ea:	f04f 0000 	mov.w	r0, #0
 80019ee:	f04f 0100 	mov.w	r1, #0
 80019f2:	0b50      	lsrs	r0, r2, #13
 80019f4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019f8:	1359      	asrs	r1, r3, #13
 80019fa:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80019fe:	462b      	mov	r3, r5
 8001a00:	fb00 f203 	mul.w	r2, r0, r3
 8001a04:	4623      	mov	r3, r4
 8001a06:	fb03 f301 	mul.w	r3, r3, r1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4622      	mov	r2, r4
 8001a0e:	fba2 1200 	umull	r1, r2, r2, r0
 8001a12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001a16:	460a      	mov	r2, r1
 8001a18:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001a1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001a20:	4413      	add	r3, r2
 8001a22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001a26:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001a2a:	f04f 0000 	mov.w	r0, #0
 8001a2e:	f04f 0100 	mov.w	r1, #0
 8001a32:	0b50      	lsrs	r0, r2, #13
 8001a34:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a38:	1359      	asrs	r1, r3, #13
 8001a3a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001a3e:	462b      	mov	r3, r5
 8001a40:	fb00 f203 	mul.w	r2, r0, r3
 8001a44:	4623      	mov	r3, r4
 8001a46:	fb03 f301 	mul.w	r3, r3, r1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4622      	mov	r2, r4
 8001a4e:	fba2 1200 	umull	r1, r2, r2, r0
 8001a52:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001a56:	460a      	mov	r2, r1
 8001a58:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001a5c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001a60:	4413      	add	r3, r2
 8001a62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001a72:	4621      	mov	r1, r4
 8001a74:	0e4a      	lsrs	r2, r1, #25
 8001a76:	4629      	mov	r1, r5
 8001a78:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001a7c:	4629      	mov	r1, r5
 8001a7e:	164b      	asrs	r3, r1, #25
 8001a80:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001a84:	4b3c      	ldr	r3, [pc, #240]	; (8001b78 <BMP280_measureP+0x584>)
 8001a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	17da      	asrs	r2, r3, #31
 8001a8e:	663b      	str	r3, [r7, #96]	; 0x60
 8001a90:	667a      	str	r2, [r7, #100]	; 0x64
 8001a92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a96:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a9a:	462a      	mov	r2, r5
 8001a9c:	fb02 f203 	mul.w	r2, r2, r3
 8001aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	fba2 1201 	umull	r1, r2, r2, r1
 8001ab6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001aba:	460a      	mov	r2, r1
 8001abc:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001ac0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	0cca      	lsrs	r2, r1, #19
 8001ada:	4629      	mov	r1, r5
 8001adc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001ae0:	4629      	mov	r1, r5
 8001ae2:	14cb      	asrs	r3, r1, #19
 8001ae4:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001ae8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001aec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001af0:	1884      	adds	r4, r0, r2
 8001af2:	65bc      	str	r4, [r7, #88]	; 0x58
 8001af4:	eb41 0303 	adc.w	r3, r1, r3
 8001af8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001afa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001afe:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001b02:	4621      	mov	r1, r4
 8001b04:	1889      	adds	r1, r1, r2
 8001b06:	6539      	str	r1, [r7, #80]	; 0x50
 8001b08:	4629      	mov	r1, r5
 8001b0a:	eb43 0101 	adc.w	r1, r3, r1
 8001b0e:	6579      	str	r1, [r7, #84]	; 0x54
 8001b10:	f04f 0000 	mov.w	r0, #0
 8001b14:	f04f 0100 	mov.w	r1, #0
 8001b18:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001b1c:	4623      	mov	r3, r4
 8001b1e:	0a18      	lsrs	r0, r3, #8
 8001b20:	462b      	mov	r3, r5
 8001b22:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b26:	462b      	mov	r3, r5
 8001b28:	1219      	asrs	r1, r3, #8
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <BMP280_measureP+0x588>)
 8001b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	17da      	asrs	r2, r3, #31
 8001b34:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b36:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001b44:	464c      	mov	r4, r9
 8001b46:	0123      	lsls	r3, r4, #4
 8001b48:	4644      	mov	r4, r8
 8001b4a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001b4e:	4644      	mov	r4, r8
 8001b50:	0122      	lsls	r2, r4, #4
 8001b52:	1884      	adds	r4, r0, r2
 8001b54:	603c      	str	r4, [r7, #0]
 8001b56:	eb41 0303 	adc.w	r3, r1, r3
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b60:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001b64:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b74:	20000140 	.word	0x20000140
 8001b78:	2000013e 	.word	0x2000013e
 8001b7c:	2000013c 	.word	0x2000013c

08001b80 <BMP280_measureH>:

int32_t BMP280_measureH(int32_t Pres, int32_t Temp){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <BMP280_measureH+0x14>
 8001b90:	2300      	movs	r3, #0
 8001b92:	e062      	b.n	8001c5a <BMP280_measureH+0xda>
	var1 = -log((((double)Pres)/100)/101325);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7fe fc75 	bl	8000484 <__aeabi_i2d>
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <BMP280_measureH+0x100>)
 8001ba0:	f7fe fe04 	bl	80007ac <__aeabi_ddiv>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	a32e      	add	r3, pc, #184	; (adr r3, 8001c68 <BMP280_measureH+0xe8>)
 8001bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb2:	f7fe fdfb 	bl	80007ac <__aeabi_ddiv>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	ec43 2b17 	vmov	d7, r2, r3
 8001bbe:	eeb0 0a47 	vmov.f32	s0, s14
 8001bc2:	eef0 0a67 	vmov.f32	s1, s15
 8001bc6:	f007 fb57 	bl	8009278 <log>
 8001bca:	ec53 2b10 	vmov	r2, r3, d0
 8001bce:	4611      	mov	r1, r2
 8001bd0:	61b9      	str	r1, [r7, #24]
 8001bd2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001bd6:	61fb      	str	r3, [r7, #28]

	if(var1 == 0) return 0;
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001be4:	f7fe ff20 	bl	8000a28 <__aeabi_dcmpeq>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <BMP280_measureH+0x72>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e033      	b.n	8001c5a <BMP280_measureH+0xda>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8001bf2:	6838      	ldr	r0, [r7, #0]
 8001bf4:	f7fe fc46 	bl	8000484 <__aeabi_i2d>
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <BMP280_measureH+0x100>)
 8001bfe:	f7fe fdd5 	bl	80007ac <__aeabi_ddiv>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	a319      	add	r3, pc, #100	; (adr r3, 8001c70 <BMP280_measureH+0xf0>)
 8001c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c10:	f7fe faec 	bl	80001ec <__adddf3>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	a117      	add	r1, pc, #92	; (adr r1, 8001c78 <BMP280_measureH+0xf8>)
 8001c1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c1e:	f7fe fdc5 	bl	80007ac <__aeabi_ddiv>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	e9c7 2304 	strd	r2, r3, [r7, #16]
	h = (var1/var2)*100;
 8001c2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c32:	f7fe fdbb 	bl	80007ac <__aeabi_ddiv>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <BMP280_measureH+0x100>)
 8001c44:	f7fe fc88 	bl	8000558 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t)h;
 8001c50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c54:	f7fe ff30 	bl	8000ab8 <__aeabi_d2iz>
 8001c58:	4603      	mov	r3, r0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3720      	adds	r7, #32
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	f3af 8000 	nop.w
 8001c68:	00000000 	.word	0x00000000
 8001c6c:	40f8bcd0 	.word	0x40f8bcd0
 8001c70:	66666666 	.word	0x66666666
 8001c74:	40711266 	.word	0x40711266
 8001c78:	ca402a92 	.word	0xca402a92
 8001c7c:	3fa17e3e 	.word	0x3fa17e3e
 8001c80:	40590000 	.word	0x40590000

08001c84 <BMP280_init>:

void BMP280_init(void){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c8e:	4808      	ldr	r0, [pc, #32]	; (8001cb0 <BMP280_init+0x2c>)
 8001c90:	f002 fe28 	bl	80048e4 <HAL_GPIO_WritePin>
	BMP280_config();
 8001c94:	f7ff fb64 	bl	8001360 <BMP280_config>
	BMP280_ID = BMP280_read(0x89);
 8001c98:	2089      	movs	r0, #137	; 0x89
 8001c9a:	f7ff fb33 	bl	8001304 <BMP280_read>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <BMP280_init+0x30>)
 8001ca4:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001ca6:	f7ff fb67 	bl	8001378 <BMP280_calibrationData>
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	20000129 	.word	0x20000129

08001cb8 <BMP280_calculate>:

void BMP280_calculate(void){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	BMP280_readRawValues();
 8001cbc:	f7ff fc12 	bl	80014e4 <BMP280_readRawValues>
	Temperature.data = BMP280_measureT(T_raw);
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <BMP280_calculate+0x4c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fc51 	bl	800156c <BMP280_measureT>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <BMP280_calculate+0x50>)
 8001cce:	6013      	str	r3, [r2, #0]
	Presure.data     = (BMP280_measureP(P_raw)*100)/256;
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <BMP280_calculate+0x54>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fc8d 	bl	80015f4 <BMP280_measureP>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2264      	movs	r2, #100	; 0x64
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <BMP280_calculate+0x58>)
 8001ce8:	601a      	str	r2, [r3, #0]
	Altitud.data = BMP280_measureH(Presure.data, Temperature.data);
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <BMP280_calculate+0x58>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <BMP280_calculate+0x50>)
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff43 	bl	8001b80 <BMP280_measureH>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <BMP280_calculate+0x5c>)
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000144 	.word	0x20000144
 8001d08:	20000150 	.word	0x20000150
 8001d0c:	20000148 	.word	0x20000148
 8001d10:	20000158 	.word	0x20000158
 8001d14:	20000154 	.word	0x20000154

08001d18 <NRF24_write>:

uint8_t N_message, Struct2transmit, Transmision_cont;



void NRF24_write(uint8_t Adr, uint8_t data){
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	460a      	mov	r2, r1
 8001d22:	71fb      	strb	r3, [r7, #7]
 8001d24:	4613      	mov	r3, r2
 8001d26:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f043 0320 	orr.w	r3, r3, #32
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8001d32:	2200      	movs	r2, #0
 8001d34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d38:	480c      	ldr	r0, [pc, #48]	; (8001d6c <NRF24_write+0x54>)
 8001d3a:	f002 fdd3 	bl	80048e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001d3e:	1dfb      	adds	r3, r7, #7
 8001d40:	2201      	movs	r2, #1
 8001d42:	4619      	mov	r1, r3
 8001d44:	480a      	ldr	r0, [pc, #40]	; (8001d70 <NRF24_write+0x58>)
 8001d46:	f004 ff69 	bl	8006c1c <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &data, 1);
 8001d4a:	1dbb      	adds	r3, r7, #6
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4807      	ldr	r0, [pc, #28]	; (8001d70 <NRF24_write+0x58>)
 8001d52:	f004 ff63 	bl	8006c1c <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 8001d56:	2201      	movs	r2, #1
 8001d58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d5c:	4803      	ldr	r0, [pc, #12]	; (8001d6c <NRF24_write+0x54>)
 8001d5e:	f002 fdc1 	bl	80048e4 <HAL_GPIO_WritePin>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	20000560 	.word	0x20000560

08001d74 <NRF24_Addr_write>:

void NRF24_Addr_write(uint8_t Adr,uint8_t *ADDRESS){
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
	Adr |= W_REGISTER;
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f043 0320 	orr.w	r3, r3, #32
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[5];
	buffer[0] = ADDRESS[4];
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	791b      	ldrb	r3, [r3, #4]
 8001d8e:	723b      	strb	r3, [r7, #8]
	buffer[1] = ADDRESS[3];
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	78db      	ldrb	r3, [r3, #3]
 8001d94:	727b      	strb	r3, [r7, #9]
	buffer[2] = ADDRESS[2];
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	789b      	ldrb	r3, [r3, #2]
 8001d9a:	72bb      	strb	r3, [r7, #10]
	buffer[3] = ADDRESS[1];
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	785b      	ldrb	r3, [r3, #1]
 8001da0:	72fb      	strb	r3, [r7, #11]
	buffer[4] = ADDRESS[0];
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	733b      	strb	r3, [r7, #12]

	NRF24_select();
 8001da8:	2200      	movs	r2, #0
 8001daa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dae:	4812      	ldr	r0, [pc, #72]	; (8001df8 <NRF24_Addr_write+0x84>)
 8001db0:	f002 fd98 	bl	80048e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001db4:	1dfb      	adds	r3, r7, #7
 8001db6:	2201      	movs	r2, #1
 8001db8:	4619      	mov	r1, r3
 8001dba:	4810      	ldr	r0, [pc, #64]	; (8001dfc <NRF24_Addr_write+0x88>)
 8001dbc:	f004 ff2e 	bl	8006c1c <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e00b      	b.n	8001dde <NRF24_Addr_write+0x6a>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &buffer[n], 1);
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	f107 0208 	add.w	r2, r7, #8
 8001dcc:	4413      	add	r3, r2
 8001dce:	2201      	movs	r2, #1
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480a      	ldr	r0, [pc, #40]	; (8001dfc <NRF24_Addr_write+0x88>)
 8001dd4:	f004 ff22 	bl	8006c1c <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d9f0      	bls.n	8001dc6 <NRF24_Addr_write+0x52>
	}

	NRF24_unselect();
 8001de4:	2201      	movs	r2, #1
 8001de6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dea:	4803      	ldr	r0, [pc, #12]	; (8001df8 <NRF24_Addr_write+0x84>)
 8001dec:	f002 fd7a 	bl	80048e4 <HAL_GPIO_WritePin>

}
 8001df0:	bf00      	nop
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40020400 	.word	0x40020400
 8001dfc:	20000560 	.word	0x20000560

08001e00 <NRF24_read>:

uint8_t NRF24_read(uint8_t Adr){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
	uint8_t Replay;
	NRF24_select();
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e10:	480d      	ldr	r0, [pc, #52]	; (8001e48 <NRF24_read+0x48>)
 8001e12:	f002 fd67 	bl	80048e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001e16:	1dfb      	adds	r3, r7, #7
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	480b      	ldr	r0, [pc, #44]	; (8001e4c <NRF24_read+0x4c>)
 8001e1e:	f004 fefd 	bl	8006c1c <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(SPI_NRF24, &Replay, 1);
 8001e22:	f107 030f 	add.w	r3, r7, #15
 8001e26:	2201      	movs	r2, #1
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4808      	ldr	r0, [pc, #32]	; (8001e4c <NRF24_read+0x4c>)
 8001e2c:	f004 ffa8 	bl	8006d80 <HAL_SPI_Receive_DMA>
	NRF24_unselect();
 8001e30:	2201      	movs	r2, #1
 8001e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e36:	4804      	ldr	r0, [pc, #16]	; (8001e48 <NRF24_read+0x48>)
 8001e38:	f002 fd54 	bl	80048e4 <HAL_GPIO_WritePin>
	return Replay;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	20000560 	.word	0x20000560

08001e50 <NRF24_Addr_read>:

void NRF24_Addr_read(uint8_t Adr){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[5];
	NRF24_select();
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e60:	4836      	ldr	r0, [pc, #216]	; (8001f3c <NRF24_Addr_read+0xec>)
 8001e62:	f002 fd3f 	bl	80048e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001e66:	1dfb      	adds	r3, r7, #7
 8001e68:	2201      	movs	r2, #1
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4834      	ldr	r0, [pc, #208]	; (8001f40 <NRF24_Addr_read+0xf0>)
 8001e6e:	f004 fed5 	bl	8006c1c <HAL_SPI_Transmit_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 8001e72:	2300      	movs	r3, #0
 8001e74:	73fb      	strb	r3, [r7, #15]
 8001e76:	e00b      	b.n	8001e90 <NRF24_Addr_read+0x40>
		HAL_SPI_Receive_DMA(SPI_NRF24, &Buffer[i], 1);
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	f107 0208 	add.w	r2, r7, #8
 8001e7e:	4413      	add	r3, r2
 8001e80:	2201      	movs	r2, #1
 8001e82:	4619      	mov	r1, r3
 8001e84:	482e      	ldr	r0, [pc, #184]	; (8001f40 <NRF24_Addr_read+0xf0>)
 8001e86:	f004 ff7b 	bl	8006d80 <HAL_SPI_Receive_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	73fb      	strb	r3, [r7, #15]
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d9f0      	bls.n	8001e78 <NRF24_Addr_read+0x28>
	}
	NRF24_unselect();
 8001e96:	2201      	movs	r2, #1
 8001e98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e9c:	4827      	ldr	r0, [pc, #156]	; (8001f3c <NRF24_Addr_read+0xec>)
 8001e9e:	f002 fd21 	bl	80048e4 <HAL_GPIO_WritePin>
	switch (Adr) {
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	2b10      	cmp	r3, #16
 8001ea6:	d030      	beq.n	8001f0a <NRF24_Addr_read+0xba>
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	dc43      	bgt.n	8001f34 <NRF24_Addr_read+0xe4>
 8001eac:	2b0a      	cmp	r3, #10
 8001eae:	d002      	beq.n	8001eb6 <NRF24_Addr_read+0x66>
 8001eb0:	2b0b      	cmp	r3, #11
 8001eb2:	d015      	beq.n	8001ee0 <NRF24_Addr_read+0x90>
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
			break;
	}
}
 8001eb4:	e03e      	b.n	8001f34 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[4]=Buffer[0];
 8001eb6:	7a3a      	ldrb	r2, [r7, #8]
 8001eb8:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <NRF24_Addr_read+0xf4>)
 8001eba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[3]=Buffer[1];
 8001ebe:	7a7a      	ldrb	r2, [r7, #9]
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <NRF24_Addr_read+0xf4>)
 8001ec2:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[2]=Buffer[2];
 8001ec6:	7aba      	ldrb	r2, [r7, #10]
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <NRF24_Addr_read+0xf4>)
 8001eca:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[1]=Buffer[3];
 8001ece:	7afa      	ldrb	r2, [r7, #11]
 8001ed0:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <NRF24_Addr_read+0xf4>)
 8001ed2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[0]=Buffer[4];
 8001ed6:	7b3a      	ldrb	r2, [r7, #12]
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <NRF24_Addr_read+0xf4>)
 8001eda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			break;
 8001ede:	e029      	b.n	8001f34 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[4]=Buffer[0];
 8001ee0:	7a3a      	ldrb	r2, [r7, #8]
 8001ee2:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <NRF24_Addr_read+0xf4>)
 8001ee4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[3]=Buffer[1];
 8001ee8:	7a7a      	ldrb	r2, [r7, #9]
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <NRF24_Addr_read+0xf4>)
 8001eec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[2]=Buffer[2];
 8001ef0:	7aba      	ldrb	r2, [r7, #10]
 8001ef2:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <NRF24_Addr_read+0xf4>)
 8001ef4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[1]=Buffer[3];
 8001ef8:	7afa      	ldrb	r2, [r7, #11]
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <NRF24_Addr_read+0xf4>)
 8001efc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[0]=Buffer[4];
 8001f00:	7b3a      	ldrb	r2, [r7, #12]
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <NRF24_Addr_read+0xf4>)
 8001f04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
			break;
 8001f08:	e014      	b.n	8001f34 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.TX_ADDR[4]=Buffer[0];
 8001f0a:	7a3a      	ldrb	r2, [r7, #8]
 8001f0c:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <NRF24_Addr_read+0xf4>)
 8001f0e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			NRF24_Configurations_Struct.Actual.TX_ADDR[3]=Buffer[1];
 8001f12:	7a7a      	ldrb	r2, [r7, #9]
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <NRF24_Addr_read+0xf4>)
 8001f16:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
 8001f1a:	7aba      	ldrb	r2, [r7, #10]
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <NRF24_Addr_read+0xf4>)
 8001f1e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
 8001f22:	7afa      	ldrb	r2, [r7, #11]
 8001f24:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <NRF24_Addr_read+0xf4>)
 8001f26:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
 8001f2a:	7b3a      	ldrb	r2, [r7, #12]
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <NRF24_Addr_read+0xf4>)
 8001f2e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
			break;
 8001f32:	bf00      	nop
}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40020400 	.word	0x40020400
 8001f40:	20000560 	.word	0x20000560
 8001f44:	2000015c 	.word	0x2000015c

08001f48 <NRF24_FlushTxFIFO>:

void NRF24_FlushTxFIFO(void){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_TX;
 8001f4e:	23e1      	movs	r3, #225	; 0xe1
 8001f50:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8001f52:	2200      	movs	r2, #0
 8001f54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f58:	4809      	ldr	r0, [pc, #36]	; (8001f80 <NRF24_FlushTxFIFO+0x38>)
 8001f5a:	f002 fcc3 	bl	80048e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001f5e:	1dfb      	adds	r3, r7, #7
 8001f60:	2201      	movs	r2, #1
 8001f62:	4619      	mov	r1, r3
 8001f64:	4807      	ldr	r0, [pc, #28]	; (8001f84 <NRF24_FlushTxFIFO+0x3c>)
 8001f66:	f004 fe59 	bl	8006c1c <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f70:	4803      	ldr	r0, [pc, #12]	; (8001f80 <NRF24_FlushTxFIFO+0x38>)
 8001f72:	f002 fcb7 	bl	80048e4 <HAL_GPIO_WritePin>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40020400 	.word	0x40020400
 8001f84:	20000560 	.word	0x20000560

08001f88 <NRF24_FlushRxFIFO>:

void NRF24_FlushRxFIFO(void){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_RX;
 8001f8e:	23e2      	movs	r3, #226	; 0xe2
 8001f90:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8001f92:	2200      	movs	r2, #0
 8001f94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f98:	4809      	ldr	r0, [pc, #36]	; (8001fc0 <NRF24_FlushRxFIFO+0x38>)
 8001f9a:	f002 fca3 	bl	80048e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001f9e:	1dfb      	adds	r3, r7, #7
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4807      	ldr	r0, [pc, #28]	; (8001fc4 <NRF24_FlushRxFIFO+0x3c>)
 8001fa6:	f004 fe39 	bl	8006c1c <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 8001faa:	2201      	movs	r2, #1
 8001fac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fb0:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <NRF24_FlushRxFIFO+0x38>)
 8001fb2:	f002 fc97 	bl	80048e4 <HAL_GPIO_WritePin>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	20000560 	.word	0x20000560

08001fc8 <NRF24_PowerUp>:

void NRF24_PowerUp(void){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
	uint8_t Adr = 0x00;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer= NRF24_read(Adr);
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff13 	bl	8001e00 <NRF24_read>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	f043 0320 	orr.w	r3, r3, #32
 8001fe4:	71fb      	strb	r3, [r7, #7]
	Buffer |= 0x02;
 8001fe6:	79bb      	ldrb	r3, [r7, #6]
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	71bb      	strb	r3, [r7, #6]
	NRF24_write(Adr, Buffer);
 8001fee:	79ba      	ldrb	r2, [r7, #6]
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fe8f 	bl	8001d18 <NRF24_write>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <NRF24_ActualConfiguration>:

void NRF24_ActualConfiguration(void){
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
	NRF24_Configurations_Struct.Actual.CONFIG 		= NRF24_read(CONFIG);
 8002008:	2000      	movs	r0, #0
 800200a:	f7ff fef9 	bl	8001e00 <NRF24_read>
 800200e:	4603      	mov	r3, r0
 8002010:	461a      	mov	r2, r3
 8002012:	4b5f      	ldr	r3, [pc, #380]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 8002014:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	NRF24_Configurations_Struct.Actual.EN_AA  		= NRF24_read(EN_AA);
 8002018:	2001      	movs	r0, #1
 800201a:	f7ff fef1 	bl	8001e00 <NRF24_read>
 800201e:	4603      	mov	r3, r0
 8002020:	461a      	mov	r2, r3
 8002022:	4b5b      	ldr	r3, [pc, #364]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 8002024:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	NRF24_Configurations_Struct.Actual.EN_RXADDR  	= NRF24_read(EN_RXADDR);
 8002028:	2002      	movs	r0, #2
 800202a:	f7ff fee9 	bl	8001e00 <NRF24_read>
 800202e:	4603      	mov	r3, r0
 8002030:	461a      	mov	r2, r3
 8002032:	4b57      	ldr	r3, [pc, #348]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 8002034:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	NRF24_Configurations_Struct.Actual.SETUP_AW  	= NRF24_read(SETUP_AW);
 8002038:	2003      	movs	r0, #3
 800203a:	f7ff fee1 	bl	8001e00 <NRF24_read>
 800203e:	4603      	mov	r3, r0
 8002040:	461a      	mov	r2, r3
 8002042:	4b53      	ldr	r3, [pc, #332]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 8002044:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	NRF24_Configurations_Struct.Actual.SETUP_RETR 	= NRF24_read(SETUP_RETR);
 8002048:	2004      	movs	r0, #4
 800204a:	f7ff fed9 	bl	8001e00 <NRF24_read>
 800204e:	4603      	mov	r3, r0
 8002050:	461a      	mov	r2, r3
 8002052:	4b4f      	ldr	r3, [pc, #316]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 8002054:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	NRF24_Configurations_Struct.Actual.RF_CH  		= NRF24_read(RF_CH);
 8002058:	2005      	movs	r0, #5
 800205a:	f7ff fed1 	bl	8001e00 <NRF24_read>
 800205e:	4603      	mov	r3, r0
 8002060:	461a      	mov	r2, r3
 8002062:	4b4b      	ldr	r3, [pc, #300]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 8002064:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	NRF24_Configurations_Struct.Actual.RF_SETUP  	= NRF24_read(RF_SETUP);
 8002068:	2006      	movs	r0, #6
 800206a:	f7ff fec9 	bl	8001e00 <NRF24_read>
 800206e:	4603      	mov	r3, r0
 8002070:	461a      	mov	r2, r3
 8002072:	4b47      	ldr	r3, [pc, #284]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 8002074:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	NRF24_Configurations_Struct.Actual.STATUS  		= NRF24_read(STATUS);
 8002078:	2007      	movs	r0, #7
 800207a:	f7ff fec1 	bl	8001e00 <NRF24_read>
 800207e:	4603      	mov	r3, r0
 8002080:	461a      	mov	r2, r3
 8002082:	4b43      	ldr	r3, [pc, #268]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 8002084:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	NRF24_Configurations_Struct.Actual.OBSERVE  	= NRF24_read(OBSERVE);
 8002088:	2008      	movs	r0, #8
 800208a:	f7ff feb9 	bl	8001e00 <NRF24_read>
 800208e:	4603      	mov	r3, r0
 8002090:	461a      	mov	r2, r3
 8002092:	4b3f      	ldr	r3, [pc, #252]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 8002094:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	NRF24_Configurations_Struct.Actual.CD  			= NRF24_read(CD);
 8002098:	2009      	movs	r0, #9
 800209a:	f7ff feb1 	bl	8001e00 <NRF24_read>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 80020a4:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	NRF24_Addr_read(RX_ADDR_P0);
 80020a8:	200a      	movs	r0, #10
 80020aa:	f7ff fed1 	bl	8001e50 <NRF24_Addr_read>
	NRF24_Addr_read(RX_ADDR_P1);
 80020ae:	200b      	movs	r0, #11
 80020b0:	f7ff fece 	bl	8001e50 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_ADDR_P2  	= NRF24_read(RX_ADDR_P2);
 80020b4:	200c      	movs	r0, #12
 80020b6:	f7ff fea3 	bl	8001e00 <NRF24_read>
 80020ba:	4603      	mov	r3, r0
 80020bc:	461a      	mov	r2, r3
 80020be:	4b34      	ldr	r3, [pc, #208]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 80020c0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	NRF24_Configurations_Struct.Actual.RX_ADDR_P3 	= NRF24_read(RX_ADDR_P3);
 80020c4:	200d      	movs	r0, #13
 80020c6:	f7ff fe9b 	bl	8001e00 <NRF24_read>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b30      	ldr	r3, [pc, #192]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 80020d0:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	NRF24_Configurations_Struct.Actual.RX_ADDR_P4  	= NRF24_read(RX_ADDR_P4);
 80020d4:	200e      	movs	r0, #14
 80020d6:	f7ff fe93 	bl	8001e00 <NRF24_read>
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 80020e0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	NRF24_Configurations_Struct.Actual.RX_ADDR_P5  	= NRF24_read(RX_ADDR_P5);
 80020e4:	200f      	movs	r0, #15
 80020e6:	f7ff fe8b 	bl	8001e00 <NRF24_read>
 80020ea:	4603      	mov	r3, r0
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b28      	ldr	r3, [pc, #160]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 80020f0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	NRF24_Addr_read(TX_ADDR);
 80020f4:	2010      	movs	r0, #16
 80020f6:	f7ff feab 	bl	8001e50 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_PW_P0  	= NRF24_read(RX_PW_P0);
 80020fa:	2011      	movs	r0, #17
 80020fc:	f7ff fe80 	bl	8001e00 <NRF24_read>
 8002100:	4603      	mov	r3, r0
 8002102:	461a      	mov	r2, r3
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 8002106:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	NRF24_Configurations_Struct.Actual.RX_PW_P1  	= NRF24_read(RX_PW_P1);
 800210a:	2012      	movs	r0, #18
 800210c:	f7ff fe78 	bl	8001e00 <NRF24_read>
 8002110:	4603      	mov	r3, r0
 8002112:	461a      	mov	r2, r3
 8002114:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 8002116:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	NRF24_Configurations_Struct.Actual.RX_PW_P2  	= NRF24_read(RX_PW_P2);
 800211a:	2013      	movs	r0, #19
 800211c:	f7ff fe70 	bl	8001e00 <NRF24_read>
 8002120:	4603      	mov	r3, r0
 8002122:	461a      	mov	r2, r3
 8002124:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 8002126:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	NRF24_Configurations_Struct.Actual.RX_PW_P3  	= NRF24_read(RX_PW_P3);
 800212a:	2014      	movs	r0, #20
 800212c:	f7ff fe68 	bl	8001e00 <NRF24_read>
 8002130:	4603      	mov	r3, r0
 8002132:	461a      	mov	r2, r3
 8002134:	4b16      	ldr	r3, [pc, #88]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 8002136:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	NRF24_Configurations_Struct.Actual.RX_PW_P4  	= NRF24_read(RX_PW_P4);
 800213a:	2015      	movs	r0, #21
 800213c:	f7ff fe60 	bl	8001e00 <NRF24_read>
 8002140:	4603      	mov	r3, r0
 8002142:	461a      	mov	r2, r3
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 8002146:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	NRF24_Configurations_Struct.Actual.RX_PW_P5  	= NRF24_read(RX_PW_P5);
 800214a:	2016      	movs	r0, #22
 800214c:	f7ff fe58 	bl	8001e00 <NRF24_read>
 8002150:	4603      	mov	r3, r0
 8002152:	461a      	mov	r2, r3
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 8002156:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	NRF24_Configurations_Struct.Actual.FIFO_STATUS  = NRF24_read(FIFO_STATUS);
 800215a:	2017      	movs	r0, #23
 800215c:	f7ff fe50 	bl	8001e00 <NRF24_read>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 8002166:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	NRF24_Configurations_Struct.Actual.DYNPD  		= NRF24_read(DYNPD);
 800216a:	201c      	movs	r0, #28
 800216c:	f7ff fe48 	bl	8001e00 <NRF24_read>
 8002170:	4603      	mov	r3, r0
 8002172:	461a      	mov	r2, r3
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 8002176:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	NRF24_Configurations_Struct.Actual.FEATURE  	= NRF24_read(FEATURE);
 800217a:	201d      	movs	r0, #29
 800217c:	f7ff fe40 	bl	8001e00 <NRF24_read>
 8002180:	4603      	mov	r3, r0
 8002182:	461a      	mov	r2, r3
 8002184:	4b02      	ldr	r3, [pc, #8]	; (8002190 <NRF24_ActualConfiguration+0x18c>)
 8002186:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	2000015c 	.word	0x2000015c

08002194 <NRF24_config>:

void NRF24_config(NRF24_Address_Configurations_t Configuration_struct){
 8002194:	b084      	sub	sp, #16
 8002196:	b580      	push	{r7, lr}
 8002198:	af00      	add	r7, sp, #0
 800219a:	f107 0c08 	add.w	ip, r7, #8
 800219e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	NRF24_write(CONFIG,	Configuration_struct.CONFIG);
 80021a2:	7a3b      	ldrb	r3, [r7, #8]
 80021a4:	4619      	mov	r1, r3
 80021a6:	2000      	movs	r0, #0
 80021a8:	f7ff fdb6 	bl	8001d18 <NRF24_write>
	NRF24_write(EN_AA, Configuration_struct.EN_AA);
 80021ac:	7a7b      	ldrb	r3, [r7, #9]
 80021ae:	4619      	mov	r1, r3
 80021b0:	2001      	movs	r0, #1
 80021b2:	f7ff fdb1 	bl	8001d18 <NRF24_write>
	NRF24_write(EN_RXADDR,Configuration_struct.EN_RXADDR);
 80021b6:	7abb      	ldrb	r3, [r7, #10]
 80021b8:	4619      	mov	r1, r3
 80021ba:	2002      	movs	r0, #2
 80021bc:	f7ff fdac 	bl	8001d18 <NRF24_write>
	NRF24_write(SETUP_AW,Configuration_struct.SETUP_AW);
 80021c0:	7afb      	ldrb	r3, [r7, #11]
 80021c2:	4619      	mov	r1, r3
 80021c4:	2003      	movs	r0, #3
 80021c6:	f7ff fda7 	bl	8001d18 <NRF24_write>
	NRF24_write(SETUP_RETR,Configuration_struct.SETUP_RETR);
 80021ca:	7b3b      	ldrb	r3, [r7, #12]
 80021cc:	4619      	mov	r1, r3
 80021ce:	2004      	movs	r0, #4
 80021d0:	f7ff fda2 	bl	8001d18 <NRF24_write>
	NRF24_write(RF_CH,Configuration_struct.RF_CH);
 80021d4:	7b7b      	ldrb	r3, [r7, #13]
 80021d6:	4619      	mov	r1, r3
 80021d8:	2005      	movs	r0, #5
 80021da:	f7ff fd9d 	bl	8001d18 <NRF24_write>
	NRF24_write(RF_SETUP,Configuration_struct.RF_SETUP);
 80021de:	7bbb      	ldrb	r3, [r7, #14]
 80021e0:	4619      	mov	r1, r3
 80021e2:	2006      	movs	r0, #6
 80021e4:	f7ff fd98 	bl	8001d18 <NRF24_write>
	NRF24_write(STATUS,Configuration_struct.STATUS);
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	4619      	mov	r1, r3
 80021ec:	2007      	movs	r0, #7
 80021ee:	f7ff fd93 	bl	8001d18 <NRF24_write>
	NRF24_write(OBSERVE,Configuration_struct.OBSERVE);
 80021f2:	7c3b      	ldrb	r3, [r7, #16]
 80021f4:	4619      	mov	r1, r3
 80021f6:	2008      	movs	r0, #8
 80021f8:	f7ff fd8e 	bl	8001d18 <NRF24_write>
	NRF24_write(CD,Configuration_struct.CD);
 80021fc:	7c7b      	ldrb	r3, [r7, #17]
 80021fe:	4619      	mov	r1, r3
 8002200:	2009      	movs	r0, #9
 8002202:	f7ff fd89 	bl	8001d18 <NRF24_write>
	NRF24_Addr_write(RX_ADDR_P0, Configuration_struct.RX_ADDR_P0);
 8002206:	f107 0312 	add.w	r3, r7, #18
 800220a:	4619      	mov	r1, r3
 800220c:	200a      	movs	r0, #10
 800220e:	f7ff fdb1 	bl	8001d74 <NRF24_Addr_write>
	NRF24_Addr_write(RX_ADDR_P1, Configuration_struct.RX_ADDR_P1);
 8002212:	f107 0317 	add.w	r3, r7, #23
 8002216:	4619      	mov	r1, r3
 8002218:	200b      	movs	r0, #11
 800221a:	f7ff fdab 	bl	8001d74 <NRF24_Addr_write>
	NRF24_write(RX_ADDR_P2,Configuration_struct.RX_ADDR_P2);
 800221e:	7f3b      	ldrb	r3, [r7, #28]
 8002220:	4619      	mov	r1, r3
 8002222:	200c      	movs	r0, #12
 8002224:	f7ff fd78 	bl	8001d18 <NRF24_write>
	NRF24_write(RX_ADDR_P3,Configuration_struct.RX_ADDR_P3);
 8002228:	7f7b      	ldrb	r3, [r7, #29]
 800222a:	4619      	mov	r1, r3
 800222c:	200d      	movs	r0, #13
 800222e:	f7ff fd73 	bl	8001d18 <NRF24_write>
	NRF24_write(RX_ADDR_P4,Configuration_struct.RX_ADDR_P4);
 8002232:	7fbb      	ldrb	r3, [r7, #30]
 8002234:	4619      	mov	r1, r3
 8002236:	200e      	movs	r0, #14
 8002238:	f7ff fd6e 	bl	8001d18 <NRF24_write>
	NRF24_write(RX_ADDR_P5,Configuration_struct.RX_ADDR_P5);
 800223c:	7ffb      	ldrb	r3, [r7, #31]
 800223e:	4619      	mov	r1, r3
 8002240:	200f      	movs	r0, #15
 8002242:	f7ff fd69 	bl	8001d18 <NRF24_write>
	NRF24_Addr_write(TX_ADDR, Configuration_struct.TX_ADDR);
 8002246:	f107 0320 	add.w	r3, r7, #32
 800224a:	4619      	mov	r1, r3
 800224c:	2010      	movs	r0, #16
 800224e:	f7ff fd91 	bl	8001d74 <NRF24_Addr_write>
	NRF24_write(RX_PW_P0,Configuration_struct.RX_PW_P0);
 8002252:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002256:	4619      	mov	r1, r3
 8002258:	2011      	movs	r0, #17
 800225a:	f7ff fd5d 	bl	8001d18 <NRF24_write>
	NRF24_write(RX_PW_P1,Configuration_struct.RX_PW_P1);
 800225e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002262:	4619      	mov	r1, r3
 8002264:	2012      	movs	r0, #18
 8002266:	f7ff fd57 	bl	8001d18 <NRF24_write>
	NRF24_write(RX_PW_P2,Configuration_struct.RX_PW_P2);
 800226a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800226e:	4619      	mov	r1, r3
 8002270:	2013      	movs	r0, #19
 8002272:	f7ff fd51 	bl	8001d18 <NRF24_write>
	NRF24_write(RX_PW_P3,Configuration_struct.RX_PW_P3);
 8002276:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800227a:	4619      	mov	r1, r3
 800227c:	2014      	movs	r0, #20
 800227e:	f7ff fd4b 	bl	8001d18 <NRF24_write>
	NRF24_write(RX_PW_P4,Configuration_struct.RX_PW_P4);
 8002282:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002286:	4619      	mov	r1, r3
 8002288:	2015      	movs	r0, #21
 800228a:	f7ff fd45 	bl	8001d18 <NRF24_write>
	NRF24_write(RX_PW_P5,Configuration_struct.RX_PW_P5);
 800228e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002292:	4619      	mov	r1, r3
 8002294:	2016      	movs	r0, #22
 8002296:	f7ff fd3f 	bl	8001d18 <NRF24_write>
	NRF24_write(FIFO_STATUS,Configuration_struct.FIFO_STATUS);
 800229a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800229e:	4619      	mov	r1, r3
 80022a0:	2017      	movs	r0, #23
 80022a2:	f7ff fd39 	bl	8001d18 <NRF24_write>
	NRF24_write(DYNPD,Configuration_struct.DYNPD);
 80022a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80022aa:	4619      	mov	r1, r3
 80022ac:	201c      	movs	r0, #28
 80022ae:	f7ff fd33 	bl	8001d18 <NRF24_write>
	NRF24_write(FEATURE,Configuration_struct.FEATURE);
 80022b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022b6:	4619      	mov	r1, r3
 80022b8:	201d      	movs	r0, #29
 80022ba:	f7ff fd2d 	bl	8001d18 <NRF24_write>
}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022c6:	b004      	add	sp, #16
 80022c8:	4770      	bx	lr
	...

080022cc <NRF24_DefaultConfiguration>:

void NRF24_DefaultConfiguration(void){
 80022cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af06      	add	r7, sp, #24
	NRF24_FlushTxFIFO();
 80022d2:	f7ff fe39 	bl	8001f48 <NRF24_FlushTxFIFO>
	NRF24_FlushRxFIFO();
 80022d6:	f7ff fe57 	bl	8001f88 <NRF24_FlushRxFIFO>
	NRF24_Configurations_Struct.Default.CONFIG 			= 0x78;
 80022da:	4b48      	ldr	r3, [pc, #288]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 80022dc:	2278      	movs	r2, #120	; 0x78
 80022de:	701a      	strb	r2, [r3, #0]
	NRF24_Configurations_Struct.Default.EN_AA  			= 0x3F;
 80022e0:	4b46      	ldr	r3, [pc, #280]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 80022e2:	223f      	movs	r2, #63	; 0x3f
 80022e4:	705a      	strb	r2, [r3, #1]
	NRF24_Configurations_Struct.Default.EN_RXADDR  		= 0x03;
 80022e6:	4b45      	ldr	r3, [pc, #276]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 80022e8:	2203      	movs	r2, #3
 80022ea:	709a      	strb	r2, [r3, #2]
	NRF24_Configurations_Struct.Default.SETUP_AW  		= 0x03;
 80022ec:	4b43      	ldr	r3, [pc, #268]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 80022ee:	2203      	movs	r2, #3
 80022f0:	70da      	strb	r2, [r3, #3]
	NRF24_Configurations_Struct.Default.SETUP_RETR 		= 0x03;
 80022f2:	4b42      	ldr	r3, [pc, #264]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 80022f4:	2203      	movs	r2, #3
 80022f6:	711a      	strb	r2, [r3, #4]
	NRF24_Configurations_Struct.Default.RF_CH  			= 0x02;
 80022f8:	4b40      	ldr	r3, [pc, #256]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 80022fa:	2202      	movs	r2, #2
 80022fc:	715a      	strb	r2, [r3, #5]
	NRF24_Configurations_Struct.Default.RF_SETUP  		= 0x09;
 80022fe:	4b3f      	ldr	r3, [pc, #252]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 8002300:	2209      	movs	r2, #9
 8002302:	719a      	strb	r2, [r3, #6]
	NRF24_Configurations_Struct.Default.STATUS  		= 0X70;
 8002304:	4b3d      	ldr	r3, [pc, #244]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 8002306:	2270      	movs	r2, #112	; 0x70
 8002308:	71da      	strb	r2, [r3, #7]
	NRF24_Configurations_Struct.Default.OBSERVE  		= 0X00;
 800230a:	4b3c      	ldr	r3, [pc, #240]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 800230c:	2200      	movs	r2, #0
 800230e:	721a      	strb	r2, [r3, #8]
	NRF24_Configurations_Struct.Default.CD  			= 0x00;
 8002310:	4b3a      	ldr	r3, [pc, #232]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 8002312:	2200      	movs	r2, #0
 8002314:	725a      	strb	r2, [r3, #9]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[0]  	= 0xE7;
 8002316:	4b39      	ldr	r3, [pc, #228]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 8002318:	22e7      	movs	r2, #231	; 0xe7
 800231a:	729a      	strb	r2, [r3, #10]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[1]  	= 0xE7;
 800231c:	4b37      	ldr	r3, [pc, #220]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 800231e:	22e7      	movs	r2, #231	; 0xe7
 8002320:	72da      	strb	r2, [r3, #11]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[2]  	= 0xE7;
 8002322:	4b36      	ldr	r3, [pc, #216]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 8002324:	22e7      	movs	r2, #231	; 0xe7
 8002326:	731a      	strb	r2, [r3, #12]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[3]  	= 0xE7;
 8002328:	4b34      	ldr	r3, [pc, #208]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 800232a:	22e7      	movs	r2, #231	; 0xe7
 800232c:	735a      	strb	r2, [r3, #13]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[4]  	= 0xE7;
 800232e:	4b33      	ldr	r3, [pc, #204]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 8002330:	22e7      	movs	r2, #231	; 0xe7
 8002332:	739a      	strb	r2, [r3, #14]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[0]  	= 0xC2;
 8002334:	4b31      	ldr	r3, [pc, #196]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 8002336:	22c2      	movs	r2, #194	; 0xc2
 8002338:	73da      	strb	r2, [r3, #15]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[1]  	= 0xC2;
 800233a:	4b30      	ldr	r3, [pc, #192]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 800233c:	22c2      	movs	r2, #194	; 0xc2
 800233e:	741a      	strb	r2, [r3, #16]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[2]  	= 0xC2;
 8002340:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 8002342:	22c2      	movs	r2, #194	; 0xc2
 8002344:	745a      	strb	r2, [r3, #17]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[3]  	= 0xC2;
 8002346:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 8002348:	22c2      	movs	r2, #194	; 0xc2
 800234a:	749a      	strb	r2, [r3, #18]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[4]  	= 0xC2;
 800234c:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 800234e:	22c2      	movs	r2, #194	; 0xc2
 8002350:	74da      	strb	r2, [r3, #19]
	NRF24_Configurations_Struct.Default.RX_ADDR_P2  	= 0xC3;
 8002352:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 8002354:	22c3      	movs	r2, #195	; 0xc3
 8002356:	751a      	strb	r2, [r3, #20]
	NRF24_Configurations_Struct.Default.RX_ADDR_P3 		= 0xC4;
 8002358:	4b28      	ldr	r3, [pc, #160]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 800235a:	22c4      	movs	r2, #196	; 0xc4
 800235c:	755a      	strb	r2, [r3, #21]
	NRF24_Configurations_Struct.Default.RX_ADDR_P4  	= 0xC5;
 800235e:	4b27      	ldr	r3, [pc, #156]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 8002360:	22c5      	movs	r2, #197	; 0xc5
 8002362:	759a      	strb	r2, [r3, #22]
	NRF24_Configurations_Struct.Default.RX_ADDR_P5  	= 0xC6;
 8002364:	4b25      	ldr	r3, [pc, #148]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 8002366:	22c6      	movs	r2, #198	; 0xc6
 8002368:	75da      	strb	r2, [r3, #23]
	NRF24_Configurations_Struct.Default.TX_ADDR[0]   	= 0xE7;
 800236a:	4b24      	ldr	r3, [pc, #144]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 800236c:	22e7      	movs	r2, #231	; 0xe7
 800236e:	761a      	strb	r2, [r3, #24]
	NRF24_Configurations_Struct.Default.TX_ADDR[1]   	= 0xE7;
 8002370:	4b22      	ldr	r3, [pc, #136]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 8002372:	22e7      	movs	r2, #231	; 0xe7
 8002374:	765a      	strb	r2, [r3, #25]
	NRF24_Configurations_Struct.Default.TX_ADDR[2]   	= 0xE7;
 8002376:	4b21      	ldr	r3, [pc, #132]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 8002378:	22e7      	movs	r2, #231	; 0xe7
 800237a:	769a      	strb	r2, [r3, #26]
	NRF24_Configurations_Struct.Default.TX_ADDR[3]   	= 0xE7;
 800237c:	4b1f      	ldr	r3, [pc, #124]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 800237e:	22e7      	movs	r2, #231	; 0xe7
 8002380:	76da      	strb	r2, [r3, #27]
	NRF24_Configurations_Struct.Default.TX_ADDR[4]   	= 0xE7;
 8002382:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 8002384:	22e7      	movs	r2, #231	; 0xe7
 8002386:	771a      	strb	r2, [r3, #28]
	NRF24_Configurations_Struct.Default.RX_PW_P0  		= 0X20;
 8002388:	4b1c      	ldr	r3, [pc, #112]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 800238a:	2220      	movs	r2, #32
 800238c:	775a      	strb	r2, [r3, #29]
	NRF24_Configurations_Struct.Default.RX_PW_P1  		= 0X20;
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 8002390:	2220      	movs	r2, #32
 8002392:	779a      	strb	r2, [r3, #30]
	NRF24_Configurations_Struct.Default.RX_PW_P2  		= 0X00;
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 8002396:	2200      	movs	r2, #0
 8002398:	77da      	strb	r2, [r3, #31]
	NRF24_Configurations_Struct.Default.RX_PW_P3  		= 0X00;
 800239a:	4b18      	ldr	r3, [pc, #96]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2020 	strb.w	r2, [r3, #32]
	NRF24_Configurations_Struct.Default.RX_PW_P4  		= 0X00;
 80023a2:	4b16      	ldr	r3, [pc, #88]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	NRF24_Configurations_Struct.Default.RX_PW_P5  		= 0X00;
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	NRF24_Configurations_Struct.Default.FIFO_STATUS  	= 0X11;
 80023b2:	4b12      	ldr	r3, [pc, #72]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 80023b4:	2211      	movs	r2, #17
 80023b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	NRF24_Configurations_Struct.Default.DYNPD  			= 0X00;
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	NRF24_Configurations_Struct.Default.FEATURE  		= 0X00;
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	NRF24_config(NRF24_Configurations_Struct.Default);
 80023ca:	4e0c      	ldr	r6, [pc, #48]	; (80023fc <NRF24_DefaultConfiguration+0x130>)
 80023cc:	466c      	mov	r4, sp
 80023ce:	f106 0510 	add.w	r5, r6, #16
 80023d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023da:	6020      	str	r0, [r4, #0]
 80023dc:	3404      	adds	r4, #4
 80023de:	8021      	strh	r1, [r4, #0]
 80023e0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80023e4:	f7ff fed6 	bl	8002194 <NRF24_config>
	NRF24_ActualConfiguration();
 80023e8:	f7ff fe0c 	bl	8002004 <NRF24_ActualConfiguration>
	NRF24_mode = Init;
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <NRF24_DefaultConfiguration+0x134>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
}
 80023f2:	bf00      	nop
 80023f4:	3704      	adds	r7, #4
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023fa:	bf00      	nop
 80023fc:	2000015c 	.word	0x2000015c
 8002400:	20000200 	.word	0x20000200

08002404 <NRF24_TxConfiguration>:

void NRF24_TxConfiguration(void){
 8002404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002408:	b086      	sub	sp, #24
 800240a:	af06      	add	r7, sp, #24
	NRF24_Configurations_Struct.Tx_mode.CONFIG 			= 0x78;
 800240c:	4b5f      	ldr	r3, [pc, #380]	; (800258c <NRF24_TxConfiguration+0x188>)
 800240e:	2278      	movs	r2, #120	; 0x78
 8002410:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	NRF24_Configurations_Struct.Tx_mode.EN_AA  			= 0x03;
 8002414:	4b5d      	ldr	r3, [pc, #372]	; (800258c <NRF24_TxConfiguration+0x188>)
 8002416:	2203      	movs	r2, #3
 8002418:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	NRF24_Configurations_Struct.Tx_mode.EN_RXADDR  		= 0x03;
 800241c:	4b5b      	ldr	r3, [pc, #364]	; (800258c <NRF24_TxConfiguration+0x188>)
 800241e:	2203      	movs	r2, #3
 8002420:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	NRF24_Configurations_Struct.Tx_mode.SETUP_AW  		= 0x03;
 8002424:	4b59      	ldr	r3, [pc, #356]	; (800258c <NRF24_TxConfiguration+0x188>)
 8002426:	2203      	movs	r2, #3
 8002428:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	NRF24_Configurations_Struct.Tx_mode.SETUP_RETR 		= 0x33;
 800242c:	4b57      	ldr	r3, [pc, #348]	; (800258c <NRF24_TxConfiguration+0x188>)
 800242e:	2233      	movs	r2, #51	; 0x33
 8002430:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	NRF24_Configurations_Struct.Tx_mode.RF_CH  			= 0x12;
 8002434:	4b55      	ldr	r3, [pc, #340]	; (800258c <NRF24_TxConfiguration+0x188>)
 8002436:	2212      	movs	r2, #18
 8002438:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	NRF24_Configurations_Struct.Tx_mode.RF_SETUP  		= 0x09;
 800243c:	4b53      	ldr	r3, [pc, #332]	; (800258c <NRF24_TxConfiguration+0x188>)
 800243e:	2209      	movs	r2, #9
 8002440:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	NRF24_Configurations_Struct.Tx_mode.STATUS  		= 0X70;
 8002444:	4b51      	ldr	r3, [pc, #324]	; (800258c <NRF24_TxConfiguration+0x188>)
 8002446:	2270      	movs	r2, #112	; 0x70
 8002448:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	NRF24_Configurations_Struct.Tx_mode.OBSERVE  		= 0X00;
 800244c:	4b4f      	ldr	r3, [pc, #316]	; (800258c <NRF24_TxConfiguration+0x188>)
 800244e:	2200      	movs	r2, #0
 8002450:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	NRF24_Configurations_Struct.Tx_mode.CD  			= 0x00;
 8002454:	4b4d      	ldr	r3, [pc, #308]	; (800258c <NRF24_TxConfiguration+0x188>)
 8002456:	2200      	movs	r2, #0
 8002458:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	NRF24_Configurations_Struct.Tx_mode.RX_ADDR_P0[0]  	= 0xE7;
 800245c:	4b4b      	ldr	r3, [pc, #300]	; (800258c <NRF24_TxConfiguration+0x188>)
 800245e:	22e7      	movs	r2, #231	; 0xe7
 8002460:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	NRF24_Configurations_Struct.Tx_mode.RX_ADDR_P0[1]  	= 0xE7;
 8002464:	4b49      	ldr	r3, [pc, #292]	; (800258c <NRF24_TxConfiguration+0x188>)
 8002466:	22e7      	movs	r2, #231	; 0xe7
 8002468:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	NRF24_Configurations_Struct.Tx_mode.RX_ADDR_P0[2]  	= 0xE7;
 800246c:	4b47      	ldr	r3, [pc, #284]	; (800258c <NRF24_TxConfiguration+0x188>)
 800246e:	22e7      	movs	r2, #231	; 0xe7
 8002470:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	NRF24_Configurations_Struct.Tx_mode.RX_ADDR_P0[3]  	= 0xE7;
 8002474:	4b45      	ldr	r3, [pc, #276]	; (800258c <NRF24_TxConfiguration+0x188>)
 8002476:	22e7      	movs	r2, #231	; 0xe7
 8002478:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	NRF24_Configurations_Struct.Tx_mode.RX_ADDR_P0[4]  	= 0xE7;
 800247c:	4b43      	ldr	r3, [pc, #268]	; (800258c <NRF24_TxConfiguration+0x188>)
 800247e:	22e7      	movs	r2, #231	; 0xe7
 8002480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	NRF24_Configurations_Struct.Tx_mode.RX_ADDR_P1[0]  	= 0xC2;
 8002484:	4b41      	ldr	r3, [pc, #260]	; (800258c <NRF24_TxConfiguration+0x188>)
 8002486:	22c2      	movs	r2, #194	; 0xc2
 8002488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	NRF24_Configurations_Struct.Tx_mode.RX_ADDR_P1[1]  	= 0xC2;
 800248c:	4b3f      	ldr	r3, [pc, #252]	; (800258c <NRF24_TxConfiguration+0x188>)
 800248e:	22c2      	movs	r2, #194	; 0xc2
 8002490:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	NRF24_Configurations_Struct.Tx_mode.RX_ADDR_P1[2]  	= 0xC2;
 8002494:	4b3d      	ldr	r3, [pc, #244]	; (800258c <NRF24_TxConfiguration+0x188>)
 8002496:	22c2      	movs	r2, #194	; 0xc2
 8002498:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	NRF24_Configurations_Struct.Tx_mode.RX_ADDR_P1[3]  	= 0xC2;
 800249c:	4b3b      	ldr	r3, [pc, #236]	; (800258c <NRF24_TxConfiguration+0x188>)
 800249e:	22c2      	movs	r2, #194	; 0xc2
 80024a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	NRF24_Configurations_Struct.Tx_mode.RX_ADDR_P1[4]  	= 0xC2;
 80024a4:	4b39      	ldr	r3, [pc, #228]	; (800258c <NRF24_TxConfiguration+0x188>)
 80024a6:	22c2      	movs	r2, #194	; 0xc2
 80024a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	NRF24_Configurations_Struct.Tx_mode.RX_ADDR_P2  	= 0xC3;
 80024ac:	4b37      	ldr	r3, [pc, #220]	; (800258c <NRF24_TxConfiguration+0x188>)
 80024ae:	22c3      	movs	r2, #195	; 0xc3
 80024b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	NRF24_Configurations_Struct.Tx_mode.RX_ADDR_P3 		= 0xC4;
 80024b4:	4b35      	ldr	r3, [pc, #212]	; (800258c <NRF24_TxConfiguration+0x188>)
 80024b6:	22c4      	movs	r2, #196	; 0xc4
 80024b8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	NRF24_Configurations_Struct.Tx_mode.RX_ADDR_P4  	= 0xC5;
 80024bc:	4b33      	ldr	r3, [pc, #204]	; (800258c <NRF24_TxConfiguration+0x188>)
 80024be:	22c5      	movs	r2, #197	; 0xc5
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	NRF24_Configurations_Struct.Tx_mode.RX_ADDR_P5  	= 0xC6;
 80024c4:	4b31      	ldr	r3, [pc, #196]	; (800258c <NRF24_TxConfiguration+0x188>)
 80024c6:	22c6      	movs	r2, #198	; 0xc6
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	NRF24_Configurations_Struct.Tx_mode.TX_ADDR[0]   	= 0xE7;
 80024cc:	4b2f      	ldr	r3, [pc, #188]	; (800258c <NRF24_TxConfiguration+0x188>)
 80024ce:	22e7      	movs	r2, #231	; 0xe7
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	NRF24_Configurations_Struct.Tx_mode.TX_ADDR[1]   	= 0xE7;
 80024d4:	4b2d      	ldr	r3, [pc, #180]	; (800258c <NRF24_TxConfiguration+0x188>)
 80024d6:	22e7      	movs	r2, #231	; 0xe7
 80024d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	NRF24_Configurations_Struct.Tx_mode.TX_ADDR[2]   	= 0xE7;
 80024dc:	4b2b      	ldr	r3, [pc, #172]	; (800258c <NRF24_TxConfiguration+0x188>)
 80024de:	22e7      	movs	r2, #231	; 0xe7
 80024e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	NRF24_Configurations_Struct.Tx_mode.TX_ADDR[3]   	= 0xE7;
 80024e4:	4b29      	ldr	r3, [pc, #164]	; (800258c <NRF24_TxConfiguration+0x188>)
 80024e6:	22e7      	movs	r2, #231	; 0xe7
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	NRF24_Configurations_Struct.Tx_mode.TX_ADDR[4]   	= 0xE7;
 80024ec:	4b27      	ldr	r3, [pc, #156]	; (800258c <NRF24_TxConfiguration+0x188>)
 80024ee:	22e7      	movs	r2, #231	; 0xe7
 80024f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	NRF24_Configurations_Struct.Tx_mode.RX_PW_P0  		= 0X20;
 80024f4:	4b25      	ldr	r3, [pc, #148]	; (800258c <NRF24_TxConfiguration+0x188>)
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	NRF24_Configurations_Struct.Tx_mode.RX_PW_P1  		= 0X20;
 80024fc:	4b23      	ldr	r3, [pc, #140]	; (800258c <NRF24_TxConfiguration+0x188>)
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	NRF24_Configurations_Struct.Tx_mode.RX_PW_P2  		= 0X00;
 8002504:	4b21      	ldr	r3, [pc, #132]	; (800258c <NRF24_TxConfiguration+0x188>)
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	NRF24_Configurations_Struct.Tx_mode.RX_PW_P3  		= 0X00;
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <NRF24_TxConfiguration+0x188>)
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	NRF24_Configurations_Struct.Tx_mode.RX_PW_P4  		= 0X00;
 8002514:	4b1d      	ldr	r3, [pc, #116]	; (800258c <NRF24_TxConfiguration+0x188>)
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	NRF24_Configurations_Struct.Tx_mode.RX_PW_P5  		= 0X00;
 800251c:	4b1b      	ldr	r3, [pc, #108]	; (800258c <NRF24_TxConfiguration+0x188>)
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	NRF24_Configurations_Struct.Tx_mode.FIFO_STATUS  	= 0X11;
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <NRF24_TxConfiguration+0x188>)
 8002526:	2211      	movs	r2, #17
 8002528:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	NRF24_Configurations_Struct.Tx_mode.DYNPD  			= 0X00;
 800252c:	4b17      	ldr	r3, [pc, #92]	; (800258c <NRF24_TxConfiguration+0x188>)
 800252e:	2200      	movs	r2, #0
 8002530:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	NRF24_Configurations_Struct.Tx_mode.FEATURE  		= 0X00;
 8002534:	4b15      	ldr	r3, [pc, #84]	; (800258c <NRF24_TxConfiguration+0x188>)
 8002536:	2200      	movs	r2, #0
 8002538:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	NRF24_config(NRF24_Configurations_Struct.Tx_mode);
 800253c:	4b13      	ldr	r3, [pc, #76]	; (800258c <NRF24_TxConfiguration+0x188>)
 800253e:	f8d3 2026 	ldr.w	r2, [r3, #38]	; 0x26
 8002542:	4690      	mov	r8, r2
 8002544:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
 8002548:	4696      	mov	lr, r2
 800254a:	f8d3 202e 	ldr.w	r2, [r3, #46]	; 0x2e
 800254e:	4694      	mov	ip, r2
 8002550:	f8d3 2032 	ldr.w	r2, [r3, #50]	; 0x32
 8002554:	4616      	mov	r6, r2
 8002556:	466c      	mov	r4, sp
 8002558:	f103 0536 	add.w	r5, r3, #54	; 0x36
 800255c:	6828      	ldr	r0, [r5, #0]
 800255e:	6869      	ldr	r1, [r5, #4]
 8002560:	68aa      	ldr	r2, [r5, #8]
 8002562:	68eb      	ldr	r3, [r5, #12]
 8002564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002566:	6928      	ldr	r0, [r5, #16]
 8002568:	6020      	str	r0, [r4, #0]
 800256a:	8aab      	ldrh	r3, [r5, #20]
 800256c:	80a3      	strh	r3, [r4, #4]
 800256e:	4640      	mov	r0, r8
 8002570:	4671      	mov	r1, lr
 8002572:	4662      	mov	r2, ip
 8002574:	4633      	mov	r3, r6
 8002576:	f7ff fe0d 	bl	8002194 <NRF24_config>
	NRF24_ActualConfiguration();
 800257a:	f7ff fd43 	bl	8002004 <NRF24_ActualConfiguration>
	NRF24_mode = TxMode;
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <NRF24_TxConfiguration+0x18c>)
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800258c:	2000015c 	.word	0x2000015c
 8002590:	20000200 	.word	0x20000200

08002594 <NRF24_RxConfiguration>:

void NRF24_RxConfiguration(void){
 8002594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002596:	b087      	sub	sp, #28
 8002598:	af06      	add	r7, sp, #24
	NRF24_Configurations_Struct.Rx_mode.CONFIG 			= 0x79;
 800259a:	4b5b      	ldr	r3, [pc, #364]	; (8002708 <NRF24_RxConfiguration+0x174>)
 800259c:	2279      	movs	r2, #121	; 0x79
 800259e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	NRF24_Configurations_Struct.Rx_mode.EN_AA  			= 0x03;
 80025a2:	4b59      	ldr	r3, [pc, #356]	; (8002708 <NRF24_RxConfiguration+0x174>)
 80025a4:	2203      	movs	r2, #3
 80025a6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	NRF24_Configurations_Struct.Rx_mode.EN_RXADDR  		= 0x03;
 80025aa:	4b57      	ldr	r3, [pc, #348]	; (8002708 <NRF24_RxConfiguration+0x174>)
 80025ac:	2203      	movs	r2, #3
 80025ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	NRF24_Configurations_Struct.Rx_mode.SETUP_AW  		= 0x03;
 80025b2:	4b55      	ldr	r3, [pc, #340]	; (8002708 <NRF24_RxConfiguration+0x174>)
 80025b4:	2203      	movs	r2, #3
 80025b6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	NRF24_Configurations_Struct.Rx_mode.SETUP_RETR 		= 0x33;
 80025ba:	4b53      	ldr	r3, [pc, #332]	; (8002708 <NRF24_RxConfiguration+0x174>)
 80025bc:	2233      	movs	r2, #51	; 0x33
 80025be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	NRF24_Configurations_Struct.Rx_mode.RF_CH  			= 0x12;
 80025c2:	4b51      	ldr	r3, [pc, #324]	; (8002708 <NRF24_RxConfiguration+0x174>)
 80025c4:	2212      	movs	r2, #18
 80025c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	NRF24_Configurations_Struct.Rx_mode.RF_SETUP  		= 0x09;
 80025ca:	4b4f      	ldr	r3, [pc, #316]	; (8002708 <NRF24_RxConfiguration+0x174>)
 80025cc:	2209      	movs	r2, #9
 80025ce:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	NRF24_Configurations_Struct.Rx_mode.STATUS  		= 0X70;
 80025d2:	4b4d      	ldr	r3, [pc, #308]	; (8002708 <NRF24_RxConfiguration+0x174>)
 80025d4:	2270      	movs	r2, #112	; 0x70
 80025d6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	NRF24_Configurations_Struct.Rx_mode.OBSERVE  		= 0X00;
 80025da:	4b4b      	ldr	r3, [pc, #300]	; (8002708 <NRF24_RxConfiguration+0x174>)
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	NRF24_Configurations_Struct.Rx_mode.CD  			= 0x00;
 80025e2:	4b49      	ldr	r3, [pc, #292]	; (8002708 <NRF24_RxConfiguration+0x174>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[0]  	= 0xE7;
 80025ea:	4b47      	ldr	r3, [pc, #284]	; (8002708 <NRF24_RxConfiguration+0x174>)
 80025ec:	22e7      	movs	r2, #231	; 0xe7
 80025ee:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[1]  	= 0xE7;
 80025f2:	4b45      	ldr	r3, [pc, #276]	; (8002708 <NRF24_RxConfiguration+0x174>)
 80025f4:	22e7      	movs	r2, #231	; 0xe7
 80025f6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[2]  	= 0xE7;
 80025fa:	4b43      	ldr	r3, [pc, #268]	; (8002708 <NRF24_RxConfiguration+0x174>)
 80025fc:	22e7      	movs	r2, #231	; 0xe7
 80025fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[3]  	= 0xE7;
 8002602:	4b41      	ldr	r3, [pc, #260]	; (8002708 <NRF24_RxConfiguration+0x174>)
 8002604:	22e7      	movs	r2, #231	; 0xe7
 8002606:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[4]  	= 0xE7;
 800260a:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <NRF24_RxConfiguration+0x174>)
 800260c:	22e7      	movs	r2, #231	; 0xe7
 800260e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[0]  	= 0xC2;
 8002612:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <NRF24_RxConfiguration+0x174>)
 8002614:	22c2      	movs	r2, #194	; 0xc2
 8002616:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[1]  	= 0xC2;
 800261a:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <NRF24_RxConfiguration+0x174>)
 800261c:	22c2      	movs	r2, #194	; 0xc2
 800261e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[2]  	= 0xC2;
 8002622:	4b39      	ldr	r3, [pc, #228]	; (8002708 <NRF24_RxConfiguration+0x174>)
 8002624:	22c2      	movs	r2, #194	; 0xc2
 8002626:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[3]  	= 0xC2;
 800262a:	4b37      	ldr	r3, [pc, #220]	; (8002708 <NRF24_RxConfiguration+0x174>)
 800262c:	22c2      	movs	r2, #194	; 0xc2
 800262e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[4]  	= 0xC2;
 8002632:	4b35      	ldr	r3, [pc, #212]	; (8002708 <NRF24_RxConfiguration+0x174>)
 8002634:	22c2      	movs	r2, #194	; 0xc2
 8002636:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P2  	= 0xC3;
 800263a:	4b33      	ldr	r3, [pc, #204]	; (8002708 <NRF24_RxConfiguration+0x174>)
 800263c:	22c3      	movs	r2, #195	; 0xc3
 800263e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P3 		= 0xC4;
 8002642:	4b31      	ldr	r3, [pc, #196]	; (8002708 <NRF24_RxConfiguration+0x174>)
 8002644:	22c4      	movs	r2, #196	; 0xc4
 8002646:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P4  	= 0xC5;
 800264a:	4b2f      	ldr	r3, [pc, #188]	; (8002708 <NRF24_RxConfiguration+0x174>)
 800264c:	22c5      	movs	r2, #197	; 0xc5
 800264e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P5  	= 0xC6;
 8002652:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <NRF24_RxConfiguration+0x174>)
 8002654:	22c6      	movs	r2, #198	; 0xc6
 8002656:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[0]   	= 0xE7;
 800265a:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <NRF24_RxConfiguration+0x174>)
 800265c:	22e7      	movs	r2, #231	; 0xe7
 800265e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[1]   	= 0xE7;
 8002662:	4b29      	ldr	r3, [pc, #164]	; (8002708 <NRF24_RxConfiguration+0x174>)
 8002664:	22e7      	movs	r2, #231	; 0xe7
 8002666:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[2]   	= 0xE7;
 800266a:	4b27      	ldr	r3, [pc, #156]	; (8002708 <NRF24_RxConfiguration+0x174>)
 800266c:	22e7      	movs	r2, #231	; 0xe7
 800266e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[3]   	= 0xE7;
 8002672:	4b25      	ldr	r3, [pc, #148]	; (8002708 <NRF24_RxConfiguration+0x174>)
 8002674:	22e7      	movs	r2, #231	; 0xe7
 8002676:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[4]   	= 0xE7;
 800267a:	4b23      	ldr	r3, [pc, #140]	; (8002708 <NRF24_RxConfiguration+0x174>)
 800267c:	22e7      	movs	r2, #231	; 0xe7
 800267e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P0  		= 0X20;
 8002682:	4b21      	ldr	r3, [pc, #132]	; (8002708 <NRF24_RxConfiguration+0x174>)
 8002684:	2220      	movs	r2, #32
 8002686:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P1  		= 0X20;
 800268a:	4b1f      	ldr	r3, [pc, #124]	; (8002708 <NRF24_RxConfiguration+0x174>)
 800268c:	2220      	movs	r2, #32
 800268e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P2  		= 0X00;
 8002692:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <NRF24_RxConfiguration+0x174>)
 8002694:	2200      	movs	r2, #0
 8002696:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P3  		= 0X00;
 800269a:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <NRF24_RxConfiguration+0x174>)
 800269c:	2200      	movs	r2, #0
 800269e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P4  		= 0X00;
 80026a2:	4b19      	ldr	r3, [pc, #100]	; (8002708 <NRF24_RxConfiguration+0x174>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P5  		= 0X00;
 80026aa:	4b17      	ldr	r3, [pc, #92]	; (8002708 <NRF24_RxConfiguration+0x174>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	NRF24_Configurations_Struct.Rx_mode.FIFO_STATUS  	= 0X11;
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <NRF24_RxConfiguration+0x174>)
 80026b4:	2211      	movs	r2, #17
 80026b6:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	NRF24_Configurations_Struct.Rx_mode.DYNPD  			= 0X00;
 80026ba:	4b13      	ldr	r3, [pc, #76]	; (8002708 <NRF24_RxConfiguration+0x174>)
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	NRF24_Configurations_Struct.Rx_mode.FEATURE  		= 0X00;
 80026c2:	4b11      	ldr	r3, [pc, #68]	; (8002708 <NRF24_RxConfiguration+0x174>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	NRF24_config(NRF24_Configurations_Struct.Rx_mode);
 80026ca:	4e0f      	ldr	r6, [pc, #60]	; (8002708 <NRF24_RxConfiguration+0x174>)
 80026cc:	466c      	mov	r4, sp
 80026ce:	f106 055c 	add.w	r5, r6, #92	; 0x5c
 80026d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80026da:	6020      	str	r0, [r4, #0]
 80026dc:	3404      	adds	r4, #4
 80026de:	8021      	strh	r1, [r4, #0]
 80026e0:	f106 034c 	add.w	r3, r6, #76	; 0x4c
 80026e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026e6:	f7ff fd55 	bl	8002194 <NRF24_config>
	NRF24_ActualConfiguration();
 80026ea:	f7ff fc8b 	bl	8002004 <NRF24_ActualConfiguration>
	NRF24_Enable();
 80026ee:	2201      	movs	r2, #1
 80026f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026f4:	4805      	ldr	r0, [pc, #20]	; (800270c <NRF24_RxConfiguration+0x178>)
 80026f6:	f002 f8f5 	bl	80048e4 <HAL_GPIO_WritePin>
	NRF24_mode = RxMode;
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <NRF24_RxConfiguration+0x17c>)
 80026fc:	2202      	movs	r2, #2
 80026fe:	701a      	strb	r2, [r3, #0]
}
 8002700:	bf00      	nop
 8002702:	3704      	adds	r7, #4
 8002704:	46bd      	mov	sp, r7
 8002706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002708:	2000015c 	.word	0x2000015c
 800270c:	40020400 	.word	0x40020400
 8002710:	20000200 	.word	0x20000200

08002714 <NRF24_CheckFlags>:

void NRF24_CheckFlags(void){
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
	uint8_t buffer = NRF24_read(STATUS);
 800271a:	2007      	movs	r0, #7
 800271c:	f7ff fb70 	bl	8001e00 <NRF24_read>
 8002720:	4603      	mov	r3, r0
 8002722:	71fb      	strb	r3, [r7, #7]
	TX_FULL =  buffer & 0x01;
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <NRF24_CheckFlags+0xbc>)
 800272e:	701a      	strb	r2, [r3, #0]
	RX_P_NO = (buffer & 0x0E) >> 1;
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	105b      	asrs	r3, r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	b2da      	uxtb	r2, r3
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <NRF24_CheckFlags+0xc0>)
 800273e:	701a      	strb	r2, [r3, #0]
	MAX_RT  = (buffer & 0x10) >> 4;
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	111b      	asrs	r3, r3, #4
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	b2da      	uxtb	r2, r3
 800274c:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <NRF24_CheckFlags+0xc4>)
 800274e:	701a      	strb	r2, [r3, #0]
	TX_DS   = (buffer & 0x20) >> 5;
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	115b      	asrs	r3, r3, #5
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	b2da      	uxtb	r2, r3
 800275c:	4b1f      	ldr	r3, [pc, #124]	; (80027dc <NRF24_CheckFlags+0xc8>)
 800275e:	701a      	strb	r2, [r3, #0]
	RX_DR   = (buffer & 0x40) >> 6;
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	119b      	asrs	r3, r3, #6
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	b2da      	uxtb	r2, r3
 800276c:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <NRF24_CheckFlags+0xcc>)
 800276e:	701a      	strb	r2, [r3, #0]

	buffer   = NRF24_read(FIFO_STATUS);
 8002770:	2017      	movs	r0, #23
 8002772:	f7ff fb45 	bl	8001e00 <NRF24_read>
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
	RX_EMPTY =  buffer & 0x01;
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	b2da      	uxtb	r2, r3
 8002782:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <NRF24_CheckFlags+0xd0>)
 8002784:	701a      	strb	r2, [r3, #0]
	RX_FULL  = (buffer & 0x02) >> 1;
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	105b      	asrs	r3, r3, #1
 800278a:	b2db      	uxtb	r3, r3
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <NRF24_CheckFlags+0xd4>)
 8002794:	701a      	strb	r2, [r3, #0]
	TX_EMPTY = (buffer & 0x10) >> 4;
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	111b      	asrs	r3, r3, #4
 800279a:	b2db      	uxtb	r3, r3
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <NRF24_CheckFlags+0xd8>)
 80027a4:	701a      	strb	r2, [r3, #0]
	TX_FULL  = (buffer & 0x20) >> 5;
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	115b      	asrs	r3, r3, #5
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <NRF24_CheckFlags+0xbc>)
 80027b4:	701a      	strb	r2, [r3, #0]
	TX_REUSE = (buffer & 0x40) >> 6;
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	119b      	asrs	r3, r3, #6
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <NRF24_CheckFlags+0xdc>)
 80027c4:	701a      	strb	r2, [r3, #0]
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200001f5 	.word	0x200001f5
 80027d4:	200001f6 	.word	0x200001f6
 80027d8:	200001f7 	.word	0x200001f7
 80027dc:	200001f8 	.word	0x200001f8
 80027e0:	200001f9 	.word	0x200001f9
 80027e4:	200001fa 	.word	0x200001fa
 80027e8:	200001fb 	.word	0x200001fb
 80027ec:	200001fc 	.word	0x200001fc
 80027f0:	200001fd 	.word	0x200001fd

080027f4 <NRF24_FIFO_write>:

void NRF24_FIFO_write(uint8_t *pData, uint8_t size){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	70fb      	strb	r3, [r7, #3]
	uint8_t Adr = W_TX_PAYLOAD;
 8002800:	23a0      	movs	r3, #160	; 0xa0
 8002802:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 8002804:	2200      	movs	r2, #0
 8002806:	f44f 7100 	mov.w	r1, #512	; 0x200
 800280a:	4812      	ldr	r0, [pc, #72]	; (8002854 <NRF24_FIFO_write+0x60>)
 800280c:	f002 f86a 	bl	80048e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8002810:	f107 030e 	add.w	r3, r7, #14
 8002814:	2201      	movs	r2, #1
 8002816:	4619      	mov	r1, r3
 8002818:	480f      	ldr	r0, [pc, #60]	; (8002858 <NRF24_FIFO_write+0x64>)
 800281a:	f004 f9ff 	bl	8006c1c <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 800281e:	2300      	movs	r3, #0
 8002820:	73fb      	strb	r3, [r7, #15]
 8002822:	e00a      	b.n	800283a <NRF24_FIFO_write+0x46>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &pData[n], 1);
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	2201      	movs	r2, #1
 800282c:	4619      	mov	r1, r3
 800282e:	480a      	ldr	r0, [pc, #40]	; (8002858 <NRF24_FIFO_write+0x64>)
 8002830:	f004 f9f4 	bl	8006c1c <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	3301      	adds	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	2b1f      	cmp	r3, #31
 800283e:	d9f1      	bls.n	8002824 <NRF24_FIFO_write+0x30>
	}
	NRF24_unselect();
 8002840:	2201      	movs	r2, #1
 8002842:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002846:	4803      	ldr	r0, [pc, #12]	; (8002854 <NRF24_FIFO_write+0x60>)
 8002848:	f002 f84c 	bl	80048e4 <HAL_GPIO_WritePin>
}
 800284c:	bf00      	nop
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40020400 	.word	0x40020400
 8002858:	20000560 	.word	0x20000560

0800285c <NRF24_FIFO_read>:

void NRF24_FIFO_read(uint8_t *pData){
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	uint8_t Adr = R_RX_PAYLOAD;
 8002864:	2361      	movs	r3, #97	; 0x61
 8002866:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 8002868:	2200      	movs	r2, #0
 800286a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800286e:	4812      	ldr	r0, [pc, #72]	; (80028b8 <NRF24_FIFO_read+0x5c>)
 8002870:	f002 f838 	bl	80048e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8002874:	f107 030e 	add.w	r3, r7, #14
 8002878:	2201      	movs	r2, #1
 800287a:	4619      	mov	r1, r3
 800287c:	480f      	ldr	r0, [pc, #60]	; (80028bc <NRF24_FIFO_read+0x60>)
 800287e:	f004 f9cd 	bl	8006c1c <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	e00a      	b.n	800289e <NRF24_FIFO_read+0x42>
		HAL_SPI_Receive_DMA(SPI_NRF24, &pData[n], 1);
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	2201      	movs	r2, #1
 8002890:	4619      	mov	r1, r3
 8002892:	480a      	ldr	r0, [pc, #40]	; (80028bc <NRF24_FIFO_read+0x60>)
 8002894:	f004 fa74 	bl	8006d80 <HAL_SPI_Receive_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	3301      	adds	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	2b1f      	cmp	r3, #31
 80028a2:	d9f1      	bls.n	8002888 <NRF24_FIFO_read+0x2c>
	}
	NRF24_unselect();
 80028a4:	2201      	movs	r2, #1
 80028a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028aa:	4803      	ldr	r0, [pc, #12]	; (80028b8 <NRF24_FIFO_read+0x5c>)
 80028ac:	f002 f81a 	bl	80048e4 <HAL_GPIO_WritePin>
}
 80028b0:	bf00      	nop
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40020400 	.word	0x40020400
 80028bc:	20000560 	.word	0x20000560

080028c0 <NRF24_init>:

void NRF24_init(void){
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
	NRF24_Disable();
 80028c4:	2200      	movs	r2, #0
 80028c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028ca:	4808      	ldr	r0, [pc, #32]	; (80028ec <NRF24_init+0x2c>)
 80028cc:	f002 f80a 	bl	80048e4 <HAL_GPIO_WritePin>
	NRF24_unselect();
 80028d0:	2201      	movs	r2, #1
 80028d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028d6:	4805      	ldr	r0, [pc, #20]	; (80028ec <NRF24_init+0x2c>)
 80028d8:	f002 f804 	bl	80048e4 <HAL_GPIO_WritePin>
	NRF24_DefaultConfiguration();
 80028dc:	f7ff fcf6 	bl	80022cc <NRF24_DefaultConfiguration>
	NRF24_mode = 0;
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <NRF24_init+0x30>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40020400 	.word	0x40020400
 80028f0:	20000200 	.word	0x20000200

080028f4 <NRF24_Receive>:


void NRF24_Receive(void){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
	if(RX_P_NO != 7){
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <NRF24_Receive+0x1c>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b07      	cmp	r3, #7
 80028fe:	d004      	beq.n	800290a <NRF24_Receive+0x16>
		NRF24_FIFO_read(RxBuffer);
 8002900:	4804      	ldr	r0, [pc, #16]	; (8002914 <NRF24_Receive+0x20>)
 8002902:	f7ff ffab 	bl	800285c <NRF24_FIFO_read>
		RxDecode();
 8002906:	f7fe facd 	bl	8000ea4 <RxDecode>
	}
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200001f6 	.word	0x200001f6
 8002914:	20000224 	.word	0x20000224

08002918 <NRF24_Transmit>:

void NRF24_Transmit(void){
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
	if(MAX_RT)  NRF24_write(STATUS, 0x70);
 800291c:	4b2b      	ldr	r3, [pc, #172]	; (80029cc <NRF24_Transmit+0xb4>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <NRF24_Transmit+0x14>
 8002924:	2170      	movs	r1, #112	; 0x70
 8002926:	2007      	movs	r0, #7
 8002928:	f7ff f9f6 	bl	8001d18 <NRF24_write>
	if(TX_FULL) NRF24_FlushTxFIFO();
 800292c:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <NRF24_Transmit+0xb8>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <NRF24_Transmit+0x20>
 8002934:	f7ff fb08 	bl	8001f48 <NRF24_FlushTxFIFO>
	switch (Struct2transmit) {
 8002938:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <NRF24_Transmit+0xbc>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d01f      	beq.n	8002980 <NRF24_Transmit+0x68>
 8002940:	2b02      	cmp	r3, #2
 8002942:	dc22      	bgt.n	800298a <NRF24_Transmit+0x72>
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <NRF24_Transmit+0x36>
 8002948:	2b01      	cmp	r3, #1
 800294a:	d013      	beq.n	8002974 <NRF24_Transmit+0x5c>
 800294c:	e01d      	b.n	800298a <NRF24_Transmit+0x72>
		case MainFrame:
			Tx_MainFrame();
 800294e:	f7fe fad7 	bl	8000f00 <Tx_MainFrame>
			if(++Transmision_cont>=5){
 8002952:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <NRF24_Transmit+0xc0>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	3301      	adds	r3, #1
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4b1f      	ldr	r3, [pc, #124]	; (80029d8 <NRF24_Transmit+0xc0>)
 800295c:	701a      	strb	r2, [r3, #0]
 800295e:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <NRF24_Transmit+0xc0>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b04      	cmp	r3, #4
 8002964:	d910      	bls.n	8002988 <NRF24_Transmit+0x70>
				Transmision_cont = RESET;
 8002966:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <NRF24_Transmit+0xc0>)
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
				Struct2transmit = SecondaryFrame;
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <NRF24_Transmit+0xbc>)
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002972:	e009      	b.n	8002988 <NRF24_Transmit+0x70>
		case SecondaryFrame:
			Tx_SecondaryFrame();
 8002974:	f7fe fb8c 	bl	8001090 <Tx_SecondaryFrame>
			Struct2transmit = MainFrame;
 8002978:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <NRF24_Transmit+0xbc>)
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
			break;
 800297e:	e004      	b.n	800298a <NRF24_Transmit+0x72>
		case CommandReplay:
			Struct2transmit = MainFrame;
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <NRF24_Transmit+0xbc>)
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
			break;
 8002986:	e000      	b.n	800298a <NRF24_Transmit+0x72>
			break;
 8002988:	bf00      	nop
	}
	NRF24_FIFO_write(TxBuffer, 32);
 800298a:	2120      	movs	r1, #32
 800298c:	4813      	ldr	r0, [pc, #76]	; (80029dc <NRF24_Transmit+0xc4>)
 800298e:	f7ff ff31 	bl	80027f4 <NRF24_FIFO_write>
	N_message += 1;
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <NRF24_Transmit+0xc8>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <NRF24_Transmit+0xc8>)
 800299c:	701a      	strb	r2, [r3, #0]
	Transmision_Flag = 0;
 800299e:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <NRF24_Transmit+0xcc>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
	memset(TxBuffer, RESET, sizeof(TxBuffer));
 80029a4:	2220      	movs	r2, #32
 80029a6:	2100      	movs	r1, #0
 80029a8:	480c      	ldr	r0, [pc, #48]	; (80029dc <NRF24_Transmit+0xc4>)
 80029aa:	f006 fc2f 	bl	800920c <memset>
	if(++Cont_RX > 1) NRF24_RxConfiguration();
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <NRF24_Transmit+0xd0>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	3301      	adds	r3, #1
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <NRF24_Transmit+0xd0>)
 80029b8:	701a      	strb	r2, [r3, #0]
 80029ba:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <NRF24_Transmit+0xd0>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d901      	bls.n	80029c6 <NRF24_Transmit+0xae>
 80029c2:	f7ff fde7 	bl	8002594 <NRF24_RxConfiguration>
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200001f7 	.word	0x200001f7
 80029d0:	200001f5 	.word	0x200001f5
 80029d4:	20000245 	.word	0x20000245
 80029d8:	20000246 	.word	0x20000246
 80029dc:	20000204 	.word	0x20000204
 80029e0:	20000244 	.word	0x20000244
 80029e4:	200001f4 	.word	0x200001f4
 80029e8:	200001ff 	.word	0x200001ff

080029ec <NRF24_StateMachine>:


void NRF24_StateMachine(void){
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
	NRF24_CheckFlags();
 80029f0:	f7ff fe90 	bl	8002714 <NRF24_CheckFlags>

	switch (Transmision_Flag) {
 80029f4:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <NRF24_StateMachine+0xa4>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <NRF24_StateMachine+0x16>
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d00a      	beq.n	8002a16 <NRF24_StateMachine+0x2a>
 8002a00:	e010      	b.n	8002a24 <NRF24_StateMachine+0x38>
		case 0:
			NRF24_Enable();
 8002a02:	2201      	movs	r2, #1
 8002a04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a08:	4822      	ldr	r0, [pc, #136]	; (8002a94 <NRF24_StateMachine+0xa8>)
 8002a0a:	f001 ff6b 	bl	80048e4 <HAL_GPIO_WritePin>
			Transmision_Flag = 1;
 8002a0e:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <NRF24_StateMachine+0xa4>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
			break;
 8002a14:	e006      	b.n	8002a24 <NRF24_StateMachine+0x38>
		case 1:
			NRF24_Disable();
 8002a16:	2200      	movs	r2, #0
 8002a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a1c:	481d      	ldr	r0, [pc, #116]	; (8002a94 <NRF24_StateMachine+0xa8>)
 8002a1e:	f001 ff61 	bl	80048e4 <HAL_GPIO_WritePin>
			break;
 8002a22:	bf00      	nop
	}


	switch (NRF24_mode){
 8002a24:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <NRF24_StateMachine+0xac>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d82a      	bhi.n	8002a82 <NRF24_StateMachine+0x96>
 8002a2c:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <NRF24_StateMachine+0x48>)
 8002a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a32:	bf00      	nop
 8002a34:	08002a45 	.word	0x08002a45
 8002a38:	08002a77 	.word	0x08002a77
 8002a3c:	08002a59 	.word	0x08002a59
 8002a40:	08002a7d 	.word	0x08002a7d
		case Init:
			NRF24_RxConfiguration();
 8002a44:	f7ff fda6 	bl	8002594 <NRF24_RxConfiguration>
			NRF24_PowerUp();
 8002a48:	f7ff fabe 	bl	8001fc8 <NRF24_PowerUp>
			NRF24_ActualConfiguration();
 8002a4c:	f7ff fada 	bl	8002004 <NRF24_ActualConfiguration>
			NRF24_mode = StandBy;
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <NRF24_StateMachine+0xac>)
 8002a52:	2203      	movs	r2, #3
 8002a54:	701a      	strb	r2, [r3, #0]
			break;
 8002a56:	e018      	b.n	8002a8a <NRF24_StateMachine+0x9e>
		case RxMode:
			NRF24_Receive();
 8002a58:	f7ff ff4c 	bl	80028f4 <NRF24_Receive>
			if(++Cont_TX > 10) NRF24_TxConfiguration();
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <NRF24_StateMachine+0xb0>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	3301      	adds	r3, #1
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <NRF24_StateMachine+0xb0>)
 8002a66:	701a      	strb	r2, [r3, #0]
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <NRF24_StateMachine+0xb0>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b0a      	cmp	r3, #10
 8002a6e:	d90b      	bls.n	8002a88 <NRF24_StateMachine+0x9c>
 8002a70:	f7ff fcc8 	bl	8002404 <NRF24_TxConfiguration>
			break;
 8002a74:	e008      	b.n	8002a88 <NRF24_StateMachine+0x9c>
		case TxMode:
			NRF24_Transmit();
 8002a76:	f7ff ff4f 	bl	8002918 <NRF24_Transmit>
			break;
 8002a7a:	e006      	b.n	8002a8a <NRF24_StateMachine+0x9e>
		case StandBy:
			NRF24_Receive();
 8002a7c:	f7ff ff3a 	bl	80028f4 <NRF24_Receive>
			break;
 8002a80:	e003      	b.n	8002a8a <NRF24_StateMachine+0x9e>
		default:
			NRF24_init();
 8002a82:	f7ff ff1d 	bl	80028c0 <NRF24_init>
	}

}
 8002a86:	e000      	b.n	8002a8a <NRF24_StateMachine+0x9e>
			break;
 8002a88:	bf00      	nop
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200001f4 	.word	0x200001f4
 8002a94:	40020400 	.word	0x40020400
 8002a98:	20000200 	.word	0x20000200
 8002a9c:	200001fe 	.word	0x200001fe

08002aa0 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af04      	add	r7, sp, #16
 8002aa6:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002aa8:	2364      	movs	r3, #100	; 0x64
 8002aaa:	9302      	str	r3, [sp, #8]
 8002aac:	2301      	movs	r3, #1
 8002aae:	9301      	str	r3, [sp, #4]
 8002ab0:	f107 030f 	add.w	r3, r7, #15
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	2275      	movs	r2, #117	; 0x75
 8002aba:	21d0      	movs	r1, #208	; 0xd0
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f002 f969 	bl	8004d94 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	2b68      	cmp	r3, #104	; 0x68
 8002ac6:	d13d      	bne.n	8002b44 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002acc:	2364      	movs	r3, #100	; 0x64
 8002ace:	9302      	str	r3, [sp, #8]
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	9301      	str	r3, [sp, #4]
 8002ad4:	f107 030e 	add.w	r3, r7, #14
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	2301      	movs	r3, #1
 8002adc:	226b      	movs	r2, #107	; 0x6b
 8002ade:	21d0      	movs	r1, #208	; 0xd0
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f002 f85d 	bl	8004ba0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002ae6:	2307      	movs	r3, #7
 8002ae8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002aea:	2364      	movs	r3, #100	; 0x64
 8002aec:	9302      	str	r3, [sp, #8]
 8002aee:	2301      	movs	r3, #1
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	f107 030e 	add.w	r3, r7, #14
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2301      	movs	r3, #1
 8002afa:	2219      	movs	r2, #25
 8002afc:	21d0      	movs	r1, #208	; 0xd0
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f002 f84e 	bl	8004ba0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002b04:	2300      	movs	r3, #0
 8002b06:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002b08:	2364      	movs	r3, #100	; 0x64
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	f107 030e 	add.w	r3, r7, #14
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	2301      	movs	r3, #1
 8002b18:	221c      	movs	r2, #28
 8002b1a:	21d0      	movs	r1, #208	; 0xd0
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f002 f83f 	bl	8004ba0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002b22:	2300      	movs	r3, #0
 8002b24:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002b26:	2364      	movs	r3, #100	; 0x64
 8002b28:	9302      	str	r3, [sp, #8]
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	f107 030e 	add.w	r3, r7, #14
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	2301      	movs	r3, #1
 8002b36:	221b      	movs	r2, #27
 8002b38:	21d0      	movs	r1, #208	; 0xd0
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f002 f830 	bl	8004ba0 <HAL_I2C_Mem_Write>
        return 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	e000      	b.n	8002b46 <MPU6050_Init+0xa6>
    }
    return 1;
 8002b44:	2301      	movs	r3, #1
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b54:	b094      	sub	sp, #80	; 0x50
 8002b56:	af04      	add	r7, sp, #16
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002b5c:	2364      	movs	r3, #100	; 0x64
 8002b5e:	9302      	str	r3, [sp, #8]
 8002b60:	230e      	movs	r3, #14
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	f107 0308 	add.w	r3, r7, #8
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	223b      	movs	r2, #59	; 0x3b
 8002b6e:	21d0      	movs	r1, #208	; 0xd0
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f002 f90f 	bl	8004d94 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002b76:	7a3b      	ldrb	r3, [r7, #8]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	b21a      	sxth	r2, r3
 8002b7c:	7a7b      	ldrb	r3, [r7, #9]
 8002b7e:	b21b      	sxth	r3, r3
 8002b80:	4313      	orrs	r3, r2
 8002b82:	b21a      	sxth	r2, r3
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002b88:	7abb      	ldrb	r3, [r7, #10]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	b21a      	sxth	r2, r3
 8002b8e:	7afb      	ldrb	r3, [r7, #11]
 8002b90:	b21b      	sxth	r3, r3
 8002b92:	4313      	orrs	r3, r2
 8002b94:	b21a      	sxth	r2, r3
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002b9a:	7b3b      	ldrb	r3, [r7, #12]
 8002b9c:	021b      	lsls	r3, r3, #8
 8002b9e:	b21a      	sxth	r2, r3
 8002ba0:	7b7b      	ldrb	r3, [r7, #13]
 8002ba2:	b21b      	sxth	r3, r3
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	b21a      	sxth	r2, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8002bac:	7bbb      	ldrb	r3, [r7, #14]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	b21a      	sxth	r2, r3
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	b21b      	sxth	r3, r3
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8002bba:	7c3b      	ldrb	r3, [r7, #16]
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	b21a      	sxth	r2, r3
 8002bc0:	7c7b      	ldrb	r3, [r7, #17]
 8002bc2:	b21b      	sxth	r3, r3
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	b21a      	sxth	r2, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8002bcc:	7cbb      	ldrb	r3, [r7, #18]
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	b21a      	sxth	r2, r3
 8002bd2:	7cfb      	ldrb	r3, [r7, #19]
 8002bd4:	b21b      	sxth	r3, r3
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	b21a      	sxth	r2, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8002bde:	7d3b      	ldrb	r3, [r7, #20]
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	b21a      	sxth	r2, r3
 8002be4:	7d7b      	ldrb	r3, [r7, #21]
 8002be6:	b21b      	sxth	r3, r3
 8002be8:	4313      	orrs	r3, r2
 8002bea:	b21a      	sxth	r2, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fd fc44 	bl	8000484 <__aeabi_i2d>
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	4bbd      	ldr	r3, [pc, #756]	; (8002ef8 <MPU6050_Read_All+0x3a8>)
 8002c02:	f7fd fdd3 	bl	80007ac <__aeabi_ddiv>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	6839      	ldr	r1, [r7, #0]
 8002c0c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd fc34 	bl	8000484 <__aeabi_i2d>
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	4bb5      	ldr	r3, [pc, #724]	; (8002ef8 <MPU6050_Read_All+0x3a8>)
 8002c22:	f7fd fdc3 	bl	80007ac <__aeabi_ddiv>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	6839      	ldr	r1, [r7, #0]
 8002c2c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fd fc24 	bl	8000484 <__aeabi_i2d>
 8002c3c:	a3a8      	add	r3, pc, #672	; (adr r3, 8002ee0 <MPU6050_Read_All+0x390>)
 8002c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c42:	f7fd fdb3 	bl	80007ac <__aeabi_ddiv>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	6839      	ldr	r1, [r7, #0]
 8002c4c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8002c50:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002c54:	ee07 3a90 	vmov	s15, r3
 8002c58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c5c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8002efc <MPU6050_Read_All+0x3ac>
 8002c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c64:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002f00 <MPU6050_Read_All+0x3b0>
 8002c68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fc03 	bl	8000484 <__aeabi_i2d>
 8002c7e:	a39a      	add	r3, pc, #616	; (adr r3, 8002ee8 <MPU6050_Read_All+0x398>)
 8002c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c84:	f7fd fd92 	bl	80007ac <__aeabi_ddiv>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	6839      	ldr	r1, [r7, #0]
 8002c8e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd fbf3 	bl	8000484 <__aeabi_i2d>
 8002c9e:	a392      	add	r3, pc, #584	; (adr r3, 8002ee8 <MPU6050_Read_All+0x398>)
 8002ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca4:	f7fd fd82 	bl	80007ac <__aeabi_ddiv>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	6839      	ldr	r1, [r7, #0]
 8002cae:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fd fbe3 	bl	8000484 <__aeabi_i2d>
 8002cbe:	a38a      	add	r3, pc, #552	; (adr r3, 8002ee8 <MPU6050_Read_All+0x398>)
 8002cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc4:	f7fd fd72 	bl	80007ac <__aeabi_ddiv>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	6839      	ldr	r1, [r7, #0]
 8002cce:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8002cd2:	f001 f803 	bl	8003cdc <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	4b8a      	ldr	r3, [pc, #552]	; (8002f04 <MPU6050_Read_All+0x3b4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fd fbc0 	bl	8000464 <__aeabi_ui2d>
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	4b87      	ldr	r3, [pc, #540]	; (8002f08 <MPU6050_Read_All+0x3b8>)
 8002cea:	f7fd fd5f 	bl	80007ac <__aeabi_ddiv>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002cf6:	f000 fff1 	bl	8003cdc <HAL_GetTick>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4a81      	ldr	r2, [pc, #516]	; (8002f04 <MPU6050_Read_All+0x3b4>)
 8002cfe:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d06:	461a      	mov	r2, r3
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d0e:	fb03 f202 	mul.w	r2, r3, r2
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fbac 	bl	8000484 <__aeabi_i2d>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	ec43 2b10 	vmov	d0, r2, r3
 8002d34:	f006 fade 	bl	80092f4 <sqrt>
 8002d38:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d48:	f7fd fe6e 	bl	8000a28 <__aeabi_dcmpeq>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d11f      	bne.n	8002d92 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fd fb93 	bl	8000484 <__aeabi_i2d>
 8002d5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d62:	f7fd fd23 	bl	80007ac <__aeabi_ddiv>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	ec43 2b17 	vmov	d7, r2, r3
 8002d6e:	eeb0 0a47 	vmov.f32	s0, s14
 8002d72:	eef0 0a67 	vmov.f32	s1, s15
 8002d76:	f006 faeb 	bl	8009350 <atan>
 8002d7a:	ec51 0b10 	vmov	r0, r1, d0
 8002d7e:	a35c      	add	r3, pc, #368	; (adr r3, 8002ef0 <MPU6050_Read_All+0x3a0>)
 8002d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d84:	f7fd fbe8 	bl	8000558 <__aeabi_dmul>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002d90:	e005      	b.n	8002d9e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da4:	425b      	negs	r3, r3
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fb6c 	bl	8000484 <__aeabi_i2d>
 8002dac:	4682      	mov	sl, r0
 8002dae:	468b      	mov	fp, r1
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fb64 	bl	8000484 <__aeabi_i2d>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	ec43 2b11 	vmov	d1, r2, r3
 8002dc4:	ec4b ab10 	vmov	d0, sl, fp
 8002dc8:	f006 fa52 	bl	8009270 <atan2>
 8002dcc:	ec51 0b10 	vmov	r0, r1, d0
 8002dd0:	a347      	add	r3, pc, #284	; (adr r3, 8002ef0 <MPU6050_Read_All+0x3a0>)
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	f7fd fbbf 	bl	8000558 <__aeabi_dmul>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	4b49      	ldr	r3, [pc, #292]	; (8002f0c <MPU6050_Read_All+0x3bc>)
 8002de8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002dec:	f7fd fe26 	bl	8000a3c <__aeabi_dcmplt>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <MPU6050_Read_All+0x2bc>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	4b43      	ldr	r3, [pc, #268]	; (8002f10 <MPU6050_Read_All+0x3c0>)
 8002e02:	f7fd fe39 	bl	8000a78 <__aeabi_dcmpgt>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d114      	bne.n	8002e36 <MPU6050_Read_All+0x2e6>
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <MPU6050_Read_All+0x3c0>)
 8002e12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e16:	f7fd fe2f 	bl	8000a78 <__aeabi_dcmpgt>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d015      	beq.n	8002e4c <MPU6050_Read_All+0x2fc>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	4b38      	ldr	r3, [pc, #224]	; (8002f0c <MPU6050_Read_All+0x3bc>)
 8002e2c:	f7fd fe06 	bl	8000a3c <__aeabi_dcmplt>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8002e36:	4937      	ldr	r1, [pc, #220]	; (8002f14 <MPU6050_Read_All+0x3c4>)
 8002e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e3c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002e40:	6839      	ldr	r1, [r7, #0]
 8002e42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e46:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002e4a:	e014      	b.n	8002e76 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002e52:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002e56:	eeb0 1a47 	vmov.f32	s2, s14
 8002e5a:	eef0 1a67 	vmov.f32	s3, s15
 8002e5e:	ed97 0b06 	vldr	d0, [r7, #24]
 8002e62:	482c      	ldr	r0, [pc, #176]	; (8002f14 <MPU6050_Read_All+0x3c4>)
 8002e64:	f000 f85a 	bl	8002f1c <Kalman_getAngle>
 8002e68:	eeb0 7a40 	vmov.f32	s14, s0
 8002e6c:	eef0 7a60 	vmov.f32	s15, s1
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002e7c:	4690      	mov	r8, r2
 8002e7e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <MPU6050_Read_All+0x3c0>)
 8002e88:	4640      	mov	r0, r8
 8002e8a:	4649      	mov	r1, r9
 8002e8c:	f7fd fdf4 	bl	8000a78 <__aeabi_dcmpgt>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d008      	beq.n	8002ea8 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002e9c:	4614      	mov	r4, r2
 8002e9e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002eae:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002eb2:	eeb0 1a47 	vmov.f32	s2, s14
 8002eb6:	eef0 1a67 	vmov.f32	s3, s15
 8002eba:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002ebe:	4816      	ldr	r0, [pc, #88]	; (8002f18 <MPU6050_Read_All+0x3c8>)
 8002ec0:	f000 f82c 	bl	8002f1c <Kalman_getAngle>
 8002ec4:	eeb0 7a40 	vmov.f32	s14, s0
 8002ec8:	eef0 7a60 	vmov.f32	s15, s1
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8002ed2:	bf00      	nop
 8002ed4:	3740      	adds	r7, #64	; 0x40
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002edc:	f3af 8000 	nop.w
 8002ee0:	00000000 	.word	0x00000000
 8002ee4:	40cc2900 	.word	0x40cc2900
 8002ee8:	00000000 	.word	0x00000000
 8002eec:	40606000 	.word	0x40606000
 8002ef0:	1a63c1f8 	.word	0x1a63c1f8
 8002ef4:	404ca5dc 	.word	0x404ca5dc
 8002ef8:	40d00000 	.word	0x40d00000
 8002efc:	43aa0000 	.word	0x43aa0000
 8002f00:	42121eb8 	.word	0x42121eb8
 8002f04:	20000248 	.word	0x20000248
 8002f08:	408f4000 	.word	0x408f4000
 8002f0c:	c0568000 	.word	0xc0568000
 8002f10:	40568000 	.word	0x40568000
 8002f14:	20000048 	.word	0x20000048
 8002f18:	20000000 	.word	0x20000000

08002f1c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8002f1c:	b5b0      	push	{r4, r5, r7, lr}
 8002f1e:	b096      	sub	sp, #88	; 0x58
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	61f8      	str	r0, [r7, #28]
 8002f24:	ed87 0b04 	vstr	d0, [r7, #16]
 8002f28:	ed87 1b02 	vstr	d1, [r7, #8]
 8002f2c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002f36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f3a:	f7fd f955 	bl	80001e8 <__aeabi_dsub>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002f4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f54:	f7fd fb00 	bl	8000558 <__aeabi_dmul>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	4629      	mov	r1, r5
 8002f60:	f7fd f944 	bl	80001ec <__adddf3>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	69f9      	ldr	r1, [r7, #28]
 8002f6a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f7e:	f7fd faeb 	bl	8000558 <__aeabi_dmul>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002f90:	f7fd f92a 	bl	80001e8 <__aeabi_dsub>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4610      	mov	r0, r2
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002fa2:	f7fd f921 	bl	80001e8 <__aeabi_dsub>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4610      	mov	r0, r2
 8002fac:	4619      	mov	r1, r3
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	f7fd f91a 	bl	80001ec <__adddf3>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fc4:	f7fd fac8 	bl	8000558 <__aeabi_dmul>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4620      	mov	r0, r4
 8002fce:	4629      	mov	r1, r5
 8002fd0:	f7fd f90c 	bl	80001ec <__adddf3>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	69f9      	ldr	r1, [r7, #28]
 8002fda:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fee:	f7fd fab3 	bl	8000558 <__aeabi_dmul>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	f7fd f8f5 	bl	80001e8 <__aeabi_dsub>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	69f9      	ldr	r1, [r7, #28]
 8003004:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003018:	f7fd fa9e 	bl	8000558 <__aeabi_dmul>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4620      	mov	r0, r4
 8003022:	4629      	mov	r1, r5
 8003024:	f7fd f8e0 	bl	80001e8 <__aeabi_dsub>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	69f9      	ldr	r1, [r7, #28]
 800302e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800303e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003042:	f7fd fa89 	bl	8000558 <__aeabi_dmul>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4620      	mov	r0, r4
 800304c:	4629      	mov	r1, r5
 800304e:	f7fd f8cd 	bl	80001ec <__adddf3>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	69f9      	ldr	r1, [r7, #28]
 8003058:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003068:	f7fd f8c0 	bl	80001ec <__adddf3>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800307a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800307e:	f7fd fb95 	bl	80007ac <__aeabi_ddiv>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003090:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003094:	f7fd fb8a 	bl	80007ac <__aeabi_ddiv>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80030a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030aa:	f7fd f89d 	bl	80001e8 <__aeabi_dsub>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80030bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80030c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030c4:	f7fd fa48 	bl	8000558 <__aeabi_dmul>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4620      	mov	r0, r4
 80030ce:	4629      	mov	r1, r5
 80030d0:	f7fd f88c 	bl	80001ec <__adddf3>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	69f9      	ldr	r1, [r7, #28]
 80030da:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80030e4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030ec:	f7fd fa34 	bl	8000558 <__aeabi_dmul>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4620      	mov	r0, r4
 80030f6:	4629      	mov	r1, r5
 80030f8:	f7fd f878 	bl	80001ec <__adddf3>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	69f9      	ldr	r1, [r7, #28]
 8003102:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800310c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003116:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003120:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003124:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003128:	f7fd fa16 	bl	8000558 <__aeabi_dmul>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4620      	mov	r0, r4
 8003132:	4629      	mov	r1, r5
 8003134:	f7fd f858 	bl	80001e8 <__aeabi_dsub>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	69f9      	ldr	r1, [r7, #28]
 800313e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003148:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800314c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003150:	f7fd fa02 	bl	8000558 <__aeabi_dmul>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4620      	mov	r0, r4
 800315a:	4629      	mov	r1, r5
 800315c:	f7fd f844 	bl	80001e8 <__aeabi_dsub>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	69f9      	ldr	r1, [r7, #28]
 8003166:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003170:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003174:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003178:	f7fd f9ee 	bl	8000558 <__aeabi_dmul>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4620      	mov	r0, r4
 8003182:	4629      	mov	r1, r5
 8003184:	f7fd f830 	bl	80001e8 <__aeabi_dsub>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	69f9      	ldr	r1, [r7, #28]
 800318e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003198:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800319c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031a0:	f7fd f9da 	bl	8000558 <__aeabi_dmul>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4620      	mov	r0, r4
 80031aa:	4629      	mov	r1, r5
 80031ac:	f7fd f81c 	bl	80001e8 <__aeabi_dsub>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	69f9      	ldr	r1, [r7, #28]
 80031b6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80031c0:	ec43 2b17 	vmov	d7, r2, r3
};
 80031c4:	eeb0 0a47 	vmov.f32	s0, s14
 80031c8:	eef0 0a67 	vmov.f32	s1, s15
 80031cc:	3758      	adds	r7, #88	; 0x58
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080031d4 <MPU6050_calculate>:

void MPU6050_calculate(void){
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
	MPU6050_Read_All(&hi2c1, &MPU6050);
 80031d8:	4902      	ldr	r1, [pc, #8]	; (80031e4 <MPU6050_calculate+0x10>)
 80031da:	4803      	ldr	r0, [pc, #12]	; (80031e8 <MPU6050_calculate+0x14>)
 80031dc:	f7ff fcb8 	bl	8002b50 <MPU6050_Read_All>
}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000250 	.word	0x20000250
 80031e8:	2000050c 	.word	0x2000050c

080031ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <MX_DMA_Init+0x78>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	4a1a      	ldr	r2, [pc, #104]	; (8003264 <MX_DMA_Init+0x78>)
 80031fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003200:	6313      	str	r3, [r2, #48]	; 0x30
 8003202:	4b18      	ldr	r3, [pc, #96]	; (8003264 <MX_DMA_Init+0x78>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	4b14      	ldr	r3, [pc, #80]	; (8003264 <MX_DMA_Init+0x78>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4a13      	ldr	r2, [pc, #76]	; (8003264 <MX_DMA_Init+0x78>)
 8003218:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800321c:	6313      	str	r3, [r2, #48]	; 0x30
 800321e:	4b11      	ldr	r3, [pc, #68]	; (8003264 <MX_DMA_Init+0x78>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	2105      	movs	r1, #5
 800322e:	200e      	movs	r0, #14
 8003230:	f000 fe18 	bl	8003e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003234:	200e      	movs	r0, #14
 8003236:	f000 fe31 	bl	8003e9c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800323a:	2200      	movs	r2, #0
 800323c:	2105      	movs	r1, #5
 800323e:	2038      	movs	r0, #56	; 0x38
 8003240:	f000 fe10 	bl	8003e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003244:	2038      	movs	r0, #56	; 0x38
 8003246:	f000 fe29 	bl	8003e9c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800324a:	2200      	movs	r2, #0
 800324c:	2105      	movs	r1, #5
 800324e:	203a      	movs	r0, #58	; 0x3a
 8003250:	f000 fe08 	bl	8003e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003254:	203a      	movs	r0, #58	; 0x3a
 8003256:	f000 fe21 	bl	8003e9c <HAL_NVIC_EnableIRQ>

}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800

08003268 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4a07      	ldr	r2, [pc, #28]	; (8003294 <vApplicationGetIdleTaskMemory+0x2c>)
 8003278:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	4a06      	ldr	r2, [pc, #24]	; (8003298 <vApplicationGetIdleTaskMemory+0x30>)
 800327e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2280      	movs	r2, #128	; 0x80
 8003284:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003286:	bf00      	nop
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	200002b8 	.word	0x200002b8
 8003298:	2000030c 	.word	0x2000030c

0800329c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800329c:	b5b0      	push	{r4, r5, r7, lr}
 800329e:	b09c      	sub	sp, #112	; 0x70
 80032a0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task10ms */
  osThreadDef(Task10ms, Task_10ms, osPriorityNormal, 0, 128);
 80032a2:	4b27      	ldr	r3, [pc, #156]	; (8003340 <MX_FREERTOS_Init+0xa4>)
 80032a4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80032a8:	461d      	mov	r5, r3
 80032aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task10msHandle = osThreadCreate(osThread(Task10ms), NULL);
 80032b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f004 fd7a 	bl	8007db6 <osThreadCreate>
 80032c2:	4603      	mov	r3, r0
 80032c4:	4a1f      	ldr	r2, [pc, #124]	; (8003344 <MX_FREERTOS_Init+0xa8>)
 80032c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task100ms */
  osThreadDef(Task100ms, Task_100ms, osPriorityNormal, 0, 128);
 80032c8:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <MX_FREERTOS_Init+0xac>)
 80032ca:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80032ce:	461d      	mov	r5, r3
 80032d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task100msHandle = osThreadCreate(osThread(Task100ms), NULL);
 80032dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f004 fd67 	bl	8007db6 <osThreadCreate>
 80032e8:	4603      	mov	r3, r0
 80032ea:	4a18      	ldr	r2, [pc, #96]	; (800334c <MX_FREERTOS_Init+0xb0>)
 80032ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1000ms */
  osThreadDef(Task1000ms, Task_1000ms, osPriorityIdle, 0, 128);
 80032ee:	4b18      	ldr	r3, [pc, #96]	; (8003350 <MX_FREERTOS_Init+0xb4>)
 80032f0:	f107 041c 	add.w	r4, r7, #28
 80032f4:	461d      	mov	r5, r3
 80032f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1000msHandle = osThreadCreate(osThread(Task1000ms), NULL);
 8003302:	f107 031c 	add.w	r3, r7, #28
 8003306:	2100      	movs	r1, #0
 8003308:	4618      	mov	r0, r3
 800330a:	f004 fd54 	bl	8007db6 <osThreadCreate>
 800330e:	4603      	mov	r3, r0
 8003310:	4a10      	ldr	r2, [pc, #64]	; (8003354 <MX_FREERTOS_Init+0xb8>)
 8003312:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1ms */
  osThreadDef(Task1ms, Task_1ms, osPriorityAboveNormal, 0, 128);
 8003314:	4b10      	ldr	r3, [pc, #64]	; (8003358 <MX_FREERTOS_Init+0xbc>)
 8003316:	463c      	mov	r4, r7
 8003318:	461d      	mov	r5, r3
 800331a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800331c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800331e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003322:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1msHandle = osThreadCreate(osThread(Task1ms), NULL);
 8003326:	463b      	mov	r3, r7
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f004 fd43 	bl	8007db6 <osThreadCreate>
 8003330:	4603      	mov	r3, r0
 8003332:	4a0a      	ldr	r2, [pc, #40]	; (800335c <MX_FREERTOS_Init+0xc0>)
 8003334:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003336:	bf00      	nop
 8003338:	3770      	adds	r7, #112	; 0x70
 800333a:	46bd      	mov	sp, r7
 800333c:	bdb0      	pop	{r4, r5, r7, pc}
 800333e:	bf00      	nop
 8003340:	08009d9c 	.word	0x08009d9c
 8003344:	200002a8 	.word	0x200002a8
 8003348:	08009dc4 	.word	0x08009dc4
 800334c:	200002ac 	.word	0x200002ac
 8003350:	08009dec 	.word	0x08009dec
 8003354:	200002b0 	.word	0x200002b0
 8003358:	08009e10 	.word	0x08009e10
 800335c:	200002b4 	.word	0x200002b4

08003360 <Task_10ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_10ms */
void Task_10ms(void const * argument)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_10ms */
	task_init_10ms();
 8003368:	f7fd ff73 	bl	8001252 <task_init_10ms>
  /* Infinite loop */
  for(;;)
  {
	task_10ms();
 800336c:	f7fd ff78 	bl	8001260 <task_10ms>
    osDelay(10);
 8003370:	200a      	movs	r0, #10
 8003372:	f004 fd6c 	bl	8007e4e <osDelay>
	task_10ms();
 8003376:	e7f9      	b.n	800336c <Task_10ms+0xc>

08003378 <Task_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_100ms */
void Task_100ms(void const * argument)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_100ms */
	task_init_100ms();
 8003380:	f7fd ff74 	bl	800126c <task_init_100ms>
  /* Infinite loop */
  for(;;)
  {
	task_100ms();
 8003384:	f7fd ff79 	bl	800127a <task_100ms>
    osDelay(100);
 8003388:	2064      	movs	r0, #100	; 0x64
 800338a:	f004 fd60 	bl	8007e4e <osDelay>
	task_100ms();
 800338e:	e7f9      	b.n	8003384 <Task_100ms+0xc>

08003390 <Task_1000ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1000ms */
void Task_1000ms(void const * argument)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1000ms */
	task_init_1000ms();
 8003398:	f7fd ff77 	bl	800128a <task_init_1000ms>
  /* Infinite loop */
  for(;;)
  {
	task_1000ms();
 800339c:	f7fd ff7c 	bl	8001298 <task_1000ms>
    osDelay(1000);
 80033a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033a4:	f004 fd53 	bl	8007e4e <osDelay>
	task_1000ms();
 80033a8:	e7f8      	b.n	800339c <Task_1000ms+0xc>

080033aa <Task_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1ms */
void Task_1ms(void const * argument)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1ms */
	task_init_1ms();
 80033b2:	f7fd ff41 	bl	8001238 <task_init_1ms>
  /* Infinite loop */
  for(;;)
  {
	task_1ms();
 80033b6:	f7fd ff46 	bl	8001246 <task_1ms>
    osDelay(1);
 80033ba:	2001      	movs	r0, #1
 80033bc:	f004 fd47 	bl	8007e4e <osDelay>
	task_1ms();
 80033c0:	e7f9      	b.n	80033b6 <Task_1ms+0xc>
	...

080033c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	; 0x28
 80033c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ca:	f107 0314 	add.w	r3, r7, #20
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	605a      	str	r2, [r3, #4]
 80033d4:	609a      	str	r2, [r3, #8]
 80033d6:	60da      	str	r2, [r3, #12]
 80033d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	4b32      	ldr	r3, [pc, #200]	; (80034a8 <MX_GPIO_Init+0xe4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	4a31      	ldr	r2, [pc, #196]	; (80034a8 <MX_GPIO_Init+0xe4>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ea:	4b2f      	ldr	r3, [pc, #188]	; (80034a8 <MX_GPIO_Init+0xe4>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b2b      	ldr	r3, [pc, #172]	; (80034a8 <MX_GPIO_Init+0xe4>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a2a      	ldr	r2, [pc, #168]	; (80034a8 <MX_GPIO_Init+0xe4>)
 8003400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
 8003406:	4b28      	ldr	r3, [pc, #160]	; (80034a8 <MX_GPIO_Init+0xe4>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	4b24      	ldr	r3, [pc, #144]	; (80034a8 <MX_GPIO_Init+0xe4>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	4a23      	ldr	r2, [pc, #140]	; (80034a8 <MX_GPIO_Init+0xe4>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6313      	str	r3, [r2, #48]	; 0x30
 8003422:	4b21      	ldr	r3, [pc, #132]	; (80034a8 <MX_GPIO_Init+0xe4>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
 8003432:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <MX_GPIO_Init+0xe4>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a1c      	ldr	r2, [pc, #112]	; (80034a8 <MX_GPIO_Init+0xe4>)
 8003438:	f043 0302 	orr.w	r3, r3, #2
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <MX_GPIO_Init+0xe4>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	607b      	str	r3, [r7, #4]
 8003448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP280_CSN_GPIO_Port, BMP280_CSN_Pin, GPIO_PIN_RESET);
 800344a:	2200      	movs	r2, #0
 800344c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003450:	4816      	ldr	r0, [pc, #88]	; (80034ac <MX_GPIO_Init+0xe8>)
 8003452:	f001 fa47 	bl	80048e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8003456:	2200      	movs	r2, #0
 8003458:	f44f 7140 	mov.w	r1, #768	; 0x300
 800345c:	4814      	ldr	r0, [pc, #80]	; (80034b0 <MX_GPIO_Init+0xec>)
 800345e:	f001 fa41 	bl	80048e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP280_CSN_Pin;
 8003462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003468:	2301      	movs	r3, #1
 800346a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003470:	2300      	movs	r3, #0
 8003472:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMP280_CSN_GPIO_Port, &GPIO_InitStruct);
 8003474:	f107 0314 	add.w	r3, r7, #20
 8003478:	4619      	mov	r1, r3
 800347a:	480c      	ldr	r0, [pc, #48]	; (80034ac <MX_GPIO_Init+0xe8>)
 800347c:	f001 f8ae 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 8003480:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003486:	2301      	movs	r3, #1
 8003488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348e:	2300      	movs	r3, #0
 8003490:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003492:	f107 0314 	add.w	r3, r7, #20
 8003496:	4619      	mov	r1, r3
 8003498:	4805      	ldr	r0, [pc, #20]	; (80034b0 <MX_GPIO_Init+0xec>)
 800349a:	f001 f89f 	bl	80045dc <HAL_GPIO_Init>

}
 800349e:	bf00      	nop
 80034a0:	3728      	adds	r7, #40	; 0x28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40020000 	.word	0x40020000
 80034b0:	40020400 	.word	0x40020400

080034b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80034b8:	4b12      	ldr	r3, [pc, #72]	; (8003504 <MX_I2C1_Init+0x50>)
 80034ba:	4a13      	ldr	r2, [pc, #76]	; (8003508 <MX_I2C1_Init+0x54>)
 80034bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80034be:	4b11      	ldr	r3, [pc, #68]	; (8003504 <MX_I2C1_Init+0x50>)
 80034c0:	4a12      	ldr	r2, [pc, #72]	; (800350c <MX_I2C1_Init+0x58>)
 80034c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <MX_I2C1_Init+0x50>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80034ca:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <MX_I2C1_Init+0x50>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <MX_I2C1_Init+0x50>)
 80034d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <MX_I2C1_Init+0x50>)
 80034da:	2200      	movs	r2, #0
 80034dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80034de:	4b09      	ldr	r3, [pc, #36]	; (8003504 <MX_I2C1_Init+0x50>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034e4:	4b07      	ldr	r3, [pc, #28]	; (8003504 <MX_I2C1_Init+0x50>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <MX_I2C1_Init+0x50>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034f0:	4804      	ldr	r0, [pc, #16]	; (8003504 <MX_I2C1_Init+0x50>)
 80034f2:	f001 fa11 	bl	8004918 <HAL_I2C_Init>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80034fc:	f000 f8e8 	bl	80036d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003500:	bf00      	nop
 8003502:	bd80      	pop	{r7, pc}
 8003504:	2000050c 	.word	0x2000050c
 8003508:	40005400 	.word	0x40005400
 800350c:	00061a80 	.word	0x00061a80

08003510 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	60da      	str	r2, [r3, #12]
 8003526:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a19      	ldr	r2, [pc, #100]	; (8003594 <HAL_I2C_MspInit+0x84>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d12b      	bne.n	800358a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	4b18      	ldr	r3, [pc, #96]	; (8003598 <HAL_I2C_MspInit+0x88>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	4a17      	ldr	r2, [pc, #92]	; (8003598 <HAL_I2C_MspInit+0x88>)
 800353c:	f043 0302 	orr.w	r3, r3, #2
 8003540:	6313      	str	r3, [r2, #48]	; 0x30
 8003542:	4b15      	ldr	r3, [pc, #84]	; (8003598 <HAL_I2C_MspInit+0x88>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800354e:	23c0      	movs	r3, #192	; 0xc0
 8003550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003552:	2312      	movs	r3, #18
 8003554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355a:	2303      	movs	r3, #3
 800355c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800355e:	2304      	movs	r3, #4
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003562:	f107 0314 	add.w	r3, r7, #20
 8003566:	4619      	mov	r1, r3
 8003568:	480c      	ldr	r0, [pc, #48]	; (800359c <HAL_I2C_MspInit+0x8c>)
 800356a:	f001 f837 	bl	80045dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <HAL_I2C_MspInit+0x88>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	4a08      	ldr	r2, [pc, #32]	; (8003598 <HAL_I2C_MspInit+0x88>)
 8003578:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800357c:	6413      	str	r3, [r2, #64]	; 0x40
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_I2C_MspInit+0x88>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800358a:	bf00      	nop
 800358c:	3728      	adds	r7, #40	; 0x28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40005400 	.word	0x40005400
 8003598:	40023800 	.word	0x40023800
 800359c:	40020400 	.word	0x40020400

080035a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035a4:	f000 fb64 	bl	8003c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035a8:	f000 f818 	bl	80035dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035ac:	f7ff ff0a 	bl	80033c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80035b0:	f7ff fe1c 	bl	80031ec <MX_DMA_Init>
  MX_SPI1_Init();
 80035b4:	f000 f892 	bl	80036dc <MX_SPI1_Init>
  MX_SPI2_Init();
 80035b8:	f000 f8c6 	bl	8003748 <MX_SPI2_Init>
  MX_I2C1_Init();
 80035bc:	f7ff ff7a 	bl	80034b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_init();
 80035c0:	f7ff f97e 	bl	80028c0 <NRF24_init>
  BMP280_init();
 80035c4:	f7fe fb5e 	bl	8001c84 <BMP280_init>
  MPU6050_Init(&hi2c1);
 80035c8:	4803      	ldr	r0, [pc, #12]	; (80035d8 <main+0x38>)
 80035ca:	f7ff fa69 	bl	8002aa0 <MPU6050_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80035ce:	f7ff fe65 	bl	800329c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80035d2:	f004 fbe9 	bl	8007da8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80035d6:	e7fe      	b.n	80035d6 <main+0x36>
 80035d8:	2000050c 	.word	0x2000050c

080035dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b094      	sub	sp, #80	; 0x50
 80035e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035e2:	f107 0320 	add.w	r3, r7, #32
 80035e6:	2230      	movs	r2, #48	; 0x30
 80035e8:	2100      	movs	r1, #0
 80035ea:	4618      	mov	r0, r3
 80035ec:	f005 fe0e 	bl	800920c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035f0:	f107 030c 	add.w	r3, r7, #12
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003600:	2300      	movs	r3, #0
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <SystemClock_Config+0xc8>)
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	4a26      	ldr	r2, [pc, #152]	; (80036a4 <SystemClock_Config+0xc8>)
 800360a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360e:	6413      	str	r3, [r2, #64]	; 0x40
 8003610:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <SystemClock_Config+0xc8>)
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800361c:	2300      	movs	r3, #0
 800361e:	607b      	str	r3, [r7, #4]
 8003620:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <SystemClock_Config+0xcc>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a20      	ldr	r2, [pc, #128]	; (80036a8 <SystemClock_Config+0xcc>)
 8003626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <SystemClock_Config+0xcc>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003634:	607b      	str	r3, [r7, #4]
 8003636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003638:	2302      	movs	r3, #2
 800363a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800363c:	2301      	movs	r3, #1
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003640:	2310      	movs	r3, #16
 8003642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003644:	2302      	movs	r3, #2
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003648:	2300      	movs	r3, #0
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800364c:	2308      	movs	r3, #8
 800364e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003650:	2364      	movs	r3, #100	; 0x64
 8003652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003654:	2302      	movs	r3, #2
 8003656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003658:	2304      	movs	r3, #4
 800365a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800365c:	f107 0320 	add.w	r3, r7, #32
 8003660:	4618      	mov	r0, r3
 8003662:	f002 f97d 	bl	8005960 <HAL_RCC_OscConfig>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800366c:	f000 f830 	bl	80036d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003670:	230f      	movs	r3, #15
 8003672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003674:	2302      	movs	r3, #2
 8003676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800367c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003686:	f107 030c 	add.w	r3, r7, #12
 800368a:	2103      	movs	r1, #3
 800368c:	4618      	mov	r0, r3
 800368e:	f002 fbdf 	bl	8005e50 <HAL_RCC_ClockConfig>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003698:	f000 f81a 	bl	80036d0 <Error_Handler>
  }
}
 800369c:	bf00      	nop
 800369e:	3750      	adds	r7, #80	; 0x50
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40007000 	.word	0x40007000

080036ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a04      	ldr	r2, [pc, #16]	; (80036cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d101      	bne.n	80036c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80036be:	f000 faf9 	bl	8003cb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40014800 	.word	0x40014800

080036d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036d4:	b672      	cpsid	i
}
 80036d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036d8:	e7fe      	b.n	80036d8 <Error_Handler+0x8>
	...

080036dc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80036e0:	4b17      	ldr	r3, [pc, #92]	; (8003740 <MX_SPI1_Init+0x64>)
 80036e2:	4a18      	ldr	r2, [pc, #96]	; (8003744 <MX_SPI1_Init+0x68>)
 80036e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80036e6:	4b16      	ldr	r3, [pc, #88]	; (8003740 <MX_SPI1_Init+0x64>)
 80036e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80036ee:	4b14      	ldr	r3, [pc, #80]	; (8003740 <MX_SPI1_Init+0x64>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80036f4:	4b12      	ldr	r3, [pc, #72]	; (8003740 <MX_SPI1_Init+0x64>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036fa:	4b11      	ldr	r3, [pc, #68]	; (8003740 <MX_SPI1_Init+0x64>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003700:	4b0f      	ldr	r3, [pc, #60]	; (8003740 <MX_SPI1_Init+0x64>)
 8003702:	2200      	movs	r2, #0
 8003704:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003706:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <MX_SPI1_Init+0x64>)
 8003708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800370c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800370e:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <MX_SPI1_Init+0x64>)
 8003710:	2218      	movs	r2, #24
 8003712:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <MX_SPI1_Init+0x64>)
 8003716:	2200      	movs	r2, #0
 8003718:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800371a:	4b09      	ldr	r3, [pc, #36]	; (8003740 <MX_SPI1_Init+0x64>)
 800371c:	2200      	movs	r2, #0
 800371e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003720:	4b07      	ldr	r3, [pc, #28]	; (8003740 <MX_SPI1_Init+0x64>)
 8003722:	2200      	movs	r2, #0
 8003724:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003726:	4b06      	ldr	r3, [pc, #24]	; (8003740 <MX_SPI1_Init+0x64>)
 8003728:	220a      	movs	r2, #10
 800372a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800372c:	4804      	ldr	r0, [pc, #16]	; (8003740 <MX_SPI1_Init+0x64>)
 800372e:	f002 fde1 	bl	80062f4 <HAL_SPI_Init>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003738:	f7ff ffca 	bl	80036d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800373c:	bf00      	nop
 800373e:	bd80      	pop	{r7, pc}
 8003740:	20000560 	.word	0x20000560
 8003744:	40013000 	.word	0x40013000

08003748 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800374c:	4b17      	ldr	r3, [pc, #92]	; (80037ac <MX_SPI2_Init+0x64>)
 800374e:	4a18      	ldr	r2, [pc, #96]	; (80037b0 <MX_SPI2_Init+0x68>)
 8003750:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003752:	4b16      	ldr	r3, [pc, #88]	; (80037ac <MX_SPI2_Init+0x64>)
 8003754:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003758:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800375a:	4b14      	ldr	r3, [pc, #80]	; (80037ac <MX_SPI2_Init+0x64>)
 800375c:	2200      	movs	r2, #0
 800375e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003760:	4b12      	ldr	r3, [pc, #72]	; (80037ac <MX_SPI2_Init+0x64>)
 8003762:	2200      	movs	r2, #0
 8003764:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003766:	4b11      	ldr	r3, [pc, #68]	; (80037ac <MX_SPI2_Init+0x64>)
 8003768:	2200      	movs	r2, #0
 800376a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800376c:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <MX_SPI2_Init+0x64>)
 800376e:	2200      	movs	r2, #0
 8003770:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003772:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <MX_SPI2_Init+0x64>)
 8003774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003778:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800377a:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <MX_SPI2_Init+0x64>)
 800377c:	2218      	movs	r2, #24
 800377e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <MX_SPI2_Init+0x64>)
 8003782:	2200      	movs	r2, #0
 8003784:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <MX_SPI2_Init+0x64>)
 8003788:	2200      	movs	r2, #0
 800378a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800378c:	4b07      	ldr	r3, [pc, #28]	; (80037ac <MX_SPI2_Init+0x64>)
 800378e:	2200      	movs	r2, #0
 8003790:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <MX_SPI2_Init+0x64>)
 8003794:	220a      	movs	r2, #10
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003798:	4804      	ldr	r0, [pc, #16]	; (80037ac <MX_SPI2_Init+0x64>)
 800379a:	f002 fdab 	bl	80062f4 <HAL_SPI_Init>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80037a4:	f7ff ff94 	bl	80036d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80037a8:	bf00      	nop
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	200005b8 	.word	0x200005b8
 80037b0:	40003800 	.word	0x40003800

080037b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08c      	sub	sp, #48	; 0x30
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037bc:	f107 031c 	add.w	r3, r7, #28
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a8a      	ldr	r2, [pc, #552]	; (80039fc <HAL_SPI_MspInit+0x248>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	f040 8089 	bne.w	80038ea <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037d8:	2300      	movs	r3, #0
 80037da:	61bb      	str	r3, [r7, #24]
 80037dc:	4b88      	ldr	r3, [pc, #544]	; (8003a00 <HAL_SPI_MspInit+0x24c>)
 80037de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e0:	4a87      	ldr	r2, [pc, #540]	; (8003a00 <HAL_SPI_MspInit+0x24c>)
 80037e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037e6:	6453      	str	r3, [r2, #68]	; 0x44
 80037e8:	4b85      	ldr	r3, [pc, #532]	; (8003a00 <HAL_SPI_MspInit+0x24c>)
 80037ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f0:	61bb      	str	r3, [r7, #24]
 80037f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	4b81      	ldr	r3, [pc, #516]	; (8003a00 <HAL_SPI_MspInit+0x24c>)
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	4a80      	ldr	r2, [pc, #512]	; (8003a00 <HAL_SPI_MspInit+0x24c>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6313      	str	r3, [r2, #48]	; 0x30
 8003804:	4b7e      	ldr	r3, [pc, #504]	; (8003a00 <HAL_SPI_MspInit+0x24c>)
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MISO_Pin|NRF24_MOSI_Pin;
 8003810:	23e0      	movs	r3, #224	; 0xe0
 8003812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003814:	2302      	movs	r3, #2
 8003816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003818:	2300      	movs	r3, #0
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800381c:	2303      	movs	r3, #3
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003820:	2305      	movs	r3, #5
 8003822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003824:	f107 031c 	add.w	r3, r7, #28
 8003828:	4619      	mov	r1, r3
 800382a:	4876      	ldr	r0, [pc, #472]	; (8003a04 <HAL_SPI_MspInit+0x250>)
 800382c:	f000 fed6 	bl	80045dc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003830:	4b75      	ldr	r3, [pc, #468]	; (8003a08 <HAL_SPI_MspInit+0x254>)
 8003832:	4a76      	ldr	r2, [pc, #472]	; (8003a0c <HAL_SPI_MspInit+0x258>)
 8003834:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003836:	4b74      	ldr	r3, [pc, #464]	; (8003a08 <HAL_SPI_MspInit+0x254>)
 8003838:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800383c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800383e:	4b72      	ldr	r3, [pc, #456]	; (8003a08 <HAL_SPI_MspInit+0x254>)
 8003840:	2200      	movs	r2, #0
 8003842:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003844:	4b70      	ldr	r3, [pc, #448]	; (8003a08 <HAL_SPI_MspInit+0x254>)
 8003846:	2200      	movs	r2, #0
 8003848:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800384a:	4b6f      	ldr	r3, [pc, #444]	; (8003a08 <HAL_SPI_MspInit+0x254>)
 800384c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003850:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003852:	4b6d      	ldr	r3, [pc, #436]	; (8003a08 <HAL_SPI_MspInit+0x254>)
 8003854:	2200      	movs	r2, #0
 8003856:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003858:	4b6b      	ldr	r3, [pc, #428]	; (8003a08 <HAL_SPI_MspInit+0x254>)
 800385a:	2200      	movs	r2, #0
 800385c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800385e:	4b6a      	ldr	r3, [pc, #424]	; (8003a08 <HAL_SPI_MspInit+0x254>)
 8003860:	2200      	movs	r2, #0
 8003862:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003864:	4b68      	ldr	r3, [pc, #416]	; (8003a08 <HAL_SPI_MspInit+0x254>)
 8003866:	2200      	movs	r2, #0
 8003868:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800386a:	4b67      	ldr	r3, [pc, #412]	; (8003a08 <HAL_SPI_MspInit+0x254>)
 800386c:	2200      	movs	r2, #0
 800386e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003870:	4865      	ldr	r0, [pc, #404]	; (8003a08 <HAL_SPI_MspInit+0x254>)
 8003872:	f000 fb21 	bl	8003eb8 <HAL_DMA_Init>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 800387c:	f7ff ff28 	bl	80036d0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a61      	ldr	r2, [pc, #388]	; (8003a08 <HAL_SPI_MspInit+0x254>)
 8003884:	64da      	str	r2, [r3, #76]	; 0x4c
 8003886:	4a60      	ldr	r2, [pc, #384]	; (8003a08 <HAL_SPI_MspInit+0x254>)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 800388c:	4b60      	ldr	r3, [pc, #384]	; (8003a10 <HAL_SPI_MspInit+0x25c>)
 800388e:	4a61      	ldr	r2, [pc, #388]	; (8003a14 <HAL_SPI_MspInit+0x260>)
 8003890:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8003892:	4b5f      	ldr	r3, [pc, #380]	; (8003a10 <HAL_SPI_MspInit+0x25c>)
 8003894:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003898:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800389a:	4b5d      	ldr	r3, [pc, #372]	; (8003a10 <HAL_SPI_MspInit+0x25c>)
 800389c:	2240      	movs	r2, #64	; 0x40
 800389e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038a0:	4b5b      	ldr	r3, [pc, #364]	; (8003a10 <HAL_SPI_MspInit+0x25c>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038a6:	4b5a      	ldr	r3, [pc, #360]	; (8003a10 <HAL_SPI_MspInit+0x25c>)
 80038a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038ac:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038ae:	4b58      	ldr	r3, [pc, #352]	; (8003a10 <HAL_SPI_MspInit+0x25c>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038b4:	4b56      	ldr	r3, [pc, #344]	; (8003a10 <HAL_SPI_MspInit+0x25c>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80038ba:	4b55      	ldr	r3, [pc, #340]	; (8003a10 <HAL_SPI_MspInit+0x25c>)
 80038bc:	2200      	movs	r2, #0
 80038be:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038c0:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <HAL_SPI_MspInit+0x25c>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038c6:	4b52      	ldr	r3, [pc, #328]	; (8003a10 <HAL_SPI_MspInit+0x25c>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80038cc:	4850      	ldr	r0, [pc, #320]	; (8003a10 <HAL_SPI_MspInit+0x25c>)
 80038ce:	f000 faf3 	bl	8003eb8 <HAL_DMA_Init>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80038d8:	f7ff fefa 	bl	80036d0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a4c      	ldr	r2, [pc, #304]	; (8003a10 <HAL_SPI_MspInit+0x25c>)
 80038e0:	649a      	str	r2, [r3, #72]	; 0x48
 80038e2:	4a4b      	ldr	r2, [pc, #300]	; (8003a10 <HAL_SPI_MspInit+0x25c>)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80038e8:	e084      	b.n	80039f4 <HAL_SPI_MspInit+0x240>
  else if(spiHandle->Instance==SPI2)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a4a      	ldr	r2, [pc, #296]	; (8003a18 <HAL_SPI_MspInit+0x264>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d17f      	bne.n	80039f4 <HAL_SPI_MspInit+0x240>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80038f4:	2300      	movs	r3, #0
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	4b41      	ldr	r3, [pc, #260]	; (8003a00 <HAL_SPI_MspInit+0x24c>)
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	4a40      	ldr	r2, [pc, #256]	; (8003a00 <HAL_SPI_MspInit+0x24c>)
 80038fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003902:	6413      	str	r3, [r2, #64]	; 0x40
 8003904:	4b3e      	ldr	r3, [pc, #248]	; (8003a00 <HAL_SPI_MspInit+0x24c>)
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	4b3a      	ldr	r3, [pc, #232]	; (8003a00 <HAL_SPI_MspInit+0x24c>)
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	4a39      	ldr	r2, [pc, #228]	; (8003a00 <HAL_SPI_MspInit+0x24c>)
 800391a:	f043 0304 	orr.w	r3, r3, #4
 800391e:	6313      	str	r3, [r2, #48]	; 0x30
 8003920:	4b37      	ldr	r3, [pc, #220]	; (8003a00 <HAL_SPI_MspInit+0x24c>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800392c:	2300      	movs	r3, #0
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	4b33      	ldr	r3, [pc, #204]	; (8003a00 <HAL_SPI_MspInit+0x24c>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	4a32      	ldr	r2, [pc, #200]	; (8003a00 <HAL_SPI_MspInit+0x24c>)
 8003936:	f043 0302 	orr.w	r3, r3, #2
 800393a:	6313      	str	r3, [r2, #48]	; 0x30
 800393c:	4b30      	ldr	r3, [pc, #192]	; (8003a00 <HAL_SPI_MspInit+0x24c>)
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP280_MISO_Pin|BMP280_MOSI_Pin;
 8003948:	230c      	movs	r3, #12
 800394a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394c:	2302      	movs	r3, #2
 800394e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003950:	2300      	movs	r3, #0
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003954:	2303      	movs	r3, #3
 8003956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003958:	2305      	movs	r3, #5
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800395c:	f107 031c 	add.w	r3, r7, #28
 8003960:	4619      	mov	r1, r3
 8003962:	482e      	ldr	r0, [pc, #184]	; (8003a1c <HAL_SPI_MspInit+0x268>)
 8003964:	f000 fe3a 	bl	80045dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BMP280_SCK_Pin;
 8003968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800396c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396e:	2302      	movs	r3, #2
 8003970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003972:	2300      	movs	r3, #0
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003976:	2303      	movs	r3, #3
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800397a:	2305      	movs	r3, #5
 800397c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BMP280_SCK_GPIO_Port, &GPIO_InitStruct);
 800397e:	f107 031c 	add.w	r3, r7, #28
 8003982:	4619      	mov	r1, r3
 8003984:	4826      	ldr	r0, [pc, #152]	; (8003a20 <HAL_SPI_MspInit+0x26c>)
 8003986:	f000 fe29 	bl	80045dc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800398a:	4b26      	ldr	r3, [pc, #152]	; (8003a24 <HAL_SPI_MspInit+0x270>)
 800398c:	4a26      	ldr	r2, [pc, #152]	; (8003a28 <HAL_SPI_MspInit+0x274>)
 800398e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003990:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <HAL_SPI_MspInit+0x270>)
 8003992:	2200      	movs	r2, #0
 8003994:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003996:	4b23      	ldr	r3, [pc, #140]	; (8003a24 <HAL_SPI_MspInit+0x270>)
 8003998:	2200      	movs	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800399c:	4b21      	ldr	r3, [pc, #132]	; (8003a24 <HAL_SPI_MspInit+0x270>)
 800399e:	2200      	movs	r2, #0
 80039a0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039a2:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <HAL_SPI_MspInit+0x270>)
 80039a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039a8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039aa:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <HAL_SPI_MspInit+0x270>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039b0:	4b1c      	ldr	r3, [pc, #112]	; (8003a24 <HAL_SPI_MspInit+0x270>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80039b6:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <HAL_SPI_MspInit+0x270>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039bc:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <HAL_SPI_MspInit+0x270>)
 80039be:	2200      	movs	r2, #0
 80039c0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039c2:	4b18      	ldr	r3, [pc, #96]	; (8003a24 <HAL_SPI_MspInit+0x270>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80039c8:	4816      	ldr	r0, [pc, #88]	; (8003a24 <HAL_SPI_MspInit+0x270>)
 80039ca:	f000 fa75 	bl	8003eb8 <HAL_DMA_Init>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_SPI_MspInit+0x224>
      Error_Handler();
 80039d4:	f7ff fe7c 	bl	80036d0 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a12      	ldr	r2, [pc, #72]	; (8003a24 <HAL_SPI_MspInit+0x270>)
 80039dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80039de:	4a11      	ldr	r2, [pc, #68]	; (8003a24 <HAL_SPI_MspInit+0x270>)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80039e4:	2200      	movs	r2, #0
 80039e6:	2105      	movs	r1, #5
 80039e8:	2024      	movs	r0, #36	; 0x24
 80039ea:	f000 fa3b 	bl	8003e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80039ee:	2024      	movs	r0, #36	; 0x24
 80039f0:	f000 fa54 	bl	8003e9c <HAL_NVIC_EnableIRQ>
}
 80039f4:	bf00      	nop
 80039f6:	3730      	adds	r7, #48	; 0x30
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40013000 	.word	0x40013000
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40020000 	.word	0x40020000
 8003a08:	20000610 	.word	0x20000610
 8003a0c:	40026410 	.word	0x40026410
 8003a10:	20000670 	.word	0x20000670
 8003a14:	40026440 	.word	0x40026440
 8003a18:	40003800 	.word	0x40003800
 8003a1c:	40020800 	.word	0x40020800
 8003a20:	40020400 	.word	0x40020400
 8003a24:	200006d0 	.word	0x200006d0
 8003a28:	40026058 	.word	0x40026058

08003a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	607b      	str	r3, [r7, #4]
 8003a36:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <HAL_MspInit+0x54>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	4a11      	ldr	r2, [pc, #68]	; (8003a80 <HAL_MspInit+0x54>)
 8003a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a40:	6453      	str	r3, [r2, #68]	; 0x44
 8003a42:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <HAL_MspInit+0x54>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	603b      	str	r3, [r7, #0]
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_MspInit+0x54>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <HAL_MspInit+0x54>)
 8003a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <HAL_MspInit+0x54>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	210f      	movs	r1, #15
 8003a6e:	f06f 0001 	mvn.w	r0, #1
 8003a72:	f000 f9f7 	bl	8003e64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023800 	.word	0x40023800

08003a84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08c      	sub	sp, #48	; 0x30
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8003a94:	2300      	movs	r3, #0
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	4b2e      	ldr	r3, [pc, #184]	; (8003b54 <HAL_InitTick+0xd0>)
 8003a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9c:	4a2d      	ldr	r2, [pc, #180]	; (8003b54 <HAL_InitTick+0xd0>)
 8003a9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa2:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa4:	4b2b      	ldr	r3, [pc, #172]	; (8003b54 <HAL_InitTick+0xd0>)
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ab0:	f107 020c 	add.w	r2, r7, #12
 8003ab4:	f107 0310 	add.w	r3, r7, #16
 8003ab8:	4611      	mov	r1, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f002 fbe8 	bl	8006290 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003ac0:	f002 fbd2 	bl	8006268 <HAL_RCC_GetPCLK2Freq>
 8003ac4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	4a23      	ldr	r2, [pc, #140]	; (8003b58 <HAL_InitTick+0xd4>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	0c9b      	lsrs	r3, r3, #18
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8003ad4:	4b21      	ldr	r3, [pc, #132]	; (8003b5c <HAL_InitTick+0xd8>)
 8003ad6:	4a22      	ldr	r2, [pc, #136]	; (8003b60 <HAL_InitTick+0xdc>)
 8003ad8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8003ada:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <HAL_InitTick+0xd8>)
 8003adc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ae0:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8003ae2:	4a1e      	ldr	r2, [pc, #120]	; (8003b5c <HAL_InitTick+0xd8>)
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8003ae8:	4b1c      	ldr	r3, [pc, #112]	; (8003b5c <HAL_InitTick+0xd8>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aee:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_InitTick+0xd8>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003af4:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <HAL_InitTick+0xd8>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8003afa:	4818      	ldr	r0, [pc, #96]	; (8003b5c <HAL_InitTick+0xd8>)
 8003afc:	f003 fec8 	bl	8007890 <HAL_TIM_Base_Init>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003b06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d11b      	bne.n	8003b46 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8003b0e:	4813      	ldr	r0, [pc, #76]	; (8003b5c <HAL_InitTick+0xd8>)
 8003b10:	f003 ff18 	bl	8007944 <HAL_TIM_Base_Start_IT>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d111      	bne.n	8003b46 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003b22:	201a      	movs	r0, #26
 8003b24:	f000 f9ba 	bl	8003e9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b0f      	cmp	r3, #15
 8003b2c:	d808      	bhi.n	8003b40 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8003b2e:	2200      	movs	r2, #0
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	201a      	movs	r0, #26
 8003b34:	f000 f996 	bl	8003e64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b38:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <HAL_InitTick+0xe0>)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	e002      	b.n	8003b46 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003b46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3730      	adds	r7, #48	; 0x30
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40023800 	.word	0x40023800
 8003b58:	431bde83 	.word	0x431bde83
 8003b5c:	20000730 	.word	0x20000730
 8003b60:	40014800 	.word	0x40014800
 8003b64:	20000094 	.word	0x20000094

08003b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b6c:	e7fe      	b.n	8003b6c <NMI_Handler+0x4>

08003b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b72:	e7fe      	b.n	8003b72 <HardFault_Handler+0x4>

08003b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b78:	e7fe      	b.n	8003b78 <MemManage_Handler+0x4>

08003b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b7e:	e7fe      	b.n	8003b7e <BusFault_Handler+0x4>

08003b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b84:	e7fe      	b.n	8003b84 <UsageFault_Handler+0x4>

08003b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003b98:	4802      	ldr	r0, [pc, #8]	; (8003ba4 <DMA1_Stream3_IRQHandler+0x10>)
 8003b9a:	f000 fab5 	bl	8004108 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	200006d0 	.word	0x200006d0

08003ba8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003bac:	4802      	ldr	r0, [pc, #8]	; (8003bb8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003bae:	f003 ff2b 	bl	8007a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000730 	.word	0x20000730

08003bbc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003bc0:	4802      	ldr	r0, [pc, #8]	; (8003bcc <SPI2_IRQHandler+0x10>)
 8003bc2:	f003 fa9b 	bl	80070fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	200005b8 	.word	0x200005b8

08003bd0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003bd4:	4802      	ldr	r0, [pc, #8]	; (8003be0 <DMA2_Stream0_IRQHandler+0x10>)
 8003bd6:	f000 fa97 	bl	8004108 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000610 	.word	0x20000610

08003be4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003be8:	4802      	ldr	r0, [pc, #8]	; (8003bf4 <DMA2_Stream2_IRQHandler+0x10>)
 8003bea:	f000 fa8d 	bl	8004108 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000670 	.word	0x20000670

08003bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bfc:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <SystemInit+0x20>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	4a05      	ldr	r2, [pc, #20]	; (8003c18 <SystemInit+0x20>)
 8003c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c0c:	bf00      	nop
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <Reset_Handler>:
 8003c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c54 <LoopFillZerobss+0xe>
 8003c20:	f7ff ffea 	bl	8003bf8 <SystemInit>
 8003c24:	480c      	ldr	r0, [pc, #48]	; (8003c58 <LoopFillZerobss+0x12>)
 8003c26:	490d      	ldr	r1, [pc, #52]	; (8003c5c <LoopFillZerobss+0x16>)
 8003c28:	4a0d      	ldr	r2, [pc, #52]	; (8003c60 <LoopFillZerobss+0x1a>)
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e002      	b.n	8003c34 <LoopCopyDataInit>

08003c2e <CopyDataInit>:
 8003c2e:	58d4      	ldr	r4, [r2, r3]
 8003c30:	50c4      	str	r4, [r0, r3]
 8003c32:	3304      	adds	r3, #4

08003c34 <LoopCopyDataInit>:
 8003c34:	18c4      	adds	r4, r0, r3
 8003c36:	428c      	cmp	r4, r1
 8003c38:	d3f9      	bcc.n	8003c2e <CopyDataInit>
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <LoopFillZerobss+0x1e>)
 8003c3c:	4c0a      	ldr	r4, [pc, #40]	; (8003c68 <LoopFillZerobss+0x22>)
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e001      	b.n	8003c46 <LoopFillZerobss>

08003c42 <FillZerobss>:
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	3204      	adds	r2, #4

08003c46 <LoopFillZerobss>:
 8003c46:	42a2      	cmp	r2, r4
 8003c48:	d3fb      	bcc.n	8003c42 <FillZerobss>
 8003c4a:	f005 faed 	bl	8009228 <__libc_init_array>
 8003c4e:	f7ff fca7 	bl	80035a0 <main>
 8003c52:	4770      	bx	lr
 8003c54:	20020000 	.word	0x20020000
 8003c58:	20000000 	.word	0x20000000
 8003c5c:	20000100 	.word	0x20000100
 8003c60:	08009ed8 	.word	0x08009ed8
 8003c64:	20000100 	.word	0x20000100
 8003c68:	20004608 	.word	0x20004608

08003c6c <ADC_IRQHandler>:
 8003c6c:	e7fe      	b.n	8003c6c <ADC_IRQHandler>
	...

08003c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c74:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <HAL_Init+0x40>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a0d      	ldr	r2, [pc, #52]	; (8003cb0 <HAL_Init+0x40>)
 8003c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_Init+0x40>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a0a      	ldr	r2, [pc, #40]	; (8003cb0 <HAL_Init+0x40>)
 8003c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c8c:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <HAL_Init+0x40>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a07      	ldr	r2, [pc, #28]	; (8003cb0 <HAL_Init+0x40>)
 8003c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c98:	2003      	movs	r0, #3
 8003c9a:	f000 f8d8 	bl	8003e4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c9e:	200f      	movs	r0, #15
 8003ca0:	f7ff fef0 	bl	8003a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ca4:	f7ff fec2 	bl	8003a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40023c00 	.word	0x40023c00

08003cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cb8:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <HAL_IncTick+0x20>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_IncTick+0x24>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	4a04      	ldr	r2, [pc, #16]	; (8003cd8 <HAL_IncTick+0x24>)
 8003cc6:	6013      	str	r3, [r2, #0]
}
 8003cc8:	bf00      	nop
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	20000098 	.word	0x20000098
 8003cd8:	20000778 	.word	0x20000778

08003cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return uwTick;
 8003ce0:	4b03      	ldr	r3, [pc, #12]	; (8003cf0 <HAL_GetTick+0x14>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000778 	.word	0x20000778

08003cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d10:	4013      	ands	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d26:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	60d3      	str	r3, [r2, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d40:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <__NVIC_GetPriorityGrouping+0x18>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	f003 0307 	and.w	r3, r3, #7
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	db0b      	blt.n	8003d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	f003 021f 	and.w	r2, r3, #31
 8003d70:	4907      	ldr	r1, [pc, #28]	; (8003d90 <__NVIC_EnableIRQ+0x38>)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	2001      	movs	r0, #1
 8003d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	e000e100 	.word	0xe000e100

08003d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	6039      	str	r1, [r7, #0]
 8003d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	db0a      	blt.n	8003dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	490c      	ldr	r1, [pc, #48]	; (8003de0 <__NVIC_SetPriority+0x4c>)
 8003dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db2:	0112      	lsls	r2, r2, #4
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	440b      	add	r3, r1
 8003db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dbc:	e00a      	b.n	8003dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	4908      	ldr	r1, [pc, #32]	; (8003de4 <__NVIC_SetPriority+0x50>)
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	3b04      	subs	r3, #4
 8003dcc:	0112      	lsls	r2, r2, #4
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	761a      	strb	r2, [r3, #24]
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	e000e100 	.word	0xe000e100
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	; 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f1c3 0307 	rsb	r3, r3, #7
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	bf28      	it	cs
 8003e06:	2304      	movcs	r3, #4
 8003e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	d902      	bls.n	8003e18 <NVIC_EncodePriority+0x30>
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	3b03      	subs	r3, #3
 8003e16:	e000      	b.n	8003e1a <NVIC_EncodePriority+0x32>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	43da      	mvns	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e30:	f04f 31ff 	mov.w	r1, #4294967295
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3a:	43d9      	mvns	r1, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e40:	4313      	orrs	r3, r2
         );
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3724      	adds	r7, #36	; 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff ff4c 	bl	8003cf4 <__NVIC_SetPriorityGrouping>
}
 8003e5c:	bf00      	nop
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e76:	f7ff ff61 	bl	8003d3c <__NVIC_GetPriorityGrouping>
 8003e7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	6978      	ldr	r0, [r7, #20]
 8003e82:	f7ff ffb1 	bl	8003de8 <NVIC_EncodePriority>
 8003e86:	4602      	mov	r2, r0
 8003e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff ff80 	bl	8003d94 <__NVIC_SetPriority>
}
 8003e94:	bf00      	nop
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff ff54 	bl	8003d58 <__NVIC_EnableIRQ>
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ec4:	f7ff ff0a 	bl	8003cdc <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e099      	b.n	8004008 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ef4:	e00f      	b.n	8003f16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ef6:	f7ff fef1 	bl	8003cdc <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b05      	cmp	r3, #5
 8003f02:	d908      	bls.n	8003f16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2220      	movs	r2, #32
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e078      	b.n	8004008 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e8      	bne.n	8003ef6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	4b38      	ldr	r3, [pc, #224]	; (8004010 <HAL_DMA_Init+0x158>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d107      	bne.n	8003f80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f023 0307 	bic.w	r3, r3, #7
 8003f96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d117      	bne.n	8003fda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00e      	beq.n	8003fda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fa91 	bl	80044e4 <DMA_CheckFifoParam>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2240      	movs	r2, #64	; 0x40
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e016      	b.n	8004008 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fa48 	bl	8004478 <DMA_CalcBaseAndBitshift>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff0:	223f      	movs	r2, #63	; 0x3f
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	f010803f 	.word	0xf010803f

08004014 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_DMA_Start_IT+0x26>
 8004036:	2302      	movs	r3, #2
 8004038:	e040      	b.n	80040bc <HAL_DMA_Start_IT+0xa8>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d12f      	bne.n	80040ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2202      	movs	r2, #2
 8004052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f9da 	bl	800441c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406c:	223f      	movs	r2, #63	; 0x3f
 800406e:	409a      	lsls	r2, r3
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0216 	orr.w	r2, r2, #22
 8004082:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0208 	orr.w	r2, r2, #8
 800409a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	e005      	b.n	80040ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040b6:	2302      	movs	r3, #2
 80040b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d004      	beq.n	80040e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2280      	movs	r2, #128	; 0x80
 80040dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e00c      	b.n	80040fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2205      	movs	r2, #5
 80040e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0201 	bic.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004114:	4b8e      	ldr	r3, [pc, #568]	; (8004350 <HAL_DMA_IRQHandler+0x248>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a8e      	ldr	r2, [pc, #568]	; (8004354 <HAL_DMA_IRQHandler+0x24c>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	0a9b      	lsrs	r3, r3, #10
 8004120:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004126:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004132:	2208      	movs	r2, #8
 8004134:	409a      	lsls	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4013      	ands	r3, r2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d01a      	beq.n	8004174 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d013      	beq.n	8004174 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0204 	bic.w	r2, r2, #4
 800415a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004160:	2208      	movs	r2, #8
 8004162:	409a      	lsls	r2, r3
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416c:	f043 0201 	orr.w	r2, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004178:	2201      	movs	r2, #1
 800417a:	409a      	lsls	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d012      	beq.n	80041aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00b      	beq.n	80041aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004196:	2201      	movs	r2, #1
 8004198:	409a      	lsls	r2, r3
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a2:	f043 0202 	orr.w	r2, r3, #2
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ae:	2204      	movs	r2, #4
 80041b0:	409a      	lsls	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4013      	ands	r3, r2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d012      	beq.n	80041e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00b      	beq.n	80041e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041cc:	2204      	movs	r2, #4
 80041ce:	409a      	lsls	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d8:	f043 0204 	orr.w	r2, r3, #4
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e4:	2210      	movs	r2, #16
 80041e6:	409a      	lsls	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d043      	beq.n	8004278 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d03c      	beq.n	8004278 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004202:	2210      	movs	r2, #16
 8004204:	409a      	lsls	r2, r3
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d018      	beq.n	800424a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d108      	bne.n	8004238 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d024      	beq.n	8004278 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	4798      	blx	r3
 8004236:	e01f      	b.n	8004278 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01b      	beq.n	8004278 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	4798      	blx	r3
 8004248:	e016      	b.n	8004278 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d107      	bne.n	8004268 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0208 	bic.w	r2, r2, #8
 8004266:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427c:	2220      	movs	r2, #32
 800427e:	409a      	lsls	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4013      	ands	r3, r2
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 808f 	beq.w	80043a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0310 	and.w	r3, r3, #16
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8087 	beq.w	80043a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429e:	2220      	movs	r2, #32
 80042a0:	409a      	lsls	r2, r3
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b05      	cmp	r3, #5
 80042b0:	d136      	bne.n	8004320 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0216 	bic.w	r2, r2, #22
 80042c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695a      	ldr	r2, [r3, #20]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d103      	bne.n	80042e2 <HAL_DMA_IRQHandler+0x1da>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0208 	bic.w	r2, r2, #8
 80042f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f6:	223f      	movs	r2, #63	; 0x3f
 80042f8:	409a      	lsls	r2, r3
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004312:	2b00      	cmp	r3, #0
 8004314:	d07e      	beq.n	8004414 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	4798      	blx	r3
        }
        return;
 800431e:	e079      	b.n	8004414 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d01d      	beq.n	800436a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10d      	bne.n	8004358 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004340:	2b00      	cmp	r3, #0
 8004342:	d031      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	4798      	blx	r3
 800434c:	e02c      	b.n	80043a8 <HAL_DMA_IRQHandler+0x2a0>
 800434e:	bf00      	nop
 8004350:	20000090 	.word	0x20000090
 8004354:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435c:	2b00      	cmp	r3, #0
 800435e:	d023      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	4798      	blx	r3
 8004368:	e01e      	b.n	80043a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10f      	bne.n	8004398 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0210 	bic.w	r2, r2, #16
 8004386:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d032      	beq.n	8004416 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d022      	beq.n	8004402 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2205      	movs	r2, #5
 80043c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0201 	bic.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	3301      	adds	r3, #1
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d307      	bcc.n	80043f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f2      	bne.n	80043d4 <HAL_DMA_IRQHandler+0x2cc>
 80043ee:	e000      	b.n	80043f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80043f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	4798      	blx	r3
 8004412:	e000      	b.n	8004416 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004414:	bf00      	nop
    }
  }
}
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004438:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b40      	cmp	r3, #64	; 0x40
 8004448:	d108      	bne.n	800445c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800445a:	e007      	b.n	800446c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	60da      	str	r2, [r3, #12]
}
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	3b10      	subs	r3, #16
 8004488:	4a14      	ldr	r2, [pc, #80]	; (80044dc <DMA_CalcBaseAndBitshift+0x64>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004492:	4a13      	ldr	r2, [pc, #76]	; (80044e0 <DMA_CalcBaseAndBitshift+0x68>)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d909      	bls.n	80044ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044ae:	f023 0303 	bic.w	r3, r3, #3
 80044b2:	1d1a      	adds	r2, r3, #4
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	659a      	str	r2, [r3, #88]	; 0x58
 80044b8:	e007      	b.n	80044ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044c2:	f023 0303 	bic.w	r3, r3, #3
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	aaaaaaab 	.word	0xaaaaaaab
 80044e0:	08009e4c 	.word	0x08009e4c

080044e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d11f      	bne.n	800453e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b03      	cmp	r3, #3
 8004502:	d856      	bhi.n	80045b2 <DMA_CheckFifoParam+0xce>
 8004504:	a201      	add	r2, pc, #4	; (adr r2, 800450c <DMA_CheckFifoParam+0x28>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	0800451d 	.word	0x0800451d
 8004510:	0800452f 	.word	0x0800452f
 8004514:	0800451d 	.word	0x0800451d
 8004518:	080045b3 	.word	0x080045b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d046      	beq.n	80045b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800452c:	e043      	b.n	80045b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004536:	d140      	bne.n	80045ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800453c:	e03d      	b.n	80045ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004546:	d121      	bne.n	800458c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b03      	cmp	r3, #3
 800454c:	d837      	bhi.n	80045be <DMA_CheckFifoParam+0xda>
 800454e:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <DMA_CheckFifoParam+0x70>)
 8004550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004554:	08004565 	.word	0x08004565
 8004558:	0800456b 	.word	0x0800456b
 800455c:	08004565 	.word	0x08004565
 8004560:	0800457d 	.word	0x0800457d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
      break;
 8004568:	e030      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d025      	beq.n	80045c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800457a:	e022      	b.n	80045c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004584:	d11f      	bne.n	80045c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800458a:	e01c      	b.n	80045c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d903      	bls.n	800459a <DMA_CheckFifoParam+0xb6>
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d003      	beq.n	80045a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004598:	e018      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	73fb      	strb	r3, [r7, #15]
      break;
 800459e:	e015      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00e      	beq.n	80045ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
      break;
 80045b0:	e00b      	b.n	80045ca <DMA_CheckFifoParam+0xe6>
      break;
 80045b2:	bf00      	nop
 80045b4:	e00a      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      break;
 80045b6:	bf00      	nop
 80045b8:	e008      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      break;
 80045ba:	bf00      	nop
 80045bc:	e006      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      break;
 80045be:	bf00      	nop
 80045c0:	e004      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      break;
 80045c2:	bf00      	nop
 80045c4:	e002      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      break;   
 80045c6:	bf00      	nop
 80045c8:	e000      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      break;
 80045ca:	bf00      	nop
    }
  } 
  
  return status; 
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop

080045dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045dc:	b480      	push	{r7}
 80045de:	b089      	sub	sp, #36	; 0x24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
 80045f6:	e159      	b.n	80048ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045f8:	2201      	movs	r2, #1
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4013      	ands	r3, r2
 800460a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	429a      	cmp	r2, r3
 8004612:	f040 8148 	bne.w	80048a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	2b01      	cmp	r3, #1
 8004620:	d005      	beq.n	800462e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800462a:	2b02      	cmp	r3, #2
 800462c:	d130      	bne.n	8004690 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	2203      	movs	r2, #3
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	43db      	mvns	r3, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4013      	ands	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4313      	orrs	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004664:	2201      	movs	r2, #1
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	43db      	mvns	r3, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4013      	ands	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 0201 	and.w	r2, r3, #1
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4313      	orrs	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	2b03      	cmp	r3, #3
 800469a:	d017      	beq.n	80046cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	2203      	movs	r2, #3
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	43db      	mvns	r3, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4013      	ands	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d123      	bne.n	8004720 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	08da      	lsrs	r2, r3, #3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3208      	adds	r2, #8
 80046e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	220f      	movs	r2, #15
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	43db      	mvns	r3, r3
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4013      	ands	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4313      	orrs	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	08da      	lsrs	r2, r3, #3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3208      	adds	r2, #8
 800471a:	69b9      	ldr	r1, [r7, #24]
 800471c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	2203      	movs	r2, #3
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4013      	ands	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 0203 	and.w	r2, r3, #3
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4313      	orrs	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80a2 	beq.w	80048a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	4b57      	ldr	r3, [pc, #348]	; (80048c4 <HAL_GPIO_Init+0x2e8>)
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	4a56      	ldr	r2, [pc, #344]	; (80048c4 <HAL_GPIO_Init+0x2e8>)
 800476c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004770:	6453      	str	r3, [r2, #68]	; 0x44
 8004772:	4b54      	ldr	r3, [pc, #336]	; (80048c4 <HAL_GPIO_Init+0x2e8>)
 8004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800477e:	4a52      	ldr	r2, [pc, #328]	; (80048c8 <HAL_GPIO_Init+0x2ec>)
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	089b      	lsrs	r3, r3, #2
 8004784:	3302      	adds	r3, #2
 8004786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800478a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	220f      	movs	r2, #15
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43db      	mvns	r3, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a49      	ldr	r2, [pc, #292]	; (80048cc <HAL_GPIO_Init+0x2f0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d019      	beq.n	80047de <HAL_GPIO_Init+0x202>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a48      	ldr	r2, [pc, #288]	; (80048d0 <HAL_GPIO_Init+0x2f4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d013      	beq.n	80047da <HAL_GPIO_Init+0x1fe>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a47      	ldr	r2, [pc, #284]	; (80048d4 <HAL_GPIO_Init+0x2f8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00d      	beq.n	80047d6 <HAL_GPIO_Init+0x1fa>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a46      	ldr	r2, [pc, #280]	; (80048d8 <HAL_GPIO_Init+0x2fc>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d007      	beq.n	80047d2 <HAL_GPIO_Init+0x1f6>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a45      	ldr	r2, [pc, #276]	; (80048dc <HAL_GPIO_Init+0x300>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d101      	bne.n	80047ce <HAL_GPIO_Init+0x1f2>
 80047ca:	2304      	movs	r3, #4
 80047cc:	e008      	b.n	80047e0 <HAL_GPIO_Init+0x204>
 80047ce:	2307      	movs	r3, #7
 80047d0:	e006      	b.n	80047e0 <HAL_GPIO_Init+0x204>
 80047d2:	2303      	movs	r3, #3
 80047d4:	e004      	b.n	80047e0 <HAL_GPIO_Init+0x204>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e002      	b.n	80047e0 <HAL_GPIO_Init+0x204>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <HAL_GPIO_Init+0x204>
 80047de:	2300      	movs	r3, #0
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	f002 0203 	and.w	r2, r2, #3
 80047e6:	0092      	lsls	r2, r2, #2
 80047e8:	4093      	lsls	r3, r2
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047f0:	4935      	ldr	r1, [pc, #212]	; (80048c8 <HAL_GPIO_Init+0x2ec>)
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	089b      	lsrs	r3, r3, #2
 80047f6:	3302      	adds	r3, #2
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047fe:	4b38      	ldr	r3, [pc, #224]	; (80048e0 <HAL_GPIO_Init+0x304>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	43db      	mvns	r3, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4013      	ands	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004822:	4a2f      	ldr	r2, [pc, #188]	; (80048e0 <HAL_GPIO_Init+0x304>)
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004828:	4b2d      	ldr	r3, [pc, #180]	; (80048e0 <HAL_GPIO_Init+0x304>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	43db      	mvns	r3, r3
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4013      	ands	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800484c:	4a24      	ldr	r2, [pc, #144]	; (80048e0 <HAL_GPIO_Init+0x304>)
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004852:	4b23      	ldr	r3, [pc, #140]	; (80048e0 <HAL_GPIO_Init+0x304>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	43db      	mvns	r3, r3
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	4013      	ands	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004876:	4a1a      	ldr	r2, [pc, #104]	; (80048e0 <HAL_GPIO_Init+0x304>)
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800487c:	4b18      	ldr	r3, [pc, #96]	; (80048e0 <HAL_GPIO_Init+0x304>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	43db      	mvns	r3, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4013      	ands	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048a0:	4a0f      	ldr	r2, [pc, #60]	; (80048e0 <HAL_GPIO_Init+0x304>)
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	3301      	adds	r3, #1
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	2b0f      	cmp	r3, #15
 80048b0:	f67f aea2 	bls.w	80045f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	3724      	adds	r7, #36	; 0x24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40023800 	.word	0x40023800
 80048c8:	40013800 	.word	0x40013800
 80048cc:	40020000 	.word	0x40020000
 80048d0:	40020400 	.word	0x40020400
 80048d4:	40020800 	.word	0x40020800
 80048d8:	40020c00 	.word	0x40020c00
 80048dc:	40021000 	.word	0x40021000
 80048e0:	40013c00 	.word	0x40013c00

080048e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	807b      	strh	r3, [r7, #2]
 80048f0:	4613      	mov	r3, r2
 80048f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048f4:	787b      	ldrb	r3, [r7, #1]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048fa:	887a      	ldrh	r2, [r7, #2]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004900:	e003      	b.n	800490a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004902:	887b      	ldrh	r3, [r7, #2]
 8004904:	041a      	lsls	r2, r3, #16
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	619a      	str	r2, [r3, #24]
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
	...

08004918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e12b      	b.n	8004b82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fe fde6 	bl	8003510 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2224      	movs	r2, #36	; 0x24
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800496a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800497a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800497c:	f001 fc60 	bl	8006240 <HAL_RCC_GetPCLK1Freq>
 8004980:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	4a81      	ldr	r2, [pc, #516]	; (8004b8c <HAL_I2C_Init+0x274>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d807      	bhi.n	800499c <HAL_I2C_Init+0x84>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4a80      	ldr	r2, [pc, #512]	; (8004b90 <HAL_I2C_Init+0x278>)
 8004990:	4293      	cmp	r3, r2
 8004992:	bf94      	ite	ls
 8004994:	2301      	movls	r3, #1
 8004996:	2300      	movhi	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	e006      	b.n	80049aa <HAL_I2C_Init+0x92>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a7d      	ldr	r2, [pc, #500]	; (8004b94 <HAL_I2C_Init+0x27c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	bf94      	ite	ls
 80049a4:	2301      	movls	r3, #1
 80049a6:	2300      	movhi	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e0e7      	b.n	8004b82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4a78      	ldr	r2, [pc, #480]	; (8004b98 <HAL_I2C_Init+0x280>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	0c9b      	lsrs	r3, r3, #18
 80049bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4a6a      	ldr	r2, [pc, #424]	; (8004b8c <HAL_I2C_Init+0x274>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d802      	bhi.n	80049ec <HAL_I2C_Init+0xd4>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	3301      	adds	r3, #1
 80049ea:	e009      	b.n	8004a00 <HAL_I2C_Init+0xe8>
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049f2:	fb02 f303 	mul.w	r3, r2, r3
 80049f6:	4a69      	ldr	r2, [pc, #420]	; (8004b9c <HAL_I2C_Init+0x284>)
 80049f8:	fba2 2303 	umull	r2, r3, r2, r3
 80049fc:	099b      	lsrs	r3, r3, #6
 80049fe:	3301      	adds	r3, #1
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6812      	ldr	r2, [r2, #0]
 8004a04:	430b      	orrs	r3, r1
 8004a06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	495c      	ldr	r1, [pc, #368]	; (8004b8c <HAL_I2C_Init+0x274>)
 8004a1c:	428b      	cmp	r3, r1
 8004a1e:	d819      	bhi.n	8004a54 <HAL_I2C_Init+0x13c>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	1e59      	subs	r1, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a2e:	1c59      	adds	r1, r3, #1
 8004a30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a34:	400b      	ands	r3, r1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_I2C_Init+0x138>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1e59      	subs	r1, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a48:	3301      	adds	r3, #1
 8004a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a4e:	e051      	b.n	8004af4 <HAL_I2C_Init+0x1dc>
 8004a50:	2304      	movs	r3, #4
 8004a52:	e04f      	b.n	8004af4 <HAL_I2C_Init+0x1dc>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d111      	bne.n	8004a80 <HAL_I2C_Init+0x168>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	1e58      	subs	r0, r3, #1
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6859      	ldr	r1, [r3, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	440b      	add	r3, r1
 8004a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a6e:	3301      	adds	r3, #1
 8004a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	bf0c      	ite	eq
 8004a78:	2301      	moveq	r3, #1
 8004a7a:	2300      	movne	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	e012      	b.n	8004aa6 <HAL_I2C_Init+0x18e>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1e58      	subs	r0, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6859      	ldr	r1, [r3, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	0099      	lsls	r1, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a96:	3301      	adds	r3, #1
 8004a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_I2C_Init+0x196>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e022      	b.n	8004af4 <HAL_I2C_Init+0x1dc>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10e      	bne.n	8004ad4 <HAL_I2C_Init+0x1bc>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1e58      	subs	r0, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6859      	ldr	r1, [r3, #4]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	440b      	add	r3, r1
 8004ac4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ac8:	3301      	adds	r3, #1
 8004aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad2:	e00f      	b.n	8004af4 <HAL_I2C_Init+0x1dc>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	1e58      	subs	r0, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6859      	ldr	r1, [r3, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	0099      	lsls	r1, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aea:	3301      	adds	r3, #1
 8004aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	6809      	ldr	r1, [r1, #0]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69da      	ldr	r2, [r3, #28]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6911      	ldr	r1, [r2, #16]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68d2      	ldr	r2, [r2, #12]
 8004b2e:	4311      	orrs	r1, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	430b      	orrs	r3, r1
 8004b36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695a      	ldr	r2, [r3, #20]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	000186a0 	.word	0x000186a0
 8004b90:	001e847f 	.word	0x001e847f
 8004b94:	003d08ff 	.word	0x003d08ff
 8004b98:	431bde83 	.word	0x431bde83
 8004b9c:	10624dd3 	.word	0x10624dd3

08004ba0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	4608      	mov	r0, r1
 8004baa:	4611      	mov	r1, r2
 8004bac:	461a      	mov	r2, r3
 8004bae:	4603      	mov	r3, r0
 8004bb0:	817b      	strh	r3, [r7, #10]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	813b      	strh	r3, [r7, #8]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bba:	f7ff f88f 	bl	8003cdc <HAL_GetTick>
 8004bbe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	f040 80d9 	bne.w	8004d80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	2319      	movs	r3, #25
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	496d      	ldr	r1, [pc, #436]	; (8004d8c <HAL_I2C_Mem_Write+0x1ec>)
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 fc8b 	bl	80054f4 <I2C_WaitOnFlagUntilTimeout>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004be4:	2302      	movs	r3, #2
 8004be6:	e0cc      	b.n	8004d82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_I2C_Mem_Write+0x56>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e0c5      	b.n	8004d82 <HAL_I2C_Mem_Write+0x1e2>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d007      	beq.n	8004c1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2221      	movs	r2, #33	; 0x21
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2240      	movs	r2, #64	; 0x40
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a3a      	ldr	r2, [r7, #32]
 8004c46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4a4d      	ldr	r2, [pc, #308]	; (8004d90 <HAL_I2C_Mem_Write+0x1f0>)
 8004c5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c5e:	88f8      	ldrh	r0, [r7, #6]
 8004c60:	893a      	ldrh	r2, [r7, #8]
 8004c62:	8979      	ldrh	r1, [r7, #10]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	9301      	str	r3, [sp, #4]
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fac2 	bl	80051f8 <I2C_RequestMemoryWrite>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d052      	beq.n	8004d20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e081      	b.n	8004d82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fd50 	bl	8005728 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00d      	beq.n	8004caa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d107      	bne.n	8004ca6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e06b      	b.n	8004d82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	781a      	ldrb	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d11b      	bne.n	8004d20 <HAL_I2C_Mem_Write+0x180>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d017      	beq.n	8004d20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	781a      	ldrb	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1aa      	bne.n	8004c7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 fd43 	bl	80057b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00d      	beq.n	8004d54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d107      	bne.n	8004d50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e016      	b.n	8004d82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e000      	b.n	8004d82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d80:	2302      	movs	r3, #2
  }
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	00100002 	.word	0x00100002
 8004d90:	ffff0000 	.word	0xffff0000

08004d94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08c      	sub	sp, #48	; 0x30
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	4608      	mov	r0, r1
 8004d9e:	4611      	mov	r1, r2
 8004da0:	461a      	mov	r2, r3
 8004da2:	4603      	mov	r3, r0
 8004da4:	817b      	strh	r3, [r7, #10]
 8004da6:	460b      	mov	r3, r1
 8004da8:	813b      	strh	r3, [r7, #8]
 8004daa:	4613      	mov	r3, r2
 8004dac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dae:	f7fe ff95 	bl	8003cdc <HAL_GetTick>
 8004db2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	f040 8214 	bne.w	80051ea <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	2319      	movs	r3, #25
 8004dc8:	2201      	movs	r2, #1
 8004dca:	497b      	ldr	r1, [pc, #492]	; (8004fb8 <HAL_I2C_Mem_Read+0x224>)
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 fb91 	bl	80054f4 <I2C_WaitOnFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e207      	b.n	80051ec <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_I2C_Mem_Read+0x56>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e200      	b.n	80051ec <HAL_I2C_Mem_Read+0x458>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d007      	beq.n	8004e10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2222      	movs	r2, #34	; 0x22
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2240      	movs	r2, #64	; 0x40
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004e40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4a5b      	ldr	r2, [pc, #364]	; (8004fbc <HAL_I2C_Mem_Read+0x228>)
 8004e50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e52:	88f8      	ldrh	r0, [r7, #6]
 8004e54:	893a      	ldrh	r2, [r7, #8]
 8004e56:	8979      	ldrh	r1, [r7, #10]
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	9301      	str	r3, [sp, #4]
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	4603      	mov	r3, r0
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fa5e 	bl	8005324 <I2C_RequestMemoryRead>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e1bc      	b.n	80051ec <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d113      	bne.n	8004ea2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	623b      	str	r3, [r7, #32]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	623b      	str	r3, [r7, #32]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	623b      	str	r3, [r7, #32]
 8004e8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	e190      	b.n	80051c4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d11b      	bne.n	8004ee2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	61fb      	str	r3, [r7, #28]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	e170      	b.n	80051c4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d11b      	bne.n	8004f22 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	e150      	b.n	80051c4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f38:	e144      	b.n	80051c4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	f200 80f1 	bhi.w	8005126 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d123      	bne.n	8004f94 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fc79 	bl	8005848 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e145      	b.n	80051ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f92:	e117      	b.n	80051c4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d14e      	bne.n	800503a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	4906      	ldr	r1, [pc, #24]	; (8004fc0 <HAL_I2C_Mem_Read+0x22c>)
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 faa4 	bl	80054f4 <I2C_WaitOnFlagUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d008      	beq.n	8004fc4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e11a      	b.n	80051ec <HAL_I2C_Mem_Read+0x458>
 8004fb6:	bf00      	nop
 8004fb8:	00100002 	.word	0x00100002
 8004fbc:	ffff0000 	.word	0xffff0000
 8004fc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691a      	ldr	r2, [r3, #16]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29a      	uxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005038:	e0c4      	b.n	80051c4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	2200      	movs	r2, #0
 8005042:	496c      	ldr	r1, [pc, #432]	; (80051f4 <HAL_I2C_Mem_Read+0x460>)
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 fa55 	bl	80054f4 <I2C_WaitOnFlagUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0cb      	b.n	80051ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005062:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509c:	2200      	movs	r2, #0
 800509e:	4955      	ldr	r1, [pc, #340]	; (80051f4 <HAL_I2C_Mem_Read+0x460>)
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 fa27 	bl	80054f4 <I2C_WaitOnFlagUntilTimeout>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e09d      	b.n	80051ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005124:	e04e      	b.n	80051c4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005128:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 fb8c 	bl	8005848 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e058      	b.n	80051ec <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	691a      	ldr	r2, [r3, #16]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b04      	cmp	r3, #4
 8005178:	d124      	bne.n	80051c4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517e:	2b03      	cmp	r3, #3
 8005180:	d107      	bne.n	8005192 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005190:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f47f aeb6 	bne.w	8004f3a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	e000      	b.n	80051ec <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80051ea:	2302      	movs	r3, #2
  }
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3728      	adds	r7, #40	; 0x28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	00010004 	.word	0x00010004

080051f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	4608      	mov	r0, r1
 8005202:	4611      	mov	r1, r2
 8005204:	461a      	mov	r2, r3
 8005206:	4603      	mov	r3, r0
 8005208:	817b      	strh	r3, [r7, #10]
 800520a:	460b      	mov	r3, r1
 800520c:	813b      	strh	r3, [r7, #8]
 800520e:	4613      	mov	r3, r2
 8005210:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005220:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	2200      	movs	r2, #0
 800522a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 f960 	bl	80054f4 <I2C_WaitOnFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00d      	beq.n	8005256 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005248:	d103      	bne.n	8005252 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e05f      	b.n	8005316 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005256:	897b      	ldrh	r3, [r7, #10]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	461a      	mov	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005264:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	6a3a      	ldr	r2, [r7, #32]
 800526a:	492d      	ldr	r1, [pc, #180]	; (8005320 <I2C_RequestMemoryWrite+0x128>)
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 f9bb 	bl	80055e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e04c      	b.n	8005316 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527c:	2300      	movs	r3, #0
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005294:	6a39      	ldr	r1, [r7, #32]
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fa46 	bl	8005728 <I2C_WaitOnTXEFlagUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00d      	beq.n	80052be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d107      	bne.n	80052ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e02b      	b.n	8005316 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d105      	bne.n	80052d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052c4:	893b      	ldrh	r3, [r7, #8]
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	611a      	str	r2, [r3, #16]
 80052ce:	e021      	b.n	8005314 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052d0:	893b      	ldrh	r3, [r7, #8]
 80052d2:	0a1b      	lsrs	r3, r3, #8
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e0:	6a39      	ldr	r1, [r7, #32]
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 fa20 	bl	8005728 <I2C_WaitOnTXEFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00d      	beq.n	800530a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d107      	bne.n	8005306 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005304:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e005      	b.n	8005316 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800530a:	893b      	ldrh	r3, [r7, #8]
 800530c:	b2da      	uxtb	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3718      	adds	r7, #24
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	00010002 	.word	0x00010002

08005324 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	4608      	mov	r0, r1
 800532e:	4611      	mov	r1, r2
 8005330:	461a      	mov	r2, r3
 8005332:	4603      	mov	r3, r0
 8005334:	817b      	strh	r3, [r7, #10]
 8005336:	460b      	mov	r3, r1
 8005338:	813b      	strh	r3, [r7, #8]
 800533a:	4613      	mov	r3, r2
 800533c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800534c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800535c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	2200      	movs	r2, #0
 8005366:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 f8c2 	bl	80054f4 <I2C_WaitOnFlagUntilTimeout>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00d      	beq.n	8005392 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005384:	d103      	bne.n	800538e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800538c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e0aa      	b.n	80054e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005392:	897b      	ldrh	r3, [r7, #10]
 8005394:	b2db      	uxtb	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	6a3a      	ldr	r2, [r7, #32]
 80053a6:	4952      	ldr	r1, [pc, #328]	; (80054f0 <I2C_RequestMemoryRead+0x1cc>)
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 f91d 	bl	80055e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e097      	b.n	80054e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d0:	6a39      	ldr	r1, [r7, #32]
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 f9a8 	bl	8005728 <I2C_WaitOnTXEFlagUntilTimeout>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00d      	beq.n	80053fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d107      	bne.n	80053f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e076      	b.n	80054e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053fa:	88fb      	ldrh	r3, [r7, #6]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d105      	bne.n	800540c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005400:	893b      	ldrh	r3, [r7, #8]
 8005402:	b2da      	uxtb	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	611a      	str	r2, [r3, #16]
 800540a:	e021      	b.n	8005450 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800540c:	893b      	ldrh	r3, [r7, #8]
 800540e:	0a1b      	lsrs	r3, r3, #8
 8005410:	b29b      	uxth	r3, r3
 8005412:	b2da      	uxtb	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800541a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800541c:	6a39      	ldr	r1, [r7, #32]
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 f982 	bl	8005728 <I2C_WaitOnTXEFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00d      	beq.n	8005446 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	2b04      	cmp	r3, #4
 8005430:	d107      	bne.n	8005442 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005440:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e050      	b.n	80054e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005446:	893b      	ldrh	r3, [r7, #8]
 8005448:	b2da      	uxtb	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005452:	6a39      	ldr	r1, [r7, #32]
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f967 	bl	8005728 <I2C_WaitOnTXEFlagUntilTimeout>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00d      	beq.n	800547c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	2b04      	cmp	r3, #4
 8005466:	d107      	bne.n	8005478 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005476:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e035      	b.n	80054e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800548a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	2200      	movs	r2, #0
 8005494:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 f82b 	bl	80054f4 <I2C_WaitOnFlagUntilTimeout>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00d      	beq.n	80054c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b2:	d103      	bne.n	80054bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e013      	b.n	80054e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054c0:	897b      	ldrh	r3, [r7, #10]
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	6a3a      	ldr	r2, [r7, #32]
 80054d4:	4906      	ldr	r1, [pc, #24]	; (80054f0 <I2C_RequestMemoryRead+0x1cc>)
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 f886 	bl	80055e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	00010002 	.word	0x00010002

080054f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	4613      	mov	r3, r2
 8005502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005504:	e048      	b.n	8005598 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550c:	d044      	beq.n	8005598 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800550e:	f7fe fbe5 	bl	8003cdc <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d302      	bcc.n	8005524 <I2C_WaitOnFlagUntilTimeout+0x30>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d139      	bne.n	8005598 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	0c1b      	lsrs	r3, r3, #16
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b01      	cmp	r3, #1
 800552c:	d10d      	bne.n	800554a <I2C_WaitOnFlagUntilTimeout+0x56>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	43da      	mvns	r2, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4013      	ands	r3, r2
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	bf0c      	ite	eq
 8005540:	2301      	moveq	r3, #1
 8005542:	2300      	movne	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	461a      	mov	r2, r3
 8005548:	e00c      	b.n	8005564 <I2C_WaitOnFlagUntilTimeout+0x70>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	43da      	mvns	r2, r3
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	4013      	ands	r3, r2
 8005556:	b29b      	uxth	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	bf0c      	ite	eq
 800555c:	2301      	moveq	r3, #1
 800555e:	2300      	movne	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	461a      	mov	r2, r3
 8005564:	79fb      	ldrb	r3, [r7, #7]
 8005566:	429a      	cmp	r2, r3
 8005568:	d116      	bne.n	8005598 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e023      	b.n	80055e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	0c1b      	lsrs	r3, r3, #16
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d10d      	bne.n	80055be <I2C_WaitOnFlagUntilTimeout+0xca>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	43da      	mvns	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4013      	ands	r3, r2
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	bf0c      	ite	eq
 80055b4:	2301      	moveq	r3, #1
 80055b6:	2300      	movne	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	e00c      	b.n	80055d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	43da      	mvns	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	4013      	ands	r3, r2
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bf0c      	ite	eq
 80055d0:	2301      	moveq	r3, #1
 80055d2:	2300      	movne	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	79fb      	ldrb	r3, [r7, #7]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d093      	beq.n	8005506 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055f6:	e071      	b.n	80056dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005606:	d123      	bne.n	8005650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005616:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005620:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	f043 0204 	orr.w	r2, r3, #4
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e067      	b.n	8005720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005656:	d041      	beq.n	80056dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005658:	f7fe fb40 	bl	8003cdc <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	429a      	cmp	r2, r3
 8005666:	d302      	bcc.n	800566e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d136      	bne.n	80056dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	0c1b      	lsrs	r3, r3, #16
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b01      	cmp	r3, #1
 8005676:	d10c      	bne.n	8005692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	43da      	mvns	r2, r3
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4013      	ands	r3, r2
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	bf14      	ite	ne
 800568a:	2301      	movne	r3, #1
 800568c:	2300      	moveq	r3, #0
 800568e:	b2db      	uxtb	r3, r3
 8005690:	e00b      	b.n	80056aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	43da      	mvns	r2, r3
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	4013      	ands	r3, r2
 800569e:	b29b      	uxth	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	bf14      	ite	ne
 80056a4:	2301      	movne	r3, #1
 80056a6:	2300      	moveq	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d016      	beq.n	80056dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2220      	movs	r2, #32
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	f043 0220 	orr.w	r2, r3, #32
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e021      	b.n	8005720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	0c1b      	lsrs	r3, r3, #16
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d10c      	bne.n	8005700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	43da      	mvns	r2, r3
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	4013      	ands	r3, r2
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf14      	ite	ne
 80056f8:	2301      	movne	r3, #1
 80056fa:	2300      	moveq	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	e00b      	b.n	8005718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	43da      	mvns	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4013      	ands	r3, r2
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	bf14      	ite	ne
 8005712:	2301      	movne	r3, #1
 8005714:	2300      	moveq	r3, #0
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	f47f af6d 	bne.w	80055f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005734:	e034      	b.n	80057a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 f8e3 	bl	8005902 <I2C_IsAcknowledgeFailed>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e034      	b.n	80057b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574c:	d028      	beq.n	80057a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574e:	f7fe fac5 	bl	8003cdc <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	429a      	cmp	r2, r3
 800575c:	d302      	bcc.n	8005764 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d11d      	bne.n	80057a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576e:	2b80      	cmp	r3, #128	; 0x80
 8005770:	d016      	beq.n	80057a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578c:	f043 0220 	orr.w	r2, r3, #32
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e007      	b.n	80057b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057aa:	2b80      	cmp	r3, #128	; 0x80
 80057ac:	d1c3      	bne.n	8005736 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057c4:	e034      	b.n	8005830 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 f89b 	bl	8005902 <I2C_IsAcknowledgeFailed>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e034      	b.n	8005840 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057dc:	d028      	beq.n	8005830 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057de:	f7fe fa7d 	bl	8003cdc <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d302      	bcc.n	80057f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d11d      	bne.n	8005830 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d016      	beq.n	8005830 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	f043 0220 	orr.w	r2, r3, #32
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e007      	b.n	8005840 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	2b04      	cmp	r3, #4
 800583c:	d1c3      	bne.n	80057c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005854:	e049      	b.n	80058ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	2b10      	cmp	r3, #16
 8005862:	d119      	bne.n	8005898 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f06f 0210 	mvn.w	r2, #16
 800586c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e030      	b.n	80058fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005898:	f7fe fa20 	bl	8003cdc <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d302      	bcc.n	80058ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d11d      	bne.n	80058ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b8:	2b40      	cmp	r3, #64	; 0x40
 80058ba:	d016      	beq.n	80058ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f043 0220 	orr.w	r2, r3, #32
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e007      	b.n	80058fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f4:	2b40      	cmp	r3, #64	; 0x40
 80058f6:	d1ae      	bne.n	8005856 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005918:	d11b      	bne.n	8005952 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005922:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f043 0204 	orr.w	r2, r3, #4
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e267      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d075      	beq.n	8005a6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800597e:	4b88      	ldr	r3, [pc, #544]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 030c 	and.w	r3, r3, #12
 8005986:	2b04      	cmp	r3, #4
 8005988:	d00c      	beq.n	80059a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800598a:	4b85      	ldr	r3, [pc, #532]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005992:	2b08      	cmp	r3, #8
 8005994:	d112      	bne.n	80059bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005996:	4b82      	ldr	r3, [pc, #520]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800599e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059a2:	d10b      	bne.n	80059bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a4:	4b7e      	ldr	r3, [pc, #504]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d05b      	beq.n	8005a68 <HAL_RCC_OscConfig+0x108>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d157      	bne.n	8005a68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e242      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c4:	d106      	bne.n	80059d4 <HAL_RCC_OscConfig+0x74>
 80059c6:	4b76      	ldr	r3, [pc, #472]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a75      	ldr	r2, [pc, #468]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 80059cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	e01d      	b.n	8005a10 <HAL_RCC_OscConfig+0xb0>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059dc:	d10c      	bne.n	80059f8 <HAL_RCC_OscConfig+0x98>
 80059de:	4b70      	ldr	r3, [pc, #448]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a6f      	ldr	r2, [pc, #444]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 80059e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	4b6d      	ldr	r3, [pc, #436]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a6c      	ldr	r2, [pc, #432]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 80059f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	e00b      	b.n	8005a10 <HAL_RCC_OscConfig+0xb0>
 80059f8:	4b69      	ldr	r3, [pc, #420]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a68      	ldr	r2, [pc, #416]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 80059fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	4b66      	ldr	r3, [pc, #408]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a65      	ldr	r2, [pc, #404]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d013      	beq.n	8005a40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a18:	f7fe f960 	bl	8003cdc <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a20:	f7fe f95c 	bl	8003cdc <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b64      	cmp	r3, #100	; 0x64
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e207      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a32:	4b5b      	ldr	r3, [pc, #364]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0f0      	beq.n	8005a20 <HAL_RCC_OscConfig+0xc0>
 8005a3e:	e014      	b.n	8005a6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a40:	f7fe f94c 	bl	8003cdc <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a48:	f7fe f948 	bl	8003cdc <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b64      	cmp	r3, #100	; 0x64
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e1f3      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a5a:	4b51      	ldr	r3, [pc, #324]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f0      	bne.n	8005a48 <HAL_RCC_OscConfig+0xe8>
 8005a66:	e000      	b.n	8005a6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d063      	beq.n	8005b3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a76:	4b4a      	ldr	r3, [pc, #296]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 030c 	and.w	r3, r3, #12
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00b      	beq.n	8005a9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a82:	4b47      	ldr	r3, [pc, #284]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d11c      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a8e:	4b44      	ldr	r3, [pc, #272]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d116      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a9a:	4b41      	ldr	r3, [pc, #260]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d005      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x152>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d001      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e1c7      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ab2:	4b3b      	ldr	r3, [pc, #236]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	4937      	ldr	r1, [pc, #220]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ac6:	e03a      	b.n	8005b3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d020      	beq.n	8005b12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ad0:	4b34      	ldr	r3, [pc, #208]	; (8005ba4 <HAL_RCC_OscConfig+0x244>)
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad6:	f7fe f901 	bl	8003cdc <HAL_GetTick>
 8005ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005adc:	e008      	b.n	8005af0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ade:	f7fe f8fd 	bl	8003cdc <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e1a8      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005af0:	4b2b      	ldr	r3, [pc, #172]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0f0      	beq.n	8005ade <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005afc:	4b28      	ldr	r3, [pc, #160]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	4925      	ldr	r1, [pc, #148]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	600b      	str	r3, [r1, #0]
 8005b10:	e015      	b.n	8005b3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b12:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <HAL_RCC_OscConfig+0x244>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b18:	f7fe f8e0 	bl	8003cdc <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b1e:	e008      	b.n	8005b32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b20:	f7fe f8dc 	bl	8003cdc <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e187      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b32:	4b1b      	ldr	r3, [pc, #108]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1f0      	bne.n	8005b20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d036      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d016      	beq.n	8005b80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b52:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <HAL_RCC_OscConfig+0x248>)
 8005b54:	2201      	movs	r2, #1
 8005b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b58:	f7fe f8c0 	bl	8003cdc <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b60:	f7fe f8bc 	bl	8003cdc <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e167      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b72:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <HAL_RCC_OscConfig+0x240>)
 8005b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0f0      	beq.n	8005b60 <HAL_RCC_OscConfig+0x200>
 8005b7e:	e01b      	b.n	8005bb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b80:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <HAL_RCC_OscConfig+0x248>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b86:	f7fe f8a9 	bl	8003cdc <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b8c:	e00e      	b.n	8005bac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b8e:	f7fe f8a5 	bl	8003cdc <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d907      	bls.n	8005bac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e150      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	42470000 	.word	0x42470000
 8005ba8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bac:	4b88      	ldr	r3, [pc, #544]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1ea      	bne.n	8005b8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 8097 	beq.w	8005cf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bca:	4b81      	ldr	r3, [pc, #516]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10f      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	4b7d      	ldr	r3, [pc, #500]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	4a7c      	ldr	r2, [pc, #496]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be4:	6413      	str	r3, [r2, #64]	; 0x40
 8005be6:	4b7a      	ldr	r3, [pc, #488]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bee:	60bb      	str	r3, [r7, #8]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf6:	4b77      	ldr	r3, [pc, #476]	; (8005dd4 <HAL_RCC_OscConfig+0x474>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d118      	bne.n	8005c34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c02:	4b74      	ldr	r3, [pc, #464]	; (8005dd4 <HAL_RCC_OscConfig+0x474>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a73      	ldr	r2, [pc, #460]	; (8005dd4 <HAL_RCC_OscConfig+0x474>)
 8005c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c0e:	f7fe f865 	bl	8003cdc <HAL_GetTick>
 8005c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c14:	e008      	b.n	8005c28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c16:	f7fe f861 	bl	8003cdc <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e10c      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c28:	4b6a      	ldr	r3, [pc, #424]	; (8005dd4 <HAL_RCC_OscConfig+0x474>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0f0      	beq.n	8005c16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d106      	bne.n	8005c4a <HAL_RCC_OscConfig+0x2ea>
 8005c3c:	4b64      	ldr	r3, [pc, #400]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c40:	4a63      	ldr	r2, [pc, #396]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c42:	f043 0301 	orr.w	r3, r3, #1
 8005c46:	6713      	str	r3, [r2, #112]	; 0x70
 8005c48:	e01c      	b.n	8005c84 <HAL_RCC_OscConfig+0x324>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	2b05      	cmp	r3, #5
 8005c50:	d10c      	bne.n	8005c6c <HAL_RCC_OscConfig+0x30c>
 8005c52:	4b5f      	ldr	r3, [pc, #380]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c56:	4a5e      	ldr	r2, [pc, #376]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c58:	f043 0304 	orr.w	r3, r3, #4
 8005c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c5e:	4b5c      	ldr	r3, [pc, #368]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c62:	4a5b      	ldr	r2, [pc, #364]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c64:	f043 0301 	orr.w	r3, r3, #1
 8005c68:	6713      	str	r3, [r2, #112]	; 0x70
 8005c6a:	e00b      	b.n	8005c84 <HAL_RCC_OscConfig+0x324>
 8005c6c:	4b58      	ldr	r3, [pc, #352]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c70:	4a57      	ldr	r2, [pc, #348]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c72:	f023 0301 	bic.w	r3, r3, #1
 8005c76:	6713      	str	r3, [r2, #112]	; 0x70
 8005c78:	4b55      	ldr	r3, [pc, #340]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7c:	4a54      	ldr	r2, [pc, #336]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005c7e:	f023 0304 	bic.w	r3, r3, #4
 8005c82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d015      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c8c:	f7fe f826 	bl	8003cdc <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c92:	e00a      	b.n	8005caa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c94:	f7fe f822 	bl	8003cdc <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e0cb      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005caa:	4b49      	ldr	r3, [pc, #292]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0ee      	beq.n	8005c94 <HAL_RCC_OscConfig+0x334>
 8005cb6:	e014      	b.n	8005ce2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cb8:	f7fe f810 	bl	8003cdc <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cbe:	e00a      	b.n	8005cd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cc0:	f7fe f80c 	bl	8003cdc <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e0b5      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cd6:	4b3e      	ldr	r3, [pc, #248]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1ee      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d105      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ce8:	4b39      	ldr	r3, [pc, #228]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cec:	4a38      	ldr	r2, [pc, #224]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cf2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 80a1 	beq.w	8005e40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cfe:	4b34      	ldr	r3, [pc, #208]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 030c 	and.w	r3, r3, #12
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	d05c      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d141      	bne.n	8005d96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d12:	4b31      	ldr	r3, [pc, #196]	; (8005dd8 <HAL_RCC_OscConfig+0x478>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d18:	f7fd ffe0 	bl	8003cdc <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d1e:	e008      	b.n	8005d32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d20:	f7fd ffdc 	bl	8003cdc <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e087      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d32:	4b27      	ldr	r3, [pc, #156]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1f0      	bne.n	8005d20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69da      	ldr	r2, [r3, #28]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	019b      	lsls	r3, r3, #6
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	3b01      	subs	r3, #1
 8005d58:	041b      	lsls	r3, r3, #16
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	061b      	lsls	r3, r3, #24
 8005d62:	491b      	ldr	r1, [pc, #108]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d68:	4b1b      	ldr	r3, [pc, #108]	; (8005dd8 <HAL_RCC_OscConfig+0x478>)
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d6e:	f7fd ffb5 	bl	8003cdc <HAL_GetTick>
 8005d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d74:	e008      	b.n	8005d88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d76:	f7fd ffb1 	bl	8003cdc <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e05c      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d88:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0f0      	beq.n	8005d76 <HAL_RCC_OscConfig+0x416>
 8005d94:	e054      	b.n	8005e40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d96:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <HAL_RCC_OscConfig+0x478>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9c:	f7fd ff9e 	bl	8003cdc <HAL_GetTick>
 8005da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005da4:	f7fd ff9a 	bl	8003cdc <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e045      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005db6:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <HAL_RCC_OscConfig+0x470>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1f0      	bne.n	8005da4 <HAL_RCC_OscConfig+0x444>
 8005dc2:	e03d      	b.n	8005e40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d107      	bne.n	8005ddc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e038      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
 8005dd0:	40023800 	.word	0x40023800
 8005dd4:	40007000 	.word	0x40007000
 8005dd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ddc:	4b1b      	ldr	r3, [pc, #108]	; (8005e4c <HAL_RCC_OscConfig+0x4ec>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d028      	beq.n	8005e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d121      	bne.n	8005e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d11a      	bne.n	8005e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d111      	bne.n	8005e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	085b      	lsrs	r3, r3, #1
 8005e24:	3b01      	subs	r3, #1
 8005e26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d107      	bne.n	8005e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d001      	beq.n	8005e40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e000      	b.n	8005e42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40023800 	.word	0x40023800

08005e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e0cc      	b.n	8005ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e64:	4b68      	ldr	r3, [pc, #416]	; (8006008 <HAL_RCC_ClockConfig+0x1b8>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d90c      	bls.n	8005e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e72:	4b65      	ldr	r3, [pc, #404]	; (8006008 <HAL_RCC_ClockConfig+0x1b8>)
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e7a:	4b63      	ldr	r3, [pc, #396]	; (8006008 <HAL_RCC_ClockConfig+0x1b8>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0307 	and.w	r3, r3, #7
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d001      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e0b8      	b.n	8005ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d020      	beq.n	8005eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ea4:	4b59      	ldr	r3, [pc, #356]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	4a58      	ldr	r2, [pc, #352]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005eaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005eae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ebc:	4b53      	ldr	r3, [pc, #332]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	4a52      	ldr	r2, [pc, #328]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005ec2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ec8:	4b50      	ldr	r3, [pc, #320]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	494d      	ldr	r1, [pc, #308]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d044      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d107      	bne.n	8005efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eee:	4b47      	ldr	r3, [pc, #284]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d119      	bne.n	8005f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e07f      	b.n	8005ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d003      	beq.n	8005f0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d107      	bne.n	8005f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f0e:	4b3f      	ldr	r3, [pc, #252]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d109      	bne.n	8005f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e06f      	b.n	8005ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f1e:	4b3b      	ldr	r3, [pc, #236]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e067      	b.n	8005ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f2e:	4b37      	ldr	r3, [pc, #220]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f023 0203 	bic.w	r2, r3, #3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	4934      	ldr	r1, [pc, #208]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f40:	f7fd fecc 	bl	8003cdc <HAL_GetTick>
 8005f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f46:	e00a      	b.n	8005f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f48:	f7fd fec8 	bl	8003cdc <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e04f      	b.n	8005ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f5e:	4b2b      	ldr	r3, [pc, #172]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 020c 	and.w	r2, r3, #12
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d1eb      	bne.n	8005f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f70:	4b25      	ldr	r3, [pc, #148]	; (8006008 <HAL_RCC_ClockConfig+0x1b8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d20c      	bcs.n	8005f98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f7e:	4b22      	ldr	r3, [pc, #136]	; (8006008 <HAL_RCC_ClockConfig+0x1b8>)
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f86:	4b20      	ldr	r3, [pc, #128]	; (8006008 <HAL_RCC_ClockConfig+0x1b8>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d001      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e032      	b.n	8005ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d008      	beq.n	8005fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fa4:	4b19      	ldr	r3, [pc, #100]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	4916      	ldr	r1, [pc, #88]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d009      	beq.n	8005fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fc2:	4b12      	ldr	r3, [pc, #72]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	490e      	ldr	r1, [pc, #56]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fd6:	f000 f821 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	4b0b      	ldr	r3, [pc, #44]	; (800600c <HAL_RCC_ClockConfig+0x1bc>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	091b      	lsrs	r3, r3, #4
 8005fe2:	f003 030f 	and.w	r3, r3, #15
 8005fe6:	490a      	ldr	r1, [pc, #40]	; (8006010 <HAL_RCC_ClockConfig+0x1c0>)
 8005fe8:	5ccb      	ldrb	r3, [r1, r3]
 8005fea:	fa22 f303 	lsr.w	r3, r2, r3
 8005fee:	4a09      	ldr	r2, [pc, #36]	; (8006014 <HAL_RCC_ClockConfig+0x1c4>)
 8005ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ff2:	4b09      	ldr	r3, [pc, #36]	; (8006018 <HAL_RCC_ClockConfig+0x1c8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fd fd44 	bl	8003a84 <HAL_InitTick>

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	40023c00 	.word	0x40023c00
 800600c:	40023800 	.word	0x40023800
 8006010:	08009e34 	.word	0x08009e34
 8006014:	20000090 	.word	0x20000090
 8006018:	20000094 	.word	0x20000094

0800601c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800601c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006020:	b094      	sub	sp, #80	; 0x50
 8006022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	647b      	str	r3, [r7, #68]	; 0x44
 8006028:	2300      	movs	r3, #0
 800602a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800602c:	2300      	movs	r3, #0
 800602e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006034:	4b79      	ldr	r3, [pc, #484]	; (800621c <HAL_RCC_GetSysClockFreq+0x200>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f003 030c 	and.w	r3, r3, #12
 800603c:	2b08      	cmp	r3, #8
 800603e:	d00d      	beq.n	800605c <HAL_RCC_GetSysClockFreq+0x40>
 8006040:	2b08      	cmp	r3, #8
 8006042:	f200 80e1 	bhi.w	8006208 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_RCC_GetSysClockFreq+0x34>
 800604a:	2b04      	cmp	r3, #4
 800604c:	d003      	beq.n	8006056 <HAL_RCC_GetSysClockFreq+0x3a>
 800604e:	e0db      	b.n	8006208 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006050:	4b73      	ldr	r3, [pc, #460]	; (8006220 <HAL_RCC_GetSysClockFreq+0x204>)
 8006052:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006054:	e0db      	b.n	800620e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006056:	4b73      	ldr	r3, [pc, #460]	; (8006224 <HAL_RCC_GetSysClockFreq+0x208>)
 8006058:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800605a:	e0d8      	b.n	800620e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800605c:	4b6f      	ldr	r3, [pc, #444]	; (800621c <HAL_RCC_GetSysClockFreq+0x200>)
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006064:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006066:	4b6d      	ldr	r3, [pc, #436]	; (800621c <HAL_RCC_GetSysClockFreq+0x200>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d063      	beq.n	800613a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006072:	4b6a      	ldr	r3, [pc, #424]	; (800621c <HAL_RCC_GetSysClockFreq+0x200>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	099b      	lsrs	r3, r3, #6
 8006078:	2200      	movs	r2, #0
 800607a:	63bb      	str	r3, [r7, #56]	; 0x38
 800607c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800607e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006084:	633b      	str	r3, [r7, #48]	; 0x30
 8006086:	2300      	movs	r3, #0
 8006088:	637b      	str	r3, [r7, #52]	; 0x34
 800608a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800608e:	4622      	mov	r2, r4
 8006090:	462b      	mov	r3, r5
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	f04f 0100 	mov.w	r1, #0
 800609a:	0159      	lsls	r1, r3, #5
 800609c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060a0:	0150      	lsls	r0, r2, #5
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	4621      	mov	r1, r4
 80060a8:	1a51      	subs	r1, r2, r1
 80060aa:	6139      	str	r1, [r7, #16]
 80060ac:	4629      	mov	r1, r5
 80060ae:	eb63 0301 	sbc.w	r3, r3, r1
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	f04f 0200 	mov.w	r2, #0
 80060b8:	f04f 0300 	mov.w	r3, #0
 80060bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060c0:	4659      	mov	r1, fp
 80060c2:	018b      	lsls	r3, r1, #6
 80060c4:	4651      	mov	r1, sl
 80060c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060ca:	4651      	mov	r1, sl
 80060cc:	018a      	lsls	r2, r1, #6
 80060ce:	4651      	mov	r1, sl
 80060d0:	ebb2 0801 	subs.w	r8, r2, r1
 80060d4:	4659      	mov	r1, fp
 80060d6:	eb63 0901 	sbc.w	r9, r3, r1
 80060da:	f04f 0200 	mov.w	r2, #0
 80060de:	f04f 0300 	mov.w	r3, #0
 80060e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060ee:	4690      	mov	r8, r2
 80060f0:	4699      	mov	r9, r3
 80060f2:	4623      	mov	r3, r4
 80060f4:	eb18 0303 	adds.w	r3, r8, r3
 80060f8:	60bb      	str	r3, [r7, #8]
 80060fa:	462b      	mov	r3, r5
 80060fc:	eb49 0303 	adc.w	r3, r9, r3
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800610e:	4629      	mov	r1, r5
 8006110:	024b      	lsls	r3, r1, #9
 8006112:	4621      	mov	r1, r4
 8006114:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006118:	4621      	mov	r1, r4
 800611a:	024a      	lsls	r2, r1, #9
 800611c:	4610      	mov	r0, r2
 800611e:	4619      	mov	r1, r3
 8006120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006122:	2200      	movs	r2, #0
 8006124:	62bb      	str	r3, [r7, #40]	; 0x28
 8006126:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006128:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800612c:	f7fa fd3c 	bl	8000ba8 <__aeabi_uldivmod>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4613      	mov	r3, r2
 8006136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006138:	e058      	b.n	80061ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800613a:	4b38      	ldr	r3, [pc, #224]	; (800621c <HAL_RCC_GetSysClockFreq+0x200>)
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	099b      	lsrs	r3, r3, #6
 8006140:	2200      	movs	r2, #0
 8006142:	4618      	mov	r0, r3
 8006144:	4611      	mov	r1, r2
 8006146:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800614a:	623b      	str	r3, [r7, #32]
 800614c:	2300      	movs	r3, #0
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
 8006150:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006154:	4642      	mov	r2, r8
 8006156:	464b      	mov	r3, r9
 8006158:	f04f 0000 	mov.w	r0, #0
 800615c:	f04f 0100 	mov.w	r1, #0
 8006160:	0159      	lsls	r1, r3, #5
 8006162:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006166:	0150      	lsls	r0, r2, #5
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4641      	mov	r1, r8
 800616e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006172:	4649      	mov	r1, r9
 8006174:	eb63 0b01 	sbc.w	fp, r3, r1
 8006178:	f04f 0200 	mov.w	r2, #0
 800617c:	f04f 0300 	mov.w	r3, #0
 8006180:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006184:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006188:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800618c:	ebb2 040a 	subs.w	r4, r2, sl
 8006190:	eb63 050b 	sbc.w	r5, r3, fp
 8006194:	f04f 0200 	mov.w	r2, #0
 8006198:	f04f 0300 	mov.w	r3, #0
 800619c:	00eb      	lsls	r3, r5, #3
 800619e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061a2:	00e2      	lsls	r2, r4, #3
 80061a4:	4614      	mov	r4, r2
 80061a6:	461d      	mov	r5, r3
 80061a8:	4643      	mov	r3, r8
 80061aa:	18e3      	adds	r3, r4, r3
 80061ac:	603b      	str	r3, [r7, #0]
 80061ae:	464b      	mov	r3, r9
 80061b0:	eb45 0303 	adc.w	r3, r5, r3
 80061b4:	607b      	str	r3, [r7, #4]
 80061b6:	f04f 0200 	mov.w	r2, #0
 80061ba:	f04f 0300 	mov.w	r3, #0
 80061be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061c2:	4629      	mov	r1, r5
 80061c4:	028b      	lsls	r3, r1, #10
 80061c6:	4621      	mov	r1, r4
 80061c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061cc:	4621      	mov	r1, r4
 80061ce:	028a      	lsls	r2, r1, #10
 80061d0:	4610      	mov	r0, r2
 80061d2:	4619      	mov	r1, r3
 80061d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d6:	2200      	movs	r2, #0
 80061d8:	61bb      	str	r3, [r7, #24]
 80061da:	61fa      	str	r2, [r7, #28]
 80061dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061e0:	f7fa fce2 	bl	8000ba8 <__aeabi_uldivmod>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4613      	mov	r3, r2
 80061ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061ec:	4b0b      	ldr	r3, [pc, #44]	; (800621c <HAL_RCC_GetSysClockFreq+0x200>)
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	0c1b      	lsrs	r3, r3, #16
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	3301      	adds	r3, #1
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80061fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006200:	fbb2 f3f3 	udiv	r3, r2, r3
 8006204:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006206:	e002      	b.n	800620e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <HAL_RCC_GetSysClockFreq+0x204>)
 800620a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800620c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800620e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006210:	4618      	mov	r0, r3
 8006212:	3750      	adds	r7, #80	; 0x50
 8006214:	46bd      	mov	sp, r7
 8006216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800621a:	bf00      	nop
 800621c:	40023800 	.word	0x40023800
 8006220:	00f42400 	.word	0x00f42400
 8006224:	007a1200 	.word	0x007a1200

08006228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006228:	b480      	push	{r7}
 800622a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800622c:	4b03      	ldr	r3, [pc, #12]	; (800623c <HAL_RCC_GetHCLKFreq+0x14>)
 800622e:	681b      	ldr	r3, [r3, #0]
}
 8006230:	4618      	mov	r0, r3
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	20000090 	.word	0x20000090

08006240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006244:	f7ff fff0 	bl	8006228 <HAL_RCC_GetHCLKFreq>
 8006248:	4602      	mov	r2, r0
 800624a:	4b05      	ldr	r3, [pc, #20]	; (8006260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	0a9b      	lsrs	r3, r3, #10
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	4903      	ldr	r1, [pc, #12]	; (8006264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006256:	5ccb      	ldrb	r3, [r1, r3]
 8006258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800625c:	4618      	mov	r0, r3
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40023800 	.word	0x40023800
 8006264:	08009e44 	.word	0x08009e44

08006268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800626c:	f7ff ffdc 	bl	8006228 <HAL_RCC_GetHCLKFreq>
 8006270:	4602      	mov	r2, r0
 8006272:	4b05      	ldr	r3, [pc, #20]	; (8006288 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	0b5b      	lsrs	r3, r3, #13
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	4903      	ldr	r1, [pc, #12]	; (800628c <HAL_RCC_GetPCLK2Freq+0x24>)
 800627e:	5ccb      	ldrb	r3, [r1, r3]
 8006280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006284:	4618      	mov	r0, r3
 8006286:	bd80      	pop	{r7, pc}
 8006288:	40023800 	.word	0x40023800
 800628c:	08009e44 	.word	0x08009e44

08006290 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	220f      	movs	r2, #15
 800629e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80062a0:	4b12      	ldr	r3, [pc, #72]	; (80062ec <HAL_RCC_GetClockConfig+0x5c>)
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f003 0203 	and.w	r2, r3, #3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80062ac:	4b0f      	ldr	r3, [pc, #60]	; (80062ec <HAL_RCC_GetClockConfig+0x5c>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80062b8:	4b0c      	ldr	r3, [pc, #48]	; (80062ec <HAL_RCC_GetClockConfig+0x5c>)
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80062c4:	4b09      	ldr	r3, [pc, #36]	; (80062ec <HAL_RCC_GetClockConfig+0x5c>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	08db      	lsrs	r3, r3, #3
 80062ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80062d2:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <HAL_RCC_GetClockConfig+0x60>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0207 	and.w	r2, r3, #7
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	601a      	str	r2, [r3, #0]
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40023800 	.word	0x40023800
 80062f0:	40023c00 	.word	0x40023c00

080062f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e07b      	b.n	80063fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	2b00      	cmp	r3, #0
 800630c:	d108      	bne.n	8006320 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006316:	d009      	beq.n	800632c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	61da      	str	r2, [r3, #28]
 800631e:	e005      	b.n	800632c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d106      	bne.n	800634c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7fd fa34 	bl	80037b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006362:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006374:	431a      	orrs	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800637e:	431a      	orrs	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	431a      	orrs	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800639c:	431a      	orrs	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b0:	ea42 0103 	orr.w	r1, r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	0c1b      	lsrs	r3, r3, #16
 80063ca:	f003 0104 	and.w	r1, r3, #4
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	f003 0210 	and.w	r2, r3, #16
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69da      	ldr	r2, [r3, #28]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b088      	sub	sp, #32
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	603b      	str	r3, [r7, #0]
 8006412:	4613      	mov	r3, r2
 8006414:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006420:	2b01      	cmp	r3, #1
 8006422:	d101      	bne.n	8006428 <HAL_SPI_Transmit+0x22>
 8006424:	2302      	movs	r3, #2
 8006426:	e12d      	b.n	8006684 <HAL_SPI_Transmit+0x27e>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006430:	f7fd fc54 	bl	8003cdc <HAL_GetTick>
 8006434:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006436:	88fb      	ldrh	r3, [r7, #6]
 8006438:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b01      	cmp	r3, #1
 8006444:	d002      	beq.n	800644c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006446:	2302      	movs	r3, #2
 8006448:	77fb      	strb	r3, [r7, #31]
    goto error;
 800644a:	e116      	b.n	800667a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_SPI_Transmit+0x52>
 8006452:	88fb      	ldrh	r3, [r7, #6]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d102      	bne.n	800645e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800645c:	e10d      	b.n	800667a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2203      	movs	r2, #3
 8006462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	88fa      	ldrh	r2, [r7, #6]
 8006476:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	88fa      	ldrh	r2, [r7, #6]
 800647c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064a4:	d10f      	bne.n	80064c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d0:	2b40      	cmp	r3, #64	; 0x40
 80064d2:	d007      	beq.n	80064e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ec:	d14f      	bne.n	800658e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <HAL_SPI_Transmit+0xf6>
 80064f6:	8afb      	ldrh	r3, [r7, #22]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d142      	bne.n	8006582 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006500:	881a      	ldrh	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650c:	1c9a      	adds	r2, r3, #2
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006516:	b29b      	uxth	r3, r3
 8006518:	3b01      	subs	r3, #1
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006520:	e02f      	b.n	8006582 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b02      	cmp	r3, #2
 800652e:	d112      	bne.n	8006556 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006534:	881a      	ldrh	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006540:	1c9a      	adds	r2, r3, #2
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	86da      	strh	r2, [r3, #54]	; 0x36
 8006554:	e015      	b.n	8006582 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006556:	f7fd fbc1 	bl	8003cdc <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	429a      	cmp	r2, r3
 8006564:	d803      	bhi.n	800656e <HAL_SPI_Transmit+0x168>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656c:	d102      	bne.n	8006574 <HAL_SPI_Transmit+0x16e>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d106      	bne.n	8006582 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006580:	e07b      	b.n	800667a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006586:	b29b      	uxth	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1ca      	bne.n	8006522 <HAL_SPI_Transmit+0x11c>
 800658c:	e050      	b.n	8006630 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <HAL_SPI_Transmit+0x196>
 8006596:	8afb      	ldrh	r3, [r7, #22]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d144      	bne.n	8006626 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	330c      	adds	r3, #12
 80065a6:	7812      	ldrb	r2, [r2, #0]
 80065a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	3b01      	subs	r3, #1
 80065bc:	b29a      	uxth	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80065c2:	e030      	b.n	8006626 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d113      	bne.n	80065fa <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	330c      	adds	r3, #12
 80065dc:	7812      	ldrb	r2, [r2, #0]
 80065de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	3b01      	subs	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80065f8:	e015      	b.n	8006626 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065fa:	f7fd fb6f 	bl	8003cdc <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d803      	bhi.n	8006612 <HAL_SPI_Transmit+0x20c>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006610:	d102      	bne.n	8006618 <HAL_SPI_Transmit+0x212>
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006624:	e029      	b.n	800667a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800662a:	b29b      	uxth	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1c9      	bne.n	80065c4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f001 f8d7 	bl	80077e8 <SPI_EndRxTxTransaction>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2220      	movs	r2, #32
 8006644:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800664e:	2300      	movs	r3, #0
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	613b      	str	r3, [r7, #16]
 8006662:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	77fb      	strb	r3, [r7, #31]
 8006670:	e003      	b.n	800667a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006682:	7ffb      	ldrb	r3, [r7, #31]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3720      	adds	r7, #32
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af02      	add	r7, sp, #8
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	603b      	str	r3, [r7, #0]
 8006698:	4613      	mov	r3, r2
 800669a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d002      	beq.n	80066b2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80066ac:	2302      	movs	r3, #2
 80066ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80066b0:	e0fb      	b.n	80068aa <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ba:	d112      	bne.n	80066e2 <HAL_SPI_Receive+0x56>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10e      	bne.n	80066e2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2204      	movs	r2, #4
 80066c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80066cc:	88fa      	ldrh	r2, [r7, #6]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	4613      	mov	r3, r2
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	68b9      	ldr	r1, [r7, #8]
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f8ef 	bl	80068bc <HAL_SPI_TransmitReceive>
 80066de:	4603      	mov	r3, r0
 80066e0:	e0e8      	b.n	80068b4 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_SPI_Receive+0x64>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e0e1      	b.n	80068b4 <HAL_SPI_Receive+0x228>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066f8:	f7fd faf0 	bl	8003cdc <HAL_GetTick>
 80066fc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <HAL_SPI_Receive+0x7e>
 8006704:	88fb      	ldrh	r3, [r7, #6]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d102      	bne.n	8006710 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800670e:	e0cc      	b.n	80068aa <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2204      	movs	r2, #4
 8006714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	88fa      	ldrh	r2, [r7, #6]
 8006728:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	88fa      	ldrh	r2, [r7, #6]
 800672e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006756:	d10f      	bne.n	8006778 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006766:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006776:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006782:	2b40      	cmp	r3, #64	; 0x40
 8006784:	d007      	beq.n	8006796 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006794:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d16a      	bne.n	8006874 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800679e:	e032      	b.n	8006806 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d115      	bne.n	80067da <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f103 020c 	add.w	r2, r3, #12
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ba:	7812      	ldrb	r2, [r2, #0]
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067d8:	e015      	b.n	8006806 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067da:	f7fd fa7f 	bl	8003cdc <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d803      	bhi.n	80067f2 <HAL_SPI_Receive+0x166>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f0:	d102      	bne.n	80067f8 <HAL_SPI_Receive+0x16c>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d106      	bne.n	8006806 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006804:	e051      	b.n	80068aa <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800680a:	b29b      	uxth	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1c7      	bne.n	80067a0 <HAL_SPI_Receive+0x114>
 8006810:	e035      	b.n	800687e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b01      	cmp	r3, #1
 800681e:	d113      	bne.n	8006848 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	b292      	uxth	r2, r2
 800682c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006832:	1c9a      	adds	r2, r3, #2
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800683c:	b29b      	uxth	r3, r3
 800683e:	3b01      	subs	r3, #1
 8006840:	b29a      	uxth	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006846:	e015      	b.n	8006874 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006848:	f7fd fa48 	bl	8003cdc <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d803      	bhi.n	8006860 <HAL_SPI_Receive+0x1d4>
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685e:	d102      	bne.n	8006866 <HAL_SPI_Receive+0x1da>
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006872:	e01a      	b.n	80068aa <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006878:	b29b      	uxth	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1c9      	bne.n	8006812 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 ff4a 	bl	800771c <SPI_EndRxTransaction>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2220      	movs	r2, #32
 8006892:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	75fb      	strb	r3, [r7, #23]
 80068a0:	e003      	b.n	80068aa <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08c      	sub	sp, #48	; 0x30
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
 80068c8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80068ca:	2301      	movs	r3, #1
 80068cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d101      	bne.n	80068e2 <HAL_SPI_TransmitReceive+0x26>
 80068de:	2302      	movs	r3, #2
 80068e0:	e198      	b.n	8006c14 <HAL_SPI_TransmitReceive+0x358>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068ea:	f7fd f9f7 	bl	8003cdc <HAL_GetTick>
 80068ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006900:	887b      	ldrh	r3, [r7, #2]
 8006902:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006904:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006908:	2b01      	cmp	r3, #1
 800690a:	d00f      	beq.n	800692c <HAL_SPI_TransmitReceive+0x70>
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006912:	d107      	bne.n	8006924 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d103      	bne.n	8006924 <HAL_SPI_TransmitReceive+0x68>
 800691c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006920:	2b04      	cmp	r3, #4
 8006922:	d003      	beq.n	800692c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006924:	2302      	movs	r3, #2
 8006926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800692a:	e16d      	b.n	8006c08 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d005      	beq.n	800693e <HAL_SPI_TransmitReceive+0x82>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <HAL_SPI_TransmitReceive+0x82>
 8006938:	887b      	ldrh	r3, [r7, #2]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d103      	bne.n	8006946 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006944:	e160      	b.n	8006c08 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b04      	cmp	r3, #4
 8006950:	d003      	beq.n	800695a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2205      	movs	r2, #5
 8006956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	887a      	ldrh	r2, [r7, #2]
 800696a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	887a      	ldrh	r2, [r7, #2]
 8006970:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	887a      	ldrh	r2, [r7, #2]
 800697c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	887a      	ldrh	r2, [r7, #2]
 8006982:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699a:	2b40      	cmp	r3, #64	; 0x40
 800699c:	d007      	beq.n	80069ae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069b6:	d17c      	bne.n	8006ab2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <HAL_SPI_TransmitReceive+0x10a>
 80069c0:	8b7b      	ldrh	r3, [r7, #26]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d16a      	bne.n	8006a9c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ca:	881a      	ldrh	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d6:	1c9a      	adds	r2, r3, #2
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069ea:	e057      	b.n	8006a9c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d11b      	bne.n	8006a32 <HAL_SPI_TransmitReceive+0x176>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d016      	beq.n	8006a32 <HAL_SPI_TransmitReceive+0x176>
 8006a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d113      	bne.n	8006a32 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0e:	881a      	ldrh	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1a:	1c9a      	adds	r2, r3, #2
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	3b01      	subs	r3, #1
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d119      	bne.n	8006a74 <HAL_SPI_TransmitReceive+0x1b8>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d014      	beq.n	8006a74 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a54:	b292      	uxth	r2, r2
 8006a56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5c:	1c9a      	adds	r2, r3, #2
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a70:	2301      	movs	r3, #1
 8006a72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a74:	f7fd f932 	bl	8003cdc <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d80b      	bhi.n	8006a9c <HAL_SPI_TransmitReceive+0x1e0>
 8006a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8a:	d007      	beq.n	8006a9c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006a9a:	e0b5      	b.n	8006c08 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1a2      	bne.n	80069ec <HAL_SPI_TransmitReceive+0x130>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d19d      	bne.n	80069ec <HAL_SPI_TransmitReceive+0x130>
 8006ab0:	e080      	b.n	8006bb4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <HAL_SPI_TransmitReceive+0x204>
 8006aba:	8b7b      	ldrh	r3, [r7, #26]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d16f      	bne.n	8006ba0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	7812      	ldrb	r2, [r2, #0]
 8006acc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ae6:	e05b      	b.n	8006ba0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d11c      	bne.n	8006b30 <HAL_SPI_TransmitReceive+0x274>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d017      	beq.n	8006b30 <HAL_SPI_TransmitReceive+0x274>
 8006b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d114      	bne.n	8006b30 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	330c      	adds	r3, #12
 8006b10:	7812      	ldrb	r2, [r2, #0]
 8006b12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	3b01      	subs	r3, #1
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d119      	bne.n	8006b72 <HAL_SPI_TransmitReceive+0x2b6>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d014      	beq.n	8006b72 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68da      	ldr	r2, [r3, #12]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	3b01      	subs	r3, #1
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b72:	f7fd f8b3 	bl	8003cdc <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d803      	bhi.n	8006b8a <HAL_SPI_TransmitReceive+0x2ce>
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b88:	d102      	bne.n	8006b90 <HAL_SPI_TransmitReceive+0x2d4>
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d107      	bne.n	8006ba0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006b9e:	e033      	b.n	8006c08 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d19e      	bne.n	8006ae8 <HAL_SPI_TransmitReceive+0x22c>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d199      	bne.n	8006ae8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 fe15 	bl	80077e8 <SPI_EndRxTxTransaction>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d006      	beq.n	8006bd2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006bd0:	e01a      	b.n	8006c08 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10a      	bne.n	8006bf0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bda:	2300      	movs	r3, #0
 8006bdc:	617b      	str	r3, [r7, #20]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bfe:	e003      	b.n	8006c08 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3730      	adds	r7, #48	; 0x30
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	4613      	mov	r3, r2
 8006c28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_SPI_Transmit_DMA+0x20>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e097      	b.n	8006d6c <HAL_SPI_Transmit_DMA+0x150>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d002      	beq.n	8006c56 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006c50:	2302      	movs	r3, #2
 8006c52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c54:	e085      	b.n	8006d62 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <HAL_SPI_Transmit_DMA+0x46>
 8006c5c:	88fb      	ldrh	r3, [r7, #6]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d102      	bne.n	8006c68 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c66:	e07c      	b.n	8006d62 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2203      	movs	r2, #3
 8006c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	88fa      	ldrh	r2, [r7, #6]
 8006c80:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	88fa      	ldrh	r2, [r7, #6]
 8006c86:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cae:	d10f      	bne.n	8006cd0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cbe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd4:	4a27      	ldr	r2, [pc, #156]	; (8006d74 <HAL_SPI_Transmit_DMA+0x158>)
 8006cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cdc:	4a26      	ldr	r2, [pc, #152]	; (8006d78 <HAL_SPI_Transmit_DMA+0x15c>)
 8006cde:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce4:	4a25      	ldr	r2, [pc, #148]	; (8006d7c <HAL_SPI_Transmit_DMA+0x160>)
 8006ce6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cec:	2200      	movs	r2, #0
 8006cee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	330c      	adds	r3, #12
 8006d00:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d06:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006d08:	f7fd f984 	bl	8004014 <HAL_DMA_Start_IT>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d008      	beq.n	8006d24 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d16:	f043 0210 	orr.w	r2, r3, #16
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006d22:	e01e      	b.n	8006d62 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2e:	2b40      	cmp	r3, #64	; 0x40
 8006d30:	d007      	beq.n	8006d42 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d40:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f042 0220 	orr.w	r2, r2, #32
 8006d50:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0202 	orr.w	r2, r2, #2
 8006d60:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	08007551 	.word	0x08007551
 8006d78:	08007371 	.word	0x08007371
 8006d7c:	080075a5 	.word	0x080075a5

08006d80 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d002      	beq.n	8006da4 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8006d9e:	2302      	movs	r3, #2
 8006da0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006da2:	e0a2      	b.n	8006eea <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d110      	bne.n	8006dce <HAL_SPI_Receive_DMA+0x4e>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006db4:	d10b      	bne.n	8006dce <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2204      	movs	r2, #4
 8006dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006dbe:	88fb      	ldrh	r3, [r7, #6]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	68b9      	ldr	r1, [r7, #8]
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 f89f 	bl	8006f08 <HAL_SPI_TransmitReceive_DMA>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	e092      	b.n	8006ef4 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d101      	bne.n	8006ddc <HAL_SPI_Receive_DMA+0x5c>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e08b      	b.n	8006ef4 <HAL_SPI_Receive_DMA+0x174>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <HAL_SPI_Receive_DMA+0x70>
 8006dea:	88fb      	ldrh	r3, [r7, #6]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d102      	bne.n	8006df6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006df4:	e079      	b.n	8006eea <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2204      	movs	r2, #4
 8006dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	88fa      	ldrh	r2, [r7, #6]
 8006e0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	88fa      	ldrh	r2, [r7, #6]
 8006e14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e36:	d10f      	bne.n	8006e58 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e56:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e5c:	4a27      	ldr	r2, [pc, #156]	; (8006efc <HAL_SPI_Receive_DMA+0x17c>)
 8006e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e64:	4a26      	ldr	r2, [pc, #152]	; (8006f00 <HAL_SPI_Receive_DMA+0x180>)
 8006e66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e6c:	4a25      	ldr	r2, [pc, #148]	; (8006f04 <HAL_SPI_Receive_DMA+0x184>)
 8006e6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e74:	2200      	movs	r2, #0
 8006e76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	330c      	adds	r3, #12
 8006e82:	4619      	mov	r1, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e88:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e8e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006e90:	f7fd f8c0 	bl	8004014 <HAL_DMA_Start_IT>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d008      	beq.n	8006eac <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9e:	f043 0210 	orr.w	r2, r3, #16
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006eaa:	e01e      	b.n	8006eea <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb6:	2b40      	cmp	r3, #64	; 0x40
 8006eb8:	d007      	beq.n	8006eca <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ec8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f042 0220 	orr.w	r2, r2, #32
 8006ed8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 0201 	orr.w	r2, r2, #1
 8006ee8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	0800756d 	.word	0x0800756d
 8006f00:	08007419 	.word	0x08007419
 8006f04:	080075a5 	.word	0x080075a5

08006f08 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e0db      	b.n	80070e0 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f36:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006f3e:	7dbb      	ldrb	r3, [r7, #22]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d00d      	beq.n	8006f60 <HAL_SPI_TransmitReceive_DMA+0x58>
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f4a:	d106      	bne.n	8006f5a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d102      	bne.n	8006f5a <HAL_SPI_TransmitReceive_DMA+0x52>
 8006f54:	7dbb      	ldrb	r3, [r7, #22]
 8006f56:	2b04      	cmp	r3, #4
 8006f58:	d002      	beq.n	8006f60 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f5e:	e0ba      	b.n	80070d6 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d005      	beq.n	8006f72 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006f6c:	887b      	ldrh	r3, [r7, #2]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d102      	bne.n	8006f78 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f76:	e0ae      	b.n	80070d6 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	d003      	beq.n	8006f8c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2205      	movs	r2, #5
 8006f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	887a      	ldrh	r2, [r7, #2]
 8006f9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	887a      	ldrh	r2, [r7, #2]
 8006fa2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	887a      	ldrh	r2, [r7, #2]
 8006fae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	887a      	ldrh	r2, [r7, #2]
 8006fb4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d108      	bne.n	8006fe0 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd2:	4a45      	ldr	r2, [pc, #276]	; (80070e8 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8006fd4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fda:	4a44      	ldr	r2, [pc, #272]	; (80070ec <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8006fdc:	63da      	str	r2, [r3, #60]	; 0x3c
 8006fde:	e007      	b.n	8006ff0 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe4:	4a42      	ldr	r2, [pc, #264]	; (80070f0 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8006fe6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fec:	4a41      	ldr	r2, [pc, #260]	; (80070f4 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8006fee:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff4:	4a40      	ldr	r2, [pc, #256]	; (80070f8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8006ff6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	330c      	adds	r3, #12
 800700a:	4619      	mov	r1, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007016:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007018:	f7fc fffc 	bl	8004014 <HAL_DMA_Start_IT>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d008      	beq.n	8007034 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007026:	f043 0210 	orr.w	r2, r3, #16
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007032:	e050      	b.n	80070d6 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f042 0201 	orr.w	r2, r2, #1
 8007042:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007048:	2200      	movs	r2, #0
 800704a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007050:	2200      	movs	r2, #0
 8007052:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007058:	2200      	movs	r2, #0
 800705a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007060:	2200      	movs	r2, #0
 8007062:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706c:	4619      	mov	r1, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	330c      	adds	r3, #12
 8007074:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800707a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800707c:	f7fc ffca 	bl	8004014 <HAL_DMA_Start_IT>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d008      	beq.n	8007098 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708a:	f043 0210 	orr.w	r2, r3, #16
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007096:	e01e      	b.n	80070d6 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a2:	2b40      	cmp	r3, #64	; 0x40
 80070a4:	d007      	beq.n	80070b6 <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070b4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f042 0220 	orr.w	r2, r2, #32
 80070c4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f042 0202 	orr.w	r2, r2, #2
 80070d4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070de:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3718      	adds	r7, #24
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	0800756d 	.word	0x0800756d
 80070ec:	08007419 	.word	0x08007419
 80070f0:	08007589 	.word	0x08007589
 80070f4:	080074c1 	.word	0x080074c1
 80070f8:	080075a5 	.word	0x080075a5

080070fc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b088      	sub	sp, #32
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10e      	bne.n	800713c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007124:	2b00      	cmp	r3, #0
 8007126:	d009      	beq.n	800713c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	d004      	beq.n	800713c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	4798      	blx	r3
    return;
 800713a:	e0ce      	b.n	80072da <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d009      	beq.n	800715a <HAL_SPI_IRQHandler+0x5e>
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800714c:	2b00      	cmp	r3, #0
 800714e:	d004      	beq.n	800715a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	4798      	blx	r3
    return;
 8007158:	e0bf      	b.n	80072da <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	f003 0320 	and.w	r3, r3, #32
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10a      	bne.n	800717a <HAL_SPI_IRQHandler+0x7e>
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	d105      	bne.n	800717a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 80b0 	beq.w	80072da <HAL_SPI_IRQHandler+0x1de>
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 80aa 	beq.w	80072da <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718c:	2b00      	cmp	r3, #0
 800718e:	d023      	beq.n	80071d8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b03      	cmp	r3, #3
 800719a:	d011      	beq.n	80071c0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a0:	f043 0204 	orr.w	r2, r3, #4
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071a8:	2300      	movs	r3, #0
 80071aa:	617b      	str	r3, [r7, #20]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	617b      	str	r3, [r7, #20]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	617b      	str	r3, [r7, #20]
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	e00b      	b.n	80071d8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071c0:	2300      	movs	r3, #0
 80071c2:	613b      	str	r3, [r7, #16]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	613b      	str	r3, [r7, #16]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	613b      	str	r3, [r7, #16]
 80071d4:	693b      	ldr	r3, [r7, #16]
        return;
 80071d6:	e080      	b.n	80072da <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d014      	beq.n	800720c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e6:	f043 0201 	orr.w	r2, r3, #1
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80071ee:	2300      	movs	r3, #0
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00c      	beq.n	8007230 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721a:	f043 0208 	orr.w	r2, r3, #8
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007222:	2300      	movs	r3, #0
 8007224:	60bb      	str	r3, [r7, #8]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	60bb      	str	r3, [r7, #8]
 800722e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007234:	2b00      	cmp	r3, #0
 8007236:	d04f      	beq.n	80072d8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007246:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	2b00      	cmp	r3, #0
 8007258:	d104      	bne.n	8007264 <HAL_SPI_IRQHandler+0x168>
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b00      	cmp	r3, #0
 8007262:	d034      	beq.n	80072ce <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0203 	bic.w	r2, r2, #3
 8007272:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007278:	2b00      	cmp	r3, #0
 800727a:	d011      	beq.n	80072a0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007280:	4a17      	ldr	r2, [pc, #92]	; (80072e0 <HAL_SPI_IRQHandler+0x1e4>)
 8007282:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007288:	4618      	mov	r0, r3
 800728a:	f7fc ff1b 	bl	80040c4 <HAL_DMA_Abort_IT>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007298:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d016      	beq.n	80072d6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ac:	4a0c      	ldr	r2, [pc, #48]	; (80072e0 <HAL_SPI_IRQHandler+0x1e4>)
 80072ae:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fc ff05 	bl	80040c4 <HAL_DMA_Abort_IT>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00a      	beq.n	80072d6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80072cc:	e003      	b.n	80072d6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f844 	bl	800735c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80072d4:	e000      	b.n	80072d8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80072d6:	bf00      	nop
    return;
 80072d8:	bf00      	nop
  }
}
 80072da:	3720      	adds	r7, #32
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	080075e5 	.word	0x080075e5

080072e4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800737e:	f7fc fcad 	bl	8003cdc <HAL_GetTick>
 8007382:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800738e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007392:	d03b      	beq.n	800740c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 0220 	bic.w	r2, r2, #32
 80073a2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 0202 	bic.w	r2, r2, #2
 80073b2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	2164      	movs	r1, #100	; 0x64
 80073b8:	6978      	ldr	r0, [r7, #20]
 80073ba:	f000 fa15 	bl	80077e8 <SPI_EndRxTxTransaction>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d005      	beq.n	80073d0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c8:	f043 0220 	orr.w	r2, r3, #32
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10a      	bne.n	80073ee <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073d8:	2300      	movs	r3, #0
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2200      	movs	r2, #0
 80073f2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007404:	6978      	ldr	r0, [r7, #20]
 8007406:	f7ff ffa9 	bl	800735c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800740a:	e002      	b.n	8007412 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800740c:	6978      	ldr	r0, [r7, #20]
 800740e:	f7ff ff69 	bl	80072e4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007424:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007426:	f7fc fc59 	bl	8003cdc <HAL_GetTick>
 800742a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743a:	d03b      	beq.n	80074b4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0220 	bic.w	r2, r2, #32
 800744a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10d      	bne.n	8007470 <SPI_DMAReceiveCplt+0x58>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800745c:	d108      	bne.n	8007470 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 0203 	bic.w	r2, r2, #3
 800746c:	605a      	str	r2, [r3, #4]
 800746e:	e007      	b.n	8007480 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 0201 	bic.w	r2, r2, #1
 800747e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	2164      	movs	r1, #100	; 0x64
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 f949 	bl	800771c <SPI_EndRxTransaction>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2220      	movs	r2, #32
 8007494:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f7ff ff55 	bl	800735c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80074b2:	e002      	b.n	80074ba <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f7ff ff1f 	bl	80072f8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074ce:	f7fc fc05 	bl	8003cdc <HAL_GetTick>
 80074d2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074e2:	d02f      	beq.n	8007544 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 0220 	bic.w	r2, r2, #32
 80074f2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	2164      	movs	r1, #100	; 0x64
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 f975 	bl	80077e8 <SPI_EndRxTxTransaction>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d005      	beq.n	8007510 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007508:	f043 0220 	orr.w	r2, r3, #32
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f022 0203 	bic.w	r2, r2, #3
 800751e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f7ff ff0d 	bl	800735c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007542:	e002      	b.n	800754a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f7ff fee1 	bl	800730c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f7ff fede 	bl	8007320 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007564:	bf00      	nop
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007578:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f7ff feda 	bl	8007334 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007580:	bf00      	nop
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007594:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f7ff fed6 	bl	8007348 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800759c:	bf00      	nop
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 0203 	bic.w	r2, r2, #3
 80075c0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c6:	f043 0210 	orr.w	r2, r3, #16
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f7ff fec0 	bl	800735c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80075dc:	bf00      	nop
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7ff feac 	bl	800735c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007604:	bf00      	nop
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b088      	sub	sp, #32
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	603b      	str	r3, [r7, #0]
 8007618:	4613      	mov	r3, r2
 800761a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800761c:	f7fc fb5e 	bl	8003cdc <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007624:	1a9b      	subs	r3, r3, r2
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	4413      	add	r3, r2
 800762a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800762c:	f7fc fb56 	bl	8003cdc <HAL_GetTick>
 8007630:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007632:	4b39      	ldr	r3, [pc, #228]	; (8007718 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	015b      	lsls	r3, r3, #5
 8007638:	0d1b      	lsrs	r3, r3, #20
 800763a:	69fa      	ldr	r2, [r7, #28]
 800763c:	fb02 f303 	mul.w	r3, r2, r3
 8007640:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007642:	e054      	b.n	80076ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764a:	d050      	beq.n	80076ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800764c:	f7fc fb46 	bl	8003cdc <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	69fa      	ldr	r2, [r7, #28]
 8007658:	429a      	cmp	r2, r3
 800765a:	d902      	bls.n	8007662 <SPI_WaitFlagStateUntilTimeout+0x56>
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d13d      	bne.n	80076de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007670:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800767a:	d111      	bne.n	80076a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007684:	d004      	beq.n	8007690 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800768e:	d107      	bne.n	80076a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800769e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076a8:	d10f      	bne.n	80076ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e017      	b.n	800770e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	4013      	ands	r3, r2
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	bf0c      	ite	eq
 80076fe:	2301      	moveq	r3, #1
 8007700:	2300      	movne	r3, #0
 8007702:	b2db      	uxtb	r3, r3
 8007704:	461a      	mov	r2, r3
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	429a      	cmp	r2, r3
 800770a:	d19b      	bne.n	8007644 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3720      	adds	r7, #32
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20000090 	.word	0x20000090

0800771c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af02      	add	r7, sp, #8
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007730:	d111      	bne.n	8007756 <SPI_EndRxTransaction+0x3a>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800773a:	d004      	beq.n	8007746 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007744:	d107      	bne.n	8007756 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007754:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800775e:	d12a      	bne.n	80077b6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007768:	d012      	beq.n	8007790 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2200      	movs	r2, #0
 8007772:	2180      	movs	r1, #128	; 0x80
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f7ff ff49 	bl	800760c <SPI_WaitFlagStateUntilTimeout>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d02d      	beq.n	80077dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007784:	f043 0220 	orr.w	r2, r3, #32
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e026      	b.n	80077de <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2200      	movs	r2, #0
 8007798:	2101      	movs	r1, #1
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f7ff ff36 	bl	800760c <SPI_WaitFlagStateUntilTimeout>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d01a      	beq.n	80077dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077aa:	f043 0220 	orr.w	r2, r3, #32
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e013      	b.n	80077de <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2200      	movs	r2, #0
 80077be:	2101      	movs	r1, #1
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f7ff ff23 	bl	800760c <SPI_WaitFlagStateUntilTimeout>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d007      	beq.n	80077dc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d0:	f043 0220 	orr.w	r2, r3, #32
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e000      	b.n	80077de <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
	...

080077e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2201      	movs	r2, #1
 80077fc:	2102      	movs	r1, #2
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f7ff ff04 	bl	800760c <SPI_WaitFlagStateUntilTimeout>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d007      	beq.n	800781a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780e:	f043 0220 	orr.w	r2, r3, #32
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e032      	b.n	8007880 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800781a:	4b1b      	ldr	r3, [pc, #108]	; (8007888 <SPI_EndRxTxTransaction+0xa0>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a1b      	ldr	r2, [pc, #108]	; (800788c <SPI_EndRxTxTransaction+0xa4>)
 8007820:	fba2 2303 	umull	r2, r3, r2, r3
 8007824:	0d5b      	lsrs	r3, r3, #21
 8007826:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800782a:	fb02 f303 	mul.w	r3, r2, r3
 800782e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007838:	d112      	bne.n	8007860 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2200      	movs	r2, #0
 8007842:	2180      	movs	r1, #128	; 0x80
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f7ff fee1 	bl	800760c <SPI_WaitFlagStateUntilTimeout>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d016      	beq.n	800787e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007854:	f043 0220 	orr.w	r2, r3, #32
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e00f      	b.n	8007880 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	3b01      	subs	r3, #1
 800786a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007876:	2b80      	cmp	r3, #128	; 0x80
 8007878:	d0f2      	beq.n	8007860 <SPI_EndRxTxTransaction+0x78>
 800787a:	e000      	b.n	800787e <SPI_EndRxTxTransaction+0x96>
        break;
 800787c:	bf00      	nop
  }

  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20000090 	.word	0x20000090
 800788c:	165e9f81 	.word	0x165e9f81

08007890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e041      	b.n	8007926 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d106      	bne.n	80078bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f839 	bl	800792e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	3304      	adds	r3, #4
 80078cc:	4619      	mov	r1, r3
 80078ce:	4610      	mov	r0, r2
 80078d0:	f000 f9b2 	bl	8007c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
	...

08007944 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b01      	cmp	r3, #1
 8007956:	d001      	beq.n	800795c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e044      	b.n	80079e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2202      	movs	r2, #2
 8007960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f042 0201 	orr.w	r2, r2, #1
 8007972:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a1e      	ldr	r2, [pc, #120]	; (80079f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d018      	beq.n	80079b0 <HAL_TIM_Base_Start_IT+0x6c>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007986:	d013      	beq.n	80079b0 <HAL_TIM_Base_Start_IT+0x6c>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a1a      	ldr	r2, [pc, #104]	; (80079f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00e      	beq.n	80079b0 <HAL_TIM_Base_Start_IT+0x6c>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a19      	ldr	r2, [pc, #100]	; (80079fc <HAL_TIM_Base_Start_IT+0xb8>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d009      	beq.n	80079b0 <HAL_TIM_Base_Start_IT+0x6c>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a17      	ldr	r2, [pc, #92]	; (8007a00 <HAL_TIM_Base_Start_IT+0xbc>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d004      	beq.n	80079b0 <HAL_TIM_Base_Start_IT+0x6c>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a16      	ldr	r2, [pc, #88]	; (8007a04 <HAL_TIM_Base_Start_IT+0xc0>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d111      	bne.n	80079d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f003 0307 	and.w	r3, r3, #7
 80079ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2b06      	cmp	r3, #6
 80079c0:	d010      	beq.n	80079e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f042 0201 	orr.w	r2, r2, #1
 80079d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079d2:	e007      	b.n	80079e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f042 0201 	orr.w	r2, r2, #1
 80079e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	40010000 	.word	0x40010000
 80079f8:	40000400 	.word	0x40000400
 80079fc:	40000800 	.word	0x40000800
 8007a00:	40000c00 	.word	0x40000c00
 8007a04:	40014000 	.word	0x40014000

08007a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	f003 0302 	and.w	r3, r3, #2
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d020      	beq.n	8007a6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d01b      	beq.n	8007a6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f06f 0202 	mvn.w	r2, #2
 8007a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	f003 0303 	and.w	r3, r3, #3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f8d2 	bl	8007bfc <HAL_TIM_IC_CaptureCallback>
 8007a58:	e005      	b.n	8007a66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f8c4 	bl	8007be8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f8d5 	bl	8007c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f003 0304 	and.w	r3, r3, #4
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d020      	beq.n	8007ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01b      	beq.n	8007ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f06f 0204 	mvn.w	r2, #4
 8007a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2202      	movs	r2, #2
 8007a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f8ac 	bl	8007bfc <HAL_TIM_IC_CaptureCallback>
 8007aa4:	e005      	b.n	8007ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f89e 	bl	8007be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f8af 	bl	8007c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	f003 0308 	and.w	r3, r3, #8
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d020      	beq.n	8007b04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f003 0308 	and.w	r3, r3, #8
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d01b      	beq.n	8007b04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f06f 0208 	mvn.w	r2, #8
 8007ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2204      	movs	r2, #4
 8007ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	f003 0303 	and.w	r3, r3, #3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d003      	beq.n	8007af2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f886 	bl	8007bfc <HAL_TIM_IC_CaptureCallback>
 8007af0:	e005      	b.n	8007afe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f878 	bl	8007be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f889 	bl	8007c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	f003 0310 	and.w	r3, r3, #16
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d020      	beq.n	8007b50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f003 0310 	and.w	r3, r3, #16
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d01b      	beq.n	8007b50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f06f 0210 	mvn.w	r2, #16
 8007b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2208      	movs	r2, #8
 8007b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f860 	bl	8007bfc <HAL_TIM_IC_CaptureCallback>
 8007b3c:	e005      	b.n	8007b4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f852 	bl	8007be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f863 	bl	8007c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00c      	beq.n	8007b74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d007      	beq.n	8007b74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f06f 0201 	mvn.w	r2, #1
 8007b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7fb fd9c 	bl	80036ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00c      	beq.n	8007b98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d007      	beq.n	8007b98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f8e6 	bl	8007d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00c      	beq.n	8007bbc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d007      	beq.n	8007bbc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f834 	bl	8007c24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f003 0320 	and.w	r3, r3, #32
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00c      	beq.n	8007be0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f003 0320 	and.w	r3, r3, #32
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d007      	beq.n	8007be0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f06f 0220 	mvn.w	r2, #32
 8007bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f8b8 	bl	8007d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007be0:	bf00      	nop
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a3a      	ldr	r2, [pc, #232]	; (8007d34 <TIM_Base_SetConfig+0xfc>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00f      	beq.n	8007c70 <TIM_Base_SetConfig+0x38>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c56:	d00b      	beq.n	8007c70 <TIM_Base_SetConfig+0x38>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a37      	ldr	r2, [pc, #220]	; (8007d38 <TIM_Base_SetConfig+0x100>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d007      	beq.n	8007c70 <TIM_Base_SetConfig+0x38>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a36      	ldr	r2, [pc, #216]	; (8007d3c <TIM_Base_SetConfig+0x104>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d003      	beq.n	8007c70 <TIM_Base_SetConfig+0x38>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a35      	ldr	r2, [pc, #212]	; (8007d40 <TIM_Base_SetConfig+0x108>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d108      	bne.n	8007c82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a2b      	ldr	r2, [pc, #172]	; (8007d34 <TIM_Base_SetConfig+0xfc>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d01b      	beq.n	8007cc2 <TIM_Base_SetConfig+0x8a>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c90:	d017      	beq.n	8007cc2 <TIM_Base_SetConfig+0x8a>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a28      	ldr	r2, [pc, #160]	; (8007d38 <TIM_Base_SetConfig+0x100>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d013      	beq.n	8007cc2 <TIM_Base_SetConfig+0x8a>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a27      	ldr	r2, [pc, #156]	; (8007d3c <TIM_Base_SetConfig+0x104>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d00f      	beq.n	8007cc2 <TIM_Base_SetConfig+0x8a>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a26      	ldr	r2, [pc, #152]	; (8007d40 <TIM_Base_SetConfig+0x108>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d00b      	beq.n	8007cc2 <TIM_Base_SetConfig+0x8a>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a25      	ldr	r2, [pc, #148]	; (8007d44 <TIM_Base_SetConfig+0x10c>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d007      	beq.n	8007cc2 <TIM_Base_SetConfig+0x8a>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a24      	ldr	r2, [pc, #144]	; (8007d48 <TIM_Base_SetConfig+0x110>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d003      	beq.n	8007cc2 <TIM_Base_SetConfig+0x8a>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a23      	ldr	r2, [pc, #140]	; (8007d4c <TIM_Base_SetConfig+0x114>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d108      	bne.n	8007cd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	689a      	ldr	r2, [r3, #8]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a0e      	ldr	r2, [pc, #56]	; (8007d34 <TIM_Base_SetConfig+0xfc>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d103      	bne.n	8007d08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	691a      	ldr	r2, [r3, #16]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d105      	bne.n	8007d26 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f023 0201 	bic.w	r2, r3, #1
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	611a      	str	r2, [r3, #16]
  }
}
 8007d26:	bf00      	nop
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	40010000 	.word	0x40010000
 8007d38:	40000400 	.word	0x40000400
 8007d3c:	40000800 	.word	0x40000800
 8007d40:	40000c00 	.word	0x40000c00
 8007d44:	40014000 	.word	0x40014000
 8007d48:	40014400 	.word	0x40014400
 8007d4c:	40014800 	.word	0x40014800

08007d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <makeFreeRtosPriority>:
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	80fb      	strh	r3, [r7, #6]
 8007d82:	2300      	movs	r3, #0
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d8a:	2b84      	cmp	r3, #132	; 0x84
 8007d8c:	d005      	beq.n	8007d9a <makeFreeRtosPriority+0x22>
 8007d8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	4413      	add	r3, r2
 8007d96:	3303      	adds	r3, #3
 8007d98:	60fb      	str	r3, [r7, #12]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <osKernelStart>:
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	f000 fade 	bl	800836c <vTaskStartScheduler>
 8007db0:	2300      	movs	r3, #0
 8007db2:	4618      	mov	r0, r3
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <osThreadCreate>:
 8007db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007db8:	b089      	sub	sp, #36	; 0x24
 8007dba:	af04      	add	r7, sp, #16
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d020      	beq.n	8007e0a <osThreadCreate+0x54>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d01c      	beq.n	8007e0a <osThreadCreate+0x54>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685c      	ldr	r4, [r3, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681d      	ldr	r5, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	691e      	ldr	r6, [r3, #16]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7ff ffc8 	bl	8007d78 <makeFreeRtosPriority>
 8007de8:	4601      	mov	r1, r0
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	6992      	ldr	r2, [r2, #24]
 8007df2:	9202      	str	r2, [sp, #8]
 8007df4:	9301      	str	r3, [sp, #4]
 8007df6:	9100      	str	r1, [sp, #0]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	4632      	mov	r2, r6
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f000 f8ed 	bl	8007fde <xTaskCreateStatic>
 8007e04:	4603      	mov	r3, r0
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	e01c      	b.n	8007e44 <osThreadCreate+0x8e>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685c      	ldr	r4, [r3, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681d      	ldr	r5, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	b29e      	uxth	r6, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7ff ffaa 	bl	8007d78 <makeFreeRtosPriority>
 8007e24:	4602      	mov	r2, r0
 8007e26:	f107 030c 	add.w	r3, r7, #12
 8007e2a:	9301      	str	r3, [sp, #4]
 8007e2c:	9200      	str	r2, [sp, #0]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	4632      	mov	r2, r6
 8007e32:	4629      	mov	r1, r5
 8007e34:	4620      	mov	r0, r4
 8007e36:	f000 f92f 	bl	8008098 <xTaskCreate>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d001      	beq.n	8007e44 <osThreadCreate+0x8e>
 8007e40:	2300      	movs	r3, #0
 8007e42:	e000      	b.n	8007e46 <osThreadCreate+0x90>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e4e <osDelay>:
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <osDelay+0x16>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	e000      	b.n	8007e66 <osDelay+0x18>
 8007e64:	2301      	movs	r3, #1
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 fa4c 	bl	8008304 <vTaskDelay>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <vListInitialise>:
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f103 0208 	add.w	r2, r3, #8
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	605a      	str	r2, [r3, #4]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8e:	609a      	str	r2, [r3, #8]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f103 0208 	add.w	r2, r3, #8
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	60da      	str	r2, [r3, #12]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f103 0208 	add.w	r2, r3, #8
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	611a      	str	r2, [r3, #16]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	bf00      	nop
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <vListInitialiseItem>:
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	611a      	str	r2, [r3, #16]
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <vListInsertEnd>:
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	605a      	str	r2, [r3, #4]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	689a      	ldr	r2, [r3, #8]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	609a      	str	r2, [r3, #8]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	605a      	str	r2, [r3, #4]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	609a      	str	r2, [r3, #8]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	611a      	str	r2, [r3, #16]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	bf00      	nop
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <vListInsert>:
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	60bb      	str	r3, [r7, #8]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2e:	d103      	bne.n	8007f38 <vListInsert+0x20>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	60fb      	str	r3, [r7, #12]
 8007f36:	e00c      	b.n	8007f52 <vListInsert+0x3a>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	60fb      	str	r3, [r7, #12]
 8007f3e:	e002      	b.n	8007f46 <vListInsert+0x2e>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	60fb      	str	r3, [r7, #12]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d2f6      	bcs.n	8007f40 <vListInsert+0x28>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	605a      	str	r2, [r3, #4]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	609a      	str	r2, [r3, #8]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	609a      	str	r2, [r3, #8]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	605a      	str	r2, [r3, #4]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	611a      	str	r2, [r3, #16]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	1c5a      	adds	r2, r3, #1
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	bf00      	nop
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <uxListRemove>:
 8007f8a:	b480      	push	{r7}
 8007f8c:	b085      	sub	sp, #20
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	60fb      	str	r3, [r7, #12]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	6892      	ldr	r2, [r2, #8]
 8007fa0:	609a      	str	r2, [r3, #8]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	6852      	ldr	r2, [r2, #4]
 8007faa:	605a      	str	r2, [r3, #4]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d103      	bne.n	8007fbe <uxListRemove+0x34>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	689a      	ldr	r2, [r3, #8]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	605a      	str	r2, [r3, #4]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	611a      	str	r2, [r3, #16]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	1e5a      	subs	r2, r3, #1
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <xTaskCreateStatic>:
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b08e      	sub	sp, #56	; 0x38
 8007fe2:	af04      	add	r7, sp, #16
 8007fe4:	60f8      	str	r0, [r7, #12]
 8007fe6:	60b9      	str	r1, [r7, #8]
 8007fe8:	607a      	str	r2, [r7, #4]
 8007fea:	603b      	str	r3, [r7, #0]
 8007fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10a      	bne.n	8008008 <xTaskCreateStatic+0x2a>
 8007ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	623b      	str	r3, [r7, #32]
 8008004:	bf00      	nop
 8008006:	e7fe      	b.n	8008006 <xTaskCreateStatic+0x28>
 8008008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10a      	bne.n	8008024 <xTaskCreateStatic+0x46>
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	61fb      	str	r3, [r7, #28]
 8008020:	bf00      	nop
 8008022:	e7fe      	b.n	8008022 <xTaskCreateStatic+0x44>
 8008024:	2354      	movs	r3, #84	; 0x54
 8008026:	613b      	str	r3, [r7, #16]
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	2b54      	cmp	r3, #84	; 0x54
 800802c:	d00a      	beq.n	8008044 <xTaskCreateStatic+0x66>
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	61bb      	str	r3, [r7, #24]
 8008040:	bf00      	nop
 8008042:	e7fe      	b.n	8008042 <xTaskCreateStatic+0x64>
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008048:	2b00      	cmp	r3, #0
 800804a:	d01e      	beq.n	800808a <xTaskCreateStatic+0xac>
 800804c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804e:	2b00      	cmp	r3, #0
 8008050:	d01b      	beq.n	800808a <xTaskCreateStatic+0xac>
 8008052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008054:	627b      	str	r3, [r7, #36]	; 0x24
 8008056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800805a:	631a      	str	r2, [r3, #48]	; 0x30
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	2202      	movs	r2, #2
 8008060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008064:	2300      	movs	r3, #0
 8008066:	9303      	str	r3, [sp, #12]
 8008068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806a:	9302      	str	r3, [sp, #8]
 800806c:	f107 0314 	add.w	r3, r7, #20
 8008070:	9301      	str	r3, [sp, #4]
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	68b9      	ldr	r1, [r7, #8]
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 f850 	bl	8008122 <prvInitialiseNewTask>
 8008082:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008084:	f000 f8d4 	bl	8008230 <prvAddNewTaskToReadyList>
 8008088:	e001      	b.n	800808e <xTaskCreateStatic+0xb0>
 800808a:	2300      	movs	r3, #0
 800808c:	617b      	str	r3, [r7, #20]
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	4618      	mov	r0, r3
 8008092:	3728      	adds	r7, #40	; 0x28
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <xTaskCreate>:
 8008098:	b580      	push	{r7, lr}
 800809a:	b08c      	sub	sp, #48	; 0x30
 800809c:	af04      	add	r7, sp, #16
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	603b      	str	r3, [r7, #0]
 80080a4:	4613      	mov	r3, r2
 80080a6:	80fb      	strh	r3, [r7, #6]
 80080a8:	88fb      	ldrh	r3, [r7, #6]
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 fec3 	bl	8008e38 <pvPortMalloc>
 80080b2:	6178      	str	r0, [r7, #20]
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00e      	beq.n	80080d8 <xTaskCreate+0x40>
 80080ba:	2054      	movs	r0, #84	; 0x54
 80080bc:	f000 febc 	bl	8008e38 <pvPortMalloc>
 80080c0:	61f8      	str	r0, [r7, #28]
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d003      	beq.n	80080d0 <xTaskCreate+0x38>
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	631a      	str	r2, [r3, #48]	; 0x30
 80080ce:	e005      	b.n	80080dc <xTaskCreate+0x44>
 80080d0:	6978      	ldr	r0, [r7, #20]
 80080d2:	f000 ff7d 	bl	8008fd0 <vPortFree>
 80080d6:	e001      	b.n	80080dc <xTaskCreate+0x44>
 80080d8:	2300      	movs	r3, #0
 80080da:	61fb      	str	r3, [r7, #28]
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d017      	beq.n	8008112 <xTaskCreate+0x7a>
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80080ea:	88fa      	ldrh	r2, [r7, #6]
 80080ec:	2300      	movs	r3, #0
 80080ee:	9303      	str	r3, [sp, #12]
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	9302      	str	r3, [sp, #8]
 80080f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	68b9      	ldr	r1, [r7, #8]
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 f80e 	bl	8008122 <prvInitialiseNewTask>
 8008106:	69f8      	ldr	r0, [r7, #28]
 8008108:	f000 f892 	bl	8008230 <prvAddNewTaskToReadyList>
 800810c:	2301      	movs	r3, #1
 800810e:	61bb      	str	r3, [r7, #24]
 8008110:	e002      	b.n	8008118 <xTaskCreate+0x80>
 8008112:	f04f 33ff 	mov.w	r3, #4294967295
 8008116:	61bb      	str	r3, [r7, #24]
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	4618      	mov	r0, r3
 800811c:	3720      	adds	r7, #32
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <prvInitialiseNewTask>:
 8008122:	b580      	push	{r7, lr}
 8008124:	b088      	sub	sp, #32
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	607a      	str	r2, [r7, #4]
 800812e:	603b      	str	r3, [r7, #0]
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800813a:	3b01      	subs	r3, #1
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	61bb      	str	r3, [r7, #24]
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	f023 0307 	bic.w	r3, r3, #7
 8008148:	61bb      	str	r3, [r7, #24]
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	f003 0307 	and.w	r3, r3, #7
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00a      	beq.n	800816a <prvInitialiseNewTask+0x48>
 8008154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	bf00      	nop
 8008168:	e7fe      	b.n	8008168 <prvInitialiseNewTask+0x46>
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d01f      	beq.n	80081b0 <prvInitialiseNewTask+0x8e>
 8008170:	2300      	movs	r3, #0
 8008172:	61fb      	str	r3, [r7, #28]
 8008174:	e012      	b.n	800819c <prvInitialiseNewTask+0x7a>
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	4413      	add	r3, r2
 800817c:	7819      	ldrb	r1, [r3, #0]
 800817e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	4413      	add	r3, r2
 8008184:	3334      	adds	r3, #52	; 0x34
 8008186:	460a      	mov	r2, r1
 8008188:	701a      	strb	r2, [r3, #0]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	4413      	add	r3, r2
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d006      	beq.n	80081a4 <prvInitialiseNewTask+0x82>
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	3301      	adds	r3, #1
 800819a:	61fb      	str	r3, [r7, #28]
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	2b0f      	cmp	r3, #15
 80081a0:	d9e9      	bls.n	8008176 <prvInitialiseNewTask+0x54>
 80081a2:	e000      	b.n	80081a6 <prvInitialiseNewTask+0x84>
 80081a4:	bf00      	nop
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081ae:	e003      	b.n	80081b8 <prvInitialiseNewTask+0x96>
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80081b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ba:	2b06      	cmp	r3, #6
 80081bc:	d901      	bls.n	80081c2 <prvInitialiseNewTask+0xa0>
 80081be:	2306      	movs	r3, #6
 80081c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081cc:	645a      	str	r2, [r3, #68]	; 0x44
 80081ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d0:	2200      	movs	r2, #0
 80081d2:	649a      	str	r2, [r3, #72]	; 0x48
 80081d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d6:	3304      	adds	r3, #4
 80081d8:	4618      	mov	r0, r3
 80081da:	f7ff fe6c 	bl	8007eb6 <vListInitialiseItem>
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	3318      	adds	r3, #24
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7ff fe67 	bl	8007eb6 <vListInitialiseItem>
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ec:	611a      	str	r2, [r3, #16]
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	f1c3 0207 	rsb	r2, r3, #7
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	619a      	str	r2, [r3, #24]
 80081f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081fc:	625a      	str	r2, [r3, #36]	; 0x24
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	2200      	movs	r2, #0
 8008202:	64da      	str	r2, [r3, #76]	; 0x4c
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800820c:	683a      	ldr	r2, [r7, #0]
 800820e:	68f9      	ldr	r1, [r7, #12]
 8008210:	69b8      	ldr	r0, [r7, #24]
 8008212:	f000 fc05 	bl	8008a20 <pxPortInitialiseStack>
 8008216:	4602      	mov	r2, r0
 8008218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821e:	2b00      	cmp	r3, #0
 8008220:	d002      	beq.n	8008228 <prvInitialiseNewTask+0x106>
 8008222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	bf00      	nop
 800822a:	3720      	adds	r7, #32
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <prvAddNewTaskToReadyList>:
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	f000 fd1c 	bl	8008c74 <vPortEnterCritical>
 800823c:	4b2a      	ldr	r3, [pc, #168]	; (80082e8 <prvAddNewTaskToReadyList+0xb8>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3301      	adds	r3, #1
 8008242:	4a29      	ldr	r2, [pc, #164]	; (80082e8 <prvAddNewTaskToReadyList+0xb8>)
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	4b29      	ldr	r3, [pc, #164]	; (80082ec <prvAddNewTaskToReadyList+0xbc>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d109      	bne.n	8008262 <prvAddNewTaskToReadyList+0x32>
 800824e:	4a27      	ldr	r2, [pc, #156]	; (80082ec <prvAddNewTaskToReadyList+0xbc>)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	4b24      	ldr	r3, [pc, #144]	; (80082e8 <prvAddNewTaskToReadyList+0xb8>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d110      	bne.n	800827e <prvAddNewTaskToReadyList+0x4e>
 800825c:	f000 fabc 	bl	80087d8 <prvInitialiseTaskLists>
 8008260:	e00d      	b.n	800827e <prvAddNewTaskToReadyList+0x4e>
 8008262:	4b23      	ldr	r3, [pc, #140]	; (80082f0 <prvAddNewTaskToReadyList+0xc0>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d109      	bne.n	800827e <prvAddNewTaskToReadyList+0x4e>
 800826a:	4b20      	ldr	r3, [pc, #128]	; (80082ec <prvAddNewTaskToReadyList+0xbc>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008274:	429a      	cmp	r2, r3
 8008276:	d802      	bhi.n	800827e <prvAddNewTaskToReadyList+0x4e>
 8008278:	4a1c      	ldr	r2, [pc, #112]	; (80082ec <prvAddNewTaskToReadyList+0xbc>)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6013      	str	r3, [r2, #0]
 800827e:	4b1d      	ldr	r3, [pc, #116]	; (80082f4 <prvAddNewTaskToReadyList+0xc4>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3301      	adds	r3, #1
 8008284:	4a1b      	ldr	r2, [pc, #108]	; (80082f4 <prvAddNewTaskToReadyList+0xc4>)
 8008286:	6013      	str	r3, [r2, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828c:	2201      	movs	r2, #1
 800828e:	409a      	lsls	r2, r3
 8008290:	4b19      	ldr	r3, [pc, #100]	; (80082f8 <prvAddNewTaskToReadyList+0xc8>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4313      	orrs	r3, r2
 8008296:	4a18      	ldr	r2, [pc, #96]	; (80082f8 <prvAddNewTaskToReadyList+0xc8>)
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829e:	4613      	mov	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	4413      	add	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4a15      	ldr	r2, [pc, #84]	; (80082fc <prvAddNewTaskToReadyList+0xcc>)
 80082a8:	441a      	add	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	3304      	adds	r3, #4
 80082ae:	4619      	mov	r1, r3
 80082b0:	4610      	mov	r0, r2
 80082b2:	f7ff fe0d 	bl	8007ed0 <vListInsertEnd>
 80082b6:	f000 fd0d 	bl	8008cd4 <vPortExitCritical>
 80082ba:	4b0d      	ldr	r3, [pc, #52]	; (80082f0 <prvAddNewTaskToReadyList+0xc0>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00e      	beq.n	80082e0 <prvAddNewTaskToReadyList+0xb0>
 80082c2:	4b0a      	ldr	r3, [pc, #40]	; (80082ec <prvAddNewTaskToReadyList+0xbc>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d207      	bcs.n	80082e0 <prvAddNewTaskToReadyList+0xb0>
 80082d0:	4b0b      	ldr	r3, [pc, #44]	; (8008300 <prvAddNewTaskToReadyList+0xd0>)
 80082d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	2000087c 	.word	0x2000087c
 80082ec:	2000077c 	.word	0x2000077c
 80082f0:	20000888 	.word	0x20000888
 80082f4:	20000898 	.word	0x20000898
 80082f8:	20000884 	.word	0x20000884
 80082fc:	20000780 	.word	0x20000780
 8008300:	e000ed04 	.word	0xe000ed04

08008304 <vTaskDelay>:
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	2300      	movs	r3, #0
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d017      	beq.n	8008346 <vTaskDelay+0x42>
 8008316:	4b13      	ldr	r3, [pc, #76]	; (8008364 <vTaskDelay+0x60>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <vTaskDelay+0x30>
 800831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	60bb      	str	r3, [r7, #8]
 8008330:	bf00      	nop
 8008332:	e7fe      	b.n	8008332 <vTaskDelay+0x2e>
 8008334:	f000 f87a 	bl	800842c <vTaskSuspendAll>
 8008338:	2100      	movs	r1, #0
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fb0a 	bl	8008954 <prvAddCurrentTaskToDelayedList>
 8008340:	f000 f882 	bl	8008448 <xTaskResumeAll>
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d107      	bne.n	800835c <vTaskDelay+0x58>
 800834c:	4b06      	ldr	r3, [pc, #24]	; (8008368 <vTaskDelay+0x64>)
 800834e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	f3bf 8f4f 	dsb	sy
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	bf00      	nop
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	200008a4 	.word	0x200008a4
 8008368:	e000ed04 	.word	0xe000ed04

0800836c <vTaskStartScheduler>:
 800836c:	b580      	push	{r7, lr}
 800836e:	b08a      	sub	sp, #40	; 0x28
 8008370:	af04      	add	r7, sp, #16
 8008372:	2300      	movs	r3, #0
 8008374:	60bb      	str	r3, [r7, #8]
 8008376:	2300      	movs	r3, #0
 8008378:	607b      	str	r3, [r7, #4]
 800837a:	463a      	mov	r2, r7
 800837c:	1d39      	adds	r1, r7, #4
 800837e:	f107 0308 	add.w	r3, r7, #8
 8008382:	4618      	mov	r0, r3
 8008384:	f7fa ff70 	bl	8003268 <vApplicationGetIdleTaskMemory>
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	9202      	str	r2, [sp, #8]
 8008390:	9301      	str	r3, [sp, #4]
 8008392:	2300      	movs	r3, #0
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	2300      	movs	r3, #0
 8008398:	460a      	mov	r2, r1
 800839a:	491e      	ldr	r1, [pc, #120]	; (8008414 <vTaskStartScheduler+0xa8>)
 800839c:	481e      	ldr	r0, [pc, #120]	; (8008418 <vTaskStartScheduler+0xac>)
 800839e:	f7ff fe1e 	bl	8007fde <xTaskCreateStatic>
 80083a2:	4603      	mov	r3, r0
 80083a4:	4a1d      	ldr	r2, [pc, #116]	; (800841c <vTaskStartScheduler+0xb0>)
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	4b1c      	ldr	r3, [pc, #112]	; (800841c <vTaskStartScheduler+0xb0>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d002      	beq.n	80083b6 <vTaskStartScheduler+0x4a>
 80083b0:	2301      	movs	r3, #1
 80083b2:	617b      	str	r3, [r7, #20]
 80083b4:	e001      	b.n	80083ba <vTaskStartScheduler+0x4e>
 80083b6:	2300      	movs	r3, #0
 80083b8:	617b      	str	r3, [r7, #20]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d116      	bne.n	80083ee <vTaskStartScheduler+0x82>
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	613b      	str	r3, [r7, #16]
 80083d2:	bf00      	nop
 80083d4:	4b12      	ldr	r3, [pc, #72]	; (8008420 <vTaskStartScheduler+0xb4>)
 80083d6:	f04f 32ff 	mov.w	r2, #4294967295
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	4b11      	ldr	r3, [pc, #68]	; (8008424 <vTaskStartScheduler+0xb8>)
 80083de:	2201      	movs	r2, #1
 80083e0:	601a      	str	r2, [r3, #0]
 80083e2:	4b11      	ldr	r3, [pc, #68]	; (8008428 <vTaskStartScheduler+0xbc>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	f000 fba2 	bl	8008b30 <xPortStartScheduler>
 80083ec:	e00e      	b.n	800840c <vTaskStartScheduler+0xa0>
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f4:	d10a      	bne.n	800840c <vTaskStartScheduler+0xa0>
 80083f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	bf00      	nop
 800840a:	e7fe      	b.n	800840a <vTaskStartScheduler+0x9e>
 800840c:	bf00      	nop
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	08009e2c 	.word	0x08009e2c
 8008418:	080087a9 	.word	0x080087a9
 800841c:	200008a0 	.word	0x200008a0
 8008420:	2000089c 	.word	0x2000089c
 8008424:	20000888 	.word	0x20000888
 8008428:	20000880 	.word	0x20000880

0800842c <vTaskSuspendAll>:
 800842c:	b480      	push	{r7}
 800842e:	af00      	add	r7, sp, #0
 8008430:	4b04      	ldr	r3, [pc, #16]	; (8008444 <vTaskSuspendAll+0x18>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3301      	adds	r3, #1
 8008436:	4a03      	ldr	r2, [pc, #12]	; (8008444 <vTaskSuspendAll+0x18>)
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	bf00      	nop
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	200008a4 	.word	0x200008a4

08008448 <xTaskResumeAll>:
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	2300      	movs	r3, #0
 8008450:	60fb      	str	r3, [r7, #12]
 8008452:	2300      	movs	r3, #0
 8008454:	60bb      	str	r3, [r7, #8]
 8008456:	4b41      	ldr	r3, [pc, #260]	; (800855c <xTaskResumeAll+0x114>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10a      	bne.n	8008474 <xTaskResumeAll+0x2c>
 800845e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	603b      	str	r3, [r7, #0]
 8008470:	bf00      	nop
 8008472:	e7fe      	b.n	8008472 <xTaskResumeAll+0x2a>
 8008474:	f000 fbfe 	bl	8008c74 <vPortEnterCritical>
 8008478:	4b38      	ldr	r3, [pc, #224]	; (800855c <xTaskResumeAll+0x114>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3b01      	subs	r3, #1
 800847e:	4a37      	ldr	r2, [pc, #220]	; (800855c <xTaskResumeAll+0x114>)
 8008480:	6013      	str	r3, [r2, #0]
 8008482:	4b36      	ldr	r3, [pc, #216]	; (800855c <xTaskResumeAll+0x114>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d161      	bne.n	800854e <xTaskResumeAll+0x106>
 800848a:	4b35      	ldr	r3, [pc, #212]	; (8008560 <xTaskResumeAll+0x118>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d05d      	beq.n	800854e <xTaskResumeAll+0x106>
 8008492:	e02e      	b.n	80084f2 <xTaskResumeAll+0xaa>
 8008494:	4b33      	ldr	r3, [pc, #204]	; (8008564 <xTaskResumeAll+0x11c>)
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	3318      	adds	r3, #24
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7ff fd72 	bl	8007f8a <uxListRemove>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3304      	adds	r3, #4
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7ff fd6d 	bl	8007f8a <uxListRemove>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	2201      	movs	r2, #1
 80084b6:	409a      	lsls	r2, r3
 80084b8:	4b2b      	ldr	r3, [pc, #172]	; (8008568 <xTaskResumeAll+0x120>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4313      	orrs	r3, r2
 80084be:	4a2a      	ldr	r2, [pc, #168]	; (8008568 <xTaskResumeAll+0x120>)
 80084c0:	6013      	str	r3, [r2, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c6:	4613      	mov	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4a27      	ldr	r2, [pc, #156]	; (800856c <xTaskResumeAll+0x124>)
 80084d0:	441a      	add	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	3304      	adds	r3, #4
 80084d6:	4619      	mov	r1, r3
 80084d8:	4610      	mov	r0, r2
 80084da:	f7ff fcf9 	bl	8007ed0 <vListInsertEnd>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e2:	4b23      	ldr	r3, [pc, #140]	; (8008570 <xTaskResumeAll+0x128>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d302      	bcc.n	80084f2 <xTaskResumeAll+0xaa>
 80084ec:	4b21      	ldr	r3, [pc, #132]	; (8008574 <xTaskResumeAll+0x12c>)
 80084ee:	2201      	movs	r2, #1
 80084f0:	601a      	str	r2, [r3, #0]
 80084f2:	4b1c      	ldr	r3, [pc, #112]	; (8008564 <xTaskResumeAll+0x11c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1cc      	bne.n	8008494 <xTaskResumeAll+0x4c>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <xTaskResumeAll+0xbc>
 8008500:	f000 fa08 	bl	8008914 <prvResetNextTaskUnblockTime>
 8008504:	4b1c      	ldr	r3, [pc, #112]	; (8008578 <xTaskResumeAll+0x130>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	607b      	str	r3, [r7, #4]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d010      	beq.n	8008532 <xTaskResumeAll+0xea>
 8008510:	f000 f836 	bl	8008580 <xTaskIncrementTick>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d002      	beq.n	8008520 <xTaskResumeAll+0xd8>
 800851a:	4b16      	ldr	r3, [pc, #88]	; (8008574 <xTaskResumeAll+0x12c>)
 800851c:	2201      	movs	r2, #1
 800851e:	601a      	str	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3b01      	subs	r3, #1
 8008524:	607b      	str	r3, [r7, #4]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1f1      	bne.n	8008510 <xTaskResumeAll+0xc8>
 800852c:	4b12      	ldr	r3, [pc, #72]	; (8008578 <xTaskResumeAll+0x130>)
 800852e:	2200      	movs	r2, #0
 8008530:	601a      	str	r2, [r3, #0]
 8008532:	4b10      	ldr	r3, [pc, #64]	; (8008574 <xTaskResumeAll+0x12c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d009      	beq.n	800854e <xTaskResumeAll+0x106>
 800853a:	2301      	movs	r3, #1
 800853c:	60bb      	str	r3, [r7, #8]
 800853e:	4b0f      	ldr	r3, [pc, #60]	; (800857c <xTaskResumeAll+0x134>)
 8008540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008544:	601a      	str	r2, [r3, #0]
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	f3bf 8f6f 	isb	sy
 800854e:	f000 fbc1 	bl	8008cd4 <vPortExitCritical>
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	200008a4 	.word	0x200008a4
 8008560:	2000087c 	.word	0x2000087c
 8008564:	2000083c 	.word	0x2000083c
 8008568:	20000884 	.word	0x20000884
 800856c:	20000780 	.word	0x20000780
 8008570:	2000077c 	.word	0x2000077c
 8008574:	20000890 	.word	0x20000890
 8008578:	2000088c 	.word	0x2000088c
 800857c:	e000ed04 	.word	0xe000ed04

08008580 <xTaskIncrementTick>:
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
 8008586:	2300      	movs	r3, #0
 8008588:	617b      	str	r3, [r7, #20]
 800858a:	4b4e      	ldr	r3, [pc, #312]	; (80086c4 <xTaskIncrementTick+0x144>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	f040 808e 	bne.w	80086b0 <xTaskIncrementTick+0x130>
 8008594:	4b4c      	ldr	r3, [pc, #304]	; (80086c8 <xTaskIncrementTick+0x148>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3301      	adds	r3, #1
 800859a:	613b      	str	r3, [r7, #16]
 800859c:	4a4a      	ldr	r2, [pc, #296]	; (80086c8 <xTaskIncrementTick+0x148>)
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	6013      	str	r3, [r2, #0]
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d120      	bne.n	80085ea <xTaskIncrementTick+0x6a>
 80085a8:	4b48      	ldr	r3, [pc, #288]	; (80086cc <xTaskIncrementTick+0x14c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00a      	beq.n	80085c8 <xTaskIncrementTick+0x48>
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	603b      	str	r3, [r7, #0]
 80085c4:	bf00      	nop
 80085c6:	e7fe      	b.n	80085c6 <xTaskIncrementTick+0x46>
 80085c8:	4b40      	ldr	r3, [pc, #256]	; (80086cc <xTaskIncrementTick+0x14c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	60fb      	str	r3, [r7, #12]
 80085ce:	4b40      	ldr	r3, [pc, #256]	; (80086d0 <xTaskIncrementTick+0x150>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a3e      	ldr	r2, [pc, #248]	; (80086cc <xTaskIncrementTick+0x14c>)
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	4a3e      	ldr	r2, [pc, #248]	; (80086d0 <xTaskIncrementTick+0x150>)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	4b3d      	ldr	r3, [pc, #244]	; (80086d4 <xTaskIncrementTick+0x154>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3301      	adds	r3, #1
 80085e2:	4a3c      	ldr	r2, [pc, #240]	; (80086d4 <xTaskIncrementTick+0x154>)
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	f000 f995 	bl	8008914 <prvResetNextTaskUnblockTime>
 80085ea:	4b3b      	ldr	r3, [pc, #236]	; (80086d8 <xTaskIncrementTick+0x158>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d348      	bcc.n	8008686 <xTaskIncrementTick+0x106>
 80085f4:	4b35      	ldr	r3, [pc, #212]	; (80086cc <xTaskIncrementTick+0x14c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d104      	bne.n	8008608 <xTaskIncrementTick+0x88>
 80085fe:	4b36      	ldr	r3, [pc, #216]	; (80086d8 <xTaskIncrementTick+0x158>)
 8008600:	f04f 32ff 	mov.w	r2, #4294967295
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	e03e      	b.n	8008686 <xTaskIncrementTick+0x106>
 8008608:	4b30      	ldr	r3, [pc, #192]	; (80086cc <xTaskIncrementTick+0x14c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	60bb      	str	r3, [r7, #8]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	607b      	str	r3, [r7, #4]
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	429a      	cmp	r2, r3
 800861e:	d203      	bcs.n	8008628 <xTaskIncrementTick+0xa8>
 8008620:	4a2d      	ldr	r2, [pc, #180]	; (80086d8 <xTaskIncrementTick+0x158>)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	e02e      	b.n	8008686 <xTaskIncrementTick+0x106>
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	3304      	adds	r3, #4
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff fcac 	bl	8007f8a <uxListRemove>
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008636:	2b00      	cmp	r3, #0
 8008638:	d004      	beq.n	8008644 <xTaskIncrementTick+0xc4>
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	3318      	adds	r3, #24
 800863e:	4618      	mov	r0, r3
 8008640:	f7ff fca3 	bl	8007f8a <uxListRemove>
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008648:	2201      	movs	r2, #1
 800864a:	409a      	lsls	r2, r3
 800864c:	4b23      	ldr	r3, [pc, #140]	; (80086dc <xTaskIncrementTick+0x15c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4313      	orrs	r3, r2
 8008652:	4a22      	ldr	r2, [pc, #136]	; (80086dc <xTaskIncrementTick+0x15c>)
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800865a:	4613      	mov	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4a1f      	ldr	r2, [pc, #124]	; (80086e0 <xTaskIncrementTick+0x160>)
 8008664:	441a      	add	r2, r3
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	3304      	adds	r3, #4
 800866a:	4619      	mov	r1, r3
 800866c:	4610      	mov	r0, r2
 800866e:	f7ff fc2f 	bl	8007ed0 <vListInsertEnd>
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008676:	4b1b      	ldr	r3, [pc, #108]	; (80086e4 <xTaskIncrementTick+0x164>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867c:	429a      	cmp	r2, r3
 800867e:	d3b9      	bcc.n	80085f4 <xTaskIncrementTick+0x74>
 8008680:	2301      	movs	r3, #1
 8008682:	617b      	str	r3, [r7, #20]
 8008684:	e7b6      	b.n	80085f4 <xTaskIncrementTick+0x74>
 8008686:	4b17      	ldr	r3, [pc, #92]	; (80086e4 <xTaskIncrementTick+0x164>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868c:	4914      	ldr	r1, [pc, #80]	; (80086e0 <xTaskIncrementTick+0x160>)
 800868e:	4613      	mov	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	440b      	add	r3, r1
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d901      	bls.n	80086a2 <xTaskIncrementTick+0x122>
 800869e:	2301      	movs	r3, #1
 80086a0:	617b      	str	r3, [r7, #20]
 80086a2:	4b11      	ldr	r3, [pc, #68]	; (80086e8 <xTaskIncrementTick+0x168>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d007      	beq.n	80086ba <xTaskIncrementTick+0x13a>
 80086aa:	2301      	movs	r3, #1
 80086ac:	617b      	str	r3, [r7, #20]
 80086ae:	e004      	b.n	80086ba <xTaskIncrementTick+0x13a>
 80086b0:	4b0e      	ldr	r3, [pc, #56]	; (80086ec <xTaskIncrementTick+0x16c>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3301      	adds	r3, #1
 80086b6:	4a0d      	ldr	r2, [pc, #52]	; (80086ec <xTaskIncrementTick+0x16c>)
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	4618      	mov	r0, r3
 80086be:	3718      	adds	r7, #24
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	200008a4 	.word	0x200008a4
 80086c8:	20000880 	.word	0x20000880
 80086cc:	20000834 	.word	0x20000834
 80086d0:	20000838 	.word	0x20000838
 80086d4:	20000894 	.word	0x20000894
 80086d8:	2000089c 	.word	0x2000089c
 80086dc:	20000884 	.word	0x20000884
 80086e0:	20000780 	.word	0x20000780
 80086e4:	2000077c 	.word	0x2000077c
 80086e8:	20000890 	.word	0x20000890
 80086ec:	2000088c 	.word	0x2000088c

080086f0 <vTaskSwitchContext>:
 80086f0:	b480      	push	{r7}
 80086f2:	b087      	sub	sp, #28
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	4b27      	ldr	r3, [pc, #156]	; (8008794 <vTaskSwitchContext+0xa4>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <vTaskSwitchContext+0x16>
 80086fe:	4b26      	ldr	r3, [pc, #152]	; (8008798 <vTaskSwitchContext+0xa8>)
 8008700:	2201      	movs	r2, #1
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	e03f      	b.n	8008786 <vTaskSwitchContext+0x96>
 8008706:	4b24      	ldr	r3, [pc, #144]	; (8008798 <vTaskSwitchContext+0xa8>)
 8008708:	2200      	movs	r2, #0
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	4b23      	ldr	r3, [pc, #140]	; (800879c <vTaskSwitchContext+0xac>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	60fb      	str	r3, [r7, #12]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	fab3 f383 	clz	r3, r3
 8008718:	72fb      	strb	r3, [r7, #11]
 800871a:	7afb      	ldrb	r3, [r7, #11]
 800871c:	f1c3 031f 	rsb	r3, r3, #31
 8008720:	617b      	str	r3, [r7, #20]
 8008722:	491f      	ldr	r1, [pc, #124]	; (80087a0 <vTaskSwitchContext+0xb0>)
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	4613      	mov	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	440b      	add	r3, r1
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10a      	bne.n	800874c <vTaskSwitchContext+0x5c>
 8008736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	607b      	str	r3, [r7, #4]
 8008748:	bf00      	nop
 800874a:	e7fe      	b.n	800874a <vTaskSwitchContext+0x5a>
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	4613      	mov	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4413      	add	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4a12      	ldr	r2, [pc, #72]	; (80087a0 <vTaskSwitchContext+0xb0>)
 8008758:	4413      	add	r3, r2
 800875a:	613b      	str	r3, [r7, #16]
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	605a      	str	r2, [r3, #4]
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	3308      	adds	r3, #8
 800876e:	429a      	cmp	r2, r3
 8008770:	d104      	bne.n	800877c <vTaskSwitchContext+0x8c>
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	605a      	str	r2, [r3, #4]
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	4a08      	ldr	r2, [pc, #32]	; (80087a4 <vTaskSwitchContext+0xb4>)
 8008784:	6013      	str	r3, [r2, #0]
 8008786:	bf00      	nop
 8008788:	371c      	adds	r7, #28
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	200008a4 	.word	0x200008a4
 8008798:	20000890 	.word	0x20000890
 800879c:	20000884 	.word	0x20000884
 80087a0:	20000780 	.word	0x20000780
 80087a4:	2000077c 	.word	0x2000077c

080087a8 <prvIdleTask>:
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	f000 f852 	bl	8008858 <prvCheckTasksWaitingTermination>
 80087b4:	4b06      	ldr	r3, [pc, #24]	; (80087d0 <prvIdleTask+0x28>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d9f9      	bls.n	80087b0 <prvIdleTask+0x8>
 80087bc:	4b05      	ldr	r3, [pc, #20]	; (80087d4 <prvIdleTask+0x2c>)
 80087be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	e7f0      	b.n	80087b0 <prvIdleTask+0x8>
 80087ce:	bf00      	nop
 80087d0:	20000780 	.word	0x20000780
 80087d4:	e000ed04 	.word	0xe000ed04

080087d8 <prvInitialiseTaskLists>:
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	2300      	movs	r3, #0
 80087e0:	607b      	str	r3, [r7, #4]
 80087e2:	e00c      	b.n	80087fe <prvInitialiseTaskLists+0x26>
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	4613      	mov	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4413      	add	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4a12      	ldr	r2, [pc, #72]	; (8008838 <prvInitialiseTaskLists+0x60>)
 80087f0:	4413      	add	r3, r2
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7ff fb3f 	bl	8007e76 <vListInitialise>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	3301      	adds	r3, #1
 80087fc:	607b      	str	r3, [r7, #4]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b06      	cmp	r3, #6
 8008802:	d9ef      	bls.n	80087e4 <prvInitialiseTaskLists+0xc>
 8008804:	480d      	ldr	r0, [pc, #52]	; (800883c <prvInitialiseTaskLists+0x64>)
 8008806:	f7ff fb36 	bl	8007e76 <vListInitialise>
 800880a:	480d      	ldr	r0, [pc, #52]	; (8008840 <prvInitialiseTaskLists+0x68>)
 800880c:	f7ff fb33 	bl	8007e76 <vListInitialise>
 8008810:	480c      	ldr	r0, [pc, #48]	; (8008844 <prvInitialiseTaskLists+0x6c>)
 8008812:	f7ff fb30 	bl	8007e76 <vListInitialise>
 8008816:	480c      	ldr	r0, [pc, #48]	; (8008848 <prvInitialiseTaskLists+0x70>)
 8008818:	f7ff fb2d 	bl	8007e76 <vListInitialise>
 800881c:	480b      	ldr	r0, [pc, #44]	; (800884c <prvInitialiseTaskLists+0x74>)
 800881e:	f7ff fb2a 	bl	8007e76 <vListInitialise>
 8008822:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <prvInitialiseTaskLists+0x78>)
 8008824:	4a05      	ldr	r2, [pc, #20]	; (800883c <prvInitialiseTaskLists+0x64>)
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	4b0a      	ldr	r3, [pc, #40]	; (8008854 <prvInitialiseTaskLists+0x7c>)
 800882a:	4a05      	ldr	r2, [pc, #20]	; (8008840 <prvInitialiseTaskLists+0x68>)
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	bf00      	nop
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	20000780 	.word	0x20000780
 800883c:	2000080c 	.word	0x2000080c
 8008840:	20000820 	.word	0x20000820
 8008844:	2000083c 	.word	0x2000083c
 8008848:	20000850 	.word	0x20000850
 800884c:	20000868 	.word	0x20000868
 8008850:	20000834 	.word	0x20000834
 8008854:	20000838 	.word	0x20000838

08008858 <prvCheckTasksWaitingTermination>:
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	e019      	b.n	8008894 <prvCheckTasksWaitingTermination+0x3c>
 8008860:	f000 fa08 	bl	8008c74 <vPortEnterCritical>
 8008864:	4b10      	ldr	r3, [pc, #64]	; (80088a8 <prvCheckTasksWaitingTermination+0x50>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	607b      	str	r3, [r7, #4]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	3304      	adds	r3, #4
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff fb8a 	bl	8007f8a <uxListRemove>
 8008876:	4b0d      	ldr	r3, [pc, #52]	; (80088ac <prvCheckTasksWaitingTermination+0x54>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3b01      	subs	r3, #1
 800887c:	4a0b      	ldr	r2, [pc, #44]	; (80088ac <prvCheckTasksWaitingTermination+0x54>)
 800887e:	6013      	str	r3, [r2, #0]
 8008880:	4b0b      	ldr	r3, [pc, #44]	; (80088b0 <prvCheckTasksWaitingTermination+0x58>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	3b01      	subs	r3, #1
 8008886:	4a0a      	ldr	r2, [pc, #40]	; (80088b0 <prvCheckTasksWaitingTermination+0x58>)
 8008888:	6013      	str	r3, [r2, #0]
 800888a:	f000 fa23 	bl	8008cd4 <vPortExitCritical>
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f810 	bl	80088b4 <prvDeleteTCB>
 8008894:	4b06      	ldr	r3, [pc, #24]	; (80088b0 <prvCheckTasksWaitingTermination+0x58>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e1      	bne.n	8008860 <prvCheckTasksWaitingTermination+0x8>
 800889c:	bf00      	nop
 800889e:	bf00      	nop
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	20000850 	.word	0x20000850
 80088ac:	2000087c 	.word	0x2000087c
 80088b0:	20000864 	.word	0x20000864

080088b4 <prvDeleteTCB>:
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d108      	bne.n	80088d8 <prvDeleteTCB+0x24>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 fb80 	bl	8008fd0 <vPortFree>
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fb7d 	bl	8008fd0 <vPortFree>
 80088d6:	e018      	b.n	800890a <prvDeleteTCB+0x56>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d103      	bne.n	80088ea <prvDeleteTCB+0x36>
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fb74 	bl	8008fd0 <vPortFree>
 80088e8:	e00f      	b.n	800890a <prvDeleteTCB+0x56>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d00a      	beq.n	800890a <prvDeleteTCB+0x56>
 80088f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	bf00      	nop
 8008908:	e7fe      	b.n	8008908 <prvDeleteTCB+0x54>
 800890a:	bf00      	nop
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
	...

08008914 <prvResetNextTaskUnblockTime>:
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	4b0c      	ldr	r3, [pc, #48]	; (800894c <prvResetNextTaskUnblockTime+0x38>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d104      	bne.n	800892e <prvResetNextTaskUnblockTime+0x1a>
 8008924:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <prvResetNextTaskUnblockTime+0x3c>)
 8008926:	f04f 32ff 	mov.w	r2, #4294967295
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	e008      	b.n	8008940 <prvResetNextTaskUnblockTime+0x2c>
 800892e:	4b07      	ldr	r3, [pc, #28]	; (800894c <prvResetNextTaskUnblockTime+0x38>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	607b      	str	r3, [r7, #4]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	4a04      	ldr	r2, [pc, #16]	; (8008950 <prvResetNextTaskUnblockTime+0x3c>)
 800893e:	6013      	str	r3, [r2, #0]
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	20000834 	.word	0x20000834
 8008950:	2000089c 	.word	0x2000089c

08008954 <prvAddCurrentTaskToDelayedList>:
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
 800895e:	4b29      	ldr	r3, [pc, #164]	; (8008a04 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	4b28      	ldr	r3, [pc, #160]	; (8008a08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	3304      	adds	r3, #4
 800896a:	4618      	mov	r0, r3
 800896c:	f7ff fb0d 	bl	8007f8a <uxListRemove>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10b      	bne.n	800898e <prvAddCurrentTaskToDelayedList+0x3a>
 8008976:	4b24      	ldr	r3, [pc, #144]	; (8008a08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897c:	2201      	movs	r2, #1
 800897e:	fa02 f303 	lsl.w	r3, r2, r3
 8008982:	43da      	mvns	r2, r3
 8008984:	4b21      	ldr	r3, [pc, #132]	; (8008a0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4013      	ands	r3, r2
 800898a:	4a20      	ldr	r2, [pc, #128]	; (8008a0c <prvAddCurrentTaskToDelayedList+0xb8>)
 800898c:	6013      	str	r3, [r2, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008994:	d10a      	bne.n	80089ac <prvAddCurrentTaskToDelayedList+0x58>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d007      	beq.n	80089ac <prvAddCurrentTaskToDelayedList+0x58>
 800899c:	4b1a      	ldr	r3, [pc, #104]	; (8008a08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3304      	adds	r3, #4
 80089a2:	4619      	mov	r1, r3
 80089a4:	481a      	ldr	r0, [pc, #104]	; (8008a10 <prvAddCurrentTaskToDelayedList+0xbc>)
 80089a6:	f7ff fa93 	bl	8007ed0 <vListInsertEnd>
 80089aa:	e026      	b.n	80089fa <prvAddCurrentTaskToDelayedList+0xa6>
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4413      	add	r3, r2
 80089b2:	60bb      	str	r3, [r7, #8]
 80089b4:	4b14      	ldr	r3, [pc, #80]	; (8008a08 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	605a      	str	r2, [r3, #4]
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d209      	bcs.n	80089d8 <prvAddCurrentTaskToDelayedList+0x84>
 80089c4:	4b13      	ldr	r3, [pc, #76]	; (8008a14 <prvAddCurrentTaskToDelayedList+0xc0>)
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	4b0f      	ldr	r3, [pc, #60]	; (8008a08 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3304      	adds	r3, #4
 80089ce:	4619      	mov	r1, r3
 80089d0:	4610      	mov	r0, r2
 80089d2:	f7ff faa1 	bl	8007f18 <vListInsert>
 80089d6:	e010      	b.n	80089fa <prvAddCurrentTaskToDelayedList+0xa6>
 80089d8:	4b0f      	ldr	r3, [pc, #60]	; (8008a18 <prvAddCurrentTaskToDelayedList+0xc4>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	4b0a      	ldr	r3, [pc, #40]	; (8008a08 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3304      	adds	r3, #4
 80089e2:	4619      	mov	r1, r3
 80089e4:	4610      	mov	r0, r2
 80089e6:	f7ff fa97 	bl	8007f18 <vListInsert>
 80089ea:	4b0c      	ldr	r3, [pc, #48]	; (8008a1c <prvAddCurrentTaskToDelayedList+0xc8>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d202      	bcs.n	80089fa <prvAddCurrentTaskToDelayedList+0xa6>
 80089f4:	4a09      	ldr	r2, [pc, #36]	; (8008a1c <prvAddCurrentTaskToDelayedList+0xc8>)
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	bf00      	nop
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20000880 	.word	0x20000880
 8008a08:	2000077c 	.word	0x2000077c
 8008a0c:	20000884 	.word	0x20000884
 8008a10:	20000868 	.word	0x20000868
 8008a14:	20000838 	.word	0x20000838
 8008a18:	20000834 	.word	0x20000834
 8008a1c:	2000089c 	.word	0x2000089c

08008a20 <pxPortInitialiseStack>:
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	3b04      	subs	r3, #4
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a38:	601a      	str	r2, [r3, #0]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3b04      	subs	r3, #4
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f023 0201 	bic.w	r2, r3, #1
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	3b04      	subs	r3, #4
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	4a0c      	ldr	r2, [pc, #48]	; (8008a84 <pxPortInitialiseStack+0x64>)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	601a      	str	r2, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	3b14      	subs	r3, #20
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	601a      	str	r2, [r3, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3b04      	subs	r3, #4
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f06f 0202 	mvn.w	r2, #2
 8008a6e:	601a      	str	r2, [r3, #0]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3b20      	subs	r3, #32
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	08008a89 	.word	0x08008a89

08008a88 <prvTaskExitError>:
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	2300      	movs	r3, #0
 8008a90:	607b      	str	r3, [r7, #4]
 8008a92:	4b12      	ldr	r3, [pc, #72]	; (8008adc <prvTaskExitError+0x54>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9a:	d00a      	beq.n	8008ab2 <prvTaskExitError+0x2a>
 8008a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa0:	f383 8811 	msr	BASEPRI, r3
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	60fb      	str	r3, [r7, #12]
 8008aae:	bf00      	nop
 8008ab0:	e7fe      	b.n	8008ab0 <prvTaskExitError+0x28>
 8008ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	60bb      	str	r3, [r7, #8]
 8008ac4:	bf00      	nop
 8008ac6:	bf00      	nop
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d0fc      	beq.n	8008ac8 <prvTaskExitError+0x40>
 8008ace:	bf00      	nop
 8008ad0:	bf00      	nop
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	2000009c 	.word	0x2000009c

08008ae0 <SVC_Handler>:
 8008ae0:	4b07      	ldr	r3, [pc, #28]	; (8008b00 <pxCurrentTCBConst2>)
 8008ae2:	6819      	ldr	r1, [r3, #0]
 8008ae4:	6808      	ldr	r0, [r1, #0]
 8008ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aea:	f380 8809 	msr	PSP, r0
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f04f 0000 	mov.w	r0, #0
 8008af6:	f380 8811 	msr	BASEPRI, r0
 8008afa:	4770      	bx	lr
 8008afc:	f3af 8000 	nop.w

08008b00 <pxCurrentTCBConst2>:
 8008b00:	2000077c 	.word	0x2000077c
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop

08008b08 <prvPortStartFirstTask>:
 8008b08:	4808      	ldr	r0, [pc, #32]	; (8008b2c <prvPortStartFirstTask+0x24>)
 8008b0a:	6800      	ldr	r0, [r0, #0]
 8008b0c:	6800      	ldr	r0, [r0, #0]
 8008b0e:	f380 8808 	msr	MSP, r0
 8008b12:	f04f 0000 	mov.w	r0, #0
 8008b16:	f380 8814 	msr	CONTROL, r0
 8008b1a:	b662      	cpsie	i
 8008b1c:	b661      	cpsie	f
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	df00      	svc	0
 8008b28:	bf00      	nop
 8008b2a:	bf00      	nop
 8008b2c:	e000ed08 	.word	0xe000ed08

08008b30 <xPortStartScheduler>:
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4b46      	ldr	r3, [pc, #280]	; (8008c50 <xPortStartScheduler+0x120>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a46      	ldr	r2, [pc, #280]	; (8008c54 <xPortStartScheduler+0x124>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d10a      	bne.n	8008b56 <xPortStartScheduler+0x26>
 8008b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b44:	f383 8811 	msr	BASEPRI, r3
 8008b48:	f3bf 8f6f 	isb	sy
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	613b      	str	r3, [r7, #16]
 8008b52:	bf00      	nop
 8008b54:	e7fe      	b.n	8008b54 <xPortStartScheduler+0x24>
 8008b56:	4b3e      	ldr	r3, [pc, #248]	; (8008c50 <xPortStartScheduler+0x120>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a3f      	ldr	r2, [pc, #252]	; (8008c58 <xPortStartScheduler+0x128>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d10a      	bne.n	8008b76 <xPortStartScheduler+0x46>
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	60fb      	str	r3, [r7, #12]
 8008b72:	bf00      	nop
 8008b74:	e7fe      	b.n	8008b74 <xPortStartScheduler+0x44>
 8008b76:	4b39      	ldr	r3, [pc, #228]	; (8008c5c <xPortStartScheduler+0x12c>)
 8008b78:	617b      	str	r3, [r7, #20]
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	607b      	str	r3, [r7, #4]
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	22ff      	movs	r2, #255	; 0xff
 8008b86:	701a      	strb	r2, [r3, #0]
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	70fb      	strb	r3, [r7, #3]
 8008b90:	78fb      	ldrb	r3, [r7, #3]
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	4b31      	ldr	r3, [pc, #196]	; (8008c60 <xPortStartScheduler+0x130>)
 8008b9c:	701a      	strb	r2, [r3, #0]
 8008b9e:	4b31      	ldr	r3, [pc, #196]	; (8008c64 <xPortStartScheduler+0x134>)
 8008ba0:	2207      	movs	r2, #7
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	e009      	b.n	8008bba <xPortStartScheduler+0x8a>
 8008ba6:	4b2f      	ldr	r3, [pc, #188]	; (8008c64 <xPortStartScheduler+0x134>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	4a2d      	ldr	r2, [pc, #180]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	78fb      	ldrb	r3, [r7, #3]
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	70fb      	strb	r3, [r7, #3]
 8008bba:	78fb      	ldrb	r3, [r7, #3]
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc2:	2b80      	cmp	r3, #128	; 0x80
 8008bc4:	d0ef      	beq.n	8008ba6 <xPortStartScheduler+0x76>
 8008bc6:	4b27      	ldr	r3, [pc, #156]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f1c3 0307 	rsb	r3, r3, #7
 8008bce:	2b04      	cmp	r3, #4
 8008bd0:	d00a      	beq.n	8008be8 <xPortStartScheduler+0xb8>
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	60bb      	str	r3, [r7, #8]
 8008be4:	bf00      	nop
 8008be6:	e7fe      	b.n	8008be6 <xPortStartScheduler+0xb6>
 8008be8:	4b1e      	ldr	r3, [pc, #120]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	021b      	lsls	r3, r3, #8
 8008bee:	4a1d      	ldr	r2, [pc, #116]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	4b1c      	ldr	r3, [pc, #112]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bfa:	4a1a      	ldr	r2, [pc, #104]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bfc:	6013      	str	r3, [r2, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	701a      	strb	r2, [r3, #0]
 8008c06:	4b18      	ldr	r3, [pc, #96]	; (8008c68 <xPortStartScheduler+0x138>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a17      	ldr	r2, [pc, #92]	; (8008c68 <xPortStartScheduler+0x138>)
 8008c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c10:	6013      	str	r3, [r2, #0]
 8008c12:	4b15      	ldr	r3, [pc, #84]	; (8008c68 <xPortStartScheduler+0x138>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a14      	ldr	r2, [pc, #80]	; (8008c68 <xPortStartScheduler+0x138>)
 8008c18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	f000 f8dd 	bl	8008ddc <vPortSetupTimerInterrupt>
 8008c22:	4b12      	ldr	r3, [pc, #72]	; (8008c6c <xPortStartScheduler+0x13c>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	f000 f8fc 	bl	8008e24 <vPortEnableVFP>
 8008c2c:	4b10      	ldr	r3, [pc, #64]	; (8008c70 <xPortStartScheduler+0x140>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a0f      	ldr	r2, [pc, #60]	; (8008c70 <xPortStartScheduler+0x140>)
 8008c32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008c36:	6013      	str	r3, [r2, #0]
 8008c38:	f7ff ff66 	bl	8008b08 <prvPortStartFirstTask>
 8008c3c:	f7ff fd58 	bl	80086f0 <vTaskSwitchContext>
 8008c40:	f7ff ff22 	bl	8008a88 <prvTaskExitError>
 8008c44:	2300      	movs	r3, #0
 8008c46:	4618      	mov	r0, r3
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	e000ed00 	.word	0xe000ed00
 8008c54:	410fc271 	.word	0x410fc271
 8008c58:	410fc270 	.word	0x410fc270
 8008c5c:	e000e400 	.word	0xe000e400
 8008c60:	200008a8 	.word	0x200008a8
 8008c64:	200008ac 	.word	0x200008ac
 8008c68:	e000ed20 	.word	0xe000ed20
 8008c6c:	2000009c 	.word	0x2000009c
 8008c70:	e000ef34 	.word	0xe000ef34

08008c74 <vPortEnterCritical>:
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	607b      	str	r3, [r7, #4]
 8008c8c:	bf00      	nop
 8008c8e:	4b0f      	ldr	r3, [pc, #60]	; (8008ccc <vPortEnterCritical+0x58>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3301      	adds	r3, #1
 8008c94:	4a0d      	ldr	r2, [pc, #52]	; (8008ccc <vPortEnterCritical+0x58>)
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	4b0c      	ldr	r3, [pc, #48]	; (8008ccc <vPortEnterCritical+0x58>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d10f      	bne.n	8008cc0 <vPortEnterCritical+0x4c>
 8008ca0:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <vPortEnterCritical+0x5c>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00a      	beq.n	8008cc0 <vPortEnterCritical+0x4c>
 8008caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	603b      	str	r3, [r7, #0]
 8008cbc:	bf00      	nop
 8008cbe:	e7fe      	b.n	8008cbe <vPortEnterCritical+0x4a>
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	2000009c 	.word	0x2000009c
 8008cd0:	e000ed04 	.word	0xe000ed04

08008cd4 <vPortExitCritical>:
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	4b12      	ldr	r3, [pc, #72]	; (8008d24 <vPortExitCritical+0x50>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10a      	bne.n	8008cf8 <vPortExitCritical+0x24>
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	607b      	str	r3, [r7, #4]
 8008cf4:	bf00      	nop
 8008cf6:	e7fe      	b.n	8008cf6 <vPortExitCritical+0x22>
 8008cf8:	4b0a      	ldr	r3, [pc, #40]	; (8008d24 <vPortExitCritical+0x50>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	4a09      	ldr	r2, [pc, #36]	; (8008d24 <vPortExitCritical+0x50>)
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	4b08      	ldr	r3, [pc, #32]	; (8008d24 <vPortExitCritical+0x50>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d105      	bne.n	8008d16 <vPortExitCritical+0x42>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	603b      	str	r3, [r7, #0]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	bf00      	nop
 8008d16:	bf00      	nop
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	2000009c 	.word	0x2000009c
	...

08008d30 <PendSV_Handler>:
 8008d30:	f3ef 8009 	mrs	r0, PSP
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	4b15      	ldr	r3, [pc, #84]	; (8008d90 <pxCurrentTCBConst>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	f01e 0f10 	tst.w	lr, #16
 8008d40:	bf08      	it	eq
 8008d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4a:	6010      	str	r0, [r2, #0]
 8008d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d54:	f380 8811 	msr	BASEPRI, r0
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f7ff fcc6 	bl	80086f0 <vTaskSwitchContext>
 8008d64:	f04f 0000 	mov.w	r0, #0
 8008d68:	f380 8811 	msr	BASEPRI, r0
 8008d6c:	bc09      	pop	{r0, r3}
 8008d6e:	6819      	ldr	r1, [r3, #0]
 8008d70:	6808      	ldr	r0, [r1, #0]
 8008d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d76:	f01e 0f10 	tst.w	lr, #16
 8008d7a:	bf08      	it	eq
 8008d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d80:	f380 8809 	msr	PSP, r0
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	f3af 8000 	nop.w

08008d90 <pxCurrentTCBConst>:
 8008d90:	2000077c 	.word	0x2000077c
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop

08008d98 <SysTick_Handler>:
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	607b      	str	r3, [r7, #4]
 8008db0:	bf00      	nop
 8008db2:	f7ff fbe5 	bl	8008580 <xTaskIncrementTick>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d003      	beq.n	8008dc4 <SysTick_Handler+0x2c>
 8008dbc:	4b06      	ldr	r3, [pc, #24]	; (8008dd8 <SysTick_Handler+0x40>)
 8008dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	603b      	str	r3, [r7, #0]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	bf00      	nop
 8008dd0:	bf00      	nop
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	e000ed04 	.word	0xe000ed04

08008ddc <vPortSetupTimerInterrupt>:
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <vPortSetupTimerInterrupt+0x34>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	601a      	str	r2, [r3, #0]
 8008de6:	4b0b      	ldr	r3, [pc, #44]	; (8008e14 <vPortSetupTimerInterrupt+0x38>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	4b0a      	ldr	r3, [pc, #40]	; (8008e18 <vPortSetupTimerInterrupt+0x3c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a0a      	ldr	r2, [pc, #40]	; (8008e1c <vPortSetupTimerInterrupt+0x40>)
 8008df2:	fba2 2303 	umull	r2, r3, r2, r3
 8008df6:	099b      	lsrs	r3, r3, #6
 8008df8:	4a09      	ldr	r2, [pc, #36]	; (8008e20 <vPortSetupTimerInterrupt+0x44>)
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	6013      	str	r3, [r2, #0]
 8008dfe:	4b04      	ldr	r3, [pc, #16]	; (8008e10 <vPortSetupTimerInterrupt+0x34>)
 8008e00:	2207      	movs	r2, #7
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	bf00      	nop
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	e000e010 	.word	0xe000e010
 8008e14:	e000e018 	.word	0xe000e018
 8008e18:	20000090 	.word	0x20000090
 8008e1c:	10624dd3 	.word	0x10624dd3
 8008e20:	e000e014 	.word	0xe000e014

08008e24 <vPortEnableVFP>:
 8008e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008e34 <vPortEnableVFP+0x10>
 8008e28:	6801      	ldr	r1, [r0, #0]
 8008e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008e2e:	6001      	str	r1, [r0, #0]
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	e000ed88 	.word	0xe000ed88

08008e38 <pvPortMalloc>:
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b08a      	sub	sp, #40	; 0x28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	2300      	movs	r3, #0
 8008e42:	61fb      	str	r3, [r7, #28]
 8008e44:	f7ff faf2 	bl	800842c <vTaskSuspendAll>
 8008e48:	4b5b      	ldr	r3, [pc, #364]	; (8008fb8 <pvPortMalloc+0x180>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <pvPortMalloc+0x1c>
 8008e50:	f000 f920 	bl	8009094 <prvHeapInit>
 8008e54:	4b59      	ldr	r3, [pc, #356]	; (8008fbc <pvPortMalloc+0x184>)
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f040 8093 	bne.w	8008f88 <pvPortMalloc+0x150>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d01d      	beq.n	8008ea4 <pvPortMalloc+0x6c>
 8008e68:	2208      	movs	r2, #8
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	607b      	str	r3, [r7, #4]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d014      	beq.n	8008ea4 <pvPortMalloc+0x6c>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f023 0307 	bic.w	r3, r3, #7
 8008e80:	3308      	adds	r3, #8
 8008e82:	607b      	str	r3, [r7, #4]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00a      	beq.n	8008ea4 <pvPortMalloc+0x6c>
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	617b      	str	r3, [r7, #20]
 8008ea0:	bf00      	nop
 8008ea2:	e7fe      	b.n	8008ea2 <pvPortMalloc+0x6a>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d06e      	beq.n	8008f88 <pvPortMalloc+0x150>
 8008eaa:	4b45      	ldr	r3, [pc, #276]	; (8008fc0 <pvPortMalloc+0x188>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d869      	bhi.n	8008f88 <pvPortMalloc+0x150>
 8008eb4:	4b43      	ldr	r3, [pc, #268]	; (8008fc4 <pvPortMalloc+0x18c>)
 8008eb6:	623b      	str	r3, [r7, #32]
 8008eb8:	4b42      	ldr	r3, [pc, #264]	; (8008fc4 <pvPortMalloc+0x18c>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8008ebe:	e004      	b.n	8008eca <pvPortMalloc+0x92>
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	623b      	str	r3, [r7, #32]
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d903      	bls.n	8008edc <pvPortMalloc+0xa4>
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1f1      	bne.n	8008ec0 <pvPortMalloc+0x88>
 8008edc:	4b36      	ldr	r3, [pc, #216]	; (8008fb8 <pvPortMalloc+0x180>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d050      	beq.n	8008f88 <pvPortMalloc+0x150>
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2208      	movs	r2, #8
 8008eec:	4413      	add	r3, r2
 8008eee:	61fb      	str	r3, [r7, #28]
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	6a3b      	ldr	r3, [r7, #32]
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	1ad2      	subs	r2, r2, r3
 8008f00:	2308      	movs	r3, #8
 8008f02:	005b      	lsls	r3, r3, #1
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d91f      	bls.n	8008f48 <pvPortMalloc+0x110>
 8008f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	61bb      	str	r3, [r7, #24]
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	f003 0307 	and.w	r3, r3, #7
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00a      	beq.n	8008f30 <pvPortMalloc+0xf8>
 8008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	bf00      	nop
 8008f2e:	e7fe      	b.n	8008f2e <pvPortMalloc+0xf6>
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	1ad2      	subs	r2, r2, r3
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	605a      	str	r2, [r3, #4]
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	605a      	str	r2, [r3, #4]
 8008f42:	69b8      	ldr	r0, [r7, #24]
 8008f44:	f000 f908 	bl	8009158 <prvInsertBlockIntoFreeList>
 8008f48:	4b1d      	ldr	r3, [pc, #116]	; (8008fc0 <pvPortMalloc+0x188>)
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	4a1b      	ldr	r2, [pc, #108]	; (8008fc0 <pvPortMalloc+0x188>)
 8008f54:	6013      	str	r3, [r2, #0]
 8008f56:	4b1a      	ldr	r3, [pc, #104]	; (8008fc0 <pvPortMalloc+0x188>)
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	4b1b      	ldr	r3, [pc, #108]	; (8008fc8 <pvPortMalloc+0x190>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d203      	bcs.n	8008f6a <pvPortMalloc+0x132>
 8008f62:	4b17      	ldr	r3, [pc, #92]	; (8008fc0 <pvPortMalloc+0x188>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a18      	ldr	r2, [pc, #96]	; (8008fc8 <pvPortMalloc+0x190>)
 8008f68:	6013      	str	r3, [r2, #0]
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	685a      	ldr	r2, [r3, #4]
 8008f6e:	4b13      	ldr	r3, [pc, #76]	; (8008fbc <pvPortMalloc+0x184>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	431a      	orrs	r2, r3
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f76:	605a      	str	r2, [r3, #4]
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	4b13      	ldr	r3, [pc, #76]	; (8008fcc <pvPortMalloc+0x194>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3301      	adds	r3, #1
 8008f84:	4a11      	ldr	r2, [pc, #68]	; (8008fcc <pvPortMalloc+0x194>)
 8008f86:	6013      	str	r3, [r2, #0]
 8008f88:	f7ff fa5e 	bl	8008448 <xTaskResumeAll>
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	f003 0307 	and.w	r3, r3, #7
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00a      	beq.n	8008fac <pvPortMalloc+0x174>
 8008f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	60fb      	str	r3, [r7, #12]
 8008fa8:	bf00      	nop
 8008faa:	e7fe      	b.n	8008faa <pvPortMalloc+0x172>
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3728      	adds	r7, #40	; 0x28
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	200044b8 	.word	0x200044b8
 8008fbc:	200044cc 	.word	0x200044cc
 8008fc0:	200044bc 	.word	0x200044bc
 8008fc4:	200044b0 	.word	0x200044b0
 8008fc8:	200044c0 	.word	0x200044c0
 8008fcc:	200044c4 	.word	0x200044c4

08008fd0 <vPortFree>:
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	617b      	str	r3, [r7, #20]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d04d      	beq.n	800907e <vPortFree+0xae>
 8008fe2:	2308      	movs	r3, #8
 8008fe4:	425b      	negs	r3, r3
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	4413      	add	r3, r2
 8008fea:	617b      	str	r3, [r7, #20]
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	613b      	str	r3, [r7, #16]
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	4b24      	ldr	r3, [pc, #144]	; (8009088 <vPortFree+0xb8>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10a      	bne.n	8009014 <vPortFree+0x44>
 8008ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	60fb      	str	r3, [r7, #12]
 8009010:	bf00      	nop
 8009012:	e7fe      	b.n	8009012 <vPortFree+0x42>
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00a      	beq.n	8009032 <vPortFree+0x62>
 800901c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	60bb      	str	r3, [r7, #8]
 800902e:	bf00      	nop
 8009030:	e7fe      	b.n	8009030 <vPortFree+0x60>
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	4b14      	ldr	r3, [pc, #80]	; (8009088 <vPortFree+0xb8>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4013      	ands	r3, r2
 800903c:	2b00      	cmp	r3, #0
 800903e:	d01e      	beq.n	800907e <vPortFree+0xae>
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d11a      	bne.n	800907e <vPortFree+0xae>
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	4b0e      	ldr	r3, [pc, #56]	; (8009088 <vPortFree+0xb8>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	43db      	mvns	r3, r3
 8009052:	401a      	ands	r2, r3
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	605a      	str	r2, [r3, #4]
 8009058:	f7ff f9e8 	bl	800842c <vTaskSuspendAll>
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	4b0a      	ldr	r3, [pc, #40]	; (800908c <vPortFree+0xbc>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4413      	add	r3, r2
 8009066:	4a09      	ldr	r2, [pc, #36]	; (800908c <vPortFree+0xbc>)
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	6938      	ldr	r0, [r7, #16]
 800906c:	f000 f874 	bl	8009158 <prvInsertBlockIntoFreeList>
 8009070:	4b07      	ldr	r3, [pc, #28]	; (8009090 <vPortFree+0xc0>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3301      	adds	r3, #1
 8009076:	4a06      	ldr	r2, [pc, #24]	; (8009090 <vPortFree+0xc0>)
 8009078:	6013      	str	r3, [r2, #0]
 800907a:	f7ff f9e5 	bl	8008448 <xTaskResumeAll>
 800907e:	bf00      	nop
 8009080:	3718      	adds	r7, #24
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	200044cc 	.word	0x200044cc
 800908c:	200044bc 	.word	0x200044bc
 8009090:	200044c8 	.word	0x200044c8

08009094 <prvHeapInit>:
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800909e:	60bb      	str	r3, [r7, #8]
 80090a0:	4b27      	ldr	r3, [pc, #156]	; (8009140 <prvHeapInit+0xac>)
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f003 0307 	and.w	r3, r3, #7
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00c      	beq.n	80090c8 <prvHeapInit+0x34>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3307      	adds	r3, #7
 80090b2:	60fb      	str	r3, [r7, #12]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f023 0307 	bic.w	r3, r3, #7
 80090ba:	60fb      	str	r3, [r7, #12]
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	4a1f      	ldr	r2, [pc, #124]	; (8009140 <prvHeapInit+0xac>)
 80090c4:	4413      	add	r3, r2
 80090c6:	60bb      	str	r3, [r7, #8]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	607b      	str	r3, [r7, #4]
 80090cc:	4a1d      	ldr	r2, [pc, #116]	; (8009144 <prvHeapInit+0xb0>)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6013      	str	r3, [r2, #0]
 80090d2:	4b1c      	ldr	r3, [pc, #112]	; (8009144 <prvHeapInit+0xb0>)
 80090d4:	2200      	movs	r2, #0
 80090d6:	605a      	str	r2, [r3, #4]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	68ba      	ldr	r2, [r7, #8]
 80090dc:	4413      	add	r3, r2
 80090de:	60fb      	str	r3, [r7, #12]
 80090e0:	2208      	movs	r2, #8
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	1a9b      	subs	r3, r3, r2
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f023 0307 	bic.w	r3, r3, #7
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4a15      	ldr	r2, [pc, #84]	; (8009148 <prvHeapInit+0xb4>)
 80090f4:	6013      	str	r3, [r2, #0]
 80090f6:	4b14      	ldr	r3, [pc, #80]	; (8009148 <prvHeapInit+0xb4>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2200      	movs	r2, #0
 80090fc:	605a      	str	r2, [r3, #4]
 80090fe:	4b12      	ldr	r3, [pc, #72]	; (8009148 <prvHeapInit+0xb4>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2200      	movs	r2, #0
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	603b      	str	r3, [r7, #0]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	1ad2      	subs	r2, r2, r3
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	605a      	str	r2, [r3, #4]
 8009114:	4b0c      	ldr	r3, [pc, #48]	; (8009148 <prvHeapInit+0xb4>)
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	4a0a      	ldr	r2, [pc, #40]	; (800914c <prvHeapInit+0xb8>)
 8009122:	6013      	str	r3, [r2, #0]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	4a09      	ldr	r2, [pc, #36]	; (8009150 <prvHeapInit+0xbc>)
 800912a:	6013      	str	r3, [r2, #0]
 800912c:	4b09      	ldr	r3, [pc, #36]	; (8009154 <prvHeapInit+0xc0>)
 800912e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	bf00      	nop
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	200008b0 	.word	0x200008b0
 8009144:	200044b0 	.word	0x200044b0
 8009148:	200044b8 	.word	0x200044b8
 800914c:	200044c0 	.word	0x200044c0
 8009150:	200044bc 	.word	0x200044bc
 8009154:	200044cc 	.word	0x200044cc

08009158 <prvInsertBlockIntoFreeList>:
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	4b28      	ldr	r3, [pc, #160]	; (8009204 <prvInsertBlockIntoFreeList+0xac>)
 8009162:	60fb      	str	r3, [r7, #12]
 8009164:	e002      	b.n	800916c <prvInsertBlockIntoFreeList+0x14>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	429a      	cmp	r2, r3
 8009174:	d8f7      	bhi.n	8009166 <prvInsertBlockIntoFreeList+0xe>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	60bb      	str	r3, [r7, #8]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	4413      	add	r3, r2
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	429a      	cmp	r2, r3
 8009186:	d108      	bne.n	800919a <prvInsertBlockIntoFreeList+0x42>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	441a      	add	r2, r3
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	605a      	str	r2, [r3, #4]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	607b      	str	r3, [r7, #4]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	60bb      	str	r3, [r7, #8]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	441a      	add	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d118      	bne.n	80091e0 <prvInsertBlockIntoFreeList+0x88>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	4b15      	ldr	r3, [pc, #84]	; (8009208 <prvInsertBlockIntoFreeList+0xb0>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d00d      	beq.n	80091d6 <prvInsertBlockIntoFreeList+0x7e>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	441a      	add	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	605a      	str	r2, [r3, #4]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	e008      	b.n	80091e8 <prvInsertBlockIntoFreeList+0x90>
 80091d6:	4b0c      	ldr	r3, [pc, #48]	; (8009208 <prvInsertBlockIntoFreeList+0xb0>)
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	e003      	b.n	80091e8 <prvInsertBlockIntoFreeList+0x90>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	601a      	str	r2, [r3, #0]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d002      	beq.n	80091f6 <prvInsertBlockIntoFreeList+0x9e>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	601a      	str	r2, [r3, #0]
 80091f6:	bf00      	nop
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	200044b0 	.word	0x200044b0
 8009208:	200044b8 	.word	0x200044b8

0800920c <memset>:
 800920c:	4402      	add	r2, r0
 800920e:	4603      	mov	r3, r0
 8009210:	4293      	cmp	r3, r2
 8009212:	d100      	bne.n	8009216 <memset+0xa>
 8009214:	4770      	bx	lr
 8009216:	f803 1b01 	strb.w	r1, [r3], #1
 800921a:	e7f9      	b.n	8009210 <memset+0x4>

0800921c <__errno>:
 800921c:	4b01      	ldr	r3, [pc, #4]	; (8009224 <__errno+0x8>)
 800921e:	6818      	ldr	r0, [r3, #0]
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	200000ec 	.word	0x200000ec

08009228 <__libc_init_array>:
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	4d0d      	ldr	r5, [pc, #52]	; (8009260 <__libc_init_array+0x38>)
 800922c:	4c0d      	ldr	r4, [pc, #52]	; (8009264 <__libc_init_array+0x3c>)
 800922e:	1b64      	subs	r4, r4, r5
 8009230:	10a4      	asrs	r4, r4, #2
 8009232:	2600      	movs	r6, #0
 8009234:	42a6      	cmp	r6, r4
 8009236:	d109      	bne.n	800924c <__libc_init_array+0x24>
 8009238:	4d0b      	ldr	r5, [pc, #44]	; (8009268 <__libc_init_array+0x40>)
 800923a:	4c0c      	ldr	r4, [pc, #48]	; (800926c <__libc_init_array+0x44>)
 800923c:	f000 fd9a 	bl	8009d74 <_init>
 8009240:	1b64      	subs	r4, r4, r5
 8009242:	10a4      	asrs	r4, r4, #2
 8009244:	2600      	movs	r6, #0
 8009246:	42a6      	cmp	r6, r4
 8009248:	d105      	bne.n	8009256 <__libc_init_array+0x2e>
 800924a:	bd70      	pop	{r4, r5, r6, pc}
 800924c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009250:	4798      	blx	r3
 8009252:	3601      	adds	r6, #1
 8009254:	e7ee      	b.n	8009234 <__libc_init_array+0xc>
 8009256:	f855 3b04 	ldr.w	r3, [r5], #4
 800925a:	4798      	blx	r3
 800925c:	3601      	adds	r6, #1
 800925e:	e7f2      	b.n	8009246 <__libc_init_array+0x1e>
 8009260:	08009ed0 	.word	0x08009ed0
 8009264:	08009ed0 	.word	0x08009ed0
 8009268:	08009ed0 	.word	0x08009ed0
 800926c:	08009ed4 	.word	0x08009ed4

08009270 <atan2>:
 8009270:	f000 bafe 	b.w	8009870 <__ieee754_atan2>
 8009274:	0000      	movs	r0, r0
	...

08009278 <log>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	ed2d 8b02 	vpush	{d8}
 800927e:	ec55 4b10 	vmov	r4, r5, d0
 8009282:	f000 fbbd 	bl	8009a00 <__ieee754_log>
 8009286:	4622      	mov	r2, r4
 8009288:	462b      	mov	r3, r5
 800928a:	4620      	mov	r0, r4
 800928c:	4629      	mov	r1, r5
 800928e:	eeb0 8a40 	vmov.f32	s16, s0
 8009292:	eef0 8a60 	vmov.f32	s17, s1
 8009296:	f7f7 fbf9 	bl	8000a8c <__aeabi_dcmpun>
 800929a:	b998      	cbnz	r0, 80092c4 <log+0x4c>
 800929c:	2200      	movs	r2, #0
 800929e:	2300      	movs	r3, #0
 80092a0:	4620      	mov	r0, r4
 80092a2:	4629      	mov	r1, r5
 80092a4:	f7f7 fbe8 	bl	8000a78 <__aeabi_dcmpgt>
 80092a8:	b960      	cbnz	r0, 80092c4 <log+0x4c>
 80092aa:	2200      	movs	r2, #0
 80092ac:	2300      	movs	r3, #0
 80092ae:	4620      	mov	r0, r4
 80092b0:	4629      	mov	r1, r5
 80092b2:	f7f7 fbb9 	bl	8000a28 <__aeabi_dcmpeq>
 80092b6:	b160      	cbz	r0, 80092d2 <log+0x5a>
 80092b8:	f7ff ffb0 	bl	800921c <__errno>
 80092bc:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80092e8 <log+0x70>
 80092c0:	2322      	movs	r3, #34	; 0x22
 80092c2:	6003      	str	r3, [r0, #0]
 80092c4:	eeb0 0a48 	vmov.f32	s0, s16
 80092c8:	eef0 0a68 	vmov.f32	s1, s17
 80092cc:	ecbd 8b02 	vpop	{d8}
 80092d0:	bd38      	pop	{r3, r4, r5, pc}
 80092d2:	f7ff ffa3 	bl	800921c <__errno>
 80092d6:	ecbd 8b02 	vpop	{d8}
 80092da:	2321      	movs	r3, #33	; 0x21
 80092dc:	6003      	str	r3, [r0, #0]
 80092de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092e2:	4803      	ldr	r0, [pc, #12]	; (80092f0 <log+0x78>)
 80092e4:	f000 b9e0 	b.w	80096a8 <nan>
 80092e8:	00000000 	.word	0x00000000
 80092ec:	fff00000 	.word	0xfff00000
 80092f0:	08009e54 	.word	0x08009e54

080092f4 <sqrt>:
 80092f4:	b538      	push	{r3, r4, r5, lr}
 80092f6:	ed2d 8b02 	vpush	{d8}
 80092fa:	ec55 4b10 	vmov	r4, r5, d0
 80092fe:	f000 f9db 	bl	80096b8 <__ieee754_sqrt>
 8009302:	4622      	mov	r2, r4
 8009304:	462b      	mov	r3, r5
 8009306:	4620      	mov	r0, r4
 8009308:	4629      	mov	r1, r5
 800930a:	eeb0 8a40 	vmov.f32	s16, s0
 800930e:	eef0 8a60 	vmov.f32	s17, s1
 8009312:	f7f7 fbbb 	bl	8000a8c <__aeabi_dcmpun>
 8009316:	b990      	cbnz	r0, 800933e <sqrt+0x4a>
 8009318:	2200      	movs	r2, #0
 800931a:	2300      	movs	r3, #0
 800931c:	4620      	mov	r0, r4
 800931e:	4629      	mov	r1, r5
 8009320:	f7f7 fb8c 	bl	8000a3c <__aeabi_dcmplt>
 8009324:	b158      	cbz	r0, 800933e <sqrt+0x4a>
 8009326:	f7ff ff79 	bl	800921c <__errno>
 800932a:	2321      	movs	r3, #33	; 0x21
 800932c:	6003      	str	r3, [r0, #0]
 800932e:	2200      	movs	r2, #0
 8009330:	2300      	movs	r3, #0
 8009332:	4610      	mov	r0, r2
 8009334:	4619      	mov	r1, r3
 8009336:	f7f7 fa39 	bl	80007ac <__aeabi_ddiv>
 800933a:	ec41 0b18 	vmov	d8, r0, r1
 800933e:	eeb0 0a48 	vmov.f32	s0, s16
 8009342:	eef0 0a68 	vmov.f32	s1, s17
 8009346:	ecbd 8b02 	vpop	{d8}
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	0000      	movs	r0, r0
	...

08009350 <atan>:
 8009350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009354:	ec55 4b10 	vmov	r4, r5, d0
 8009358:	4bc3      	ldr	r3, [pc, #780]	; (8009668 <atan+0x318>)
 800935a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800935e:	429e      	cmp	r6, r3
 8009360:	46ab      	mov	fp, r5
 8009362:	dd18      	ble.n	8009396 <atan+0x46>
 8009364:	4bc1      	ldr	r3, [pc, #772]	; (800966c <atan+0x31c>)
 8009366:	429e      	cmp	r6, r3
 8009368:	dc01      	bgt.n	800936e <atan+0x1e>
 800936a:	d109      	bne.n	8009380 <atan+0x30>
 800936c:	b144      	cbz	r4, 8009380 <atan+0x30>
 800936e:	4622      	mov	r2, r4
 8009370:	462b      	mov	r3, r5
 8009372:	4620      	mov	r0, r4
 8009374:	4629      	mov	r1, r5
 8009376:	f7f6 ff39 	bl	80001ec <__adddf3>
 800937a:	4604      	mov	r4, r0
 800937c:	460d      	mov	r5, r1
 800937e:	e006      	b.n	800938e <atan+0x3e>
 8009380:	f1bb 0f00 	cmp.w	fp, #0
 8009384:	f300 8131 	bgt.w	80095ea <atan+0x29a>
 8009388:	a59b      	add	r5, pc, #620	; (adr r5, 80095f8 <atan+0x2a8>)
 800938a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800938e:	ec45 4b10 	vmov	d0, r4, r5
 8009392:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009396:	4bb6      	ldr	r3, [pc, #728]	; (8009670 <atan+0x320>)
 8009398:	429e      	cmp	r6, r3
 800939a:	dc14      	bgt.n	80093c6 <atan+0x76>
 800939c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80093a0:	429e      	cmp	r6, r3
 80093a2:	dc0d      	bgt.n	80093c0 <atan+0x70>
 80093a4:	a396      	add	r3, pc, #600	; (adr r3, 8009600 <atan+0x2b0>)
 80093a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093aa:	ee10 0a10 	vmov	r0, s0
 80093ae:	4629      	mov	r1, r5
 80093b0:	f7f6 ff1c 	bl	80001ec <__adddf3>
 80093b4:	4baf      	ldr	r3, [pc, #700]	; (8009674 <atan+0x324>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	f7f7 fb5e 	bl	8000a78 <__aeabi_dcmpgt>
 80093bc:	2800      	cmp	r0, #0
 80093be:	d1e6      	bne.n	800938e <atan+0x3e>
 80093c0:	f04f 3aff 	mov.w	sl, #4294967295
 80093c4:	e02b      	b.n	800941e <atan+0xce>
 80093c6:	f000 f963 	bl	8009690 <fabs>
 80093ca:	4bab      	ldr	r3, [pc, #684]	; (8009678 <atan+0x328>)
 80093cc:	429e      	cmp	r6, r3
 80093ce:	ec55 4b10 	vmov	r4, r5, d0
 80093d2:	f300 80bf 	bgt.w	8009554 <atan+0x204>
 80093d6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80093da:	429e      	cmp	r6, r3
 80093dc:	f300 80a0 	bgt.w	8009520 <atan+0x1d0>
 80093e0:	ee10 2a10 	vmov	r2, s0
 80093e4:	ee10 0a10 	vmov	r0, s0
 80093e8:	462b      	mov	r3, r5
 80093ea:	4629      	mov	r1, r5
 80093ec:	f7f6 fefe 	bl	80001ec <__adddf3>
 80093f0:	4ba0      	ldr	r3, [pc, #640]	; (8009674 <atan+0x324>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	f7f6 fef8 	bl	80001e8 <__aeabi_dsub>
 80093f8:	2200      	movs	r2, #0
 80093fa:	4606      	mov	r6, r0
 80093fc:	460f      	mov	r7, r1
 80093fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009402:	4620      	mov	r0, r4
 8009404:	4629      	mov	r1, r5
 8009406:	f7f6 fef1 	bl	80001ec <__adddf3>
 800940a:	4602      	mov	r2, r0
 800940c:	460b      	mov	r3, r1
 800940e:	4630      	mov	r0, r6
 8009410:	4639      	mov	r1, r7
 8009412:	f7f7 f9cb 	bl	80007ac <__aeabi_ddiv>
 8009416:	f04f 0a00 	mov.w	sl, #0
 800941a:	4604      	mov	r4, r0
 800941c:	460d      	mov	r5, r1
 800941e:	4622      	mov	r2, r4
 8009420:	462b      	mov	r3, r5
 8009422:	4620      	mov	r0, r4
 8009424:	4629      	mov	r1, r5
 8009426:	f7f7 f897 	bl	8000558 <__aeabi_dmul>
 800942a:	4602      	mov	r2, r0
 800942c:	460b      	mov	r3, r1
 800942e:	4680      	mov	r8, r0
 8009430:	4689      	mov	r9, r1
 8009432:	f7f7 f891 	bl	8000558 <__aeabi_dmul>
 8009436:	a374      	add	r3, pc, #464	; (adr r3, 8009608 <atan+0x2b8>)
 8009438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943c:	4606      	mov	r6, r0
 800943e:	460f      	mov	r7, r1
 8009440:	f7f7 f88a 	bl	8000558 <__aeabi_dmul>
 8009444:	a372      	add	r3, pc, #456	; (adr r3, 8009610 <atan+0x2c0>)
 8009446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944a:	f7f6 fecf 	bl	80001ec <__adddf3>
 800944e:	4632      	mov	r2, r6
 8009450:	463b      	mov	r3, r7
 8009452:	f7f7 f881 	bl	8000558 <__aeabi_dmul>
 8009456:	a370      	add	r3, pc, #448	; (adr r3, 8009618 <atan+0x2c8>)
 8009458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945c:	f7f6 fec6 	bl	80001ec <__adddf3>
 8009460:	4632      	mov	r2, r6
 8009462:	463b      	mov	r3, r7
 8009464:	f7f7 f878 	bl	8000558 <__aeabi_dmul>
 8009468:	a36d      	add	r3, pc, #436	; (adr r3, 8009620 <atan+0x2d0>)
 800946a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946e:	f7f6 febd 	bl	80001ec <__adddf3>
 8009472:	4632      	mov	r2, r6
 8009474:	463b      	mov	r3, r7
 8009476:	f7f7 f86f 	bl	8000558 <__aeabi_dmul>
 800947a:	a36b      	add	r3, pc, #428	; (adr r3, 8009628 <atan+0x2d8>)
 800947c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009480:	f7f6 feb4 	bl	80001ec <__adddf3>
 8009484:	4632      	mov	r2, r6
 8009486:	463b      	mov	r3, r7
 8009488:	f7f7 f866 	bl	8000558 <__aeabi_dmul>
 800948c:	a368      	add	r3, pc, #416	; (adr r3, 8009630 <atan+0x2e0>)
 800948e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009492:	f7f6 feab 	bl	80001ec <__adddf3>
 8009496:	4642      	mov	r2, r8
 8009498:	464b      	mov	r3, r9
 800949a:	f7f7 f85d 	bl	8000558 <__aeabi_dmul>
 800949e:	a366      	add	r3, pc, #408	; (adr r3, 8009638 <atan+0x2e8>)
 80094a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a4:	4680      	mov	r8, r0
 80094a6:	4689      	mov	r9, r1
 80094a8:	4630      	mov	r0, r6
 80094aa:	4639      	mov	r1, r7
 80094ac:	f7f7 f854 	bl	8000558 <__aeabi_dmul>
 80094b0:	a363      	add	r3, pc, #396	; (adr r3, 8009640 <atan+0x2f0>)
 80094b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b6:	f7f6 fe97 	bl	80001e8 <__aeabi_dsub>
 80094ba:	4632      	mov	r2, r6
 80094bc:	463b      	mov	r3, r7
 80094be:	f7f7 f84b 	bl	8000558 <__aeabi_dmul>
 80094c2:	a361      	add	r3, pc, #388	; (adr r3, 8009648 <atan+0x2f8>)
 80094c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c8:	f7f6 fe8e 	bl	80001e8 <__aeabi_dsub>
 80094cc:	4632      	mov	r2, r6
 80094ce:	463b      	mov	r3, r7
 80094d0:	f7f7 f842 	bl	8000558 <__aeabi_dmul>
 80094d4:	a35e      	add	r3, pc, #376	; (adr r3, 8009650 <atan+0x300>)
 80094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094da:	f7f6 fe85 	bl	80001e8 <__aeabi_dsub>
 80094de:	4632      	mov	r2, r6
 80094e0:	463b      	mov	r3, r7
 80094e2:	f7f7 f839 	bl	8000558 <__aeabi_dmul>
 80094e6:	a35c      	add	r3, pc, #368	; (adr r3, 8009658 <atan+0x308>)
 80094e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ec:	f7f6 fe7c 	bl	80001e8 <__aeabi_dsub>
 80094f0:	4632      	mov	r2, r6
 80094f2:	463b      	mov	r3, r7
 80094f4:	f7f7 f830 	bl	8000558 <__aeabi_dmul>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	4640      	mov	r0, r8
 80094fe:	4649      	mov	r1, r9
 8009500:	f7f6 fe74 	bl	80001ec <__adddf3>
 8009504:	4622      	mov	r2, r4
 8009506:	462b      	mov	r3, r5
 8009508:	f7f7 f826 	bl	8000558 <__aeabi_dmul>
 800950c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009510:	4602      	mov	r2, r0
 8009512:	460b      	mov	r3, r1
 8009514:	d14b      	bne.n	80095ae <atan+0x25e>
 8009516:	4620      	mov	r0, r4
 8009518:	4629      	mov	r1, r5
 800951a:	f7f6 fe65 	bl	80001e8 <__aeabi_dsub>
 800951e:	e72c      	b.n	800937a <atan+0x2a>
 8009520:	ee10 0a10 	vmov	r0, s0
 8009524:	4b53      	ldr	r3, [pc, #332]	; (8009674 <atan+0x324>)
 8009526:	2200      	movs	r2, #0
 8009528:	4629      	mov	r1, r5
 800952a:	f7f6 fe5d 	bl	80001e8 <__aeabi_dsub>
 800952e:	4b51      	ldr	r3, [pc, #324]	; (8009674 <atan+0x324>)
 8009530:	4606      	mov	r6, r0
 8009532:	460f      	mov	r7, r1
 8009534:	2200      	movs	r2, #0
 8009536:	4620      	mov	r0, r4
 8009538:	4629      	mov	r1, r5
 800953a:	f7f6 fe57 	bl	80001ec <__adddf3>
 800953e:	4602      	mov	r2, r0
 8009540:	460b      	mov	r3, r1
 8009542:	4630      	mov	r0, r6
 8009544:	4639      	mov	r1, r7
 8009546:	f7f7 f931 	bl	80007ac <__aeabi_ddiv>
 800954a:	f04f 0a01 	mov.w	sl, #1
 800954e:	4604      	mov	r4, r0
 8009550:	460d      	mov	r5, r1
 8009552:	e764      	b.n	800941e <atan+0xce>
 8009554:	4b49      	ldr	r3, [pc, #292]	; (800967c <atan+0x32c>)
 8009556:	429e      	cmp	r6, r3
 8009558:	da1d      	bge.n	8009596 <atan+0x246>
 800955a:	ee10 0a10 	vmov	r0, s0
 800955e:	4b48      	ldr	r3, [pc, #288]	; (8009680 <atan+0x330>)
 8009560:	2200      	movs	r2, #0
 8009562:	4629      	mov	r1, r5
 8009564:	f7f6 fe40 	bl	80001e8 <__aeabi_dsub>
 8009568:	4b45      	ldr	r3, [pc, #276]	; (8009680 <atan+0x330>)
 800956a:	4606      	mov	r6, r0
 800956c:	460f      	mov	r7, r1
 800956e:	2200      	movs	r2, #0
 8009570:	4620      	mov	r0, r4
 8009572:	4629      	mov	r1, r5
 8009574:	f7f6 fff0 	bl	8000558 <__aeabi_dmul>
 8009578:	4b3e      	ldr	r3, [pc, #248]	; (8009674 <atan+0x324>)
 800957a:	2200      	movs	r2, #0
 800957c:	f7f6 fe36 	bl	80001ec <__adddf3>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	4630      	mov	r0, r6
 8009586:	4639      	mov	r1, r7
 8009588:	f7f7 f910 	bl	80007ac <__aeabi_ddiv>
 800958c:	f04f 0a02 	mov.w	sl, #2
 8009590:	4604      	mov	r4, r0
 8009592:	460d      	mov	r5, r1
 8009594:	e743      	b.n	800941e <atan+0xce>
 8009596:	462b      	mov	r3, r5
 8009598:	ee10 2a10 	vmov	r2, s0
 800959c:	4939      	ldr	r1, [pc, #228]	; (8009684 <atan+0x334>)
 800959e:	2000      	movs	r0, #0
 80095a0:	f7f7 f904 	bl	80007ac <__aeabi_ddiv>
 80095a4:	f04f 0a03 	mov.w	sl, #3
 80095a8:	4604      	mov	r4, r0
 80095aa:	460d      	mov	r5, r1
 80095ac:	e737      	b.n	800941e <atan+0xce>
 80095ae:	4b36      	ldr	r3, [pc, #216]	; (8009688 <atan+0x338>)
 80095b0:	4e36      	ldr	r6, [pc, #216]	; (800968c <atan+0x33c>)
 80095b2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80095b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ba:	f7f6 fe15 	bl	80001e8 <__aeabi_dsub>
 80095be:	4622      	mov	r2, r4
 80095c0:	462b      	mov	r3, r5
 80095c2:	f7f6 fe11 	bl	80001e8 <__aeabi_dsub>
 80095c6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	e9d6 0100 	ldrd	r0, r1, [r6]
 80095d2:	f7f6 fe09 	bl	80001e8 <__aeabi_dsub>
 80095d6:	f1bb 0f00 	cmp.w	fp, #0
 80095da:	4604      	mov	r4, r0
 80095dc:	460d      	mov	r5, r1
 80095de:	f6bf aed6 	bge.w	800938e <atan+0x3e>
 80095e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095e6:	461d      	mov	r5, r3
 80095e8:	e6d1      	b.n	800938e <atan+0x3e>
 80095ea:	a51d      	add	r5, pc, #116	; (adr r5, 8009660 <atan+0x310>)
 80095ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80095f0:	e6cd      	b.n	800938e <atan+0x3e>
 80095f2:	bf00      	nop
 80095f4:	f3af 8000 	nop.w
 80095f8:	54442d18 	.word	0x54442d18
 80095fc:	bff921fb 	.word	0xbff921fb
 8009600:	8800759c 	.word	0x8800759c
 8009604:	7e37e43c 	.word	0x7e37e43c
 8009608:	e322da11 	.word	0xe322da11
 800960c:	3f90ad3a 	.word	0x3f90ad3a
 8009610:	24760deb 	.word	0x24760deb
 8009614:	3fa97b4b 	.word	0x3fa97b4b
 8009618:	a0d03d51 	.word	0xa0d03d51
 800961c:	3fb10d66 	.word	0x3fb10d66
 8009620:	c54c206e 	.word	0xc54c206e
 8009624:	3fb745cd 	.word	0x3fb745cd
 8009628:	920083ff 	.word	0x920083ff
 800962c:	3fc24924 	.word	0x3fc24924
 8009630:	5555550d 	.word	0x5555550d
 8009634:	3fd55555 	.word	0x3fd55555
 8009638:	2c6a6c2f 	.word	0x2c6a6c2f
 800963c:	bfa2b444 	.word	0xbfa2b444
 8009640:	52defd9a 	.word	0x52defd9a
 8009644:	3fadde2d 	.word	0x3fadde2d
 8009648:	af749a6d 	.word	0xaf749a6d
 800964c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009650:	fe231671 	.word	0xfe231671
 8009654:	3fbc71c6 	.word	0x3fbc71c6
 8009658:	9998ebc4 	.word	0x9998ebc4
 800965c:	3fc99999 	.word	0x3fc99999
 8009660:	54442d18 	.word	0x54442d18
 8009664:	3ff921fb 	.word	0x3ff921fb
 8009668:	440fffff 	.word	0x440fffff
 800966c:	7ff00000 	.word	0x7ff00000
 8009670:	3fdbffff 	.word	0x3fdbffff
 8009674:	3ff00000 	.word	0x3ff00000
 8009678:	3ff2ffff 	.word	0x3ff2ffff
 800967c:	40038000 	.word	0x40038000
 8009680:	3ff80000 	.word	0x3ff80000
 8009684:	bff00000 	.word	0xbff00000
 8009688:	08009e78 	.word	0x08009e78
 800968c:	08009e58 	.word	0x08009e58

08009690 <fabs>:
 8009690:	ec51 0b10 	vmov	r0, r1, d0
 8009694:	ee10 2a10 	vmov	r2, s0
 8009698:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800969c:	ec43 2b10 	vmov	d0, r2, r3
 80096a0:	4770      	bx	lr
 80096a2:	0000      	movs	r0, r0
 80096a4:	0000      	movs	r0, r0
	...

080096a8 <nan>:
 80096a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80096b0 <nan+0x8>
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	00000000 	.word	0x00000000
 80096b4:	7ff80000 	.word	0x7ff80000

080096b8 <__ieee754_sqrt>:
 80096b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096bc:	ec55 4b10 	vmov	r4, r5, d0
 80096c0:	4e67      	ldr	r6, [pc, #412]	; (8009860 <__ieee754_sqrt+0x1a8>)
 80096c2:	43ae      	bics	r6, r5
 80096c4:	ee10 0a10 	vmov	r0, s0
 80096c8:	ee10 2a10 	vmov	r2, s0
 80096cc:	4629      	mov	r1, r5
 80096ce:	462b      	mov	r3, r5
 80096d0:	d10d      	bne.n	80096ee <__ieee754_sqrt+0x36>
 80096d2:	f7f6 ff41 	bl	8000558 <__aeabi_dmul>
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	4620      	mov	r0, r4
 80096dc:	4629      	mov	r1, r5
 80096de:	f7f6 fd85 	bl	80001ec <__adddf3>
 80096e2:	4604      	mov	r4, r0
 80096e4:	460d      	mov	r5, r1
 80096e6:	ec45 4b10 	vmov	d0, r4, r5
 80096ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ee:	2d00      	cmp	r5, #0
 80096f0:	dc0b      	bgt.n	800970a <__ieee754_sqrt+0x52>
 80096f2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80096f6:	4326      	orrs	r6, r4
 80096f8:	d0f5      	beq.n	80096e6 <__ieee754_sqrt+0x2e>
 80096fa:	b135      	cbz	r5, 800970a <__ieee754_sqrt+0x52>
 80096fc:	f7f6 fd74 	bl	80001e8 <__aeabi_dsub>
 8009700:	4602      	mov	r2, r0
 8009702:	460b      	mov	r3, r1
 8009704:	f7f7 f852 	bl	80007ac <__aeabi_ddiv>
 8009708:	e7eb      	b.n	80096e2 <__ieee754_sqrt+0x2a>
 800970a:	1509      	asrs	r1, r1, #20
 800970c:	f000 808d 	beq.w	800982a <__ieee754_sqrt+0x172>
 8009710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009714:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800971c:	07c9      	lsls	r1, r1, #31
 800971e:	bf5c      	itt	pl
 8009720:	005b      	lslpl	r3, r3, #1
 8009722:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8009726:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800972a:	bf58      	it	pl
 800972c:	0052      	lslpl	r2, r2, #1
 800972e:	2500      	movs	r5, #0
 8009730:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009734:	1076      	asrs	r6, r6, #1
 8009736:	0052      	lsls	r2, r2, #1
 8009738:	f04f 0e16 	mov.w	lr, #22
 800973c:	46ac      	mov	ip, r5
 800973e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009742:	eb0c 0001 	add.w	r0, ip, r1
 8009746:	4298      	cmp	r0, r3
 8009748:	bfde      	ittt	le
 800974a:	1a1b      	suble	r3, r3, r0
 800974c:	eb00 0c01 	addle.w	ip, r0, r1
 8009750:	186d      	addle	r5, r5, r1
 8009752:	005b      	lsls	r3, r3, #1
 8009754:	f1be 0e01 	subs.w	lr, lr, #1
 8009758:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800975c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009760:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009764:	d1ed      	bne.n	8009742 <__ieee754_sqrt+0x8a>
 8009766:	4674      	mov	r4, lr
 8009768:	2720      	movs	r7, #32
 800976a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800976e:	4563      	cmp	r3, ip
 8009770:	eb01 000e 	add.w	r0, r1, lr
 8009774:	dc02      	bgt.n	800977c <__ieee754_sqrt+0xc4>
 8009776:	d113      	bne.n	80097a0 <__ieee754_sqrt+0xe8>
 8009778:	4290      	cmp	r0, r2
 800977a:	d811      	bhi.n	80097a0 <__ieee754_sqrt+0xe8>
 800977c:	2800      	cmp	r0, #0
 800977e:	eb00 0e01 	add.w	lr, r0, r1
 8009782:	da57      	bge.n	8009834 <__ieee754_sqrt+0x17c>
 8009784:	f1be 0f00 	cmp.w	lr, #0
 8009788:	db54      	blt.n	8009834 <__ieee754_sqrt+0x17c>
 800978a:	f10c 0801 	add.w	r8, ip, #1
 800978e:	eba3 030c 	sub.w	r3, r3, ip
 8009792:	4290      	cmp	r0, r2
 8009794:	bf88      	it	hi
 8009796:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800979a:	1a12      	subs	r2, r2, r0
 800979c:	440c      	add	r4, r1
 800979e:	46c4      	mov	ip, r8
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	3f01      	subs	r7, #1
 80097a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80097a8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80097ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80097b0:	d1dd      	bne.n	800976e <__ieee754_sqrt+0xb6>
 80097b2:	4313      	orrs	r3, r2
 80097b4:	d01b      	beq.n	80097ee <__ieee754_sqrt+0x136>
 80097b6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009864 <__ieee754_sqrt+0x1ac>
 80097ba:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009868 <__ieee754_sqrt+0x1b0>
 80097be:	e9da 0100 	ldrd	r0, r1, [sl]
 80097c2:	e9db 2300 	ldrd	r2, r3, [fp]
 80097c6:	f7f6 fd0f 	bl	80001e8 <__aeabi_dsub>
 80097ca:	e9da 8900 	ldrd	r8, r9, [sl]
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4640      	mov	r0, r8
 80097d4:	4649      	mov	r1, r9
 80097d6:	f7f7 f93b 	bl	8000a50 <__aeabi_dcmple>
 80097da:	b140      	cbz	r0, 80097ee <__ieee754_sqrt+0x136>
 80097dc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80097e0:	e9da 0100 	ldrd	r0, r1, [sl]
 80097e4:	e9db 2300 	ldrd	r2, r3, [fp]
 80097e8:	d126      	bne.n	8009838 <__ieee754_sqrt+0x180>
 80097ea:	3501      	adds	r5, #1
 80097ec:	463c      	mov	r4, r7
 80097ee:	106a      	asrs	r2, r5, #1
 80097f0:	0863      	lsrs	r3, r4, #1
 80097f2:	07e9      	lsls	r1, r5, #31
 80097f4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80097f8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80097fc:	bf48      	it	mi
 80097fe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009802:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8009806:	461c      	mov	r4, r3
 8009808:	e76d      	b.n	80096e6 <__ieee754_sqrt+0x2e>
 800980a:	0ad3      	lsrs	r3, r2, #11
 800980c:	3815      	subs	r0, #21
 800980e:	0552      	lsls	r2, r2, #21
 8009810:	2b00      	cmp	r3, #0
 8009812:	d0fa      	beq.n	800980a <__ieee754_sqrt+0x152>
 8009814:	02dc      	lsls	r4, r3, #11
 8009816:	d50a      	bpl.n	800982e <__ieee754_sqrt+0x176>
 8009818:	f1c1 0420 	rsb	r4, r1, #32
 800981c:	fa22 f404 	lsr.w	r4, r2, r4
 8009820:	1e4d      	subs	r5, r1, #1
 8009822:	408a      	lsls	r2, r1
 8009824:	4323      	orrs	r3, r4
 8009826:	1b41      	subs	r1, r0, r5
 8009828:	e772      	b.n	8009710 <__ieee754_sqrt+0x58>
 800982a:	4608      	mov	r0, r1
 800982c:	e7f0      	b.n	8009810 <__ieee754_sqrt+0x158>
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	3101      	adds	r1, #1
 8009832:	e7ef      	b.n	8009814 <__ieee754_sqrt+0x15c>
 8009834:	46e0      	mov	r8, ip
 8009836:	e7aa      	b.n	800978e <__ieee754_sqrt+0xd6>
 8009838:	f7f6 fcd8 	bl	80001ec <__adddf3>
 800983c:	e9da 8900 	ldrd	r8, r9, [sl]
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	4640      	mov	r0, r8
 8009846:	4649      	mov	r1, r9
 8009848:	f7f7 f8f8 	bl	8000a3c <__aeabi_dcmplt>
 800984c:	b120      	cbz	r0, 8009858 <__ieee754_sqrt+0x1a0>
 800984e:	1ca0      	adds	r0, r4, #2
 8009850:	bf08      	it	eq
 8009852:	3501      	addeq	r5, #1
 8009854:	3402      	adds	r4, #2
 8009856:	e7ca      	b.n	80097ee <__ieee754_sqrt+0x136>
 8009858:	3401      	adds	r4, #1
 800985a:	f024 0401 	bic.w	r4, r4, #1
 800985e:	e7c6      	b.n	80097ee <__ieee754_sqrt+0x136>
 8009860:	7ff00000 	.word	0x7ff00000
 8009864:	200000f0 	.word	0x200000f0
 8009868:	200000f8 	.word	0x200000f8
 800986c:	00000000 	.word	0x00000000

08009870 <__ieee754_atan2>:
 8009870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009874:	ec57 6b11 	vmov	r6, r7, d1
 8009878:	4273      	negs	r3, r6
 800987a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80099f8 <__ieee754_atan2+0x188>
 800987e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009882:	4333      	orrs	r3, r6
 8009884:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009888:	4543      	cmp	r3, r8
 800988a:	ec51 0b10 	vmov	r0, r1, d0
 800988e:	ee11 5a10 	vmov	r5, s2
 8009892:	d80a      	bhi.n	80098aa <__ieee754_atan2+0x3a>
 8009894:	4244      	negs	r4, r0
 8009896:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800989a:	4304      	orrs	r4, r0
 800989c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80098a0:	4544      	cmp	r4, r8
 80098a2:	ee10 9a10 	vmov	r9, s0
 80098a6:	468e      	mov	lr, r1
 80098a8:	d907      	bls.n	80098ba <__ieee754_atan2+0x4a>
 80098aa:	4632      	mov	r2, r6
 80098ac:	463b      	mov	r3, r7
 80098ae:	f7f6 fc9d 	bl	80001ec <__adddf3>
 80098b2:	ec41 0b10 	vmov	d0, r0, r1
 80098b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ba:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80098be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80098c2:	4334      	orrs	r4, r6
 80098c4:	d103      	bne.n	80098ce <__ieee754_atan2+0x5e>
 80098c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098ca:	f7ff bd41 	b.w	8009350 <atan>
 80098ce:	17bc      	asrs	r4, r7, #30
 80098d0:	f004 0402 	and.w	r4, r4, #2
 80098d4:	ea53 0909 	orrs.w	r9, r3, r9
 80098d8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80098dc:	d107      	bne.n	80098ee <__ieee754_atan2+0x7e>
 80098de:	2c02      	cmp	r4, #2
 80098e0:	d05f      	beq.n	80099a2 <__ieee754_atan2+0x132>
 80098e2:	2c03      	cmp	r4, #3
 80098e4:	d1e5      	bne.n	80098b2 <__ieee754_atan2+0x42>
 80098e6:	a140      	add	r1, pc, #256	; (adr r1, 80099e8 <__ieee754_atan2+0x178>)
 80098e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098ec:	e7e1      	b.n	80098b2 <__ieee754_atan2+0x42>
 80098ee:	4315      	orrs	r5, r2
 80098f0:	d106      	bne.n	8009900 <__ieee754_atan2+0x90>
 80098f2:	f1be 0f00 	cmp.w	lr, #0
 80098f6:	da5f      	bge.n	80099b8 <__ieee754_atan2+0x148>
 80098f8:	a13d      	add	r1, pc, #244	; (adr r1, 80099f0 <__ieee754_atan2+0x180>)
 80098fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098fe:	e7d8      	b.n	80098b2 <__ieee754_atan2+0x42>
 8009900:	4542      	cmp	r2, r8
 8009902:	d10f      	bne.n	8009924 <__ieee754_atan2+0xb4>
 8009904:	4293      	cmp	r3, r2
 8009906:	f104 34ff 	add.w	r4, r4, #4294967295
 800990a:	d107      	bne.n	800991c <__ieee754_atan2+0xac>
 800990c:	2c02      	cmp	r4, #2
 800990e:	d84c      	bhi.n	80099aa <__ieee754_atan2+0x13a>
 8009910:	4b33      	ldr	r3, [pc, #204]	; (80099e0 <__ieee754_atan2+0x170>)
 8009912:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009916:	e9d3 0100 	ldrd	r0, r1, [r3]
 800991a:	e7ca      	b.n	80098b2 <__ieee754_atan2+0x42>
 800991c:	2c02      	cmp	r4, #2
 800991e:	d848      	bhi.n	80099b2 <__ieee754_atan2+0x142>
 8009920:	4b30      	ldr	r3, [pc, #192]	; (80099e4 <__ieee754_atan2+0x174>)
 8009922:	e7f6      	b.n	8009912 <__ieee754_atan2+0xa2>
 8009924:	4543      	cmp	r3, r8
 8009926:	d0e4      	beq.n	80098f2 <__ieee754_atan2+0x82>
 8009928:	1a9b      	subs	r3, r3, r2
 800992a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800992e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009932:	da1e      	bge.n	8009972 <__ieee754_atan2+0x102>
 8009934:	2f00      	cmp	r7, #0
 8009936:	da01      	bge.n	800993c <__ieee754_atan2+0xcc>
 8009938:	323c      	adds	r2, #60	; 0x3c
 800993a:	db1e      	blt.n	800997a <__ieee754_atan2+0x10a>
 800993c:	4632      	mov	r2, r6
 800993e:	463b      	mov	r3, r7
 8009940:	f7f6 ff34 	bl	80007ac <__aeabi_ddiv>
 8009944:	ec41 0b10 	vmov	d0, r0, r1
 8009948:	f7ff fea2 	bl	8009690 <fabs>
 800994c:	f7ff fd00 	bl	8009350 <atan>
 8009950:	ec51 0b10 	vmov	r0, r1, d0
 8009954:	2c01      	cmp	r4, #1
 8009956:	d013      	beq.n	8009980 <__ieee754_atan2+0x110>
 8009958:	2c02      	cmp	r4, #2
 800995a:	d015      	beq.n	8009988 <__ieee754_atan2+0x118>
 800995c:	2c00      	cmp	r4, #0
 800995e:	d0a8      	beq.n	80098b2 <__ieee754_atan2+0x42>
 8009960:	a317      	add	r3, pc, #92	; (adr r3, 80099c0 <__ieee754_atan2+0x150>)
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	f7f6 fc3f 	bl	80001e8 <__aeabi_dsub>
 800996a:	a317      	add	r3, pc, #92	; (adr r3, 80099c8 <__ieee754_atan2+0x158>)
 800996c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009970:	e014      	b.n	800999c <__ieee754_atan2+0x12c>
 8009972:	a117      	add	r1, pc, #92	; (adr r1, 80099d0 <__ieee754_atan2+0x160>)
 8009974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009978:	e7ec      	b.n	8009954 <__ieee754_atan2+0xe4>
 800997a:	2000      	movs	r0, #0
 800997c:	2100      	movs	r1, #0
 800997e:	e7e9      	b.n	8009954 <__ieee754_atan2+0xe4>
 8009980:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009984:	4619      	mov	r1, r3
 8009986:	e794      	b.n	80098b2 <__ieee754_atan2+0x42>
 8009988:	a30d      	add	r3, pc, #52	; (adr r3, 80099c0 <__ieee754_atan2+0x150>)
 800998a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998e:	f7f6 fc2b 	bl	80001e8 <__aeabi_dsub>
 8009992:	4602      	mov	r2, r0
 8009994:	460b      	mov	r3, r1
 8009996:	a10c      	add	r1, pc, #48	; (adr r1, 80099c8 <__ieee754_atan2+0x158>)
 8009998:	e9d1 0100 	ldrd	r0, r1, [r1]
 800999c:	f7f6 fc24 	bl	80001e8 <__aeabi_dsub>
 80099a0:	e787      	b.n	80098b2 <__ieee754_atan2+0x42>
 80099a2:	a109      	add	r1, pc, #36	; (adr r1, 80099c8 <__ieee754_atan2+0x158>)
 80099a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099a8:	e783      	b.n	80098b2 <__ieee754_atan2+0x42>
 80099aa:	a10b      	add	r1, pc, #44	; (adr r1, 80099d8 <__ieee754_atan2+0x168>)
 80099ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099b0:	e77f      	b.n	80098b2 <__ieee754_atan2+0x42>
 80099b2:	2000      	movs	r0, #0
 80099b4:	2100      	movs	r1, #0
 80099b6:	e77c      	b.n	80098b2 <__ieee754_atan2+0x42>
 80099b8:	a105      	add	r1, pc, #20	; (adr r1, 80099d0 <__ieee754_atan2+0x160>)
 80099ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099be:	e778      	b.n	80098b2 <__ieee754_atan2+0x42>
 80099c0:	33145c07 	.word	0x33145c07
 80099c4:	3ca1a626 	.word	0x3ca1a626
 80099c8:	54442d18 	.word	0x54442d18
 80099cc:	400921fb 	.word	0x400921fb
 80099d0:	54442d18 	.word	0x54442d18
 80099d4:	3ff921fb 	.word	0x3ff921fb
 80099d8:	54442d18 	.word	0x54442d18
 80099dc:	3fe921fb 	.word	0x3fe921fb
 80099e0:	08009e98 	.word	0x08009e98
 80099e4:	08009eb0 	.word	0x08009eb0
 80099e8:	54442d18 	.word	0x54442d18
 80099ec:	c00921fb 	.word	0xc00921fb
 80099f0:	54442d18 	.word	0x54442d18
 80099f4:	bff921fb 	.word	0xbff921fb
 80099f8:	7ff00000 	.word	0x7ff00000
 80099fc:	00000000 	.word	0x00000000

08009a00 <__ieee754_log>:
 8009a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a04:	ec51 0b10 	vmov	r0, r1, d0
 8009a08:	ed2d 8b04 	vpush	{d8-d9}
 8009a0c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009a10:	b083      	sub	sp, #12
 8009a12:	460d      	mov	r5, r1
 8009a14:	da29      	bge.n	8009a6a <__ieee754_log+0x6a>
 8009a16:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a1a:	4303      	orrs	r3, r0
 8009a1c:	ee10 2a10 	vmov	r2, s0
 8009a20:	d10c      	bne.n	8009a3c <__ieee754_log+0x3c>
 8009a22:	49cf      	ldr	r1, [pc, #828]	; (8009d60 <__ieee754_log+0x360>)
 8009a24:	2200      	movs	r2, #0
 8009a26:	2300      	movs	r3, #0
 8009a28:	2000      	movs	r0, #0
 8009a2a:	f7f6 febf 	bl	80007ac <__aeabi_ddiv>
 8009a2e:	ec41 0b10 	vmov	d0, r0, r1
 8009a32:	b003      	add	sp, #12
 8009a34:	ecbd 8b04 	vpop	{d8-d9}
 8009a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a3c:	2900      	cmp	r1, #0
 8009a3e:	da05      	bge.n	8009a4c <__ieee754_log+0x4c>
 8009a40:	460b      	mov	r3, r1
 8009a42:	f7f6 fbd1 	bl	80001e8 <__aeabi_dsub>
 8009a46:	2200      	movs	r2, #0
 8009a48:	2300      	movs	r3, #0
 8009a4a:	e7ee      	b.n	8009a2a <__ieee754_log+0x2a>
 8009a4c:	4bc5      	ldr	r3, [pc, #788]	; (8009d64 <__ieee754_log+0x364>)
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f7f6 fd82 	bl	8000558 <__aeabi_dmul>
 8009a54:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8009a58:	460d      	mov	r5, r1
 8009a5a:	4ac3      	ldr	r2, [pc, #780]	; (8009d68 <__ieee754_log+0x368>)
 8009a5c:	4295      	cmp	r5, r2
 8009a5e:	dd06      	ble.n	8009a6e <__ieee754_log+0x6e>
 8009a60:	4602      	mov	r2, r0
 8009a62:	460b      	mov	r3, r1
 8009a64:	f7f6 fbc2 	bl	80001ec <__adddf3>
 8009a68:	e7e1      	b.n	8009a2e <__ieee754_log+0x2e>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	e7f5      	b.n	8009a5a <__ieee754_log+0x5a>
 8009a6e:	152c      	asrs	r4, r5, #20
 8009a70:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009a74:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009a78:	441c      	add	r4, r3
 8009a7a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8009a7e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8009a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a86:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8009a8a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8009a8e:	ea42 0105 	orr.w	r1, r2, r5
 8009a92:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009a96:	2200      	movs	r2, #0
 8009a98:	4bb4      	ldr	r3, [pc, #720]	; (8009d6c <__ieee754_log+0x36c>)
 8009a9a:	f7f6 fba5 	bl	80001e8 <__aeabi_dsub>
 8009a9e:	1cab      	adds	r3, r5, #2
 8009aa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	4682      	mov	sl, r0
 8009aa8:	468b      	mov	fp, r1
 8009aaa:	f04f 0200 	mov.w	r2, #0
 8009aae:	dc53      	bgt.n	8009b58 <__ieee754_log+0x158>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f7f6 ffb9 	bl	8000a28 <__aeabi_dcmpeq>
 8009ab6:	b1d0      	cbz	r0, 8009aee <__ieee754_log+0xee>
 8009ab8:	2c00      	cmp	r4, #0
 8009aba:	f000 8122 	beq.w	8009d02 <__ieee754_log+0x302>
 8009abe:	4620      	mov	r0, r4
 8009ac0:	f7f6 fce0 	bl	8000484 <__aeabi_i2d>
 8009ac4:	a390      	add	r3, pc, #576	; (adr r3, 8009d08 <__ieee754_log+0x308>)
 8009ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aca:	4606      	mov	r6, r0
 8009acc:	460f      	mov	r7, r1
 8009ace:	f7f6 fd43 	bl	8000558 <__aeabi_dmul>
 8009ad2:	a38f      	add	r3, pc, #572	; (adr r3, 8009d10 <__ieee754_log+0x310>)
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	4604      	mov	r4, r0
 8009ada:	460d      	mov	r5, r1
 8009adc:	4630      	mov	r0, r6
 8009ade:	4639      	mov	r1, r7
 8009ae0:	f7f6 fd3a 	bl	8000558 <__aeabi_dmul>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	4620      	mov	r0, r4
 8009aea:	4629      	mov	r1, r5
 8009aec:	e7ba      	b.n	8009a64 <__ieee754_log+0x64>
 8009aee:	a38a      	add	r3, pc, #552	; (adr r3, 8009d18 <__ieee754_log+0x318>)
 8009af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af4:	4650      	mov	r0, sl
 8009af6:	4659      	mov	r1, fp
 8009af8:	f7f6 fd2e 	bl	8000558 <__aeabi_dmul>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	2000      	movs	r0, #0
 8009b02:	499b      	ldr	r1, [pc, #620]	; (8009d70 <__ieee754_log+0x370>)
 8009b04:	f7f6 fb70 	bl	80001e8 <__aeabi_dsub>
 8009b08:	4652      	mov	r2, sl
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	460f      	mov	r7, r1
 8009b0e:	465b      	mov	r3, fp
 8009b10:	4650      	mov	r0, sl
 8009b12:	4659      	mov	r1, fp
 8009b14:	f7f6 fd20 	bl	8000558 <__aeabi_dmul>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	4639      	mov	r1, r7
 8009b20:	f7f6 fd1a 	bl	8000558 <__aeabi_dmul>
 8009b24:	4606      	mov	r6, r0
 8009b26:	460f      	mov	r7, r1
 8009b28:	b914      	cbnz	r4, 8009b30 <__ieee754_log+0x130>
 8009b2a:	4632      	mov	r2, r6
 8009b2c:	463b      	mov	r3, r7
 8009b2e:	e0a2      	b.n	8009c76 <__ieee754_log+0x276>
 8009b30:	4620      	mov	r0, r4
 8009b32:	f7f6 fca7 	bl	8000484 <__aeabi_i2d>
 8009b36:	a374      	add	r3, pc, #464	; (adr r3, 8009d08 <__ieee754_log+0x308>)
 8009b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3c:	4680      	mov	r8, r0
 8009b3e:	4689      	mov	r9, r1
 8009b40:	f7f6 fd0a 	bl	8000558 <__aeabi_dmul>
 8009b44:	a372      	add	r3, pc, #456	; (adr r3, 8009d10 <__ieee754_log+0x310>)
 8009b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	460d      	mov	r5, r1
 8009b4e:	4640      	mov	r0, r8
 8009b50:	4649      	mov	r1, r9
 8009b52:	f7f6 fd01 	bl	8000558 <__aeabi_dmul>
 8009b56:	e0a7      	b.n	8009ca8 <__ieee754_log+0x2a8>
 8009b58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b5c:	f7f6 fb46 	bl	80001ec <__adddf3>
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	4650      	mov	r0, sl
 8009b66:	4659      	mov	r1, fp
 8009b68:	f7f6 fe20 	bl	80007ac <__aeabi_ddiv>
 8009b6c:	ec41 0b18 	vmov	d8, r0, r1
 8009b70:	4620      	mov	r0, r4
 8009b72:	f7f6 fc87 	bl	8000484 <__aeabi_i2d>
 8009b76:	ec53 2b18 	vmov	r2, r3, d8
 8009b7a:	ec41 0b19 	vmov	d9, r0, r1
 8009b7e:	ec51 0b18 	vmov	r0, r1, d8
 8009b82:	f7f6 fce9 	bl	8000558 <__aeabi_dmul>
 8009b86:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8009b8a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8009b8e:	9301      	str	r3, [sp, #4]
 8009b90:	4602      	mov	r2, r0
 8009b92:	460b      	mov	r3, r1
 8009b94:	4680      	mov	r8, r0
 8009b96:	4689      	mov	r9, r1
 8009b98:	f7f6 fcde 	bl	8000558 <__aeabi_dmul>
 8009b9c:	a360      	add	r3, pc, #384	; (adr r3, 8009d20 <__ieee754_log+0x320>)
 8009b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	460f      	mov	r7, r1
 8009ba6:	f7f6 fcd7 	bl	8000558 <__aeabi_dmul>
 8009baa:	a35f      	add	r3, pc, #380	; (adr r3, 8009d28 <__ieee754_log+0x328>)
 8009bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb0:	f7f6 fb1c 	bl	80001ec <__adddf3>
 8009bb4:	4632      	mov	r2, r6
 8009bb6:	463b      	mov	r3, r7
 8009bb8:	f7f6 fcce 	bl	8000558 <__aeabi_dmul>
 8009bbc:	a35c      	add	r3, pc, #368	; (adr r3, 8009d30 <__ieee754_log+0x330>)
 8009bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc2:	f7f6 fb13 	bl	80001ec <__adddf3>
 8009bc6:	4632      	mov	r2, r6
 8009bc8:	463b      	mov	r3, r7
 8009bca:	f7f6 fcc5 	bl	8000558 <__aeabi_dmul>
 8009bce:	a35a      	add	r3, pc, #360	; (adr r3, 8009d38 <__ieee754_log+0x338>)
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	f7f6 fb0a 	bl	80001ec <__adddf3>
 8009bd8:	4642      	mov	r2, r8
 8009bda:	464b      	mov	r3, r9
 8009bdc:	f7f6 fcbc 	bl	8000558 <__aeabi_dmul>
 8009be0:	a357      	add	r3, pc, #348	; (adr r3, 8009d40 <__ieee754_log+0x340>)
 8009be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be6:	4680      	mov	r8, r0
 8009be8:	4689      	mov	r9, r1
 8009bea:	4630      	mov	r0, r6
 8009bec:	4639      	mov	r1, r7
 8009bee:	f7f6 fcb3 	bl	8000558 <__aeabi_dmul>
 8009bf2:	a355      	add	r3, pc, #340	; (adr r3, 8009d48 <__ieee754_log+0x348>)
 8009bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf8:	f7f6 faf8 	bl	80001ec <__adddf3>
 8009bfc:	4632      	mov	r2, r6
 8009bfe:	463b      	mov	r3, r7
 8009c00:	f7f6 fcaa 	bl	8000558 <__aeabi_dmul>
 8009c04:	a352      	add	r3, pc, #328	; (adr r3, 8009d50 <__ieee754_log+0x350>)
 8009c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0a:	f7f6 faef 	bl	80001ec <__adddf3>
 8009c0e:	4632      	mov	r2, r6
 8009c10:	463b      	mov	r3, r7
 8009c12:	f7f6 fca1 	bl	8000558 <__aeabi_dmul>
 8009c16:	460b      	mov	r3, r1
 8009c18:	4602      	mov	r2, r0
 8009c1a:	4649      	mov	r1, r9
 8009c1c:	4640      	mov	r0, r8
 8009c1e:	f7f6 fae5 	bl	80001ec <__adddf3>
 8009c22:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8009c26:	9b01      	ldr	r3, [sp, #4]
 8009c28:	3551      	adds	r5, #81	; 0x51
 8009c2a:	431d      	orrs	r5, r3
 8009c2c:	2d00      	cmp	r5, #0
 8009c2e:	4680      	mov	r8, r0
 8009c30:	4689      	mov	r9, r1
 8009c32:	dd48      	ble.n	8009cc6 <__ieee754_log+0x2c6>
 8009c34:	4b4e      	ldr	r3, [pc, #312]	; (8009d70 <__ieee754_log+0x370>)
 8009c36:	2200      	movs	r2, #0
 8009c38:	4650      	mov	r0, sl
 8009c3a:	4659      	mov	r1, fp
 8009c3c:	f7f6 fc8c 	bl	8000558 <__aeabi_dmul>
 8009c40:	4652      	mov	r2, sl
 8009c42:	465b      	mov	r3, fp
 8009c44:	f7f6 fc88 	bl	8000558 <__aeabi_dmul>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	4606      	mov	r6, r0
 8009c4e:	460f      	mov	r7, r1
 8009c50:	4640      	mov	r0, r8
 8009c52:	4649      	mov	r1, r9
 8009c54:	f7f6 faca 	bl	80001ec <__adddf3>
 8009c58:	ec53 2b18 	vmov	r2, r3, d8
 8009c5c:	f7f6 fc7c 	bl	8000558 <__aeabi_dmul>
 8009c60:	4680      	mov	r8, r0
 8009c62:	4689      	mov	r9, r1
 8009c64:	b964      	cbnz	r4, 8009c80 <__ieee754_log+0x280>
 8009c66:	4602      	mov	r2, r0
 8009c68:	460b      	mov	r3, r1
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	4639      	mov	r1, r7
 8009c6e:	f7f6 fabb 	bl	80001e8 <__aeabi_dsub>
 8009c72:	4602      	mov	r2, r0
 8009c74:	460b      	mov	r3, r1
 8009c76:	4650      	mov	r0, sl
 8009c78:	4659      	mov	r1, fp
 8009c7a:	f7f6 fab5 	bl	80001e8 <__aeabi_dsub>
 8009c7e:	e6d6      	b.n	8009a2e <__ieee754_log+0x2e>
 8009c80:	a321      	add	r3, pc, #132	; (adr r3, 8009d08 <__ieee754_log+0x308>)
 8009c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c86:	ec51 0b19 	vmov	r0, r1, d9
 8009c8a:	f7f6 fc65 	bl	8000558 <__aeabi_dmul>
 8009c8e:	a320      	add	r3, pc, #128	; (adr r3, 8009d10 <__ieee754_log+0x310>)
 8009c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c94:	4604      	mov	r4, r0
 8009c96:	460d      	mov	r5, r1
 8009c98:	ec51 0b19 	vmov	r0, r1, d9
 8009c9c:	f7f6 fc5c 	bl	8000558 <__aeabi_dmul>
 8009ca0:	4642      	mov	r2, r8
 8009ca2:	464b      	mov	r3, r9
 8009ca4:	f7f6 faa2 	bl	80001ec <__adddf3>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	460b      	mov	r3, r1
 8009cac:	4630      	mov	r0, r6
 8009cae:	4639      	mov	r1, r7
 8009cb0:	f7f6 fa9a 	bl	80001e8 <__aeabi_dsub>
 8009cb4:	4652      	mov	r2, sl
 8009cb6:	465b      	mov	r3, fp
 8009cb8:	f7f6 fa96 	bl	80001e8 <__aeabi_dsub>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	e7d9      	b.n	8009c7a <__ieee754_log+0x27a>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4650      	mov	r0, sl
 8009ccc:	4659      	mov	r1, fp
 8009cce:	f7f6 fa8b 	bl	80001e8 <__aeabi_dsub>
 8009cd2:	ec53 2b18 	vmov	r2, r3, d8
 8009cd6:	f7f6 fc3f 	bl	8000558 <__aeabi_dmul>
 8009cda:	4606      	mov	r6, r0
 8009cdc:	460f      	mov	r7, r1
 8009cde:	2c00      	cmp	r4, #0
 8009ce0:	f43f af23 	beq.w	8009b2a <__ieee754_log+0x12a>
 8009ce4:	a308      	add	r3, pc, #32	; (adr r3, 8009d08 <__ieee754_log+0x308>)
 8009ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cea:	ec51 0b19 	vmov	r0, r1, d9
 8009cee:	f7f6 fc33 	bl	8000558 <__aeabi_dmul>
 8009cf2:	a307      	add	r3, pc, #28	; (adr r3, 8009d10 <__ieee754_log+0x310>)
 8009cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	460d      	mov	r5, r1
 8009cfc:	ec51 0b19 	vmov	r0, r1, d9
 8009d00:	e727      	b.n	8009b52 <__ieee754_log+0x152>
 8009d02:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8009d58 <__ieee754_log+0x358>
 8009d06:	e694      	b.n	8009a32 <__ieee754_log+0x32>
 8009d08:	fee00000 	.word	0xfee00000
 8009d0c:	3fe62e42 	.word	0x3fe62e42
 8009d10:	35793c76 	.word	0x35793c76
 8009d14:	3dea39ef 	.word	0x3dea39ef
 8009d18:	55555555 	.word	0x55555555
 8009d1c:	3fd55555 	.word	0x3fd55555
 8009d20:	df3e5244 	.word	0xdf3e5244
 8009d24:	3fc2f112 	.word	0x3fc2f112
 8009d28:	96cb03de 	.word	0x96cb03de
 8009d2c:	3fc74664 	.word	0x3fc74664
 8009d30:	94229359 	.word	0x94229359
 8009d34:	3fd24924 	.word	0x3fd24924
 8009d38:	55555593 	.word	0x55555593
 8009d3c:	3fe55555 	.word	0x3fe55555
 8009d40:	d078c69f 	.word	0xd078c69f
 8009d44:	3fc39a09 	.word	0x3fc39a09
 8009d48:	1d8e78af 	.word	0x1d8e78af
 8009d4c:	3fcc71c5 	.word	0x3fcc71c5
 8009d50:	9997fa04 	.word	0x9997fa04
 8009d54:	3fd99999 	.word	0x3fd99999
	...
 8009d60:	c3500000 	.word	0xc3500000
 8009d64:	43500000 	.word	0x43500000
 8009d68:	7fefffff 	.word	0x7fefffff
 8009d6c:	3ff00000 	.word	0x3ff00000
 8009d70:	3fe00000 	.word	0x3fe00000

08009d74 <_init>:
 8009d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d76:	bf00      	nop
 8009d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d7a:	bc08      	pop	{r3}
 8009d7c:	469e      	mov	lr, r3
 8009d7e:	4770      	bx	lr

08009d80 <_fini>:
 8009d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d82:	bf00      	nop
 8009d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d86:	bc08      	pop	{r3}
 8009d88:	469e      	mov	lr, r3
 8009d8a:	4770      	bx	lr
