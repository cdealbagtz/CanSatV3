
CanSat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000995c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08009b00  08009b00  00019b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c38  08009c38  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08009c38  08009c38  00019c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c40  08009c40  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c40  08009c40  00019c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c44  08009c44  00019c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08009c48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004500  20000100  08009d48  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004600  08009d48  00024600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001702b  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ed2  00000000  00000000  0003719e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001648  00000000  00000000  0003b070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001130  00000000  00000000  0003c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000196f7  00000000  00000000  0003d7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ca24  00000000  00000000  00056edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009992d  00000000  00000000  00073903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006094  00000000  00000000  0010d230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001132c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000100 	.word	0x20000100
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ae4 	.word	0x08009ae4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000104 	.word	0x20000104
 80001dc:	08009ae4 	.word	0x08009ae4

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_ldivmod>:
 8000b08:	b97b      	cbnz	r3, 8000b2a <__aeabi_ldivmod+0x22>
 8000b0a:	b972      	cbnz	r2, 8000b2a <__aeabi_ldivmod+0x22>
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	bfbe      	ittt	lt
 8000b10:	2000      	movlt	r0, #0
 8000b12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b16:	e006      	blt.n	8000b26 <__aeabi_ldivmod+0x1e>
 8000b18:	bf08      	it	eq
 8000b1a:	2800      	cmpeq	r0, #0
 8000b1c:	bf1c      	itt	ne
 8000b1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b22:	f04f 30ff 	movne.w	r0, #4294967295
 8000b26:	f000 b9bb 	b.w	8000ea0 <__aeabi_idiv0>
 8000b2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b32:	2900      	cmp	r1, #0
 8000b34:	db09      	blt.n	8000b4a <__aeabi_ldivmod+0x42>
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db1a      	blt.n	8000b70 <__aeabi_ldivmod+0x68>
 8000b3a:	f000 f84d 	bl	8000bd8 <__udivmoddi4>
 8000b3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b46:	b004      	add	sp, #16
 8000b48:	4770      	bx	lr
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db1b      	blt.n	8000b8c <__aeabi_ldivmod+0x84>
 8000b54:	f000 f840 	bl	8000bd8 <__udivmoddi4>
 8000b58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b60:	b004      	add	sp, #16
 8000b62:	4240      	negs	r0, r0
 8000b64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b68:	4252      	negs	r2, r2
 8000b6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b6e:	4770      	bx	lr
 8000b70:	4252      	negs	r2, r2
 8000b72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b76:	f000 f82f 	bl	8000bd8 <__udivmoddi4>
 8000b7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b82:	b004      	add	sp, #16
 8000b84:	4240      	negs	r0, r0
 8000b86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8a:	4770      	bx	lr
 8000b8c:	4252      	negs	r2, r2
 8000b8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b92:	f000 f821 	bl	8000bd8 <__udivmoddi4>
 8000b96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b9e:	b004      	add	sp, #16
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <Tx_MainFrame>:
S32_t AngleX, AngleY;

extern uint8_t TxBuffer[32];
extern uint8_t RxBuffer[32];

void Tx_MainFrame(void){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
	AngleX.data =  (int32_t)(MPU6050.KalmanAngleX * 100);
 8000eaa:	4b58      	ldr	r3, [pc, #352]	; (800100c <Tx_MainFrame+0x168>)
 8000eac:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	4b56      	ldr	r3, [pc, #344]	; (8001010 <Tx_MainFrame+0x16c>)
 8000eb6:	f7ff fb4f 	bl	8000558 <__aeabi_dmul>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff fdf9 	bl	8000ab8 <__aeabi_d2iz>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a52      	ldr	r2, [pc, #328]	; (8001014 <Tx_MainFrame+0x170>)
 8000eca:	6013      	str	r3, [r2, #0]
	AngleY.data =  (int32_t)(MPU6050.KalmanAngleY * 100);
 8000ecc:	4b4f      	ldr	r3, [pc, #316]	; (800100c <Tx_MainFrame+0x168>)
 8000ece:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	4b4e      	ldr	r3, [pc, #312]	; (8001010 <Tx_MainFrame+0x16c>)
 8000ed8:	f7ff fb3e 	bl	8000558 <__aeabi_dmul>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f7ff fde8 	bl	8000ab8 <__aeabi_d2iz>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a4b      	ldr	r2, [pc, #300]	; (8001018 <Tx_MainFrame+0x174>)
 8000eec:	6013      	str	r3, [r2, #0]

	TxBuffer[0]  = 0xA5;
 8000eee:	4b4b      	ldr	r3, [pc, #300]	; (800101c <Tx_MainFrame+0x178>)
 8000ef0:	22a5      	movs	r2, #165	; 0xa5
 8000ef2:	701a      	strb	r2, [r3, #0]
	TxBuffer[1]  = 0x5A;
 8000ef4:	4b49      	ldr	r3, [pc, #292]	; (800101c <Tx_MainFrame+0x178>)
 8000ef6:	225a      	movs	r2, #90	; 0x5a
 8000ef8:	705a      	strb	r2, [r3, #1]
	TxBuffer[2]  = 0x10;
 8000efa:	4b48      	ldr	r3, [pc, #288]	; (800101c <Tx_MainFrame+0x178>)
 8000efc:	2210      	movs	r2, #16
 8000efe:	709a      	strb	r2, [r3, #2]
	TxBuffer[3]  = N_message;
 8000f00:	4b47      	ldr	r3, [pc, #284]	; (8001020 <Tx_MainFrame+0x17c>)
 8000f02:	781a      	ldrb	r2, [r3, #0]
 8000f04:	4b45      	ldr	r3, [pc, #276]	; (800101c <Tx_MainFrame+0x178>)
 8000f06:	70da      	strb	r2, [r3, #3]

	TxBuffer[4]  = Temperature.bytes[0];
 8000f08:	4b46      	ldr	r3, [pc, #280]	; (8001024 <Tx_MainFrame+0x180>)
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	4b43      	ldr	r3, [pc, #268]	; (800101c <Tx_MainFrame+0x178>)
 8000f0e:	711a      	strb	r2, [r3, #4]
	TxBuffer[5]  = Temperature.bytes[1];
 8000f10:	4b44      	ldr	r3, [pc, #272]	; (8001024 <Tx_MainFrame+0x180>)
 8000f12:	785a      	ldrb	r2, [r3, #1]
 8000f14:	4b41      	ldr	r3, [pc, #260]	; (800101c <Tx_MainFrame+0x178>)
 8000f16:	715a      	strb	r2, [r3, #5]
	TxBuffer[6]  = Temperature.bytes[2];
 8000f18:	4b42      	ldr	r3, [pc, #264]	; (8001024 <Tx_MainFrame+0x180>)
 8000f1a:	789a      	ldrb	r2, [r3, #2]
 8000f1c:	4b3f      	ldr	r3, [pc, #252]	; (800101c <Tx_MainFrame+0x178>)
 8000f1e:	719a      	strb	r2, [r3, #6]
	TxBuffer[7]  = Temperature.bytes[3];
 8000f20:	4b40      	ldr	r3, [pc, #256]	; (8001024 <Tx_MainFrame+0x180>)
 8000f22:	78da      	ldrb	r2, [r3, #3]
 8000f24:	4b3d      	ldr	r3, [pc, #244]	; (800101c <Tx_MainFrame+0x178>)
 8000f26:	71da      	strb	r2, [r3, #7]

	TxBuffer[8]  = Altitud.bytes[0];
 8000f28:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <Tx_MainFrame+0x184>)
 8000f2a:	781a      	ldrb	r2, [r3, #0]
 8000f2c:	4b3b      	ldr	r3, [pc, #236]	; (800101c <Tx_MainFrame+0x178>)
 8000f2e:	721a      	strb	r2, [r3, #8]
	TxBuffer[9]  = Altitud.bytes[1];
 8000f30:	4b3d      	ldr	r3, [pc, #244]	; (8001028 <Tx_MainFrame+0x184>)
 8000f32:	785a      	ldrb	r2, [r3, #1]
 8000f34:	4b39      	ldr	r3, [pc, #228]	; (800101c <Tx_MainFrame+0x178>)
 8000f36:	725a      	strb	r2, [r3, #9]
	TxBuffer[10] = Altitud.bytes[2];
 8000f38:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <Tx_MainFrame+0x184>)
 8000f3a:	789a      	ldrb	r2, [r3, #2]
 8000f3c:	4b37      	ldr	r3, [pc, #220]	; (800101c <Tx_MainFrame+0x178>)
 8000f3e:	729a      	strb	r2, [r3, #10]
	TxBuffer[11] = Altitud.bytes[3];
 8000f40:	4b39      	ldr	r3, [pc, #228]	; (8001028 <Tx_MainFrame+0x184>)
 8000f42:	78da      	ldrb	r2, [r3, #3]
 8000f44:	4b35      	ldr	r3, [pc, #212]	; (800101c <Tx_MainFrame+0x178>)
 8000f46:	72da      	strb	r2, [r3, #11]

	TxBuffer[12] = Presure.bytes[0];
 8000f48:	4b38      	ldr	r3, [pc, #224]	; (800102c <Tx_MainFrame+0x188>)
 8000f4a:	781a      	ldrb	r2, [r3, #0]
 8000f4c:	4b33      	ldr	r3, [pc, #204]	; (800101c <Tx_MainFrame+0x178>)
 8000f4e:	731a      	strb	r2, [r3, #12]
	TxBuffer[13] = Presure.bytes[1];
 8000f50:	4b36      	ldr	r3, [pc, #216]	; (800102c <Tx_MainFrame+0x188>)
 8000f52:	785a      	ldrb	r2, [r3, #1]
 8000f54:	4b31      	ldr	r3, [pc, #196]	; (800101c <Tx_MainFrame+0x178>)
 8000f56:	735a      	strb	r2, [r3, #13]
	TxBuffer[14] = Presure.bytes[2];
 8000f58:	4b34      	ldr	r3, [pc, #208]	; (800102c <Tx_MainFrame+0x188>)
 8000f5a:	789a      	ldrb	r2, [r3, #2]
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	; (800101c <Tx_MainFrame+0x178>)
 8000f5e:	739a      	strb	r2, [r3, #14]
	TxBuffer[15] = Presure.bytes[3];
 8000f60:	4b32      	ldr	r3, [pc, #200]	; (800102c <Tx_MainFrame+0x188>)
 8000f62:	78da      	ldrb	r2, [r3, #3]
 8000f64:	4b2d      	ldr	r3, [pc, #180]	; (800101c <Tx_MainFrame+0x178>)
 8000f66:	73da      	strb	r2, [r3, #15]

	TxBuffer[16] = AngleX.bytes[0];
 8000f68:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <Tx_MainFrame+0x170>)
 8000f6a:	781a      	ldrb	r2, [r3, #0]
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	; (800101c <Tx_MainFrame+0x178>)
 8000f6e:	741a      	strb	r2, [r3, #16]
	TxBuffer[17] = AngleX.bytes[1];
 8000f70:	4b28      	ldr	r3, [pc, #160]	; (8001014 <Tx_MainFrame+0x170>)
 8000f72:	785a      	ldrb	r2, [r3, #1]
 8000f74:	4b29      	ldr	r3, [pc, #164]	; (800101c <Tx_MainFrame+0x178>)
 8000f76:	745a      	strb	r2, [r3, #17]
	TxBuffer[18] = AngleX.bytes[2];
 8000f78:	4b26      	ldr	r3, [pc, #152]	; (8001014 <Tx_MainFrame+0x170>)
 8000f7a:	789a      	ldrb	r2, [r3, #2]
 8000f7c:	4b27      	ldr	r3, [pc, #156]	; (800101c <Tx_MainFrame+0x178>)
 8000f7e:	749a      	strb	r2, [r3, #18]
	TxBuffer[19] = AngleX.bytes[3];
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <Tx_MainFrame+0x170>)
 8000f82:	78da      	ldrb	r2, [r3, #3]
 8000f84:	4b25      	ldr	r3, [pc, #148]	; (800101c <Tx_MainFrame+0x178>)
 8000f86:	74da      	strb	r2, [r3, #19]

	TxBuffer[20] = AngleY.bytes[0];
 8000f88:	4b23      	ldr	r3, [pc, #140]	; (8001018 <Tx_MainFrame+0x174>)
 8000f8a:	781a      	ldrb	r2, [r3, #0]
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <Tx_MainFrame+0x178>)
 8000f8e:	751a      	strb	r2, [r3, #20]
	TxBuffer[21] = AngleY.bytes[1];
 8000f90:	4b21      	ldr	r3, [pc, #132]	; (8001018 <Tx_MainFrame+0x174>)
 8000f92:	785a      	ldrb	r2, [r3, #1]
 8000f94:	4b21      	ldr	r3, [pc, #132]	; (800101c <Tx_MainFrame+0x178>)
 8000f96:	755a      	strb	r2, [r3, #21]
	TxBuffer[22] = AngleY.bytes[2];
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <Tx_MainFrame+0x174>)
 8000f9a:	789a      	ldrb	r2, [r3, #2]
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <Tx_MainFrame+0x178>)
 8000f9e:	759a      	strb	r2, [r3, #22]
	TxBuffer[23] = AngleY.bytes[3];
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <Tx_MainFrame+0x174>)
 8000fa2:	78da      	ldrb	r2, [r3, #3]
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <Tx_MainFrame+0x178>)
 8000fa6:	75da      	strb	r2, [r3, #23]

	TxBuffer[24] = 0xFF;
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	; (800101c <Tx_MainFrame+0x178>)
 8000faa:	22ff      	movs	r2, #255	; 0xff
 8000fac:	761a      	strb	r2, [r3, #24]
	TxBuffer[25] = 0xFF;
 8000fae:	4b1b      	ldr	r3, [pc, #108]	; (800101c <Tx_MainFrame+0x178>)
 8000fb0:	22ff      	movs	r2, #255	; 0xff
 8000fb2:	765a      	strb	r2, [r3, #25]
	TxBuffer[26] = 0xFF;
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <Tx_MainFrame+0x178>)
 8000fb6:	22ff      	movs	r2, #255	; 0xff
 8000fb8:	769a      	strb	r2, [r3, #26]
	TxBuffer[27] = 0xFF;
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <Tx_MainFrame+0x178>)
 8000fbc:	22ff      	movs	r2, #255	; 0xff
 8000fbe:	76da      	strb	r2, [r3, #27]

	TxBuffer[28] = 0x00;
 8000fc0:	4b16      	ldr	r3, [pc, #88]	; (800101c <Tx_MainFrame+0x178>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	771a      	strb	r2, [r3, #28]
	TxBuffer[29] = 0x00;
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <Tx_MainFrame+0x178>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	775a      	strb	r2, [r3, #29]
	TxBuffer[30] = 0x00;
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <Tx_MainFrame+0x178>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	779a      	strb	r2, [r3, #30]

	for (uint8_t n = 0; n < 30; ++n) {
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	71fb      	strb	r3, [r7, #7]
 8000fd6:	e00b      	b.n	8000ff0 <Tx_MainFrame+0x14c>
		CheckSum += TxBuffer[n];
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	4a10      	ldr	r2, [pc, #64]	; (800101c <Tx_MainFrame+0x178>)
 8000fdc:	5cd2      	ldrb	r2, [r2, r3]
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <Tx_MainFrame+0x18c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <Tx_MainFrame+0x18c>)
 8000fe8:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < 30; ++n) {
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	3301      	adds	r3, #1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	2b1d      	cmp	r3, #29
 8000ff4:	d9f0      	bls.n	8000fd8 <Tx_MainFrame+0x134>
	}
	TxBuffer[31] = CheckSum;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <Tx_MainFrame+0x18c>)
 8000ff8:	781a      	ldrb	r2, [r3, #0]
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <Tx_MainFrame+0x178>)
 8000ffc:	77da      	strb	r2, [r3, #31]
	CheckSum = 0;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <Tx_MainFrame+0x18c>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000248 	.word	0x20000248
 8001010:	40590000 	.word	0x40590000
 8001014:	20000120 	.word	0x20000120
 8001018:	20000124 	.word	0x20000124
 800101c:	20000200 	.word	0x20000200
 8001020:	20000240 	.word	0x20000240
 8001024:	20000150 	.word	0x20000150
 8001028:	20000154 	.word	0x20000154
 800102c:	20000158 	.word	0x20000158
 8001030:	2000011c 	.word	0x2000011c

08001034 <Tx_SecondaryFrame>:

void Tx_SecondaryFrame(void){
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
	TxBuffer[0] = 0xA5;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <Tx_SecondaryFrame+0x60>)
 800103c:	22a5      	movs	r2, #165	; 0xa5
 800103e:	701a      	strb	r2, [r3, #0]
	TxBuffer[1] = 0x5A;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <Tx_SecondaryFrame+0x60>)
 8001042:	225a      	movs	r2, #90	; 0x5a
 8001044:	705a      	strb	r2, [r3, #1]
	TxBuffer[2] = 0x20;
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <Tx_SecondaryFrame+0x60>)
 8001048:	2220      	movs	r2, #32
 800104a:	709a      	strb	r2, [r3, #2]
	TxBuffer[3] = N_message;
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <Tx_SecondaryFrame+0x64>)
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <Tx_SecondaryFrame+0x60>)
 8001052:	70da      	strb	r2, [r3, #3]

	for (uint8_t n = 0; n < 30; ++n) {
 8001054:	2300      	movs	r3, #0
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	e00b      	b.n	8001072 <Tx_SecondaryFrame+0x3e>
		CheckSum += TxBuffer[n];
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <Tx_SecondaryFrame+0x60>)
 800105e:	5cd2      	ldrb	r2, [r2, r3]
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <Tx_SecondaryFrame+0x68>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4413      	add	r3, r2
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <Tx_SecondaryFrame+0x68>)
 800106a:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < 30; ++n) {
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	3301      	adds	r3, #1
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b1d      	cmp	r3, #29
 8001076:	d9f0      	bls.n	800105a <Tx_SecondaryFrame+0x26>
	}

	TxBuffer[31] = CheckSum;
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <Tx_SecondaryFrame+0x68>)
 800107a:	781a      	ldrb	r2, [r3, #0]
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <Tx_SecondaryFrame+0x60>)
 800107e:	77da      	strb	r2, [r3, #31]
	CheckSum = 0;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <Tx_SecondaryFrame+0x68>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000200 	.word	0x20000200
 8001098:	20000240 	.word	0x20000240
 800109c:	2000011c 	.word	0x2000011c

080010a0 <BMP280_checkState>:

extern NRF24_Config_t NRF24_Configurations_Struct;

uint8_t ErrorFlags = 0;

uint8_t BMP280_checkState(void){\
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	if(BMP280_read(ID)==0x58){
 80010a4:	20d0      	movs	r0, #208	; 0xd0
 80010a6:	f000 f8c5 	bl	8001234 <BMP280_read>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b58      	cmp	r3, #88	; 0x58
 80010ae:	d101      	bne.n	80010b4 <BMP280_checkState+0x14>
		return 0b00000001;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e000      	b.n	80010b6 <BMP280_checkState+0x16>
	}
	return 0;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <NRF24_checkState>:

uint8_t NRF24_checkState(void){
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	NRF24_ActualConfiguration();
 80010c0:	f000 ff38 	bl	8001f34 <NRF24_ActualConfiguration>
	if(NRF24_Configurations_Struct.Actual.TX_ADDR[0]==NRF24_Configurations_Struct.Actual.TX_ADDR[4]){
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <NRF24_checkState+0x2c>)
 80010c6:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <NRF24_checkState+0x2c>)
 80010cc:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d106      	bne.n	80010e2 <NRF24_checkState+0x26>
		if(NRF24_Configurations_Struct.Actual.TX_ADDR[0]==0xE7) return 0b00000010;
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <NRF24_checkState+0x2c>)
 80010d6:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 80010da:	2be7      	cmp	r3, #231	; 0xe7
 80010dc:	d101      	bne.n	80010e2 <NRF24_checkState+0x26>
 80010de:	2302      	movs	r3, #2
 80010e0:	e000      	b.n	80010e4 <NRF24_checkState+0x28>
	}
	return 0;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000015c 	.word	0x2000015c

080010ec <mpu6050_checkState>:

uint8_t mpu6050_checkState(void){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af04      	add	r7, sp, #16
	uint8_t state;
	HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x75, 1, &state, 1, 100);
 80010f2:	2364      	movs	r3, #100	; 0x64
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	2301      	movs	r3, #1
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	2275      	movs	r2, #117	; 0x75
 8001102:	21d0      	movs	r1, #208	; 0xd0
 8001104:	4806      	ldr	r0, [pc, #24]	; (8001120 <mpu6050_checkState+0x34>)
 8001106:	f003 fcfd 	bl	8004b04 <HAL_I2C_Mem_Read>
	if (state == 104) return 0b00000100;
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2b68      	cmp	r3, #104	; 0x68
 800110e:	d101      	bne.n	8001114 <mpu6050_checkState+0x28>
 8001110:	2304      	movs	r3, #4
 8001112:	e000      	b.n	8001116 <mpu6050_checkState+0x2a>
	return 0;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000504 	.word	0x20000504

08001124 <ErrorFlags_check>:

void ErrorFlags_check(void){
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	uint8_t BMP280_error = BMP280_checkState();
 800112a:	f7ff ffb9 	bl	80010a0 <BMP280_checkState>
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
	uint8_t NRF24_error = NRF24_checkState();
 8001132:	f7ff ffc3 	bl	80010bc <NRF24_checkState>
 8001136:	4603      	mov	r3, r0
 8001138:	71bb      	strb	r3, [r7, #6]
	uint8_t mpu6050_error = mpu6050_checkState();
 800113a:	f7ff ffd7 	bl	80010ec <mpu6050_checkState>
 800113e:	4603      	mov	r3, r0
 8001140:	717b      	strb	r3, [r7, #5]
	ErrorFlags = 0;
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <ErrorFlags_check+0x40>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
	ErrorFlags = BMP280_error|NRF24_error|mpu6050_error;
 8001148:	79fa      	ldrb	r2, [r7, #7]
 800114a:	79bb      	ldrb	r3, [r7, #6]
 800114c:	4313      	orrs	r3, r2
 800114e:	b2da      	uxtb	r2, r3
 8001150:	797b      	ldrb	r3, [r7, #5]
 8001152:	4313      	orrs	r3, r2
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b03      	ldr	r3, [pc, #12]	; (8001164 <ErrorFlags_check+0x40>)
 8001158:	701a      	strb	r2, [r3, #0]
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000128 	.word	0x20000128

08001168 <task_init_1ms>:

/**
  * @fn  	task_init_1ms
  * @brief  Inicializaciones para tarea de 1 milisegundo
  */
void task_init_1ms(void){
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <task_1ms>:

/**
  * @fn  	task_1ms
  * @brief  Ejecucion de tareas de 1 milisegundo
  */
void task_1ms(void){
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
	NRF24_StateMachine();
 800117a:	f001 fb1f 	bl	80027bc <NRF24_StateMachine>

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}

08001182 <task_init_10ms>:

/**
  * @fn  	task_init_10ms
  * @brief  Inicializaciones para tarea de 10 milisegundos
  */
void task_init_10ms(void){
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <task_10ms>:

/**
  * @fn  	task_10ms
  * @brief  Ejecucion de tareas de 10 milisegundos
  */
void task_10ms(void){
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	MPU6050_calculate();
 8001194:	f001 fed6 	bl	8002f44 <MPU6050_calculate>

}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}

0800119c <task_init_100ms>:

/**
  * @fn  	task_init_100ms
  * @brief  Inicializaciones para tarea de 100 milisegundos
  */
void task_init_100ms(void){
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <task_100ms>:

/**
  * @fn  	task_100ms
  * @brief  Ejecucion de tareas de 100 milisegundos
  */
void task_100ms(void){
 80011aa:	b580      	push	{r7, lr}
 80011ac:	af00      	add	r7, sp, #0
	BMP280_calculate();
 80011ae:	f000 fd1b 	bl	8001be8 <BMP280_calculate>
	ErrorFlags_check();
 80011b2:	f7ff ffb7 	bl	8001124 <ErrorFlags_check>

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}

080011ba <task_init_1000ms>:

/**
  * @fn  	task_init_1000ms
  * @brief  Inicializaciones para tarea de 1000 milisegundos
  */
void task_init_1000ms(void){
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <task_1000ms>:

/**
  * @fn  	task_1000ms
  * @brief  Ejecucion de tareas de 1000 milisegundos
  */
void task_1000ms(void){
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <BMP280_write>:
int32_t T_raw, P_raw, t_fine;
S32_t Temperature, Altitud;
U32_t Presure;


void BMP280_write(uint8_t Address, uint8_t Data){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	460a      	mov	r2, r1
 80011e2:	71fb      	strb	r3, [r7, #7]
 80011e4:	4613      	mov	r3, r2
 80011e6:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ee:	480f      	ldr	r0, [pc, #60]	; (800122c <BMP280_write+0x54>)
 80011f0:	f003 fa30 	bl	8004654 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80011fe:	1df9      	adds	r1, r7, #7
 8001200:	2364      	movs	r3, #100	; 0x64
 8001202:	2201      	movs	r2, #1
 8001204:	480a      	ldr	r0, [pc, #40]	; (8001230 <BMP280_write+0x58>)
 8001206:	f004 ffb6 	bl	8006176 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 800120a:	1db9      	adds	r1, r7, #6
 800120c:	2364      	movs	r3, #100	; 0x64
 800120e:	2201      	movs	r2, #1
 8001210:	4807      	ldr	r0, [pc, #28]	; (8001230 <BMP280_write+0x58>)
 8001212:	f004 ffb0 	bl	8006176 <HAL_SPI_Transmit>

	BMP280_unselect();
 8001216:	2201      	movs	r2, #1
 8001218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800121c:	4803      	ldr	r0, [pc, #12]	; (800122c <BMP280_write+0x54>)
 800121e:	f003 fa19 	bl	8004654 <HAL_GPIO_WritePin>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40020000 	.word	0x40020000
 8001230:	200005b0 	.word	0x200005b0

08001234 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001244:	b2db      	uxtb	r3, r3
 8001246:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800124e:	480e      	ldr	r0, [pc, #56]	; (8001288 <BMP280_read+0x54>)
 8001250:	f003 fa00 	bl	8004654 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8001254:	f107 010f 	add.w	r1, r7, #15
 8001258:	2364      	movs	r3, #100	; 0x64
 800125a:	2201      	movs	r2, #1
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <BMP280_read+0x58>)
 800125e:	f004 ff8a 	bl	8006176 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8001262:	f107 010f 	add.w	r1, r7, #15
 8001266:	2364      	movs	r3, #100	; 0x64
 8001268:	2201      	movs	r2, #1
 800126a:	4808      	ldr	r0, [pc, #32]	; (800128c <BMP280_read+0x58>)
 800126c:	f005 f8c6 	bl	80063fc <HAL_SPI_Receive>
	BMP280_unselect();
 8001270:	2201      	movs	r2, #1
 8001272:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001276:	4804      	ldr	r0, [pc, #16]	; (8001288 <BMP280_read+0x54>)
 8001278:	f003 f9ec 	bl	8004654 <HAL_GPIO_WritePin>

	return Buffer;
 800127c:	7bfb      	ldrb	r3, [r7, #15]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40020000 	.word	0x40020000
 800128c:	200005b0 	.word	0x200005b0

08001290 <BMP280_config>:

void BMP280_config(void){
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8001294:	2157      	movs	r1, #87	; 0x57
 8001296:	20f4      	movs	r0, #244	; 0xf4
 8001298:	f7ff ff9e 	bl	80011d8 <BMP280_write>
	BMP280_write(config, 0x10);
 800129c:	2110      	movs	r1, #16
 800129e:	20f5      	movs	r0, #245	; 0xf5
 80012a0:	f7ff ff9a 	bl	80011d8 <BMP280_write>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <BMP280_calibrationData>:
	uint8_t Buffer   = BMP280_read(status);
	BMP280_im_update = (Buffer&0x01);
	BMP280_measuring = (Buffer&0x08)>>3;
}

void BMP280_calibrationData(void){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 80012ae:	2388      	movs	r3, #136	; 0x88
 80012b0:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]
	BMP280_select();
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012cc:	4843      	ldr	r0, [pc, #268]	; (80013dc <BMP280_calibrationData+0x134>)
 80012ce:	f003 f9c1 	bl	8004654 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80012d2:	f107 011f 	add.w	r1, r7, #31
 80012d6:	2364      	movs	r3, #100	; 0x64
 80012d8:	2201      	movs	r2, #1
 80012da:	4841      	ldr	r0, [pc, #260]	; (80013e0 <BMP280_calibrationData+0x138>)
 80012dc:	f004 ff4b 	bl	8006176 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 80012e0:	1d39      	adds	r1, r7, #4
 80012e2:	2364      	movs	r3, #100	; 0x64
 80012e4:	2218      	movs	r2, #24
 80012e6:	483e      	ldr	r0, [pc, #248]	; (80013e0 <BMP280_calibrationData+0x138>)
 80012e8:	f005 f888 	bl	80063fc <HAL_SPI_Receive>
	BMP280_unselect();
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f2:	483a      	ldr	r0, [pc, #232]	; (80013dc <BMP280_calibrationData+0x134>)
 80012f4:	f003 f9ae 	bl	8004654 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80012f8:	797b      	ldrb	r3, [r7, #5]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	793b      	ldrb	r3, [r7, #4]
 8001300:	b21b      	sxth	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	b21b      	sxth	r3, r3
 8001306:	b29a      	uxth	r2, r3
 8001308:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <BMP280_calibrationData+0x13c>)
 800130a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21a      	sxth	r2, r3
 800131a:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <BMP280_calibrationData+0x140>)
 800131c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 800131e:	7a7b      	ldrb	r3, [r7, #9]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	7a3b      	ldrb	r3, [r7, #8]
 8001326:	b21b      	sxth	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b21a      	sxth	r2, r3
 800132c:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <BMP280_calibrationData+0x144>)
 800132e:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8001330:	7afb      	ldrb	r3, [r7, #11]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	7abb      	ldrb	r3, [r7, #10]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	b29a      	uxth	r2, r3
 8001340:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <BMP280_calibrationData+0x148>)
 8001342:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8001344:	7b7b      	ldrb	r3, [r7, #13]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b21a      	sxth	r2, r3
 800134a:	7b3b      	ldrb	r3, [r7, #12]
 800134c:	b21b      	sxth	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b21a      	sxth	r2, r3
 8001352:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <BMP280_calibrationData+0x14c>)
 8001354:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	7bbb      	ldrb	r3, [r7, #14]
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b21a      	sxth	r2, r3
 8001364:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <BMP280_calibrationData+0x150>)
 8001366:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8001368:	7c7b      	ldrb	r3, [r7, #17]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	b21a      	sxth	r2, r3
 800136e:	7c3b      	ldrb	r3, [r7, #16]
 8001370:	b21b      	sxth	r3, r3
 8001372:	4313      	orrs	r3, r2
 8001374:	b21a      	sxth	r2, r3
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <BMP280_calibrationData+0x154>)
 8001378:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 800137a:	7cfb      	ldrb	r3, [r7, #19]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b21a      	sxth	r2, r3
 8001380:	7cbb      	ldrb	r3, [r7, #18]
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21a      	sxth	r2, r3
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <BMP280_calibrationData+0x158>)
 800138a:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 800138c:	7d7b      	ldrb	r3, [r7, #21]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	b21a      	sxth	r2, r3
 8001392:	7d3b      	ldrb	r3, [r7, #20]
 8001394:	b21b      	sxth	r3, r3
 8001396:	4313      	orrs	r3, r2
 8001398:	b21a      	sxth	r2, r3
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <BMP280_calibrationData+0x15c>)
 800139c:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 800139e:	7dfb      	ldrb	r3, [r7, #23]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	7dbb      	ldrb	r3, [r7, #22]
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <BMP280_calibrationData+0x160>)
 80013ae:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 80013b0:	7e7b      	ldrb	r3, [r7, #25]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	7e3b      	ldrb	r3, [r7, #24]
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	4313      	orrs	r3, r2
 80013bc:	b21a      	sxth	r2, r3
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <BMP280_calibrationData+0x164>)
 80013c0:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 80013c2:	7efb      	ldrb	r3, [r7, #27]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	7ebb      	ldrb	r3, [r7, #26]
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <BMP280_calibrationData+0x168>)
 80013d2:	801a      	strh	r2, [r3, #0]
}
 80013d4:	bf00      	nop
 80013d6:	3720      	adds	r7, #32
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40020000 	.word	0x40020000
 80013e0:	200005b0 	.word	0x200005b0
 80013e4:	2000012a 	.word	0x2000012a
 80013e8:	2000012e 	.word	0x2000012e
 80013ec:	20000130 	.word	0x20000130
 80013f0:	2000012c 	.word	0x2000012c
 80013f4:	20000132 	.word	0x20000132
 80013f8:	20000134 	.word	0x20000134
 80013fc:	20000136 	.word	0x20000136
 8001400:	20000138 	.word	0x20000138
 8001404:	2000013a 	.word	0x2000013a
 8001408:	2000013c 	.word	0x2000013c
 800140c:	2000013e 	.word	0x2000013e
 8001410:	20000140 	.word	0x20000140

08001414 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 800141a:	23f7      	movs	r3, #247	; 0xf7
 800141c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	2300      	movs	r3, #0
 8001424:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 7100 	mov.w	r1, #512	; 0x200
 800142c:	4817      	ldr	r0, [pc, #92]	; (800148c <BMP280_readRawValues+0x78>)
 800142e:	f003 f911 	bl	8004654 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8001432:	1df9      	adds	r1, r7, #7
 8001434:	2364      	movs	r3, #100	; 0x64
 8001436:	2201      	movs	r2, #1
 8001438:	4815      	ldr	r0, [pc, #84]	; (8001490 <BMP280_readRawValues+0x7c>)
 800143a:	f004 fe9c 	bl	8006176 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 800143e:	4639      	mov	r1, r7
 8001440:	2364      	movs	r3, #100	; 0x64
 8001442:	2206      	movs	r2, #6
 8001444:	4812      	ldr	r0, [pc, #72]	; (8001490 <BMP280_readRawValues+0x7c>)
 8001446:	f004 ffd9 	bl	80063fc <HAL_SPI_Receive>
	BMP280_unselect();
 800144a:	2201      	movs	r2, #1
 800144c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001450:	480e      	ldr	r0, [pc, #56]	; (800148c <BMP280_readRawValues+0x78>)
 8001452:	f003 f8ff 	bl	8004654 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8001456:	783b      	ldrb	r3, [r7, #0]
 8001458:	031a      	lsls	r2, r3, #12
 800145a:	787b      	ldrb	r3, [r7, #1]
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	4313      	orrs	r3, r2
 8001460:	78ba      	ldrb	r2, [r7, #2]
 8001462:	0912      	lsrs	r2, r2, #4
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	4313      	orrs	r3, r2
 8001468:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <BMP280_readRawValues+0x80>)
 800146a:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	031a      	lsls	r2, r3, #12
 8001470:	793b      	ldrb	r3, [r7, #4]
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	4313      	orrs	r3, r2
 8001476:	797a      	ldrb	r2, [r7, #5]
 8001478:	0912      	lsrs	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	4313      	orrs	r3, r2
 800147e:	4a06      	ldr	r2, [pc, #24]	; (8001498 <BMP280_readRawValues+0x84>)
 8001480:	6013      	str	r3, [r2, #0]
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40020000 	.word	0x40020000
 8001490:	200005b0 	.word	0x200005b0
 8001494:	20000148 	.word	0x20000148
 8001498:	20000144 	.word	0x20000144

0800149c <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 800149c:	b480      	push	{r7}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <BMP280_measureT+0x74>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	10da      	asrs	r2, r3, #3
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <BMP280_measureT+0x78>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	4a19      	ldr	r2, [pc, #100]	; (8001518 <BMP280_measureT+0x7c>)
 80014b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	12db      	asrs	r3, r3, #11
 80014be:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	111b      	asrs	r3, r3, #4
 80014c4:	4a13      	ldr	r2, [pc, #76]	; (8001514 <BMP280_measureT+0x78>)
 80014c6:	8812      	ldrh	r2, [r2, #0]
 80014c8:	1a9b      	subs	r3, r3, r2
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	1112      	asrs	r2, r2, #4
 80014ce:	4911      	ldr	r1, [pc, #68]	; (8001514 <BMP280_measureT+0x78>)
 80014d0:	8809      	ldrh	r1, [r1, #0]
 80014d2:	1a52      	subs	r2, r2, r1
 80014d4:	fb02 f303 	mul.w	r3, r2, r3
 80014d8:	131b      	asrs	r3, r3, #12
 80014da:	4a10      	ldr	r2, [pc, #64]	; (800151c <BMP280_measureT+0x80>)
 80014dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	139b      	asrs	r3, r3, #14
 80014e6:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4413      	add	r3, r2
 80014ee:	4a0c      	ldr	r2, [pc, #48]	; (8001520 <BMP280_measureT+0x84>)
 80014f0:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <BMP280_measureT+0x84>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	3380      	adds	r3, #128	; 0x80
 80014fe:	121b      	asrs	r3, r3, #8
 8001500:	60fb      	str	r3, [r7, #12]
	return T;
 8001502:	68fb      	ldr	r3, [r7, #12]
}
 8001504:	4618      	mov	r0, r3
 8001506:	371c      	adds	r7, #28
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	20000144 	.word	0x20000144
 8001514:	2000012a 	.word	0x2000012a
 8001518:	2000012e 	.word	0x2000012e
 800151c:	20000130 	.word	0x20000130
 8001520:	2000014c 	.word	0x2000014c

08001524 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8001524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001528:	b0ca      	sub	sp, #296	; 0x128
 800152a:	af00      	add	r7, sp, #0
 800152c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001530:	4baf      	ldr	r3, [pc, #700]	; (80017f0 <BMP280_measureP+0x2cc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	17da      	asrs	r2, r3, #31
 8001536:	461c      	mov	r4, r3
 8001538:	4615      	mov	r5, r2
 800153a:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800153e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001542:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001546:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800154a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800154e:	fb03 f102 	mul.w	r1, r3, r2
 8001552:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001556:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	18ca      	adds	r2, r1, r3
 8001560:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001564:	fba3 8903 	umull	r8, r9, r3, r3
 8001568:	eb02 0309 	add.w	r3, r2, r9
 800156c:	4699      	mov	r9, r3
 800156e:	4ba1      	ldr	r3, [pc, #644]	; (80017f4 <BMP280_measureP+0x2d0>)
 8001570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001574:	b21b      	sxth	r3, r3
 8001576:	17da      	asrs	r2, r3, #31
 8001578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800157c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001580:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001584:	4603      	mov	r3, r0
 8001586:	fb03 f209 	mul.w	r2, r3, r9
 800158a:	460b      	mov	r3, r1
 800158c:	fb08 f303 	mul.w	r3, r8, r3
 8001590:	4413      	add	r3, r2
 8001592:	4602      	mov	r2, r0
 8001594:	fba8 1202 	umull	r1, r2, r8, r2
 8001598:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800159c:	460a      	mov	r2, r1
 800159e:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015a6:	4413      	add	r3, r2
 80015a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015ac:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015b0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80015b4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015b8:	4b8f      	ldr	r3, [pc, #572]	; (80017f8 <BMP280_measureP+0x2d4>)
 80015ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	17da      	asrs	r2, r3, #31
 80015c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015c6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80015ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015ce:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80015d2:	462a      	mov	r2, r5
 80015d4:	fb02 f203 	mul.w	r2, r2, r3
 80015d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015dc:	4621      	mov	r1, r4
 80015de:	fb01 f303 	mul.w	r3, r1, r3
 80015e2:	441a      	add	r2, r3
 80015e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015e8:	4621      	mov	r1, r4
 80015ea:	fba3 1301 	umull	r1, r3, r3, r1
 80015ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015f2:	460b      	mov	r3, r1
 80015f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80015f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80015fc:	18d3      	adds	r3, r2, r3
 80015fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001602:	f04f 0000 	mov.w	r0, #0
 8001606:	f04f 0100 	mov.w	r1, #0
 800160a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800160e:	462b      	mov	r3, r5
 8001610:	0459      	lsls	r1, r3, #17
 8001612:	4623      	mov	r3, r4
 8001614:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001618:	4623      	mov	r3, r4
 800161a:	0458      	lsls	r0, r3, #17
 800161c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001620:	1814      	adds	r4, r2, r0
 8001622:	643c      	str	r4, [r7, #64]	; 0x40
 8001624:	414b      	adcs	r3, r1
 8001626:	647b      	str	r3, [r7, #68]	; 0x44
 8001628:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800162c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001630:	4b72      	ldr	r3, [pc, #456]	; (80017fc <BMP280_measureP+0x2d8>)
 8001632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001636:	b21b      	sxth	r3, r3
 8001638:	17da      	asrs	r2, r3, #31
 800163a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800163e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001642:	f04f 0000 	mov.w	r0, #0
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800164e:	00d9      	lsls	r1, r3, #3
 8001650:	2000      	movs	r0, #0
 8001652:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001656:	1814      	adds	r4, r2, r0
 8001658:	63bc      	str	r4, [r7, #56]	; 0x38
 800165a:	414b      	adcs	r3, r1
 800165c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800165e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001662:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001666:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800166a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800166e:	fb03 f102 	mul.w	r1, r3, r2
 8001672:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001676:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	18ca      	adds	r2, r1, r3
 8001680:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001684:	fba3 1303 	umull	r1, r3, r3, r3
 8001688:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800168c:	460b      	mov	r3, r1
 800168e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001696:	18d3      	adds	r3, r2, r3
 8001698:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800169c:	4b58      	ldr	r3, [pc, #352]	; (8001800 <BMP280_measureP+0x2dc>)
 800169e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	17da      	asrs	r2, r3, #31
 80016a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016ae:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80016b2:	462b      	mov	r3, r5
 80016b4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016b8:	4642      	mov	r2, r8
 80016ba:	fb02 f203 	mul.w	r2, r2, r3
 80016be:	464b      	mov	r3, r9
 80016c0:	4621      	mov	r1, r4
 80016c2:	fb01 f303 	mul.w	r3, r1, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	4622      	mov	r2, r4
 80016ca:	4641      	mov	r1, r8
 80016cc:	fba2 1201 	umull	r1, r2, r2, r1
 80016d0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80016d4:	460a      	mov	r2, r1
 80016d6:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80016da:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80016de:	4413      	add	r3, r2
 80016e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016e4:	f04f 0000 	mov.w	r0, #0
 80016e8:	f04f 0100 	mov.w	r1, #0
 80016ec:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80016f0:	4623      	mov	r3, r4
 80016f2:	0a18      	lsrs	r0, r3, #8
 80016f4:	462b      	mov	r3, r5
 80016f6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80016fa:	462b      	mov	r3, r5
 80016fc:	1219      	asrs	r1, r3, #8
 80016fe:	4b41      	ldr	r3, [pc, #260]	; (8001804 <BMP280_measureP+0x2e0>)
 8001700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001704:	b21b      	sxth	r3, r3
 8001706:	17da      	asrs	r2, r3, #31
 8001708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800170c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001710:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001714:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001718:	464a      	mov	r2, r9
 800171a:	fb02 f203 	mul.w	r2, r2, r3
 800171e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001722:	4644      	mov	r4, r8
 8001724:	fb04 f303 	mul.w	r3, r4, r3
 8001728:	441a      	add	r2, r3
 800172a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800172e:	4644      	mov	r4, r8
 8001730:	fba3 4304 	umull	r4, r3, r3, r4
 8001734:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001738:	4623      	mov	r3, r4
 800173a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800173e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001742:	18d3      	adds	r3, r2, r3
 8001744:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001754:	464c      	mov	r4, r9
 8001756:	0323      	lsls	r3, r4, #12
 8001758:	4644      	mov	r4, r8
 800175a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800175e:	4644      	mov	r4, r8
 8001760:	0322      	lsls	r2, r4, #12
 8001762:	1884      	adds	r4, r0, r2
 8001764:	633c      	str	r4, [r7, #48]	; 0x30
 8001766:	eb41 0303 	adc.w	r3, r1, r3
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
 800176c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001770:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001774:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001778:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800177c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001780:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001784:	4b20      	ldr	r3, [pc, #128]	; (8001808 <BMP280_measureP+0x2e4>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	b29b      	uxth	r3, r3
 800178a:	2200      	movs	r2, #0
 800178c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001790:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001794:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001798:	462b      	mov	r3, r5
 800179a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800179e:	4642      	mov	r2, r8
 80017a0:	fb02 f203 	mul.w	r2, r2, r3
 80017a4:	464b      	mov	r3, r9
 80017a6:	4621      	mov	r1, r4
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	4622      	mov	r2, r4
 80017b0:	4641      	mov	r1, r8
 80017b2:	fba2 1201 	umull	r1, r2, r2, r1
 80017b6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017ba:	460a      	mov	r2, r1
 80017bc:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017c0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017c4:	4413      	add	r3, r2
 80017c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80017d6:	4629      	mov	r1, r5
 80017d8:	104a      	asrs	r2, r1, #1
 80017da:	4629      	mov	r1, r5
 80017dc:	17cb      	asrs	r3, r1, #31
 80017de:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 80017e2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017e6:	4313      	orrs	r3, r2
 80017e8:	d110      	bne.n	800180c <BMP280_measureP+0x2e8>
	{
	return 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e154      	b.n	8001a98 <BMP280_measureP+0x574>
 80017ee:	bf00      	nop
 80017f0:	2000014c 	.word	0x2000014c
 80017f4:	2000013a 	.word	0x2000013a
 80017f8:	20000138 	.word	0x20000138
 80017fc:	20000136 	.word	0x20000136
 8001800:	20000134 	.word	0x20000134
 8001804:	20000132 	.word	0x20000132
 8001808:	2000012c 	.word	0x2000012c
	}
	p = 1048576-adc_P;
 800180c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001810:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001814:	17da      	asrs	r2, r3, #31
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
 8001818:	62fa      	str	r2, [r7, #44]	; 0x2c
 800181a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800181e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001822:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001826:	105b      	asrs	r3, r3, #1
 8001828:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800182c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001830:	07db      	lsls	r3, r3, #31
 8001832:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001836:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800183a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800183e:	4621      	mov	r1, r4
 8001840:	1a89      	subs	r1, r1, r2
 8001842:	67b9      	str	r1, [r7, #120]	; 0x78
 8001844:	4629      	mov	r1, r5
 8001846:	eb61 0303 	sbc.w	r3, r1, r3
 800184a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800184c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001850:	4622      	mov	r2, r4
 8001852:	462b      	mov	r3, r5
 8001854:	1891      	adds	r1, r2, r2
 8001856:	6239      	str	r1, [r7, #32]
 8001858:	415b      	adcs	r3, r3
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
 800185c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001860:	4621      	mov	r1, r4
 8001862:	1851      	adds	r1, r2, r1
 8001864:	61b9      	str	r1, [r7, #24]
 8001866:	4629      	mov	r1, r5
 8001868:	414b      	adcs	r3, r1
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001878:	4649      	mov	r1, r9
 800187a:	018b      	lsls	r3, r1, #6
 800187c:	4641      	mov	r1, r8
 800187e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001882:	4641      	mov	r1, r8
 8001884:	018a      	lsls	r2, r1, #6
 8001886:	4641      	mov	r1, r8
 8001888:	1889      	adds	r1, r1, r2
 800188a:	6139      	str	r1, [r7, #16]
 800188c:	4649      	mov	r1, r9
 800188e:	eb43 0101 	adc.w	r1, r3, r1
 8001892:	6179      	str	r1, [r7, #20]
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018a0:	4649      	mov	r1, r9
 80018a2:	008b      	lsls	r3, r1, #2
 80018a4:	4641      	mov	r1, r8
 80018a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018aa:	4641      	mov	r1, r8
 80018ac:	008a      	lsls	r2, r1, #2
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	4603      	mov	r3, r0
 80018b4:	4622      	mov	r2, r4
 80018b6:	189b      	adds	r3, r3, r2
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	460b      	mov	r3, r1
 80018bc:	462a      	mov	r2, r5
 80018be:	eb42 0303 	adc.w	r3, r2, r3
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018d0:	4649      	mov	r1, r9
 80018d2:	008b      	lsls	r3, r1, #2
 80018d4:	4641      	mov	r1, r8
 80018d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018da:	4641      	mov	r1, r8
 80018dc:	008a      	lsls	r2, r1, #2
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	4603      	mov	r3, r0
 80018e4:	4622      	mov	r2, r4
 80018e6:	189b      	adds	r3, r3, r2
 80018e8:	673b      	str	r3, [r7, #112]	; 0x70
 80018ea:	462b      	mov	r3, r5
 80018ec:	460a      	mov	r2, r1
 80018ee:	eb42 0303 	adc.w	r3, r2, r3
 80018f2:	677b      	str	r3, [r7, #116]	; 0x74
 80018f4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80018f8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80018fc:	f7ff f904 	bl	8000b08 <__aeabi_ldivmod>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001908:	4b66      	ldr	r3, [pc, #408]	; (8001aa4 <BMP280_measureP+0x580>)
 800190a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190e:	b21b      	sxth	r3, r3
 8001910:	17da      	asrs	r2, r3, #31
 8001912:	66bb      	str	r3, [r7, #104]	; 0x68
 8001914:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001916:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800191a:	f04f 0000 	mov.w	r0, #0
 800191e:	f04f 0100 	mov.w	r1, #0
 8001922:	0b50      	lsrs	r0, r2, #13
 8001924:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001928:	1359      	asrs	r1, r3, #13
 800192a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800192e:	462b      	mov	r3, r5
 8001930:	fb00 f203 	mul.w	r2, r0, r3
 8001934:	4623      	mov	r3, r4
 8001936:	fb03 f301 	mul.w	r3, r3, r1
 800193a:	4413      	add	r3, r2
 800193c:	4622      	mov	r2, r4
 800193e:	fba2 1200 	umull	r1, r2, r2, r0
 8001942:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001946:	460a      	mov	r2, r1
 8001948:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800194c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001950:	4413      	add	r3, r2
 8001952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001956:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800195a:	f04f 0000 	mov.w	r0, #0
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	0b50      	lsrs	r0, r2, #13
 8001964:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001968:	1359      	asrs	r1, r3, #13
 800196a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800196e:	462b      	mov	r3, r5
 8001970:	fb00 f203 	mul.w	r2, r0, r3
 8001974:	4623      	mov	r3, r4
 8001976:	fb03 f301 	mul.w	r3, r3, r1
 800197a:	4413      	add	r3, r2
 800197c:	4622      	mov	r2, r4
 800197e:	fba2 1200 	umull	r1, r2, r2, r0
 8001982:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001986:	460a      	mov	r2, r1
 8001988:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800198c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001990:	4413      	add	r3, r2
 8001992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019a2:	4621      	mov	r1, r4
 80019a4:	0e4a      	lsrs	r2, r1, #25
 80019a6:	4629      	mov	r1, r5
 80019a8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019ac:	4629      	mov	r1, r5
 80019ae:	164b      	asrs	r3, r1, #25
 80019b0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80019b4:	4b3c      	ldr	r3, [pc, #240]	; (8001aa8 <BMP280_measureP+0x584>)
 80019b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	17da      	asrs	r2, r3, #31
 80019be:	663b      	str	r3, [r7, #96]	; 0x60
 80019c0:	667a      	str	r2, [r7, #100]	; 0x64
 80019c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019c6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019ca:	462a      	mov	r2, r5
 80019cc:	fb02 f203 	mul.w	r2, r2, r3
 80019d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019d4:	4621      	mov	r1, r4
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80019e0:	4621      	mov	r1, r4
 80019e2:	fba2 1201 	umull	r1, r2, r2, r1
 80019e6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80019ea:	460a      	mov	r2, r1
 80019ec:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80019f0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80019f4:	4413      	add	r3, r2
 80019f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a06:	4621      	mov	r1, r4
 8001a08:	0cca      	lsrs	r2, r1, #19
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a10:	4629      	mov	r1, r5
 8001a12:	14cb      	asrs	r3, r1, #19
 8001a14:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a18:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a20:	1884      	adds	r4, r0, r2
 8001a22:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a24:	eb41 0303 	adc.w	r3, r1, r3
 8001a28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a2a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a2e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a32:	4621      	mov	r1, r4
 8001a34:	1889      	adds	r1, r1, r2
 8001a36:	6539      	str	r1, [r7, #80]	; 0x50
 8001a38:	4629      	mov	r1, r5
 8001a3a:	eb43 0101 	adc.w	r1, r3, r1
 8001a3e:	6579      	str	r1, [r7, #84]	; 0x54
 8001a40:	f04f 0000 	mov.w	r0, #0
 8001a44:	f04f 0100 	mov.w	r1, #0
 8001a48:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a4c:	4623      	mov	r3, r4
 8001a4e:	0a18      	lsrs	r0, r3, #8
 8001a50:	462b      	mov	r3, r5
 8001a52:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a56:	462b      	mov	r3, r5
 8001a58:	1219      	asrs	r1, r3, #8
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <BMP280_measureP+0x588>)
 8001a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	17da      	asrs	r2, r3, #31
 8001a64:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a66:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001a74:	464c      	mov	r4, r9
 8001a76:	0123      	lsls	r3, r4, #4
 8001a78:	4644      	mov	r4, r8
 8001a7a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a7e:	4644      	mov	r4, r8
 8001a80:	0122      	lsls	r2, r4, #4
 8001a82:	1884      	adds	r4, r0, r2
 8001a84:	603c      	str	r4, [r7, #0]
 8001a86:	eb41 0303 	adc.w	r3, r1, r3
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a90:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001a94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aa4:	20000140 	.word	0x20000140
 8001aa8:	2000013e 	.word	0x2000013e
 8001aac:	2000013c 	.word	0x2000013c

08001ab0 <BMP280_measureH>:

int32_t BMP280_measureH(int32_t Pres, int32_t Temp){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <BMP280_measureH+0x14>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e062      	b.n	8001b8a <BMP280_measureH+0xda>
	var1 = -log((((double)Pres)/100)/101325);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7fe fcdd 	bl	8000484 <__aeabi_i2d>
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <BMP280_measureH+0x100>)
 8001ad0:	f7fe fe6c 	bl	80007ac <__aeabi_ddiv>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	a32e      	add	r3, pc, #184	; (adr r3, 8001b98 <BMP280_measureH+0xe8>)
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	f7fe fe63 	bl	80007ac <__aeabi_ddiv>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	ec43 2b17 	vmov	d7, r2, r3
 8001aee:	eeb0 0a47 	vmov.f32	s0, s14
 8001af2:	eef0 0a67 	vmov.f32	s1, s15
 8001af6:	f007 fa77 	bl	8008fe8 <log>
 8001afa:	ec53 2b10 	vmov	r2, r3, d0
 8001afe:	4611      	mov	r1, r2
 8001b00:	61b9      	str	r1, [r7, #24]
 8001b02:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b06:	61fb      	str	r3, [r7, #28]

	if(var1 == 0) return 0;
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b14:	f7fe ff88 	bl	8000a28 <__aeabi_dcmpeq>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <BMP280_measureH+0x72>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e033      	b.n	8001b8a <BMP280_measureH+0xda>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8001b22:	6838      	ldr	r0, [r7, #0]
 8001b24:	f7fe fcae 	bl	8000484 <__aeabi_i2d>
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <BMP280_measureH+0x100>)
 8001b2e:	f7fe fe3d 	bl	80007ac <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	a319      	add	r3, pc, #100	; (adr r3, 8001ba0 <BMP280_measureH+0xf0>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	f7fe fb54 	bl	80001ec <__adddf3>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	a117      	add	r1, pc, #92	; (adr r1, 8001ba8 <BMP280_measureH+0xf8>)
 8001b4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b4e:	f7fe fe2d 	bl	80007ac <__aeabi_ddiv>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	e9c7 2304 	strd	r2, r3, [r7, #16]
	h = (var1/var2)*100;
 8001b5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b62:	f7fe fe23 	bl	80007ac <__aeabi_ddiv>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <BMP280_measureH+0x100>)
 8001b74:	f7fe fcf0 	bl	8000558 <__aeabi_dmul>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t)h;
 8001b80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b84:	f7fe ff98 	bl	8000ab8 <__aeabi_d2iz>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	f3af 8000 	nop.w
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	40f8bcd0 	.word	0x40f8bcd0
 8001ba0:	66666666 	.word	0x66666666
 8001ba4:	40711266 	.word	0x40711266
 8001ba8:	ca402a92 	.word	0xca402a92
 8001bac:	3fa17e3e 	.word	0x3fa17e3e
 8001bb0:	40590000 	.word	0x40590000

08001bb4 <BMP280_init>:

void BMP280_init(void){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bbe:	4808      	ldr	r0, [pc, #32]	; (8001be0 <BMP280_init+0x2c>)
 8001bc0:	f002 fd48 	bl	8004654 <HAL_GPIO_WritePin>
	BMP280_config();
 8001bc4:	f7ff fb64 	bl	8001290 <BMP280_config>
	BMP280_ID = BMP280_read(0x89);
 8001bc8:	2089      	movs	r0, #137	; 0x89
 8001bca:	f7ff fb33 	bl	8001234 <BMP280_read>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <BMP280_init+0x30>)
 8001bd4:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001bd6:	f7ff fb67 	bl	80012a8 <BMP280_calibrationData>
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40020000 	.word	0x40020000
 8001be4:	20000129 	.word	0x20000129

08001be8 <BMP280_calculate>:

void BMP280_calculate(void){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	BMP280_readRawValues();
 8001bec:	f7ff fc12 	bl	8001414 <BMP280_readRawValues>
	Temperature.data = BMP280_measureT(T_raw);
 8001bf0:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <BMP280_calculate+0x4c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fc51 	bl	800149c <BMP280_measureT>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a0e      	ldr	r2, [pc, #56]	; (8001c38 <BMP280_calculate+0x50>)
 8001bfe:	6013      	str	r3, [r2, #0]
	Presure.data     = (BMP280_measureP(P_raw)*100)/256;
 8001c00:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <BMP280_calculate+0x54>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fc8d 	bl	8001524 <BMP280_measureP>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2264      	movs	r2, #100	; 0x64
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	0a1b      	lsrs	r3, r3, #8
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <BMP280_calculate+0x58>)
 8001c18:	601a      	str	r2, [r3, #0]
	Altitud.data = BMP280_measureH(Presure.data, Temperature.data);
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <BMP280_calculate+0x58>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a06      	ldr	r2, [pc, #24]	; (8001c38 <BMP280_calculate+0x50>)
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff43 	bl	8001ab0 <BMP280_measureH>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <BMP280_calculate+0x5c>)
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000144 	.word	0x20000144
 8001c38:	20000150 	.word	0x20000150
 8001c3c:	20000148 	.word	0x20000148
 8001c40:	20000158 	.word	0x20000158
 8001c44:	20000154 	.word	0x20000154

08001c48 <NRF24_write>:

uint8_t N_message, Struct2transmit, Transmision_cont;



void NRF24_write(uint8_t Adr, uint8_t data){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f043 0320 	orr.w	r3, r3, #32
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <NRF24_write+0x54>)
 8001c6a:	f002 fcf3 	bl	8004654 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001c6e:	1dfb      	adds	r3, r7, #7
 8001c70:	2201      	movs	r2, #1
 8001c72:	4619      	mov	r1, r3
 8001c74:	480a      	ldr	r0, [pc, #40]	; (8001ca0 <NRF24_write+0x58>)
 8001c76:	f004 fe89 	bl	800698c <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &data, 1);
 8001c7a:	1dbb      	adds	r3, r7, #6
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <NRF24_write+0x58>)
 8001c82:	f004 fe83 	bl	800698c <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 8001c86:	2201      	movs	r2, #1
 8001c88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c8c:	4803      	ldr	r0, [pc, #12]	; (8001c9c <NRF24_write+0x54>)
 8001c8e:	f002 fce1 	bl	8004654 <HAL_GPIO_WritePin>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	20000558 	.word	0x20000558

08001ca4 <NRF24_Addr_write>:

void NRF24_Addr_write(uint8_t Adr,uint8_t *ADDRESS){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	71fb      	strb	r3, [r7, #7]
	Adr |= W_REGISTER;
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	f043 0320 	orr.w	r3, r3, #32
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[5];
	buffer[0] = ADDRESS[4];
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	791b      	ldrb	r3, [r3, #4]
 8001cbe:	723b      	strb	r3, [r7, #8]
	buffer[1] = ADDRESS[3];
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	78db      	ldrb	r3, [r3, #3]
 8001cc4:	727b      	strb	r3, [r7, #9]
	buffer[2] = ADDRESS[2];
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	789b      	ldrb	r3, [r3, #2]
 8001cca:	72bb      	strb	r3, [r7, #10]
	buffer[3] = ADDRESS[1];
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	785b      	ldrb	r3, [r3, #1]
 8001cd0:	72fb      	strb	r3, [r7, #11]
	buffer[4] = ADDRESS[0];
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	733b      	strb	r3, [r7, #12]

	NRF24_select();
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cde:	4812      	ldr	r0, [pc, #72]	; (8001d28 <NRF24_Addr_write+0x84>)
 8001ce0:	f002 fcb8 	bl	8004654 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001ce4:	1dfb      	adds	r3, r7, #7
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4810      	ldr	r0, [pc, #64]	; (8001d2c <NRF24_Addr_write+0x88>)
 8001cec:	f004 fe4e 	bl	800698c <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	e00b      	b.n	8001d0e <NRF24_Addr_write+0x6a>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &buffer[n], 1);
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	f107 0208 	add.w	r2, r7, #8
 8001cfc:	4413      	add	r3, r2
 8001cfe:	2201      	movs	r2, #1
 8001d00:	4619      	mov	r1, r3
 8001d02:	480a      	ldr	r0, [pc, #40]	; (8001d2c <NRF24_Addr_write+0x88>)
 8001d04:	f004 fe42 	bl	800698c <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d9f0      	bls.n	8001cf6 <NRF24_Addr_write+0x52>
	}

	NRF24_unselect();
 8001d14:	2201      	movs	r2, #1
 8001d16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d1a:	4803      	ldr	r0, [pc, #12]	; (8001d28 <NRF24_Addr_write+0x84>)
 8001d1c:	f002 fc9a 	bl	8004654 <HAL_GPIO_WritePin>

}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	20000558 	.word	0x20000558

08001d30 <NRF24_read>:

uint8_t NRF24_read(uint8_t Adr){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	uint8_t Replay;
	NRF24_select();
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d40:	480d      	ldr	r0, [pc, #52]	; (8001d78 <NRF24_read+0x48>)
 8001d42:	f002 fc87 	bl	8004654 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001d46:	1dfb      	adds	r3, r7, #7
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	480b      	ldr	r0, [pc, #44]	; (8001d7c <NRF24_read+0x4c>)
 8001d4e:	f004 fe1d 	bl	800698c <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(SPI_NRF24, &Replay, 1);
 8001d52:	f107 030f 	add.w	r3, r7, #15
 8001d56:	2201      	movs	r2, #1
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4808      	ldr	r0, [pc, #32]	; (8001d7c <NRF24_read+0x4c>)
 8001d5c:	f004 fec8 	bl	8006af0 <HAL_SPI_Receive_DMA>
	NRF24_unselect();
 8001d60:	2201      	movs	r2, #1
 8001d62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d66:	4804      	ldr	r0, [pc, #16]	; (8001d78 <NRF24_read+0x48>)
 8001d68:	f002 fc74 	bl	8004654 <HAL_GPIO_WritePin>
	return Replay;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	20000558 	.word	0x20000558

08001d80 <NRF24_Addr_read>:

void NRF24_Addr_read(uint8_t Adr){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[5];
	NRF24_select();
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d90:	4836      	ldr	r0, [pc, #216]	; (8001e6c <NRF24_Addr_read+0xec>)
 8001d92:	f002 fc5f 	bl	8004654 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4834      	ldr	r0, [pc, #208]	; (8001e70 <NRF24_Addr_read+0xf0>)
 8001d9e:	f004 fdf5 	bl	800698c <HAL_SPI_Transmit_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	e00b      	b.n	8001dc0 <NRF24_Addr_read+0x40>
		HAL_SPI_Receive_DMA(SPI_NRF24, &Buffer[i], 1);
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	f107 0208 	add.w	r2, r7, #8
 8001dae:	4413      	add	r3, r2
 8001db0:	2201      	movs	r2, #1
 8001db2:	4619      	mov	r1, r3
 8001db4:	482e      	ldr	r0, [pc, #184]	; (8001e70 <NRF24_Addr_read+0xf0>)
 8001db6:	f004 fe9b 	bl	8006af0 <HAL_SPI_Receive_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d9f0      	bls.n	8001da8 <NRF24_Addr_read+0x28>
	}
	NRF24_unselect();
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dcc:	4827      	ldr	r0, [pc, #156]	; (8001e6c <NRF24_Addr_read+0xec>)
 8001dce:	f002 fc41 	bl	8004654 <HAL_GPIO_WritePin>
	switch (Adr) {
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	2b10      	cmp	r3, #16
 8001dd6:	d030      	beq.n	8001e3a <NRF24_Addr_read+0xba>
 8001dd8:	2b10      	cmp	r3, #16
 8001dda:	dc43      	bgt.n	8001e64 <NRF24_Addr_read+0xe4>
 8001ddc:	2b0a      	cmp	r3, #10
 8001dde:	d002      	beq.n	8001de6 <NRF24_Addr_read+0x66>
 8001de0:	2b0b      	cmp	r3, #11
 8001de2:	d015      	beq.n	8001e10 <NRF24_Addr_read+0x90>
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
			break;
	}
}
 8001de4:	e03e      	b.n	8001e64 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[4]=Buffer[0];
 8001de6:	7a3a      	ldrb	r2, [r7, #8]
 8001de8:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <NRF24_Addr_read+0xf4>)
 8001dea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[3]=Buffer[1];
 8001dee:	7a7a      	ldrb	r2, [r7, #9]
 8001df0:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <NRF24_Addr_read+0xf4>)
 8001df2:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[2]=Buffer[2];
 8001df6:	7aba      	ldrb	r2, [r7, #10]
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <NRF24_Addr_read+0xf4>)
 8001dfa:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[1]=Buffer[3];
 8001dfe:	7afa      	ldrb	r2, [r7, #11]
 8001e00:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <NRF24_Addr_read+0xf4>)
 8001e02:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[0]=Buffer[4];
 8001e06:	7b3a      	ldrb	r2, [r7, #12]
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <NRF24_Addr_read+0xf4>)
 8001e0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			break;
 8001e0e:	e029      	b.n	8001e64 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[4]=Buffer[0];
 8001e10:	7a3a      	ldrb	r2, [r7, #8]
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <NRF24_Addr_read+0xf4>)
 8001e14:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[3]=Buffer[1];
 8001e18:	7a7a      	ldrb	r2, [r7, #9]
 8001e1a:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <NRF24_Addr_read+0xf4>)
 8001e1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[2]=Buffer[2];
 8001e20:	7aba      	ldrb	r2, [r7, #10]
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <NRF24_Addr_read+0xf4>)
 8001e24:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[1]=Buffer[3];
 8001e28:	7afa      	ldrb	r2, [r7, #11]
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <NRF24_Addr_read+0xf4>)
 8001e2c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[0]=Buffer[4];
 8001e30:	7b3a      	ldrb	r2, [r7, #12]
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <NRF24_Addr_read+0xf4>)
 8001e34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
			break;
 8001e38:	e014      	b.n	8001e64 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.TX_ADDR[4]=Buffer[0];
 8001e3a:	7a3a      	ldrb	r2, [r7, #8]
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <NRF24_Addr_read+0xf4>)
 8001e3e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			NRF24_Configurations_Struct.Actual.TX_ADDR[3]=Buffer[1];
 8001e42:	7a7a      	ldrb	r2, [r7, #9]
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <NRF24_Addr_read+0xf4>)
 8001e46:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
 8001e4a:	7aba      	ldrb	r2, [r7, #10]
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <NRF24_Addr_read+0xf4>)
 8001e4e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
 8001e52:	7afa      	ldrb	r2, [r7, #11]
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <NRF24_Addr_read+0xf4>)
 8001e56:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
 8001e5a:	7b3a      	ldrb	r2, [r7, #12]
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <NRF24_Addr_read+0xf4>)
 8001e5e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
			break;
 8001e62:	bf00      	nop
}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	20000558 	.word	0x20000558
 8001e74:	2000015c 	.word	0x2000015c

08001e78 <NRF24_FlushTxFIFO>:

void NRF24_FlushTxFIFO(void){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_TX;
 8001e7e:	23e1      	movs	r3, #225	; 0xe1
 8001e80:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8001e82:	2200      	movs	r2, #0
 8001e84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e88:	4809      	ldr	r0, [pc, #36]	; (8001eb0 <NRF24_FlushTxFIFO+0x38>)
 8001e8a:	f002 fbe3 	bl	8004654 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001e8e:	1dfb      	adds	r3, r7, #7
 8001e90:	2201      	movs	r2, #1
 8001e92:	4619      	mov	r1, r3
 8001e94:	4807      	ldr	r0, [pc, #28]	; (8001eb4 <NRF24_FlushTxFIFO+0x3c>)
 8001e96:	f004 fd79 	bl	800698c <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ea0:	4803      	ldr	r0, [pc, #12]	; (8001eb0 <NRF24_FlushTxFIFO+0x38>)
 8001ea2:	f002 fbd7 	bl	8004654 <HAL_GPIO_WritePin>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40020400 	.word	0x40020400
 8001eb4:	20000558 	.word	0x20000558

08001eb8 <NRF24_FlushRxFIFO>:

void NRF24_FlushRxFIFO(void){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_RX;
 8001ebe:	23e2      	movs	r3, #226	; 0xe2
 8001ec0:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ec8:	4809      	ldr	r0, [pc, #36]	; (8001ef0 <NRF24_FlushRxFIFO+0x38>)
 8001eca:	f002 fbc3 	bl	8004654 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001ece:	1dfb      	adds	r3, r7, #7
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4807      	ldr	r0, [pc, #28]	; (8001ef4 <NRF24_FlushRxFIFO+0x3c>)
 8001ed6:	f004 fd59 	bl	800698c <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 8001eda:	2201      	movs	r2, #1
 8001edc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ee0:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <NRF24_FlushRxFIFO+0x38>)
 8001ee2:	f002 fbb7 	bl	8004654 <HAL_GPIO_WritePin>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40020400 	.word	0x40020400
 8001ef4:	20000558 	.word	0x20000558

08001ef8 <NRF24_PowerUp>:

void NRF24_PowerUp(void){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
	uint8_t Adr = 0x00;
 8001efe:	2300      	movs	r3, #0
 8001f00:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer= NRF24_read(Adr);
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff13 	bl	8001d30 <NRF24_read>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	f043 0320 	orr.w	r3, r3, #32
 8001f14:	71fb      	strb	r3, [r7, #7]
	Buffer |= 0x02;
 8001f16:	79bb      	ldrb	r3, [r7, #6]
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	71bb      	strb	r3, [r7, #6]
	NRF24_write(Adr, Buffer);
 8001f1e:	79ba      	ldrb	r2, [r7, #6]
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fe8f 	bl	8001c48 <NRF24_write>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <NRF24_ActualConfiguration>:

void NRF24_ActualConfiguration(void){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	NRF24_Configurations_Struct.Actual.CONFIG 		= NRF24_read(CONFIG);
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f7ff fef9 	bl	8001d30 <NRF24_read>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b5f      	ldr	r3, [pc, #380]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8001f44:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	NRF24_Configurations_Struct.Actual.EN_AA  		= NRF24_read(EN_AA);
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f7ff fef1 	bl	8001d30 <NRF24_read>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b5b      	ldr	r3, [pc, #364]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8001f54:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	NRF24_Configurations_Struct.Actual.EN_RXADDR  	= NRF24_read(EN_RXADDR);
 8001f58:	2002      	movs	r0, #2
 8001f5a:	f7ff fee9 	bl	8001d30 <NRF24_read>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b57      	ldr	r3, [pc, #348]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8001f64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	NRF24_Configurations_Struct.Actual.SETUP_AW  	= NRF24_read(SETUP_AW);
 8001f68:	2003      	movs	r0, #3
 8001f6a:	f7ff fee1 	bl	8001d30 <NRF24_read>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b53      	ldr	r3, [pc, #332]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8001f74:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	NRF24_Configurations_Struct.Actual.SETUP_RETR 	= NRF24_read(SETUP_RETR);
 8001f78:	2004      	movs	r0, #4
 8001f7a:	f7ff fed9 	bl	8001d30 <NRF24_read>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	461a      	mov	r2, r3
 8001f82:	4b4f      	ldr	r3, [pc, #316]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8001f84:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	NRF24_Configurations_Struct.Actual.RF_CH  		= NRF24_read(RF_CH);
 8001f88:	2005      	movs	r0, #5
 8001f8a:	f7ff fed1 	bl	8001d30 <NRF24_read>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b4b      	ldr	r3, [pc, #300]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8001f94:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	NRF24_Configurations_Struct.Actual.RF_SETUP  	= NRF24_read(RF_SETUP);
 8001f98:	2006      	movs	r0, #6
 8001f9a:	f7ff fec9 	bl	8001d30 <NRF24_read>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b47      	ldr	r3, [pc, #284]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8001fa4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	NRF24_Configurations_Struct.Actual.STATUS  		= NRF24_read(STATUS);
 8001fa8:	2007      	movs	r0, #7
 8001faa:	f7ff fec1 	bl	8001d30 <NRF24_read>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b43      	ldr	r3, [pc, #268]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8001fb4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	NRF24_Configurations_Struct.Actual.OBSERVE  	= NRF24_read(OBSERVE);
 8001fb8:	2008      	movs	r0, #8
 8001fba:	f7ff feb9 	bl	8001d30 <NRF24_read>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b3f      	ldr	r3, [pc, #252]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8001fc4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	NRF24_Configurations_Struct.Actual.CD  			= NRF24_read(CD);
 8001fc8:	2009      	movs	r0, #9
 8001fca:	f7ff feb1 	bl	8001d30 <NRF24_read>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b3b      	ldr	r3, [pc, #236]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8001fd4:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	NRF24_Addr_read(RX_ADDR_P0);
 8001fd8:	200a      	movs	r0, #10
 8001fda:	f7ff fed1 	bl	8001d80 <NRF24_Addr_read>
	NRF24_Addr_read(RX_ADDR_P1);
 8001fde:	200b      	movs	r0, #11
 8001fe0:	f7ff fece 	bl	8001d80 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_ADDR_P2  	= NRF24_read(RX_ADDR_P2);
 8001fe4:	200c      	movs	r0, #12
 8001fe6:	f7ff fea3 	bl	8001d30 <NRF24_read>
 8001fea:	4603      	mov	r3, r0
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8001ff0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	NRF24_Configurations_Struct.Actual.RX_ADDR_P3 	= NRF24_read(RX_ADDR_P3);
 8001ff4:	200d      	movs	r0, #13
 8001ff6:	f7ff fe9b 	bl	8001d30 <NRF24_read>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8002000:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	NRF24_Configurations_Struct.Actual.RX_ADDR_P4  	= NRF24_read(RX_ADDR_P4);
 8002004:	200e      	movs	r0, #14
 8002006:	f7ff fe93 	bl	8001d30 <NRF24_read>
 800200a:	4603      	mov	r3, r0
 800200c:	461a      	mov	r2, r3
 800200e:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8002010:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	NRF24_Configurations_Struct.Actual.RX_ADDR_P5  	= NRF24_read(RX_ADDR_P5);
 8002014:	200f      	movs	r0, #15
 8002016:	f7ff fe8b 	bl	8001d30 <NRF24_read>
 800201a:	4603      	mov	r3, r0
 800201c:	461a      	mov	r2, r3
 800201e:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8002020:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	NRF24_Addr_read(TX_ADDR);
 8002024:	2010      	movs	r0, #16
 8002026:	f7ff feab 	bl	8001d80 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_PW_P0  	= NRF24_read(RX_PW_P0);
 800202a:	2011      	movs	r0, #17
 800202c:	f7ff fe80 	bl	8001d30 <NRF24_read>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8002036:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	NRF24_Configurations_Struct.Actual.RX_PW_P1  	= NRF24_read(RX_PW_P1);
 800203a:	2012      	movs	r0, #18
 800203c:	f7ff fe78 	bl	8001d30 <NRF24_read>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8002046:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	NRF24_Configurations_Struct.Actual.RX_PW_P2  	= NRF24_read(RX_PW_P2);
 800204a:	2013      	movs	r0, #19
 800204c:	f7ff fe70 	bl	8001d30 <NRF24_read>
 8002050:	4603      	mov	r3, r0
 8002052:	461a      	mov	r2, r3
 8002054:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8002056:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	NRF24_Configurations_Struct.Actual.RX_PW_P3  	= NRF24_read(RX_PW_P3);
 800205a:	2014      	movs	r0, #20
 800205c:	f7ff fe68 	bl	8001d30 <NRF24_read>
 8002060:	4603      	mov	r3, r0
 8002062:	461a      	mov	r2, r3
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8002066:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	NRF24_Configurations_Struct.Actual.RX_PW_P4  	= NRF24_read(RX_PW_P4);
 800206a:	2015      	movs	r0, #21
 800206c:	f7ff fe60 	bl	8001d30 <NRF24_read>
 8002070:	4603      	mov	r3, r0
 8002072:	461a      	mov	r2, r3
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8002076:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	NRF24_Configurations_Struct.Actual.RX_PW_P5  	= NRF24_read(RX_PW_P5);
 800207a:	2016      	movs	r0, #22
 800207c:	f7ff fe58 	bl	8001d30 <NRF24_read>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8002086:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	NRF24_Configurations_Struct.Actual.FIFO_STATUS  = NRF24_read(FIFO_STATUS);
 800208a:	2017      	movs	r0, #23
 800208c:	f7ff fe50 	bl	8001d30 <NRF24_read>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 8002096:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	NRF24_Configurations_Struct.Actual.DYNPD  		= NRF24_read(DYNPD);
 800209a:	201c      	movs	r0, #28
 800209c:	f7ff fe48 	bl	8001d30 <NRF24_read>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 80020a6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	NRF24_Configurations_Struct.Actual.FEATURE  	= NRF24_read(FEATURE);
 80020aa:	201d      	movs	r0, #29
 80020ac:	f7ff fe40 	bl	8001d30 <NRF24_read>
 80020b0:	4603      	mov	r3, r0
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b02      	ldr	r3, [pc, #8]	; (80020c0 <NRF24_ActualConfiguration+0x18c>)
 80020b6:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	2000015c 	.word	0x2000015c

080020c4 <NRF24_config>:

void NRF24_config(NRF24_Address_Configurations_t Configuration_struct){
 80020c4:	b084      	sub	sp, #16
 80020c6:	b580      	push	{r7, lr}
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	f107 0c08 	add.w	ip, r7, #8
 80020ce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	NRF24_write(CONFIG,	Configuration_struct.CONFIG);
 80020d2:	7a3b      	ldrb	r3, [r7, #8]
 80020d4:	4619      	mov	r1, r3
 80020d6:	2000      	movs	r0, #0
 80020d8:	f7ff fdb6 	bl	8001c48 <NRF24_write>
	NRF24_write(EN_AA, Configuration_struct.EN_AA);
 80020dc:	7a7b      	ldrb	r3, [r7, #9]
 80020de:	4619      	mov	r1, r3
 80020e0:	2001      	movs	r0, #1
 80020e2:	f7ff fdb1 	bl	8001c48 <NRF24_write>
	NRF24_write(EN_RXADDR,Configuration_struct.EN_RXADDR);
 80020e6:	7abb      	ldrb	r3, [r7, #10]
 80020e8:	4619      	mov	r1, r3
 80020ea:	2002      	movs	r0, #2
 80020ec:	f7ff fdac 	bl	8001c48 <NRF24_write>
	NRF24_write(SETUP_AW,Configuration_struct.SETUP_AW);
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	4619      	mov	r1, r3
 80020f4:	2003      	movs	r0, #3
 80020f6:	f7ff fda7 	bl	8001c48 <NRF24_write>
	NRF24_write(SETUP_RETR,Configuration_struct.SETUP_RETR);
 80020fa:	7b3b      	ldrb	r3, [r7, #12]
 80020fc:	4619      	mov	r1, r3
 80020fe:	2004      	movs	r0, #4
 8002100:	f7ff fda2 	bl	8001c48 <NRF24_write>
	NRF24_write(RF_CH,Configuration_struct.RF_CH);
 8002104:	7b7b      	ldrb	r3, [r7, #13]
 8002106:	4619      	mov	r1, r3
 8002108:	2005      	movs	r0, #5
 800210a:	f7ff fd9d 	bl	8001c48 <NRF24_write>
	NRF24_write(RF_SETUP,Configuration_struct.RF_SETUP);
 800210e:	7bbb      	ldrb	r3, [r7, #14]
 8002110:	4619      	mov	r1, r3
 8002112:	2006      	movs	r0, #6
 8002114:	f7ff fd98 	bl	8001c48 <NRF24_write>
	NRF24_write(STATUS,Configuration_struct.STATUS);
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	4619      	mov	r1, r3
 800211c:	2007      	movs	r0, #7
 800211e:	f7ff fd93 	bl	8001c48 <NRF24_write>
	NRF24_write(OBSERVE,Configuration_struct.OBSERVE);
 8002122:	7c3b      	ldrb	r3, [r7, #16]
 8002124:	4619      	mov	r1, r3
 8002126:	2008      	movs	r0, #8
 8002128:	f7ff fd8e 	bl	8001c48 <NRF24_write>
	NRF24_write(CD,Configuration_struct.CD);
 800212c:	7c7b      	ldrb	r3, [r7, #17]
 800212e:	4619      	mov	r1, r3
 8002130:	2009      	movs	r0, #9
 8002132:	f7ff fd89 	bl	8001c48 <NRF24_write>
	NRF24_Addr_write(RX_ADDR_P0, Configuration_struct.RX_ADDR_P0);
 8002136:	f107 0312 	add.w	r3, r7, #18
 800213a:	4619      	mov	r1, r3
 800213c:	200a      	movs	r0, #10
 800213e:	f7ff fdb1 	bl	8001ca4 <NRF24_Addr_write>
	NRF24_Addr_write(RX_ADDR_P1, Configuration_struct.RX_ADDR_P1);
 8002142:	f107 0317 	add.w	r3, r7, #23
 8002146:	4619      	mov	r1, r3
 8002148:	200b      	movs	r0, #11
 800214a:	f7ff fdab 	bl	8001ca4 <NRF24_Addr_write>
	NRF24_write(RX_ADDR_P2,Configuration_struct.RX_ADDR_P2);
 800214e:	7f3b      	ldrb	r3, [r7, #28]
 8002150:	4619      	mov	r1, r3
 8002152:	200c      	movs	r0, #12
 8002154:	f7ff fd78 	bl	8001c48 <NRF24_write>
	NRF24_write(RX_ADDR_P3,Configuration_struct.RX_ADDR_P3);
 8002158:	7f7b      	ldrb	r3, [r7, #29]
 800215a:	4619      	mov	r1, r3
 800215c:	200d      	movs	r0, #13
 800215e:	f7ff fd73 	bl	8001c48 <NRF24_write>
	NRF24_write(RX_ADDR_P4,Configuration_struct.RX_ADDR_P4);
 8002162:	7fbb      	ldrb	r3, [r7, #30]
 8002164:	4619      	mov	r1, r3
 8002166:	200e      	movs	r0, #14
 8002168:	f7ff fd6e 	bl	8001c48 <NRF24_write>
	NRF24_write(RX_ADDR_P5,Configuration_struct.RX_ADDR_P5);
 800216c:	7ffb      	ldrb	r3, [r7, #31]
 800216e:	4619      	mov	r1, r3
 8002170:	200f      	movs	r0, #15
 8002172:	f7ff fd69 	bl	8001c48 <NRF24_write>
	NRF24_Addr_write(TX_ADDR, Configuration_struct.TX_ADDR);
 8002176:	f107 0320 	add.w	r3, r7, #32
 800217a:	4619      	mov	r1, r3
 800217c:	2010      	movs	r0, #16
 800217e:	f7ff fd91 	bl	8001ca4 <NRF24_Addr_write>
	NRF24_write(RX_PW_P0,Configuration_struct.RX_PW_P0);
 8002182:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002186:	4619      	mov	r1, r3
 8002188:	2011      	movs	r0, #17
 800218a:	f7ff fd5d 	bl	8001c48 <NRF24_write>
	NRF24_write(RX_PW_P1,Configuration_struct.RX_PW_P1);
 800218e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002192:	4619      	mov	r1, r3
 8002194:	2012      	movs	r0, #18
 8002196:	f7ff fd57 	bl	8001c48 <NRF24_write>
	NRF24_write(RX_PW_P2,Configuration_struct.RX_PW_P2);
 800219a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800219e:	4619      	mov	r1, r3
 80021a0:	2013      	movs	r0, #19
 80021a2:	f7ff fd51 	bl	8001c48 <NRF24_write>
	NRF24_write(RX_PW_P3,Configuration_struct.RX_PW_P3);
 80021a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80021aa:	4619      	mov	r1, r3
 80021ac:	2014      	movs	r0, #20
 80021ae:	f7ff fd4b 	bl	8001c48 <NRF24_write>
	NRF24_write(RX_PW_P4,Configuration_struct.RX_PW_P4);
 80021b2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80021b6:	4619      	mov	r1, r3
 80021b8:	2015      	movs	r0, #21
 80021ba:	f7ff fd45 	bl	8001c48 <NRF24_write>
	NRF24_write(RX_PW_P5,Configuration_struct.RX_PW_P5);
 80021be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80021c2:	4619      	mov	r1, r3
 80021c4:	2016      	movs	r0, #22
 80021c6:	f7ff fd3f 	bl	8001c48 <NRF24_write>
	NRF24_write(FIFO_STATUS,Configuration_struct.FIFO_STATUS);
 80021ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80021ce:	4619      	mov	r1, r3
 80021d0:	2017      	movs	r0, #23
 80021d2:	f7ff fd39 	bl	8001c48 <NRF24_write>
	NRF24_write(DYNPD,Configuration_struct.DYNPD);
 80021d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021da:	4619      	mov	r1, r3
 80021dc:	201c      	movs	r0, #28
 80021de:	f7ff fd33 	bl	8001c48 <NRF24_write>
	NRF24_write(FEATURE,Configuration_struct.FEATURE);
 80021e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021e6:	4619      	mov	r1, r3
 80021e8:	201d      	movs	r0, #29
 80021ea:	f7ff fd2d 	bl	8001c48 <NRF24_write>
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021f6:	b004      	add	sp, #16
 80021f8:	4770      	bx	lr
	...

080021fc <NRF24_DefaultConfiguration>:

void NRF24_DefaultConfiguration(void){
 80021fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fe:	b087      	sub	sp, #28
 8002200:	af06      	add	r7, sp, #24
	NRF24_FlushTxFIFO();
 8002202:	f7ff fe39 	bl	8001e78 <NRF24_FlushTxFIFO>
	NRF24_FlushRxFIFO();
 8002206:	f7ff fe57 	bl	8001eb8 <NRF24_FlushRxFIFO>
	NRF24_Configurations_Struct.Default.CONFIG 			= 0x78;
 800220a:	4b48      	ldr	r3, [pc, #288]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 800220c:	2278      	movs	r2, #120	; 0x78
 800220e:	701a      	strb	r2, [r3, #0]
	NRF24_Configurations_Struct.Default.EN_AA  			= 0x3F;
 8002210:	4b46      	ldr	r3, [pc, #280]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 8002212:	223f      	movs	r2, #63	; 0x3f
 8002214:	705a      	strb	r2, [r3, #1]
	NRF24_Configurations_Struct.Default.EN_RXADDR  		= 0x03;
 8002216:	4b45      	ldr	r3, [pc, #276]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 8002218:	2203      	movs	r2, #3
 800221a:	709a      	strb	r2, [r3, #2]
	NRF24_Configurations_Struct.Default.SETUP_AW  		= 0x03;
 800221c:	4b43      	ldr	r3, [pc, #268]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 800221e:	2203      	movs	r2, #3
 8002220:	70da      	strb	r2, [r3, #3]
	NRF24_Configurations_Struct.Default.SETUP_RETR 		= 0x03;
 8002222:	4b42      	ldr	r3, [pc, #264]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 8002224:	2203      	movs	r2, #3
 8002226:	711a      	strb	r2, [r3, #4]
	NRF24_Configurations_Struct.Default.RF_CH  			= 0x02;
 8002228:	4b40      	ldr	r3, [pc, #256]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 800222a:	2202      	movs	r2, #2
 800222c:	715a      	strb	r2, [r3, #5]
	NRF24_Configurations_Struct.Default.RF_SETUP  		= 0x09;
 800222e:	4b3f      	ldr	r3, [pc, #252]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 8002230:	2209      	movs	r2, #9
 8002232:	719a      	strb	r2, [r3, #6]
	NRF24_Configurations_Struct.Default.STATUS  		= 0X70;
 8002234:	4b3d      	ldr	r3, [pc, #244]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 8002236:	2270      	movs	r2, #112	; 0x70
 8002238:	71da      	strb	r2, [r3, #7]
	NRF24_Configurations_Struct.Default.OBSERVE  		= 0X00;
 800223a:	4b3c      	ldr	r3, [pc, #240]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 800223c:	2200      	movs	r2, #0
 800223e:	721a      	strb	r2, [r3, #8]
	NRF24_Configurations_Struct.Default.CD  			= 0x00;
 8002240:	4b3a      	ldr	r3, [pc, #232]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 8002242:	2200      	movs	r2, #0
 8002244:	725a      	strb	r2, [r3, #9]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[0]  	= 0xE7;
 8002246:	4b39      	ldr	r3, [pc, #228]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 8002248:	22e7      	movs	r2, #231	; 0xe7
 800224a:	729a      	strb	r2, [r3, #10]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[1]  	= 0xE7;
 800224c:	4b37      	ldr	r3, [pc, #220]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 800224e:	22e7      	movs	r2, #231	; 0xe7
 8002250:	72da      	strb	r2, [r3, #11]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[2]  	= 0xE7;
 8002252:	4b36      	ldr	r3, [pc, #216]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 8002254:	22e7      	movs	r2, #231	; 0xe7
 8002256:	731a      	strb	r2, [r3, #12]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[3]  	= 0xE7;
 8002258:	4b34      	ldr	r3, [pc, #208]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 800225a:	22e7      	movs	r2, #231	; 0xe7
 800225c:	735a      	strb	r2, [r3, #13]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[4]  	= 0xE7;
 800225e:	4b33      	ldr	r3, [pc, #204]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 8002260:	22e7      	movs	r2, #231	; 0xe7
 8002262:	739a      	strb	r2, [r3, #14]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[0]  	= 0xC2;
 8002264:	4b31      	ldr	r3, [pc, #196]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 8002266:	22c2      	movs	r2, #194	; 0xc2
 8002268:	73da      	strb	r2, [r3, #15]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[1]  	= 0xC2;
 800226a:	4b30      	ldr	r3, [pc, #192]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 800226c:	22c2      	movs	r2, #194	; 0xc2
 800226e:	741a      	strb	r2, [r3, #16]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[2]  	= 0xC2;
 8002270:	4b2e      	ldr	r3, [pc, #184]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 8002272:	22c2      	movs	r2, #194	; 0xc2
 8002274:	745a      	strb	r2, [r3, #17]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[3]  	= 0xC2;
 8002276:	4b2d      	ldr	r3, [pc, #180]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 8002278:	22c2      	movs	r2, #194	; 0xc2
 800227a:	749a      	strb	r2, [r3, #18]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[4]  	= 0xC2;
 800227c:	4b2b      	ldr	r3, [pc, #172]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 800227e:	22c2      	movs	r2, #194	; 0xc2
 8002280:	74da      	strb	r2, [r3, #19]
	NRF24_Configurations_Struct.Default.RX_ADDR_P2  	= 0xC3;
 8002282:	4b2a      	ldr	r3, [pc, #168]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 8002284:	22c3      	movs	r2, #195	; 0xc3
 8002286:	751a      	strb	r2, [r3, #20]
	NRF24_Configurations_Struct.Default.RX_ADDR_P3 		= 0xC4;
 8002288:	4b28      	ldr	r3, [pc, #160]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 800228a:	22c4      	movs	r2, #196	; 0xc4
 800228c:	755a      	strb	r2, [r3, #21]
	NRF24_Configurations_Struct.Default.RX_ADDR_P4  	= 0xC5;
 800228e:	4b27      	ldr	r3, [pc, #156]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 8002290:	22c5      	movs	r2, #197	; 0xc5
 8002292:	759a      	strb	r2, [r3, #22]
	NRF24_Configurations_Struct.Default.RX_ADDR_P5  	= 0xC6;
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 8002296:	22c6      	movs	r2, #198	; 0xc6
 8002298:	75da      	strb	r2, [r3, #23]
	NRF24_Configurations_Struct.Default.TX_ADDR[0]   	= 0xE7;
 800229a:	4b24      	ldr	r3, [pc, #144]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 800229c:	22e7      	movs	r2, #231	; 0xe7
 800229e:	761a      	strb	r2, [r3, #24]
	NRF24_Configurations_Struct.Default.TX_ADDR[1]   	= 0xE7;
 80022a0:	4b22      	ldr	r3, [pc, #136]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 80022a2:	22e7      	movs	r2, #231	; 0xe7
 80022a4:	765a      	strb	r2, [r3, #25]
	NRF24_Configurations_Struct.Default.TX_ADDR[2]   	= 0xE7;
 80022a6:	4b21      	ldr	r3, [pc, #132]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 80022a8:	22e7      	movs	r2, #231	; 0xe7
 80022aa:	769a      	strb	r2, [r3, #26]
	NRF24_Configurations_Struct.Default.TX_ADDR[3]   	= 0xE7;
 80022ac:	4b1f      	ldr	r3, [pc, #124]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 80022ae:	22e7      	movs	r2, #231	; 0xe7
 80022b0:	76da      	strb	r2, [r3, #27]
	NRF24_Configurations_Struct.Default.TX_ADDR[4]   	= 0xE7;
 80022b2:	4b1e      	ldr	r3, [pc, #120]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 80022b4:	22e7      	movs	r2, #231	; 0xe7
 80022b6:	771a      	strb	r2, [r3, #28]
	NRF24_Configurations_Struct.Default.RX_PW_P0  		= 0X20;
 80022b8:	4b1c      	ldr	r3, [pc, #112]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 80022ba:	2220      	movs	r2, #32
 80022bc:	775a      	strb	r2, [r3, #29]
	NRF24_Configurations_Struct.Default.RX_PW_P1  		= 0X20;
 80022be:	4b1b      	ldr	r3, [pc, #108]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 80022c0:	2220      	movs	r2, #32
 80022c2:	779a      	strb	r2, [r3, #30]
	NRF24_Configurations_Struct.Default.RX_PW_P2  		= 0X00;
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	77da      	strb	r2, [r3, #31]
	NRF24_Configurations_Struct.Default.RX_PW_P3  		= 0X00;
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2020 	strb.w	r2, [r3, #32]
	NRF24_Configurations_Struct.Default.RX_PW_P4  		= 0X00;
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	NRF24_Configurations_Struct.Default.RX_PW_P5  		= 0X00;
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	NRF24_Configurations_Struct.Default.FIFO_STATUS  	= 0X11;
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 80022e4:	2211      	movs	r2, #17
 80022e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	NRF24_Configurations_Struct.Default.DYNPD  			= 0X00;
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	NRF24_Configurations_Struct.Default.FEATURE  		= 0X00;
 80022f2:	4b0e      	ldr	r3, [pc, #56]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	NRF24_config(NRF24_Configurations_Struct.Default);
 80022fa:	4e0c      	ldr	r6, [pc, #48]	; (800232c <NRF24_DefaultConfiguration+0x130>)
 80022fc:	466c      	mov	r4, sp
 80022fe:	f106 0510 	add.w	r5, r6, #16
 8002302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002306:	e895 0003 	ldmia.w	r5, {r0, r1}
 800230a:	6020      	str	r0, [r4, #0]
 800230c:	3404      	adds	r4, #4
 800230e:	8021      	strh	r1, [r4, #0]
 8002310:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002314:	f7ff fed6 	bl	80020c4 <NRF24_config>
	NRF24_ActualConfiguration();
 8002318:	f7ff fe0c 	bl	8001f34 <NRF24_ActualConfiguration>
	NRF24_mode = Init;
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <NRF24_DefaultConfiguration+0x134>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
}
 8002322:	bf00      	nop
 8002324:	3704      	adds	r7, #4
 8002326:	46bd      	mov	sp, r7
 8002328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800232a:	bf00      	nop
 800232c:	2000015c 	.word	0x2000015c
 8002330:	200001ff 	.word	0x200001ff

08002334 <NRF24_RxConfiguration>:
	NRF24_config(NRF24_Configurations_Struct.Tx_mode);
	NRF24_ActualConfiguration();
	NRF24_mode = TxMode;
}

void NRF24_RxConfiguration(void){
 8002334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002336:	b087      	sub	sp, #28
 8002338:	af06      	add	r7, sp, #24
	NRF24_Configurations_Struct.Rx_mode.CONFIG 			= 0x79;
 800233a:	4b5b      	ldr	r3, [pc, #364]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 800233c:	2279      	movs	r2, #121	; 0x79
 800233e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	NRF24_Configurations_Struct.Rx_mode.EN_AA  			= 0x03;
 8002342:	4b59      	ldr	r3, [pc, #356]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 8002344:	2203      	movs	r2, #3
 8002346:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	NRF24_Configurations_Struct.Rx_mode.EN_RXADDR  		= 0x03;
 800234a:	4b57      	ldr	r3, [pc, #348]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 800234c:	2203      	movs	r2, #3
 800234e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	NRF24_Configurations_Struct.Rx_mode.SETUP_AW  		= 0x03;
 8002352:	4b55      	ldr	r3, [pc, #340]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 8002354:	2203      	movs	r2, #3
 8002356:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	NRF24_Configurations_Struct.Rx_mode.SETUP_RETR 		= 0x33;
 800235a:	4b53      	ldr	r3, [pc, #332]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 800235c:	2233      	movs	r2, #51	; 0x33
 800235e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	NRF24_Configurations_Struct.Rx_mode.RF_CH  			= 0x12;
 8002362:	4b51      	ldr	r3, [pc, #324]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 8002364:	2212      	movs	r2, #18
 8002366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	NRF24_Configurations_Struct.Rx_mode.RF_SETUP  		= 0x09;
 800236a:	4b4f      	ldr	r3, [pc, #316]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 800236c:	2209      	movs	r2, #9
 800236e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	NRF24_Configurations_Struct.Rx_mode.STATUS  		= 0X70;
 8002372:	4b4d      	ldr	r3, [pc, #308]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 8002374:	2270      	movs	r2, #112	; 0x70
 8002376:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	NRF24_Configurations_Struct.Rx_mode.OBSERVE  		= 0X00;
 800237a:	4b4b      	ldr	r3, [pc, #300]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	NRF24_Configurations_Struct.Rx_mode.CD  			= 0x00;
 8002382:	4b49      	ldr	r3, [pc, #292]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[0]  	= 0xE7;
 800238a:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 800238c:	22e7      	movs	r2, #231	; 0xe7
 800238e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[1]  	= 0xE7;
 8002392:	4b45      	ldr	r3, [pc, #276]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 8002394:	22e7      	movs	r2, #231	; 0xe7
 8002396:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[2]  	= 0xE7;
 800239a:	4b43      	ldr	r3, [pc, #268]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 800239c:	22e7      	movs	r2, #231	; 0xe7
 800239e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[3]  	= 0xE7;
 80023a2:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 80023a4:	22e7      	movs	r2, #231	; 0xe7
 80023a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[4]  	= 0xE7;
 80023aa:	4b3f      	ldr	r3, [pc, #252]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 80023ac:	22e7      	movs	r2, #231	; 0xe7
 80023ae:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[0]  	= 0xC2;
 80023b2:	4b3d      	ldr	r3, [pc, #244]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 80023b4:	22c2      	movs	r2, #194	; 0xc2
 80023b6:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[1]  	= 0xC2;
 80023ba:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 80023bc:	22c2      	movs	r2, #194	; 0xc2
 80023be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[2]  	= 0xC2;
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 80023c4:	22c2      	movs	r2, #194	; 0xc2
 80023c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[3]  	= 0xC2;
 80023ca:	4b37      	ldr	r3, [pc, #220]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 80023cc:	22c2      	movs	r2, #194	; 0xc2
 80023ce:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[4]  	= 0xC2;
 80023d2:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 80023d4:	22c2      	movs	r2, #194	; 0xc2
 80023d6:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P2  	= 0xC3;
 80023da:	4b33      	ldr	r3, [pc, #204]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 80023dc:	22c3      	movs	r2, #195	; 0xc3
 80023de:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P3 		= 0xC4;
 80023e2:	4b31      	ldr	r3, [pc, #196]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 80023e4:	22c4      	movs	r2, #196	; 0xc4
 80023e6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P4  	= 0xC5;
 80023ea:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 80023ec:	22c5      	movs	r2, #197	; 0xc5
 80023ee:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P5  	= 0xC6;
 80023f2:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 80023f4:	22c6      	movs	r2, #198	; 0xc6
 80023f6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[0]   	= 0xE7;
 80023fa:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 80023fc:	22e7      	movs	r2, #231	; 0xe7
 80023fe:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[1]   	= 0xE7;
 8002402:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 8002404:	22e7      	movs	r2, #231	; 0xe7
 8002406:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[2]   	= 0xE7;
 800240a:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 800240c:	22e7      	movs	r2, #231	; 0xe7
 800240e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[3]   	= 0xE7;
 8002412:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 8002414:	22e7      	movs	r2, #231	; 0xe7
 8002416:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[4]   	= 0xE7;
 800241a:	4b23      	ldr	r3, [pc, #140]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 800241c:	22e7      	movs	r2, #231	; 0xe7
 800241e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P0  		= 0X20;
 8002422:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 8002424:	2220      	movs	r2, #32
 8002426:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P1  		= 0X20;
 800242a:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 800242c:	2220      	movs	r2, #32
 800242e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P2  		= 0X00;
 8002432:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 8002434:	2200      	movs	r2, #0
 8002436:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P3  		= 0X00;
 800243a:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 800243c:	2200      	movs	r2, #0
 800243e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P4  		= 0X00;
 8002442:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 8002444:	2200      	movs	r2, #0
 8002446:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P5  		= 0X00;
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 800244c:	2200      	movs	r2, #0
 800244e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	NRF24_Configurations_Struct.Rx_mode.FIFO_STATUS  	= 0X11;
 8002452:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 8002454:	2211      	movs	r2, #17
 8002456:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	NRF24_Configurations_Struct.Rx_mode.DYNPD  			= 0X00;
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	NRF24_Configurations_Struct.Rx_mode.FEATURE  		= 0X00;
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	NRF24_config(NRF24_Configurations_Struct.Rx_mode);
 800246a:	4e0f      	ldr	r6, [pc, #60]	; (80024a8 <NRF24_RxConfiguration+0x174>)
 800246c:	466c      	mov	r4, sp
 800246e:	f106 055c 	add.w	r5, r6, #92	; 0x5c
 8002472:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002476:	e895 0003 	ldmia.w	r5, {r0, r1}
 800247a:	6020      	str	r0, [r4, #0]
 800247c:	3404      	adds	r4, #4
 800247e:	8021      	strh	r1, [r4, #0]
 8002480:	f106 034c 	add.w	r3, r6, #76	; 0x4c
 8002484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002486:	f7ff fe1d 	bl	80020c4 <NRF24_config>
	NRF24_ActualConfiguration();
 800248a:	f7ff fd53 	bl	8001f34 <NRF24_ActualConfiguration>
	NRF24_Enable();
 800248e:	2201      	movs	r2, #1
 8002490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002494:	4805      	ldr	r0, [pc, #20]	; (80024ac <NRF24_RxConfiguration+0x178>)
 8002496:	f002 f8dd 	bl	8004654 <HAL_GPIO_WritePin>
	NRF24_mode = RxMode;
 800249a:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <NRF24_RxConfiguration+0x17c>)
 800249c:	2202      	movs	r2, #2
 800249e:	701a      	strb	r2, [r3, #0]
}
 80024a0:	bf00      	nop
 80024a2:	3704      	adds	r7, #4
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024a8:	2000015c 	.word	0x2000015c
 80024ac:	40020400 	.word	0x40020400
 80024b0:	200001ff 	.word	0x200001ff

080024b4 <NRF24_CheckFlags>:

void NRF24_CheckFlags(void){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
	uint8_t buffer = NRF24_read(STATUS);
 80024ba:	2007      	movs	r0, #7
 80024bc:	f7ff fc38 	bl	8001d30 <NRF24_read>
 80024c0:	4603      	mov	r3, r0
 80024c2:	71fb      	strb	r3, [r7, #7]
	TX_FULL =  buffer & 0x01;
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	4b28      	ldr	r3, [pc, #160]	; (8002570 <NRF24_CheckFlags+0xbc>)
 80024ce:	701a      	strb	r2, [r3, #0]
	RX_P_NO = (buffer & 0x0E) >> 1;
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	105b      	asrs	r3, r3, #1
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	4b25      	ldr	r3, [pc, #148]	; (8002574 <NRF24_CheckFlags+0xc0>)
 80024de:	701a      	strb	r2, [r3, #0]
	MAX_RT  = (buffer & 0x10) >> 4;
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	111b      	asrs	r3, r3, #4
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	4b22      	ldr	r3, [pc, #136]	; (8002578 <NRF24_CheckFlags+0xc4>)
 80024ee:	701a      	strb	r2, [r3, #0]
	TX_DS   = (buffer & 0x20) >> 5;
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	115b      	asrs	r3, r3, #5
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	4b1f      	ldr	r3, [pc, #124]	; (800257c <NRF24_CheckFlags+0xc8>)
 80024fe:	701a      	strb	r2, [r3, #0]
	RX_DR   = (buffer & 0x40) >> 6;
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	119b      	asrs	r3, r3, #6
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	b2da      	uxtb	r2, r3
 800250c:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <NRF24_CheckFlags+0xcc>)
 800250e:	701a      	strb	r2, [r3, #0]

	buffer   = NRF24_read(FIFO_STATUS);
 8002510:	2017      	movs	r0, #23
 8002512:	f7ff fc0d 	bl	8001d30 <NRF24_read>
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
	RX_EMPTY =  buffer & 0x01;
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <NRF24_CheckFlags+0xd0>)
 8002524:	701a      	strb	r2, [r3, #0]
	RX_FULL  = (buffer & 0x02) >> 1;
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	105b      	asrs	r3, r3, #1
 800252a:	b2db      	uxtb	r3, r3
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <NRF24_CheckFlags+0xd4>)
 8002534:	701a      	strb	r2, [r3, #0]
	TX_EMPTY = (buffer & 0x10) >> 4;
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	111b      	asrs	r3, r3, #4
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <NRF24_CheckFlags+0xd8>)
 8002544:	701a      	strb	r2, [r3, #0]
	TX_FULL  = (buffer & 0x20) >> 5;
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	115b      	asrs	r3, r3, #5
 800254a:	b2db      	uxtb	r3, r3
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4b07      	ldr	r3, [pc, #28]	; (8002570 <NRF24_CheckFlags+0xbc>)
 8002554:	701a      	strb	r2, [r3, #0]
	TX_REUSE = (buffer & 0x40) >> 6;
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	119b      	asrs	r3, r3, #6
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <NRF24_CheckFlags+0xdc>)
 8002564:	701a      	strb	r2, [r3, #0]
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200001f5 	.word	0x200001f5
 8002574:	200001f6 	.word	0x200001f6
 8002578:	200001f7 	.word	0x200001f7
 800257c:	200001f8 	.word	0x200001f8
 8002580:	200001f9 	.word	0x200001f9
 8002584:	200001fa 	.word	0x200001fa
 8002588:	200001fb 	.word	0x200001fb
 800258c:	200001fc 	.word	0x200001fc
 8002590:	200001fd 	.word	0x200001fd

08002594 <NRF24_FIFO_write>:

void NRF24_FIFO_write(uint8_t *pData, uint8_t size){
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
	uint8_t Adr = W_TX_PAYLOAD;
 80025a0:	23a0      	movs	r3, #160	; 0xa0
 80025a2:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 80025a4:	2200      	movs	r2, #0
 80025a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025aa:	4812      	ldr	r0, [pc, #72]	; (80025f4 <NRF24_FIFO_write+0x60>)
 80025ac:	f002 f852 	bl	8004654 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 80025b0:	f107 030e 	add.w	r3, r7, #14
 80025b4:	2201      	movs	r2, #1
 80025b6:	4619      	mov	r1, r3
 80025b8:	480f      	ldr	r0, [pc, #60]	; (80025f8 <NRF24_FIFO_write+0x64>)
 80025ba:	f004 f9e7 	bl	800698c <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 80025be:	2300      	movs	r3, #0
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	e00a      	b.n	80025da <NRF24_FIFO_write+0x46>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &pData[n], 1);
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	2201      	movs	r2, #1
 80025cc:	4619      	mov	r1, r3
 80025ce:	480a      	ldr	r0, [pc, #40]	; (80025f8 <NRF24_FIFO_write+0x64>)
 80025d0:	f004 f9dc 	bl	800698c <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	3301      	adds	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b1f      	cmp	r3, #31
 80025de:	d9f1      	bls.n	80025c4 <NRF24_FIFO_write+0x30>
	}
	NRF24_unselect();
 80025e0:	2201      	movs	r2, #1
 80025e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025e6:	4803      	ldr	r0, [pc, #12]	; (80025f4 <NRF24_FIFO_write+0x60>)
 80025e8:	f002 f834 	bl	8004654 <HAL_GPIO_WritePin>
}
 80025ec:	bf00      	nop
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40020400 	.word	0x40020400
 80025f8:	20000558 	.word	0x20000558

080025fc <NRF24_FIFO_read>:

void NRF24_FIFO_read(uint8_t *pData){
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
	uint8_t Adr = R_RX_PAYLOAD;
 8002604:	2361      	movs	r3, #97	; 0x61
 8002606:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 8002608:	2200      	movs	r2, #0
 800260a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800260e:	4812      	ldr	r0, [pc, #72]	; (8002658 <NRF24_FIFO_read+0x5c>)
 8002610:	f002 f820 	bl	8004654 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8002614:	f107 030e 	add.w	r3, r7, #14
 8002618:	2201      	movs	r2, #1
 800261a:	4619      	mov	r1, r3
 800261c:	480f      	ldr	r0, [pc, #60]	; (800265c <NRF24_FIFO_read+0x60>)
 800261e:	f004 f9b5 	bl	800698c <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8002622:	2300      	movs	r3, #0
 8002624:	73fb      	strb	r3, [r7, #15]
 8002626:	e00a      	b.n	800263e <NRF24_FIFO_read+0x42>
		HAL_SPI_Receive_DMA(SPI_NRF24, &pData[n], 1);
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	2201      	movs	r2, #1
 8002630:	4619      	mov	r1, r3
 8002632:	480a      	ldr	r0, [pc, #40]	; (800265c <NRF24_FIFO_read+0x60>)
 8002634:	f004 fa5c 	bl	8006af0 <HAL_SPI_Receive_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	3301      	adds	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	2b1f      	cmp	r3, #31
 8002642:	d9f1      	bls.n	8002628 <NRF24_FIFO_read+0x2c>
	}
	NRF24_unselect();
 8002644:	2201      	movs	r2, #1
 8002646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800264a:	4803      	ldr	r0, [pc, #12]	; (8002658 <NRF24_FIFO_read+0x5c>)
 800264c:	f002 f802 	bl	8004654 <HAL_GPIO_WritePin>
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40020400 	.word	0x40020400
 800265c:	20000558 	.word	0x20000558

08002660 <NRF24_init>:

void NRF24_init(void){
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	NRF24_Disable();
 8002664:	2200      	movs	r2, #0
 8002666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800266a:	4808      	ldr	r0, [pc, #32]	; (800268c <NRF24_init+0x2c>)
 800266c:	f001 fff2 	bl	8004654 <HAL_GPIO_WritePin>
	NRF24_unselect();
 8002670:	2201      	movs	r2, #1
 8002672:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002676:	4805      	ldr	r0, [pc, #20]	; (800268c <NRF24_init+0x2c>)
 8002678:	f001 ffec 	bl	8004654 <HAL_GPIO_WritePin>
	NRF24_DefaultConfiguration();
 800267c:	f7ff fdbe 	bl	80021fc <NRF24_DefaultConfiguration>
	NRF24_mode = 0;
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <NRF24_init+0x30>)
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40020400 	.word	0x40020400
 8002690:	200001ff 	.word	0x200001ff

08002694 <NRF24_Receive>:


void NRF24_Receive(void){
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
	NRF24_CheckFlags();
 8002698:	f7ff ff0c 	bl	80024b4 <NRF24_CheckFlags>
	if(RX_P_NO != 7){
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <NRF24_Receive+0x1c>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b07      	cmp	r3, #7
 80026a2:	d002      	beq.n	80026aa <NRF24_Receive+0x16>
		NRF24_FIFO_read(RxBuffer);
 80026a4:	4803      	ldr	r0, [pc, #12]	; (80026b4 <NRF24_Receive+0x20>)
 80026a6:	f7ff ffa9 	bl	80025fc <NRF24_FIFO_read>
	}
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200001f6 	.word	0x200001f6
 80026b4:	20000220 	.word	0x20000220

080026b8 <NRF24_Transmit>:

void NRF24_Transmit(void){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
	NRF24_CheckFlags();
 80026bc:	f7ff fefa 	bl	80024b4 <NRF24_CheckFlags>
	if(MAX_RT)  NRF24_write(STATUS, 0x70);
 80026c0:	4b35      	ldr	r3, [pc, #212]	; (8002798 <NRF24_Transmit+0xe0>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <NRF24_Transmit+0x18>
 80026c8:	2170      	movs	r1, #112	; 0x70
 80026ca:	2007      	movs	r0, #7
 80026cc:	f7ff fabc 	bl	8001c48 <NRF24_write>
	if(TX_FULL) NRF24_FlushTxFIFO();
 80026d0:	4b32      	ldr	r3, [pc, #200]	; (800279c <NRF24_Transmit+0xe4>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <NRF24_Transmit+0x24>
 80026d8:	f7ff fbce 	bl	8001e78 <NRF24_FlushTxFIFO>
	if(Cont_TX > 10){
 80026dc:	4b30      	ldr	r3, [pc, #192]	; (80027a0 <NRF24_Transmit+0xe8>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b0a      	cmp	r3, #10
 80026e2:	d938      	bls.n	8002756 <NRF24_Transmit+0x9e>
		Cont_TX = 0;
 80026e4:	4b2e      	ldr	r3, [pc, #184]	; (80027a0 <NRF24_Transmit+0xe8>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
		switch (Struct2transmit) {
 80026ea:	4b2e      	ldr	r3, [pc, #184]	; (80027a4 <NRF24_Transmit+0xec>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d01f      	beq.n	8002732 <NRF24_Transmit+0x7a>
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	dc22      	bgt.n	800273c <NRF24_Transmit+0x84>
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <NRF24_Transmit+0x48>
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d013      	beq.n	8002726 <NRF24_Transmit+0x6e>
 80026fe:	e01d      	b.n	800273c <NRF24_Transmit+0x84>
			case MainFrame:
				Tx_MainFrame();
 8002700:	f7fe fbd0 	bl	8000ea4 <Tx_MainFrame>
				if(++Transmision_cont>=5){
 8002704:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <NRF24_Transmit+0xf0>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	3301      	adds	r3, #1
 800270a:	b2da      	uxtb	r2, r3
 800270c:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <NRF24_Transmit+0xf0>)
 800270e:	701a      	strb	r2, [r3, #0]
 8002710:	4b25      	ldr	r3, [pc, #148]	; (80027a8 <NRF24_Transmit+0xf0>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d910      	bls.n	800273a <NRF24_Transmit+0x82>
					Transmision_cont = RESET;
 8002718:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <NRF24_Transmit+0xf0>)
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
					Struct2transmit = SecondaryFrame;
 800271e:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <NRF24_Transmit+0xec>)
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002724:	e009      	b.n	800273a <NRF24_Transmit+0x82>
			case SecondaryFrame:
				Tx_SecondaryFrame();
 8002726:	f7fe fc85 	bl	8001034 <Tx_SecondaryFrame>
				Struct2transmit = MainFrame;
 800272a:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <NRF24_Transmit+0xec>)
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
				break;
 8002730:	e004      	b.n	800273c <NRF24_Transmit+0x84>
			case CommandReplay:
				Struct2transmit = MainFrame;
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <NRF24_Transmit+0xec>)
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
				break;
 8002738:	e000      	b.n	800273c <NRF24_Transmit+0x84>
				break;
 800273a:	bf00      	nop
		}
		NRF24_FIFO_write(TxBuffer, 32);
 800273c:	2120      	movs	r1, #32
 800273e:	481b      	ldr	r0, [pc, #108]	; (80027ac <NRF24_Transmit+0xf4>)
 8002740:	f7ff ff28 	bl	8002594 <NRF24_FIFO_write>
		N_message += 1;
 8002744:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <NRF24_Transmit+0xf8>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	b2da      	uxtb	r2, r3
 800274c:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <NRF24_Transmit+0xf8>)
 800274e:	701a      	strb	r2, [r3, #0]
		Transmision_Flag = RESET;
 8002750:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <NRF24_Transmit+0xfc>)
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]
	}
	switch (Transmision_Flag) {
 8002756:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <NRF24_Transmit+0xfc>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <NRF24_Transmit+0xac>
 800275e:	2b01      	cmp	r3, #1
 8002760:	d00a      	beq.n	8002778 <NRF24_Transmit+0xc0>
 8002762:	e010      	b.n	8002786 <NRF24_Transmit+0xce>
		case 0:
			NRF24_Enable();
 8002764:	2201      	movs	r2, #1
 8002766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800276a:	4813      	ldr	r0, [pc, #76]	; (80027b8 <NRF24_Transmit+0x100>)
 800276c:	f001 ff72 	bl	8004654 <HAL_GPIO_WritePin>
			Transmision_Flag = 1;
 8002770:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <NRF24_Transmit+0xfc>)
 8002772:	2201      	movs	r2, #1
 8002774:	701a      	strb	r2, [r3, #0]
			break;
 8002776:	e006      	b.n	8002786 <NRF24_Transmit+0xce>
		case 1:
			NRF24_Disable();
 8002778:	2200      	movs	r2, #0
 800277a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800277e:	480e      	ldr	r0, [pc, #56]	; (80027b8 <NRF24_Transmit+0x100>)
 8002780:	f001 ff68 	bl	8004654 <HAL_GPIO_WritePin>
			break;
 8002784:	bf00      	nop
	}
	++Cont_TX;
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <NRF24_Transmit+0xe8>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	3301      	adds	r3, #1
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <NRF24_Transmit+0xe8>)
 8002790:	701a      	strb	r2, [r3, #0]
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	200001f7 	.word	0x200001f7
 800279c:	200001f5 	.word	0x200001f5
 80027a0:	200001fe 	.word	0x200001fe
 80027a4:	20000241 	.word	0x20000241
 80027a8:	20000242 	.word	0x20000242
 80027ac:	20000200 	.word	0x20000200
 80027b0:	20000240 	.word	0x20000240
 80027b4:	200001f4 	.word	0x200001f4
 80027b8:	40020400 	.word	0x40020400

080027bc <NRF24_StateMachine>:


void NRF24_StateMachine(void){
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
	switch (NRF24_mode){
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <NRF24_StateMachine+0x4c>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d818      	bhi.n	80027fa <NRF24_StateMachine+0x3e>
 80027c8:	a201      	add	r2, pc, #4	; (adr r2, 80027d0 <NRF24_StateMachine+0x14>)
 80027ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ce:	bf00      	nop
 80027d0:	080027e1 	.word	0x080027e1
 80027d4:	080027f5 	.word	0x080027f5
 80027d8:	080027ef 	.word	0x080027ef
 80027dc:	08002801 	.word	0x08002801
		case Init:
			NRF24_RxConfiguration();
 80027e0:	f7ff fda8 	bl	8002334 <NRF24_RxConfiguration>
			NRF24_PowerUp();
 80027e4:	f7ff fb88 	bl	8001ef8 <NRF24_PowerUp>
			NRF24_ActualConfiguration();
 80027e8:	f7ff fba4 	bl	8001f34 <NRF24_ActualConfiguration>
			break;
 80027ec:	e009      	b.n	8002802 <NRF24_StateMachine+0x46>
		case RxMode:
			NRF24_Receive();
 80027ee:	f7ff ff51 	bl	8002694 <NRF24_Receive>
			break;
 80027f2:	e006      	b.n	8002802 <NRF24_StateMachine+0x46>
		case TxMode:
			NRF24_Transmit();
 80027f4:	f7ff ff60 	bl	80026b8 <NRF24_Transmit>
			break;
 80027f8:	e003      	b.n	8002802 <NRF24_StateMachine+0x46>
		case PowerSave:
			break;
		default:
			NRF24_init();
 80027fa:	f7ff ff31 	bl	8002660 <NRF24_init>
	}
}
 80027fe:	e000      	b.n	8002802 <NRF24_StateMachine+0x46>
			break;
 8002800:	bf00      	nop
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	200001ff 	.word	0x200001ff

0800280c <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af04      	add	r7, sp, #16
 8002812:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002814:	2364      	movs	r3, #100	; 0x64
 8002816:	9302      	str	r3, [sp, #8]
 8002818:	2301      	movs	r3, #1
 800281a:	9301      	str	r3, [sp, #4]
 800281c:	f107 030f 	add.w	r3, r7, #15
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	2301      	movs	r3, #1
 8002824:	2275      	movs	r2, #117	; 0x75
 8002826:	21d0      	movs	r1, #208	; 0xd0
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f002 f96b 	bl	8004b04 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	2b68      	cmp	r3, #104	; 0x68
 8002832:	d13d      	bne.n	80028b0 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002838:	2364      	movs	r3, #100	; 0x64
 800283a:	9302      	str	r3, [sp, #8]
 800283c:	2301      	movs	r3, #1
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	f107 030e 	add.w	r3, r7, #14
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	2301      	movs	r3, #1
 8002848:	226b      	movs	r2, #107	; 0x6b
 800284a:	21d0      	movs	r1, #208	; 0xd0
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f002 f85f 	bl	8004910 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002852:	2307      	movs	r3, #7
 8002854:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002856:	2364      	movs	r3, #100	; 0x64
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	2301      	movs	r3, #1
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	f107 030e 	add.w	r3, r7, #14
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2301      	movs	r3, #1
 8002866:	2219      	movs	r2, #25
 8002868:	21d0      	movs	r1, #208	; 0xd0
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f002 f850 	bl	8004910 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002870:	2300      	movs	r3, #0
 8002872:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002874:	2364      	movs	r3, #100	; 0x64
 8002876:	9302      	str	r3, [sp, #8]
 8002878:	2301      	movs	r3, #1
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	f107 030e 	add.w	r3, r7, #14
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2301      	movs	r3, #1
 8002884:	221c      	movs	r2, #28
 8002886:	21d0      	movs	r1, #208	; 0xd0
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f002 f841 	bl	8004910 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800288e:	2300      	movs	r3, #0
 8002890:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002892:	2364      	movs	r3, #100	; 0x64
 8002894:	9302      	str	r3, [sp, #8]
 8002896:	2301      	movs	r3, #1
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	f107 030e 	add.w	r3, r7, #14
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	2301      	movs	r3, #1
 80028a2:	221b      	movs	r2, #27
 80028a4:	21d0      	movs	r1, #208	; 0xd0
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f002 f832 	bl	8004910 <HAL_I2C_Mem_Write>
        return 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e000      	b.n	80028b2 <MPU6050_Init+0xa6>
    }
    return 1;
 80028b0:	2301      	movs	r3, #1
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	0000      	movs	r0, r0
 80028bc:	0000      	movs	r0, r0
	...

080028c0 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80028c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c4:	b094      	sub	sp, #80	; 0x50
 80028c6:	af04      	add	r7, sp, #16
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80028cc:	2364      	movs	r3, #100	; 0x64
 80028ce:	9302      	str	r3, [sp, #8]
 80028d0:	230e      	movs	r3, #14
 80028d2:	9301      	str	r3, [sp, #4]
 80028d4:	f107 0308 	add.w	r3, r7, #8
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	2301      	movs	r3, #1
 80028dc:	223b      	movs	r2, #59	; 0x3b
 80028de:	21d0      	movs	r1, #208	; 0xd0
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f002 f90f 	bl	8004b04 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80028e6:	7a3b      	ldrb	r3, [r7, #8]
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	b21a      	sxth	r2, r3
 80028ec:	7a7b      	ldrb	r3, [r7, #9]
 80028ee:	b21b      	sxth	r3, r3
 80028f0:	4313      	orrs	r3, r2
 80028f2:	b21a      	sxth	r2, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80028f8:	7abb      	ldrb	r3, [r7, #10]
 80028fa:	021b      	lsls	r3, r3, #8
 80028fc:	b21a      	sxth	r2, r3
 80028fe:	7afb      	ldrb	r3, [r7, #11]
 8002900:	b21b      	sxth	r3, r3
 8002902:	4313      	orrs	r3, r2
 8002904:	b21a      	sxth	r2, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800290a:	7b3b      	ldrb	r3, [r7, #12]
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	b21a      	sxth	r2, r3
 8002910:	7b7b      	ldrb	r3, [r7, #13]
 8002912:	b21b      	sxth	r3, r3
 8002914:	4313      	orrs	r3, r2
 8002916:	b21a      	sxth	r2, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800291c:	7bbb      	ldrb	r3, [r7, #14]
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	b21a      	sxth	r2, r3
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	b21b      	sxth	r3, r3
 8002926:	4313      	orrs	r3, r2
 8002928:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800292a:	7c3b      	ldrb	r3, [r7, #16]
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	b21a      	sxth	r2, r3
 8002930:	7c7b      	ldrb	r3, [r7, #17]
 8002932:	b21b      	sxth	r3, r3
 8002934:	4313      	orrs	r3, r2
 8002936:	b21a      	sxth	r2, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800293c:	7cbb      	ldrb	r3, [r7, #18]
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	b21a      	sxth	r2, r3
 8002942:	7cfb      	ldrb	r3, [r7, #19]
 8002944:	b21b      	sxth	r3, r3
 8002946:	4313      	orrs	r3, r2
 8002948:	b21a      	sxth	r2, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800294e:	7d3b      	ldrb	r3, [r7, #20]
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	b21a      	sxth	r2, r3
 8002954:	7d7b      	ldrb	r3, [r7, #21]
 8002956:	b21b      	sxth	r3, r3
 8002958:	4313      	orrs	r3, r2
 800295a:	b21a      	sxth	r2, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fd8c 	bl	8000484 <__aeabi_i2d>
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	4bbd      	ldr	r3, [pc, #756]	; (8002c68 <MPU6050_Read_All+0x3a8>)
 8002972:	f7fd ff1b 	bl	80007ac <__aeabi_ddiv>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	6839      	ldr	r1, [r7, #0]
 800297c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fd7c 	bl	8000484 <__aeabi_i2d>
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	4bb5      	ldr	r3, [pc, #724]	; (8002c68 <MPU6050_Read_All+0x3a8>)
 8002992:	f7fd ff0b 	bl	80007ac <__aeabi_ddiv>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	6839      	ldr	r1, [r7, #0]
 800299c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fd fd6c 	bl	8000484 <__aeabi_i2d>
 80029ac:	a3a8      	add	r3, pc, #672	; (adr r3, 8002c50 <MPU6050_Read_All+0x390>)
 80029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b2:	f7fd fefb 	bl	80007ac <__aeabi_ddiv>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	6839      	ldr	r1, [r7, #0]
 80029bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80029c0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80029c4:	ee07 3a90 	vmov	s15, r3
 80029c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029cc:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8002c6c <MPU6050_Read_All+0x3ac>
 80029d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029d4:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002c70 <MPU6050_Read_All+0x3b0>
 80029d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fd fd4b 	bl	8000484 <__aeabi_i2d>
 80029ee:	a39a      	add	r3, pc, #616	; (adr r3, 8002c58 <MPU6050_Read_All+0x398>)
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	f7fd feda 	bl	80007ac <__aeabi_ddiv>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	6839      	ldr	r1, [r7, #0]
 80029fe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fd3b 	bl	8000484 <__aeabi_i2d>
 8002a0e:	a392      	add	r3, pc, #584	; (adr r3, 8002c58 <MPU6050_Read_All+0x398>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f7fd feca 	bl	80007ac <__aeabi_ddiv>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	6839      	ldr	r1, [r7, #0]
 8002a1e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fd2b 	bl	8000484 <__aeabi_i2d>
 8002a2e:	a38a      	add	r3, pc, #552	; (adr r3, 8002c58 <MPU6050_Read_All+0x398>)
 8002a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a34:	f7fd feba 	bl	80007ac <__aeabi_ddiv>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	6839      	ldr	r1, [r7, #0]
 8002a3e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8002a42:	f001 f803 	bl	8003a4c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	4b8a      	ldr	r3, [pc, #552]	; (8002c74 <MPU6050_Read_All+0x3b4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fd fd08 	bl	8000464 <__aeabi_ui2d>
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	4b87      	ldr	r3, [pc, #540]	; (8002c78 <MPU6050_Read_All+0x3b8>)
 8002a5a:	f7fd fea7 	bl	80007ac <__aeabi_ddiv>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002a66:	f000 fff1 	bl	8003a4c <HAL_GetTick>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4a81      	ldr	r2, [pc, #516]	; (8002c74 <MPU6050_Read_All+0x3b4>)
 8002a6e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a76:	461a      	mov	r2, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a7e:	fb03 f202 	mul.w	r2, r3, r2
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fcf4 	bl	8000484 <__aeabi_i2d>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	ec43 2b10 	vmov	d0, r2, r3
 8002aa4:	f006 fade 	bl	8009064 <sqrt>
 8002aa8:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ab8:	f7fd ffb6 	bl	8000a28 <__aeabi_dcmpeq>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d11f      	bne.n	8002b02 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fd fcdb 	bl	8000484 <__aeabi_i2d>
 8002ace:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ad2:	f7fd fe6b 	bl	80007ac <__aeabi_ddiv>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	ec43 2b17 	vmov	d7, r2, r3
 8002ade:	eeb0 0a47 	vmov.f32	s0, s14
 8002ae2:	eef0 0a67 	vmov.f32	s1, s15
 8002ae6:	f006 faeb 	bl	80090c0 <atan>
 8002aea:	ec51 0b10 	vmov	r0, r1, d0
 8002aee:	a35c      	add	r3, pc, #368	; (adr r3, 8002c60 <MPU6050_Read_All+0x3a0>)
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f7fd fd30 	bl	8000558 <__aeabi_dmul>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002b00:	e005      	b.n	8002b0e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b14:	425b      	negs	r3, r3
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fcb4 	bl	8000484 <__aeabi_i2d>
 8002b1c:	4682      	mov	sl, r0
 8002b1e:	468b      	mov	fp, r1
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fd fcac 	bl	8000484 <__aeabi_i2d>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	ec43 2b11 	vmov	d1, r2, r3
 8002b34:	ec4b ab10 	vmov	d0, sl, fp
 8002b38:	f006 fa52 	bl	8008fe0 <atan2>
 8002b3c:	ec51 0b10 	vmov	r0, r1, d0
 8002b40:	a347      	add	r3, pc, #284	; (adr r3, 8002c60 <MPU6050_Read_All+0x3a0>)
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	f7fd fd07 	bl	8000558 <__aeabi_dmul>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	4b49      	ldr	r3, [pc, #292]	; (8002c7c <MPU6050_Read_All+0x3bc>)
 8002b58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b5c:	f7fd ff6e 	bl	8000a3c <__aeabi_dcmplt>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <MPU6050_Read_All+0x2bc>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	4b43      	ldr	r3, [pc, #268]	; (8002c80 <MPU6050_Read_All+0x3c0>)
 8002b72:	f7fd ff81 	bl	8000a78 <__aeabi_dcmpgt>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d114      	bne.n	8002ba6 <MPU6050_Read_All+0x2e6>
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	4b3f      	ldr	r3, [pc, #252]	; (8002c80 <MPU6050_Read_All+0x3c0>)
 8002b82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b86:	f7fd ff77 	bl	8000a78 <__aeabi_dcmpgt>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d015      	beq.n	8002bbc <MPU6050_Read_All+0x2fc>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	4b38      	ldr	r3, [pc, #224]	; (8002c7c <MPU6050_Read_All+0x3bc>)
 8002b9c:	f7fd ff4e 	bl	8000a3c <__aeabi_dcmplt>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8002ba6:	4937      	ldr	r1, [pc, #220]	; (8002c84 <MPU6050_Read_All+0x3c4>)
 8002ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bac:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002bb0:	6839      	ldr	r1, [r7, #0]
 8002bb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bb6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002bba:	e014      	b.n	8002be6 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002bc2:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002bc6:	eeb0 1a47 	vmov.f32	s2, s14
 8002bca:	eef0 1a67 	vmov.f32	s3, s15
 8002bce:	ed97 0b06 	vldr	d0, [r7, #24]
 8002bd2:	482c      	ldr	r0, [pc, #176]	; (8002c84 <MPU6050_Read_All+0x3c4>)
 8002bd4:	f000 f85a 	bl	8002c8c <Kalman_getAngle>
 8002bd8:	eeb0 7a40 	vmov.f32	s14, s0
 8002bdc:	eef0 7a60 	vmov.f32	s15, s1
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002bec:	4690      	mov	r8, r2
 8002bee:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <MPU6050_Read_All+0x3c0>)
 8002bf8:	4640      	mov	r0, r8
 8002bfa:	4649      	mov	r1, r9
 8002bfc:	f7fd ff3c 	bl	8000a78 <__aeabi_dcmpgt>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002c0c:	4614      	mov	r4, r2
 8002c0e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002c1e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002c22:	eeb0 1a47 	vmov.f32	s2, s14
 8002c26:	eef0 1a67 	vmov.f32	s3, s15
 8002c2a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002c2e:	4816      	ldr	r0, [pc, #88]	; (8002c88 <MPU6050_Read_All+0x3c8>)
 8002c30:	f000 f82c 	bl	8002c8c <Kalman_getAngle>
 8002c34:	eeb0 7a40 	vmov.f32	s14, s0
 8002c38:	eef0 7a60 	vmov.f32	s15, s1
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8002c42:	bf00      	nop
 8002c44:	3740      	adds	r7, #64	; 0x40
 8002c46:	46bd      	mov	sp, r7
 8002c48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c4c:	f3af 8000 	nop.w
 8002c50:	00000000 	.word	0x00000000
 8002c54:	40cc2900 	.word	0x40cc2900
 8002c58:	00000000 	.word	0x00000000
 8002c5c:	40606000 	.word	0x40606000
 8002c60:	1a63c1f8 	.word	0x1a63c1f8
 8002c64:	404ca5dc 	.word	0x404ca5dc
 8002c68:	40d00000 	.word	0x40d00000
 8002c6c:	43aa0000 	.word	0x43aa0000
 8002c70:	42121eb8 	.word	0x42121eb8
 8002c74:	20000244 	.word	0x20000244
 8002c78:	408f4000 	.word	0x408f4000
 8002c7c:	c0568000 	.word	0xc0568000
 8002c80:	40568000 	.word	0x40568000
 8002c84:	20000048 	.word	0x20000048
 8002c88:	20000000 	.word	0x20000000

08002c8c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8002c8c:	b5b0      	push	{r4, r5, r7, lr}
 8002c8e:	b096      	sub	sp, #88	; 0x58
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	61f8      	str	r0, [r7, #28]
 8002c94:	ed87 0b04 	vstr	d0, [r7, #16]
 8002c98:	ed87 1b02 	vstr	d1, [r7, #8]
 8002c9c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002ca6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002caa:	f7fd fa9d 	bl	80001e8 <__aeabi_dsub>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002cbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cc4:	f7fd fc48 	bl	8000558 <__aeabi_dmul>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4620      	mov	r0, r4
 8002cce:	4629      	mov	r1, r5
 8002cd0:	f7fd fa8c 	bl	80001ec <__adddf3>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	69f9      	ldr	r1, [r7, #28]
 8002cda:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cee:	f7fd fc33 	bl	8000558 <__aeabi_dmul>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002d00:	f7fd fa72 	bl	80001e8 <__aeabi_dsub>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002d12:	f7fd fa69 	bl	80001e8 <__aeabi_dsub>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f7fd fa62 	bl	80001ec <__adddf3>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d34:	f7fd fc10 	bl	8000558 <__aeabi_dmul>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	4629      	mov	r1, r5
 8002d40:	f7fd fa54 	bl	80001ec <__adddf3>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	69f9      	ldr	r1, [r7, #28]
 8002d4a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d5e:	f7fd fbfb 	bl	8000558 <__aeabi_dmul>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4620      	mov	r0, r4
 8002d68:	4629      	mov	r1, r5
 8002d6a:	f7fd fa3d 	bl	80001e8 <__aeabi_dsub>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	69f9      	ldr	r1, [r7, #28]
 8002d74:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d88:	f7fd fbe6 	bl	8000558 <__aeabi_dmul>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4620      	mov	r0, r4
 8002d92:	4629      	mov	r1, r5
 8002d94:	f7fd fa28 	bl	80001e8 <__aeabi_dsub>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	69f9      	ldr	r1, [r7, #28]
 8002d9e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002dae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002db2:	f7fd fbd1 	bl	8000558 <__aeabi_dmul>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4620      	mov	r0, r4
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	f7fd fa15 	bl	80001ec <__adddf3>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002dd8:	f7fd fa08 	bl	80001ec <__adddf3>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002dea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dee:	f7fd fcdd 	bl	80007ac <__aeabi_ddiv>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002e00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e04:	f7fd fcd2 	bl	80007ac <__aeabi_ddiv>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002e16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e1a:	f7fd f9e5 	bl	80001e8 <__aeabi_dsub>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002e2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e34:	f7fd fb90 	bl	8000558 <__aeabi_dmul>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	4629      	mov	r1, r5
 8002e40:	f7fd f9d4 	bl	80001ec <__adddf3>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	69f9      	ldr	r1, [r7, #28]
 8002e4a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002e54:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e5c:	f7fd fb7c 	bl	8000558 <__aeabi_dmul>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4620      	mov	r0, r4
 8002e66:	4629      	mov	r1, r5
 8002e68:	f7fd f9c0 	bl	80001ec <__adddf3>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	69f9      	ldr	r1, [r7, #28]
 8002e72:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002e7c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002e86:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002e90:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e98:	f7fd fb5e 	bl	8000558 <__aeabi_dmul>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	4629      	mov	r1, r5
 8002ea4:	f7fd f9a0 	bl	80001e8 <__aeabi_dsub>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	69f9      	ldr	r1, [r7, #28]
 8002eae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002eb8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ebc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ec0:	f7fd fb4a 	bl	8000558 <__aeabi_dmul>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4620      	mov	r0, r4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	f7fd f98c 	bl	80001e8 <__aeabi_dsub>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	69f9      	ldr	r1, [r7, #28]
 8002ed6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002ee0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ee8:	f7fd fb36 	bl	8000558 <__aeabi_dmul>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	f7fd f978 	bl	80001e8 <__aeabi_dsub>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	69f9      	ldr	r1, [r7, #28]
 8002efe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002f08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f0c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f10:	f7fd fb22 	bl	8000558 <__aeabi_dmul>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4620      	mov	r0, r4
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	f7fd f964 	bl	80001e8 <__aeabi_dsub>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	69f9      	ldr	r1, [r7, #28]
 8002f26:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f30:	ec43 2b17 	vmov	d7, r2, r3
};
 8002f34:	eeb0 0a47 	vmov.f32	s0, s14
 8002f38:	eef0 0a67 	vmov.f32	s1, s15
 8002f3c:	3758      	adds	r7, #88	; 0x58
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002f44 <MPU6050_calculate>:

void MPU6050_calculate(void){
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
	MPU6050_Read_All(&hi2c1, &MPU6050);
 8002f48:	4902      	ldr	r1, [pc, #8]	; (8002f54 <MPU6050_calculate+0x10>)
 8002f4a:	4803      	ldr	r0, [pc, #12]	; (8002f58 <MPU6050_calculate+0x14>)
 8002f4c:	f7ff fcb8 	bl	80028c0 <MPU6050_Read_All>
}
 8002f50:	bf00      	nop
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000248 	.word	0x20000248
 8002f58:	20000504 	.word	0x20000504

08002f5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]
 8002f66:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <MX_DMA_Init+0x78>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <MX_DMA_Init+0x78>)
 8002f6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f70:	6313      	str	r3, [r2, #48]	; 0x30
 8002f72:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <MX_DMA_Init+0x78>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7a:	607b      	str	r3, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	603b      	str	r3, [r7, #0]
 8002f82:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <MX_DMA_Init+0x78>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <MX_DMA_Init+0x78>)
 8002f88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8e:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <MX_DMA_Init+0x78>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2105      	movs	r1, #5
 8002f9e:	200e      	movs	r0, #14
 8002fa0:	f000 fe18 	bl	8003bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002fa4:	200e      	movs	r0, #14
 8002fa6:	f000 fe31 	bl	8003c0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002faa:	2200      	movs	r2, #0
 8002fac:	2105      	movs	r1, #5
 8002fae:	2038      	movs	r0, #56	; 0x38
 8002fb0:	f000 fe10 	bl	8003bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002fb4:	2038      	movs	r0, #56	; 0x38
 8002fb6:	f000 fe29 	bl	8003c0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2105      	movs	r1, #5
 8002fbe:	203a      	movs	r0, #58	; 0x3a
 8002fc0:	f000 fe08 	bl	8003bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002fc4:	203a      	movs	r0, #58	; 0x3a
 8002fc6:	f000 fe21 	bl	8003c0c <HAL_NVIC_EnableIRQ>

}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800

08002fd8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4a07      	ldr	r2, [pc, #28]	; (8003004 <vApplicationGetIdleTaskMemory+0x2c>)
 8002fe8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4a06      	ldr	r2, [pc, #24]	; (8003008 <vApplicationGetIdleTaskMemory+0x30>)
 8002fee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2280      	movs	r2, #128	; 0x80
 8002ff4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002ff6:	bf00      	nop
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	200002b0 	.word	0x200002b0
 8003008:	20000304 	.word	0x20000304

0800300c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800300c:	b5b0      	push	{r4, r5, r7, lr}
 800300e:	b09c      	sub	sp, #112	; 0x70
 8003010:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task10ms */
  osThreadDef(Task10ms, Task_10ms, osPriorityNormal, 0, 128);
 8003012:	4b27      	ldr	r3, [pc, #156]	; (80030b0 <MX_FREERTOS_Init+0xa4>)
 8003014:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8003018:	461d      	mov	r5, r3
 800301a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800301c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800301e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003022:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task10msHandle = osThreadCreate(osThread(Task10ms), NULL);
 8003026:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f004 fd7a 	bl	8007b26 <osThreadCreate>
 8003032:	4603      	mov	r3, r0
 8003034:	4a1f      	ldr	r2, [pc, #124]	; (80030b4 <MX_FREERTOS_Init+0xa8>)
 8003036:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task100ms */
  osThreadDef(Task100ms, Task_100ms, osPriorityNormal, 0, 128);
 8003038:	4b1f      	ldr	r3, [pc, #124]	; (80030b8 <MX_FREERTOS_Init+0xac>)
 800303a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800303e:	461d      	mov	r5, r3
 8003040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003044:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003048:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task100msHandle = osThreadCreate(osThread(Task100ms), NULL);
 800304c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f004 fd67 	bl	8007b26 <osThreadCreate>
 8003058:	4603      	mov	r3, r0
 800305a:	4a18      	ldr	r2, [pc, #96]	; (80030bc <MX_FREERTOS_Init+0xb0>)
 800305c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1000ms */
  osThreadDef(Task1000ms, Task_1000ms, osPriorityIdle, 0, 128);
 800305e:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <MX_FREERTOS_Init+0xb4>)
 8003060:	f107 041c 	add.w	r4, r7, #28
 8003064:	461d      	mov	r5, r3
 8003066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800306a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800306e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1000msHandle = osThreadCreate(osThread(Task1000ms), NULL);
 8003072:	f107 031c 	add.w	r3, r7, #28
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f004 fd54 	bl	8007b26 <osThreadCreate>
 800307e:	4603      	mov	r3, r0
 8003080:	4a10      	ldr	r2, [pc, #64]	; (80030c4 <MX_FREERTOS_Init+0xb8>)
 8003082:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1ms */
  osThreadDef(Task1ms, Task_1ms, osPriorityAboveNormal, 0, 128);
 8003084:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <MX_FREERTOS_Init+0xbc>)
 8003086:	463c      	mov	r4, r7
 8003088:	461d      	mov	r5, r3
 800308a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800308c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800308e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003092:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1msHandle = osThreadCreate(osThread(Task1ms), NULL);
 8003096:	463b      	mov	r3, r7
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f004 fd43 	bl	8007b26 <osThreadCreate>
 80030a0:	4603      	mov	r3, r0
 80030a2:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <MX_FREERTOS_Init+0xc0>)
 80030a4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80030a6:	bf00      	nop
 80030a8:	3770      	adds	r7, #112	; 0x70
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bdb0      	pop	{r4, r5, r7, pc}
 80030ae:	bf00      	nop
 80030b0:	08009b0c 	.word	0x08009b0c
 80030b4:	200002a0 	.word	0x200002a0
 80030b8:	08009b34 	.word	0x08009b34
 80030bc:	200002a4 	.word	0x200002a4
 80030c0:	08009b5c 	.word	0x08009b5c
 80030c4:	200002a8 	.word	0x200002a8
 80030c8:	08009b80 	.word	0x08009b80
 80030cc:	200002ac 	.word	0x200002ac

080030d0 <Task_10ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_10ms */
void Task_10ms(void const * argument)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_10ms */
	task_init_10ms();
 80030d8:	f7fe f853 	bl	8001182 <task_init_10ms>
  /* Infinite loop */
  for(;;)
  {
	task_10ms();
 80030dc:	f7fe f858 	bl	8001190 <task_10ms>
    osDelay(10);
 80030e0:	200a      	movs	r0, #10
 80030e2:	f004 fd6c 	bl	8007bbe <osDelay>
	task_10ms();
 80030e6:	e7f9      	b.n	80030dc <Task_10ms+0xc>

080030e8 <Task_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_100ms */
void Task_100ms(void const * argument)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_100ms */
	task_init_100ms();
 80030f0:	f7fe f854 	bl	800119c <task_init_100ms>
  /* Infinite loop */
  for(;;)
  {
	task_100ms();
 80030f4:	f7fe f859 	bl	80011aa <task_100ms>
    osDelay(100);
 80030f8:	2064      	movs	r0, #100	; 0x64
 80030fa:	f004 fd60 	bl	8007bbe <osDelay>
	task_100ms();
 80030fe:	e7f9      	b.n	80030f4 <Task_100ms+0xc>

08003100 <Task_1000ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1000ms */
void Task_1000ms(void const * argument)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1000ms */
	task_init_1000ms();
 8003108:	f7fe f857 	bl	80011ba <task_init_1000ms>
  /* Infinite loop */
  for(;;)
  {
	task_1000ms();
 800310c:	f7fe f85c 	bl	80011c8 <task_1000ms>
    osDelay(1000);
 8003110:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003114:	f004 fd53 	bl	8007bbe <osDelay>
	task_1000ms();
 8003118:	e7f8      	b.n	800310c <Task_1000ms+0xc>

0800311a <Task_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1ms */
void Task_1ms(void const * argument)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1ms */
	task_init_1ms();
 8003122:	f7fe f821 	bl	8001168 <task_init_1ms>
  /* Infinite loop */
  for(;;)
  {
	task_1ms();
 8003126:	f7fe f826 	bl	8001176 <task_1ms>
    osDelay(1);
 800312a:	2001      	movs	r0, #1
 800312c:	f004 fd47 	bl	8007bbe <osDelay>
	task_1ms();
 8003130:	e7f9      	b.n	8003126 <Task_1ms+0xc>
	...

08003134 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08a      	sub	sp, #40	; 0x28
 8003138:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313a:	f107 0314 	add.w	r3, r7, #20
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	605a      	str	r2, [r3, #4]
 8003144:	609a      	str	r2, [r3, #8]
 8003146:	60da      	str	r2, [r3, #12]
 8003148:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	4b32      	ldr	r3, [pc, #200]	; (8003218 <MX_GPIO_Init+0xe4>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a31      	ldr	r2, [pc, #196]	; (8003218 <MX_GPIO_Init+0xe4>)
 8003154:	f043 0304 	orr.w	r3, r3, #4
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b2f      	ldr	r3, [pc, #188]	; (8003218 <MX_GPIO_Init+0xe4>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	4b2b      	ldr	r3, [pc, #172]	; (8003218 <MX_GPIO_Init+0xe4>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	4a2a      	ldr	r2, [pc, #168]	; (8003218 <MX_GPIO_Init+0xe4>)
 8003170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003174:	6313      	str	r3, [r2, #48]	; 0x30
 8003176:	4b28      	ldr	r3, [pc, #160]	; (8003218 <MX_GPIO_Init+0xe4>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	4b24      	ldr	r3, [pc, #144]	; (8003218 <MX_GPIO_Init+0xe4>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	4a23      	ldr	r2, [pc, #140]	; (8003218 <MX_GPIO_Init+0xe4>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	6313      	str	r3, [r2, #48]	; 0x30
 8003192:	4b21      	ldr	r3, [pc, #132]	; (8003218 <MX_GPIO_Init+0xe4>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	4b1d      	ldr	r3, [pc, #116]	; (8003218 <MX_GPIO_Init+0xe4>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	4a1c      	ldr	r2, [pc, #112]	; (8003218 <MX_GPIO_Init+0xe4>)
 80031a8:	f043 0302 	orr.w	r3, r3, #2
 80031ac:	6313      	str	r3, [r2, #48]	; 0x30
 80031ae:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <MX_GPIO_Init+0xe4>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	607b      	str	r3, [r7, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP280_CSN_GPIO_Port, BMP280_CSN_Pin, GPIO_PIN_RESET);
 80031ba:	2200      	movs	r2, #0
 80031bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031c0:	4816      	ldr	r0, [pc, #88]	; (800321c <MX_GPIO_Init+0xe8>)
 80031c2:	f001 fa47 	bl	8004654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 80031c6:	2200      	movs	r2, #0
 80031c8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80031cc:	4814      	ldr	r0, [pc, #80]	; (8003220 <MX_GPIO_Init+0xec>)
 80031ce:	f001 fa41 	bl	8004654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP280_CSN_Pin;
 80031d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031d8:	2301      	movs	r3, #1
 80031da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e0:	2300      	movs	r3, #0
 80031e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMP280_CSN_GPIO_Port, &GPIO_InitStruct);
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	4619      	mov	r1, r3
 80031ea:	480c      	ldr	r0, [pc, #48]	; (800321c <MX_GPIO_Init+0xe8>)
 80031ec:	f001 f8ae 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 80031f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031f6:	2301      	movs	r3, #1
 80031f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fe:	2300      	movs	r3, #0
 8003200:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003202:	f107 0314 	add.w	r3, r7, #20
 8003206:	4619      	mov	r1, r3
 8003208:	4805      	ldr	r0, [pc, #20]	; (8003220 <MX_GPIO_Init+0xec>)
 800320a:	f001 f89f 	bl	800434c <HAL_GPIO_Init>

}
 800320e:	bf00      	nop
 8003210:	3728      	adds	r7, #40	; 0x28
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800
 800321c:	40020000 	.word	0x40020000
 8003220:	40020400 	.word	0x40020400

08003224 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003228:	4b12      	ldr	r3, [pc, #72]	; (8003274 <MX_I2C1_Init+0x50>)
 800322a:	4a13      	ldr	r2, [pc, #76]	; (8003278 <MX_I2C1_Init+0x54>)
 800322c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <MX_I2C1_Init+0x50>)
 8003230:	4a12      	ldr	r2, [pc, #72]	; (800327c <MX_I2C1_Init+0x58>)
 8003232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <MX_I2C1_Init+0x50>)
 8003236:	2200      	movs	r2, #0
 8003238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <MX_I2C1_Init+0x50>)
 800323c:	2200      	movs	r2, #0
 800323e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <MX_I2C1_Init+0x50>)
 8003242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003246:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003248:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <MX_I2C1_Init+0x50>)
 800324a:	2200      	movs	r2, #0
 800324c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800324e:	4b09      	ldr	r3, [pc, #36]	; (8003274 <MX_I2C1_Init+0x50>)
 8003250:	2200      	movs	r2, #0
 8003252:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003254:	4b07      	ldr	r3, [pc, #28]	; (8003274 <MX_I2C1_Init+0x50>)
 8003256:	2200      	movs	r2, #0
 8003258:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <MX_I2C1_Init+0x50>)
 800325c:	2200      	movs	r2, #0
 800325e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003260:	4804      	ldr	r0, [pc, #16]	; (8003274 <MX_I2C1_Init+0x50>)
 8003262:	f001 fa11 	bl	8004688 <HAL_I2C_Init>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800326c:	f000 f8e8 	bl	8003440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003270:	bf00      	nop
 8003272:	bd80      	pop	{r7, pc}
 8003274:	20000504 	.word	0x20000504
 8003278:	40005400 	.word	0x40005400
 800327c:	00061a80 	.word	0x00061a80

08003280 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08a      	sub	sp, #40	; 0x28
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003288:	f107 0314 	add.w	r3, r7, #20
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	609a      	str	r2, [r3, #8]
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a19      	ldr	r2, [pc, #100]	; (8003304 <HAL_I2C_MspInit+0x84>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d12b      	bne.n	80032fa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	4b18      	ldr	r3, [pc, #96]	; (8003308 <HAL_I2C_MspInit+0x88>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	4a17      	ldr	r2, [pc, #92]	; (8003308 <HAL_I2C_MspInit+0x88>)
 80032ac:	f043 0302 	orr.w	r3, r3, #2
 80032b0:	6313      	str	r3, [r2, #48]	; 0x30
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <HAL_I2C_MspInit+0x88>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032be:	23c0      	movs	r3, #192	; 0xc0
 80032c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032c2:	2312      	movs	r3, #18
 80032c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ca:	2303      	movs	r3, #3
 80032cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032ce:	2304      	movs	r3, #4
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d2:	f107 0314 	add.w	r3, r7, #20
 80032d6:	4619      	mov	r1, r3
 80032d8:	480c      	ldr	r0, [pc, #48]	; (800330c <HAL_I2C_MspInit+0x8c>)
 80032da:	f001 f837 	bl	800434c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_I2C_MspInit+0x88>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	4a08      	ldr	r2, [pc, #32]	; (8003308 <HAL_I2C_MspInit+0x88>)
 80032e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032ec:	6413      	str	r3, [r2, #64]	; 0x40
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_I2C_MspInit+0x88>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80032fa:	bf00      	nop
 80032fc:	3728      	adds	r7, #40	; 0x28
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40005400 	.word	0x40005400
 8003308:	40023800 	.word	0x40023800
 800330c:	40020400 	.word	0x40020400

08003310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003314:	f000 fb64 	bl	80039e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003318:	f000 f818 	bl	800334c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800331c:	f7ff ff0a 	bl	8003134 <MX_GPIO_Init>
  MX_DMA_Init();
 8003320:	f7ff fe1c 	bl	8002f5c <MX_DMA_Init>
  MX_SPI1_Init();
 8003324:	f000 f892 	bl	800344c <MX_SPI1_Init>
  MX_SPI2_Init();
 8003328:	f000 f8c6 	bl	80034b8 <MX_SPI2_Init>
  MX_I2C1_Init();
 800332c:	f7ff ff7a 	bl	8003224 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_init();
 8003330:	f7ff f996 	bl	8002660 <NRF24_init>
  BMP280_init();
 8003334:	f7fe fc3e 	bl	8001bb4 <BMP280_init>
  MPU6050_Init(&hi2c1);
 8003338:	4803      	ldr	r0, [pc, #12]	; (8003348 <main+0x38>)
 800333a:	f7ff fa67 	bl	800280c <MPU6050_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800333e:	f7ff fe65 	bl	800300c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003342:	f004 fbe9 	bl	8007b18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003346:	e7fe      	b.n	8003346 <main+0x36>
 8003348:	20000504 	.word	0x20000504

0800334c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b094      	sub	sp, #80	; 0x50
 8003350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003352:	f107 0320 	add.w	r3, r7, #32
 8003356:	2230      	movs	r2, #48	; 0x30
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f005 fe0e 	bl	8008f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003360:	f107 030c 	add.w	r3, r7, #12
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	60da      	str	r2, [r3, #12]
 800336e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003370:	2300      	movs	r3, #0
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	4b27      	ldr	r3, [pc, #156]	; (8003414 <SystemClock_Config+0xc8>)
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	4a26      	ldr	r2, [pc, #152]	; (8003414 <SystemClock_Config+0xc8>)
 800337a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337e:	6413      	str	r3, [r2, #64]	; 0x40
 8003380:	4b24      	ldr	r3, [pc, #144]	; (8003414 <SystemClock_Config+0xc8>)
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800338c:	2300      	movs	r3, #0
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	4b21      	ldr	r3, [pc, #132]	; (8003418 <SystemClock_Config+0xcc>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a20      	ldr	r2, [pc, #128]	; (8003418 <SystemClock_Config+0xcc>)
 8003396:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <SystemClock_Config+0xcc>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033a4:	607b      	str	r3, [r7, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033a8:	2302      	movs	r3, #2
 80033aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033ac:	2301      	movs	r3, #1
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033b0:	2310      	movs	r3, #16
 80033b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033b4:	2302      	movs	r3, #2
 80033b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80033b8:	2300      	movs	r3, #0
 80033ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80033bc:	2308      	movs	r3, #8
 80033be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80033c0:	2364      	movs	r3, #100	; 0x64
 80033c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033c4:	2302      	movs	r3, #2
 80033c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80033c8:	2304      	movs	r3, #4
 80033ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033cc:	f107 0320 	add.w	r3, r7, #32
 80033d0:	4618      	mov	r0, r3
 80033d2:	f002 f97d 	bl	80056d0 <HAL_RCC_OscConfig>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80033dc:	f000 f830 	bl	8003440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033e0:	230f      	movs	r3, #15
 80033e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033e4:	2302      	movs	r3, #2
 80033e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80033f6:	f107 030c 	add.w	r3, r7, #12
 80033fa:	2103      	movs	r1, #3
 80033fc:	4618      	mov	r0, r3
 80033fe:	f002 fbdf 	bl	8005bc0 <HAL_RCC_ClockConfig>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003408:	f000 f81a 	bl	8003440 <Error_Handler>
  }
}
 800340c:	bf00      	nop
 800340e:	3750      	adds	r7, #80	; 0x50
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40023800 	.word	0x40023800
 8003418:	40007000 	.word	0x40007000

0800341c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a04      	ldr	r2, [pc, #16]	; (800343c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d101      	bne.n	8003432 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800342e:	f000 faf9 	bl	8003a24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40014800 	.word	0x40014800

08003440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003444:	b672      	cpsid	i
}
 8003446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003448:	e7fe      	b.n	8003448 <Error_Handler+0x8>
	...

0800344c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003450:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <MX_SPI1_Init+0x64>)
 8003452:	4a18      	ldr	r2, [pc, #96]	; (80034b4 <MX_SPI1_Init+0x68>)
 8003454:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003456:	4b16      	ldr	r3, [pc, #88]	; (80034b0 <MX_SPI1_Init+0x64>)
 8003458:	f44f 7282 	mov.w	r2, #260	; 0x104
 800345c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800345e:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <MX_SPI1_Init+0x64>)
 8003460:	2200      	movs	r2, #0
 8003462:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003464:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <MX_SPI1_Init+0x64>)
 8003466:	2200      	movs	r2, #0
 8003468:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800346a:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <MX_SPI1_Init+0x64>)
 800346c:	2200      	movs	r2, #0
 800346e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <MX_SPI1_Init+0x64>)
 8003472:	2200      	movs	r2, #0
 8003474:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003476:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <MX_SPI1_Init+0x64>)
 8003478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800347c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800347e:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <MX_SPI1_Init+0x64>)
 8003480:	2218      	movs	r2, #24
 8003482:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <MX_SPI1_Init+0x64>)
 8003486:	2200      	movs	r2, #0
 8003488:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800348a:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <MX_SPI1_Init+0x64>)
 800348c:	2200      	movs	r2, #0
 800348e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003490:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <MX_SPI1_Init+0x64>)
 8003492:	2200      	movs	r2, #0
 8003494:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <MX_SPI1_Init+0x64>)
 8003498:	220a      	movs	r2, #10
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800349c:	4804      	ldr	r0, [pc, #16]	; (80034b0 <MX_SPI1_Init+0x64>)
 800349e:	f002 fde1 	bl	8006064 <HAL_SPI_Init>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80034a8:	f7ff ffca 	bl	8003440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80034ac:	bf00      	nop
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20000558 	.word	0x20000558
 80034b4:	40013000 	.word	0x40013000

080034b8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80034bc:	4b17      	ldr	r3, [pc, #92]	; (800351c <MX_SPI2_Init+0x64>)
 80034be:	4a18      	ldr	r2, [pc, #96]	; (8003520 <MX_SPI2_Init+0x68>)
 80034c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80034c2:	4b16      	ldr	r3, [pc, #88]	; (800351c <MX_SPI2_Init+0x64>)
 80034c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80034ca:	4b14      	ldr	r3, [pc, #80]	; (800351c <MX_SPI2_Init+0x64>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80034d0:	4b12      	ldr	r3, [pc, #72]	; (800351c <MX_SPI2_Init+0x64>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034d6:	4b11      	ldr	r3, [pc, #68]	; (800351c <MX_SPI2_Init+0x64>)
 80034d8:	2200      	movs	r2, #0
 80034da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034dc:	4b0f      	ldr	r3, [pc, #60]	; (800351c <MX_SPI2_Init+0x64>)
 80034de:	2200      	movs	r2, #0
 80034e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80034e2:	4b0e      	ldr	r3, [pc, #56]	; (800351c <MX_SPI2_Init+0x64>)
 80034e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80034ea:	4b0c      	ldr	r3, [pc, #48]	; (800351c <MX_SPI2_Init+0x64>)
 80034ec:	2218      	movs	r2, #24
 80034ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034f0:	4b0a      	ldr	r3, [pc, #40]	; (800351c <MX_SPI2_Init+0x64>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80034f6:	4b09      	ldr	r3, [pc, #36]	; (800351c <MX_SPI2_Init+0x64>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034fc:	4b07      	ldr	r3, [pc, #28]	; (800351c <MX_SPI2_Init+0x64>)
 80034fe:	2200      	movs	r2, #0
 8003500:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <MX_SPI2_Init+0x64>)
 8003504:	220a      	movs	r2, #10
 8003506:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003508:	4804      	ldr	r0, [pc, #16]	; (800351c <MX_SPI2_Init+0x64>)
 800350a:	f002 fdab 	bl	8006064 <HAL_SPI_Init>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003514:	f7ff ff94 	bl	8003440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003518:	bf00      	nop
 800351a:	bd80      	pop	{r7, pc}
 800351c:	200005b0 	.word	0x200005b0
 8003520:	40003800 	.word	0x40003800

08003524 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08c      	sub	sp, #48	; 0x30
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800352c:	f107 031c 	add.w	r3, r7, #28
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	60da      	str	r2, [r3, #12]
 800353a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a8a      	ldr	r2, [pc, #552]	; (800376c <HAL_SPI_MspInit+0x248>)
 8003542:	4293      	cmp	r3, r2
 8003544:	f040 8089 	bne.w	800365a <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003548:	2300      	movs	r3, #0
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	4b88      	ldr	r3, [pc, #544]	; (8003770 <HAL_SPI_MspInit+0x24c>)
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	4a87      	ldr	r2, [pc, #540]	; (8003770 <HAL_SPI_MspInit+0x24c>)
 8003552:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003556:	6453      	str	r3, [r2, #68]	; 0x44
 8003558:	4b85      	ldr	r3, [pc, #532]	; (8003770 <HAL_SPI_MspInit+0x24c>)
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	4b81      	ldr	r3, [pc, #516]	; (8003770 <HAL_SPI_MspInit+0x24c>)
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	4a80      	ldr	r2, [pc, #512]	; (8003770 <HAL_SPI_MspInit+0x24c>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6313      	str	r3, [r2, #48]	; 0x30
 8003574:	4b7e      	ldr	r3, [pc, #504]	; (8003770 <HAL_SPI_MspInit+0x24c>)
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MISO_Pin|NRF24_MOSI_Pin;
 8003580:	23e0      	movs	r3, #224	; 0xe0
 8003582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358c:	2303      	movs	r3, #3
 800358e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003590:	2305      	movs	r3, #5
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003594:	f107 031c 	add.w	r3, r7, #28
 8003598:	4619      	mov	r1, r3
 800359a:	4876      	ldr	r0, [pc, #472]	; (8003774 <HAL_SPI_MspInit+0x250>)
 800359c:	f000 fed6 	bl	800434c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80035a0:	4b75      	ldr	r3, [pc, #468]	; (8003778 <HAL_SPI_MspInit+0x254>)
 80035a2:	4a76      	ldr	r2, [pc, #472]	; (800377c <HAL_SPI_MspInit+0x258>)
 80035a4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80035a6:	4b74      	ldr	r3, [pc, #464]	; (8003778 <HAL_SPI_MspInit+0x254>)
 80035a8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80035ac:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035ae:	4b72      	ldr	r3, [pc, #456]	; (8003778 <HAL_SPI_MspInit+0x254>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035b4:	4b70      	ldr	r3, [pc, #448]	; (8003778 <HAL_SPI_MspInit+0x254>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035ba:	4b6f      	ldr	r3, [pc, #444]	; (8003778 <HAL_SPI_MspInit+0x254>)
 80035bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035c0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035c2:	4b6d      	ldr	r3, [pc, #436]	; (8003778 <HAL_SPI_MspInit+0x254>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035c8:	4b6b      	ldr	r3, [pc, #428]	; (8003778 <HAL_SPI_MspInit+0x254>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80035ce:	4b6a      	ldr	r3, [pc, #424]	; (8003778 <HAL_SPI_MspInit+0x254>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035d4:	4b68      	ldr	r3, [pc, #416]	; (8003778 <HAL_SPI_MspInit+0x254>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035da:	4b67      	ldr	r3, [pc, #412]	; (8003778 <HAL_SPI_MspInit+0x254>)
 80035dc:	2200      	movs	r2, #0
 80035de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80035e0:	4865      	ldr	r0, [pc, #404]	; (8003778 <HAL_SPI_MspInit+0x254>)
 80035e2:	f000 fb21 	bl	8003c28 <HAL_DMA_Init>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80035ec:	f7ff ff28 	bl	8003440 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a61      	ldr	r2, [pc, #388]	; (8003778 <HAL_SPI_MspInit+0x254>)
 80035f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80035f6:	4a60      	ldr	r2, [pc, #384]	; (8003778 <HAL_SPI_MspInit+0x254>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80035fc:	4b60      	ldr	r3, [pc, #384]	; (8003780 <HAL_SPI_MspInit+0x25c>)
 80035fe:	4a61      	ldr	r2, [pc, #388]	; (8003784 <HAL_SPI_MspInit+0x260>)
 8003600:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8003602:	4b5f      	ldr	r3, [pc, #380]	; (8003780 <HAL_SPI_MspInit+0x25c>)
 8003604:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003608:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800360a:	4b5d      	ldr	r3, [pc, #372]	; (8003780 <HAL_SPI_MspInit+0x25c>)
 800360c:	2240      	movs	r2, #64	; 0x40
 800360e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003610:	4b5b      	ldr	r3, [pc, #364]	; (8003780 <HAL_SPI_MspInit+0x25c>)
 8003612:	2200      	movs	r2, #0
 8003614:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003616:	4b5a      	ldr	r3, [pc, #360]	; (8003780 <HAL_SPI_MspInit+0x25c>)
 8003618:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800361c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800361e:	4b58      	ldr	r3, [pc, #352]	; (8003780 <HAL_SPI_MspInit+0x25c>)
 8003620:	2200      	movs	r2, #0
 8003622:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003624:	4b56      	ldr	r3, [pc, #344]	; (8003780 <HAL_SPI_MspInit+0x25c>)
 8003626:	2200      	movs	r2, #0
 8003628:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800362a:	4b55      	ldr	r3, [pc, #340]	; (8003780 <HAL_SPI_MspInit+0x25c>)
 800362c:	2200      	movs	r2, #0
 800362e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003630:	4b53      	ldr	r3, [pc, #332]	; (8003780 <HAL_SPI_MspInit+0x25c>)
 8003632:	2200      	movs	r2, #0
 8003634:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003636:	4b52      	ldr	r3, [pc, #328]	; (8003780 <HAL_SPI_MspInit+0x25c>)
 8003638:	2200      	movs	r2, #0
 800363a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800363c:	4850      	ldr	r0, [pc, #320]	; (8003780 <HAL_SPI_MspInit+0x25c>)
 800363e:	f000 faf3 	bl	8003c28 <HAL_DMA_Init>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8003648:	f7ff fefa 	bl	8003440 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a4c      	ldr	r2, [pc, #304]	; (8003780 <HAL_SPI_MspInit+0x25c>)
 8003650:	649a      	str	r2, [r3, #72]	; 0x48
 8003652:	4a4b      	ldr	r2, [pc, #300]	; (8003780 <HAL_SPI_MspInit+0x25c>)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003658:	e084      	b.n	8003764 <HAL_SPI_MspInit+0x240>
  else if(spiHandle->Instance==SPI2)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a4a      	ldr	r2, [pc, #296]	; (8003788 <HAL_SPI_MspInit+0x264>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d17f      	bne.n	8003764 <HAL_SPI_MspInit+0x240>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003664:	2300      	movs	r3, #0
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	4b41      	ldr	r3, [pc, #260]	; (8003770 <HAL_SPI_MspInit+0x24c>)
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	4a40      	ldr	r2, [pc, #256]	; (8003770 <HAL_SPI_MspInit+0x24c>)
 800366e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003672:	6413      	str	r3, [r2, #64]	; 0x40
 8003674:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <HAL_SPI_MspInit+0x24c>)
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	4b3a      	ldr	r3, [pc, #232]	; (8003770 <HAL_SPI_MspInit+0x24c>)
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	4a39      	ldr	r2, [pc, #228]	; (8003770 <HAL_SPI_MspInit+0x24c>)
 800368a:	f043 0304 	orr.w	r3, r3, #4
 800368e:	6313      	str	r3, [r2, #48]	; 0x30
 8003690:	4b37      	ldr	r3, [pc, #220]	; (8003770 <HAL_SPI_MspInit+0x24c>)
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800369c:	2300      	movs	r3, #0
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	4b33      	ldr	r3, [pc, #204]	; (8003770 <HAL_SPI_MspInit+0x24c>)
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	4a32      	ldr	r2, [pc, #200]	; (8003770 <HAL_SPI_MspInit+0x24c>)
 80036a6:	f043 0302 	orr.w	r3, r3, #2
 80036aa:	6313      	str	r3, [r2, #48]	; 0x30
 80036ac:	4b30      	ldr	r3, [pc, #192]	; (8003770 <HAL_SPI_MspInit+0x24c>)
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP280_MISO_Pin|BMP280_MOSI_Pin;
 80036b8:	230c      	movs	r3, #12
 80036ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036bc:	2302      	movs	r3, #2
 80036be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c4:	2303      	movs	r3, #3
 80036c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036c8:	2305      	movs	r3, #5
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036cc:	f107 031c 	add.w	r3, r7, #28
 80036d0:	4619      	mov	r1, r3
 80036d2:	482e      	ldr	r0, [pc, #184]	; (800378c <HAL_SPI_MspInit+0x268>)
 80036d4:	f000 fe3a 	bl	800434c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BMP280_SCK_Pin;
 80036d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036de:	2302      	movs	r3, #2
 80036e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e6:	2303      	movs	r3, #3
 80036e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036ea:	2305      	movs	r3, #5
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BMP280_SCK_GPIO_Port, &GPIO_InitStruct);
 80036ee:	f107 031c 	add.w	r3, r7, #28
 80036f2:	4619      	mov	r1, r3
 80036f4:	4826      	ldr	r0, [pc, #152]	; (8003790 <HAL_SPI_MspInit+0x26c>)
 80036f6:	f000 fe29 	bl	800434c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80036fa:	4b26      	ldr	r3, [pc, #152]	; (8003794 <HAL_SPI_MspInit+0x270>)
 80036fc:	4a26      	ldr	r2, [pc, #152]	; (8003798 <HAL_SPI_MspInit+0x274>)
 80036fe:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003700:	4b24      	ldr	r3, [pc, #144]	; (8003794 <HAL_SPI_MspInit+0x270>)
 8003702:	2200      	movs	r2, #0
 8003704:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003706:	4b23      	ldr	r3, [pc, #140]	; (8003794 <HAL_SPI_MspInit+0x270>)
 8003708:	2200      	movs	r2, #0
 800370a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800370c:	4b21      	ldr	r3, [pc, #132]	; (8003794 <HAL_SPI_MspInit+0x270>)
 800370e:	2200      	movs	r2, #0
 8003710:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_SPI_MspInit+0x270>)
 8003714:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003718:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800371a:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <HAL_SPI_MspInit+0x270>)
 800371c:	2200      	movs	r2, #0
 800371e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003720:	4b1c      	ldr	r3, [pc, #112]	; (8003794 <HAL_SPI_MspInit+0x270>)
 8003722:	2200      	movs	r2, #0
 8003724:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003726:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_SPI_MspInit+0x270>)
 8003728:	2200      	movs	r2, #0
 800372a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800372c:	4b19      	ldr	r3, [pc, #100]	; (8003794 <HAL_SPI_MspInit+0x270>)
 800372e:	2200      	movs	r2, #0
 8003730:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003732:	4b18      	ldr	r3, [pc, #96]	; (8003794 <HAL_SPI_MspInit+0x270>)
 8003734:	2200      	movs	r2, #0
 8003736:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003738:	4816      	ldr	r0, [pc, #88]	; (8003794 <HAL_SPI_MspInit+0x270>)
 800373a:	f000 fa75 	bl	8003c28 <HAL_DMA_Init>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_SPI_MspInit+0x224>
      Error_Handler();
 8003744:	f7ff fe7c 	bl	8003440 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a12      	ldr	r2, [pc, #72]	; (8003794 <HAL_SPI_MspInit+0x270>)
 800374c:	64da      	str	r2, [r3, #76]	; 0x4c
 800374e:	4a11      	ldr	r2, [pc, #68]	; (8003794 <HAL_SPI_MspInit+0x270>)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8003754:	2200      	movs	r2, #0
 8003756:	2105      	movs	r1, #5
 8003758:	2024      	movs	r0, #36	; 0x24
 800375a:	f000 fa3b 	bl	8003bd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800375e:	2024      	movs	r0, #36	; 0x24
 8003760:	f000 fa54 	bl	8003c0c <HAL_NVIC_EnableIRQ>
}
 8003764:	bf00      	nop
 8003766:	3730      	adds	r7, #48	; 0x30
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40013000 	.word	0x40013000
 8003770:	40023800 	.word	0x40023800
 8003774:	40020000 	.word	0x40020000
 8003778:	20000608 	.word	0x20000608
 800377c:	40026410 	.word	0x40026410
 8003780:	20000668 	.word	0x20000668
 8003784:	40026440 	.word	0x40026440
 8003788:	40003800 	.word	0x40003800
 800378c:	40020800 	.word	0x40020800
 8003790:	40020400 	.word	0x40020400
 8003794:	200006c8 	.word	0x200006c8
 8003798:	40026058 	.word	0x40026058

0800379c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	607b      	str	r3, [r7, #4]
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <HAL_MspInit+0x54>)
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	4a11      	ldr	r2, [pc, #68]	; (80037f0 <HAL_MspInit+0x54>)
 80037ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037b0:	6453      	str	r3, [r2, #68]	; 0x44
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <HAL_MspInit+0x54>)
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	603b      	str	r3, [r7, #0]
 80037c2:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_MspInit+0x54>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <HAL_MspInit+0x54>)
 80037c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037cc:	6413      	str	r3, [r2, #64]	; 0x40
 80037ce:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <HAL_MspInit+0x54>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80037da:	2200      	movs	r2, #0
 80037dc:	210f      	movs	r1, #15
 80037de:	f06f 0001 	mvn.w	r0, #1
 80037e2:	f000 f9f7 	bl	8003bd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800

080037f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08c      	sub	sp, #48	; 0x30
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8003804:	2300      	movs	r3, #0
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	4b2e      	ldr	r3, [pc, #184]	; (80038c4 <HAL_InitTick+0xd0>)
 800380a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380c:	4a2d      	ldr	r2, [pc, #180]	; (80038c4 <HAL_InitTick+0xd0>)
 800380e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003812:	6453      	str	r3, [r2, #68]	; 0x44
 8003814:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <HAL_InitTick+0xd0>)
 8003816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003820:	f107 020c 	add.w	r2, r7, #12
 8003824:	f107 0310 	add.w	r3, r7, #16
 8003828:	4611      	mov	r1, r2
 800382a:	4618      	mov	r0, r3
 800382c:	f002 fbe8 	bl	8006000 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003830:	f002 fbd2 	bl	8005fd8 <HAL_RCC_GetPCLK2Freq>
 8003834:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	4a23      	ldr	r2, [pc, #140]	; (80038c8 <HAL_InitTick+0xd4>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	0c9b      	lsrs	r3, r3, #18
 8003840:	3b01      	subs	r3, #1
 8003842:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8003844:	4b21      	ldr	r3, [pc, #132]	; (80038cc <HAL_InitTick+0xd8>)
 8003846:	4a22      	ldr	r2, [pc, #136]	; (80038d0 <HAL_InitTick+0xdc>)
 8003848:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800384a:	4b20      	ldr	r3, [pc, #128]	; (80038cc <HAL_InitTick+0xd8>)
 800384c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003850:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8003852:	4a1e      	ldr	r2, [pc, #120]	; (80038cc <HAL_InitTick+0xd8>)
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8003858:	4b1c      	ldr	r3, [pc, #112]	; (80038cc <HAL_InitTick+0xd8>)
 800385a:	2200      	movs	r2, #0
 800385c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800385e:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <HAL_InitTick+0xd8>)
 8003860:	2200      	movs	r2, #0
 8003862:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_InitTick+0xd8>)
 8003866:	2200      	movs	r2, #0
 8003868:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800386a:	4818      	ldr	r0, [pc, #96]	; (80038cc <HAL_InitTick+0xd8>)
 800386c:	f003 fec8 	bl	8007600 <HAL_TIM_Base_Init>
 8003870:	4603      	mov	r3, r0
 8003872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800387a:	2b00      	cmp	r3, #0
 800387c:	d11b      	bne.n	80038b6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 800387e:	4813      	ldr	r0, [pc, #76]	; (80038cc <HAL_InitTick+0xd8>)
 8003880:	f003 ff18 	bl	80076b4 <HAL_TIM_Base_Start_IT>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800388a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800388e:	2b00      	cmp	r3, #0
 8003890:	d111      	bne.n	80038b6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003892:	201a      	movs	r0, #26
 8003894:	f000 f9ba 	bl	8003c0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b0f      	cmp	r3, #15
 800389c:	d808      	bhi.n	80038b0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 800389e:	2200      	movs	r2, #0
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	201a      	movs	r0, #26
 80038a4:	f000 f996 	bl	8003bd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038a8:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <HAL_InitTick+0xe0>)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	e002      	b.n	80038b6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80038b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3730      	adds	r7, #48	; 0x30
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800
 80038c8:	431bde83 	.word	0x431bde83
 80038cc:	20000728 	.word	0x20000728
 80038d0:	40014800 	.word	0x40014800
 80038d4:	20000094 	.word	0x20000094

080038d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038dc:	e7fe      	b.n	80038dc <NMI_Handler+0x4>

080038de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038de:	b480      	push	{r7}
 80038e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038e2:	e7fe      	b.n	80038e2 <HardFault_Handler+0x4>

080038e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038e8:	e7fe      	b.n	80038e8 <MemManage_Handler+0x4>

080038ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038ea:	b480      	push	{r7}
 80038ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038ee:	e7fe      	b.n	80038ee <BusFault_Handler+0x4>

080038f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038f4:	e7fe      	b.n	80038f4 <UsageFault_Handler+0x4>

080038f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038f6:	b480      	push	{r7}
 80038f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003908:	4802      	ldr	r0, [pc, #8]	; (8003914 <DMA1_Stream3_IRQHandler+0x10>)
 800390a:	f000 fab5 	bl	8003e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	200006c8 	.word	0x200006c8

08003918 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800391c:	4802      	ldr	r0, [pc, #8]	; (8003928 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800391e:	f003 ff2b 	bl	8007778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000728 	.word	0x20000728

0800392c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003930:	4802      	ldr	r0, [pc, #8]	; (800393c <SPI2_IRQHandler+0x10>)
 8003932:	f003 fa9b 	bl	8006e6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	200005b0 	.word	0x200005b0

08003940 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003944:	4802      	ldr	r0, [pc, #8]	; (8003950 <DMA2_Stream0_IRQHandler+0x10>)
 8003946:	f000 fa97 	bl	8003e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000608 	.word	0x20000608

08003954 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003958:	4802      	ldr	r0, [pc, #8]	; (8003964 <DMA2_Stream2_IRQHandler+0x10>)
 800395a:	f000 fa8d 	bl	8003e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000668 	.word	0x20000668

08003968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800396c:	4b06      	ldr	r3, [pc, #24]	; (8003988 <SystemInit+0x20>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	4a05      	ldr	r2, [pc, #20]	; (8003988 <SystemInit+0x20>)
 8003974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800397c:	bf00      	nop
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <Reset_Handler>:
 800398c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039c4 <LoopFillZerobss+0xe>
 8003990:	f7ff ffea 	bl	8003968 <SystemInit>
 8003994:	480c      	ldr	r0, [pc, #48]	; (80039c8 <LoopFillZerobss+0x12>)
 8003996:	490d      	ldr	r1, [pc, #52]	; (80039cc <LoopFillZerobss+0x16>)
 8003998:	4a0d      	ldr	r2, [pc, #52]	; (80039d0 <LoopFillZerobss+0x1a>)
 800399a:	2300      	movs	r3, #0
 800399c:	e002      	b.n	80039a4 <LoopCopyDataInit>

0800399e <CopyDataInit>:
 800399e:	58d4      	ldr	r4, [r2, r3]
 80039a0:	50c4      	str	r4, [r0, r3]
 80039a2:	3304      	adds	r3, #4

080039a4 <LoopCopyDataInit>:
 80039a4:	18c4      	adds	r4, r0, r3
 80039a6:	428c      	cmp	r4, r1
 80039a8:	d3f9      	bcc.n	800399e <CopyDataInit>
 80039aa:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <LoopFillZerobss+0x1e>)
 80039ac:	4c0a      	ldr	r4, [pc, #40]	; (80039d8 <LoopFillZerobss+0x22>)
 80039ae:	2300      	movs	r3, #0
 80039b0:	e001      	b.n	80039b6 <LoopFillZerobss>

080039b2 <FillZerobss>:
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	3204      	adds	r2, #4

080039b6 <LoopFillZerobss>:
 80039b6:	42a2      	cmp	r2, r4
 80039b8:	d3fb      	bcc.n	80039b2 <FillZerobss>
 80039ba:	f005 faed 	bl	8008f98 <__libc_init_array>
 80039be:	f7ff fca7 	bl	8003310 <main>
 80039c2:	4770      	bx	lr
 80039c4:	20020000 	.word	0x20020000
 80039c8:	20000000 	.word	0x20000000
 80039cc:	20000100 	.word	0x20000100
 80039d0:	08009c48 	.word	0x08009c48
 80039d4:	20000100 	.word	0x20000100
 80039d8:	20004600 	.word	0x20004600

080039dc <ADC_IRQHandler>:
 80039dc:	e7fe      	b.n	80039dc <ADC_IRQHandler>
	...

080039e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039e4:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <HAL_Init+0x40>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a0d      	ldr	r2, [pc, #52]	; (8003a20 <HAL_Init+0x40>)
 80039ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_Init+0x40>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a0a      	ldr	r2, [pc, #40]	; (8003a20 <HAL_Init+0x40>)
 80039f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039fc:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <HAL_Init+0x40>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a07      	ldr	r2, [pc, #28]	; (8003a20 <HAL_Init+0x40>)
 8003a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a08:	2003      	movs	r0, #3
 8003a0a:	f000 f8d8 	bl	8003bbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a0e:	200f      	movs	r0, #15
 8003a10:	f7ff fef0 	bl	80037f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a14:	f7ff fec2 	bl	800379c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023c00 	.word	0x40023c00

08003a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_IncTick+0x20>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <HAL_IncTick+0x24>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4413      	add	r3, r2
 8003a34:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <HAL_IncTick+0x24>)
 8003a36:	6013      	str	r3, [r2, #0]
}
 8003a38:	bf00      	nop
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	20000098 	.word	0x20000098
 8003a48:	20000770 	.word	0x20000770

08003a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a50:	4b03      	ldr	r3, [pc, #12]	; (8003a60 <HAL_GetTick+0x14>)
 8003a52:	681b      	ldr	r3, [r3, #0]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000770 	.word	0x20000770

08003a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a74:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a80:	4013      	ands	r3, r2
 8003a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a96:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	60d3      	str	r3, [r2, #12]
}
 8003a9c:	bf00      	nop
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	e000ed00 	.word	0xe000ed00

08003aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ab0:	4b04      	ldr	r3, [pc, #16]	; (8003ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	0a1b      	lsrs	r3, r3, #8
 8003ab6:	f003 0307 	and.w	r3, r3, #7
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	db0b      	blt.n	8003af2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	f003 021f 	and.w	r2, r3, #31
 8003ae0:	4907      	ldr	r1, [pc, #28]	; (8003b00 <__NVIC_EnableIRQ+0x38>)
 8003ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	2001      	movs	r0, #1
 8003aea:	fa00 f202 	lsl.w	r2, r0, r2
 8003aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	e000e100 	.word	0xe000e100

08003b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	6039      	str	r1, [r7, #0]
 8003b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	db0a      	blt.n	8003b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	490c      	ldr	r1, [pc, #48]	; (8003b50 <__NVIC_SetPriority+0x4c>)
 8003b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b22:	0112      	lsls	r2, r2, #4
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	440b      	add	r3, r1
 8003b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b2c:	e00a      	b.n	8003b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	4908      	ldr	r1, [pc, #32]	; (8003b54 <__NVIC_SetPriority+0x50>)
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	3b04      	subs	r3, #4
 8003b3c:	0112      	lsls	r2, r2, #4
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	440b      	add	r3, r1
 8003b42:	761a      	strb	r2, [r3, #24]
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	e000e100 	.word	0xe000e100
 8003b54:	e000ed00 	.word	0xe000ed00

08003b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	; 0x24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f1c3 0307 	rsb	r3, r3, #7
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	bf28      	it	cs
 8003b76:	2304      	movcs	r3, #4
 8003b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d902      	bls.n	8003b88 <NVIC_EncodePriority+0x30>
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3b03      	subs	r3, #3
 8003b86:	e000      	b.n	8003b8a <NVIC_EncodePriority+0x32>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43da      	mvns	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	401a      	ands	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8003baa:	43d9      	mvns	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb0:	4313      	orrs	r3, r2
         );
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3724      	adds	r7, #36	; 0x24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff ff4c 	bl	8003a64 <__NVIC_SetPriorityGrouping>
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003be6:	f7ff ff61 	bl	8003aac <__NVIC_GetPriorityGrouping>
 8003bea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	6978      	ldr	r0, [r7, #20]
 8003bf2:	f7ff ffb1 	bl	8003b58 <NVIC_EncodePriority>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff ff80 	bl	8003b04 <__NVIC_SetPriority>
}
 8003c04:	bf00      	nop
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff ff54 	bl	8003ac8 <__NVIC_EnableIRQ>
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c34:	f7ff ff0a 	bl	8003a4c <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e099      	b.n	8003d78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0201 	bic.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c64:	e00f      	b.n	8003c86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c66:	f7ff fef1 	bl	8003a4c <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b05      	cmp	r3, #5
 8003c72:	d908      	bls.n	8003c86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e078      	b.n	8003d78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e8      	bne.n	8003c66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4b38      	ldr	r3, [pc, #224]	; (8003d80 <HAL_DMA_Init+0x158>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d107      	bne.n	8003cf0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f023 0307 	bic.w	r3, r3, #7
 8003d06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d117      	bne.n	8003d4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00e      	beq.n	8003d4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 fa91 	bl	8004254 <DMA_CheckFifoParam>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2240      	movs	r2, #64	; 0x40
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d46:	2301      	movs	r3, #1
 8003d48:	e016      	b.n	8003d78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fa48 	bl	80041e8 <DMA_CalcBaseAndBitshift>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d60:	223f      	movs	r2, #63	; 0x3f
 8003d62:	409a      	lsls	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	f010803f 	.word	0xf010803f

08003d84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_DMA_Start_IT+0x26>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e040      	b.n	8003e2c <HAL_DMA_Start_IT+0xa8>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d12f      	bne.n	8003e1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f9da 	bl	800418c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ddc:	223f      	movs	r2, #63	; 0x3f
 8003dde:	409a      	lsls	r2, r3
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0216 	orr.w	r2, r2, #22
 8003df2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d007      	beq.n	8003e0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0208 	orr.w	r2, r2, #8
 8003e0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	e005      	b.n	8003e2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
 8003e28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d004      	beq.n	8003e52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2280      	movs	r2, #128	; 0x80
 8003e4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e00c      	b.n	8003e6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2205      	movs	r2, #5
 8003e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0201 	bic.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e84:	4b8e      	ldr	r3, [pc, #568]	; (80040c0 <HAL_DMA_IRQHandler+0x248>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a8e      	ldr	r2, [pc, #568]	; (80040c4 <HAL_DMA_IRQHandler+0x24c>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	0a9b      	lsrs	r3, r3, #10
 8003e90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	409a      	lsls	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d01a      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d013      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0204 	bic.w	r2, r2, #4
 8003eca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed0:	2208      	movs	r2, #8
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003edc:	f043 0201 	orr.w	r2, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee8:	2201      	movs	r2, #1
 8003eea:	409a      	lsls	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d012      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f06:	2201      	movs	r2, #1
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	f043 0202 	orr.w	r2, r3, #2
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1e:	2204      	movs	r2, #4
 8003f20:	409a      	lsls	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d012      	beq.n	8003f50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00b      	beq.n	8003f50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f48:	f043 0204 	orr.w	r2, r3, #4
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f54:	2210      	movs	r2, #16
 8003f56:	409a      	lsls	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d043      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d03c      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f72:	2210      	movs	r2, #16
 8003f74:	409a      	lsls	r2, r3
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d018      	beq.n	8003fba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d108      	bne.n	8003fa8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d024      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	4798      	blx	r3
 8003fa6:	e01f      	b.n	8003fe8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01b      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	4798      	blx	r3
 8003fb8:	e016      	b.n	8003fe8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d107      	bne.n	8003fd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0208 	bic.w	r2, r2, #8
 8003fd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fec:	2220      	movs	r2, #32
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 808f 	beq.w	8004118 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 8087 	beq.w	8004118 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400e:	2220      	movs	r2, #32
 8004010:	409a      	lsls	r2, r3
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b05      	cmp	r3, #5
 8004020:	d136      	bne.n	8004090 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0216 	bic.w	r2, r2, #22
 8004030:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695a      	ldr	r2, [r3, #20]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004040:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <HAL_DMA_IRQHandler+0x1da>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404e:	2b00      	cmp	r3, #0
 8004050:	d007      	beq.n	8004062 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0208 	bic.w	r2, r2, #8
 8004060:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004066:	223f      	movs	r2, #63	; 0x3f
 8004068:	409a      	lsls	r2, r3
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004082:	2b00      	cmp	r3, #0
 8004084:	d07e      	beq.n	8004184 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	4798      	blx	r3
        }
        return;
 800408e:	e079      	b.n	8004184 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d01d      	beq.n	80040da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10d      	bne.n	80040c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d031      	beq.n	8004118 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	4798      	blx	r3
 80040bc:	e02c      	b.n	8004118 <HAL_DMA_IRQHandler+0x2a0>
 80040be:	bf00      	nop
 80040c0:	20000090 	.word	0x20000090
 80040c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d023      	beq.n	8004118 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4798      	blx	r3
 80040d8:	e01e      	b.n	8004118 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10f      	bne.n	8004108 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0210 	bic.w	r2, r2, #16
 80040f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411c:	2b00      	cmp	r3, #0
 800411e:	d032      	beq.n	8004186 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d022      	beq.n	8004172 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2205      	movs	r2, #5
 8004130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	3301      	adds	r3, #1
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	429a      	cmp	r2, r3
 800414e:	d307      	bcc.n	8004160 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f2      	bne.n	8004144 <HAL_DMA_IRQHandler+0x2cc>
 800415e:	e000      	b.n	8004162 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004160:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	4798      	blx	r3
 8004182:	e000      	b.n	8004186 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004184:	bf00      	nop
    }
  }
}
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b40      	cmp	r3, #64	; 0x40
 80041b8:	d108      	bne.n	80041cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041ca:	e007      	b.n	80041dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	60da      	str	r2, [r3, #12]
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	3b10      	subs	r3, #16
 80041f8:	4a14      	ldr	r2, [pc, #80]	; (800424c <DMA_CalcBaseAndBitshift+0x64>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	091b      	lsrs	r3, r3, #4
 8004200:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004202:	4a13      	ldr	r2, [pc, #76]	; (8004250 <DMA_CalcBaseAndBitshift+0x68>)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4413      	add	r3, r2
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b03      	cmp	r3, #3
 8004214:	d909      	bls.n	800422a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800421e:	f023 0303 	bic.w	r3, r3, #3
 8004222:	1d1a      	adds	r2, r3, #4
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	659a      	str	r2, [r3, #88]	; 0x58
 8004228:	e007      	b.n	800423a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004232:	f023 0303 	bic.w	r3, r3, #3
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	aaaaaaab 	.word	0xaaaaaaab
 8004250:	08009bbc 	.word	0x08009bbc

08004254 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800425c:	2300      	movs	r3, #0
 800425e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004264:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d11f      	bne.n	80042ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b03      	cmp	r3, #3
 8004272:	d856      	bhi.n	8004322 <DMA_CheckFifoParam+0xce>
 8004274:	a201      	add	r2, pc, #4	; (adr r2, 800427c <DMA_CheckFifoParam+0x28>)
 8004276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427a:	bf00      	nop
 800427c:	0800428d 	.word	0x0800428d
 8004280:	0800429f 	.word	0x0800429f
 8004284:	0800428d 	.word	0x0800428d
 8004288:	08004323 	.word	0x08004323
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d046      	beq.n	8004326 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800429c:	e043      	b.n	8004326 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042a6:	d140      	bne.n	800432a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ac:	e03d      	b.n	800432a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b6:	d121      	bne.n	80042fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d837      	bhi.n	800432e <DMA_CheckFifoParam+0xda>
 80042be:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <DMA_CheckFifoParam+0x70>)
 80042c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c4:	080042d5 	.word	0x080042d5
 80042c8:	080042db 	.word	0x080042db
 80042cc:	080042d5 	.word	0x080042d5
 80042d0:	080042ed 	.word	0x080042ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	73fb      	strb	r3, [r7, #15]
      break;
 80042d8:	e030      	b.n	800433c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d025      	beq.n	8004332 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ea:	e022      	b.n	8004332 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042f4:	d11f      	bne.n	8004336 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042fa:	e01c      	b.n	8004336 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d903      	bls.n	800430a <DMA_CheckFifoParam+0xb6>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b03      	cmp	r3, #3
 8004306:	d003      	beq.n	8004310 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004308:	e018      	b.n	800433c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	73fb      	strb	r3, [r7, #15]
      break;
 800430e:	e015      	b.n	800433c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00e      	beq.n	800433a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
      break;
 8004320:	e00b      	b.n	800433a <DMA_CheckFifoParam+0xe6>
      break;
 8004322:	bf00      	nop
 8004324:	e00a      	b.n	800433c <DMA_CheckFifoParam+0xe8>
      break;
 8004326:	bf00      	nop
 8004328:	e008      	b.n	800433c <DMA_CheckFifoParam+0xe8>
      break;
 800432a:	bf00      	nop
 800432c:	e006      	b.n	800433c <DMA_CheckFifoParam+0xe8>
      break;
 800432e:	bf00      	nop
 8004330:	e004      	b.n	800433c <DMA_CheckFifoParam+0xe8>
      break;
 8004332:	bf00      	nop
 8004334:	e002      	b.n	800433c <DMA_CheckFifoParam+0xe8>
      break;   
 8004336:	bf00      	nop
 8004338:	e000      	b.n	800433c <DMA_CheckFifoParam+0xe8>
      break;
 800433a:	bf00      	nop
    }
  } 
  
  return status; 
 800433c:	7bfb      	ldrb	r3, [r7, #15]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop

0800434c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800434c:	b480      	push	{r7}
 800434e:	b089      	sub	sp, #36	; 0x24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800435a:	2300      	movs	r3, #0
 800435c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800435e:	2300      	movs	r3, #0
 8004360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e159      	b.n	800461c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004368:	2201      	movs	r2, #1
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4013      	ands	r3, r2
 800437a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	429a      	cmp	r2, r3
 8004382:	f040 8148 	bne.w	8004616 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b01      	cmp	r3, #1
 8004390:	d005      	beq.n	800439e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800439a:	2b02      	cmp	r3, #2
 800439c:	d130      	bne.n	8004400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	2203      	movs	r2, #3
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4013      	ands	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043d4:	2201      	movs	r2, #1
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4013      	ands	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	091b      	lsrs	r3, r3, #4
 80043ea:	f003 0201 	and.w	r2, r3, #1
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	2b03      	cmp	r3, #3
 800440a:	d017      	beq.n	800443c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	2203      	movs	r2, #3
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4313      	orrs	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d123      	bne.n	8004490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	08da      	lsrs	r2, r3, #3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3208      	adds	r2, #8
 8004450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	220f      	movs	r2, #15
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	43db      	mvns	r3, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	4013      	ands	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	08da      	lsrs	r2, r3, #3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3208      	adds	r2, #8
 800448a:	69b9      	ldr	r1, [r7, #24]
 800448c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	2203      	movs	r2, #3
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	43db      	mvns	r3, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4013      	ands	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 0203 	and.w	r2, r3, #3
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80a2 	beq.w	8004616 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	4b57      	ldr	r3, [pc, #348]	; (8004634 <HAL_GPIO_Init+0x2e8>)
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	4a56      	ldr	r2, [pc, #344]	; (8004634 <HAL_GPIO_Init+0x2e8>)
 80044dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044e0:	6453      	str	r3, [r2, #68]	; 0x44
 80044e2:	4b54      	ldr	r3, [pc, #336]	; (8004634 <HAL_GPIO_Init+0x2e8>)
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044ee:	4a52      	ldr	r2, [pc, #328]	; (8004638 <HAL_GPIO_Init+0x2ec>)
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	089b      	lsrs	r3, r3, #2
 80044f4:	3302      	adds	r3, #2
 80044f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	220f      	movs	r2, #15
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43db      	mvns	r3, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4013      	ands	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a49      	ldr	r2, [pc, #292]	; (800463c <HAL_GPIO_Init+0x2f0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d019      	beq.n	800454e <HAL_GPIO_Init+0x202>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a48      	ldr	r2, [pc, #288]	; (8004640 <HAL_GPIO_Init+0x2f4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <HAL_GPIO_Init+0x1fe>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a47      	ldr	r2, [pc, #284]	; (8004644 <HAL_GPIO_Init+0x2f8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00d      	beq.n	8004546 <HAL_GPIO_Init+0x1fa>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a46      	ldr	r2, [pc, #280]	; (8004648 <HAL_GPIO_Init+0x2fc>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d007      	beq.n	8004542 <HAL_GPIO_Init+0x1f6>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a45      	ldr	r2, [pc, #276]	; (800464c <HAL_GPIO_Init+0x300>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d101      	bne.n	800453e <HAL_GPIO_Init+0x1f2>
 800453a:	2304      	movs	r3, #4
 800453c:	e008      	b.n	8004550 <HAL_GPIO_Init+0x204>
 800453e:	2307      	movs	r3, #7
 8004540:	e006      	b.n	8004550 <HAL_GPIO_Init+0x204>
 8004542:	2303      	movs	r3, #3
 8004544:	e004      	b.n	8004550 <HAL_GPIO_Init+0x204>
 8004546:	2302      	movs	r3, #2
 8004548:	e002      	b.n	8004550 <HAL_GPIO_Init+0x204>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <HAL_GPIO_Init+0x204>
 800454e:	2300      	movs	r3, #0
 8004550:	69fa      	ldr	r2, [r7, #28]
 8004552:	f002 0203 	and.w	r2, r2, #3
 8004556:	0092      	lsls	r2, r2, #2
 8004558:	4093      	lsls	r3, r2
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4313      	orrs	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004560:	4935      	ldr	r1, [pc, #212]	; (8004638 <HAL_GPIO_Init+0x2ec>)
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	089b      	lsrs	r3, r3, #2
 8004566:	3302      	adds	r3, #2
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800456e:	4b38      	ldr	r3, [pc, #224]	; (8004650 <HAL_GPIO_Init+0x304>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	43db      	mvns	r3, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4013      	ands	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004592:	4a2f      	ldr	r2, [pc, #188]	; (8004650 <HAL_GPIO_Init+0x304>)
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004598:	4b2d      	ldr	r3, [pc, #180]	; (8004650 <HAL_GPIO_Init+0x304>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	43db      	mvns	r3, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4013      	ands	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045bc:	4a24      	ldr	r2, [pc, #144]	; (8004650 <HAL_GPIO_Init+0x304>)
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045c2:	4b23      	ldr	r3, [pc, #140]	; (8004650 <HAL_GPIO_Init+0x304>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	43db      	mvns	r3, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4013      	ands	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045e6:	4a1a      	ldr	r2, [pc, #104]	; (8004650 <HAL_GPIO_Init+0x304>)
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045ec:	4b18      	ldr	r3, [pc, #96]	; (8004650 <HAL_GPIO_Init+0x304>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4013      	ands	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004610:	4a0f      	ldr	r2, [pc, #60]	; (8004650 <HAL_GPIO_Init+0x304>)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	3301      	adds	r3, #1
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	2b0f      	cmp	r3, #15
 8004620:	f67f aea2 	bls.w	8004368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004624:	bf00      	nop
 8004626:	bf00      	nop
 8004628:	3724      	adds	r7, #36	; 0x24
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800
 8004638:	40013800 	.word	0x40013800
 800463c:	40020000 	.word	0x40020000
 8004640:	40020400 	.word	0x40020400
 8004644:	40020800 	.word	0x40020800
 8004648:	40020c00 	.word	0x40020c00
 800464c:	40021000 	.word	0x40021000
 8004650:	40013c00 	.word	0x40013c00

08004654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	807b      	strh	r3, [r7, #2]
 8004660:	4613      	mov	r3, r2
 8004662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004664:	787b      	ldrb	r3, [r7, #1]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800466a:	887a      	ldrh	r2, [r7, #2]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004670:	e003      	b.n	800467a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004672:	887b      	ldrh	r3, [r7, #2]
 8004674:	041a      	lsls	r2, r3, #16
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	619a      	str	r2, [r3, #24]
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e12b      	b.n	80048f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fe fde6 	bl	8003280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2224      	movs	r2, #36	; 0x24
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0201 	bic.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046ec:	f001 fc60 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 80046f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4a81      	ldr	r2, [pc, #516]	; (80048fc <HAL_I2C_Init+0x274>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d807      	bhi.n	800470c <HAL_I2C_Init+0x84>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4a80      	ldr	r2, [pc, #512]	; (8004900 <HAL_I2C_Init+0x278>)
 8004700:	4293      	cmp	r3, r2
 8004702:	bf94      	ite	ls
 8004704:	2301      	movls	r3, #1
 8004706:	2300      	movhi	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	e006      	b.n	800471a <HAL_I2C_Init+0x92>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4a7d      	ldr	r2, [pc, #500]	; (8004904 <HAL_I2C_Init+0x27c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	bf94      	ite	ls
 8004714:	2301      	movls	r3, #1
 8004716:	2300      	movhi	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e0e7      	b.n	80048f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4a78      	ldr	r2, [pc, #480]	; (8004908 <HAL_I2C_Init+0x280>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	0c9b      	lsrs	r3, r3, #18
 800472c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	4a6a      	ldr	r2, [pc, #424]	; (80048fc <HAL_I2C_Init+0x274>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d802      	bhi.n	800475c <HAL_I2C_Init+0xd4>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	3301      	adds	r3, #1
 800475a:	e009      	b.n	8004770 <HAL_I2C_Init+0xe8>
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	4a69      	ldr	r2, [pc, #420]	; (800490c <HAL_I2C_Init+0x284>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	099b      	lsrs	r3, r3, #6
 800476e:	3301      	adds	r3, #1
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6812      	ldr	r2, [r2, #0]
 8004774:	430b      	orrs	r3, r1
 8004776:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004782:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	495c      	ldr	r1, [pc, #368]	; (80048fc <HAL_I2C_Init+0x274>)
 800478c:	428b      	cmp	r3, r1
 800478e:	d819      	bhi.n	80047c4 <HAL_I2C_Init+0x13c>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1e59      	subs	r1, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	fbb1 f3f3 	udiv	r3, r1, r3
 800479e:	1c59      	adds	r1, r3, #1
 80047a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047a4:	400b      	ands	r3, r1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_I2C_Init+0x138>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1e59      	subs	r1, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80047b8:	3301      	adds	r3, #1
 80047ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047be:	e051      	b.n	8004864 <HAL_I2C_Init+0x1dc>
 80047c0:	2304      	movs	r3, #4
 80047c2:	e04f      	b.n	8004864 <HAL_I2C_Init+0x1dc>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d111      	bne.n	80047f0 <HAL_I2C_Init+0x168>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	1e58      	subs	r0, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6859      	ldr	r1, [r3, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	440b      	add	r3, r1
 80047da:	fbb0 f3f3 	udiv	r3, r0, r3
 80047de:	3301      	adds	r3, #1
 80047e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf0c      	ite	eq
 80047e8:	2301      	moveq	r3, #1
 80047ea:	2300      	movne	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	e012      	b.n	8004816 <HAL_I2C_Init+0x18e>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1e58      	subs	r0, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6859      	ldr	r1, [r3, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	0099      	lsls	r1, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	fbb0 f3f3 	udiv	r3, r0, r3
 8004806:	3301      	adds	r3, #1
 8004808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800480c:	2b00      	cmp	r3, #0
 800480e:	bf0c      	ite	eq
 8004810:	2301      	moveq	r3, #1
 8004812:	2300      	movne	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_I2C_Init+0x196>
 800481a:	2301      	movs	r3, #1
 800481c:	e022      	b.n	8004864 <HAL_I2C_Init+0x1dc>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10e      	bne.n	8004844 <HAL_I2C_Init+0x1bc>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	1e58      	subs	r0, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6859      	ldr	r1, [r3, #4]
 800482e:	460b      	mov	r3, r1
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	440b      	add	r3, r1
 8004834:	fbb0 f3f3 	udiv	r3, r0, r3
 8004838:	3301      	adds	r3, #1
 800483a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800483e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004842:	e00f      	b.n	8004864 <HAL_I2C_Init+0x1dc>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	1e58      	subs	r0, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6859      	ldr	r1, [r3, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	0099      	lsls	r1, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	fbb0 f3f3 	udiv	r3, r0, r3
 800485a:	3301      	adds	r3, #1
 800485c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	6809      	ldr	r1, [r1, #0]
 8004868:	4313      	orrs	r3, r2
 800486a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004892:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6911      	ldr	r1, [r2, #16]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68d2      	ldr	r2, [r2, #12]
 800489e:	4311      	orrs	r1, r2
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6812      	ldr	r2, [r2, #0]
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	000186a0 	.word	0x000186a0
 8004900:	001e847f 	.word	0x001e847f
 8004904:	003d08ff 	.word	0x003d08ff
 8004908:	431bde83 	.word	0x431bde83
 800490c:	10624dd3 	.word	0x10624dd3

08004910 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af02      	add	r7, sp, #8
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	4608      	mov	r0, r1
 800491a:	4611      	mov	r1, r2
 800491c:	461a      	mov	r2, r3
 800491e:	4603      	mov	r3, r0
 8004920:	817b      	strh	r3, [r7, #10]
 8004922:	460b      	mov	r3, r1
 8004924:	813b      	strh	r3, [r7, #8]
 8004926:	4613      	mov	r3, r2
 8004928:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800492a:	f7ff f88f 	bl	8003a4c <HAL_GetTick>
 800492e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b20      	cmp	r3, #32
 800493a:	f040 80d9 	bne.w	8004af0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	2319      	movs	r3, #25
 8004944:	2201      	movs	r2, #1
 8004946:	496d      	ldr	r1, [pc, #436]	; (8004afc <HAL_I2C_Mem_Write+0x1ec>)
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fc8b 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004954:	2302      	movs	r3, #2
 8004956:	e0cc      	b.n	8004af2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_I2C_Mem_Write+0x56>
 8004962:	2302      	movs	r3, #2
 8004964:	e0c5      	b.n	8004af2 <HAL_I2C_Mem_Write+0x1e2>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b01      	cmp	r3, #1
 800497a:	d007      	beq.n	800498c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800499a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2221      	movs	r2, #33	; 0x21
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2240      	movs	r2, #64	; 0x40
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a3a      	ldr	r2, [r7, #32]
 80049b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4a4d      	ldr	r2, [pc, #308]	; (8004b00 <HAL_I2C_Mem_Write+0x1f0>)
 80049cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049ce:	88f8      	ldrh	r0, [r7, #6]
 80049d0:	893a      	ldrh	r2, [r7, #8]
 80049d2:	8979      	ldrh	r1, [r7, #10]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	9301      	str	r3, [sp, #4]
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	4603      	mov	r3, r0
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 fac2 	bl	8004f68 <I2C_RequestMemoryWrite>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d052      	beq.n	8004a90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e081      	b.n	8004af2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 fd50 	bl	8005498 <I2C_WaitOnTXEFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00d      	beq.n	8004a1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d107      	bne.n	8004a16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e06b      	b.n	8004af2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	781a      	ldrb	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d11b      	bne.n	8004a90 <HAL_I2C_Mem_Write+0x180>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d017      	beq.n	8004a90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	781a      	ldrb	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1aa      	bne.n	80049ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fd43 	bl	8005528 <I2C_WaitOnBTFFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00d      	beq.n	8004ac4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d107      	bne.n	8004ac0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004abe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e016      	b.n	8004af2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e000      	b.n	8004af2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004af0:	2302      	movs	r3, #2
  }
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	00100002 	.word	0x00100002
 8004b00:	ffff0000 	.word	0xffff0000

08004b04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08c      	sub	sp, #48	; 0x30
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	4608      	mov	r0, r1
 8004b0e:	4611      	mov	r1, r2
 8004b10:	461a      	mov	r2, r3
 8004b12:	4603      	mov	r3, r0
 8004b14:	817b      	strh	r3, [r7, #10]
 8004b16:	460b      	mov	r3, r1
 8004b18:	813b      	strh	r3, [r7, #8]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b1e:	f7fe ff95 	bl	8003a4c <HAL_GetTick>
 8004b22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	f040 8214 	bne.w	8004f5a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	2319      	movs	r3, #25
 8004b38:	2201      	movs	r2, #1
 8004b3a:	497b      	ldr	r1, [pc, #492]	; (8004d28 <HAL_I2C_Mem_Read+0x224>)
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 fb91 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e207      	b.n	8004f5c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_I2C_Mem_Read+0x56>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e200      	b.n	8004f5c <HAL_I2C_Mem_Read+0x458>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d007      	beq.n	8004b80 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0201 	orr.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2222      	movs	r2, #34	; 0x22
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2240      	movs	r2, #64	; 0x40
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004baa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4a5b      	ldr	r2, [pc, #364]	; (8004d2c <HAL_I2C_Mem_Read+0x228>)
 8004bc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bc2:	88f8      	ldrh	r0, [r7, #6]
 8004bc4:	893a      	ldrh	r2, [r7, #8]
 8004bc6:	8979      	ldrh	r1, [r7, #10]
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	9301      	str	r3, [sp, #4]
 8004bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 fa5e 	bl	8005094 <I2C_RequestMemoryRead>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e1bc      	b.n	8004f5c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d113      	bne.n	8004c12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bea:	2300      	movs	r3, #0
 8004bec:	623b      	str	r3, [r7, #32]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	623b      	str	r3, [r7, #32]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	623b      	str	r3, [r7, #32]
 8004bfe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	e190      	b.n	8004f34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d11b      	bne.n	8004c52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	61fb      	str	r3, [r7, #28]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	61fb      	str	r3, [r7, #28]
 8004c3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	e170      	b.n	8004f34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d11b      	bne.n	8004c92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	e150      	b.n	8004f34 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ca8:	e144      	b.n	8004f34 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	f200 80f1 	bhi.w	8004e96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d123      	bne.n	8004d04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fc79 	bl	80055b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e145      	b.n	8004f5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d02:	e117      	b.n	8004f34 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d14e      	bne.n	8004daa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	2200      	movs	r2, #0
 8004d14:	4906      	ldr	r1, [pc, #24]	; (8004d30 <HAL_I2C_Mem_Read+0x22c>)
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 faa4 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e11a      	b.n	8004f5c <HAL_I2C_Mem_Read+0x458>
 8004d26:	bf00      	nop
 8004d28:	00100002 	.word	0x00100002
 8004d2c:	ffff0000 	.word	0xffff0000
 8004d30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691a      	ldr	r2, [r3, #16]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004da8:	e0c4      	b.n	8004f34 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db0:	2200      	movs	r2, #0
 8004db2:	496c      	ldr	r1, [pc, #432]	; (8004f64 <HAL_I2C_Mem_Read+0x460>)
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 fa55 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0cb      	b.n	8004f5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	4955      	ldr	r1, [pc, #340]	; (8004f64 <HAL_I2C_Mem_Read+0x460>)
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 fa27 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e09d      	b.n	8004f5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691a      	ldr	r2, [r3, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e94:	e04e      	b.n	8004f34 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 fb8c 	bl	80055b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e058      	b.n	8004f5c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d124      	bne.n	8004f34 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d107      	bne.n	8004f02 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f00:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f47f aeb6 	bne.w	8004caa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e000      	b.n	8004f5c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f5a:	2302      	movs	r3, #2
  }
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3728      	adds	r7, #40	; 0x28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	00010004 	.word	0x00010004

08004f68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	4608      	mov	r0, r1
 8004f72:	4611      	mov	r1, r2
 8004f74:	461a      	mov	r2, r3
 8004f76:	4603      	mov	r3, r0
 8004f78:	817b      	strh	r3, [r7, #10]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	813b      	strh	r3, [r7, #8]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f960 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00d      	beq.n	8004fc6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb8:	d103      	bne.n	8004fc2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e05f      	b.n	8005086 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fc6:	897b      	ldrh	r3, [r7, #10]
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	6a3a      	ldr	r2, [r7, #32]
 8004fda:	492d      	ldr	r1, [pc, #180]	; (8005090 <I2C_RequestMemoryWrite+0x128>)
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 f9bb 	bl	8005358 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e04c      	b.n	8005086 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005004:	6a39      	ldr	r1, [r7, #32]
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fa46 	bl	8005498 <I2C_WaitOnTXEFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00d      	beq.n	800502e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	2b04      	cmp	r3, #4
 8005018:	d107      	bne.n	800502a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005028:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e02b      	b.n	8005086 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800502e:	88fb      	ldrh	r3, [r7, #6]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d105      	bne.n	8005040 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005034:	893b      	ldrh	r3, [r7, #8]
 8005036:	b2da      	uxtb	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	611a      	str	r2, [r3, #16]
 800503e:	e021      	b.n	8005084 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005040:	893b      	ldrh	r3, [r7, #8]
 8005042:	0a1b      	lsrs	r3, r3, #8
 8005044:	b29b      	uxth	r3, r3
 8005046:	b2da      	uxtb	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800504e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005050:	6a39      	ldr	r1, [r7, #32]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 fa20 	bl	8005498 <I2C_WaitOnTXEFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00d      	beq.n	800507a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	2b04      	cmp	r3, #4
 8005064:	d107      	bne.n	8005076 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005074:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e005      	b.n	8005086 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800507a:	893b      	ldrh	r3, [r7, #8]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	00010002 	.word	0x00010002

08005094 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af02      	add	r7, sp, #8
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	4608      	mov	r0, r1
 800509e:	4611      	mov	r1, r2
 80050a0:	461a      	mov	r2, r3
 80050a2:	4603      	mov	r3, r0
 80050a4:	817b      	strh	r3, [r7, #10]
 80050a6:	460b      	mov	r3, r1
 80050a8:	813b      	strh	r3, [r7, #8]
 80050aa:	4613      	mov	r3, r2
 80050ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 f8c2 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00d      	beq.n	8005102 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f4:	d103      	bne.n	80050fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e0aa      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005102:	897b      	ldrh	r3, [r7, #10]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	461a      	mov	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005110:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	6a3a      	ldr	r2, [r7, #32]
 8005116:	4952      	ldr	r1, [pc, #328]	; (8005260 <I2C_RequestMemoryRead+0x1cc>)
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 f91d 	bl	8005358 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e097      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800513e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005140:	6a39      	ldr	r1, [r7, #32]
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 f9a8 	bl	8005498 <I2C_WaitOnTXEFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00d      	beq.n	800516a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	2b04      	cmp	r3, #4
 8005154:	d107      	bne.n	8005166 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005164:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e076      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d105      	bne.n	800517c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005170:	893b      	ldrh	r3, [r7, #8]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	611a      	str	r2, [r3, #16]
 800517a:	e021      	b.n	80051c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800517c:	893b      	ldrh	r3, [r7, #8]
 800517e:	0a1b      	lsrs	r3, r3, #8
 8005180:	b29b      	uxth	r3, r3
 8005182:	b2da      	uxtb	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800518a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518c:	6a39      	ldr	r1, [r7, #32]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f982 	bl	8005498 <I2C_WaitOnTXEFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00d      	beq.n	80051b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d107      	bne.n	80051b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e050      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051b6:	893b      	ldrh	r3, [r7, #8]
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c2:	6a39      	ldr	r1, [r7, #32]
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f967 	bl	8005498 <I2C_WaitOnTXEFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00d      	beq.n	80051ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d107      	bne.n	80051e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e035      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	2200      	movs	r2, #0
 8005204:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f82b 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00d      	beq.n	8005230 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005222:	d103      	bne.n	800522c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800522a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e013      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005230:	897b      	ldrh	r3, [r7, #10]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	b2da      	uxtb	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	6a3a      	ldr	r2, [r7, #32]
 8005244:	4906      	ldr	r1, [pc, #24]	; (8005260 <I2C_RequestMemoryRead+0x1cc>)
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 f886 	bl	8005358 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	00010002 	.word	0x00010002

08005264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	4613      	mov	r3, r2
 8005272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005274:	e048      	b.n	8005308 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527c:	d044      	beq.n	8005308 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527e:	f7fe fbe5 	bl	8003a4c <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d302      	bcc.n	8005294 <I2C_WaitOnFlagUntilTimeout+0x30>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d139      	bne.n	8005308 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	0c1b      	lsrs	r3, r3, #16
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b01      	cmp	r3, #1
 800529c:	d10d      	bne.n	80052ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	43da      	mvns	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4013      	ands	r3, r2
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	bf0c      	ite	eq
 80052b0:	2301      	moveq	r3, #1
 80052b2:	2300      	movne	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	461a      	mov	r2, r3
 80052b8:	e00c      	b.n	80052d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	43da      	mvns	r2, r3
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4013      	ands	r3, r2
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bf0c      	ite	eq
 80052cc:	2301      	moveq	r3, #1
 80052ce:	2300      	movne	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	461a      	mov	r2, r3
 80052d4:	79fb      	ldrb	r3, [r7, #7]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d116      	bne.n	8005308 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	f043 0220 	orr.w	r2, r3, #32
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e023      	b.n	8005350 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	0c1b      	lsrs	r3, r3, #16
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b01      	cmp	r3, #1
 8005310:	d10d      	bne.n	800532e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	43da      	mvns	r2, r3
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4013      	ands	r3, r2
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	bf0c      	ite	eq
 8005324:	2301      	moveq	r3, #1
 8005326:	2300      	movne	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	e00c      	b.n	8005348 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	43da      	mvns	r2, r3
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4013      	ands	r3, r2
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	bf0c      	ite	eq
 8005340:	2301      	moveq	r3, #1
 8005342:	2300      	movne	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	79fb      	ldrb	r3, [r7, #7]
 800534a:	429a      	cmp	r2, r3
 800534c:	d093      	beq.n	8005276 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
 8005364:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005366:	e071      	b.n	800544c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005376:	d123      	bne.n	80053c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005386:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005390:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	f043 0204 	orr.w	r2, r3, #4
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e067      	b.n	8005490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c6:	d041      	beq.n	800544c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c8:	f7fe fb40 	bl	8003a4c <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d302      	bcc.n	80053de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d136      	bne.n	800544c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	0c1b      	lsrs	r3, r3, #16
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d10c      	bne.n	8005402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	43da      	mvns	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4013      	ands	r3, r2
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	bf14      	ite	ne
 80053fa:	2301      	movne	r3, #1
 80053fc:	2300      	moveq	r3, #0
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	e00b      	b.n	800541a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	43da      	mvns	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	4013      	ands	r3, r2
 800540e:	b29b      	uxth	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	bf14      	ite	ne
 8005414:	2301      	movne	r3, #1
 8005416:	2300      	moveq	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d016      	beq.n	800544c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	f043 0220 	orr.w	r2, r3, #32
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e021      	b.n	8005490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	0c1b      	lsrs	r3, r3, #16
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b01      	cmp	r3, #1
 8005454:	d10c      	bne.n	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	43da      	mvns	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4013      	ands	r3, r2
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	bf14      	ite	ne
 8005468:	2301      	movne	r3, #1
 800546a:	2300      	moveq	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	e00b      	b.n	8005488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	43da      	mvns	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4013      	ands	r3, r2
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	bf14      	ite	ne
 8005482:	2301      	movne	r3, #1
 8005484:	2300      	moveq	r3, #0
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	f47f af6d 	bne.w	8005368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054a4:	e034      	b.n	8005510 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 f8e3 	bl	8005672 <I2C_IsAcknowledgeFailed>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e034      	b.n	8005520 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054bc:	d028      	beq.n	8005510 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054be:	f7fe fac5 	bl	8003a4c <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d302      	bcc.n	80054d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d11d      	bne.n	8005510 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054de:	2b80      	cmp	r3, #128	; 0x80
 80054e0:	d016      	beq.n	8005510 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	f043 0220 	orr.w	r2, r3, #32
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e007      	b.n	8005520 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551a:	2b80      	cmp	r3, #128	; 0x80
 800551c:	d1c3      	bne.n	80054a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005534:	e034      	b.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 f89b 	bl	8005672 <I2C_IsAcknowledgeFailed>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e034      	b.n	80055b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554c:	d028      	beq.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800554e:	f7fe fa7d 	bl	8003a4c <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	429a      	cmp	r2, r3
 800555c:	d302      	bcc.n	8005564 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d11d      	bne.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b04      	cmp	r3, #4
 8005570:	d016      	beq.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	f043 0220 	orr.w	r2, r3, #32
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e007      	b.n	80055b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d1c3      	bne.n	8005536 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055c4:	e049      	b.n	800565a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b10      	cmp	r3, #16
 80055d2:	d119      	bne.n	8005608 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f06f 0210 	mvn.w	r2, #16
 80055dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e030      	b.n	800566a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005608:	f7fe fa20 	bl	8003a4c <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	429a      	cmp	r2, r3
 8005616:	d302      	bcc.n	800561e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d11d      	bne.n	800565a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005628:	2b40      	cmp	r3, #64	; 0x40
 800562a:	d016      	beq.n	800565a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2220      	movs	r2, #32
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f043 0220 	orr.w	r2, r3, #32
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e007      	b.n	800566a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005664:	2b40      	cmp	r3, #64	; 0x40
 8005666:	d1ae      	bne.n	80055c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005688:	d11b      	bne.n	80056c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005692:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f043 0204 	orr.w	r2, r3, #4
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e267      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d075      	beq.n	80057da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056ee:	4b88      	ldr	r3, [pc, #544]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 030c 	and.w	r3, r3, #12
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d00c      	beq.n	8005714 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056fa:	4b85      	ldr	r3, [pc, #532]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005702:	2b08      	cmp	r3, #8
 8005704:	d112      	bne.n	800572c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005706:	4b82      	ldr	r3, [pc, #520]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800570e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005712:	d10b      	bne.n	800572c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005714:	4b7e      	ldr	r3, [pc, #504]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d05b      	beq.n	80057d8 <HAL_RCC_OscConfig+0x108>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d157      	bne.n	80057d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e242      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005734:	d106      	bne.n	8005744 <HAL_RCC_OscConfig+0x74>
 8005736:	4b76      	ldr	r3, [pc, #472]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a75      	ldr	r2, [pc, #468]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 800573c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	e01d      	b.n	8005780 <HAL_RCC_OscConfig+0xb0>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800574c:	d10c      	bne.n	8005768 <HAL_RCC_OscConfig+0x98>
 800574e:	4b70      	ldr	r3, [pc, #448]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a6f      	ldr	r2, [pc, #444]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 8005754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	4b6d      	ldr	r3, [pc, #436]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a6c      	ldr	r2, [pc, #432]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 8005760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	e00b      	b.n	8005780 <HAL_RCC_OscConfig+0xb0>
 8005768:	4b69      	ldr	r3, [pc, #420]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a68      	ldr	r2, [pc, #416]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 800576e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005772:	6013      	str	r3, [r2, #0]
 8005774:	4b66      	ldr	r3, [pc, #408]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a65      	ldr	r2, [pc, #404]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 800577a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800577e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d013      	beq.n	80057b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005788:	f7fe f960 	bl	8003a4c <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005790:	f7fe f95c 	bl	8003a4c <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b64      	cmp	r3, #100	; 0x64
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e207      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a2:	4b5b      	ldr	r3, [pc, #364]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0f0      	beq.n	8005790 <HAL_RCC_OscConfig+0xc0>
 80057ae:	e014      	b.n	80057da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b0:	f7fe f94c 	bl	8003a4c <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057b8:	f7fe f948 	bl	8003a4c <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b64      	cmp	r3, #100	; 0x64
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e1f3      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ca:	4b51      	ldr	r3, [pc, #324]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f0      	bne.n	80057b8 <HAL_RCC_OscConfig+0xe8>
 80057d6:	e000      	b.n	80057da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d063      	beq.n	80058ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057e6:	4b4a      	ldr	r3, [pc, #296]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 030c 	and.w	r3, r3, #12
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00b      	beq.n	800580a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057f2:	4b47      	ldr	r3, [pc, #284]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057fa:	2b08      	cmp	r3, #8
 80057fc:	d11c      	bne.n	8005838 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057fe:	4b44      	ldr	r3, [pc, #272]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d116      	bne.n	8005838 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800580a:	4b41      	ldr	r3, [pc, #260]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d005      	beq.n	8005822 <HAL_RCC_OscConfig+0x152>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d001      	beq.n	8005822 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e1c7      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005822:	4b3b      	ldr	r3, [pc, #236]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	4937      	ldr	r1, [pc, #220]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 8005832:	4313      	orrs	r3, r2
 8005834:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005836:	e03a      	b.n	80058ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d020      	beq.n	8005882 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005840:	4b34      	ldr	r3, [pc, #208]	; (8005914 <HAL_RCC_OscConfig+0x244>)
 8005842:	2201      	movs	r2, #1
 8005844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005846:	f7fe f901 	bl	8003a4c <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800584e:	f7fe f8fd 	bl	8003a4c <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e1a8      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005860:	4b2b      	ldr	r3, [pc, #172]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0f0      	beq.n	800584e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800586c:	4b28      	ldr	r3, [pc, #160]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	4925      	ldr	r1, [pc, #148]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 800587c:	4313      	orrs	r3, r2
 800587e:	600b      	str	r3, [r1, #0]
 8005880:	e015      	b.n	80058ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005882:	4b24      	ldr	r3, [pc, #144]	; (8005914 <HAL_RCC_OscConfig+0x244>)
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005888:	f7fe f8e0 	bl	8003a4c <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005890:	f7fe f8dc 	bl	8003a4c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e187      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058a2:	4b1b      	ldr	r3, [pc, #108]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d036      	beq.n	8005928 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d016      	beq.n	80058f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058c2:	4b15      	ldr	r3, [pc, #84]	; (8005918 <HAL_RCC_OscConfig+0x248>)
 80058c4:	2201      	movs	r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c8:	f7fe f8c0 	bl	8003a4c <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058d0:	f7fe f8bc 	bl	8003a4c <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e167      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058e2:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <HAL_RCC_OscConfig+0x240>)
 80058e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0f0      	beq.n	80058d0 <HAL_RCC_OscConfig+0x200>
 80058ee:	e01b      	b.n	8005928 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058f0:	4b09      	ldr	r3, [pc, #36]	; (8005918 <HAL_RCC_OscConfig+0x248>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058f6:	f7fe f8a9 	bl	8003a4c <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058fc:	e00e      	b.n	800591c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058fe:	f7fe f8a5 	bl	8003a4c <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d907      	bls.n	800591c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e150      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
 8005910:	40023800 	.word	0x40023800
 8005914:	42470000 	.word	0x42470000
 8005918:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800591c:	4b88      	ldr	r3, [pc, #544]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 800591e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1ea      	bne.n	80058fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 8097 	beq.w	8005a64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005936:	2300      	movs	r3, #0
 8005938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800593a:	4b81      	ldr	r3, [pc, #516]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10f      	bne.n	8005966 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005946:	2300      	movs	r3, #0
 8005948:	60bb      	str	r3, [r7, #8]
 800594a:	4b7d      	ldr	r3, [pc, #500]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	4a7c      	ldr	r2, [pc, #496]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005954:	6413      	str	r3, [r2, #64]	; 0x40
 8005956:	4b7a      	ldr	r3, [pc, #488]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800595e:	60bb      	str	r3, [r7, #8]
 8005960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005962:	2301      	movs	r3, #1
 8005964:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005966:	4b77      	ldr	r3, [pc, #476]	; (8005b44 <HAL_RCC_OscConfig+0x474>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596e:	2b00      	cmp	r3, #0
 8005970:	d118      	bne.n	80059a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005972:	4b74      	ldr	r3, [pc, #464]	; (8005b44 <HAL_RCC_OscConfig+0x474>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a73      	ldr	r2, [pc, #460]	; (8005b44 <HAL_RCC_OscConfig+0x474>)
 8005978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800597c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800597e:	f7fe f865 	bl	8003a4c <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005984:	e008      	b.n	8005998 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005986:	f7fe f861 	bl	8003a4c <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e10c      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005998:	4b6a      	ldr	r3, [pc, #424]	; (8005b44 <HAL_RCC_OscConfig+0x474>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0f0      	beq.n	8005986 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d106      	bne.n	80059ba <HAL_RCC_OscConfig+0x2ea>
 80059ac:	4b64      	ldr	r3, [pc, #400]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b0:	4a63      	ldr	r2, [pc, #396]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059b2:	f043 0301 	orr.w	r3, r3, #1
 80059b6:	6713      	str	r3, [r2, #112]	; 0x70
 80059b8:	e01c      	b.n	80059f4 <HAL_RCC_OscConfig+0x324>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b05      	cmp	r3, #5
 80059c0:	d10c      	bne.n	80059dc <HAL_RCC_OscConfig+0x30c>
 80059c2:	4b5f      	ldr	r3, [pc, #380]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c6:	4a5e      	ldr	r2, [pc, #376]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059c8:	f043 0304 	orr.w	r3, r3, #4
 80059cc:	6713      	str	r3, [r2, #112]	; 0x70
 80059ce:	4b5c      	ldr	r3, [pc, #368]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d2:	4a5b      	ldr	r2, [pc, #364]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	6713      	str	r3, [r2, #112]	; 0x70
 80059da:	e00b      	b.n	80059f4 <HAL_RCC_OscConfig+0x324>
 80059dc:	4b58      	ldr	r3, [pc, #352]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e0:	4a57      	ldr	r2, [pc, #348]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059e2:	f023 0301 	bic.w	r3, r3, #1
 80059e6:	6713      	str	r3, [r2, #112]	; 0x70
 80059e8:	4b55      	ldr	r3, [pc, #340]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ec:	4a54      	ldr	r2, [pc, #336]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059ee:	f023 0304 	bic.w	r3, r3, #4
 80059f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d015      	beq.n	8005a28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059fc:	f7fe f826 	bl	8003a4c <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a02:	e00a      	b.n	8005a1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a04:	f7fe f822 	bl	8003a4c <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e0cb      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a1a:	4b49      	ldr	r3, [pc, #292]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0ee      	beq.n	8005a04 <HAL_RCC_OscConfig+0x334>
 8005a26:	e014      	b.n	8005a52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a28:	f7fe f810 	bl	8003a4c <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a2e:	e00a      	b.n	8005a46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a30:	f7fe f80c 	bl	8003a4c <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e0b5      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a46:	4b3e      	ldr	r3, [pc, #248]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1ee      	bne.n	8005a30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a52:	7dfb      	ldrb	r3, [r7, #23]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d105      	bne.n	8005a64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a58:	4b39      	ldr	r3, [pc, #228]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5c:	4a38      	ldr	r2, [pc, #224]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80a1 	beq.w	8005bb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a6e:	4b34      	ldr	r3, [pc, #208]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 030c 	and.w	r3, r3, #12
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d05c      	beq.n	8005b34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d141      	bne.n	8005b06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a82:	4b31      	ldr	r3, [pc, #196]	; (8005b48 <HAL_RCC_OscConfig+0x478>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a88:	f7fd ffe0 	bl	8003a4c <HAL_GetTick>
 8005a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a90:	f7fd ffdc 	bl	8003a4c <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e087      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aa2:	4b27      	ldr	r3, [pc, #156]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1f0      	bne.n	8005a90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69da      	ldr	r2, [r3, #28]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	019b      	lsls	r3, r3, #6
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac4:	085b      	lsrs	r3, r3, #1
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	041b      	lsls	r3, r3, #16
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	061b      	lsls	r3, r3, #24
 8005ad2:	491b      	ldr	r1, [pc, #108]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ad8:	4b1b      	ldr	r3, [pc, #108]	; (8005b48 <HAL_RCC_OscConfig+0x478>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ade:	f7fd ffb5 	bl	8003a4c <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ae6:	f7fd ffb1 	bl	8003a4c <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e05c      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005af8:	4b11      	ldr	r3, [pc, #68]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0f0      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x416>
 8005b04:	e054      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b06:	4b10      	ldr	r3, [pc, #64]	; (8005b48 <HAL_RCC_OscConfig+0x478>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0c:	f7fd ff9e 	bl	8003a4c <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b14:	f7fd ff9a 	bl	8003a4c <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e045      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b26:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f0      	bne.n	8005b14 <HAL_RCC_OscConfig+0x444>
 8005b32:	e03d      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d107      	bne.n	8005b4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e038      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
 8005b40:	40023800 	.word	0x40023800
 8005b44:	40007000 	.word	0x40007000
 8005b48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b4c:	4b1b      	ldr	r3, [pc, #108]	; (8005bbc <HAL_RCC_OscConfig+0x4ec>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d028      	beq.n	8005bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d121      	bne.n	8005bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d11a      	bne.n	8005bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d111      	bne.n	8005bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	3b01      	subs	r3, #1
 8005b96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d107      	bne.n	8005bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d001      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40023800 	.word	0x40023800

08005bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e0cc      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bd4:	4b68      	ldr	r3, [pc, #416]	; (8005d78 <HAL_RCC_ClockConfig+0x1b8>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d90c      	bls.n	8005bfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be2:	4b65      	ldr	r3, [pc, #404]	; (8005d78 <HAL_RCC_ClockConfig+0x1b8>)
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bea:	4b63      	ldr	r3, [pc, #396]	; (8005d78 <HAL_RCC_ClockConfig+0x1b8>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d001      	beq.n	8005bfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0b8      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d020      	beq.n	8005c4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c14:	4b59      	ldr	r3, [pc, #356]	; (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	4a58      	ldr	r2, [pc, #352]	; (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c2c:	4b53      	ldr	r3, [pc, #332]	; (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	4a52      	ldr	r2, [pc, #328]	; (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c38:	4b50      	ldr	r3, [pc, #320]	; (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	494d      	ldr	r1, [pc, #308]	; (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d044      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d107      	bne.n	8005c6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c5e:	4b47      	ldr	r3, [pc, #284]	; (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d119      	bne.n	8005c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e07f      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d003      	beq.n	8005c7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	d107      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c7e:	4b3f      	ldr	r3, [pc, #252]	; (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d109      	bne.n	8005c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e06f      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c8e:	4b3b      	ldr	r3, [pc, #236]	; (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e067      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c9e:	4b37      	ldr	r3, [pc, #220]	; (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f023 0203 	bic.w	r2, r3, #3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	4934      	ldr	r1, [pc, #208]	; (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cb0:	f7fd fecc 	bl	8003a4c <HAL_GetTick>
 8005cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cb6:	e00a      	b.n	8005cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb8:	f7fd fec8 	bl	8003a4c <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e04f      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cce:	4b2b      	ldr	r3, [pc, #172]	; (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 020c 	and.w	r2, r3, #12
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d1eb      	bne.n	8005cb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce0:	4b25      	ldr	r3, [pc, #148]	; (8005d78 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d20c      	bcs.n	8005d08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cee:	4b22      	ldr	r3, [pc, #136]	; (8005d78 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	b2d2      	uxtb	r2, r2
 8005cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf6:	4b20      	ldr	r3, [pc, #128]	; (8005d78 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d001      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e032      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d14:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	4916      	ldr	r1, [pc, #88]	; (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d009      	beq.n	8005d46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d32:	4b12      	ldr	r3, [pc, #72]	; (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	490e      	ldr	r1, [pc, #56]	; (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d46:	f000 f821 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	490a      	ldr	r1, [pc, #40]	; (8005d80 <HAL_RCC_ClockConfig+0x1c0>)
 8005d58:	5ccb      	ldrb	r3, [r1, r3]
 8005d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5e:	4a09      	ldr	r2, [pc, #36]	; (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d62:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <HAL_RCC_ClockConfig+0x1c8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fd fd44 	bl	80037f4 <HAL_InitTick>

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	40023c00 	.word	0x40023c00
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	08009ba4 	.word	0x08009ba4
 8005d84:	20000090 	.word	0x20000090
 8005d88:	20000094 	.word	0x20000094

08005d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d90:	b094      	sub	sp, #80	; 0x50
 8005d92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	647b      	str	r3, [r7, #68]	; 0x44
 8005d98:	2300      	movs	r3, #0
 8005d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005da4:	4b79      	ldr	r3, [pc, #484]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 030c 	and.w	r3, r3, #12
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d00d      	beq.n	8005dcc <HAL_RCC_GetSysClockFreq+0x40>
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	f200 80e1 	bhi.w	8005f78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d003      	beq.n	8005dc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005dbe:	e0db      	b.n	8005f78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005dc0:	4b73      	ldr	r3, [pc, #460]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dc2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005dc4:	e0db      	b.n	8005f7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005dc6:	4b73      	ldr	r3, [pc, #460]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x208>)
 8005dc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005dca:	e0d8      	b.n	8005f7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dcc:	4b6f      	ldr	r3, [pc, #444]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dd4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dd6:	4b6d      	ldr	r3, [pc, #436]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d063      	beq.n	8005eaa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005de2:	4b6a      	ldr	r3, [pc, #424]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	2200      	movs	r2, #0
 8005dea:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df4:	633b      	str	r3, [r7, #48]	; 0x30
 8005df6:	2300      	movs	r3, #0
 8005df8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005dfe:	4622      	mov	r2, r4
 8005e00:	462b      	mov	r3, r5
 8005e02:	f04f 0000 	mov.w	r0, #0
 8005e06:	f04f 0100 	mov.w	r1, #0
 8005e0a:	0159      	lsls	r1, r3, #5
 8005e0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e10:	0150      	lsls	r0, r2, #5
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	4621      	mov	r1, r4
 8005e18:	1a51      	subs	r1, r2, r1
 8005e1a:	6139      	str	r1, [r7, #16]
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	eb63 0301 	sbc.w	r3, r3, r1
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e30:	4659      	mov	r1, fp
 8005e32:	018b      	lsls	r3, r1, #6
 8005e34:	4651      	mov	r1, sl
 8005e36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e3a:	4651      	mov	r1, sl
 8005e3c:	018a      	lsls	r2, r1, #6
 8005e3e:	4651      	mov	r1, sl
 8005e40:	ebb2 0801 	subs.w	r8, r2, r1
 8005e44:	4659      	mov	r1, fp
 8005e46:	eb63 0901 	sbc.w	r9, r3, r1
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e5e:	4690      	mov	r8, r2
 8005e60:	4699      	mov	r9, r3
 8005e62:	4623      	mov	r3, r4
 8005e64:	eb18 0303 	adds.w	r3, r8, r3
 8005e68:	60bb      	str	r3, [r7, #8]
 8005e6a:	462b      	mov	r3, r5
 8005e6c:	eb49 0303 	adc.w	r3, r9, r3
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e7e:	4629      	mov	r1, r5
 8005e80:	024b      	lsls	r3, r1, #9
 8005e82:	4621      	mov	r1, r4
 8005e84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e88:	4621      	mov	r1, r4
 8005e8a:	024a      	lsls	r2, r1, #9
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	4619      	mov	r1, r3
 8005e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e92:	2200      	movs	r2, #0
 8005e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e9c:	f7fa fe84 	bl	8000ba8 <__aeabi_uldivmod>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea8:	e058      	b.n	8005f5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eaa:	4b38      	ldr	r3, [pc, #224]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	099b      	lsrs	r3, r3, #6
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005eba:	623b      	str	r3, [r7, #32]
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	f04f 0000 	mov.w	r0, #0
 8005ecc:	f04f 0100 	mov.w	r1, #0
 8005ed0:	0159      	lsls	r1, r3, #5
 8005ed2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ed6:	0150      	lsls	r0, r2, #5
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4641      	mov	r1, r8
 8005ede:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	f04f 0300 	mov.w	r3, #0
 8005ef0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ef4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ef8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005efc:	ebb2 040a 	subs.w	r4, r2, sl
 8005f00:	eb63 050b 	sbc.w	r5, r3, fp
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	00eb      	lsls	r3, r5, #3
 8005f0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f12:	00e2      	lsls	r2, r4, #3
 8005f14:	4614      	mov	r4, r2
 8005f16:	461d      	mov	r5, r3
 8005f18:	4643      	mov	r3, r8
 8005f1a:	18e3      	adds	r3, r4, r3
 8005f1c:	603b      	str	r3, [r7, #0]
 8005f1e:	464b      	mov	r3, r9
 8005f20:	eb45 0303 	adc.w	r3, r5, r3
 8005f24:	607b      	str	r3, [r7, #4]
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f32:	4629      	mov	r1, r5
 8005f34:	028b      	lsls	r3, r1, #10
 8005f36:	4621      	mov	r1, r4
 8005f38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	028a      	lsls	r2, r1, #10
 8005f40:	4610      	mov	r0, r2
 8005f42:	4619      	mov	r1, r3
 8005f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f46:	2200      	movs	r2, #0
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	61fa      	str	r2, [r7, #28]
 8005f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f50:	f7fa fe2a 	bl	8000ba8 <__aeabi_uldivmod>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4613      	mov	r3, r2
 8005f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	0c1b      	lsrs	r3, r3, #16
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	3301      	adds	r3, #1
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005f6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f76:	e002      	b.n	8005f7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f78:	4b05      	ldr	r3, [pc, #20]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3750      	adds	r7, #80	; 0x50
 8005f84:	46bd      	mov	sp, r7
 8005f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f8a:	bf00      	nop
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	00f42400 	.word	0x00f42400
 8005f94:	007a1200 	.word	0x007a1200

08005f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f9c:	4b03      	ldr	r3, [pc, #12]	; (8005fac <HAL_RCC_GetHCLKFreq+0x14>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	20000090 	.word	0x20000090

08005fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fb4:	f7ff fff0 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	0a9b      	lsrs	r3, r3, #10
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	4903      	ldr	r1, [pc, #12]	; (8005fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fc6:	5ccb      	ldrb	r3, [r1, r3]
 8005fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40023800 	.word	0x40023800
 8005fd4:	08009bb4 	.word	0x08009bb4

08005fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005fdc:	f7ff ffdc 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	0b5b      	lsrs	r3, r3, #13
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	4903      	ldr	r1, [pc, #12]	; (8005ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fee:	5ccb      	ldrb	r3, [r1, r3]
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	08009bb4 	.word	0x08009bb4

08006000 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	220f      	movs	r2, #15
 800600e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006010:	4b12      	ldr	r3, [pc, #72]	; (800605c <HAL_RCC_GetClockConfig+0x5c>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f003 0203 	and.w	r2, r3, #3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800601c:	4b0f      	ldr	r3, [pc, #60]	; (800605c <HAL_RCC_GetClockConfig+0x5c>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006028:	4b0c      	ldr	r3, [pc, #48]	; (800605c <HAL_RCC_GetClockConfig+0x5c>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006034:	4b09      	ldr	r3, [pc, #36]	; (800605c <HAL_RCC_GetClockConfig+0x5c>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	08db      	lsrs	r3, r3, #3
 800603a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006042:	4b07      	ldr	r3, [pc, #28]	; (8006060 <HAL_RCC_GetClockConfig+0x60>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0207 	and.w	r2, r3, #7
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	601a      	str	r2, [r3, #0]
}
 800604e:	bf00      	nop
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	40023800 	.word	0x40023800
 8006060:	40023c00 	.word	0x40023c00

08006064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e07b      	b.n	800616e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	2b00      	cmp	r3, #0
 800607c:	d108      	bne.n	8006090 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006086:	d009      	beq.n	800609c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	61da      	str	r2, [r3, #28]
 800608e:	e005      	b.n	800609c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d106      	bne.n	80060bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7fd fa34 	bl	8003524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	431a      	orrs	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800610c:	431a      	orrs	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006120:	ea42 0103 	orr.w	r1, r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006128:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	0c1b      	lsrs	r3, r3, #16
 800613a:	f003 0104 	and.w	r1, r3, #4
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	f003 0210 	and.w	r2, r3, #16
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69da      	ldr	r2, [r3, #28]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800615c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b088      	sub	sp, #32
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	603b      	str	r3, [r7, #0]
 8006182:	4613      	mov	r3, r2
 8006184:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <HAL_SPI_Transmit+0x22>
 8006194:	2302      	movs	r3, #2
 8006196:	e12d      	b.n	80063f4 <HAL_SPI_Transmit+0x27e>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061a0:	f7fd fc54 	bl	8003a4c <HAL_GetTick>
 80061a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d002      	beq.n	80061bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80061b6:	2302      	movs	r3, #2
 80061b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061ba:	e116      	b.n	80063ea <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <HAL_SPI_Transmit+0x52>
 80061c2:	88fb      	ldrh	r3, [r7, #6]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d102      	bne.n	80061ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061cc:	e10d      	b.n	80063ea <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2203      	movs	r2, #3
 80061d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	88fa      	ldrh	r2, [r7, #6]
 80061e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	88fa      	ldrh	r2, [r7, #6]
 80061ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006214:	d10f      	bne.n	8006236 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006224:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006234:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b40      	cmp	r3, #64	; 0x40
 8006242:	d007      	beq.n	8006254 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006252:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800625c:	d14f      	bne.n	80062fe <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <HAL_SPI_Transmit+0xf6>
 8006266:	8afb      	ldrh	r3, [r7, #22]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d142      	bne.n	80062f2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006270:	881a      	ldrh	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	1c9a      	adds	r2, r3, #2
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006286:	b29b      	uxth	r3, r3
 8006288:	3b01      	subs	r3, #1
 800628a:	b29a      	uxth	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006290:	e02f      	b.n	80062f2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b02      	cmp	r3, #2
 800629e:	d112      	bne.n	80062c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a4:	881a      	ldrh	r2, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b0:	1c9a      	adds	r2, r3, #2
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	3b01      	subs	r3, #1
 80062be:	b29a      	uxth	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80062c4:	e015      	b.n	80062f2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062c6:	f7fd fbc1 	bl	8003a4c <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d803      	bhi.n	80062de <HAL_SPI_Transmit+0x168>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062dc:	d102      	bne.n	80062e4 <HAL_SPI_Transmit+0x16e>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d106      	bne.n	80062f2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80062f0:	e07b      	b.n	80063ea <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1ca      	bne.n	8006292 <HAL_SPI_Transmit+0x11c>
 80062fc:	e050      	b.n	80063a0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <HAL_SPI_Transmit+0x196>
 8006306:	8afb      	ldrh	r3, [r7, #22]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d144      	bne.n	8006396 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	330c      	adds	r3, #12
 8006316:	7812      	ldrb	r2, [r2, #0]
 8006318:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006328:	b29b      	uxth	r3, r3
 800632a:	3b01      	subs	r3, #1
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006332:	e030      	b.n	8006396 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b02      	cmp	r3, #2
 8006340:	d113      	bne.n	800636a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	330c      	adds	r3, #12
 800634c:	7812      	ldrb	r2, [r2, #0]
 800634e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	86da      	strh	r2, [r3, #54]	; 0x36
 8006368:	e015      	b.n	8006396 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800636a:	f7fd fb6f 	bl	8003a4c <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	429a      	cmp	r2, r3
 8006378:	d803      	bhi.n	8006382 <HAL_SPI_Transmit+0x20c>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006380:	d102      	bne.n	8006388 <HAL_SPI_Transmit+0x212>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d106      	bne.n	8006396 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006394:	e029      	b.n	80063ea <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800639a:	b29b      	uxth	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1c9      	bne.n	8006334 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f001 f8d7 	bl	8007558 <SPI_EndRxTxTransaction>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2220      	movs	r2, #32
 80063b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063be:	2300      	movs	r3, #0
 80063c0:	613b      	str	r3, [r7, #16]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	613b      	str	r3, [r7, #16]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	613b      	str	r3, [r7, #16]
 80063d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	77fb      	strb	r3, [r7, #31]
 80063e0:	e003      	b.n	80063ea <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3720      	adds	r7, #32
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af02      	add	r7, sp, #8
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	4613      	mov	r3, r2
 800640a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b01      	cmp	r3, #1
 800641a:	d002      	beq.n	8006422 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800641c:	2302      	movs	r3, #2
 800641e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006420:	e0fb      	b.n	800661a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800642a:	d112      	bne.n	8006452 <HAL_SPI_Receive+0x56>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10e      	bne.n	8006452 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2204      	movs	r2, #4
 8006438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800643c:	88fa      	ldrh	r2, [r7, #6]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	4613      	mov	r3, r2
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	68b9      	ldr	r1, [r7, #8]
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f8ef 	bl	800662c <HAL_SPI_TransmitReceive>
 800644e:	4603      	mov	r3, r0
 8006450:	e0e8      	b.n	8006624 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_SPI_Receive+0x64>
 800645c:	2302      	movs	r3, #2
 800645e:	e0e1      	b.n	8006624 <HAL_SPI_Receive+0x228>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006468:	f7fd faf0 	bl	8003a4c <HAL_GetTick>
 800646c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <HAL_SPI_Receive+0x7e>
 8006474:	88fb      	ldrh	r3, [r7, #6]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800647e:	e0cc      	b.n	800661a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2204      	movs	r2, #4
 8006484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	88fa      	ldrh	r2, [r7, #6]
 8006498:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	88fa      	ldrh	r2, [r7, #6]
 800649e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c6:	d10f      	bne.n	80064e8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064e6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f2:	2b40      	cmp	r3, #64	; 0x40
 80064f4:	d007      	beq.n	8006506 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006504:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d16a      	bne.n	80065e4 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800650e:	e032      	b.n	8006576 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b01      	cmp	r3, #1
 800651c:	d115      	bne.n	800654a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f103 020c 	add.w	r2, r3, #12
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	7812      	ldrb	r2, [r2, #0]
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800653e:	b29b      	uxth	r3, r3
 8006540:	3b01      	subs	r3, #1
 8006542:	b29a      	uxth	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006548:	e015      	b.n	8006576 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800654a:	f7fd fa7f 	bl	8003a4c <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d803      	bhi.n	8006562 <HAL_SPI_Receive+0x166>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006560:	d102      	bne.n	8006568 <HAL_SPI_Receive+0x16c>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d106      	bne.n	8006576 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006574:	e051      	b.n	800661a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800657a:	b29b      	uxth	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1c7      	bne.n	8006510 <HAL_SPI_Receive+0x114>
 8006580:	e035      	b.n	80065ee <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b01      	cmp	r3, #1
 800658e:	d113      	bne.n	80065b8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	b292      	uxth	r2, r2
 800659c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a2:	1c9a      	adds	r2, r3, #2
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	3b01      	subs	r3, #1
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065b6:	e015      	b.n	80065e4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065b8:	f7fd fa48 	bl	8003a4c <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d803      	bhi.n	80065d0 <HAL_SPI_Receive+0x1d4>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ce:	d102      	bne.n	80065d6 <HAL_SPI_Receive+0x1da>
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d106      	bne.n	80065e4 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80065e2:	e01a      	b.n	800661a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1c9      	bne.n	8006582 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 ff4a 	bl	800748c <SPI_EndRxTransaction>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2220      	movs	r2, #32
 8006602:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	75fb      	strb	r3, [r7, #23]
 8006610:	e003      	b.n	800661a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006622:	7dfb      	ldrb	r3, [r7, #23]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08c      	sub	sp, #48	; 0x30
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800663a:	2301      	movs	r3, #1
 800663c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800664a:	2b01      	cmp	r3, #1
 800664c:	d101      	bne.n	8006652 <HAL_SPI_TransmitReceive+0x26>
 800664e:	2302      	movs	r3, #2
 8006650:	e198      	b.n	8006984 <HAL_SPI_TransmitReceive+0x358>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800665a:	f7fd f9f7 	bl	8003a4c <HAL_GetTick>
 800665e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006670:	887b      	ldrh	r3, [r7, #2]
 8006672:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006674:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006678:	2b01      	cmp	r3, #1
 800667a:	d00f      	beq.n	800669c <HAL_SPI_TransmitReceive+0x70>
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006682:	d107      	bne.n	8006694 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d103      	bne.n	8006694 <HAL_SPI_TransmitReceive+0x68>
 800668c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006690:	2b04      	cmp	r3, #4
 8006692:	d003      	beq.n	800669c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006694:	2302      	movs	r3, #2
 8006696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800669a:	e16d      	b.n	8006978 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d005      	beq.n	80066ae <HAL_SPI_TransmitReceive+0x82>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <HAL_SPI_TransmitReceive+0x82>
 80066a8:	887b      	ldrh	r3, [r7, #2]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d103      	bne.n	80066b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066b4:	e160      	b.n	8006978 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d003      	beq.n	80066ca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2205      	movs	r2, #5
 80066c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	887a      	ldrh	r2, [r7, #2]
 80066da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	887a      	ldrh	r2, [r7, #2]
 80066e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	887a      	ldrh	r2, [r7, #2]
 80066ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	887a      	ldrh	r2, [r7, #2]
 80066f2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670a:	2b40      	cmp	r3, #64	; 0x40
 800670c:	d007      	beq.n	800671e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800671c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006726:	d17c      	bne.n	8006822 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <HAL_SPI_TransmitReceive+0x10a>
 8006730:	8b7b      	ldrh	r3, [r7, #26]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d16a      	bne.n	800680c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673a:	881a      	ldrh	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	1c9a      	adds	r2, r3, #2
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800675a:	e057      	b.n	800680c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b02      	cmp	r3, #2
 8006768:	d11b      	bne.n	80067a2 <HAL_SPI_TransmitReceive+0x176>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d016      	beq.n	80067a2 <HAL_SPI_TransmitReceive+0x176>
 8006774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006776:	2b01      	cmp	r3, #1
 8006778:	d113      	bne.n	80067a2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677e:	881a      	ldrh	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678a:	1c9a      	adds	r2, r3, #2
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d119      	bne.n	80067e4 <HAL_SPI_TransmitReceive+0x1b8>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d014      	beq.n	80067e4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c4:	b292      	uxth	r2, r2
 80067c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	1c9a      	adds	r2, r3, #2
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067e0:	2301      	movs	r3, #1
 80067e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067e4:	f7fd f932 	bl	8003a4c <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d80b      	bhi.n	800680c <HAL_SPI_TransmitReceive+0x1e0>
 80067f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fa:	d007      	beq.n	800680c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800680a:	e0b5      	b.n	8006978 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1a2      	bne.n	800675c <HAL_SPI_TransmitReceive+0x130>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d19d      	bne.n	800675c <HAL_SPI_TransmitReceive+0x130>
 8006820:	e080      	b.n	8006924 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <HAL_SPI_TransmitReceive+0x204>
 800682a:	8b7b      	ldrh	r3, [r7, #26]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d16f      	bne.n	8006910 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	330c      	adds	r3, #12
 800683a:	7812      	ldrb	r2, [r2, #0]
 800683c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800684c:	b29b      	uxth	r3, r3
 800684e:	3b01      	subs	r3, #1
 8006850:	b29a      	uxth	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006856:	e05b      	b.n	8006910 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b02      	cmp	r3, #2
 8006864:	d11c      	bne.n	80068a0 <HAL_SPI_TransmitReceive+0x274>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800686a:	b29b      	uxth	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d017      	beq.n	80068a0 <HAL_SPI_TransmitReceive+0x274>
 8006870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006872:	2b01      	cmp	r3, #1
 8006874:	d114      	bne.n	80068a0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	330c      	adds	r3, #12
 8006880:	7812      	ldrb	r2, [r2, #0]
 8006882:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006892:	b29b      	uxth	r3, r3
 8006894:	3b01      	subs	r3, #1
 8006896:	b29a      	uxth	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d119      	bne.n	80068e2 <HAL_SPI_TransmitReceive+0x2b6>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d014      	beq.n	80068e2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	3b01      	subs	r3, #1
 80068d8:	b29a      	uxth	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068de:	2301      	movs	r3, #1
 80068e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80068e2:	f7fd f8b3 	bl	8003a4c <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d803      	bhi.n	80068fa <HAL_SPI_TransmitReceive+0x2ce>
 80068f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f8:	d102      	bne.n	8006900 <HAL_SPI_TransmitReceive+0x2d4>
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d107      	bne.n	8006910 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800690e:	e033      	b.n	8006978 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d19e      	bne.n	8006858 <HAL_SPI_TransmitReceive+0x22c>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800691e:	b29b      	uxth	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d199      	bne.n	8006858 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006926:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 fe15 	bl	8007558 <SPI_EndRxTxTransaction>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d006      	beq.n	8006942 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006940:	e01a      	b.n	8006978 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10a      	bne.n	8006960 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	617b      	str	r3, [r7, #20]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	617b      	str	r3, [r7, #20]
 800695e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800696e:	e003      	b.n	8006978 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006980:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006984:	4618      	mov	r0, r3
 8006986:	3730      	adds	r7, #48	; 0x30
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	4613      	mov	r3, r2
 8006998:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d101      	bne.n	80069ac <HAL_SPI_Transmit_DMA+0x20>
 80069a8:	2302      	movs	r3, #2
 80069aa:	e097      	b.n	8006adc <HAL_SPI_Transmit_DMA+0x150>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d002      	beq.n	80069c6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80069c0:	2302      	movs	r3, #2
 80069c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069c4:	e085      	b.n	8006ad2 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <HAL_SPI_Transmit_DMA+0x46>
 80069cc:	88fb      	ldrh	r3, [r7, #6]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d102      	bne.n	80069d8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069d6:	e07c      	b.n	8006ad2 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2203      	movs	r2, #3
 80069dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	88fa      	ldrh	r2, [r7, #6]
 80069f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	88fa      	ldrh	r2, [r7, #6]
 80069f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a1e:	d10f      	bne.n	8006a40 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a3e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a44:	4a27      	ldr	r2, [pc, #156]	; (8006ae4 <HAL_SPI_Transmit_DMA+0x158>)
 8006a46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a4c:	4a26      	ldr	r2, [pc, #152]	; (8006ae8 <HAL_SPI_Transmit_DMA+0x15c>)
 8006a4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a54:	4a25      	ldr	r2, [pc, #148]	; (8006aec <HAL_SPI_Transmit_DMA+0x160>)
 8006a56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a68:	4619      	mov	r1, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	330c      	adds	r3, #12
 8006a70:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a76:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006a78:	f7fd f984 	bl	8003d84 <HAL_DMA_Start_IT>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d008      	beq.n	8006a94 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a86:	f043 0210 	orr.w	r2, r3, #16
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006a92:	e01e      	b.n	8006ad2 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9e:	2b40      	cmp	r3, #64	; 0x40
 8006aa0:	d007      	beq.n	8006ab2 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ab0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f042 0220 	orr.w	r2, r2, #32
 8006ac0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f042 0202 	orr.w	r2, r2, #2
 8006ad0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	080072c1 	.word	0x080072c1
 8006ae8:	080070e1 	.word	0x080070e1
 8006aec:	08007315 	.word	0x08007315

08006af0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	4613      	mov	r3, r2
 8006afc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d002      	beq.n	8006b14 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8006b0e:	2302      	movs	r3, #2
 8006b10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b12:	e0a2      	b.n	8006c5a <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d110      	bne.n	8006b3e <HAL_SPI_Receive_DMA+0x4e>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b24:	d10b      	bne.n	8006b3e <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2204      	movs	r2, #4
 8006b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006b2e:	88fb      	ldrh	r3, [r7, #6]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 f89f 	bl	8006c78 <HAL_SPI_TransmitReceive_DMA>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	e092      	b.n	8006c64 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d101      	bne.n	8006b4c <HAL_SPI_Receive_DMA+0x5c>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e08b      	b.n	8006c64 <HAL_SPI_Receive_DMA+0x174>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <HAL_SPI_Receive_DMA+0x70>
 8006b5a:	88fb      	ldrh	r3, [r7, #6]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d102      	bne.n	8006b66 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b64:	e079      	b.n	8006c5a <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2204      	movs	r2, #4
 8006b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	88fa      	ldrh	r2, [r7, #6]
 8006b7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	88fa      	ldrh	r2, [r7, #6]
 8006b84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ba6:	d10f      	bne.n	8006bc8 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bc6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bcc:	4a27      	ldr	r2, [pc, #156]	; (8006c6c <HAL_SPI_Receive_DMA+0x17c>)
 8006bce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd4:	4a26      	ldr	r2, [pc, #152]	; (8006c70 <HAL_SPI_Receive_DMA+0x180>)
 8006bd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bdc:	4a25      	ldr	r2, [pc, #148]	; (8006c74 <HAL_SPI_Receive_DMA+0x184>)
 8006bde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be4:	2200      	movs	r2, #0
 8006be6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	330c      	adds	r3, #12
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bfe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006c00:	f7fd f8c0 	bl	8003d84 <HAL_DMA_Start_IT>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d008      	beq.n	8006c1c <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c0e:	f043 0210 	orr.w	r2, r3, #16
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006c1a:	e01e      	b.n	8006c5a <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c26:	2b40      	cmp	r3, #64	; 0x40
 8006c28:	d007      	beq.n	8006c3a <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c38:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f042 0220 	orr.w	r2, r2, #32
 8006c48:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f042 0201 	orr.w	r2, r2, #1
 8006c58:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	080072dd 	.word	0x080072dd
 8006c70:	08007189 	.word	0x08007189
 8006c74:	08007315 	.word	0x08007315

08006c78 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d101      	bne.n	8006c98 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006c94:	2302      	movs	r3, #2
 8006c96:	e0db      	b.n	8006e50 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ca6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006cae:	7dbb      	ldrb	r3, [r7, #22]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d00d      	beq.n	8006cd0 <HAL_SPI_TransmitReceive_DMA+0x58>
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cba:	d106      	bne.n	8006cca <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d102      	bne.n	8006cca <HAL_SPI_TransmitReceive_DMA+0x52>
 8006cc4:	7dbb      	ldrb	r3, [r7, #22]
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d002      	beq.n	8006cd0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006cca:	2302      	movs	r3, #2
 8006ccc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cce:	e0ba      	b.n	8006e46 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d005      	beq.n	8006ce2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006cdc:	887b      	ldrh	r3, [r7, #2]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d102      	bne.n	8006ce8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ce6:	e0ae      	b.n	8006e46 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d003      	beq.n	8006cfc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2205      	movs	r2, #5
 8006cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	887a      	ldrh	r2, [r7, #2]
 8006d0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	887a      	ldrh	r2, [r7, #2]
 8006d12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	887a      	ldrh	r2, [r7, #2]
 8006d1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	887a      	ldrh	r2, [r7, #2]
 8006d24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d108      	bne.n	8006d50 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d42:	4a45      	ldr	r2, [pc, #276]	; (8006e58 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8006d44:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d4a:	4a44      	ldr	r2, [pc, #272]	; (8006e5c <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8006d4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8006d4e:	e007      	b.n	8006d60 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d54:	4a42      	ldr	r2, [pc, #264]	; (8006e60 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8006d56:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d5c:	4a41      	ldr	r2, [pc, #260]	; (8006e64 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8006d5e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d64:	4a40      	ldr	r2, [pc, #256]	; (8006e68 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8006d66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	330c      	adds	r3, #12
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d86:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006d88:	f7fc fffc 	bl	8003d84 <HAL_DMA_Start_IT>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d008      	beq.n	8006da4 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d96:	f043 0210 	orr.w	r2, r3, #16
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006da2:	e050      	b.n	8006e46 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0201 	orr.w	r2, r2, #1
 8006db2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db8:	2200      	movs	r2, #0
 8006dba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc8:	2200      	movs	r2, #0
 8006dca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ddc:	4619      	mov	r1, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	330c      	adds	r3, #12
 8006de4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006dec:	f7fc ffca 	bl	8003d84 <HAL_DMA_Start_IT>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d008      	beq.n	8006e08 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfa:	f043 0210 	orr.w	r2, r3, #16
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006e06:	e01e      	b.n	8006e46 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e12:	2b40      	cmp	r3, #64	; 0x40
 8006e14:	d007      	beq.n	8006e26 <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e24:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f042 0220 	orr.w	r2, r2, #32
 8006e34:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f042 0202 	orr.w	r2, r2, #2
 8006e44:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	080072dd 	.word	0x080072dd
 8006e5c:	08007189 	.word	0x08007189
 8006e60:	080072f9 	.word	0x080072f9
 8006e64:	08007231 	.word	0x08007231
 8006e68:	08007315 	.word	0x08007315

08006e6c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b088      	sub	sp, #32
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10e      	bne.n	8006eac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d009      	beq.n	8006eac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d004      	beq.n	8006eac <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
    return;
 8006eaa:	e0ce      	b.n	800704a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d009      	beq.n	8006eca <HAL_SPI_IRQHandler+0x5e>
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d004      	beq.n	8006eca <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	4798      	blx	r3
    return;
 8006ec8:	e0bf      	b.n	800704a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	f003 0320 	and.w	r3, r3, #32
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10a      	bne.n	8006eea <HAL_SPI_IRQHandler+0x7e>
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d105      	bne.n	8006eea <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 80b0 	beq.w	800704a <HAL_SPI_IRQHandler+0x1de>
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 80aa 	beq.w	800704a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d023      	beq.n	8006f48 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b03      	cmp	r3, #3
 8006f0a:	d011      	beq.n	8006f30 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f10:	f043 0204 	orr.w	r2, r3, #4
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f18:	2300      	movs	r3, #0
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	e00b      	b.n	8006f48 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f30:	2300      	movs	r3, #0
 8006f32:	613b      	str	r3, [r7, #16]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	613b      	str	r3, [r7, #16]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	693b      	ldr	r3, [r7, #16]
        return;
 8006f46:	e080      	b.n	800704a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	f003 0320 	and.w	r3, r3, #32
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d014      	beq.n	8006f7c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f56:	f043 0201 	orr.w	r2, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	60fb      	str	r3, [r7, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00c      	beq.n	8006fa0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8a:	f043 0208 	orr.w	r2, r3, #8
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006f92:	2300      	movs	r3, #0
 8006f94:	60bb      	str	r3, [r7, #8]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	60bb      	str	r3, [r7, #8]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d04f      	beq.n	8007048 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006fb6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d104      	bne.n	8006fd4 <HAL_SPI_IRQHandler+0x168>
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d034      	beq.n	800703e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0203 	bic.w	r2, r2, #3
 8006fe2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d011      	beq.n	8007010 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff0:	4a17      	ldr	r2, [pc, #92]	; (8007050 <HAL_SPI_IRQHandler+0x1e4>)
 8006ff2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fc ff1b 	bl	8003e34 <HAL_DMA_Abort_IT>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d005      	beq.n	8007010 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007008:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007014:	2b00      	cmp	r3, #0
 8007016:	d016      	beq.n	8007046 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800701c:	4a0c      	ldr	r2, [pc, #48]	; (8007050 <HAL_SPI_IRQHandler+0x1e4>)
 800701e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007024:	4618      	mov	r0, r3
 8007026:	f7fc ff05 	bl	8003e34 <HAL_DMA_Abort_IT>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00a      	beq.n	8007046 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007034:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800703c:	e003      	b.n	8007046 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f844 	bl	80070cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007044:	e000      	b.n	8007048 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007046:	bf00      	nop
    return;
 8007048:	bf00      	nop
  }
}
 800704a:	3720      	adds	r7, #32
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	08007355 	.word	0x08007355

08007054 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070ee:	f7fc fcad 	bl	8003a4c <HAL_GetTick>
 80070f2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007102:	d03b      	beq.n	800717c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 0220 	bic.w	r2, r2, #32
 8007112:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 0202 	bic.w	r2, r2, #2
 8007122:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	2164      	movs	r1, #100	; 0x64
 8007128:	6978      	ldr	r0, [r7, #20]
 800712a:	f000 fa15 	bl	8007558 <SPI_EndRxTxTransaction>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d005      	beq.n	8007140 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007138:	f043 0220 	orr.w	r2, r3, #32
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10a      	bne.n	800715e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007148:	2300      	movs	r3, #0
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2200      	movs	r2, #0
 8007162:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007174:	6978      	ldr	r0, [r7, #20]
 8007176:	f7ff ffa9 	bl	80070cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800717a:	e002      	b.n	8007182 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800717c:	6978      	ldr	r0, [r7, #20]
 800717e:	f7ff ff69 	bl	8007054 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007196:	f7fc fc59 	bl	8003a4c <HAL_GetTick>
 800719a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071aa:	d03b      	beq.n	8007224 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0220 	bic.w	r2, r2, #32
 80071ba:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10d      	bne.n	80071e0 <SPI_DMAReceiveCplt+0x58>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071cc:	d108      	bne.n	80071e0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0203 	bic.w	r2, r2, #3
 80071dc:	605a      	str	r2, [r3, #4]
 80071de:	e007      	b.n	80071f0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0201 	bic.w	r2, r2, #1
 80071ee:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	2164      	movs	r1, #100	; 0x64
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 f949 	bl	800748c <SPI_EndRxTransaction>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2220      	movs	r2, #32
 8007204:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f7ff ff55 	bl	80070cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007222:	e002      	b.n	800722a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f7ff ff1f 	bl	8007068 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800723e:	f7fc fc05 	bl	8003a4c <HAL_GetTick>
 8007242:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007252:	d02f      	beq.n	80072b4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 0220 	bic.w	r2, r2, #32
 8007262:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	2164      	movs	r1, #100	; 0x64
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 f975 	bl	8007558 <SPI_EndRxTxTransaction>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d005      	beq.n	8007280 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007278:	f043 0220 	orr.w	r2, r3, #32
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0203 	bic.w	r2, r2, #3
 800728e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f7ff ff0d 	bl	80070cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80072b2:	e002      	b.n	80072ba <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f7ff fee1 	bl	800707c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072cc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f7ff fede 	bl	8007090 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80072d4:	bf00      	nop
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f7ff feda 	bl	80070a4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80072f0:	bf00      	nop
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007304:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f7ff fed6 	bl	80070b8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800730c:	bf00      	nop
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007320:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0203 	bic.w	r2, r2, #3
 8007330:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007336:	f043 0210 	orr.w	r2, r3, #16
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f7ff fec0 	bl	80070cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800734c:	bf00      	nop
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007360:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f7ff feac 	bl	80070cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007374:	bf00      	nop
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	603b      	str	r3, [r7, #0]
 8007388:	4613      	mov	r3, r2
 800738a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800738c:	f7fc fb5e 	bl	8003a4c <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007394:	1a9b      	subs	r3, r3, r2
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	4413      	add	r3, r2
 800739a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800739c:	f7fc fb56 	bl	8003a4c <HAL_GetTick>
 80073a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073a2:	4b39      	ldr	r3, [pc, #228]	; (8007488 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	015b      	lsls	r3, r3, #5
 80073a8:	0d1b      	lsrs	r3, r3, #20
 80073aa:	69fa      	ldr	r2, [r7, #28]
 80073ac:	fb02 f303 	mul.w	r3, r2, r3
 80073b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073b2:	e054      	b.n	800745e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ba:	d050      	beq.n	800745e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073bc:	f7fc fb46 	bl	8003a4c <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d902      	bls.n	80073d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d13d      	bne.n	800744e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073ea:	d111      	bne.n	8007410 <SPI_WaitFlagStateUntilTimeout+0x94>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073f4:	d004      	beq.n	8007400 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073fe:	d107      	bne.n	8007410 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800740e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007418:	d10f      	bne.n	800743a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007438:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e017      	b.n	800747e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	3b01      	subs	r3, #1
 800745c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	4013      	ands	r3, r2
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	429a      	cmp	r2, r3
 800746c:	bf0c      	ite	eq
 800746e:	2301      	moveq	r3, #1
 8007470:	2300      	movne	r3, #0
 8007472:	b2db      	uxtb	r3, r3
 8007474:	461a      	mov	r2, r3
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	429a      	cmp	r2, r3
 800747a:	d19b      	bne.n	80073b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3720      	adds	r7, #32
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	20000090 	.word	0x20000090

0800748c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af02      	add	r7, sp, #8
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074a0:	d111      	bne.n	80074c6 <SPI_EndRxTransaction+0x3a>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074aa:	d004      	beq.n	80074b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b4:	d107      	bne.n	80074c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074ce:	d12a      	bne.n	8007526 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d8:	d012      	beq.n	8007500 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2200      	movs	r2, #0
 80074e2:	2180      	movs	r1, #128	; 0x80
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f7ff ff49 	bl	800737c <SPI_WaitFlagStateUntilTimeout>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d02d      	beq.n	800754c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f4:	f043 0220 	orr.w	r2, r3, #32
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e026      	b.n	800754e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2200      	movs	r2, #0
 8007508:	2101      	movs	r1, #1
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f7ff ff36 	bl	800737c <SPI_WaitFlagStateUntilTimeout>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d01a      	beq.n	800754c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800751a:	f043 0220 	orr.w	r2, r3, #32
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e013      	b.n	800754e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2200      	movs	r2, #0
 800752e:	2101      	movs	r1, #1
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f7ff ff23 	bl	800737c <SPI_WaitFlagStateUntilTimeout>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d007      	beq.n	800754c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007540:	f043 0220 	orr.w	r2, r3, #32
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e000      	b.n	800754e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
	...

08007558 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b088      	sub	sp, #32
 800755c:	af02      	add	r7, sp, #8
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2201      	movs	r2, #1
 800756c:	2102      	movs	r1, #2
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f7ff ff04 	bl	800737c <SPI_WaitFlagStateUntilTimeout>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d007      	beq.n	800758a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757e:	f043 0220 	orr.w	r2, r3, #32
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e032      	b.n	80075f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800758a:	4b1b      	ldr	r3, [pc, #108]	; (80075f8 <SPI_EndRxTxTransaction+0xa0>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a1b      	ldr	r2, [pc, #108]	; (80075fc <SPI_EndRxTxTransaction+0xa4>)
 8007590:	fba2 2303 	umull	r2, r3, r2, r3
 8007594:	0d5b      	lsrs	r3, r3, #21
 8007596:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800759a:	fb02 f303 	mul.w	r3, r2, r3
 800759e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075a8:	d112      	bne.n	80075d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2200      	movs	r2, #0
 80075b2:	2180      	movs	r1, #128	; 0x80
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f7ff fee1 	bl	800737c <SPI_WaitFlagStateUntilTimeout>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d016      	beq.n	80075ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c4:	f043 0220 	orr.w	r2, r3, #32
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e00f      	b.n	80075f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	3b01      	subs	r3, #1
 80075da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e6:	2b80      	cmp	r3, #128	; 0x80
 80075e8:	d0f2      	beq.n	80075d0 <SPI_EndRxTxTransaction+0x78>
 80075ea:	e000      	b.n	80075ee <SPI_EndRxTxTransaction+0x96>
        break;
 80075ec:	bf00      	nop
  }

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	20000090 	.word	0x20000090
 80075fc:	165e9f81 	.word	0x165e9f81

08007600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e041      	b.n	8007696 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d106      	bne.n	800762c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f839 	bl	800769e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3304      	adds	r3, #4
 800763c:	4619      	mov	r1, r3
 800763e:	4610      	mov	r0, r2
 8007640:	f000 f9b2 	bl	80079a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
	...

080076b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d001      	beq.n	80076cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e044      	b.n	8007756 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68da      	ldr	r2, [r3, #12]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f042 0201 	orr.w	r2, r2, #1
 80076e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a1e      	ldr	r2, [pc, #120]	; (8007764 <HAL_TIM_Base_Start_IT+0xb0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d018      	beq.n	8007720 <HAL_TIM_Base_Start_IT+0x6c>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f6:	d013      	beq.n	8007720 <HAL_TIM_Base_Start_IT+0x6c>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a1a      	ldr	r2, [pc, #104]	; (8007768 <HAL_TIM_Base_Start_IT+0xb4>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d00e      	beq.n	8007720 <HAL_TIM_Base_Start_IT+0x6c>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a19      	ldr	r2, [pc, #100]	; (800776c <HAL_TIM_Base_Start_IT+0xb8>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d009      	beq.n	8007720 <HAL_TIM_Base_Start_IT+0x6c>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a17      	ldr	r2, [pc, #92]	; (8007770 <HAL_TIM_Base_Start_IT+0xbc>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d004      	beq.n	8007720 <HAL_TIM_Base_Start_IT+0x6c>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a16      	ldr	r2, [pc, #88]	; (8007774 <HAL_TIM_Base_Start_IT+0xc0>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d111      	bne.n	8007744 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2b06      	cmp	r3, #6
 8007730:	d010      	beq.n	8007754 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f042 0201 	orr.w	r2, r2, #1
 8007740:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007742:	e007      	b.n	8007754 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f042 0201 	orr.w	r2, r2, #1
 8007752:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	40010000 	.word	0x40010000
 8007768:	40000400 	.word	0x40000400
 800776c:	40000800 	.word	0x40000800
 8007770:	40000c00 	.word	0x40000c00
 8007774:	40014000 	.word	0x40014000

08007778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d020      	beq.n	80077dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d01b      	beq.n	80077dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f06f 0202 	mvn.w	r2, #2
 80077ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f8d2 	bl	800796c <HAL_TIM_IC_CaptureCallback>
 80077c8:	e005      	b.n	80077d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f8c4 	bl	8007958 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f8d5 	bl	8007980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f003 0304 	and.w	r3, r3, #4
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d020      	beq.n	8007828 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d01b      	beq.n	8007828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f06f 0204 	mvn.w	r2, #4
 80077f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2202      	movs	r2, #2
 80077fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f8ac 	bl	800796c <HAL_TIM_IC_CaptureCallback>
 8007814:	e005      	b.n	8007822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f89e 	bl	8007958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f8af 	bl	8007980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f003 0308 	and.w	r3, r3, #8
 800782e:	2b00      	cmp	r3, #0
 8007830:	d020      	beq.n	8007874 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f003 0308 	and.w	r3, r3, #8
 8007838:	2b00      	cmp	r3, #0
 800783a:	d01b      	beq.n	8007874 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f06f 0208 	mvn.w	r2, #8
 8007844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2204      	movs	r2, #4
 800784a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	f003 0303 	and.w	r3, r3, #3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f886 	bl	800796c <HAL_TIM_IC_CaptureCallback>
 8007860:	e005      	b.n	800786e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f878 	bl	8007958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f889 	bl	8007980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f003 0310 	and.w	r3, r3, #16
 800787a:	2b00      	cmp	r3, #0
 800787c:	d020      	beq.n	80078c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f003 0310 	and.w	r3, r3, #16
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01b      	beq.n	80078c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f06f 0210 	mvn.w	r2, #16
 8007890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2208      	movs	r2, #8
 8007896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f860 	bl	800796c <HAL_TIM_IC_CaptureCallback>
 80078ac:	e005      	b.n	80078ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f852 	bl	8007958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f863 	bl	8007980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00c      	beq.n	80078e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d007      	beq.n	80078e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f06f 0201 	mvn.w	r2, #1
 80078dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fb fd9c 	bl	800341c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00c      	beq.n	8007908 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d007      	beq.n	8007908 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f8e6 	bl	8007ad4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00c      	beq.n	800792c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f834 	bl	8007994 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f003 0320 	and.w	r3, r3, #32
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00c      	beq.n	8007950 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f003 0320 	and.w	r3, r3, #32
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f06f 0220 	mvn.w	r2, #32
 8007948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f8b8 	bl	8007ac0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007950:	bf00      	nop
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a3a      	ldr	r2, [pc, #232]	; (8007aa4 <TIM_Base_SetConfig+0xfc>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d00f      	beq.n	80079e0 <TIM_Base_SetConfig+0x38>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079c6:	d00b      	beq.n	80079e0 <TIM_Base_SetConfig+0x38>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a37      	ldr	r2, [pc, #220]	; (8007aa8 <TIM_Base_SetConfig+0x100>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d007      	beq.n	80079e0 <TIM_Base_SetConfig+0x38>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a36      	ldr	r2, [pc, #216]	; (8007aac <TIM_Base_SetConfig+0x104>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d003      	beq.n	80079e0 <TIM_Base_SetConfig+0x38>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a35      	ldr	r2, [pc, #212]	; (8007ab0 <TIM_Base_SetConfig+0x108>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d108      	bne.n	80079f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a2b      	ldr	r2, [pc, #172]	; (8007aa4 <TIM_Base_SetConfig+0xfc>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d01b      	beq.n	8007a32 <TIM_Base_SetConfig+0x8a>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a00:	d017      	beq.n	8007a32 <TIM_Base_SetConfig+0x8a>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a28      	ldr	r2, [pc, #160]	; (8007aa8 <TIM_Base_SetConfig+0x100>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d013      	beq.n	8007a32 <TIM_Base_SetConfig+0x8a>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a27      	ldr	r2, [pc, #156]	; (8007aac <TIM_Base_SetConfig+0x104>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d00f      	beq.n	8007a32 <TIM_Base_SetConfig+0x8a>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a26      	ldr	r2, [pc, #152]	; (8007ab0 <TIM_Base_SetConfig+0x108>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d00b      	beq.n	8007a32 <TIM_Base_SetConfig+0x8a>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a25      	ldr	r2, [pc, #148]	; (8007ab4 <TIM_Base_SetConfig+0x10c>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d007      	beq.n	8007a32 <TIM_Base_SetConfig+0x8a>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a24      	ldr	r2, [pc, #144]	; (8007ab8 <TIM_Base_SetConfig+0x110>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d003      	beq.n	8007a32 <TIM_Base_SetConfig+0x8a>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a23      	ldr	r2, [pc, #140]	; (8007abc <TIM_Base_SetConfig+0x114>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d108      	bne.n	8007a44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a0e      	ldr	r2, [pc, #56]	; (8007aa4 <TIM_Base_SetConfig+0xfc>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d103      	bne.n	8007a78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	691a      	ldr	r2, [r3, #16]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d105      	bne.n	8007a96 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	f023 0201 	bic.w	r2, r3, #1
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	611a      	str	r2, [r3, #16]
  }
}
 8007a96:	bf00      	nop
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	40010000 	.word	0x40010000
 8007aa8:	40000400 	.word	0x40000400
 8007aac:	40000800 	.word	0x40000800
 8007ab0:	40000c00 	.word	0x40000c00
 8007ab4:	40014000 	.word	0x40014000
 8007ab8:	40014400 	.word	0x40014400
 8007abc:	40014800 	.word	0x40014800

08007ac0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <makeFreeRtosPriority>:
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4603      	mov	r3, r0
 8007af0:	80fb      	strh	r3, [r7, #6]
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
 8007af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007afa:	2b84      	cmp	r3, #132	; 0x84
 8007afc:	d005      	beq.n	8007b0a <makeFreeRtosPriority+0x22>
 8007afe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	4413      	add	r3, r2
 8007b06:	3303      	adds	r3, #3
 8007b08:	60fb      	str	r3, [r7, #12]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <osKernelStart>:
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	f000 fade 	bl	80080dc <vTaskStartScheduler>
 8007b20:	2300      	movs	r3, #0
 8007b22:	4618      	mov	r0, r3
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <osThreadCreate>:
 8007b26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b28:	b089      	sub	sp, #36	; 0x24
 8007b2a:	af04      	add	r7, sp, #16
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	6039      	str	r1, [r7, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d020      	beq.n	8007b7a <osThreadCreate+0x54>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d01c      	beq.n	8007b7a <osThreadCreate+0x54>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685c      	ldr	r4, [r3, #4]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681d      	ldr	r5, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	691e      	ldr	r6, [r3, #16]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7ff ffc8 	bl	8007ae8 <makeFreeRtosPriority>
 8007b58:	4601      	mov	r1, r0
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	6992      	ldr	r2, [r2, #24]
 8007b62:	9202      	str	r2, [sp, #8]
 8007b64:	9301      	str	r3, [sp, #4]
 8007b66:	9100      	str	r1, [sp, #0]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	4632      	mov	r2, r6
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f000 f8ed 	bl	8007d4e <xTaskCreateStatic>
 8007b74:	4603      	mov	r3, r0
 8007b76:	60fb      	str	r3, [r7, #12]
 8007b78:	e01c      	b.n	8007bb4 <osThreadCreate+0x8e>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685c      	ldr	r4, [r3, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681d      	ldr	r5, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	b29e      	uxth	r6, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7ff ffaa 	bl	8007ae8 <makeFreeRtosPriority>
 8007b94:	4602      	mov	r2, r0
 8007b96:	f107 030c 	add.w	r3, r7, #12
 8007b9a:	9301      	str	r3, [sp, #4]
 8007b9c:	9200      	str	r2, [sp, #0]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	4632      	mov	r2, r6
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f000 f92f 	bl	8007e08 <xTaskCreate>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d001      	beq.n	8007bb4 <osThreadCreate+0x8e>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	e000      	b.n	8007bb6 <osThreadCreate+0x90>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007bbe <osDelay>:
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <osDelay+0x16>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	e000      	b.n	8007bd6 <osDelay+0x18>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 fa4c 	bl	8008074 <vTaskDelay>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <vListInitialise>:
 8007be6:	b480      	push	{r7}
 8007be8:	b083      	sub	sp, #12
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f103 0208 	add.w	r2, r3, #8
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	605a      	str	r2, [r3, #4]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8007bfe:	609a      	str	r2, [r3, #8]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f103 0208 	add.w	r2, r3, #8
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	60da      	str	r2, [r3, #12]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f103 0208 	add.w	r2, r3, #8
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	611a      	str	r2, [r3, #16]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <vListInitialiseItem>:
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	611a      	str	r2, [r3, #16]
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <vListInsertEnd>:
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	60fb      	str	r3, [r7, #12]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	605a      	str	r2, [r3, #4]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	689a      	ldr	r2, [r3, #8]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	609a      	str	r2, [r3, #8]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	605a      	str	r2, [r3, #4]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	609a      	str	r2, [r3, #8]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	611a      	str	r2, [r3, #16]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	bf00      	nop
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <vListInsert>:
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	60bb      	str	r3, [r7, #8]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9e:	d103      	bne.n	8007ca8 <vListInsert+0x20>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	60fb      	str	r3, [r7, #12]
 8007ca6:	e00c      	b.n	8007cc2 <vListInsert+0x3a>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	3308      	adds	r3, #8
 8007cac:	60fb      	str	r3, [r7, #12]
 8007cae:	e002      	b.n	8007cb6 <vListInsert+0x2e>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	60fb      	str	r3, [r7, #12]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d2f6      	bcs.n	8007cb0 <vListInsert+0x28>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	605a      	str	r2, [r3, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	609a      	str	r2, [r3, #8]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	609a      	str	r2, [r3, #8]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	605a      	str	r2, [r3, #4]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	611a      	str	r2, [r3, #16]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	1c5a      	adds	r2, r3, #1
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	bf00      	nop
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <uxListRemove>:
 8007cfa:	b480      	push	{r7}
 8007cfc:	b085      	sub	sp, #20
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	60fb      	str	r3, [r7, #12]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	6892      	ldr	r2, [r2, #8]
 8007d10:	609a      	str	r2, [r3, #8]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	6852      	ldr	r2, [r2, #4]
 8007d1a:	605a      	str	r2, [r3, #4]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d103      	bne.n	8007d2e <uxListRemove+0x34>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689a      	ldr	r2, [r3, #8]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	605a      	str	r2, [r3, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	611a      	str	r2, [r3, #16]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	1e5a      	subs	r2, r3, #1
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4618      	mov	r0, r3
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <xTaskCreateStatic>:
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b08e      	sub	sp, #56	; 0x38
 8007d52:	af04      	add	r7, sp, #16
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10a      	bne.n	8007d78 <xTaskCreateStatic+0x2a>
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	623b      	str	r3, [r7, #32]
 8007d74:	bf00      	nop
 8007d76:	e7fe      	b.n	8007d76 <xTaskCreateStatic+0x28>
 8007d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10a      	bne.n	8007d94 <xTaskCreateStatic+0x46>
 8007d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	61fb      	str	r3, [r7, #28]
 8007d90:	bf00      	nop
 8007d92:	e7fe      	b.n	8007d92 <xTaskCreateStatic+0x44>
 8007d94:	2354      	movs	r3, #84	; 0x54
 8007d96:	613b      	str	r3, [r7, #16]
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2b54      	cmp	r3, #84	; 0x54
 8007d9c:	d00a      	beq.n	8007db4 <xTaskCreateStatic+0x66>
 8007d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	61bb      	str	r3, [r7, #24]
 8007db0:	bf00      	nop
 8007db2:	e7fe      	b.n	8007db2 <xTaskCreateStatic+0x64>
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d01e      	beq.n	8007dfa <xTaskCreateStatic+0xac>
 8007dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d01b      	beq.n	8007dfa <xTaskCreateStatic+0xac>
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dca:	631a      	str	r2, [r3, #48]	; 0x30
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	2202      	movs	r2, #2
 8007dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	9303      	str	r3, [sp, #12]
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	9302      	str	r3, [sp, #8]
 8007ddc:	f107 0314 	add.w	r3, r7, #20
 8007de0:	9301      	str	r3, [sp, #4]
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	68b9      	ldr	r1, [r7, #8]
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 f850 	bl	8007e92 <prvInitialiseNewTask>
 8007df2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007df4:	f000 f8d4 	bl	8007fa0 <prvAddNewTaskToReadyList>
 8007df8:	e001      	b.n	8007dfe <xTaskCreateStatic+0xb0>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	617b      	str	r3, [r7, #20]
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	4618      	mov	r0, r3
 8007e02:	3728      	adds	r7, #40	; 0x28
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <xTaskCreate>:
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08c      	sub	sp, #48	; 0x30
 8007e0c:	af04      	add	r7, sp, #16
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	603b      	str	r3, [r7, #0]
 8007e14:	4613      	mov	r3, r2
 8007e16:	80fb      	strh	r3, [r7, #6]
 8007e18:	88fb      	ldrh	r3, [r7, #6]
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 fec3 	bl	8008ba8 <pvPortMalloc>
 8007e22:	6178      	str	r0, [r7, #20]
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00e      	beq.n	8007e48 <xTaskCreate+0x40>
 8007e2a:	2054      	movs	r0, #84	; 0x54
 8007e2c:	f000 febc 	bl	8008ba8 <pvPortMalloc>
 8007e30:	61f8      	str	r0, [r7, #28]
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d003      	beq.n	8007e40 <xTaskCreate+0x38>
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	631a      	str	r2, [r3, #48]	; 0x30
 8007e3e:	e005      	b.n	8007e4c <xTaskCreate+0x44>
 8007e40:	6978      	ldr	r0, [r7, #20]
 8007e42:	f000 ff7d 	bl	8008d40 <vPortFree>
 8007e46:	e001      	b.n	8007e4c <xTaskCreate+0x44>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61fb      	str	r3, [r7, #28]
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d017      	beq.n	8007e82 <xTaskCreate+0x7a>
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8007e5a:	88fa      	ldrh	r2, [r7, #6]
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9303      	str	r3, [sp, #12]
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	9302      	str	r3, [sp, #8]
 8007e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	68b9      	ldr	r1, [r7, #8]
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 f80e 	bl	8007e92 <prvInitialiseNewTask>
 8007e76:	69f8      	ldr	r0, [r7, #28]
 8007e78:	f000 f892 	bl	8007fa0 <prvAddNewTaskToReadyList>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	61bb      	str	r3, [r7, #24]
 8007e80:	e002      	b.n	8007e88 <xTaskCreate+0x80>
 8007e82:	f04f 33ff 	mov.w	r3, #4294967295
 8007e86:	61bb      	str	r3, [r7, #24]
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3720      	adds	r7, #32
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <prvInitialiseNewTask>:
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b088      	sub	sp, #32
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	607a      	str	r2, [r7, #4]
 8007e9e:	603b      	str	r3, [r7, #0]
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4413      	add	r3, r2
 8007eb0:	61bb      	str	r3, [r7, #24]
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	f023 0307 	bic.w	r3, r3, #7
 8007eb8:	61bb      	str	r3, [r7, #24]
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	f003 0307 	and.w	r3, r3, #7
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00a      	beq.n	8007eda <prvInitialiseNewTask+0x48>
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	617b      	str	r3, [r7, #20]
 8007ed6:	bf00      	nop
 8007ed8:	e7fe      	b.n	8007ed8 <prvInitialiseNewTask+0x46>
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d01f      	beq.n	8007f20 <prvInitialiseNewTask+0x8e>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61fb      	str	r3, [r7, #28]
 8007ee4:	e012      	b.n	8007f0c <prvInitialiseNewTask+0x7a>
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	4413      	add	r3, r2
 8007eec:	7819      	ldrb	r1, [r3, #0]
 8007eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	3334      	adds	r3, #52	; 0x34
 8007ef6:	460a      	mov	r2, r1
 8007ef8:	701a      	strb	r2, [r3, #0]
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	4413      	add	r3, r2
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d006      	beq.n	8007f14 <prvInitialiseNewTask+0x82>
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	61fb      	str	r3, [r7, #28]
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	2b0f      	cmp	r3, #15
 8007f10:	d9e9      	bls.n	8007ee6 <prvInitialiseNewTask+0x54>
 8007f12:	e000      	b.n	8007f16 <prvInitialiseNewTask+0x84>
 8007f14:	bf00      	nop
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f1e:	e003      	b.n	8007f28 <prvInitialiseNewTask+0x96>
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8007f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2a:	2b06      	cmp	r3, #6
 8007f2c:	d901      	bls.n	8007f32 <prvInitialiseNewTask+0xa0>
 8007f2e:	2306      	movs	r3, #6
 8007f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f36:	62da      	str	r2, [r3, #44]	; 0x2c
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f3c:	645a      	str	r2, [r3, #68]	; 0x44
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	2200      	movs	r2, #0
 8007f42:	649a      	str	r2, [r3, #72]	; 0x48
 8007f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f46:	3304      	adds	r3, #4
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff fe6c 	bl	8007c26 <vListInitialiseItem>
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	3318      	adds	r3, #24
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff fe67 	bl	8007c26 <vListInitialiseItem>
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f5c:	611a      	str	r2, [r3, #16]
 8007f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f60:	f1c3 0207 	rsb	r2, r3, #7
 8007f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f66:	619a      	str	r2, [r3, #24]
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f6c:	625a      	str	r2, [r3, #36]	; 0x24
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	2200      	movs	r2, #0
 8007f72:	64da      	str	r2, [r3, #76]	; 0x4c
 8007f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007f7c:	683a      	ldr	r2, [r7, #0]
 8007f7e:	68f9      	ldr	r1, [r7, #12]
 8007f80:	69b8      	ldr	r0, [r7, #24]
 8007f82:	f000 fc05 	bl	8008790 <pxPortInitialiseStack>
 8007f86:	4602      	mov	r2, r0
 8007f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8a:	601a      	str	r2, [r3, #0]
 8007f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d002      	beq.n	8007f98 <prvInitialiseNewTask+0x106>
 8007f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	bf00      	nop
 8007f9a:	3720      	adds	r7, #32
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <prvAddNewTaskToReadyList>:
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	f000 fd1c 	bl	80089e4 <vPortEnterCritical>
 8007fac:	4b2a      	ldr	r3, [pc, #168]	; (8008058 <prvAddNewTaskToReadyList+0xb8>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	4a29      	ldr	r2, [pc, #164]	; (8008058 <prvAddNewTaskToReadyList+0xb8>)
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	4b29      	ldr	r3, [pc, #164]	; (800805c <prvAddNewTaskToReadyList+0xbc>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d109      	bne.n	8007fd2 <prvAddNewTaskToReadyList+0x32>
 8007fbe:	4a27      	ldr	r2, [pc, #156]	; (800805c <prvAddNewTaskToReadyList+0xbc>)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6013      	str	r3, [r2, #0]
 8007fc4:	4b24      	ldr	r3, [pc, #144]	; (8008058 <prvAddNewTaskToReadyList+0xb8>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d110      	bne.n	8007fee <prvAddNewTaskToReadyList+0x4e>
 8007fcc:	f000 fabc 	bl	8008548 <prvInitialiseTaskLists>
 8007fd0:	e00d      	b.n	8007fee <prvAddNewTaskToReadyList+0x4e>
 8007fd2:	4b23      	ldr	r3, [pc, #140]	; (8008060 <prvAddNewTaskToReadyList+0xc0>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d109      	bne.n	8007fee <prvAddNewTaskToReadyList+0x4e>
 8007fda:	4b20      	ldr	r3, [pc, #128]	; (800805c <prvAddNewTaskToReadyList+0xbc>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d802      	bhi.n	8007fee <prvAddNewTaskToReadyList+0x4e>
 8007fe8:	4a1c      	ldr	r2, [pc, #112]	; (800805c <prvAddNewTaskToReadyList+0xbc>)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6013      	str	r3, [r2, #0]
 8007fee:	4b1d      	ldr	r3, [pc, #116]	; (8008064 <prvAddNewTaskToReadyList+0xc4>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	4a1b      	ldr	r2, [pc, #108]	; (8008064 <prvAddNewTaskToReadyList+0xc4>)
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	409a      	lsls	r2, r3
 8008000:	4b19      	ldr	r3, [pc, #100]	; (8008068 <prvAddNewTaskToReadyList+0xc8>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4313      	orrs	r3, r2
 8008006:	4a18      	ldr	r2, [pc, #96]	; (8008068 <prvAddNewTaskToReadyList+0xc8>)
 8008008:	6013      	str	r3, [r2, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800800e:	4613      	mov	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4a15      	ldr	r2, [pc, #84]	; (800806c <prvAddNewTaskToReadyList+0xcc>)
 8008018:	441a      	add	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	3304      	adds	r3, #4
 800801e:	4619      	mov	r1, r3
 8008020:	4610      	mov	r0, r2
 8008022:	f7ff fe0d 	bl	8007c40 <vListInsertEnd>
 8008026:	f000 fd0d 	bl	8008a44 <vPortExitCritical>
 800802a:	4b0d      	ldr	r3, [pc, #52]	; (8008060 <prvAddNewTaskToReadyList+0xc0>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00e      	beq.n	8008050 <prvAddNewTaskToReadyList+0xb0>
 8008032:	4b0a      	ldr	r3, [pc, #40]	; (800805c <prvAddNewTaskToReadyList+0xbc>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	429a      	cmp	r2, r3
 800803e:	d207      	bcs.n	8008050 <prvAddNewTaskToReadyList+0xb0>
 8008040:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <prvAddNewTaskToReadyList+0xd0>)
 8008042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	bf00      	nop
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	20000874 	.word	0x20000874
 800805c:	20000774 	.word	0x20000774
 8008060:	20000880 	.word	0x20000880
 8008064:	20000890 	.word	0x20000890
 8008068:	2000087c 	.word	0x2000087c
 800806c:	20000778 	.word	0x20000778
 8008070:	e000ed04 	.word	0xe000ed04

08008074 <vTaskDelay>:
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d017      	beq.n	80080b6 <vTaskDelay+0x42>
 8008086:	4b13      	ldr	r3, [pc, #76]	; (80080d4 <vTaskDelay+0x60>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00a      	beq.n	80080a4 <vTaskDelay+0x30>
 800808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	60bb      	str	r3, [r7, #8]
 80080a0:	bf00      	nop
 80080a2:	e7fe      	b.n	80080a2 <vTaskDelay+0x2e>
 80080a4:	f000 f87a 	bl	800819c <vTaskSuspendAll>
 80080a8:	2100      	movs	r1, #0
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fb0a 	bl	80086c4 <prvAddCurrentTaskToDelayedList>
 80080b0:	f000 f882 	bl	80081b8 <xTaskResumeAll>
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d107      	bne.n	80080cc <vTaskDelay+0x58>
 80080bc:	4b06      	ldr	r3, [pc, #24]	; (80080d8 <vTaskDelay+0x64>)
 80080be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	bf00      	nop
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	2000089c 	.word	0x2000089c
 80080d8:	e000ed04 	.word	0xe000ed04

080080dc <vTaskStartScheduler>:
 80080dc:	b580      	push	{r7, lr}
 80080de:	b08a      	sub	sp, #40	; 0x28
 80080e0:	af04      	add	r7, sp, #16
 80080e2:	2300      	movs	r3, #0
 80080e4:	60bb      	str	r3, [r7, #8]
 80080e6:	2300      	movs	r3, #0
 80080e8:	607b      	str	r3, [r7, #4]
 80080ea:	463a      	mov	r2, r7
 80080ec:	1d39      	adds	r1, r7, #4
 80080ee:	f107 0308 	add.w	r3, r7, #8
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fa ff70 	bl	8002fd8 <vApplicationGetIdleTaskMemory>
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	9202      	str	r2, [sp, #8]
 8008100:	9301      	str	r3, [sp, #4]
 8008102:	2300      	movs	r3, #0
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	2300      	movs	r3, #0
 8008108:	460a      	mov	r2, r1
 800810a:	491e      	ldr	r1, [pc, #120]	; (8008184 <vTaskStartScheduler+0xa8>)
 800810c:	481e      	ldr	r0, [pc, #120]	; (8008188 <vTaskStartScheduler+0xac>)
 800810e:	f7ff fe1e 	bl	8007d4e <xTaskCreateStatic>
 8008112:	4603      	mov	r3, r0
 8008114:	4a1d      	ldr	r2, [pc, #116]	; (800818c <vTaskStartScheduler+0xb0>)
 8008116:	6013      	str	r3, [r2, #0]
 8008118:	4b1c      	ldr	r3, [pc, #112]	; (800818c <vTaskStartScheduler+0xb0>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d002      	beq.n	8008126 <vTaskStartScheduler+0x4a>
 8008120:	2301      	movs	r3, #1
 8008122:	617b      	str	r3, [r7, #20]
 8008124:	e001      	b.n	800812a <vTaskStartScheduler+0x4e>
 8008126:	2300      	movs	r3, #0
 8008128:	617b      	str	r3, [r7, #20]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d116      	bne.n	800815e <vTaskStartScheduler+0x82>
 8008130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	613b      	str	r3, [r7, #16]
 8008142:	bf00      	nop
 8008144:	4b12      	ldr	r3, [pc, #72]	; (8008190 <vTaskStartScheduler+0xb4>)
 8008146:	f04f 32ff 	mov.w	r2, #4294967295
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	4b11      	ldr	r3, [pc, #68]	; (8008194 <vTaskStartScheduler+0xb8>)
 800814e:	2201      	movs	r2, #1
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	4b11      	ldr	r3, [pc, #68]	; (8008198 <vTaskStartScheduler+0xbc>)
 8008154:	2200      	movs	r2, #0
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	f000 fba2 	bl	80088a0 <xPortStartScheduler>
 800815c:	e00e      	b.n	800817c <vTaskStartScheduler+0xa0>
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008164:	d10a      	bne.n	800817c <vTaskStartScheduler+0xa0>
 8008166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	bf00      	nop
 800817a:	e7fe      	b.n	800817a <vTaskStartScheduler+0x9e>
 800817c:	bf00      	nop
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	08009b9c 	.word	0x08009b9c
 8008188:	08008519 	.word	0x08008519
 800818c:	20000898 	.word	0x20000898
 8008190:	20000894 	.word	0x20000894
 8008194:	20000880 	.word	0x20000880
 8008198:	20000878 	.word	0x20000878

0800819c <vTaskSuspendAll>:
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
 80081a0:	4b04      	ldr	r3, [pc, #16]	; (80081b4 <vTaskSuspendAll+0x18>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3301      	adds	r3, #1
 80081a6:	4a03      	ldr	r2, [pc, #12]	; (80081b4 <vTaskSuspendAll+0x18>)
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	bf00      	nop
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	2000089c 	.word	0x2000089c

080081b8 <xTaskResumeAll>:
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	2300      	movs	r3, #0
 80081c0:	60fb      	str	r3, [r7, #12]
 80081c2:	2300      	movs	r3, #0
 80081c4:	60bb      	str	r3, [r7, #8]
 80081c6:	4b41      	ldr	r3, [pc, #260]	; (80082cc <xTaskResumeAll+0x114>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10a      	bne.n	80081e4 <xTaskResumeAll+0x2c>
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	603b      	str	r3, [r7, #0]
 80081e0:	bf00      	nop
 80081e2:	e7fe      	b.n	80081e2 <xTaskResumeAll+0x2a>
 80081e4:	f000 fbfe 	bl	80089e4 <vPortEnterCritical>
 80081e8:	4b38      	ldr	r3, [pc, #224]	; (80082cc <xTaskResumeAll+0x114>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	4a37      	ldr	r2, [pc, #220]	; (80082cc <xTaskResumeAll+0x114>)
 80081f0:	6013      	str	r3, [r2, #0]
 80081f2:	4b36      	ldr	r3, [pc, #216]	; (80082cc <xTaskResumeAll+0x114>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d161      	bne.n	80082be <xTaskResumeAll+0x106>
 80081fa:	4b35      	ldr	r3, [pc, #212]	; (80082d0 <xTaskResumeAll+0x118>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d05d      	beq.n	80082be <xTaskResumeAll+0x106>
 8008202:	e02e      	b.n	8008262 <xTaskResumeAll+0xaa>
 8008204:	4b33      	ldr	r3, [pc, #204]	; (80082d4 <xTaskResumeAll+0x11c>)
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3318      	adds	r3, #24
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff fd72 	bl	8007cfa <uxListRemove>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3304      	adds	r3, #4
 800821a:	4618      	mov	r0, r3
 800821c:	f7ff fd6d 	bl	8007cfa <uxListRemove>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	2201      	movs	r2, #1
 8008226:	409a      	lsls	r2, r3
 8008228:	4b2b      	ldr	r3, [pc, #172]	; (80082d8 <xTaskResumeAll+0x120>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4313      	orrs	r3, r2
 800822e:	4a2a      	ldr	r2, [pc, #168]	; (80082d8 <xTaskResumeAll+0x120>)
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008236:	4613      	mov	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4413      	add	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4a27      	ldr	r2, [pc, #156]	; (80082dc <xTaskResumeAll+0x124>)
 8008240:	441a      	add	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3304      	adds	r3, #4
 8008246:	4619      	mov	r1, r3
 8008248:	4610      	mov	r0, r2
 800824a:	f7ff fcf9 	bl	8007c40 <vListInsertEnd>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008252:	4b23      	ldr	r3, [pc, #140]	; (80082e0 <xTaskResumeAll+0x128>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	429a      	cmp	r2, r3
 800825a:	d302      	bcc.n	8008262 <xTaskResumeAll+0xaa>
 800825c:	4b21      	ldr	r3, [pc, #132]	; (80082e4 <xTaskResumeAll+0x12c>)
 800825e:	2201      	movs	r2, #1
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	4b1c      	ldr	r3, [pc, #112]	; (80082d4 <xTaskResumeAll+0x11c>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1cc      	bne.n	8008204 <xTaskResumeAll+0x4c>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <xTaskResumeAll+0xbc>
 8008270:	f000 fa08 	bl	8008684 <prvResetNextTaskUnblockTime>
 8008274:	4b1c      	ldr	r3, [pc, #112]	; (80082e8 <xTaskResumeAll+0x130>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	607b      	str	r3, [r7, #4]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d010      	beq.n	80082a2 <xTaskResumeAll+0xea>
 8008280:	f000 f836 	bl	80082f0 <xTaskIncrementTick>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <xTaskResumeAll+0xd8>
 800828a:	4b16      	ldr	r3, [pc, #88]	; (80082e4 <xTaskResumeAll+0x12c>)
 800828c:	2201      	movs	r2, #1
 800828e:	601a      	str	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3b01      	subs	r3, #1
 8008294:	607b      	str	r3, [r7, #4]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1f1      	bne.n	8008280 <xTaskResumeAll+0xc8>
 800829c:	4b12      	ldr	r3, [pc, #72]	; (80082e8 <xTaskResumeAll+0x130>)
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	4b10      	ldr	r3, [pc, #64]	; (80082e4 <xTaskResumeAll+0x12c>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d009      	beq.n	80082be <xTaskResumeAll+0x106>
 80082aa:	2301      	movs	r3, #1
 80082ac:	60bb      	str	r3, [r7, #8]
 80082ae:	4b0f      	ldr	r3, [pc, #60]	; (80082ec <xTaskResumeAll+0x134>)
 80082b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f000 fbc1 	bl	8008a44 <vPortExitCritical>
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	2000089c 	.word	0x2000089c
 80082d0:	20000874 	.word	0x20000874
 80082d4:	20000834 	.word	0x20000834
 80082d8:	2000087c 	.word	0x2000087c
 80082dc:	20000778 	.word	0x20000778
 80082e0:	20000774 	.word	0x20000774
 80082e4:	20000888 	.word	0x20000888
 80082e8:	20000884 	.word	0x20000884
 80082ec:	e000ed04 	.word	0xe000ed04

080082f0 <xTaskIncrementTick>:
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	2300      	movs	r3, #0
 80082f8:	617b      	str	r3, [r7, #20]
 80082fa:	4b4e      	ldr	r3, [pc, #312]	; (8008434 <xTaskIncrementTick+0x144>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f040 808e 	bne.w	8008420 <xTaskIncrementTick+0x130>
 8008304:	4b4c      	ldr	r3, [pc, #304]	; (8008438 <xTaskIncrementTick+0x148>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3301      	adds	r3, #1
 800830a:	613b      	str	r3, [r7, #16]
 800830c:	4a4a      	ldr	r2, [pc, #296]	; (8008438 <xTaskIncrementTick+0x148>)
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	6013      	str	r3, [r2, #0]
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d120      	bne.n	800835a <xTaskIncrementTick+0x6a>
 8008318:	4b48      	ldr	r3, [pc, #288]	; (800843c <xTaskIncrementTick+0x14c>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00a      	beq.n	8008338 <xTaskIncrementTick+0x48>
 8008322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008326:	f383 8811 	msr	BASEPRI, r3
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	603b      	str	r3, [r7, #0]
 8008334:	bf00      	nop
 8008336:	e7fe      	b.n	8008336 <xTaskIncrementTick+0x46>
 8008338:	4b40      	ldr	r3, [pc, #256]	; (800843c <xTaskIncrementTick+0x14c>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	60fb      	str	r3, [r7, #12]
 800833e:	4b40      	ldr	r3, [pc, #256]	; (8008440 <xTaskIncrementTick+0x150>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a3e      	ldr	r2, [pc, #248]	; (800843c <xTaskIncrementTick+0x14c>)
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	4a3e      	ldr	r2, [pc, #248]	; (8008440 <xTaskIncrementTick+0x150>)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6013      	str	r3, [r2, #0]
 800834c:	4b3d      	ldr	r3, [pc, #244]	; (8008444 <xTaskIncrementTick+0x154>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3301      	adds	r3, #1
 8008352:	4a3c      	ldr	r2, [pc, #240]	; (8008444 <xTaskIncrementTick+0x154>)
 8008354:	6013      	str	r3, [r2, #0]
 8008356:	f000 f995 	bl	8008684 <prvResetNextTaskUnblockTime>
 800835a:	4b3b      	ldr	r3, [pc, #236]	; (8008448 <xTaskIncrementTick+0x158>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	429a      	cmp	r2, r3
 8008362:	d348      	bcc.n	80083f6 <xTaskIncrementTick+0x106>
 8008364:	4b35      	ldr	r3, [pc, #212]	; (800843c <xTaskIncrementTick+0x14c>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d104      	bne.n	8008378 <xTaskIncrementTick+0x88>
 800836e:	4b36      	ldr	r3, [pc, #216]	; (8008448 <xTaskIncrementTick+0x158>)
 8008370:	f04f 32ff 	mov.w	r2, #4294967295
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	e03e      	b.n	80083f6 <xTaskIncrementTick+0x106>
 8008378:	4b30      	ldr	r3, [pc, #192]	; (800843c <xTaskIncrementTick+0x14c>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	60bb      	str	r3, [r7, #8]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	607b      	str	r3, [r7, #4]
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	429a      	cmp	r2, r3
 800838e:	d203      	bcs.n	8008398 <xTaskIncrementTick+0xa8>
 8008390:	4a2d      	ldr	r2, [pc, #180]	; (8008448 <xTaskIncrementTick+0x158>)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6013      	str	r3, [r2, #0]
 8008396:	e02e      	b.n	80083f6 <xTaskIncrementTick+0x106>
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	3304      	adds	r3, #4
 800839c:	4618      	mov	r0, r3
 800839e:	f7ff fcac 	bl	8007cfa <uxListRemove>
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d004      	beq.n	80083b4 <xTaskIncrementTick+0xc4>
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	3318      	adds	r3, #24
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7ff fca3 	bl	8007cfa <uxListRemove>
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	2201      	movs	r2, #1
 80083ba:	409a      	lsls	r2, r3
 80083bc:	4b23      	ldr	r3, [pc, #140]	; (800844c <xTaskIncrementTick+0x15c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	4a22      	ldr	r2, [pc, #136]	; (800844c <xTaskIncrementTick+0x15c>)
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ca:	4613      	mov	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4413      	add	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4a1f      	ldr	r2, [pc, #124]	; (8008450 <xTaskIncrementTick+0x160>)
 80083d4:	441a      	add	r2, r3
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	3304      	adds	r3, #4
 80083da:	4619      	mov	r1, r3
 80083dc:	4610      	mov	r0, r2
 80083de:	f7ff fc2f 	bl	8007c40 <vListInsertEnd>
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e6:	4b1b      	ldr	r3, [pc, #108]	; (8008454 <xTaskIncrementTick+0x164>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d3b9      	bcc.n	8008364 <xTaskIncrementTick+0x74>
 80083f0:	2301      	movs	r3, #1
 80083f2:	617b      	str	r3, [r7, #20]
 80083f4:	e7b6      	b.n	8008364 <xTaskIncrementTick+0x74>
 80083f6:	4b17      	ldr	r3, [pc, #92]	; (8008454 <xTaskIncrementTick+0x164>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083fc:	4914      	ldr	r1, [pc, #80]	; (8008450 <xTaskIncrementTick+0x160>)
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	440b      	add	r3, r1
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d901      	bls.n	8008412 <xTaskIncrementTick+0x122>
 800840e:	2301      	movs	r3, #1
 8008410:	617b      	str	r3, [r7, #20]
 8008412:	4b11      	ldr	r3, [pc, #68]	; (8008458 <xTaskIncrementTick+0x168>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d007      	beq.n	800842a <xTaskIncrementTick+0x13a>
 800841a:	2301      	movs	r3, #1
 800841c:	617b      	str	r3, [r7, #20]
 800841e:	e004      	b.n	800842a <xTaskIncrementTick+0x13a>
 8008420:	4b0e      	ldr	r3, [pc, #56]	; (800845c <xTaskIncrementTick+0x16c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3301      	adds	r3, #1
 8008426:	4a0d      	ldr	r2, [pc, #52]	; (800845c <xTaskIncrementTick+0x16c>)
 8008428:	6013      	str	r3, [r2, #0]
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	4618      	mov	r0, r3
 800842e:	3718      	adds	r7, #24
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	2000089c 	.word	0x2000089c
 8008438:	20000878 	.word	0x20000878
 800843c:	2000082c 	.word	0x2000082c
 8008440:	20000830 	.word	0x20000830
 8008444:	2000088c 	.word	0x2000088c
 8008448:	20000894 	.word	0x20000894
 800844c:	2000087c 	.word	0x2000087c
 8008450:	20000778 	.word	0x20000778
 8008454:	20000774 	.word	0x20000774
 8008458:	20000888 	.word	0x20000888
 800845c:	20000884 	.word	0x20000884

08008460 <vTaskSwitchContext>:
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	4b27      	ldr	r3, [pc, #156]	; (8008504 <vTaskSwitchContext+0xa4>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <vTaskSwitchContext+0x16>
 800846e:	4b26      	ldr	r3, [pc, #152]	; (8008508 <vTaskSwitchContext+0xa8>)
 8008470:	2201      	movs	r2, #1
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	e03f      	b.n	80084f6 <vTaskSwitchContext+0x96>
 8008476:	4b24      	ldr	r3, [pc, #144]	; (8008508 <vTaskSwitchContext+0xa8>)
 8008478:	2200      	movs	r2, #0
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	4b23      	ldr	r3, [pc, #140]	; (800850c <vTaskSwitchContext+0xac>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	60fb      	str	r3, [r7, #12]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	fab3 f383 	clz	r3, r3
 8008488:	72fb      	strb	r3, [r7, #11]
 800848a:	7afb      	ldrb	r3, [r7, #11]
 800848c:	f1c3 031f 	rsb	r3, r3, #31
 8008490:	617b      	str	r3, [r7, #20]
 8008492:	491f      	ldr	r1, [pc, #124]	; (8008510 <vTaskSwitchContext+0xb0>)
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	4613      	mov	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	440b      	add	r3, r1
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10a      	bne.n	80084bc <vTaskSwitchContext+0x5c>
 80084a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	607b      	str	r3, [r7, #4]
 80084b8:	bf00      	nop
 80084ba:	e7fe      	b.n	80084ba <vTaskSwitchContext+0x5a>
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4a12      	ldr	r2, [pc, #72]	; (8008510 <vTaskSwitchContext+0xb0>)
 80084c8:	4413      	add	r3, r2
 80084ca:	613b      	str	r3, [r7, #16]
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	605a      	str	r2, [r3, #4]
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	3308      	adds	r3, #8
 80084de:	429a      	cmp	r2, r3
 80084e0:	d104      	bne.n	80084ec <vTaskSwitchContext+0x8c>
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	685a      	ldr	r2, [r3, #4]
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	605a      	str	r2, [r3, #4]
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	4a08      	ldr	r2, [pc, #32]	; (8008514 <vTaskSwitchContext+0xb4>)
 80084f4:	6013      	str	r3, [r2, #0]
 80084f6:	bf00      	nop
 80084f8:	371c      	adds	r7, #28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	2000089c 	.word	0x2000089c
 8008508:	20000888 	.word	0x20000888
 800850c:	2000087c 	.word	0x2000087c
 8008510:	20000778 	.word	0x20000778
 8008514:	20000774 	.word	0x20000774

08008518 <prvIdleTask>:
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	f000 f852 	bl	80085c8 <prvCheckTasksWaitingTermination>
 8008524:	4b06      	ldr	r3, [pc, #24]	; (8008540 <prvIdleTask+0x28>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d9f9      	bls.n	8008520 <prvIdleTask+0x8>
 800852c:	4b05      	ldr	r3, [pc, #20]	; (8008544 <prvIdleTask+0x2c>)
 800852e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	e7f0      	b.n	8008520 <prvIdleTask+0x8>
 800853e:	bf00      	nop
 8008540:	20000778 	.word	0x20000778
 8008544:	e000ed04 	.word	0xe000ed04

08008548 <prvInitialiseTaskLists>:
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	2300      	movs	r3, #0
 8008550:	607b      	str	r3, [r7, #4]
 8008552:	e00c      	b.n	800856e <prvInitialiseTaskLists+0x26>
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	4613      	mov	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4a12      	ldr	r2, [pc, #72]	; (80085a8 <prvInitialiseTaskLists+0x60>)
 8008560:	4413      	add	r3, r2
 8008562:	4618      	mov	r0, r3
 8008564:	f7ff fb3f 	bl	8007be6 <vListInitialise>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3301      	adds	r3, #1
 800856c:	607b      	str	r3, [r7, #4]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b06      	cmp	r3, #6
 8008572:	d9ef      	bls.n	8008554 <prvInitialiseTaskLists+0xc>
 8008574:	480d      	ldr	r0, [pc, #52]	; (80085ac <prvInitialiseTaskLists+0x64>)
 8008576:	f7ff fb36 	bl	8007be6 <vListInitialise>
 800857a:	480d      	ldr	r0, [pc, #52]	; (80085b0 <prvInitialiseTaskLists+0x68>)
 800857c:	f7ff fb33 	bl	8007be6 <vListInitialise>
 8008580:	480c      	ldr	r0, [pc, #48]	; (80085b4 <prvInitialiseTaskLists+0x6c>)
 8008582:	f7ff fb30 	bl	8007be6 <vListInitialise>
 8008586:	480c      	ldr	r0, [pc, #48]	; (80085b8 <prvInitialiseTaskLists+0x70>)
 8008588:	f7ff fb2d 	bl	8007be6 <vListInitialise>
 800858c:	480b      	ldr	r0, [pc, #44]	; (80085bc <prvInitialiseTaskLists+0x74>)
 800858e:	f7ff fb2a 	bl	8007be6 <vListInitialise>
 8008592:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <prvInitialiseTaskLists+0x78>)
 8008594:	4a05      	ldr	r2, [pc, #20]	; (80085ac <prvInitialiseTaskLists+0x64>)
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	4b0a      	ldr	r3, [pc, #40]	; (80085c4 <prvInitialiseTaskLists+0x7c>)
 800859a:	4a05      	ldr	r2, [pc, #20]	; (80085b0 <prvInitialiseTaskLists+0x68>)
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20000778 	.word	0x20000778
 80085ac:	20000804 	.word	0x20000804
 80085b0:	20000818 	.word	0x20000818
 80085b4:	20000834 	.word	0x20000834
 80085b8:	20000848 	.word	0x20000848
 80085bc:	20000860 	.word	0x20000860
 80085c0:	2000082c 	.word	0x2000082c
 80085c4:	20000830 	.word	0x20000830

080085c8 <prvCheckTasksWaitingTermination>:
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	e019      	b.n	8008604 <prvCheckTasksWaitingTermination+0x3c>
 80085d0:	f000 fa08 	bl	80089e4 <vPortEnterCritical>
 80085d4:	4b10      	ldr	r3, [pc, #64]	; (8008618 <prvCheckTasksWaitingTermination+0x50>)
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	607b      	str	r3, [r7, #4]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3304      	adds	r3, #4
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7ff fb8a 	bl	8007cfa <uxListRemove>
 80085e6:	4b0d      	ldr	r3, [pc, #52]	; (800861c <prvCheckTasksWaitingTermination+0x54>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	4a0b      	ldr	r2, [pc, #44]	; (800861c <prvCheckTasksWaitingTermination+0x54>)
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	4b0b      	ldr	r3, [pc, #44]	; (8008620 <prvCheckTasksWaitingTermination+0x58>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	4a0a      	ldr	r2, [pc, #40]	; (8008620 <prvCheckTasksWaitingTermination+0x58>)
 80085f8:	6013      	str	r3, [r2, #0]
 80085fa:	f000 fa23 	bl	8008a44 <vPortExitCritical>
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f810 	bl	8008624 <prvDeleteTCB>
 8008604:	4b06      	ldr	r3, [pc, #24]	; (8008620 <prvCheckTasksWaitingTermination+0x58>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1e1      	bne.n	80085d0 <prvCheckTasksWaitingTermination+0x8>
 800860c:	bf00      	nop
 800860e:	bf00      	nop
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20000848 	.word	0x20000848
 800861c:	20000874 	.word	0x20000874
 8008620:	2000085c 	.word	0x2000085c

08008624 <prvDeleteTCB>:
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008632:	2b00      	cmp	r3, #0
 8008634:	d108      	bne.n	8008648 <prvDeleteTCB+0x24>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	4618      	mov	r0, r3
 800863c:	f000 fb80 	bl	8008d40 <vPortFree>
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fb7d 	bl	8008d40 <vPortFree>
 8008646:	e018      	b.n	800867a <prvDeleteTCB+0x56>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800864e:	2b01      	cmp	r3, #1
 8008650:	d103      	bne.n	800865a <prvDeleteTCB+0x36>
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fb74 	bl	8008d40 <vPortFree>
 8008658:	e00f      	b.n	800867a <prvDeleteTCB+0x56>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008660:	2b02      	cmp	r3, #2
 8008662:	d00a      	beq.n	800867a <prvDeleteTCB+0x56>
 8008664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	60fb      	str	r3, [r7, #12]
 8008676:	bf00      	nop
 8008678:	e7fe      	b.n	8008678 <prvDeleteTCB+0x54>
 800867a:	bf00      	nop
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <prvResetNextTaskUnblockTime>:
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	4b0c      	ldr	r3, [pc, #48]	; (80086bc <prvResetNextTaskUnblockTime+0x38>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d104      	bne.n	800869e <prvResetNextTaskUnblockTime+0x1a>
 8008694:	4b0a      	ldr	r3, [pc, #40]	; (80086c0 <prvResetNextTaskUnblockTime+0x3c>)
 8008696:	f04f 32ff 	mov.w	r2, #4294967295
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	e008      	b.n	80086b0 <prvResetNextTaskUnblockTime+0x2c>
 800869e:	4b07      	ldr	r3, [pc, #28]	; (80086bc <prvResetNextTaskUnblockTime+0x38>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	607b      	str	r3, [r7, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	4a04      	ldr	r2, [pc, #16]	; (80086c0 <prvResetNextTaskUnblockTime+0x3c>)
 80086ae:	6013      	str	r3, [r2, #0]
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	2000082c 	.word	0x2000082c
 80086c0:	20000894 	.word	0x20000894

080086c4 <prvAddCurrentTaskToDelayedList>:
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
 80086ce:	4b29      	ldr	r3, [pc, #164]	; (8008774 <prvAddCurrentTaskToDelayedList+0xb0>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	4b28      	ldr	r3, [pc, #160]	; (8008778 <prvAddCurrentTaskToDelayedList+0xb4>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3304      	adds	r3, #4
 80086da:	4618      	mov	r0, r3
 80086dc:	f7ff fb0d 	bl	8007cfa <uxListRemove>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10b      	bne.n	80086fe <prvAddCurrentTaskToDelayedList+0x3a>
 80086e6:	4b24      	ldr	r3, [pc, #144]	; (8008778 <prvAddCurrentTaskToDelayedList+0xb4>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	2201      	movs	r2, #1
 80086ee:	fa02 f303 	lsl.w	r3, r2, r3
 80086f2:	43da      	mvns	r2, r3
 80086f4:	4b21      	ldr	r3, [pc, #132]	; (800877c <prvAddCurrentTaskToDelayedList+0xb8>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4013      	ands	r3, r2
 80086fa:	4a20      	ldr	r2, [pc, #128]	; (800877c <prvAddCurrentTaskToDelayedList+0xb8>)
 80086fc:	6013      	str	r3, [r2, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008704:	d10a      	bne.n	800871c <prvAddCurrentTaskToDelayedList+0x58>
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d007      	beq.n	800871c <prvAddCurrentTaskToDelayedList+0x58>
 800870c:	4b1a      	ldr	r3, [pc, #104]	; (8008778 <prvAddCurrentTaskToDelayedList+0xb4>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3304      	adds	r3, #4
 8008712:	4619      	mov	r1, r3
 8008714:	481a      	ldr	r0, [pc, #104]	; (8008780 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008716:	f7ff fa93 	bl	8007c40 <vListInsertEnd>
 800871a:	e026      	b.n	800876a <prvAddCurrentTaskToDelayedList+0xa6>
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4413      	add	r3, r2
 8008722:	60bb      	str	r3, [r7, #8]
 8008724:	4b14      	ldr	r3, [pc, #80]	; (8008778 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	605a      	str	r2, [r3, #4]
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	429a      	cmp	r2, r3
 8008732:	d209      	bcs.n	8008748 <prvAddCurrentTaskToDelayedList+0x84>
 8008734:	4b13      	ldr	r3, [pc, #76]	; (8008784 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	4b0f      	ldr	r3, [pc, #60]	; (8008778 <prvAddCurrentTaskToDelayedList+0xb4>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3304      	adds	r3, #4
 800873e:	4619      	mov	r1, r3
 8008740:	4610      	mov	r0, r2
 8008742:	f7ff faa1 	bl	8007c88 <vListInsert>
 8008746:	e010      	b.n	800876a <prvAddCurrentTaskToDelayedList+0xa6>
 8008748:	4b0f      	ldr	r3, [pc, #60]	; (8008788 <prvAddCurrentTaskToDelayedList+0xc4>)
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <prvAddCurrentTaskToDelayedList+0xb4>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3304      	adds	r3, #4
 8008752:	4619      	mov	r1, r3
 8008754:	4610      	mov	r0, r2
 8008756:	f7ff fa97 	bl	8007c88 <vListInsert>
 800875a:	4b0c      	ldr	r3, [pc, #48]	; (800878c <prvAddCurrentTaskToDelayedList+0xc8>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	429a      	cmp	r2, r3
 8008762:	d202      	bcs.n	800876a <prvAddCurrentTaskToDelayedList+0xa6>
 8008764:	4a09      	ldr	r2, [pc, #36]	; (800878c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	6013      	str	r3, [r2, #0]
 800876a:	bf00      	nop
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	20000878 	.word	0x20000878
 8008778:	20000774 	.word	0x20000774
 800877c:	2000087c 	.word	0x2000087c
 8008780:	20000860 	.word	0x20000860
 8008784:	20000830 	.word	0x20000830
 8008788:	2000082c 	.word	0x2000082c
 800878c:	20000894 	.word	0x20000894

08008790 <pxPortInitialiseStack>:
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	3b04      	subs	r3, #4
 80087a0:	60fb      	str	r3, [r7, #12]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087a8:	601a      	str	r2, [r3, #0]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3b04      	subs	r3, #4
 80087ae:	60fb      	str	r3, [r7, #12]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	f023 0201 	bic.w	r2, r3, #1
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3b04      	subs	r3, #4
 80087be:	60fb      	str	r3, [r7, #12]
 80087c0:	4a0c      	ldr	r2, [pc, #48]	; (80087f4 <pxPortInitialiseStack+0x64>)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	3b14      	subs	r3, #20
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3b04      	subs	r3, #4
 80087d6:	60fb      	str	r3, [r7, #12]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f06f 0202 	mvn.w	r2, #2
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	3b20      	subs	r3, #32
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	080087f9 	.word	0x080087f9

080087f8 <prvTaskExitError>:
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	2300      	movs	r3, #0
 8008800:	607b      	str	r3, [r7, #4]
 8008802:	4b12      	ldr	r3, [pc, #72]	; (800884c <prvTaskExitError+0x54>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880a:	d00a      	beq.n	8008822 <prvTaskExitError+0x2a>
 800880c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008810:	f383 8811 	msr	BASEPRI, r3
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	60fb      	str	r3, [r7, #12]
 800881e:	bf00      	nop
 8008820:	e7fe      	b.n	8008820 <prvTaskExitError+0x28>
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	60bb      	str	r3, [r7, #8]
 8008834:	bf00      	nop
 8008836:	bf00      	nop
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0fc      	beq.n	8008838 <prvTaskExitError+0x40>
 800883e:	bf00      	nop
 8008840:	bf00      	nop
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	2000009c 	.word	0x2000009c

08008850 <SVC_Handler>:
 8008850:	4b07      	ldr	r3, [pc, #28]	; (8008870 <pxCurrentTCBConst2>)
 8008852:	6819      	ldr	r1, [r3, #0]
 8008854:	6808      	ldr	r0, [r1, #0]
 8008856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800885a:	f380 8809 	msr	PSP, r0
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f04f 0000 	mov.w	r0, #0
 8008866:	f380 8811 	msr	BASEPRI, r0
 800886a:	4770      	bx	lr
 800886c:	f3af 8000 	nop.w

08008870 <pxCurrentTCBConst2>:
 8008870:	20000774 	.word	0x20000774
 8008874:	bf00      	nop
 8008876:	bf00      	nop

08008878 <prvPortStartFirstTask>:
 8008878:	4808      	ldr	r0, [pc, #32]	; (800889c <prvPortStartFirstTask+0x24>)
 800887a:	6800      	ldr	r0, [r0, #0]
 800887c:	6800      	ldr	r0, [r0, #0]
 800887e:	f380 8808 	msr	MSP, r0
 8008882:	f04f 0000 	mov.w	r0, #0
 8008886:	f380 8814 	msr	CONTROL, r0
 800888a:	b662      	cpsie	i
 800888c:	b661      	cpsie	f
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	df00      	svc	0
 8008898:	bf00      	nop
 800889a:	bf00      	nop
 800889c:	e000ed08 	.word	0xe000ed08

080088a0 <xPortStartScheduler>:
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	4b46      	ldr	r3, [pc, #280]	; (80089c0 <xPortStartScheduler+0x120>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a46      	ldr	r2, [pc, #280]	; (80089c4 <xPortStartScheduler+0x124>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d10a      	bne.n	80088c6 <xPortStartScheduler+0x26>
 80088b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	613b      	str	r3, [r7, #16]
 80088c2:	bf00      	nop
 80088c4:	e7fe      	b.n	80088c4 <xPortStartScheduler+0x24>
 80088c6:	4b3e      	ldr	r3, [pc, #248]	; (80089c0 <xPortStartScheduler+0x120>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a3f      	ldr	r2, [pc, #252]	; (80089c8 <xPortStartScheduler+0x128>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d10a      	bne.n	80088e6 <xPortStartScheduler+0x46>
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	60fb      	str	r3, [r7, #12]
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <xPortStartScheduler+0x44>
 80088e6:	4b39      	ldr	r3, [pc, #228]	; (80089cc <xPortStartScheduler+0x12c>)
 80088e8:	617b      	str	r3, [r7, #20]
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	607b      	str	r3, [r7, #4]
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	22ff      	movs	r2, #255	; 0xff
 80088f6:	701a      	strb	r2, [r3, #0]
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	70fb      	strb	r3, [r7, #3]
 8008900:	78fb      	ldrb	r3, [r7, #3]
 8008902:	b2db      	uxtb	r3, r3
 8008904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008908:	b2da      	uxtb	r2, r3
 800890a:	4b31      	ldr	r3, [pc, #196]	; (80089d0 <xPortStartScheduler+0x130>)
 800890c:	701a      	strb	r2, [r3, #0]
 800890e:	4b31      	ldr	r3, [pc, #196]	; (80089d4 <xPortStartScheduler+0x134>)
 8008910:	2207      	movs	r2, #7
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	e009      	b.n	800892a <xPortStartScheduler+0x8a>
 8008916:	4b2f      	ldr	r3, [pc, #188]	; (80089d4 <xPortStartScheduler+0x134>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3b01      	subs	r3, #1
 800891c:	4a2d      	ldr	r2, [pc, #180]	; (80089d4 <xPortStartScheduler+0x134>)
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	78fb      	ldrb	r3, [r7, #3]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	005b      	lsls	r3, r3, #1
 8008926:	b2db      	uxtb	r3, r3
 8008928:	70fb      	strb	r3, [r7, #3]
 800892a:	78fb      	ldrb	r3, [r7, #3]
 800892c:	b2db      	uxtb	r3, r3
 800892e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008932:	2b80      	cmp	r3, #128	; 0x80
 8008934:	d0ef      	beq.n	8008916 <xPortStartScheduler+0x76>
 8008936:	4b27      	ldr	r3, [pc, #156]	; (80089d4 <xPortStartScheduler+0x134>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f1c3 0307 	rsb	r3, r3, #7
 800893e:	2b04      	cmp	r3, #4
 8008940:	d00a      	beq.n	8008958 <xPortStartScheduler+0xb8>
 8008942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	60bb      	str	r3, [r7, #8]
 8008954:	bf00      	nop
 8008956:	e7fe      	b.n	8008956 <xPortStartScheduler+0xb6>
 8008958:	4b1e      	ldr	r3, [pc, #120]	; (80089d4 <xPortStartScheduler+0x134>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	021b      	lsls	r3, r3, #8
 800895e:	4a1d      	ldr	r2, [pc, #116]	; (80089d4 <xPortStartScheduler+0x134>)
 8008960:	6013      	str	r3, [r2, #0]
 8008962:	4b1c      	ldr	r3, [pc, #112]	; (80089d4 <xPortStartScheduler+0x134>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800896a:	4a1a      	ldr	r2, [pc, #104]	; (80089d4 <xPortStartScheduler+0x134>)
 800896c:	6013      	str	r3, [r2, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	b2da      	uxtb	r2, r3
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	701a      	strb	r2, [r3, #0]
 8008976:	4b18      	ldr	r3, [pc, #96]	; (80089d8 <xPortStartScheduler+0x138>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a17      	ldr	r2, [pc, #92]	; (80089d8 <xPortStartScheduler+0x138>)
 800897c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	4b15      	ldr	r3, [pc, #84]	; (80089d8 <xPortStartScheduler+0x138>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a14      	ldr	r2, [pc, #80]	; (80089d8 <xPortStartScheduler+0x138>)
 8008988:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800898c:	6013      	str	r3, [r2, #0]
 800898e:	f000 f8dd 	bl	8008b4c <vPortSetupTimerInterrupt>
 8008992:	4b12      	ldr	r3, [pc, #72]	; (80089dc <xPortStartScheduler+0x13c>)
 8008994:	2200      	movs	r2, #0
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	f000 f8fc 	bl	8008b94 <vPortEnableVFP>
 800899c:	4b10      	ldr	r3, [pc, #64]	; (80089e0 <xPortStartScheduler+0x140>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a0f      	ldr	r2, [pc, #60]	; (80089e0 <xPortStartScheduler+0x140>)
 80089a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80089a6:	6013      	str	r3, [r2, #0]
 80089a8:	f7ff ff66 	bl	8008878 <prvPortStartFirstTask>
 80089ac:	f7ff fd58 	bl	8008460 <vTaskSwitchContext>
 80089b0:	f7ff ff22 	bl	80087f8 <prvTaskExitError>
 80089b4:	2300      	movs	r3, #0
 80089b6:	4618      	mov	r0, r3
 80089b8:	3718      	adds	r7, #24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	e000ed00 	.word	0xe000ed00
 80089c4:	410fc271 	.word	0x410fc271
 80089c8:	410fc270 	.word	0x410fc270
 80089cc:	e000e400 	.word	0xe000e400
 80089d0:	200008a0 	.word	0x200008a0
 80089d4:	200008a4 	.word	0x200008a4
 80089d8:	e000ed20 	.word	0xe000ed20
 80089dc:	2000009c 	.word	0x2000009c
 80089e0:	e000ef34 	.word	0xe000ef34

080089e4 <vPortEnterCritical>:
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	f383 8811 	msr	BASEPRI, r3
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	607b      	str	r3, [r7, #4]
 80089fc:	bf00      	nop
 80089fe:	4b0f      	ldr	r3, [pc, #60]	; (8008a3c <vPortEnterCritical+0x58>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	3301      	adds	r3, #1
 8008a04:	4a0d      	ldr	r2, [pc, #52]	; (8008a3c <vPortEnterCritical+0x58>)
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	4b0c      	ldr	r3, [pc, #48]	; (8008a3c <vPortEnterCritical+0x58>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d10f      	bne.n	8008a30 <vPortEnterCritical+0x4c>
 8008a10:	4b0b      	ldr	r3, [pc, #44]	; (8008a40 <vPortEnterCritical+0x5c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <vPortEnterCritical+0x4c>
 8008a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	603b      	str	r3, [r7, #0]
 8008a2c:	bf00      	nop
 8008a2e:	e7fe      	b.n	8008a2e <vPortEnterCritical+0x4a>
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	2000009c 	.word	0x2000009c
 8008a40:	e000ed04 	.word	0xe000ed04

08008a44 <vPortExitCritical>:
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	4b12      	ldr	r3, [pc, #72]	; (8008a94 <vPortExitCritical+0x50>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10a      	bne.n	8008a68 <vPortExitCritical+0x24>
 8008a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	607b      	str	r3, [r7, #4]
 8008a64:	bf00      	nop
 8008a66:	e7fe      	b.n	8008a66 <vPortExitCritical+0x22>
 8008a68:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <vPortExitCritical+0x50>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	4a09      	ldr	r2, [pc, #36]	; (8008a94 <vPortExitCritical+0x50>)
 8008a70:	6013      	str	r3, [r2, #0]
 8008a72:	4b08      	ldr	r3, [pc, #32]	; (8008a94 <vPortExitCritical+0x50>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d105      	bne.n	8008a86 <vPortExitCritical+0x42>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	603b      	str	r3, [r7, #0]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	bf00      	nop
 8008a86:	bf00      	nop
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	2000009c 	.word	0x2000009c
	...

08008aa0 <PendSV_Handler>:
 8008aa0:	f3ef 8009 	mrs	r0, PSP
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	4b15      	ldr	r3, [pc, #84]	; (8008b00 <pxCurrentTCBConst>)
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	f01e 0f10 	tst.w	lr, #16
 8008ab0:	bf08      	it	eq
 8008ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aba:	6010      	str	r0, [r2, #0]
 8008abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ac4:	f380 8811 	msr	BASEPRI, r0
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f7ff fcc6 	bl	8008460 <vTaskSwitchContext>
 8008ad4:	f04f 0000 	mov.w	r0, #0
 8008ad8:	f380 8811 	msr	BASEPRI, r0
 8008adc:	bc09      	pop	{r0, r3}
 8008ade:	6819      	ldr	r1, [r3, #0]
 8008ae0:	6808      	ldr	r0, [r1, #0]
 8008ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae6:	f01e 0f10 	tst.w	lr, #16
 8008aea:	bf08      	it	eq
 8008aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008af0:	f380 8809 	msr	PSP, r0
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	f3af 8000 	nop.w

08008b00 <pxCurrentTCBConst>:
 8008b00:	20000774 	.word	0x20000774
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop

08008b08 <SysTick_Handler>:
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	607b      	str	r3, [r7, #4]
 8008b20:	bf00      	nop
 8008b22:	f7ff fbe5 	bl	80082f0 <xTaskIncrementTick>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <SysTick_Handler+0x2c>
 8008b2c:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <SysTick_Handler+0x40>)
 8008b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	2300      	movs	r3, #0
 8008b36:	603b      	str	r3, [r7, #0]
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	f383 8811 	msr	BASEPRI, r3
 8008b3e:	bf00      	nop
 8008b40:	bf00      	nop
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	e000ed04 	.word	0xe000ed04

08008b4c <vPortSetupTimerInterrupt>:
 8008b4c:	b480      	push	{r7}
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	4b0b      	ldr	r3, [pc, #44]	; (8008b80 <vPortSetupTimerInterrupt+0x34>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <vPortSetupTimerInterrupt+0x38>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	4b0a      	ldr	r3, [pc, #40]	; (8008b88 <vPortSetupTimerInterrupt+0x3c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a0a      	ldr	r2, [pc, #40]	; (8008b8c <vPortSetupTimerInterrupt+0x40>)
 8008b62:	fba2 2303 	umull	r2, r3, r2, r3
 8008b66:	099b      	lsrs	r3, r3, #6
 8008b68:	4a09      	ldr	r2, [pc, #36]	; (8008b90 <vPortSetupTimerInterrupt+0x44>)
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	4b04      	ldr	r3, [pc, #16]	; (8008b80 <vPortSetupTimerInterrupt+0x34>)
 8008b70:	2207      	movs	r2, #7
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	bf00      	nop
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	e000e010 	.word	0xe000e010
 8008b84:	e000e018 	.word	0xe000e018
 8008b88:	20000090 	.word	0x20000090
 8008b8c:	10624dd3 	.word	0x10624dd3
 8008b90:	e000e014 	.word	0xe000e014

08008b94 <vPortEnableVFP>:
 8008b94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ba4 <vPortEnableVFP+0x10>
 8008b98:	6801      	ldr	r1, [r0, #0]
 8008b9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008b9e:	6001      	str	r1, [r0, #0]
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	e000ed88 	.word	0xe000ed88

08008ba8 <pvPortMalloc>:
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b08a      	sub	sp, #40	; 0x28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	61fb      	str	r3, [r7, #28]
 8008bb4:	f7ff faf2 	bl	800819c <vTaskSuspendAll>
 8008bb8:	4b5b      	ldr	r3, [pc, #364]	; (8008d28 <pvPortMalloc+0x180>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <pvPortMalloc+0x1c>
 8008bc0:	f000 f920 	bl	8008e04 <prvHeapInit>
 8008bc4:	4b59      	ldr	r3, [pc, #356]	; (8008d2c <pvPortMalloc+0x184>)
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4013      	ands	r3, r2
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f040 8093 	bne.w	8008cf8 <pvPortMalloc+0x150>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d01d      	beq.n	8008c14 <pvPortMalloc+0x6c>
 8008bd8:	2208      	movs	r2, #8
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4413      	add	r3, r2
 8008bde:	607b      	str	r3, [r7, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f003 0307 	and.w	r3, r3, #7
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d014      	beq.n	8008c14 <pvPortMalloc+0x6c>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f023 0307 	bic.w	r3, r3, #7
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	607b      	str	r3, [r7, #4]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f003 0307 	and.w	r3, r3, #7
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00a      	beq.n	8008c14 <pvPortMalloc+0x6c>
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	617b      	str	r3, [r7, #20]
 8008c10:	bf00      	nop
 8008c12:	e7fe      	b.n	8008c12 <pvPortMalloc+0x6a>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d06e      	beq.n	8008cf8 <pvPortMalloc+0x150>
 8008c1a:	4b45      	ldr	r3, [pc, #276]	; (8008d30 <pvPortMalloc+0x188>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d869      	bhi.n	8008cf8 <pvPortMalloc+0x150>
 8008c24:	4b43      	ldr	r3, [pc, #268]	; (8008d34 <pvPortMalloc+0x18c>)
 8008c26:	623b      	str	r3, [r7, #32]
 8008c28:	4b42      	ldr	r3, [pc, #264]	; (8008d34 <pvPortMalloc+0x18c>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c2e:	e004      	b.n	8008c3a <pvPortMalloc+0x92>
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	623b      	str	r3, [r7, #32]
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	627b      	str	r3, [r7, #36]	; 0x24
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d903      	bls.n	8008c4c <pvPortMalloc+0xa4>
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1f1      	bne.n	8008c30 <pvPortMalloc+0x88>
 8008c4c:	4b36      	ldr	r3, [pc, #216]	; (8008d28 <pvPortMalloc+0x180>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d050      	beq.n	8008cf8 <pvPortMalloc+0x150>
 8008c56:	6a3b      	ldr	r3, [r7, #32]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2208      	movs	r2, #8
 8008c5c:	4413      	add	r3, r2
 8008c5e:	61fb      	str	r3, [r7, #28]
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	6a3b      	ldr	r3, [r7, #32]
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	1ad2      	subs	r2, r2, r3
 8008c70:	2308      	movs	r3, #8
 8008c72:	005b      	lsls	r3, r3, #1
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d91f      	bls.n	8008cb8 <pvPortMalloc+0x110>
 8008c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	61bb      	str	r3, [r7, #24]
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	f003 0307 	and.w	r3, r3, #7
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00a      	beq.n	8008ca0 <pvPortMalloc+0xf8>
 8008c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	613b      	str	r3, [r7, #16]
 8008c9c:	bf00      	nop
 8008c9e:	e7fe      	b.n	8008c9e <pvPortMalloc+0xf6>
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	685a      	ldr	r2, [r3, #4]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	1ad2      	subs	r2, r2, r3
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	605a      	str	r2, [r3, #4]
 8008cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	605a      	str	r2, [r3, #4]
 8008cb2:	69b8      	ldr	r0, [r7, #24]
 8008cb4:	f000 f908 	bl	8008ec8 <prvInsertBlockIntoFreeList>
 8008cb8:	4b1d      	ldr	r3, [pc, #116]	; (8008d30 <pvPortMalloc+0x188>)
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	4a1b      	ldr	r2, [pc, #108]	; (8008d30 <pvPortMalloc+0x188>)
 8008cc4:	6013      	str	r3, [r2, #0]
 8008cc6:	4b1a      	ldr	r3, [pc, #104]	; (8008d30 <pvPortMalloc+0x188>)
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	4b1b      	ldr	r3, [pc, #108]	; (8008d38 <pvPortMalloc+0x190>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d203      	bcs.n	8008cda <pvPortMalloc+0x132>
 8008cd2:	4b17      	ldr	r3, [pc, #92]	; (8008d30 <pvPortMalloc+0x188>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a18      	ldr	r2, [pc, #96]	; (8008d38 <pvPortMalloc+0x190>)
 8008cd8:	6013      	str	r3, [r2, #0]
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	4b13      	ldr	r3, [pc, #76]	; (8008d2c <pvPortMalloc+0x184>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	431a      	orrs	r2, r3
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce6:	605a      	str	r2, [r3, #4]
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cea:	2200      	movs	r2, #0
 8008cec:	601a      	str	r2, [r3, #0]
 8008cee:	4b13      	ldr	r3, [pc, #76]	; (8008d3c <pvPortMalloc+0x194>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	4a11      	ldr	r2, [pc, #68]	; (8008d3c <pvPortMalloc+0x194>)
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	f7ff fa5e 	bl	80081b8 <xTaskResumeAll>
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	f003 0307 	and.w	r3, r3, #7
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00a      	beq.n	8008d1c <pvPortMalloc+0x174>
 8008d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	60fb      	str	r3, [r7, #12]
 8008d18:	bf00      	nop
 8008d1a:	e7fe      	b.n	8008d1a <pvPortMalloc+0x172>
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3728      	adds	r7, #40	; 0x28
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	200044b0 	.word	0x200044b0
 8008d2c:	200044c4 	.word	0x200044c4
 8008d30:	200044b4 	.word	0x200044b4
 8008d34:	200044a8 	.word	0x200044a8
 8008d38:	200044b8 	.word	0x200044b8
 8008d3c:	200044bc 	.word	0x200044bc

08008d40 <vPortFree>:
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	617b      	str	r3, [r7, #20]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d04d      	beq.n	8008dee <vPortFree+0xae>
 8008d52:	2308      	movs	r3, #8
 8008d54:	425b      	negs	r3, r3
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	4413      	add	r3, r2
 8008d5a:	617b      	str	r3, [r7, #20]
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	613b      	str	r3, [r7, #16]
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	4b24      	ldr	r3, [pc, #144]	; (8008df8 <vPortFree+0xb8>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4013      	ands	r3, r2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10a      	bne.n	8008d84 <vPortFree+0x44>
 8008d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	bf00      	nop
 8008d82:	e7fe      	b.n	8008d82 <vPortFree+0x42>
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00a      	beq.n	8008da2 <vPortFree+0x62>
 8008d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	60bb      	str	r3, [r7, #8]
 8008d9e:	bf00      	nop
 8008da0:	e7fe      	b.n	8008da0 <vPortFree+0x60>
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	4b14      	ldr	r3, [pc, #80]	; (8008df8 <vPortFree+0xb8>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4013      	ands	r3, r2
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d01e      	beq.n	8008dee <vPortFree+0xae>
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d11a      	bne.n	8008dee <vPortFree+0xae>
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	4b0e      	ldr	r3, [pc, #56]	; (8008df8 <vPortFree+0xb8>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	43db      	mvns	r3, r3
 8008dc2:	401a      	ands	r2, r3
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	605a      	str	r2, [r3, #4]
 8008dc8:	f7ff f9e8 	bl	800819c <vTaskSuspendAll>
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	685a      	ldr	r2, [r3, #4]
 8008dd0:	4b0a      	ldr	r3, [pc, #40]	; (8008dfc <vPortFree+0xbc>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	4a09      	ldr	r2, [pc, #36]	; (8008dfc <vPortFree+0xbc>)
 8008dd8:	6013      	str	r3, [r2, #0]
 8008dda:	6938      	ldr	r0, [r7, #16]
 8008ddc:	f000 f874 	bl	8008ec8 <prvInsertBlockIntoFreeList>
 8008de0:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <vPortFree+0xc0>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3301      	adds	r3, #1
 8008de6:	4a06      	ldr	r2, [pc, #24]	; (8008e00 <vPortFree+0xc0>)
 8008de8:	6013      	str	r3, [r2, #0]
 8008dea:	f7ff f9e5 	bl	80081b8 <xTaskResumeAll>
 8008dee:	bf00      	nop
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	200044c4 	.word	0x200044c4
 8008dfc:	200044b4 	.word	0x200044b4
 8008e00:	200044c0 	.word	0x200044c0

08008e04 <prvHeapInit>:
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008e0e:	60bb      	str	r3, [r7, #8]
 8008e10:	4b27      	ldr	r3, [pc, #156]	; (8008eb0 <prvHeapInit+0xac>)
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f003 0307 	and.w	r3, r3, #7
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00c      	beq.n	8008e38 <prvHeapInit+0x34>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	3307      	adds	r3, #7
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f023 0307 	bic.w	r3, r3, #7
 8008e2a:	60fb      	str	r3, [r7, #12]
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	4a1f      	ldr	r2, [pc, #124]	; (8008eb0 <prvHeapInit+0xac>)
 8008e34:	4413      	add	r3, r2
 8008e36:	60bb      	str	r3, [r7, #8]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	607b      	str	r3, [r7, #4]
 8008e3c:	4a1d      	ldr	r2, [pc, #116]	; (8008eb4 <prvHeapInit+0xb0>)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	4b1c      	ldr	r3, [pc, #112]	; (8008eb4 <prvHeapInit+0xb0>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	605a      	str	r2, [r3, #4]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	60fb      	str	r3, [r7, #12]
 8008e50:	2208      	movs	r2, #8
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	1a9b      	subs	r3, r3, r2
 8008e56:	60fb      	str	r3, [r7, #12]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f023 0307 	bic.w	r3, r3, #7
 8008e5e:	60fb      	str	r3, [r7, #12]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4a15      	ldr	r2, [pc, #84]	; (8008eb8 <prvHeapInit+0xb4>)
 8008e64:	6013      	str	r3, [r2, #0]
 8008e66:	4b14      	ldr	r3, [pc, #80]	; (8008eb8 <prvHeapInit+0xb4>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	605a      	str	r2, [r3, #4]
 8008e6e:	4b12      	ldr	r3, [pc, #72]	; (8008eb8 <prvHeapInit+0xb4>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2200      	movs	r2, #0
 8008e74:	601a      	str	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	603b      	str	r3, [r7, #0]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	1ad2      	subs	r2, r2, r3
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	605a      	str	r2, [r3, #4]
 8008e84:	4b0c      	ldr	r3, [pc, #48]	; (8008eb8 <prvHeapInit+0xb4>)
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	4a0a      	ldr	r2, [pc, #40]	; (8008ebc <prvHeapInit+0xb8>)
 8008e92:	6013      	str	r3, [r2, #0]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	4a09      	ldr	r2, [pc, #36]	; (8008ec0 <prvHeapInit+0xbc>)
 8008e9a:	6013      	str	r3, [r2, #0]
 8008e9c:	4b09      	ldr	r3, [pc, #36]	; (8008ec4 <prvHeapInit+0xc0>)
 8008e9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	bf00      	nop
 8008ea6:	3714      	adds	r7, #20
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	200008a8 	.word	0x200008a8
 8008eb4:	200044a8 	.word	0x200044a8
 8008eb8:	200044b0 	.word	0x200044b0
 8008ebc:	200044b8 	.word	0x200044b8
 8008ec0:	200044b4 	.word	0x200044b4
 8008ec4:	200044c4 	.word	0x200044c4

08008ec8 <prvInsertBlockIntoFreeList>:
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	4b28      	ldr	r3, [pc, #160]	; (8008f74 <prvInsertBlockIntoFreeList+0xac>)
 8008ed2:	60fb      	str	r3, [r7, #12]
 8008ed4:	e002      	b.n	8008edc <prvInsertBlockIntoFreeList+0x14>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	60fb      	str	r3, [r7, #12]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d8f7      	bhi.n	8008ed6 <prvInsertBlockIntoFreeList+0xe>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	60bb      	str	r3, [r7, #8]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d108      	bne.n	8008f0a <prvInsertBlockIntoFreeList+0x42>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	441a      	add	r2, r3
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	605a      	str	r2, [r3, #4]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	607b      	str	r3, [r7, #4]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	60bb      	str	r3, [r7, #8]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	441a      	add	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d118      	bne.n	8008f50 <prvInsertBlockIntoFreeList+0x88>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	4b15      	ldr	r3, [pc, #84]	; (8008f78 <prvInsertBlockIntoFreeList+0xb0>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d00d      	beq.n	8008f46 <prvInsertBlockIntoFreeList+0x7e>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	685a      	ldr	r2, [r3, #4]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	441a      	add	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	605a      	str	r2, [r3, #4]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	601a      	str	r2, [r3, #0]
 8008f44:	e008      	b.n	8008f58 <prvInsertBlockIntoFreeList+0x90>
 8008f46:	4b0c      	ldr	r3, [pc, #48]	; (8008f78 <prvInsertBlockIntoFreeList+0xb0>)
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	e003      	b.n	8008f58 <prvInsertBlockIntoFreeList+0x90>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	601a      	str	r2, [r3, #0]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d002      	beq.n	8008f66 <prvInsertBlockIntoFreeList+0x9e>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	bf00      	nop
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	200044a8 	.word	0x200044a8
 8008f78:	200044b0 	.word	0x200044b0

08008f7c <memset>:
 8008f7c:	4402      	add	r2, r0
 8008f7e:	4603      	mov	r3, r0
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d100      	bne.n	8008f86 <memset+0xa>
 8008f84:	4770      	bx	lr
 8008f86:	f803 1b01 	strb.w	r1, [r3], #1
 8008f8a:	e7f9      	b.n	8008f80 <memset+0x4>

08008f8c <__errno>:
 8008f8c:	4b01      	ldr	r3, [pc, #4]	; (8008f94 <__errno+0x8>)
 8008f8e:	6818      	ldr	r0, [r3, #0]
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	200000ec 	.word	0x200000ec

08008f98 <__libc_init_array>:
 8008f98:	b570      	push	{r4, r5, r6, lr}
 8008f9a:	4d0d      	ldr	r5, [pc, #52]	; (8008fd0 <__libc_init_array+0x38>)
 8008f9c:	4c0d      	ldr	r4, [pc, #52]	; (8008fd4 <__libc_init_array+0x3c>)
 8008f9e:	1b64      	subs	r4, r4, r5
 8008fa0:	10a4      	asrs	r4, r4, #2
 8008fa2:	2600      	movs	r6, #0
 8008fa4:	42a6      	cmp	r6, r4
 8008fa6:	d109      	bne.n	8008fbc <__libc_init_array+0x24>
 8008fa8:	4d0b      	ldr	r5, [pc, #44]	; (8008fd8 <__libc_init_array+0x40>)
 8008faa:	4c0c      	ldr	r4, [pc, #48]	; (8008fdc <__libc_init_array+0x44>)
 8008fac:	f000 fd9a 	bl	8009ae4 <_init>
 8008fb0:	1b64      	subs	r4, r4, r5
 8008fb2:	10a4      	asrs	r4, r4, #2
 8008fb4:	2600      	movs	r6, #0
 8008fb6:	42a6      	cmp	r6, r4
 8008fb8:	d105      	bne.n	8008fc6 <__libc_init_array+0x2e>
 8008fba:	bd70      	pop	{r4, r5, r6, pc}
 8008fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fc0:	4798      	blx	r3
 8008fc2:	3601      	adds	r6, #1
 8008fc4:	e7ee      	b.n	8008fa4 <__libc_init_array+0xc>
 8008fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fca:	4798      	blx	r3
 8008fcc:	3601      	adds	r6, #1
 8008fce:	e7f2      	b.n	8008fb6 <__libc_init_array+0x1e>
 8008fd0:	08009c40 	.word	0x08009c40
 8008fd4:	08009c40 	.word	0x08009c40
 8008fd8:	08009c40 	.word	0x08009c40
 8008fdc:	08009c44 	.word	0x08009c44

08008fe0 <atan2>:
 8008fe0:	f000 bafe 	b.w	80095e0 <__ieee754_atan2>
 8008fe4:	0000      	movs	r0, r0
	...

08008fe8 <log>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	ed2d 8b02 	vpush	{d8}
 8008fee:	ec55 4b10 	vmov	r4, r5, d0
 8008ff2:	f000 fbbd 	bl	8009770 <__ieee754_log>
 8008ff6:	4622      	mov	r2, r4
 8008ff8:	462b      	mov	r3, r5
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	eeb0 8a40 	vmov.f32	s16, s0
 8009002:	eef0 8a60 	vmov.f32	s17, s1
 8009006:	f7f7 fd41 	bl	8000a8c <__aeabi_dcmpun>
 800900a:	b998      	cbnz	r0, 8009034 <log+0x4c>
 800900c:	2200      	movs	r2, #0
 800900e:	2300      	movs	r3, #0
 8009010:	4620      	mov	r0, r4
 8009012:	4629      	mov	r1, r5
 8009014:	f7f7 fd30 	bl	8000a78 <__aeabi_dcmpgt>
 8009018:	b960      	cbnz	r0, 8009034 <log+0x4c>
 800901a:	2200      	movs	r2, #0
 800901c:	2300      	movs	r3, #0
 800901e:	4620      	mov	r0, r4
 8009020:	4629      	mov	r1, r5
 8009022:	f7f7 fd01 	bl	8000a28 <__aeabi_dcmpeq>
 8009026:	b160      	cbz	r0, 8009042 <log+0x5a>
 8009028:	f7ff ffb0 	bl	8008f8c <__errno>
 800902c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8009058 <log+0x70>
 8009030:	2322      	movs	r3, #34	; 0x22
 8009032:	6003      	str	r3, [r0, #0]
 8009034:	eeb0 0a48 	vmov.f32	s0, s16
 8009038:	eef0 0a68 	vmov.f32	s1, s17
 800903c:	ecbd 8b02 	vpop	{d8}
 8009040:	bd38      	pop	{r3, r4, r5, pc}
 8009042:	f7ff ffa3 	bl	8008f8c <__errno>
 8009046:	ecbd 8b02 	vpop	{d8}
 800904a:	2321      	movs	r3, #33	; 0x21
 800904c:	6003      	str	r3, [r0, #0]
 800904e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009052:	4803      	ldr	r0, [pc, #12]	; (8009060 <log+0x78>)
 8009054:	f000 b9e0 	b.w	8009418 <nan>
 8009058:	00000000 	.word	0x00000000
 800905c:	fff00000 	.word	0xfff00000
 8009060:	08009bc4 	.word	0x08009bc4

08009064 <sqrt>:
 8009064:	b538      	push	{r3, r4, r5, lr}
 8009066:	ed2d 8b02 	vpush	{d8}
 800906a:	ec55 4b10 	vmov	r4, r5, d0
 800906e:	f000 f9db 	bl	8009428 <__ieee754_sqrt>
 8009072:	4622      	mov	r2, r4
 8009074:	462b      	mov	r3, r5
 8009076:	4620      	mov	r0, r4
 8009078:	4629      	mov	r1, r5
 800907a:	eeb0 8a40 	vmov.f32	s16, s0
 800907e:	eef0 8a60 	vmov.f32	s17, s1
 8009082:	f7f7 fd03 	bl	8000a8c <__aeabi_dcmpun>
 8009086:	b990      	cbnz	r0, 80090ae <sqrt+0x4a>
 8009088:	2200      	movs	r2, #0
 800908a:	2300      	movs	r3, #0
 800908c:	4620      	mov	r0, r4
 800908e:	4629      	mov	r1, r5
 8009090:	f7f7 fcd4 	bl	8000a3c <__aeabi_dcmplt>
 8009094:	b158      	cbz	r0, 80090ae <sqrt+0x4a>
 8009096:	f7ff ff79 	bl	8008f8c <__errno>
 800909a:	2321      	movs	r3, #33	; 0x21
 800909c:	6003      	str	r3, [r0, #0]
 800909e:	2200      	movs	r2, #0
 80090a0:	2300      	movs	r3, #0
 80090a2:	4610      	mov	r0, r2
 80090a4:	4619      	mov	r1, r3
 80090a6:	f7f7 fb81 	bl	80007ac <__aeabi_ddiv>
 80090aa:	ec41 0b18 	vmov	d8, r0, r1
 80090ae:	eeb0 0a48 	vmov.f32	s0, s16
 80090b2:	eef0 0a68 	vmov.f32	s1, s17
 80090b6:	ecbd 8b02 	vpop	{d8}
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	0000      	movs	r0, r0
	...

080090c0 <atan>:
 80090c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c4:	ec55 4b10 	vmov	r4, r5, d0
 80090c8:	4bc3      	ldr	r3, [pc, #780]	; (80093d8 <atan+0x318>)
 80090ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80090ce:	429e      	cmp	r6, r3
 80090d0:	46ab      	mov	fp, r5
 80090d2:	dd18      	ble.n	8009106 <atan+0x46>
 80090d4:	4bc1      	ldr	r3, [pc, #772]	; (80093dc <atan+0x31c>)
 80090d6:	429e      	cmp	r6, r3
 80090d8:	dc01      	bgt.n	80090de <atan+0x1e>
 80090da:	d109      	bne.n	80090f0 <atan+0x30>
 80090dc:	b144      	cbz	r4, 80090f0 <atan+0x30>
 80090de:	4622      	mov	r2, r4
 80090e0:	462b      	mov	r3, r5
 80090e2:	4620      	mov	r0, r4
 80090e4:	4629      	mov	r1, r5
 80090e6:	f7f7 f881 	bl	80001ec <__adddf3>
 80090ea:	4604      	mov	r4, r0
 80090ec:	460d      	mov	r5, r1
 80090ee:	e006      	b.n	80090fe <atan+0x3e>
 80090f0:	f1bb 0f00 	cmp.w	fp, #0
 80090f4:	f300 8131 	bgt.w	800935a <atan+0x29a>
 80090f8:	a59b      	add	r5, pc, #620	; (adr r5, 8009368 <atan+0x2a8>)
 80090fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80090fe:	ec45 4b10 	vmov	d0, r4, r5
 8009102:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009106:	4bb6      	ldr	r3, [pc, #728]	; (80093e0 <atan+0x320>)
 8009108:	429e      	cmp	r6, r3
 800910a:	dc14      	bgt.n	8009136 <atan+0x76>
 800910c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009110:	429e      	cmp	r6, r3
 8009112:	dc0d      	bgt.n	8009130 <atan+0x70>
 8009114:	a396      	add	r3, pc, #600	; (adr r3, 8009370 <atan+0x2b0>)
 8009116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911a:	ee10 0a10 	vmov	r0, s0
 800911e:	4629      	mov	r1, r5
 8009120:	f7f7 f864 	bl	80001ec <__adddf3>
 8009124:	4baf      	ldr	r3, [pc, #700]	; (80093e4 <atan+0x324>)
 8009126:	2200      	movs	r2, #0
 8009128:	f7f7 fca6 	bl	8000a78 <__aeabi_dcmpgt>
 800912c:	2800      	cmp	r0, #0
 800912e:	d1e6      	bne.n	80090fe <atan+0x3e>
 8009130:	f04f 3aff 	mov.w	sl, #4294967295
 8009134:	e02b      	b.n	800918e <atan+0xce>
 8009136:	f000 f963 	bl	8009400 <fabs>
 800913a:	4bab      	ldr	r3, [pc, #684]	; (80093e8 <atan+0x328>)
 800913c:	429e      	cmp	r6, r3
 800913e:	ec55 4b10 	vmov	r4, r5, d0
 8009142:	f300 80bf 	bgt.w	80092c4 <atan+0x204>
 8009146:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800914a:	429e      	cmp	r6, r3
 800914c:	f300 80a0 	bgt.w	8009290 <atan+0x1d0>
 8009150:	ee10 2a10 	vmov	r2, s0
 8009154:	ee10 0a10 	vmov	r0, s0
 8009158:	462b      	mov	r3, r5
 800915a:	4629      	mov	r1, r5
 800915c:	f7f7 f846 	bl	80001ec <__adddf3>
 8009160:	4ba0      	ldr	r3, [pc, #640]	; (80093e4 <atan+0x324>)
 8009162:	2200      	movs	r2, #0
 8009164:	f7f7 f840 	bl	80001e8 <__aeabi_dsub>
 8009168:	2200      	movs	r2, #0
 800916a:	4606      	mov	r6, r0
 800916c:	460f      	mov	r7, r1
 800916e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009172:	4620      	mov	r0, r4
 8009174:	4629      	mov	r1, r5
 8009176:	f7f7 f839 	bl	80001ec <__adddf3>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4630      	mov	r0, r6
 8009180:	4639      	mov	r1, r7
 8009182:	f7f7 fb13 	bl	80007ac <__aeabi_ddiv>
 8009186:	f04f 0a00 	mov.w	sl, #0
 800918a:	4604      	mov	r4, r0
 800918c:	460d      	mov	r5, r1
 800918e:	4622      	mov	r2, r4
 8009190:	462b      	mov	r3, r5
 8009192:	4620      	mov	r0, r4
 8009194:	4629      	mov	r1, r5
 8009196:	f7f7 f9df 	bl	8000558 <__aeabi_dmul>
 800919a:	4602      	mov	r2, r0
 800919c:	460b      	mov	r3, r1
 800919e:	4680      	mov	r8, r0
 80091a0:	4689      	mov	r9, r1
 80091a2:	f7f7 f9d9 	bl	8000558 <__aeabi_dmul>
 80091a6:	a374      	add	r3, pc, #464	; (adr r3, 8009378 <atan+0x2b8>)
 80091a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ac:	4606      	mov	r6, r0
 80091ae:	460f      	mov	r7, r1
 80091b0:	f7f7 f9d2 	bl	8000558 <__aeabi_dmul>
 80091b4:	a372      	add	r3, pc, #456	; (adr r3, 8009380 <atan+0x2c0>)
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	f7f7 f817 	bl	80001ec <__adddf3>
 80091be:	4632      	mov	r2, r6
 80091c0:	463b      	mov	r3, r7
 80091c2:	f7f7 f9c9 	bl	8000558 <__aeabi_dmul>
 80091c6:	a370      	add	r3, pc, #448	; (adr r3, 8009388 <atan+0x2c8>)
 80091c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091cc:	f7f7 f80e 	bl	80001ec <__adddf3>
 80091d0:	4632      	mov	r2, r6
 80091d2:	463b      	mov	r3, r7
 80091d4:	f7f7 f9c0 	bl	8000558 <__aeabi_dmul>
 80091d8:	a36d      	add	r3, pc, #436	; (adr r3, 8009390 <atan+0x2d0>)
 80091da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091de:	f7f7 f805 	bl	80001ec <__adddf3>
 80091e2:	4632      	mov	r2, r6
 80091e4:	463b      	mov	r3, r7
 80091e6:	f7f7 f9b7 	bl	8000558 <__aeabi_dmul>
 80091ea:	a36b      	add	r3, pc, #428	; (adr r3, 8009398 <atan+0x2d8>)
 80091ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f0:	f7f6 fffc 	bl	80001ec <__adddf3>
 80091f4:	4632      	mov	r2, r6
 80091f6:	463b      	mov	r3, r7
 80091f8:	f7f7 f9ae 	bl	8000558 <__aeabi_dmul>
 80091fc:	a368      	add	r3, pc, #416	; (adr r3, 80093a0 <atan+0x2e0>)
 80091fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009202:	f7f6 fff3 	bl	80001ec <__adddf3>
 8009206:	4642      	mov	r2, r8
 8009208:	464b      	mov	r3, r9
 800920a:	f7f7 f9a5 	bl	8000558 <__aeabi_dmul>
 800920e:	a366      	add	r3, pc, #408	; (adr r3, 80093a8 <atan+0x2e8>)
 8009210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009214:	4680      	mov	r8, r0
 8009216:	4689      	mov	r9, r1
 8009218:	4630      	mov	r0, r6
 800921a:	4639      	mov	r1, r7
 800921c:	f7f7 f99c 	bl	8000558 <__aeabi_dmul>
 8009220:	a363      	add	r3, pc, #396	; (adr r3, 80093b0 <atan+0x2f0>)
 8009222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009226:	f7f6 ffdf 	bl	80001e8 <__aeabi_dsub>
 800922a:	4632      	mov	r2, r6
 800922c:	463b      	mov	r3, r7
 800922e:	f7f7 f993 	bl	8000558 <__aeabi_dmul>
 8009232:	a361      	add	r3, pc, #388	; (adr r3, 80093b8 <atan+0x2f8>)
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	f7f6 ffd6 	bl	80001e8 <__aeabi_dsub>
 800923c:	4632      	mov	r2, r6
 800923e:	463b      	mov	r3, r7
 8009240:	f7f7 f98a 	bl	8000558 <__aeabi_dmul>
 8009244:	a35e      	add	r3, pc, #376	; (adr r3, 80093c0 <atan+0x300>)
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	f7f6 ffcd 	bl	80001e8 <__aeabi_dsub>
 800924e:	4632      	mov	r2, r6
 8009250:	463b      	mov	r3, r7
 8009252:	f7f7 f981 	bl	8000558 <__aeabi_dmul>
 8009256:	a35c      	add	r3, pc, #368	; (adr r3, 80093c8 <atan+0x308>)
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	f7f6 ffc4 	bl	80001e8 <__aeabi_dsub>
 8009260:	4632      	mov	r2, r6
 8009262:	463b      	mov	r3, r7
 8009264:	f7f7 f978 	bl	8000558 <__aeabi_dmul>
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	4640      	mov	r0, r8
 800926e:	4649      	mov	r1, r9
 8009270:	f7f6 ffbc 	bl	80001ec <__adddf3>
 8009274:	4622      	mov	r2, r4
 8009276:	462b      	mov	r3, r5
 8009278:	f7f7 f96e 	bl	8000558 <__aeabi_dmul>
 800927c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009280:	4602      	mov	r2, r0
 8009282:	460b      	mov	r3, r1
 8009284:	d14b      	bne.n	800931e <atan+0x25e>
 8009286:	4620      	mov	r0, r4
 8009288:	4629      	mov	r1, r5
 800928a:	f7f6 ffad 	bl	80001e8 <__aeabi_dsub>
 800928e:	e72c      	b.n	80090ea <atan+0x2a>
 8009290:	ee10 0a10 	vmov	r0, s0
 8009294:	4b53      	ldr	r3, [pc, #332]	; (80093e4 <atan+0x324>)
 8009296:	2200      	movs	r2, #0
 8009298:	4629      	mov	r1, r5
 800929a:	f7f6 ffa5 	bl	80001e8 <__aeabi_dsub>
 800929e:	4b51      	ldr	r3, [pc, #324]	; (80093e4 <atan+0x324>)
 80092a0:	4606      	mov	r6, r0
 80092a2:	460f      	mov	r7, r1
 80092a4:	2200      	movs	r2, #0
 80092a6:	4620      	mov	r0, r4
 80092a8:	4629      	mov	r1, r5
 80092aa:	f7f6 ff9f 	bl	80001ec <__adddf3>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	4630      	mov	r0, r6
 80092b4:	4639      	mov	r1, r7
 80092b6:	f7f7 fa79 	bl	80007ac <__aeabi_ddiv>
 80092ba:	f04f 0a01 	mov.w	sl, #1
 80092be:	4604      	mov	r4, r0
 80092c0:	460d      	mov	r5, r1
 80092c2:	e764      	b.n	800918e <atan+0xce>
 80092c4:	4b49      	ldr	r3, [pc, #292]	; (80093ec <atan+0x32c>)
 80092c6:	429e      	cmp	r6, r3
 80092c8:	da1d      	bge.n	8009306 <atan+0x246>
 80092ca:	ee10 0a10 	vmov	r0, s0
 80092ce:	4b48      	ldr	r3, [pc, #288]	; (80093f0 <atan+0x330>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	4629      	mov	r1, r5
 80092d4:	f7f6 ff88 	bl	80001e8 <__aeabi_dsub>
 80092d8:	4b45      	ldr	r3, [pc, #276]	; (80093f0 <atan+0x330>)
 80092da:	4606      	mov	r6, r0
 80092dc:	460f      	mov	r7, r1
 80092de:	2200      	movs	r2, #0
 80092e0:	4620      	mov	r0, r4
 80092e2:	4629      	mov	r1, r5
 80092e4:	f7f7 f938 	bl	8000558 <__aeabi_dmul>
 80092e8:	4b3e      	ldr	r3, [pc, #248]	; (80093e4 <atan+0x324>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	f7f6 ff7e 	bl	80001ec <__adddf3>
 80092f0:	4602      	mov	r2, r0
 80092f2:	460b      	mov	r3, r1
 80092f4:	4630      	mov	r0, r6
 80092f6:	4639      	mov	r1, r7
 80092f8:	f7f7 fa58 	bl	80007ac <__aeabi_ddiv>
 80092fc:	f04f 0a02 	mov.w	sl, #2
 8009300:	4604      	mov	r4, r0
 8009302:	460d      	mov	r5, r1
 8009304:	e743      	b.n	800918e <atan+0xce>
 8009306:	462b      	mov	r3, r5
 8009308:	ee10 2a10 	vmov	r2, s0
 800930c:	4939      	ldr	r1, [pc, #228]	; (80093f4 <atan+0x334>)
 800930e:	2000      	movs	r0, #0
 8009310:	f7f7 fa4c 	bl	80007ac <__aeabi_ddiv>
 8009314:	f04f 0a03 	mov.w	sl, #3
 8009318:	4604      	mov	r4, r0
 800931a:	460d      	mov	r5, r1
 800931c:	e737      	b.n	800918e <atan+0xce>
 800931e:	4b36      	ldr	r3, [pc, #216]	; (80093f8 <atan+0x338>)
 8009320:	4e36      	ldr	r6, [pc, #216]	; (80093fc <atan+0x33c>)
 8009322:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f7f6 ff5d 	bl	80001e8 <__aeabi_dsub>
 800932e:	4622      	mov	r2, r4
 8009330:	462b      	mov	r3, r5
 8009332:	f7f6 ff59 	bl	80001e8 <__aeabi_dsub>
 8009336:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009342:	f7f6 ff51 	bl	80001e8 <__aeabi_dsub>
 8009346:	f1bb 0f00 	cmp.w	fp, #0
 800934a:	4604      	mov	r4, r0
 800934c:	460d      	mov	r5, r1
 800934e:	f6bf aed6 	bge.w	80090fe <atan+0x3e>
 8009352:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009356:	461d      	mov	r5, r3
 8009358:	e6d1      	b.n	80090fe <atan+0x3e>
 800935a:	a51d      	add	r5, pc, #116	; (adr r5, 80093d0 <atan+0x310>)
 800935c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009360:	e6cd      	b.n	80090fe <atan+0x3e>
 8009362:	bf00      	nop
 8009364:	f3af 8000 	nop.w
 8009368:	54442d18 	.word	0x54442d18
 800936c:	bff921fb 	.word	0xbff921fb
 8009370:	8800759c 	.word	0x8800759c
 8009374:	7e37e43c 	.word	0x7e37e43c
 8009378:	e322da11 	.word	0xe322da11
 800937c:	3f90ad3a 	.word	0x3f90ad3a
 8009380:	24760deb 	.word	0x24760deb
 8009384:	3fa97b4b 	.word	0x3fa97b4b
 8009388:	a0d03d51 	.word	0xa0d03d51
 800938c:	3fb10d66 	.word	0x3fb10d66
 8009390:	c54c206e 	.word	0xc54c206e
 8009394:	3fb745cd 	.word	0x3fb745cd
 8009398:	920083ff 	.word	0x920083ff
 800939c:	3fc24924 	.word	0x3fc24924
 80093a0:	5555550d 	.word	0x5555550d
 80093a4:	3fd55555 	.word	0x3fd55555
 80093a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80093ac:	bfa2b444 	.word	0xbfa2b444
 80093b0:	52defd9a 	.word	0x52defd9a
 80093b4:	3fadde2d 	.word	0x3fadde2d
 80093b8:	af749a6d 	.word	0xaf749a6d
 80093bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80093c0:	fe231671 	.word	0xfe231671
 80093c4:	3fbc71c6 	.word	0x3fbc71c6
 80093c8:	9998ebc4 	.word	0x9998ebc4
 80093cc:	3fc99999 	.word	0x3fc99999
 80093d0:	54442d18 	.word	0x54442d18
 80093d4:	3ff921fb 	.word	0x3ff921fb
 80093d8:	440fffff 	.word	0x440fffff
 80093dc:	7ff00000 	.word	0x7ff00000
 80093e0:	3fdbffff 	.word	0x3fdbffff
 80093e4:	3ff00000 	.word	0x3ff00000
 80093e8:	3ff2ffff 	.word	0x3ff2ffff
 80093ec:	40038000 	.word	0x40038000
 80093f0:	3ff80000 	.word	0x3ff80000
 80093f4:	bff00000 	.word	0xbff00000
 80093f8:	08009be8 	.word	0x08009be8
 80093fc:	08009bc8 	.word	0x08009bc8

08009400 <fabs>:
 8009400:	ec51 0b10 	vmov	r0, r1, d0
 8009404:	ee10 2a10 	vmov	r2, s0
 8009408:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800940c:	ec43 2b10 	vmov	d0, r2, r3
 8009410:	4770      	bx	lr
 8009412:	0000      	movs	r0, r0
 8009414:	0000      	movs	r0, r0
	...

08009418 <nan>:
 8009418:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009420 <nan+0x8>
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	00000000 	.word	0x00000000
 8009424:	7ff80000 	.word	0x7ff80000

08009428 <__ieee754_sqrt>:
 8009428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	ec55 4b10 	vmov	r4, r5, d0
 8009430:	4e67      	ldr	r6, [pc, #412]	; (80095d0 <__ieee754_sqrt+0x1a8>)
 8009432:	43ae      	bics	r6, r5
 8009434:	ee10 0a10 	vmov	r0, s0
 8009438:	ee10 2a10 	vmov	r2, s0
 800943c:	4629      	mov	r1, r5
 800943e:	462b      	mov	r3, r5
 8009440:	d10d      	bne.n	800945e <__ieee754_sqrt+0x36>
 8009442:	f7f7 f889 	bl	8000558 <__aeabi_dmul>
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4620      	mov	r0, r4
 800944c:	4629      	mov	r1, r5
 800944e:	f7f6 fecd 	bl	80001ec <__adddf3>
 8009452:	4604      	mov	r4, r0
 8009454:	460d      	mov	r5, r1
 8009456:	ec45 4b10 	vmov	d0, r4, r5
 800945a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800945e:	2d00      	cmp	r5, #0
 8009460:	dc0b      	bgt.n	800947a <__ieee754_sqrt+0x52>
 8009462:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009466:	4326      	orrs	r6, r4
 8009468:	d0f5      	beq.n	8009456 <__ieee754_sqrt+0x2e>
 800946a:	b135      	cbz	r5, 800947a <__ieee754_sqrt+0x52>
 800946c:	f7f6 febc 	bl	80001e8 <__aeabi_dsub>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	f7f7 f99a 	bl	80007ac <__aeabi_ddiv>
 8009478:	e7eb      	b.n	8009452 <__ieee754_sqrt+0x2a>
 800947a:	1509      	asrs	r1, r1, #20
 800947c:	f000 808d 	beq.w	800959a <__ieee754_sqrt+0x172>
 8009480:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009484:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009488:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800948c:	07c9      	lsls	r1, r1, #31
 800948e:	bf5c      	itt	pl
 8009490:	005b      	lslpl	r3, r3, #1
 8009492:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8009496:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800949a:	bf58      	it	pl
 800949c:	0052      	lslpl	r2, r2, #1
 800949e:	2500      	movs	r5, #0
 80094a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80094a4:	1076      	asrs	r6, r6, #1
 80094a6:	0052      	lsls	r2, r2, #1
 80094a8:	f04f 0e16 	mov.w	lr, #22
 80094ac:	46ac      	mov	ip, r5
 80094ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80094b2:	eb0c 0001 	add.w	r0, ip, r1
 80094b6:	4298      	cmp	r0, r3
 80094b8:	bfde      	ittt	le
 80094ba:	1a1b      	suble	r3, r3, r0
 80094bc:	eb00 0c01 	addle.w	ip, r0, r1
 80094c0:	186d      	addle	r5, r5, r1
 80094c2:	005b      	lsls	r3, r3, #1
 80094c4:	f1be 0e01 	subs.w	lr, lr, #1
 80094c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80094cc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80094d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80094d4:	d1ed      	bne.n	80094b2 <__ieee754_sqrt+0x8a>
 80094d6:	4674      	mov	r4, lr
 80094d8:	2720      	movs	r7, #32
 80094da:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80094de:	4563      	cmp	r3, ip
 80094e0:	eb01 000e 	add.w	r0, r1, lr
 80094e4:	dc02      	bgt.n	80094ec <__ieee754_sqrt+0xc4>
 80094e6:	d113      	bne.n	8009510 <__ieee754_sqrt+0xe8>
 80094e8:	4290      	cmp	r0, r2
 80094ea:	d811      	bhi.n	8009510 <__ieee754_sqrt+0xe8>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	eb00 0e01 	add.w	lr, r0, r1
 80094f2:	da57      	bge.n	80095a4 <__ieee754_sqrt+0x17c>
 80094f4:	f1be 0f00 	cmp.w	lr, #0
 80094f8:	db54      	blt.n	80095a4 <__ieee754_sqrt+0x17c>
 80094fa:	f10c 0801 	add.w	r8, ip, #1
 80094fe:	eba3 030c 	sub.w	r3, r3, ip
 8009502:	4290      	cmp	r0, r2
 8009504:	bf88      	it	hi
 8009506:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800950a:	1a12      	subs	r2, r2, r0
 800950c:	440c      	add	r4, r1
 800950e:	46c4      	mov	ip, r8
 8009510:	005b      	lsls	r3, r3, #1
 8009512:	3f01      	subs	r7, #1
 8009514:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009518:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800951c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009520:	d1dd      	bne.n	80094de <__ieee754_sqrt+0xb6>
 8009522:	4313      	orrs	r3, r2
 8009524:	d01b      	beq.n	800955e <__ieee754_sqrt+0x136>
 8009526:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80095d4 <__ieee754_sqrt+0x1ac>
 800952a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80095d8 <__ieee754_sqrt+0x1b0>
 800952e:	e9da 0100 	ldrd	r0, r1, [sl]
 8009532:	e9db 2300 	ldrd	r2, r3, [fp]
 8009536:	f7f6 fe57 	bl	80001e8 <__aeabi_dsub>
 800953a:	e9da 8900 	ldrd	r8, r9, [sl]
 800953e:	4602      	mov	r2, r0
 8009540:	460b      	mov	r3, r1
 8009542:	4640      	mov	r0, r8
 8009544:	4649      	mov	r1, r9
 8009546:	f7f7 fa83 	bl	8000a50 <__aeabi_dcmple>
 800954a:	b140      	cbz	r0, 800955e <__ieee754_sqrt+0x136>
 800954c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009550:	e9da 0100 	ldrd	r0, r1, [sl]
 8009554:	e9db 2300 	ldrd	r2, r3, [fp]
 8009558:	d126      	bne.n	80095a8 <__ieee754_sqrt+0x180>
 800955a:	3501      	adds	r5, #1
 800955c:	463c      	mov	r4, r7
 800955e:	106a      	asrs	r2, r5, #1
 8009560:	0863      	lsrs	r3, r4, #1
 8009562:	07e9      	lsls	r1, r5, #31
 8009564:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009568:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800956c:	bf48      	it	mi
 800956e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009572:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8009576:	461c      	mov	r4, r3
 8009578:	e76d      	b.n	8009456 <__ieee754_sqrt+0x2e>
 800957a:	0ad3      	lsrs	r3, r2, #11
 800957c:	3815      	subs	r0, #21
 800957e:	0552      	lsls	r2, r2, #21
 8009580:	2b00      	cmp	r3, #0
 8009582:	d0fa      	beq.n	800957a <__ieee754_sqrt+0x152>
 8009584:	02dc      	lsls	r4, r3, #11
 8009586:	d50a      	bpl.n	800959e <__ieee754_sqrt+0x176>
 8009588:	f1c1 0420 	rsb	r4, r1, #32
 800958c:	fa22 f404 	lsr.w	r4, r2, r4
 8009590:	1e4d      	subs	r5, r1, #1
 8009592:	408a      	lsls	r2, r1
 8009594:	4323      	orrs	r3, r4
 8009596:	1b41      	subs	r1, r0, r5
 8009598:	e772      	b.n	8009480 <__ieee754_sqrt+0x58>
 800959a:	4608      	mov	r0, r1
 800959c:	e7f0      	b.n	8009580 <__ieee754_sqrt+0x158>
 800959e:	005b      	lsls	r3, r3, #1
 80095a0:	3101      	adds	r1, #1
 80095a2:	e7ef      	b.n	8009584 <__ieee754_sqrt+0x15c>
 80095a4:	46e0      	mov	r8, ip
 80095a6:	e7aa      	b.n	80094fe <__ieee754_sqrt+0xd6>
 80095a8:	f7f6 fe20 	bl	80001ec <__adddf3>
 80095ac:	e9da 8900 	ldrd	r8, r9, [sl]
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	4640      	mov	r0, r8
 80095b6:	4649      	mov	r1, r9
 80095b8:	f7f7 fa40 	bl	8000a3c <__aeabi_dcmplt>
 80095bc:	b120      	cbz	r0, 80095c8 <__ieee754_sqrt+0x1a0>
 80095be:	1ca0      	adds	r0, r4, #2
 80095c0:	bf08      	it	eq
 80095c2:	3501      	addeq	r5, #1
 80095c4:	3402      	adds	r4, #2
 80095c6:	e7ca      	b.n	800955e <__ieee754_sqrt+0x136>
 80095c8:	3401      	adds	r4, #1
 80095ca:	f024 0401 	bic.w	r4, r4, #1
 80095ce:	e7c6      	b.n	800955e <__ieee754_sqrt+0x136>
 80095d0:	7ff00000 	.word	0x7ff00000
 80095d4:	200000f0 	.word	0x200000f0
 80095d8:	200000f8 	.word	0x200000f8
 80095dc:	00000000 	.word	0x00000000

080095e0 <__ieee754_atan2>:
 80095e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095e4:	ec57 6b11 	vmov	r6, r7, d1
 80095e8:	4273      	negs	r3, r6
 80095ea:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009768 <__ieee754_atan2+0x188>
 80095ee:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80095f2:	4333      	orrs	r3, r6
 80095f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80095f8:	4543      	cmp	r3, r8
 80095fa:	ec51 0b10 	vmov	r0, r1, d0
 80095fe:	ee11 5a10 	vmov	r5, s2
 8009602:	d80a      	bhi.n	800961a <__ieee754_atan2+0x3a>
 8009604:	4244      	negs	r4, r0
 8009606:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800960a:	4304      	orrs	r4, r0
 800960c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009610:	4544      	cmp	r4, r8
 8009612:	ee10 9a10 	vmov	r9, s0
 8009616:	468e      	mov	lr, r1
 8009618:	d907      	bls.n	800962a <__ieee754_atan2+0x4a>
 800961a:	4632      	mov	r2, r6
 800961c:	463b      	mov	r3, r7
 800961e:	f7f6 fde5 	bl	80001ec <__adddf3>
 8009622:	ec41 0b10 	vmov	d0, r0, r1
 8009626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800962a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800962e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009632:	4334      	orrs	r4, r6
 8009634:	d103      	bne.n	800963e <__ieee754_atan2+0x5e>
 8009636:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800963a:	f7ff bd41 	b.w	80090c0 <atan>
 800963e:	17bc      	asrs	r4, r7, #30
 8009640:	f004 0402 	and.w	r4, r4, #2
 8009644:	ea53 0909 	orrs.w	r9, r3, r9
 8009648:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800964c:	d107      	bne.n	800965e <__ieee754_atan2+0x7e>
 800964e:	2c02      	cmp	r4, #2
 8009650:	d05f      	beq.n	8009712 <__ieee754_atan2+0x132>
 8009652:	2c03      	cmp	r4, #3
 8009654:	d1e5      	bne.n	8009622 <__ieee754_atan2+0x42>
 8009656:	a140      	add	r1, pc, #256	; (adr r1, 8009758 <__ieee754_atan2+0x178>)
 8009658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800965c:	e7e1      	b.n	8009622 <__ieee754_atan2+0x42>
 800965e:	4315      	orrs	r5, r2
 8009660:	d106      	bne.n	8009670 <__ieee754_atan2+0x90>
 8009662:	f1be 0f00 	cmp.w	lr, #0
 8009666:	da5f      	bge.n	8009728 <__ieee754_atan2+0x148>
 8009668:	a13d      	add	r1, pc, #244	; (adr r1, 8009760 <__ieee754_atan2+0x180>)
 800966a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800966e:	e7d8      	b.n	8009622 <__ieee754_atan2+0x42>
 8009670:	4542      	cmp	r2, r8
 8009672:	d10f      	bne.n	8009694 <__ieee754_atan2+0xb4>
 8009674:	4293      	cmp	r3, r2
 8009676:	f104 34ff 	add.w	r4, r4, #4294967295
 800967a:	d107      	bne.n	800968c <__ieee754_atan2+0xac>
 800967c:	2c02      	cmp	r4, #2
 800967e:	d84c      	bhi.n	800971a <__ieee754_atan2+0x13a>
 8009680:	4b33      	ldr	r3, [pc, #204]	; (8009750 <__ieee754_atan2+0x170>)
 8009682:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009686:	e9d3 0100 	ldrd	r0, r1, [r3]
 800968a:	e7ca      	b.n	8009622 <__ieee754_atan2+0x42>
 800968c:	2c02      	cmp	r4, #2
 800968e:	d848      	bhi.n	8009722 <__ieee754_atan2+0x142>
 8009690:	4b30      	ldr	r3, [pc, #192]	; (8009754 <__ieee754_atan2+0x174>)
 8009692:	e7f6      	b.n	8009682 <__ieee754_atan2+0xa2>
 8009694:	4543      	cmp	r3, r8
 8009696:	d0e4      	beq.n	8009662 <__ieee754_atan2+0x82>
 8009698:	1a9b      	subs	r3, r3, r2
 800969a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800969e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80096a2:	da1e      	bge.n	80096e2 <__ieee754_atan2+0x102>
 80096a4:	2f00      	cmp	r7, #0
 80096a6:	da01      	bge.n	80096ac <__ieee754_atan2+0xcc>
 80096a8:	323c      	adds	r2, #60	; 0x3c
 80096aa:	db1e      	blt.n	80096ea <__ieee754_atan2+0x10a>
 80096ac:	4632      	mov	r2, r6
 80096ae:	463b      	mov	r3, r7
 80096b0:	f7f7 f87c 	bl	80007ac <__aeabi_ddiv>
 80096b4:	ec41 0b10 	vmov	d0, r0, r1
 80096b8:	f7ff fea2 	bl	8009400 <fabs>
 80096bc:	f7ff fd00 	bl	80090c0 <atan>
 80096c0:	ec51 0b10 	vmov	r0, r1, d0
 80096c4:	2c01      	cmp	r4, #1
 80096c6:	d013      	beq.n	80096f0 <__ieee754_atan2+0x110>
 80096c8:	2c02      	cmp	r4, #2
 80096ca:	d015      	beq.n	80096f8 <__ieee754_atan2+0x118>
 80096cc:	2c00      	cmp	r4, #0
 80096ce:	d0a8      	beq.n	8009622 <__ieee754_atan2+0x42>
 80096d0:	a317      	add	r3, pc, #92	; (adr r3, 8009730 <__ieee754_atan2+0x150>)
 80096d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d6:	f7f6 fd87 	bl	80001e8 <__aeabi_dsub>
 80096da:	a317      	add	r3, pc, #92	; (adr r3, 8009738 <__ieee754_atan2+0x158>)
 80096dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e0:	e014      	b.n	800970c <__ieee754_atan2+0x12c>
 80096e2:	a117      	add	r1, pc, #92	; (adr r1, 8009740 <__ieee754_atan2+0x160>)
 80096e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096e8:	e7ec      	b.n	80096c4 <__ieee754_atan2+0xe4>
 80096ea:	2000      	movs	r0, #0
 80096ec:	2100      	movs	r1, #0
 80096ee:	e7e9      	b.n	80096c4 <__ieee754_atan2+0xe4>
 80096f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096f4:	4619      	mov	r1, r3
 80096f6:	e794      	b.n	8009622 <__ieee754_atan2+0x42>
 80096f8:	a30d      	add	r3, pc, #52	; (adr r3, 8009730 <__ieee754_atan2+0x150>)
 80096fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fe:	f7f6 fd73 	bl	80001e8 <__aeabi_dsub>
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	a10c      	add	r1, pc, #48	; (adr r1, 8009738 <__ieee754_atan2+0x158>)
 8009708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800970c:	f7f6 fd6c 	bl	80001e8 <__aeabi_dsub>
 8009710:	e787      	b.n	8009622 <__ieee754_atan2+0x42>
 8009712:	a109      	add	r1, pc, #36	; (adr r1, 8009738 <__ieee754_atan2+0x158>)
 8009714:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009718:	e783      	b.n	8009622 <__ieee754_atan2+0x42>
 800971a:	a10b      	add	r1, pc, #44	; (adr r1, 8009748 <__ieee754_atan2+0x168>)
 800971c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009720:	e77f      	b.n	8009622 <__ieee754_atan2+0x42>
 8009722:	2000      	movs	r0, #0
 8009724:	2100      	movs	r1, #0
 8009726:	e77c      	b.n	8009622 <__ieee754_atan2+0x42>
 8009728:	a105      	add	r1, pc, #20	; (adr r1, 8009740 <__ieee754_atan2+0x160>)
 800972a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800972e:	e778      	b.n	8009622 <__ieee754_atan2+0x42>
 8009730:	33145c07 	.word	0x33145c07
 8009734:	3ca1a626 	.word	0x3ca1a626
 8009738:	54442d18 	.word	0x54442d18
 800973c:	400921fb 	.word	0x400921fb
 8009740:	54442d18 	.word	0x54442d18
 8009744:	3ff921fb 	.word	0x3ff921fb
 8009748:	54442d18 	.word	0x54442d18
 800974c:	3fe921fb 	.word	0x3fe921fb
 8009750:	08009c08 	.word	0x08009c08
 8009754:	08009c20 	.word	0x08009c20
 8009758:	54442d18 	.word	0x54442d18
 800975c:	c00921fb 	.word	0xc00921fb
 8009760:	54442d18 	.word	0x54442d18
 8009764:	bff921fb 	.word	0xbff921fb
 8009768:	7ff00000 	.word	0x7ff00000
 800976c:	00000000 	.word	0x00000000

08009770 <__ieee754_log>:
 8009770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009774:	ec51 0b10 	vmov	r0, r1, d0
 8009778:	ed2d 8b04 	vpush	{d8-d9}
 800977c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009780:	b083      	sub	sp, #12
 8009782:	460d      	mov	r5, r1
 8009784:	da29      	bge.n	80097da <__ieee754_log+0x6a>
 8009786:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800978a:	4303      	orrs	r3, r0
 800978c:	ee10 2a10 	vmov	r2, s0
 8009790:	d10c      	bne.n	80097ac <__ieee754_log+0x3c>
 8009792:	49cf      	ldr	r1, [pc, #828]	; (8009ad0 <__ieee754_log+0x360>)
 8009794:	2200      	movs	r2, #0
 8009796:	2300      	movs	r3, #0
 8009798:	2000      	movs	r0, #0
 800979a:	f7f7 f807 	bl	80007ac <__aeabi_ddiv>
 800979e:	ec41 0b10 	vmov	d0, r0, r1
 80097a2:	b003      	add	sp, #12
 80097a4:	ecbd 8b04 	vpop	{d8-d9}
 80097a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ac:	2900      	cmp	r1, #0
 80097ae:	da05      	bge.n	80097bc <__ieee754_log+0x4c>
 80097b0:	460b      	mov	r3, r1
 80097b2:	f7f6 fd19 	bl	80001e8 <__aeabi_dsub>
 80097b6:	2200      	movs	r2, #0
 80097b8:	2300      	movs	r3, #0
 80097ba:	e7ee      	b.n	800979a <__ieee754_log+0x2a>
 80097bc:	4bc5      	ldr	r3, [pc, #788]	; (8009ad4 <__ieee754_log+0x364>)
 80097be:	2200      	movs	r2, #0
 80097c0:	f7f6 feca 	bl	8000558 <__aeabi_dmul>
 80097c4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80097c8:	460d      	mov	r5, r1
 80097ca:	4ac3      	ldr	r2, [pc, #780]	; (8009ad8 <__ieee754_log+0x368>)
 80097cc:	4295      	cmp	r5, r2
 80097ce:	dd06      	ble.n	80097de <__ieee754_log+0x6e>
 80097d0:	4602      	mov	r2, r0
 80097d2:	460b      	mov	r3, r1
 80097d4:	f7f6 fd0a 	bl	80001ec <__adddf3>
 80097d8:	e7e1      	b.n	800979e <__ieee754_log+0x2e>
 80097da:	2300      	movs	r3, #0
 80097dc:	e7f5      	b.n	80097ca <__ieee754_log+0x5a>
 80097de:	152c      	asrs	r4, r5, #20
 80097e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80097e4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80097e8:	441c      	add	r4, r3
 80097ea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80097ee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80097f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097f6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80097fa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80097fe:	ea42 0105 	orr.w	r1, r2, r5
 8009802:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009806:	2200      	movs	r2, #0
 8009808:	4bb4      	ldr	r3, [pc, #720]	; (8009adc <__ieee754_log+0x36c>)
 800980a:	f7f6 fced 	bl	80001e8 <__aeabi_dsub>
 800980e:	1cab      	adds	r3, r5, #2
 8009810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009814:	2b02      	cmp	r3, #2
 8009816:	4682      	mov	sl, r0
 8009818:	468b      	mov	fp, r1
 800981a:	f04f 0200 	mov.w	r2, #0
 800981e:	dc53      	bgt.n	80098c8 <__ieee754_log+0x158>
 8009820:	2300      	movs	r3, #0
 8009822:	f7f7 f901 	bl	8000a28 <__aeabi_dcmpeq>
 8009826:	b1d0      	cbz	r0, 800985e <__ieee754_log+0xee>
 8009828:	2c00      	cmp	r4, #0
 800982a:	f000 8122 	beq.w	8009a72 <__ieee754_log+0x302>
 800982e:	4620      	mov	r0, r4
 8009830:	f7f6 fe28 	bl	8000484 <__aeabi_i2d>
 8009834:	a390      	add	r3, pc, #576	; (adr r3, 8009a78 <__ieee754_log+0x308>)
 8009836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983a:	4606      	mov	r6, r0
 800983c:	460f      	mov	r7, r1
 800983e:	f7f6 fe8b 	bl	8000558 <__aeabi_dmul>
 8009842:	a38f      	add	r3, pc, #572	; (adr r3, 8009a80 <__ieee754_log+0x310>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	4604      	mov	r4, r0
 800984a:	460d      	mov	r5, r1
 800984c:	4630      	mov	r0, r6
 800984e:	4639      	mov	r1, r7
 8009850:	f7f6 fe82 	bl	8000558 <__aeabi_dmul>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	4620      	mov	r0, r4
 800985a:	4629      	mov	r1, r5
 800985c:	e7ba      	b.n	80097d4 <__ieee754_log+0x64>
 800985e:	a38a      	add	r3, pc, #552	; (adr r3, 8009a88 <__ieee754_log+0x318>)
 8009860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009864:	4650      	mov	r0, sl
 8009866:	4659      	mov	r1, fp
 8009868:	f7f6 fe76 	bl	8000558 <__aeabi_dmul>
 800986c:	4602      	mov	r2, r0
 800986e:	460b      	mov	r3, r1
 8009870:	2000      	movs	r0, #0
 8009872:	499b      	ldr	r1, [pc, #620]	; (8009ae0 <__ieee754_log+0x370>)
 8009874:	f7f6 fcb8 	bl	80001e8 <__aeabi_dsub>
 8009878:	4652      	mov	r2, sl
 800987a:	4606      	mov	r6, r0
 800987c:	460f      	mov	r7, r1
 800987e:	465b      	mov	r3, fp
 8009880:	4650      	mov	r0, sl
 8009882:	4659      	mov	r1, fp
 8009884:	f7f6 fe68 	bl	8000558 <__aeabi_dmul>
 8009888:	4602      	mov	r2, r0
 800988a:	460b      	mov	r3, r1
 800988c:	4630      	mov	r0, r6
 800988e:	4639      	mov	r1, r7
 8009890:	f7f6 fe62 	bl	8000558 <__aeabi_dmul>
 8009894:	4606      	mov	r6, r0
 8009896:	460f      	mov	r7, r1
 8009898:	b914      	cbnz	r4, 80098a0 <__ieee754_log+0x130>
 800989a:	4632      	mov	r2, r6
 800989c:	463b      	mov	r3, r7
 800989e:	e0a2      	b.n	80099e6 <__ieee754_log+0x276>
 80098a0:	4620      	mov	r0, r4
 80098a2:	f7f6 fdef 	bl	8000484 <__aeabi_i2d>
 80098a6:	a374      	add	r3, pc, #464	; (adr r3, 8009a78 <__ieee754_log+0x308>)
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	4680      	mov	r8, r0
 80098ae:	4689      	mov	r9, r1
 80098b0:	f7f6 fe52 	bl	8000558 <__aeabi_dmul>
 80098b4:	a372      	add	r3, pc, #456	; (adr r3, 8009a80 <__ieee754_log+0x310>)
 80098b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ba:	4604      	mov	r4, r0
 80098bc:	460d      	mov	r5, r1
 80098be:	4640      	mov	r0, r8
 80098c0:	4649      	mov	r1, r9
 80098c2:	f7f6 fe49 	bl	8000558 <__aeabi_dmul>
 80098c6:	e0a7      	b.n	8009a18 <__ieee754_log+0x2a8>
 80098c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098cc:	f7f6 fc8e 	bl	80001ec <__adddf3>
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	4650      	mov	r0, sl
 80098d6:	4659      	mov	r1, fp
 80098d8:	f7f6 ff68 	bl	80007ac <__aeabi_ddiv>
 80098dc:	ec41 0b18 	vmov	d8, r0, r1
 80098e0:	4620      	mov	r0, r4
 80098e2:	f7f6 fdcf 	bl	8000484 <__aeabi_i2d>
 80098e6:	ec53 2b18 	vmov	r2, r3, d8
 80098ea:	ec41 0b19 	vmov	d9, r0, r1
 80098ee:	ec51 0b18 	vmov	r0, r1, d8
 80098f2:	f7f6 fe31 	bl	8000558 <__aeabi_dmul>
 80098f6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80098fa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80098fe:	9301      	str	r3, [sp, #4]
 8009900:	4602      	mov	r2, r0
 8009902:	460b      	mov	r3, r1
 8009904:	4680      	mov	r8, r0
 8009906:	4689      	mov	r9, r1
 8009908:	f7f6 fe26 	bl	8000558 <__aeabi_dmul>
 800990c:	a360      	add	r3, pc, #384	; (adr r3, 8009a90 <__ieee754_log+0x320>)
 800990e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009912:	4606      	mov	r6, r0
 8009914:	460f      	mov	r7, r1
 8009916:	f7f6 fe1f 	bl	8000558 <__aeabi_dmul>
 800991a:	a35f      	add	r3, pc, #380	; (adr r3, 8009a98 <__ieee754_log+0x328>)
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	f7f6 fc64 	bl	80001ec <__adddf3>
 8009924:	4632      	mov	r2, r6
 8009926:	463b      	mov	r3, r7
 8009928:	f7f6 fe16 	bl	8000558 <__aeabi_dmul>
 800992c:	a35c      	add	r3, pc, #368	; (adr r3, 8009aa0 <__ieee754_log+0x330>)
 800992e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009932:	f7f6 fc5b 	bl	80001ec <__adddf3>
 8009936:	4632      	mov	r2, r6
 8009938:	463b      	mov	r3, r7
 800993a:	f7f6 fe0d 	bl	8000558 <__aeabi_dmul>
 800993e:	a35a      	add	r3, pc, #360	; (adr r3, 8009aa8 <__ieee754_log+0x338>)
 8009940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009944:	f7f6 fc52 	bl	80001ec <__adddf3>
 8009948:	4642      	mov	r2, r8
 800994a:	464b      	mov	r3, r9
 800994c:	f7f6 fe04 	bl	8000558 <__aeabi_dmul>
 8009950:	a357      	add	r3, pc, #348	; (adr r3, 8009ab0 <__ieee754_log+0x340>)
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	4680      	mov	r8, r0
 8009958:	4689      	mov	r9, r1
 800995a:	4630      	mov	r0, r6
 800995c:	4639      	mov	r1, r7
 800995e:	f7f6 fdfb 	bl	8000558 <__aeabi_dmul>
 8009962:	a355      	add	r3, pc, #340	; (adr r3, 8009ab8 <__ieee754_log+0x348>)
 8009964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009968:	f7f6 fc40 	bl	80001ec <__adddf3>
 800996c:	4632      	mov	r2, r6
 800996e:	463b      	mov	r3, r7
 8009970:	f7f6 fdf2 	bl	8000558 <__aeabi_dmul>
 8009974:	a352      	add	r3, pc, #328	; (adr r3, 8009ac0 <__ieee754_log+0x350>)
 8009976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997a:	f7f6 fc37 	bl	80001ec <__adddf3>
 800997e:	4632      	mov	r2, r6
 8009980:	463b      	mov	r3, r7
 8009982:	f7f6 fde9 	bl	8000558 <__aeabi_dmul>
 8009986:	460b      	mov	r3, r1
 8009988:	4602      	mov	r2, r0
 800998a:	4649      	mov	r1, r9
 800998c:	4640      	mov	r0, r8
 800998e:	f7f6 fc2d 	bl	80001ec <__adddf3>
 8009992:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8009996:	9b01      	ldr	r3, [sp, #4]
 8009998:	3551      	adds	r5, #81	; 0x51
 800999a:	431d      	orrs	r5, r3
 800999c:	2d00      	cmp	r5, #0
 800999e:	4680      	mov	r8, r0
 80099a0:	4689      	mov	r9, r1
 80099a2:	dd48      	ble.n	8009a36 <__ieee754_log+0x2c6>
 80099a4:	4b4e      	ldr	r3, [pc, #312]	; (8009ae0 <__ieee754_log+0x370>)
 80099a6:	2200      	movs	r2, #0
 80099a8:	4650      	mov	r0, sl
 80099aa:	4659      	mov	r1, fp
 80099ac:	f7f6 fdd4 	bl	8000558 <__aeabi_dmul>
 80099b0:	4652      	mov	r2, sl
 80099b2:	465b      	mov	r3, fp
 80099b4:	f7f6 fdd0 	bl	8000558 <__aeabi_dmul>
 80099b8:	4602      	mov	r2, r0
 80099ba:	460b      	mov	r3, r1
 80099bc:	4606      	mov	r6, r0
 80099be:	460f      	mov	r7, r1
 80099c0:	4640      	mov	r0, r8
 80099c2:	4649      	mov	r1, r9
 80099c4:	f7f6 fc12 	bl	80001ec <__adddf3>
 80099c8:	ec53 2b18 	vmov	r2, r3, d8
 80099cc:	f7f6 fdc4 	bl	8000558 <__aeabi_dmul>
 80099d0:	4680      	mov	r8, r0
 80099d2:	4689      	mov	r9, r1
 80099d4:	b964      	cbnz	r4, 80099f0 <__ieee754_log+0x280>
 80099d6:	4602      	mov	r2, r0
 80099d8:	460b      	mov	r3, r1
 80099da:	4630      	mov	r0, r6
 80099dc:	4639      	mov	r1, r7
 80099de:	f7f6 fc03 	bl	80001e8 <__aeabi_dsub>
 80099e2:	4602      	mov	r2, r0
 80099e4:	460b      	mov	r3, r1
 80099e6:	4650      	mov	r0, sl
 80099e8:	4659      	mov	r1, fp
 80099ea:	f7f6 fbfd 	bl	80001e8 <__aeabi_dsub>
 80099ee:	e6d6      	b.n	800979e <__ieee754_log+0x2e>
 80099f0:	a321      	add	r3, pc, #132	; (adr r3, 8009a78 <__ieee754_log+0x308>)
 80099f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f6:	ec51 0b19 	vmov	r0, r1, d9
 80099fa:	f7f6 fdad 	bl	8000558 <__aeabi_dmul>
 80099fe:	a320      	add	r3, pc, #128	; (adr r3, 8009a80 <__ieee754_log+0x310>)
 8009a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a04:	4604      	mov	r4, r0
 8009a06:	460d      	mov	r5, r1
 8009a08:	ec51 0b19 	vmov	r0, r1, d9
 8009a0c:	f7f6 fda4 	bl	8000558 <__aeabi_dmul>
 8009a10:	4642      	mov	r2, r8
 8009a12:	464b      	mov	r3, r9
 8009a14:	f7f6 fbea 	bl	80001ec <__adddf3>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	4639      	mov	r1, r7
 8009a20:	f7f6 fbe2 	bl	80001e8 <__aeabi_dsub>
 8009a24:	4652      	mov	r2, sl
 8009a26:	465b      	mov	r3, fp
 8009a28:	f7f6 fbde 	bl	80001e8 <__aeabi_dsub>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	4620      	mov	r0, r4
 8009a32:	4629      	mov	r1, r5
 8009a34:	e7d9      	b.n	80099ea <__ieee754_log+0x27a>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4650      	mov	r0, sl
 8009a3c:	4659      	mov	r1, fp
 8009a3e:	f7f6 fbd3 	bl	80001e8 <__aeabi_dsub>
 8009a42:	ec53 2b18 	vmov	r2, r3, d8
 8009a46:	f7f6 fd87 	bl	8000558 <__aeabi_dmul>
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	460f      	mov	r7, r1
 8009a4e:	2c00      	cmp	r4, #0
 8009a50:	f43f af23 	beq.w	800989a <__ieee754_log+0x12a>
 8009a54:	a308      	add	r3, pc, #32	; (adr r3, 8009a78 <__ieee754_log+0x308>)
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	ec51 0b19 	vmov	r0, r1, d9
 8009a5e:	f7f6 fd7b 	bl	8000558 <__aeabi_dmul>
 8009a62:	a307      	add	r3, pc, #28	; (adr r3, 8009a80 <__ieee754_log+0x310>)
 8009a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a68:	4604      	mov	r4, r0
 8009a6a:	460d      	mov	r5, r1
 8009a6c:	ec51 0b19 	vmov	r0, r1, d9
 8009a70:	e727      	b.n	80098c2 <__ieee754_log+0x152>
 8009a72:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8009ac8 <__ieee754_log+0x358>
 8009a76:	e694      	b.n	80097a2 <__ieee754_log+0x32>
 8009a78:	fee00000 	.word	0xfee00000
 8009a7c:	3fe62e42 	.word	0x3fe62e42
 8009a80:	35793c76 	.word	0x35793c76
 8009a84:	3dea39ef 	.word	0x3dea39ef
 8009a88:	55555555 	.word	0x55555555
 8009a8c:	3fd55555 	.word	0x3fd55555
 8009a90:	df3e5244 	.word	0xdf3e5244
 8009a94:	3fc2f112 	.word	0x3fc2f112
 8009a98:	96cb03de 	.word	0x96cb03de
 8009a9c:	3fc74664 	.word	0x3fc74664
 8009aa0:	94229359 	.word	0x94229359
 8009aa4:	3fd24924 	.word	0x3fd24924
 8009aa8:	55555593 	.word	0x55555593
 8009aac:	3fe55555 	.word	0x3fe55555
 8009ab0:	d078c69f 	.word	0xd078c69f
 8009ab4:	3fc39a09 	.word	0x3fc39a09
 8009ab8:	1d8e78af 	.word	0x1d8e78af
 8009abc:	3fcc71c5 	.word	0x3fcc71c5
 8009ac0:	9997fa04 	.word	0x9997fa04
 8009ac4:	3fd99999 	.word	0x3fd99999
	...
 8009ad0:	c3500000 	.word	0xc3500000
 8009ad4:	43500000 	.word	0x43500000
 8009ad8:	7fefffff 	.word	0x7fefffff
 8009adc:	3ff00000 	.word	0x3ff00000
 8009ae0:	3fe00000 	.word	0x3fe00000

08009ae4 <_init>:
 8009ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae6:	bf00      	nop
 8009ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aea:	bc08      	pop	{r3}
 8009aec:	469e      	mov	lr, r3
 8009aee:	4770      	bx	lr

08009af0 <_fini>:
 8009af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af2:	bf00      	nop
 8009af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009af6:	bc08      	pop	{r3}
 8009af8:	469e      	mov	lr, r3
 8009afa:	4770      	bx	lr
