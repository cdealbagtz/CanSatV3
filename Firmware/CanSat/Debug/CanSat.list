
CanSat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005384  08005384  00006384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005448  08005448  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005448  08005448  00006448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005450  08005450  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005450  08005450  00006450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005454  08005454  00006454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005458  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000421c  20000010  08005468  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000422c  08005468  0000722c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115b7  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003199  00000000  00000000  000185f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  0001b790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de6  00000000  00000000  0001c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017eef  00000000  00000000  0001d79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015196  00000000  00000000  0003568d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096167  00000000  00000000  0004a823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e098a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049bc  00000000  00000000  000e09d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e538c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800536c 	.word	0x0800536c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800536c 	.word	0x0800536c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <task_init_1ms>:

/**
  * @fn  	task_init_1ms
  * @brief  Inicializaciones para tarea de 1 milisegundo
  */
void task_init_1ms(void){
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <task_1ms>:

/**
  * @fn  	task_1ms
  * @brief  Ejecucion de tareas de 1 milisegundo
  */
void task_1ms(void){
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0
	NRF24_StateMachine();
 80004e2:	f000 fdb1 	bl	8001048 <NRF24_StateMachine>
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}

080004ea <task_init_10ms>:

/**
  * @fn  	task_init_10ms
  * @brief  Inicializaciones para tarea de 10 milisegundos
  */
void task_init_10ms(void){
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <task_10ms>:

/**
  * @fn  	task_10ms
  * @brief  Ejecucion de tareas de 10 milisegundos
  */
void task_10ms(void){
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <task_init_100ms>:

/**
  * @fn  	task_init_100ms
  * @brief  Inicializaciones para tarea de 100 milisegundos
  */
void task_init_100ms(void){
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <task_100ms>:

/**
  * @fn  	task_100ms
  * @brief  Ejecucion de tareas de 100 milisegundos
  */
void task_100ms(void){
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <task_init_1000ms>:

/**
  * @fn  	task_init_1000ms
  * @brief  Inicializaciones para tarea de 1000 milisegundos
  */
void task_init_1000ms(void){
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0

}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <task_1000ms>:

/**
  * @fn  	task_1000ms
  * @brief  Ejecucion de tareas de 1000 milisegundos
  */
void task_1000ms(void){
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
	...

08000540 <NRF24_write>:
uint8_t NRF24_mode;

uint8_t TxBuffer[32];
uint8_t RxBuffer[32];

void NRF24_write(uint8_t Adr, uint8_t data){
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	460a      	mov	r2, r1
 800054a:	71fb      	strb	r3, [r7, #7]
 800054c:	4613      	mov	r3, r2
 800054e:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	f043 0320 	orr.w	r3, r3, #32
 8000556:	b2db      	uxtb	r3, r3
 8000558:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000560:	480c      	ldr	r0, [pc, #48]	@ (8000594 <NRF24_write+0x54>)
 8000562:	f001 ff75 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000566:	1dfb      	adds	r3, r7, #7
 8000568:	2201      	movs	r2, #1
 800056a:	4619      	mov	r1, r3
 800056c:	480a      	ldr	r0, [pc, #40]	@ (8000598 <NRF24_write+0x58>)
 800056e:	f002 fcc9 	bl	8002f04 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &data, 1);
 8000572:	1dbb      	adds	r3, r7, #6
 8000574:	2201      	movs	r2, #1
 8000576:	4619      	mov	r1, r3
 8000578:	4807      	ldr	r0, [pc, #28]	@ (8000598 <NRF24_write+0x58>)
 800057a:	f002 fcc3 	bl	8002f04 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000584:	4803      	ldr	r0, [pc, #12]	@ (8000594 <NRF24_write+0x54>)
 8000586:	f001 ff63 	bl	8002450 <HAL_GPIO_WritePin>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40020400 	.word	0x40020400
 8000598:	20000374 	.word	0x20000374

0800059c <NRF24_Addr_write>:

void NRF24_Addr_write(uint8_t Adr,uint8_t *ADDRESS){
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	6039      	str	r1, [r7, #0]
 80005a6:	71fb      	strb	r3, [r7, #7]
	Adr |= W_REGISTER;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	f043 0320 	orr.w	r3, r3, #32
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[5];
	buffer[0] = ADDRESS[4];
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	723b      	strb	r3, [r7, #8]
	buffer[1] = ADDRESS[3];
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	78db      	ldrb	r3, [r3, #3]
 80005bc:	727b      	strb	r3, [r7, #9]
	buffer[2] = ADDRESS[2];
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	789b      	ldrb	r3, [r3, #2]
 80005c2:	72bb      	strb	r3, [r7, #10]
	buffer[3] = ADDRESS[1];
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	785b      	ldrb	r3, [r3, #1]
 80005c8:	72fb      	strb	r3, [r7, #11]
	buffer[4] = ADDRESS[0];
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	733b      	strb	r3, [r7, #12]

	NRF24_select();
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005d6:	4812      	ldr	r0, [pc, #72]	@ (8000620 <NRF24_Addr_write+0x84>)
 80005d8:	f001 ff3a 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 80005dc:	1dfb      	adds	r3, r7, #7
 80005de:	2201      	movs	r2, #1
 80005e0:	4619      	mov	r1, r3
 80005e2:	4810      	ldr	r0, [pc, #64]	@ (8000624 <NRF24_Addr_write+0x88>)
 80005e4:	f002 fc8e 	bl	8002f04 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 80005e8:	2300      	movs	r3, #0
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	e00b      	b.n	8000606 <NRF24_Addr_write+0x6a>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &buffer[n], 1);
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	f107 0208 	add.w	r2, r7, #8
 80005f4:	4413      	add	r3, r2
 80005f6:	2201      	movs	r2, #1
 80005f8:	4619      	mov	r1, r3
 80005fa:	480a      	ldr	r0, [pc, #40]	@ (8000624 <NRF24_Addr_write+0x88>)
 80005fc:	f002 fc82 	bl	8002f04 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	3301      	adds	r3, #1
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2b04      	cmp	r3, #4
 800060a:	d9f0      	bls.n	80005ee <NRF24_Addr_write+0x52>
	}

	NRF24_unselect();
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000612:	4803      	ldr	r0, [pc, #12]	@ (8000620 <NRF24_Addr_write+0x84>)
 8000614:	f001 ff1c 	bl	8002450 <HAL_GPIO_WritePin>

}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40020400 	.word	0x40020400
 8000624:	20000374 	.word	0x20000374

08000628 <NRF24_read>:

uint8_t NRF24_read(uint8_t Adr){
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	uint8_t Replay;
	NRF24_select();
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000638:	480d      	ldr	r0, [pc, #52]	@ (8000670 <NRF24_read+0x48>)
 800063a:	f001 ff09 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	2201      	movs	r2, #1
 8000642:	4619      	mov	r1, r3
 8000644:	480b      	ldr	r0, [pc, #44]	@ (8000674 <NRF24_read+0x4c>)
 8000646:	f002 fc5d 	bl	8002f04 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(SPI_NRF24, &Replay, 1);
 800064a:	f107 030f 	add.w	r3, r7, #15
 800064e:	2201      	movs	r2, #1
 8000650:	4619      	mov	r1, r3
 8000652:	4808      	ldr	r0, [pc, #32]	@ (8000674 <NRF24_read+0x4c>)
 8000654:	f002 fd08 	bl	8003068 <HAL_SPI_Receive_DMA>
	NRF24_unselect();
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800065e:	4804      	ldr	r0, [pc, #16]	@ (8000670 <NRF24_read+0x48>)
 8000660:	f001 fef6 	bl	8002450 <HAL_GPIO_WritePin>
	return Replay;
 8000664:	7bfb      	ldrb	r3, [r7, #15]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40020400 	.word	0x40020400
 8000674:	20000374 	.word	0x20000374

08000678 <NRF24_Addr_read>:

void NRF24_Addr_read(uint8_t Adr){
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[5];
	NRF24_select();
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000688:	4836      	ldr	r0, [pc, #216]	@ (8000764 <NRF24_Addr_read+0xec>)
 800068a:	f001 fee1 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	2201      	movs	r2, #1
 8000692:	4619      	mov	r1, r3
 8000694:	4834      	ldr	r0, [pc, #208]	@ (8000768 <NRF24_Addr_read+0xf0>)
 8000696:	f002 fc35 	bl	8002f04 <HAL_SPI_Transmit_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 800069a:	2300      	movs	r3, #0
 800069c:	73fb      	strb	r3, [r7, #15]
 800069e:	e00b      	b.n	80006b8 <NRF24_Addr_read+0x40>
		HAL_SPI_Receive_DMA(SPI_NRF24, &Buffer[i], 1);
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	f107 0208 	add.w	r2, r7, #8
 80006a6:	4413      	add	r3, r2
 80006a8:	2201      	movs	r2, #1
 80006aa:	4619      	mov	r1, r3
 80006ac:	482e      	ldr	r0, [pc, #184]	@ (8000768 <NRF24_Addr_read+0xf0>)
 80006ae:	f002 fcdb 	bl	8003068 <HAL_SPI_Receive_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	3301      	adds	r3, #1
 80006b6:	73fb      	strb	r3, [r7, #15]
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	d9f0      	bls.n	80006a0 <NRF24_Addr_read+0x28>
	}
	NRF24_unselect();
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006c4:	4827      	ldr	r0, [pc, #156]	@ (8000764 <NRF24_Addr_read+0xec>)
 80006c6:	f001 fec3 	bl	8002450 <HAL_GPIO_WritePin>
	switch (Adr) {
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b10      	cmp	r3, #16
 80006ce:	d030      	beq.n	8000732 <NRF24_Addr_read+0xba>
 80006d0:	2b10      	cmp	r3, #16
 80006d2:	dc43      	bgt.n	800075c <NRF24_Addr_read+0xe4>
 80006d4:	2b0a      	cmp	r3, #10
 80006d6:	d002      	beq.n	80006de <NRF24_Addr_read+0x66>
 80006d8:	2b0b      	cmp	r3, #11
 80006da:	d015      	beq.n	8000708 <NRF24_Addr_read+0x90>
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
			break;
	}
}
 80006dc:	e03e      	b.n	800075c <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[4]=Buffer[0];
 80006de:	7a3a      	ldrb	r2, [r7, #8]
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <NRF24_Addr_read+0xf4>)
 80006e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[3]=Buffer[1];
 80006e6:	7a7a      	ldrb	r2, [r7, #9]
 80006e8:	4b20      	ldr	r3, [pc, #128]	@ (800076c <NRF24_Addr_read+0xf4>)
 80006ea:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[2]=Buffer[2];
 80006ee:	7aba      	ldrb	r2, [r7, #10]
 80006f0:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <NRF24_Addr_read+0xf4>)
 80006f2:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[1]=Buffer[3];
 80006f6:	7afa      	ldrb	r2, [r7, #11]
 80006f8:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <NRF24_Addr_read+0xf4>)
 80006fa:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[0]=Buffer[4];
 80006fe:	7b3a      	ldrb	r2, [r7, #12]
 8000700:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <NRF24_Addr_read+0xf4>)
 8000702:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
			break;
 8000706:	e029      	b.n	800075c <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[4]=Buffer[0];
 8000708:	7a3a      	ldrb	r2, [r7, #8]
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <NRF24_Addr_read+0xf4>)
 800070c:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[3]=Buffer[1];
 8000710:	7a7a      	ldrb	r2, [r7, #9]
 8000712:	4b16      	ldr	r3, [pc, #88]	@ (800076c <NRF24_Addr_read+0xf4>)
 8000714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[2]=Buffer[2];
 8000718:	7aba      	ldrb	r2, [r7, #10]
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <NRF24_Addr_read+0xf4>)
 800071c:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[1]=Buffer[3];
 8000720:	7afa      	ldrb	r2, [r7, #11]
 8000722:	4b12      	ldr	r3, [pc, #72]	@ (800076c <NRF24_Addr_read+0xf4>)
 8000724:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[0]=Buffer[4];
 8000728:	7b3a      	ldrb	r2, [r7, #12]
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <NRF24_Addr_read+0xf4>)
 800072c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			break;
 8000730:	e014      	b.n	800075c <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.TX_ADDR[4]=Buffer[0];
 8000732:	7a3a      	ldrb	r2, [r7, #8]
 8000734:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <NRF24_Addr_read+0xf4>)
 8000736:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
			NRF24_Configurations_Struct.Actual.TX_ADDR[3]=Buffer[1];
 800073a:	7a7a      	ldrb	r2, [r7, #9]
 800073c:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <NRF24_Addr_read+0xf4>)
 800073e:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
 8000742:	7aba      	ldrb	r2, [r7, #10]
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <NRF24_Addr_read+0xf4>)
 8000746:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
 800074a:	7afa      	ldrb	r2, [r7, #11]
 800074c:	4b07      	ldr	r3, [pc, #28]	@ (800076c <NRF24_Addr_read+0xf4>)
 800074e:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
 8000752:	7b3a      	ldrb	r2, [r7, #12]
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <NRF24_Addr_read+0xf4>)
 8000756:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
			break;
 800075a:	bf00      	nop
}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40020400 	.word	0x40020400
 8000768:	20000374 	.word	0x20000374
 800076c:	2000002c 	.word	0x2000002c

08000770 <NRF24_FlushTxFIFO>:

void NRF24_FlushTxFIFO(void){
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_TX;
 8000776:	23e1      	movs	r3, #225	@ 0xe1
 8000778:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000780:	4809      	ldr	r0, [pc, #36]	@ (80007a8 <NRF24_FlushTxFIFO+0x38>)
 8000782:	f001 fe65 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	2201      	movs	r2, #1
 800078a:	4619      	mov	r1, r3
 800078c:	4807      	ldr	r0, [pc, #28]	@ (80007ac <NRF24_FlushTxFIFO+0x3c>)
 800078e:	f002 fbb9 	bl	8002f04 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000798:	4803      	ldr	r0, [pc, #12]	@ (80007a8 <NRF24_FlushTxFIFO+0x38>)
 800079a:	f001 fe59 	bl	8002450 <HAL_GPIO_WritePin>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40020400 	.word	0x40020400
 80007ac:	20000374 	.word	0x20000374

080007b0 <NRF24_FlushRxFIFO>:

void NRF24_FlushRxFIFO(void){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_RX;
 80007b6:	23e2      	movs	r3, #226	@ 0xe2
 80007b8:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007c0:	4809      	ldr	r0, [pc, #36]	@ (80007e8 <NRF24_FlushRxFIFO+0x38>)
 80007c2:	f001 fe45 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	2201      	movs	r2, #1
 80007ca:	4619      	mov	r1, r3
 80007cc:	4807      	ldr	r0, [pc, #28]	@ (80007ec <NRF24_FlushRxFIFO+0x3c>)
 80007ce:	f002 fb99 	bl	8002f04 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007d8:	4803      	ldr	r0, [pc, #12]	@ (80007e8 <NRF24_FlushRxFIFO+0x38>)
 80007da:	f001 fe39 	bl	8002450 <HAL_GPIO_WritePin>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40020400 	.word	0x40020400
 80007ec:	20000374 	.word	0x20000374

080007f0 <NRF24_PowerUp>:

void NRF24_PowerUp(void){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
	uint8_t Adr = 0x00;
 80007f6:	2300      	movs	r3, #0
 80007f8:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer= NRF24_read(Adr);
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff13 	bl	8000628 <NRF24_read>
 8000802:	4603      	mov	r3, r0
 8000804:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	f043 0320 	orr.w	r3, r3, #32
 800080c:	71fb      	strb	r3, [r7, #7]
	Buffer |= 0x02;
 800080e:	79bb      	ldrb	r3, [r7, #6]
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	71bb      	strb	r3, [r7, #6]
	NRF24_write(Adr, Buffer);
 8000816:	79ba      	ldrb	r2, [r7, #6]
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fe8f 	bl	8000540 <NRF24_write>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <NRF24_ActualConfiguration>:

void NRF24_ActualConfiguration(void){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	NRF24_Configurations_Struct.Actual.CONFIG 		= NRF24_read(CONFIG);
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff fef9 	bl	8000628 <NRF24_read>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	4b5f      	ldr	r3, [pc, #380]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800083c:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	NRF24_Configurations_Struct.Actual.EN_AA  		= NRF24_read(EN_AA);
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff fef1 	bl	8000628 <NRF24_read>
 8000846:	4603      	mov	r3, r0
 8000848:	461a      	mov	r2, r3
 800084a:	4b5b      	ldr	r3, [pc, #364]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800084c:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	NRF24_Configurations_Struct.Actual.EN_RXADDR  	= NRF24_read(EN_RXADDR);
 8000850:	2002      	movs	r0, #2
 8000852:	f7ff fee9 	bl	8000628 <NRF24_read>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	4b57      	ldr	r3, [pc, #348]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800085c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	NRF24_Configurations_Struct.Actual.SETUP_AW  	= NRF24_read(SETUP_AW);
 8000860:	2003      	movs	r0, #3
 8000862:	f7ff fee1 	bl	8000628 <NRF24_read>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	4b53      	ldr	r3, [pc, #332]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800086c:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	NRF24_Configurations_Struct.Actual.SETUP_RETR 	= NRF24_read(SETUP_RETR);
 8000870:	2004      	movs	r0, #4
 8000872:	f7ff fed9 	bl	8000628 <NRF24_read>
 8000876:	4603      	mov	r3, r0
 8000878:	461a      	mov	r2, r3
 800087a:	4b4f      	ldr	r3, [pc, #316]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800087c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	NRF24_Configurations_Struct.Actual.RF_CH  		= NRF24_read(RF_CH);
 8000880:	2005      	movs	r0, #5
 8000882:	f7ff fed1 	bl	8000628 <NRF24_read>
 8000886:	4603      	mov	r3, r0
 8000888:	461a      	mov	r2, r3
 800088a:	4b4b      	ldr	r3, [pc, #300]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800088c:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
	NRF24_Configurations_Struct.Actual.RF_SETUP  	= NRF24_read(RF_SETUP);
 8000890:	2006      	movs	r0, #6
 8000892:	f7ff fec9 	bl	8000628 <NRF24_read>
 8000896:	4603      	mov	r3, r0
 8000898:	461a      	mov	r2, r3
 800089a:	4b47      	ldr	r3, [pc, #284]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800089c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	NRF24_Configurations_Struct.Actual.STATUS  		= NRF24_read(STATUS);
 80008a0:	2007      	movs	r0, #7
 80008a2:	f7ff fec1 	bl	8000628 <NRF24_read>
 80008a6:	4603      	mov	r3, r0
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b43      	ldr	r3, [pc, #268]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 80008ac:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	NRF24_Configurations_Struct.Actual.OBSERVE  	= NRF24_read(OBSERVE);
 80008b0:	2008      	movs	r0, #8
 80008b2:	f7ff feb9 	bl	8000628 <NRF24_read>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b3f      	ldr	r3, [pc, #252]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 80008bc:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	NRF24_Configurations_Struct.Actual.CD  			= NRF24_read(CD);
 80008c0:	2009      	movs	r0, #9
 80008c2:	f7ff feb1 	bl	8000628 <NRF24_read>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b3b      	ldr	r3, [pc, #236]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 80008cc:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
	NRF24_Addr_read(RX_ADDR_P0);
 80008d0:	200a      	movs	r0, #10
 80008d2:	f7ff fed1 	bl	8000678 <NRF24_Addr_read>
	NRF24_Addr_read(RX_ADDR_P1);
 80008d6:	200b      	movs	r0, #11
 80008d8:	f7ff fece 	bl	8000678 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_ADDR_P2  	= NRF24_read(RX_ADDR_P2);
 80008dc:	200c      	movs	r0, #12
 80008de:	f7ff fea3 	bl	8000628 <NRF24_read>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b34      	ldr	r3, [pc, #208]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 80008e8:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	NRF24_Configurations_Struct.Actual.RX_ADDR_P3 	= NRF24_read(RX_ADDR_P3);
 80008ec:	200d      	movs	r0, #13
 80008ee:	f7ff fe9b 	bl	8000628 <NRF24_read>
 80008f2:	4603      	mov	r3, r0
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b30      	ldr	r3, [pc, #192]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 80008f8:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	NRF24_Configurations_Struct.Actual.RX_ADDR_P4  	= NRF24_read(RX_ADDR_P4);
 80008fc:	200e      	movs	r0, #14
 80008fe:	f7ff fe93 	bl	8000628 <NRF24_read>
 8000902:	4603      	mov	r3, r0
 8000904:	461a      	mov	r2, r3
 8000906:	4b2c      	ldr	r3, [pc, #176]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 8000908:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	NRF24_Configurations_Struct.Actual.RX_ADDR_P5  	= NRF24_read(RX_ADDR_P5);
 800090c:	200f      	movs	r0, #15
 800090e:	f7ff fe8b 	bl	8000628 <NRF24_read>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	4b28      	ldr	r3, [pc, #160]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 8000918:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	NRF24_Addr_read(TX_ADDR);
 800091c:	2010      	movs	r0, #16
 800091e:	f7ff feab 	bl	8000678 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_PW_P0  	= NRF24_read(RX_PW_P0);
 8000922:	2011      	movs	r0, #17
 8000924:	f7ff fe80 	bl	8000628 <NRF24_read>
 8000928:	4603      	mov	r3, r0
 800092a:	461a      	mov	r2, r3
 800092c:	4b22      	ldr	r3, [pc, #136]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800092e:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
	NRF24_Configurations_Struct.Actual.RX_PW_P1  	= NRF24_read(RX_PW_P1);
 8000932:	2012      	movs	r0, #18
 8000934:	f7ff fe78 	bl	8000628 <NRF24_read>
 8000938:	4603      	mov	r3, r0
 800093a:	461a      	mov	r2, r3
 800093c:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800093e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	NRF24_Configurations_Struct.Actual.RX_PW_P2  	= NRF24_read(RX_PW_P2);
 8000942:	2013      	movs	r0, #19
 8000944:	f7ff fe70 	bl	8000628 <NRF24_read>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800094e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
	NRF24_Configurations_Struct.Actual.RX_PW_P3  	= NRF24_read(RX_PW_P3);
 8000952:	2014      	movs	r0, #20
 8000954:	f7ff fe68 	bl	8000628 <NRF24_read>
 8000958:	4603      	mov	r3, r0
 800095a:	461a      	mov	r2, r3
 800095c:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800095e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	NRF24_Configurations_Struct.Actual.RX_PW_P4  	= NRF24_read(RX_PW_P4);
 8000962:	2015      	movs	r0, #21
 8000964:	f7ff fe60 	bl	8000628 <NRF24_read>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800096e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	NRF24_Configurations_Struct.Actual.RX_PW_P5  	= NRF24_read(RX_PW_P5);
 8000972:	2016      	movs	r0, #22
 8000974:	f7ff fe58 	bl	8000628 <NRF24_read>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800097e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	NRF24_Configurations_Struct.Actual.FIFO_STATUS  = NRF24_read(FIFO_STATUS);
 8000982:	2017      	movs	r0, #23
 8000984:	f7ff fe50 	bl	8000628 <NRF24_read>
 8000988:	4603      	mov	r3, r0
 800098a:	461a      	mov	r2, r3
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800098e:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
	NRF24_Configurations_Struct.Actual.DYNPD  		= NRF24_read(DYNPD);
 8000992:	201c      	movs	r0, #28
 8000994:	f7ff fe48 	bl	8000628 <NRF24_read>
 8000998:	4603      	mov	r3, r0
 800099a:	461a      	mov	r2, r3
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800099e:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
	NRF24_Configurations_Struct.Actual.FEATURE  	= NRF24_read(FEATURE);
 80009a2:	201d      	movs	r0, #29
 80009a4:	f7ff fe40 	bl	8000628 <NRF24_read>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b02      	ldr	r3, [pc, #8]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 80009ae:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000002c 	.word	0x2000002c

080009bc <NRF24_config>:

void NRF24_config(NRF24_Address_Configurations_t Configuration_struct){
 80009bc:	b084      	sub	sp, #16
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	f107 0c08 	add.w	ip, r7, #8
 80009c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	NRF24_write(CONFIG,	Configuration_struct.CONFIG);
 80009ca:	7a3b      	ldrb	r3, [r7, #8]
 80009cc:	4619      	mov	r1, r3
 80009ce:	2000      	movs	r0, #0
 80009d0:	f7ff fdb6 	bl	8000540 <NRF24_write>
	NRF24_write(EN_AA, Configuration_struct.EN_AA);
 80009d4:	7a7b      	ldrb	r3, [r7, #9]
 80009d6:	4619      	mov	r1, r3
 80009d8:	2001      	movs	r0, #1
 80009da:	f7ff fdb1 	bl	8000540 <NRF24_write>
	NRF24_write(EN_RXADDR,Configuration_struct.EN_RXADDR);
 80009de:	7abb      	ldrb	r3, [r7, #10]
 80009e0:	4619      	mov	r1, r3
 80009e2:	2002      	movs	r0, #2
 80009e4:	f7ff fdac 	bl	8000540 <NRF24_write>
	NRF24_write(SETUP_AW,Configuration_struct.SETUP_AW);
 80009e8:	7afb      	ldrb	r3, [r7, #11]
 80009ea:	4619      	mov	r1, r3
 80009ec:	2003      	movs	r0, #3
 80009ee:	f7ff fda7 	bl	8000540 <NRF24_write>
	NRF24_write(SETUP_RETR,Configuration_struct.SETUP_RETR);
 80009f2:	7b3b      	ldrb	r3, [r7, #12]
 80009f4:	4619      	mov	r1, r3
 80009f6:	2004      	movs	r0, #4
 80009f8:	f7ff fda2 	bl	8000540 <NRF24_write>
	NRF24_write(RF_CH,Configuration_struct.RF_CH);
 80009fc:	7b7b      	ldrb	r3, [r7, #13]
 80009fe:	4619      	mov	r1, r3
 8000a00:	2005      	movs	r0, #5
 8000a02:	f7ff fd9d 	bl	8000540 <NRF24_write>
	NRF24_write(RF_SETUP,Configuration_struct.RF_SETUP);
 8000a06:	7bbb      	ldrb	r3, [r7, #14]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	2006      	movs	r0, #6
 8000a0c:	f7ff fd98 	bl	8000540 <NRF24_write>
	NRF24_write(STATUS,Configuration_struct.STATUS);
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	4619      	mov	r1, r3
 8000a14:	2007      	movs	r0, #7
 8000a16:	f7ff fd93 	bl	8000540 <NRF24_write>
	NRF24_write(OBSERVE,Configuration_struct.OBSERVE);
 8000a1a:	7c3b      	ldrb	r3, [r7, #16]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	2008      	movs	r0, #8
 8000a20:	f7ff fd8e 	bl	8000540 <NRF24_write>
	NRF24_write(CD,Configuration_struct.CD);
 8000a24:	7c7b      	ldrb	r3, [r7, #17]
 8000a26:	4619      	mov	r1, r3
 8000a28:	2009      	movs	r0, #9
 8000a2a:	f7ff fd89 	bl	8000540 <NRF24_write>
	NRF24_Addr_write(RX_ADDR_P0, Configuration_struct.RX_ADDR_P0);
 8000a2e:	f107 0312 	add.w	r3, r7, #18
 8000a32:	4619      	mov	r1, r3
 8000a34:	200a      	movs	r0, #10
 8000a36:	f7ff fdb1 	bl	800059c <NRF24_Addr_write>
	NRF24_Addr_write(RX_ADDR_P1, Configuration_struct.RX_ADDR_P1);
 8000a3a:	f107 0317 	add.w	r3, r7, #23
 8000a3e:	4619      	mov	r1, r3
 8000a40:	200b      	movs	r0, #11
 8000a42:	f7ff fdab 	bl	800059c <NRF24_Addr_write>
	NRF24_write(RX_ADDR_P2,Configuration_struct.RX_ADDR_P2);
 8000a46:	7f3b      	ldrb	r3, [r7, #28]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	200c      	movs	r0, #12
 8000a4c:	f7ff fd78 	bl	8000540 <NRF24_write>
	NRF24_write(RX_ADDR_P3,Configuration_struct.RX_ADDR_P3);
 8000a50:	7f7b      	ldrb	r3, [r7, #29]
 8000a52:	4619      	mov	r1, r3
 8000a54:	200d      	movs	r0, #13
 8000a56:	f7ff fd73 	bl	8000540 <NRF24_write>
	NRF24_write(RX_ADDR_P4,Configuration_struct.RX_ADDR_P4);
 8000a5a:	7fbb      	ldrb	r3, [r7, #30]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	200e      	movs	r0, #14
 8000a60:	f7ff fd6e 	bl	8000540 <NRF24_write>
	NRF24_write(RX_ADDR_P5,Configuration_struct.RX_ADDR_P5);
 8000a64:	7ffb      	ldrb	r3, [r7, #31]
 8000a66:	4619      	mov	r1, r3
 8000a68:	200f      	movs	r0, #15
 8000a6a:	f7ff fd69 	bl	8000540 <NRF24_write>
	NRF24_Addr_write(TX_ADDR, Configuration_struct.TX_ADDR);
 8000a6e:	f107 0320 	add.w	r3, r7, #32
 8000a72:	4619      	mov	r1, r3
 8000a74:	2010      	movs	r0, #16
 8000a76:	f7ff fd91 	bl	800059c <NRF24_Addr_write>
	NRF24_write(RX_PW_P0,Configuration_struct.RX_PW_P0);
 8000a7a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000a7e:	4619      	mov	r1, r3
 8000a80:	2011      	movs	r0, #17
 8000a82:	f7ff fd5d 	bl	8000540 <NRF24_write>
	NRF24_write(RX_PW_P1,Configuration_struct.RX_PW_P1);
 8000a86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	2012      	movs	r0, #18
 8000a8e:	f7ff fd57 	bl	8000540 <NRF24_write>
	NRF24_write(RX_PW_P2,Configuration_struct.RX_PW_P2);
 8000a92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a96:	4619      	mov	r1, r3
 8000a98:	2013      	movs	r0, #19
 8000a9a:	f7ff fd51 	bl	8000540 <NRF24_write>
	NRF24_write(RX_PW_P3,Configuration_struct.RX_PW_P3);
 8000a9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	2014      	movs	r0, #20
 8000aa6:	f7ff fd4b 	bl	8000540 <NRF24_write>
	NRF24_write(RX_PW_P4,Configuration_struct.RX_PW_P4);
 8000aaa:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000aae:	4619      	mov	r1, r3
 8000ab0:	2015      	movs	r0, #21
 8000ab2:	f7ff fd45 	bl	8000540 <NRF24_write>
	NRF24_write(RX_PW_P5,Configuration_struct.RX_PW_P5);
 8000ab6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000aba:	4619      	mov	r1, r3
 8000abc:	2016      	movs	r0, #22
 8000abe:	f7ff fd3f 	bl	8000540 <NRF24_write>
	NRF24_write(FIFO_STATUS,Configuration_struct.FIFO_STATUS);
 8000ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	2017      	movs	r0, #23
 8000aca:	f7ff fd39 	bl	8000540 <NRF24_write>
	NRF24_write(DYNPD,Configuration_struct.DYNPD);
 8000ace:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	201c      	movs	r0, #28
 8000ad6:	f7ff fd33 	bl	8000540 <NRF24_write>
	NRF24_write(FEATURE,Configuration_struct.FEATURE);
 8000ada:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000ade:	4619      	mov	r1, r3
 8000ae0:	201d      	movs	r0, #29
 8000ae2:	f7ff fd2d 	bl	8000540 <NRF24_write>
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aee:	b004      	add	sp, #16
 8000af0:	4770      	bx	lr
	...

08000af4 <NRF24_DefaultConfiguration>:

void NRF24_DefaultConfiguration(void){
 8000af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af06      	add	r7, sp, #24
	NRF24_FlushTxFIFO();
 8000afa:	f7ff fe39 	bl	8000770 <NRF24_FlushTxFIFO>
	NRF24_FlushRxFIFO();
 8000afe:	f7ff fe57 	bl	80007b0 <NRF24_FlushRxFIFO>
	NRF24_Configurations_Struct.Default.CONFIG 			= 0x78;
 8000b02:	4b46      	ldr	r3, [pc, #280]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b04:	2278      	movs	r2, #120	@ 0x78
 8000b06:	701a      	strb	r2, [r3, #0]
	NRF24_Configurations_Struct.Default.EN_AA  			= 0x3F;
 8000b08:	4b44      	ldr	r3, [pc, #272]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b0a:	223f      	movs	r2, #63	@ 0x3f
 8000b0c:	705a      	strb	r2, [r3, #1]
	NRF24_Configurations_Struct.Default.EN_RXADDR  		= 0x03;
 8000b0e:	4b43      	ldr	r3, [pc, #268]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b10:	2203      	movs	r2, #3
 8000b12:	709a      	strb	r2, [r3, #2]
	NRF24_Configurations_Struct.Default.SETUP_AW  		= 0x03;
 8000b14:	4b41      	ldr	r3, [pc, #260]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b16:	2203      	movs	r2, #3
 8000b18:	70da      	strb	r2, [r3, #3]
	NRF24_Configurations_Struct.Default.SETUP_RETR 		= 0x03;
 8000b1a:	4b40      	ldr	r3, [pc, #256]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	711a      	strb	r2, [r3, #4]
	NRF24_Configurations_Struct.Default.RF_CH  			= 0x02;
 8000b20:	4b3e      	ldr	r3, [pc, #248]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b22:	2202      	movs	r2, #2
 8000b24:	715a      	strb	r2, [r3, #5]
	NRF24_Configurations_Struct.Default.RF_SETUP  		= 0x09;
 8000b26:	4b3d      	ldr	r3, [pc, #244]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b28:	2209      	movs	r2, #9
 8000b2a:	719a      	strb	r2, [r3, #6]
	NRF24_Configurations_Struct.Default.STATUS  		= 0X70;
 8000b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b2e:	2270      	movs	r2, #112	@ 0x70
 8000b30:	71da      	strb	r2, [r3, #7]
	NRF24_Configurations_Struct.Default.OBSERVE  		= 0X00;
 8000b32:	4b3a      	ldr	r3, [pc, #232]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	721a      	strb	r2, [r3, #8]
	NRF24_Configurations_Struct.Default.CD  			= 0x00;
 8000b38:	4b38      	ldr	r3, [pc, #224]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	725a      	strb	r2, [r3, #9]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[0]  	= 0xE7;
 8000b3e:	4b37      	ldr	r3, [pc, #220]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b40:	22e7      	movs	r2, #231	@ 0xe7
 8000b42:	729a      	strb	r2, [r3, #10]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[1]  	= 0xE7;
 8000b44:	4b35      	ldr	r3, [pc, #212]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b46:	22e7      	movs	r2, #231	@ 0xe7
 8000b48:	72da      	strb	r2, [r3, #11]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[2]  	= 0xE7;
 8000b4a:	4b34      	ldr	r3, [pc, #208]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b4c:	22e7      	movs	r2, #231	@ 0xe7
 8000b4e:	731a      	strb	r2, [r3, #12]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[3]  	= 0xE7;
 8000b50:	4b32      	ldr	r3, [pc, #200]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b52:	22e7      	movs	r2, #231	@ 0xe7
 8000b54:	735a      	strb	r2, [r3, #13]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[4]  	= 0xE7;
 8000b56:	4b31      	ldr	r3, [pc, #196]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b58:	22e7      	movs	r2, #231	@ 0xe7
 8000b5a:	739a      	strb	r2, [r3, #14]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[0]  	= 0xC2;
 8000b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b5e:	22c2      	movs	r2, #194	@ 0xc2
 8000b60:	73da      	strb	r2, [r3, #15]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[1]  	= 0xC2;
 8000b62:	4b2e      	ldr	r3, [pc, #184]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b64:	22c2      	movs	r2, #194	@ 0xc2
 8000b66:	741a      	strb	r2, [r3, #16]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[2]  	= 0xC2;
 8000b68:	4b2c      	ldr	r3, [pc, #176]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b6a:	22c2      	movs	r2, #194	@ 0xc2
 8000b6c:	745a      	strb	r2, [r3, #17]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[3]  	= 0xC2;
 8000b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b70:	22c2      	movs	r2, #194	@ 0xc2
 8000b72:	749a      	strb	r2, [r3, #18]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[4]  	= 0xC2;
 8000b74:	4b29      	ldr	r3, [pc, #164]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b76:	22c2      	movs	r2, #194	@ 0xc2
 8000b78:	74da      	strb	r2, [r3, #19]
	NRF24_Configurations_Struct.Default.RX_ADDR_P2  	= 0xC3;
 8000b7a:	4b28      	ldr	r3, [pc, #160]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b7c:	22c3      	movs	r2, #195	@ 0xc3
 8000b7e:	751a      	strb	r2, [r3, #20]
	NRF24_Configurations_Struct.Default.RX_ADDR_P3 		= 0xC4;
 8000b80:	4b26      	ldr	r3, [pc, #152]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b82:	22c4      	movs	r2, #196	@ 0xc4
 8000b84:	755a      	strb	r2, [r3, #21]
	NRF24_Configurations_Struct.Default.RX_ADDR_P4  	= 0xC5;
 8000b86:	4b25      	ldr	r3, [pc, #148]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b88:	22c5      	movs	r2, #197	@ 0xc5
 8000b8a:	759a      	strb	r2, [r3, #22]
	NRF24_Configurations_Struct.Default.RX_ADDR_P5  	= 0xC6;
 8000b8c:	4b23      	ldr	r3, [pc, #140]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b8e:	22c6      	movs	r2, #198	@ 0xc6
 8000b90:	75da      	strb	r2, [r3, #23]
	NRF24_Configurations_Struct.Default.TX_ADDR[0]   	= 0xE7;
 8000b92:	4b22      	ldr	r3, [pc, #136]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b94:	22e7      	movs	r2, #231	@ 0xe7
 8000b96:	761a      	strb	r2, [r3, #24]
	NRF24_Configurations_Struct.Default.TX_ADDR[1]   	= 0xE7;
 8000b98:	4b20      	ldr	r3, [pc, #128]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b9a:	22e7      	movs	r2, #231	@ 0xe7
 8000b9c:	765a      	strb	r2, [r3, #25]
	NRF24_Configurations_Struct.Default.TX_ADDR[2]   	= 0xE7;
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000ba0:	22e7      	movs	r2, #231	@ 0xe7
 8000ba2:	769a      	strb	r2, [r3, #26]
	NRF24_Configurations_Struct.Default.TX_ADDR[3]   	= 0xE7;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000ba6:	22e7      	movs	r2, #231	@ 0xe7
 8000ba8:	76da      	strb	r2, [r3, #27]
	NRF24_Configurations_Struct.Default.TX_ADDR[4]   	= 0xE7;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bac:	22e7      	movs	r2, #231	@ 0xe7
 8000bae:	771a      	strb	r2, [r3, #28]
	NRF24_Configurations_Struct.Default.RX_PW_P0  		= 0X20;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bb2:	2220      	movs	r2, #32
 8000bb4:	775a      	strb	r2, [r3, #29]
	NRF24_Configurations_Struct.Default.RX_PW_P1  		= 0X20;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bb8:	2220      	movs	r2, #32
 8000bba:	779a      	strb	r2, [r3, #30]
	NRF24_Configurations_Struct.Default.RX_PW_P2  		= 0X00;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	77da      	strb	r2, [r3, #31]
	NRF24_Configurations_Struct.Default.RX_PW_P3  		= 0X00;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2020 	strb.w	r2, [r3, #32]
	NRF24_Configurations_Struct.Default.RX_PW_P4  		= 0X00;
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	NRF24_Configurations_Struct.Default.RX_PW_P5  		= 0X00;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	NRF24_Configurations_Struct.Default.FIFO_STATUS  	= 0X11;
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bdc:	2211      	movs	r2, #17
 8000bde:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	NRF24_Configurations_Struct.Default.DYNPD  			= 0X00;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	NRF24_Configurations_Struct.Default.FEATURE  		= 0X00;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	NRF24_config(NRF24_Configurations_Struct.Default);
 8000bf2:	4e0a      	ldr	r6, [pc, #40]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bf4:	466c      	mov	r4, sp
 8000bf6:	f106 0510 	add.w	r5, r6, #16
 8000bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c02:	6020      	str	r0, [r4, #0]
 8000c04:	3404      	adds	r4, #4
 8000c06:	8021      	strh	r1, [r4, #0]
 8000c08:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c0c:	f7ff fed6 	bl	80009bc <NRF24_config>
	NRF24_ActualConfiguration();
 8000c10:	f7ff fe0c 	bl	800082c <NRF24_ActualConfiguration>
}
 8000c14:	bf00      	nop
 8000c16:	3704      	adds	r7, #4
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c1c:	2000002c 	.word	0x2000002c

08000c20 <NRF24_RxConfiguration>:
	NRF24_config(NRF24_Configurations_Struct.Tx_mode);
	NRF24_ActualConfiguration();
	NRF24_mode = TxMode;
}

void NRF24_RxConfiguration(void){
 8000c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af06      	add	r7, sp, #24
	NRF24_Configurations_Struct.Rx_mode.CONFIG 			= 0x79;
 8000c26:	4b5b      	ldr	r3, [pc, #364]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000c28:	2279      	movs	r2, #121	@ 0x79
 8000c2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	NRF24_Configurations_Struct.Rx_mode.EN_AA  			= 0x03;
 8000c2e:	4b59      	ldr	r3, [pc, #356]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000c30:	2203      	movs	r2, #3
 8000c32:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	NRF24_Configurations_Struct.Rx_mode.EN_RXADDR  		= 0x03;
 8000c36:	4b57      	ldr	r3, [pc, #348]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000c38:	2203      	movs	r2, #3
 8000c3a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
	NRF24_Configurations_Struct.Rx_mode.SETUP_AW  		= 0x03;
 8000c3e:	4b55      	ldr	r3, [pc, #340]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000c40:	2203      	movs	r2, #3
 8000c42:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
	NRF24_Configurations_Struct.Rx_mode.SETUP_RETR 		= 0x33;
 8000c46:	4b53      	ldr	r3, [pc, #332]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000c48:	2233      	movs	r2, #51	@ 0x33
 8000c4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	NRF24_Configurations_Struct.Rx_mode.RF_CH  			= 0x12;
 8000c4e:	4b51      	ldr	r3, [pc, #324]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000c50:	2212      	movs	r2, #18
 8000c52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	NRF24_Configurations_Struct.Rx_mode.RF_SETUP  		= 0x09;
 8000c56:	4b4f      	ldr	r3, [pc, #316]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000c58:	2209      	movs	r2, #9
 8000c5a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	NRF24_Configurations_Struct.Rx_mode.STATUS  		= 0X70;
 8000c5e:	4b4d      	ldr	r3, [pc, #308]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000c60:	2270      	movs	r2, #112	@ 0x70
 8000c62:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
	NRF24_Configurations_Struct.Rx_mode.OBSERVE  		= 0X00;
 8000c66:	4b4b      	ldr	r3, [pc, #300]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	NRF24_Configurations_Struct.Rx_mode.CD  			= 0x00;
 8000c6e:	4b49      	ldr	r3, [pc, #292]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[0]  	= 0xE7;
 8000c76:	4b47      	ldr	r3, [pc, #284]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000c78:	22e7      	movs	r2, #231	@ 0xe7
 8000c7a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[1]  	= 0xE7;
 8000c7e:	4b45      	ldr	r3, [pc, #276]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000c80:	22e7      	movs	r2, #231	@ 0xe7
 8000c82:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[2]  	= 0xE7;
 8000c86:	4b43      	ldr	r3, [pc, #268]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000c88:	22e7      	movs	r2, #231	@ 0xe7
 8000c8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[3]  	= 0xE7;
 8000c8e:	4b41      	ldr	r3, [pc, #260]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000c90:	22e7      	movs	r2, #231	@ 0xe7
 8000c92:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[4]  	= 0xE7;
 8000c96:	4b3f      	ldr	r3, [pc, #252]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000c98:	22e7      	movs	r2, #231	@ 0xe7
 8000c9a:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[0]  	= 0xC2;
 8000c9e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000ca0:	22c2      	movs	r2, #194	@ 0xc2
 8000ca2:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[1]  	= 0xC2;
 8000ca6:	4b3b      	ldr	r3, [pc, #236]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000ca8:	22c2      	movs	r2, #194	@ 0xc2
 8000caa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[2]  	= 0xC2;
 8000cae:	4b39      	ldr	r3, [pc, #228]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000cb0:	22c2      	movs	r2, #194	@ 0xc2
 8000cb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[3]  	= 0xC2;
 8000cb6:	4b37      	ldr	r3, [pc, #220]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000cb8:	22c2      	movs	r2, #194	@ 0xc2
 8000cba:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[4]  	= 0xC2;
 8000cbe:	4b35      	ldr	r3, [pc, #212]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000cc0:	22c2      	movs	r2, #194	@ 0xc2
 8000cc2:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P2  	= 0xC3;
 8000cc6:	4b33      	ldr	r3, [pc, #204]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000cc8:	22c3      	movs	r2, #195	@ 0xc3
 8000cca:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P3 		= 0xC4;
 8000cce:	4b31      	ldr	r3, [pc, #196]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000cd0:	22c4      	movs	r2, #196	@ 0xc4
 8000cd2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P4  	= 0xC5;
 8000cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000cd8:	22c5      	movs	r2, #197	@ 0xc5
 8000cda:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P5  	= 0xC6;
 8000cde:	4b2d      	ldr	r3, [pc, #180]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000ce0:	22c6      	movs	r2, #198	@ 0xc6
 8000ce2:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[0]   	= 0xE7;
 8000ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000ce8:	22e7      	movs	r2, #231	@ 0xe7
 8000cea:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[1]   	= 0xE7;
 8000cee:	4b29      	ldr	r3, [pc, #164]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000cf0:	22e7      	movs	r2, #231	@ 0xe7
 8000cf2:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[2]   	= 0xE7;
 8000cf6:	4b27      	ldr	r3, [pc, #156]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000cf8:	22e7      	movs	r2, #231	@ 0xe7
 8000cfa:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[3]   	= 0xE7;
 8000cfe:	4b25      	ldr	r3, [pc, #148]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000d00:	22e7      	movs	r2, #231	@ 0xe7
 8000d02:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[4]   	= 0xE7;
 8000d06:	4b23      	ldr	r3, [pc, #140]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000d08:	22e7      	movs	r2, #231	@ 0xe7
 8000d0a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P0  		= 0X20;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000d10:	2220      	movs	r2, #32
 8000d12:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P1  		= 0X20;
 8000d16:	4b1f      	ldr	r3, [pc, #124]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000d18:	2220      	movs	r2, #32
 8000d1a:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P2  		= 0X00;
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P3  		= 0X00;
 8000d26:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P4  		= 0X00;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P5  		= 0X00;
 8000d36:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
	NRF24_Configurations_Struct.Rx_mode.FIFO_STATUS  	= 0X11;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000d40:	2211      	movs	r2, #17
 8000d42:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
	NRF24_Configurations_Struct.Rx_mode.DYNPD  			= 0X00;
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	NRF24_Configurations_Struct.Rx_mode.FEATURE  		= 0X00;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	NRF24_config(NRF24_Configurations_Struct.Rx_mode);
 8000d56:	4e0f      	ldr	r6, [pc, #60]	@ (8000d94 <NRF24_RxConfiguration+0x174>)
 8000d58:	466c      	mov	r4, sp
 8000d5a:	f106 055c 	add.w	r5, r6, #92	@ 0x5c
 8000d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d66:	6020      	str	r0, [r4, #0]
 8000d68:	3404      	adds	r4, #4
 8000d6a:	8021      	strh	r1, [r4, #0]
 8000d6c:	f106 034c 	add.w	r3, r6, #76	@ 0x4c
 8000d70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d72:	f7ff fe23 	bl	80009bc <NRF24_config>
	NRF24_ActualConfiguration();
 8000d76:	f7ff fd59 	bl	800082c <NRF24_ActualConfiguration>
	NRF24_Enable();
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d80:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <NRF24_RxConfiguration+0x178>)
 8000d82:	f001 fb65 	bl	8002450 <HAL_GPIO_WritePin>
	NRF24_mode = RxMode;
 8000d86:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <NRF24_RxConfiguration+0x17c>)
 8000d88:	2202      	movs	r2, #2
 8000d8a:	701a      	strb	r2, [r3, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	3704      	adds	r7, #4
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d94:	2000002c 	.word	0x2000002c
 8000d98:	40020400 	.word	0x40020400
 8000d9c:	200000cf 	.word	0x200000cf

08000da0 <NRF24_CheckFlags>:

void NRF24_CheckFlags(void){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
	uint8_t buffer = NRF24_read(STATUS);
 8000da6:	2007      	movs	r0, #7
 8000da8:	f7ff fc3e 	bl	8000628 <NRF24_read>
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
	TX_FULL =  buffer & 0x01;
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b28      	ldr	r3, [pc, #160]	@ (8000e5c <NRF24_CheckFlags+0xbc>)
 8000dba:	701a      	strb	r2, [r3, #0]
	RX_P_NO = (buffer & 0x0E) >> 1;
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	105b      	asrs	r3, r3, #1
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b25      	ldr	r3, [pc, #148]	@ (8000e60 <NRF24_CheckFlags+0xc0>)
 8000dca:	701a      	strb	r2, [r3, #0]
	MAX_RT  = (buffer & 0x10) >> 4;
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	111b      	asrs	r3, r3, #4
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b22      	ldr	r3, [pc, #136]	@ (8000e64 <NRF24_CheckFlags+0xc4>)
 8000dda:	701a      	strb	r2, [r3, #0]
	TX_DS   = (buffer & 0x20) >> 5;
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	115b      	asrs	r3, r3, #5
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e68 <NRF24_CheckFlags+0xc8>)
 8000dea:	701a      	strb	r2, [r3, #0]
	RX_DR   = (buffer & 0x40) >> 6;
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	119b      	asrs	r3, r3, #6
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e6c <NRF24_CheckFlags+0xcc>)
 8000dfa:	701a      	strb	r2, [r3, #0]

	buffer   = NRF24_read(FIFO_STATUS);
 8000dfc:	2017      	movs	r0, #23
 8000dfe:	f7ff fc13 	bl	8000628 <NRF24_read>
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	RX_EMPTY =  buffer & 0x01;
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <NRF24_CheckFlags+0xd0>)
 8000e10:	701a      	strb	r2, [r3, #0]
	RX_FULL  = (buffer & 0x02) >> 1;
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	105b      	asrs	r3, r3, #1
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <NRF24_CheckFlags+0xd4>)
 8000e20:	701a      	strb	r2, [r3, #0]
	TX_EMPTY = (buffer & 0x10) >> 4;
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	111b      	asrs	r3, r3, #4
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <NRF24_CheckFlags+0xd8>)
 8000e30:	701a      	strb	r2, [r3, #0]
	TX_FULL  = (buffer & 0x20) >> 5;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	115b      	asrs	r3, r3, #5
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b07      	ldr	r3, [pc, #28]	@ (8000e5c <NRF24_CheckFlags+0xbc>)
 8000e40:	701a      	strb	r2, [r3, #0]
	TX_REUSE = (buffer & 0x40) >> 6;
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	119b      	asrs	r3, r3, #6
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e7c <NRF24_CheckFlags+0xdc>)
 8000e50:	701a      	strb	r2, [r3, #0]
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200000c5 	.word	0x200000c5
 8000e60:	200000c6 	.word	0x200000c6
 8000e64:	200000c7 	.word	0x200000c7
 8000e68:	200000c8 	.word	0x200000c8
 8000e6c:	200000c9 	.word	0x200000c9
 8000e70:	200000ca 	.word	0x200000ca
 8000e74:	200000cb 	.word	0x200000cb
 8000e78:	200000cc 	.word	0x200000cc
 8000e7c:	200000cd 	.word	0x200000cd

08000e80 <NRF24_FIFO_write>:

void NRF24_FIFO_write(uint8_t *pData, uint8_t size){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
	uint8_t Adr = W_TX_PAYLOAD;
 8000e8c:	23a0      	movs	r3, #160	@ 0xa0
 8000e8e:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e96:	4812      	ldr	r0, [pc, #72]	@ (8000ee0 <NRF24_FIFO_write+0x60>)
 8000e98:	f001 fada 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000e9c:	f107 030e 	add.w	r3, r7, #14
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480f      	ldr	r0, [pc, #60]	@ (8000ee4 <NRF24_FIFO_write+0x64>)
 8000ea6:	f002 f82d 	bl	8002f04 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73fb      	strb	r3, [r7, #15]
 8000eae:	e00a      	b.n	8000ec6 <NRF24_FIFO_write+0x46>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &pData[n], 1);
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480a      	ldr	r0, [pc, #40]	@ (8000ee4 <NRF24_FIFO_write+0x64>)
 8000ebc:	f002 f822 	bl	8002f04 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	2b1f      	cmp	r3, #31
 8000eca:	d9f1      	bls.n	8000eb0 <NRF24_FIFO_write+0x30>
	}
	NRF24_unselect();
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ed2:	4803      	ldr	r0, [pc, #12]	@ (8000ee0 <NRF24_FIFO_write+0x60>)
 8000ed4:	f001 fabc 	bl	8002450 <HAL_GPIO_WritePin>
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	20000374 	.word	0x20000374

08000ee8 <NRF24_FIFO_read>:

void NRF24_FIFO_read(uint8_t *pData){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	uint8_t Adr = R_RX_PAYLOAD;
 8000ef0:	2361      	movs	r3, #97	@ 0x61
 8000ef2:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000efa:	4812      	ldr	r0, [pc, #72]	@ (8000f44 <NRF24_FIFO_read+0x5c>)
 8000efc:	f001 faa8 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000f00:	f107 030e 	add.w	r3, r7, #14
 8000f04:	2201      	movs	r2, #1
 8000f06:	4619      	mov	r1, r3
 8000f08:	480f      	ldr	r0, [pc, #60]	@ (8000f48 <NRF24_FIFO_read+0x60>)
 8000f0a:	f001 fffb 	bl	8002f04 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	e00a      	b.n	8000f2a <NRF24_FIFO_read+0x42>
		HAL_SPI_Receive_DMA(SPI_NRF24, &pData[n], 1);
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480a      	ldr	r0, [pc, #40]	@ (8000f48 <NRF24_FIFO_read+0x60>)
 8000f20:	f002 f8a2 	bl	8003068 <HAL_SPI_Receive_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	3301      	adds	r3, #1
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	2b1f      	cmp	r3, #31
 8000f2e:	d9f1      	bls.n	8000f14 <NRF24_FIFO_read+0x2c>
	}
	NRF24_unselect();
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f36:	4803      	ldr	r0, [pc, #12]	@ (8000f44 <NRF24_FIFO_read+0x5c>)
 8000f38:	f001 fa8a 	bl	8002450 <HAL_GPIO_WritePin>
}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40020400 	.word	0x40020400
 8000f48:	20000374 	.word	0x20000374

08000f4c <NRF24_init>:

void NRF24_init(void){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	NRF24_Disable();
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f56:	4808      	ldr	r0, [pc, #32]	@ (8000f78 <NRF24_init+0x2c>)
 8000f58:	f001 fa7a 	bl	8002450 <HAL_GPIO_WritePin>
	NRF24_unselect();
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f62:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <NRF24_init+0x2c>)
 8000f64:	f001 fa74 	bl	8002450 <HAL_GPIO_WritePin>
	NRF24_DefaultConfiguration();
 8000f68:	f7ff fdc4 	bl	8000af4 <NRF24_DefaultConfiguration>
	NRF24_mode = 0;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	@ (8000f7c <NRF24_init+0x30>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40020400 	.word	0x40020400
 8000f7c:	200000cf 	.word	0x200000cf

08000f80 <NRF24_Transmit>:

void NRF24_Transmit(void){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	NRF24_CheckFlags();
 8000f84:	f7ff ff0c 	bl	8000da0 <NRF24_CheckFlags>
	if(MAX_RT)  NRF24_write(STATUS, 0x70);
 8000f88:	4b20      	ldr	r3, [pc, #128]	@ (800100c <NRF24_Transmit+0x8c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <NRF24_Transmit+0x18>
 8000f90:	2170      	movs	r1, #112	@ 0x70
 8000f92:	2007      	movs	r0, #7
 8000f94:	f7ff fad4 	bl	8000540 <NRF24_write>
	if(TX_FULL) NRF24_FlushTxFIFO();
 8000f98:	4b1d      	ldr	r3, [pc, #116]	@ (8001010 <NRF24_Transmit+0x90>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <NRF24_Transmit+0x24>
 8000fa0:	f7ff fbe6 	bl	8000770 <NRF24_FlushTxFIFO>
	if(Cont_TX > 100){
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <NRF24_Transmit+0x94>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b64      	cmp	r3, #100	@ 0x64
 8000faa:	d90f      	bls.n	8000fcc <NRF24_Transmit+0x4c>
		Cont_TX = 0;
 8000fac:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <NRF24_Transmit+0x94>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
		NRF24_FIFO_write(TxBuffer, 32);
 8000fb2:	2120      	movs	r1, #32
 8000fb4:	4818      	ldr	r0, [pc, #96]	@ (8001018 <NRF24_Transmit+0x98>)
 8000fb6:	f7ff ff63 	bl	8000e80 <NRF24_FIFO_write>
		++TxBuffer[0];
 8000fba:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <NRF24_Transmit+0x98>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <NRF24_Transmit+0x98>)
 8000fc4:	701a      	strb	r2, [r3, #0]
		Transmision_Flag = 0;
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <NRF24_Transmit+0x9c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
	}
	switch (Transmision_Flag) {
 8000fcc:	4b13      	ldr	r3, [pc, #76]	@ (800101c <NRF24_Transmit+0x9c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d002      	beq.n	8000fda <NRF24_Transmit+0x5a>
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d00a      	beq.n	8000fee <NRF24_Transmit+0x6e>
 8000fd8:	e010      	b.n	8000ffc <NRF24_Transmit+0x7c>
		case 0:
			NRF24_Enable();
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fe0:	480f      	ldr	r0, [pc, #60]	@ (8001020 <NRF24_Transmit+0xa0>)
 8000fe2:	f001 fa35 	bl	8002450 <HAL_GPIO_WritePin>
			Transmision_Flag = 1;
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <NRF24_Transmit+0x9c>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
			break;
 8000fec:	e006      	b.n	8000ffc <NRF24_Transmit+0x7c>
		case 1:
			NRF24_Disable();
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ff4:	480a      	ldr	r0, [pc, #40]	@ (8001020 <NRF24_Transmit+0xa0>)
 8000ff6:	f001 fa2b 	bl	8002450 <HAL_GPIO_WritePin>
			break;
 8000ffa:	bf00      	nop
	}
	++Cont_TX;
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <NRF24_Transmit+0x94>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b03      	ldr	r3, [pc, #12]	@ (8001014 <NRF24_Transmit+0x94>)
 8001006:	701a      	strb	r2, [r3, #0]
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200000c7 	.word	0x200000c7
 8001010:	200000c5 	.word	0x200000c5
 8001014:	200000ce 	.word	0x200000ce
 8001018:	200000d0 	.word	0x200000d0
 800101c:	200000c4 	.word	0x200000c4
 8001020:	40020400 	.word	0x40020400

08001024 <NRF24_Receive>:

void NRF24_Receive(void){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	NRF24_CheckFlags();
 8001028:	f7ff feba 	bl	8000da0 <NRF24_CheckFlags>
	if(RX_P_NO != 7){
 800102c:	4b04      	ldr	r3, [pc, #16]	@ (8001040 <NRF24_Receive+0x1c>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b07      	cmp	r3, #7
 8001032:	d002      	beq.n	800103a <NRF24_Receive+0x16>
		NRF24_FIFO_read(RxBuffer);
 8001034:	4803      	ldr	r0, [pc, #12]	@ (8001044 <NRF24_Receive+0x20>)
 8001036:	f7ff ff57 	bl	8000ee8 <NRF24_FIFO_read>
	}
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200000c6 	.word	0x200000c6
 8001044:	200000f0 	.word	0x200000f0

08001048 <NRF24_StateMachine>:

void NRF24_StateMachine(void){
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	switch (NRF24_mode){
 800104c:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <NRF24_StateMachine+0x4c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b03      	cmp	r3, #3
 8001052:	d818      	bhi.n	8001086 <NRF24_StateMachine+0x3e>
 8001054:	a201      	add	r2, pc, #4	@ (adr r2, 800105c <NRF24_StateMachine+0x14>)
 8001056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105a:	bf00      	nop
 800105c:	0800106d 	.word	0x0800106d
 8001060:	08001081 	.word	0x08001081
 8001064:	0800107b 	.word	0x0800107b
 8001068:	0800108d 	.word	0x0800108d
		case Init:
			NRF24_RxConfiguration();
 800106c:	f7ff fdd8 	bl	8000c20 <NRF24_RxConfiguration>
			NRF24_PowerUp();
 8001070:	f7ff fbbe 	bl	80007f0 <NRF24_PowerUp>
			NRF24_ActualConfiguration();
 8001074:	f7ff fbda 	bl	800082c <NRF24_ActualConfiguration>
			break;
 8001078:	e009      	b.n	800108e <NRF24_StateMachine+0x46>
		case RxMode:
			NRF24_Receive();
 800107a:	f7ff ffd3 	bl	8001024 <NRF24_Receive>
			break;
 800107e:	e006      	b.n	800108e <NRF24_StateMachine+0x46>
		case TxMode:
			NRF24_Transmit();
 8001080:	f7ff ff7e 	bl	8000f80 <NRF24_Transmit>
			break;
 8001084:	e003      	b.n	800108e <NRF24_StateMachine+0x46>
		case PowerSave:

			break;
		default:
			NRF24_init();
 8001086:	f7ff ff61 	bl	8000f4c <NRF24_init>
	}
}
 800108a:	e000      	b.n	800108e <NRF24_StateMachine+0x46>
			break;
 800108c:	bf00      	nop
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200000cf 	.word	0x200000cf

08001098 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <MX_DMA_Init+0x4c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a0f      	ldr	r2, [pc, #60]	@ (80010e4 <MX_DMA_Init+0x4c>)
 80010a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <MX_DMA_Init+0x4c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2105      	movs	r1, #5
 80010be:	2038      	movs	r0, #56	@ 0x38
 80010c0:	f000 fca8 	bl	8001a14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010c4:	2038      	movs	r0, #56	@ 0x38
 80010c6:	f000 fcc1 	bl	8001a4c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2105      	movs	r1, #5
 80010ce:	203a      	movs	r0, #58	@ 0x3a
 80010d0:	f000 fca0 	bl	8001a14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010d4:	203a      	movs	r0, #58	@ 0x3a
 80010d6:	f000 fcb9 	bl	8001a4c <HAL_NVIC_EnableIRQ>

}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800

080010e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4a07      	ldr	r2, [pc, #28]	@ (8001114 <vApplicationGetIdleTaskMemory+0x2c>)
 80010f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	4a06      	ldr	r2, [pc, #24]	@ (8001118 <vApplicationGetIdleTaskMemory+0x30>)
 80010fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2280      	movs	r2, #128	@ 0x80
 8001104:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000120 	.word	0x20000120
 8001118:	20000174 	.word	0x20000174

0800111c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800111c:	b5b0      	push	{r4, r5, r7, lr}
 800111e:	b09c      	sub	sp, #112	@ 0x70
 8001120:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task10ms */
  osThreadDef(Task10ms, Task_10ms, osPriorityNormal, 0, 128);
 8001122:	4b27      	ldr	r3, [pc, #156]	@ (80011c0 <MX_FREERTOS_Init+0xa4>)
 8001124:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001128:	461d      	mov	r5, r3
 800112a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001132:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task10msHandle = osThreadCreate(osThread(Task10ms), NULL);
 8001136:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f002 fea6 	bl	8003e8e <osThreadCreate>
 8001142:	4603      	mov	r3, r0
 8001144:	4a1f      	ldr	r2, [pc, #124]	@ (80011c4 <MX_FREERTOS_Init+0xa8>)
 8001146:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task100ms */
  osThreadDef(Task100ms, Task_100ms, osPriorityNormal, 0, 128);
 8001148:	4b1f      	ldr	r3, [pc, #124]	@ (80011c8 <MX_FREERTOS_Init+0xac>)
 800114a:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800114e:	461d      	mov	r5, r3
 8001150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001154:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001158:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task100msHandle = osThreadCreate(osThread(Task100ms), NULL);
 800115c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f002 fe93 	bl	8003e8e <osThreadCreate>
 8001168:	4603      	mov	r3, r0
 800116a:	4a18      	ldr	r2, [pc, #96]	@ (80011cc <MX_FREERTOS_Init+0xb0>)
 800116c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1000ms */
  osThreadDef(Task1000ms, Task_1000ms, osPriorityIdle, 0, 128);
 800116e:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <MX_FREERTOS_Init+0xb4>)
 8001170:	f107 041c 	add.w	r4, r7, #28
 8001174:	461d      	mov	r5, r3
 8001176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800117e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1000msHandle = osThreadCreate(osThread(Task1000ms), NULL);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f002 fe80 	bl	8003e8e <osThreadCreate>
 800118e:	4603      	mov	r3, r0
 8001190:	4a10      	ldr	r2, [pc, #64]	@ (80011d4 <MX_FREERTOS_Init+0xb8>)
 8001192:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1ms */
  osThreadDef(Task1ms, Task_1ms, osPriorityAboveNormal, 0, 128);
 8001194:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <MX_FREERTOS_Init+0xbc>)
 8001196:	463c      	mov	r4, r7
 8001198:	461d      	mov	r5, r3
 800119a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1msHandle = osThreadCreate(osThread(Task1ms), NULL);
 80011a6:	463b      	mov	r3, r7
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 fe6f 	bl	8003e8e <osThreadCreate>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <MX_FREERTOS_Init+0xc0>)
 80011b4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80011b6:	bf00      	nop
 80011b8:	3770      	adds	r7, #112	@ 0x70
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bdb0      	pop	{r4, r5, r7, pc}
 80011be:	bf00      	nop
 80011c0:	08005390 	.word	0x08005390
 80011c4:	20000110 	.word	0x20000110
 80011c8:	080053b8 	.word	0x080053b8
 80011cc:	20000114 	.word	0x20000114
 80011d0:	080053e0 	.word	0x080053e0
 80011d4:	20000118 	.word	0x20000118
 80011d8:	08005404 	.word	0x08005404
 80011dc:	2000011c 	.word	0x2000011c

080011e0 <Task_10ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_10ms */
void Task_10ms(void const * argument)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_10ms */
	task_init_10ms();
 80011e8:	f7ff f97f 	bl	80004ea <task_init_10ms>
  /* Infinite loop */
  for(;;)
  {
	task_10ms();
 80011ec:	f7ff f984 	bl	80004f8 <task_10ms>
    osDelay(10);
 80011f0:	200a      	movs	r0, #10
 80011f2:	f002 fe98 	bl	8003f26 <osDelay>
	task_10ms();
 80011f6:	bf00      	nop
 80011f8:	e7f8      	b.n	80011ec <Task_10ms+0xc>

080011fa <Task_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_100ms */
void Task_100ms(void const * argument)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_100ms */
	task_init_100ms();
 8001202:	f7ff f980 	bl	8000506 <task_init_100ms>
  /* Infinite loop */
  for(;;)
  {
	task_100ms();
 8001206:	f7ff f985 	bl	8000514 <task_100ms>
    osDelay(100);
 800120a:	2064      	movs	r0, #100	@ 0x64
 800120c:	f002 fe8b 	bl	8003f26 <osDelay>
	task_100ms();
 8001210:	bf00      	nop
 8001212:	e7f8      	b.n	8001206 <Task_100ms+0xc>

08001214 <Task_1000ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1000ms */
void Task_1000ms(void const * argument)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1000ms */
	task_init_1000ms();
 800121c:	f7ff f981 	bl	8000522 <task_init_1000ms>
  /* Infinite loop */
  for(;;)
  {
	task_1000ms();
 8001220:	f7ff f986 	bl	8000530 <task_1000ms>
    osDelay(1000);
 8001224:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001228:	f002 fe7d 	bl	8003f26 <osDelay>
	task_1000ms();
 800122c:	bf00      	nop
 800122e:	e7f7      	b.n	8001220 <Task_1000ms+0xc>

08001230 <Task_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1ms */
void Task_1ms(void const * argument)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1ms */
	task_init_1ms();
 8001238:	f7ff f94a 	bl	80004d0 <task_init_1ms>
  /* Infinite loop */
  for(;;)
  {
	task_1ms();
 800123c:	f7ff f94f 	bl	80004de <task_1ms>
    osDelay(1);
 8001240:	2001      	movs	r0, #1
 8001242:	f002 fe70 	bl	8003f26 <osDelay>
	task_1ms();
 8001246:	bf00      	nop
 8001248:	e7f8      	b.n	800123c <Task_1ms+0xc>
	...

0800124c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	@ 0x28
 8001250:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <MX_GPIO_Init+0xb8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a26      	ldr	r2, [pc, #152]	@ (8001304 <MX_GPIO_Init+0xb8>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b24      	ldr	r3, [pc, #144]	@ (8001304 <MX_GPIO_Init+0xb8>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <MX_GPIO_Init+0xb8>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a1f      	ldr	r2, [pc, #124]	@ (8001304 <MX_GPIO_Init+0xb8>)
 8001288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <MX_GPIO_Init+0xb8>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	4b19      	ldr	r3, [pc, #100]	@ (8001304 <MX_GPIO_Init+0xb8>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a18      	ldr	r2, [pc, #96]	@ (8001304 <MX_GPIO_Init+0xb8>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <MX_GPIO_Init+0xb8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <MX_GPIO_Init+0xb8>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a11      	ldr	r2, [pc, #68]	@ (8001304 <MX_GPIO_Init+0xb8>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <MX_GPIO_Init+0xb8>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80012d8:	480b      	ldr	r0, [pc, #44]	@ (8001308 <MX_GPIO_Init+0xbc>)
 80012da:	f001 f8b9 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 80012de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	4804      	ldr	r0, [pc, #16]	@ (8001308 <MX_GPIO_Init+0xbc>)
 80012f8:	f000 ff26 	bl	8002148 <HAL_GPIO_Init>

}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	@ 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	40020400 	.word	0x40020400

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001310:	f000 fa86 	bl	8001820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001314:	f000 f80e 	bl	8001334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001318:	f7ff ff98 	bl	800124c <MX_GPIO_Init>
  MX_DMA_Init();
 800131c:	f7ff febc 	bl	8001098 <MX_DMA_Init>
  MX_SPI1_Init();
 8001320:	f000 f888 	bl	8001434 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_init();
 8001324:	f7ff fe12 	bl	8000f4c <NRF24_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001328:	f7ff fef8 	bl	800111c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800132c:	f002 fda8 	bl	8003e80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <main+0x24>

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b094      	sub	sp, #80	@ 0x50
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	2230      	movs	r2, #48	@ 0x30
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f003 ffe6 	bl	8005314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	4b27      	ldr	r3, [pc, #156]	@ (80013fc <SystemClock_Config+0xc8>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	4a26      	ldr	r2, [pc, #152]	@ (80013fc <SystemClock_Config+0xc8>)
 8001362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001366:	6413      	str	r3, [r2, #64]	@ 0x40
 8001368:	4b24      	ldr	r3, [pc, #144]	@ (80013fc <SystemClock_Config+0xc8>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <SystemClock_Config+0xcc>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a20      	ldr	r2, [pc, #128]	@ (8001400 <SystemClock_Config+0xcc>)
 800137e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b1e      	ldr	r3, [pc, #120]	@ (8001400 <SystemClock_Config+0xcc>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001390:	2302      	movs	r3, #2
 8001392:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001394:	2301      	movs	r3, #1
 8001396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001398:	2310      	movs	r3, #16
 800139a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139c:	2302      	movs	r3, #2
 800139e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013a0:	2300      	movs	r3, #0
 80013a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013a4:	2308      	movs	r3, #8
 80013a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80013a8:	2364      	movs	r3, #100	@ 0x64
 80013aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ac:	2302      	movs	r3, #2
 80013ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013b0:	2304      	movs	r3, #4
 80013b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b4:	f107 0320 	add.w	r3, r7, #32
 80013b8:	4618      	mov	r0, r3
 80013ba:	f001 f863 	bl	8002484 <HAL_RCC_OscConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013c4:	f000 f830 	bl	8001428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c8:	230f      	movs	r3, #15
 80013ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013cc:	2302      	movs	r3, #2
 80013ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013de:	f107 030c 	add.w	r3, r7, #12
 80013e2:	2103      	movs	r1, #3
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 fac5 	bl	8002974 <HAL_RCC_ClockConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013f0:	f000 f81a 	bl	8001428 <Error_Handler>
  }
}
 80013f4:	bf00      	nop
 80013f6:	3750      	adds	r7, #80	@ 0x50
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	40007000 	.word	0x40007000

08001404 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a04      	ldr	r2, [pc, #16]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001416:	f000 fa25 	bl	8001864 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40014800 	.word	0x40014800

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <Error_Handler+0x8>

08001434 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001438:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <MX_SPI1_Init+0x64>)
 800143a:	4a18      	ldr	r2, [pc, #96]	@ (800149c <MX_SPI1_Init+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800143e:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <MX_SPI1_Init+0x64>)
 8001440:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001444:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001446:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <MX_SPI1_Init+0x64>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <MX_SPI1_Init+0x64>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <MX_SPI1_Init+0x64>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <MX_SPI1_Init+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <MX_SPI1_Init+0x64>)
 8001460:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001464:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001466:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <MX_SPI1_Init+0x64>)
 8001468:	2218      	movs	r2, #24
 800146a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800146c:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <MX_SPI1_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001472:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <MX_SPI1_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001478:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <MX_SPI1_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800147e:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <MX_SPI1_Init+0x64>)
 8001480:	220a      	movs	r2, #10
 8001482:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	@ (8001498 <MX_SPI1_Init+0x64>)
 8001486:	f001 fcb3 	bl	8002df0 <HAL_SPI_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001490:	f7ff ffca 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000374 	.word	0x20000374
 800149c:	40013000 	.word	0x40013000

080014a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a47      	ldr	r2, [pc, #284]	@ (80015dc <HAL_SPI_MspInit+0x13c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	f040 8088 	bne.w	80015d4 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	4b45      	ldr	r3, [pc, #276]	@ (80015e0 <HAL_SPI_MspInit+0x140>)
 80014ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014cc:	4a44      	ldr	r2, [pc, #272]	@ (80015e0 <HAL_SPI_MspInit+0x140>)
 80014ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d4:	4b42      	ldr	r3, [pc, #264]	@ (80015e0 <HAL_SPI_MspInit+0x140>)
 80014d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	4b3e      	ldr	r3, [pc, #248]	@ (80015e0 <HAL_SPI_MspInit+0x140>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e8:	4a3d      	ldr	r2, [pc, #244]	@ (80015e0 <HAL_SPI_MspInit+0x140>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f0:	4b3b      	ldr	r3, [pc, #236]	@ (80015e0 <HAL_SPI_MspInit+0x140>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014fc:	23e0      	movs	r3, #224	@ 0xe0
 80014fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800150c:	2305      	movs	r3, #5
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	4833      	ldr	r0, [pc, #204]	@ (80015e4 <HAL_SPI_MspInit+0x144>)
 8001518:	f000 fe16 	bl	8002148 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800151c:	4b32      	ldr	r3, [pc, #200]	@ (80015e8 <HAL_SPI_MspInit+0x148>)
 800151e:	4a33      	ldr	r2, [pc, #204]	@ (80015ec <HAL_SPI_MspInit+0x14c>)
 8001520:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001522:	4b31      	ldr	r3, [pc, #196]	@ (80015e8 <HAL_SPI_MspInit+0x148>)
 8001524:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001528:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800152a:	4b2f      	ldr	r3, [pc, #188]	@ (80015e8 <HAL_SPI_MspInit+0x148>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001530:	4b2d      	ldr	r3, [pc, #180]	@ (80015e8 <HAL_SPI_MspInit+0x148>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001536:	4b2c      	ldr	r3, [pc, #176]	@ (80015e8 <HAL_SPI_MspInit+0x148>)
 8001538:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800153c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800153e:	4b2a      	ldr	r3, [pc, #168]	@ (80015e8 <HAL_SPI_MspInit+0x148>)
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001544:	4b28      	ldr	r3, [pc, #160]	@ (80015e8 <HAL_SPI_MspInit+0x148>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800154a:	4b27      	ldr	r3, [pc, #156]	@ (80015e8 <HAL_SPI_MspInit+0x148>)
 800154c:	2200      	movs	r2, #0
 800154e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001550:	4b25      	ldr	r3, [pc, #148]	@ (80015e8 <HAL_SPI_MspInit+0x148>)
 8001552:	2200      	movs	r2, #0
 8001554:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001556:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <HAL_SPI_MspInit+0x148>)
 8001558:	2200      	movs	r2, #0
 800155a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800155c:	4822      	ldr	r0, [pc, #136]	@ (80015e8 <HAL_SPI_MspInit+0x148>)
 800155e:	f000 fa83 	bl	8001a68 <HAL_DMA_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001568:	f7ff ff5e 	bl	8001428 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a1e      	ldr	r2, [pc, #120]	@ (80015e8 <HAL_SPI_MspInit+0x148>)
 8001570:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001572:	4a1d      	ldr	r2, [pc, #116]	@ (80015e8 <HAL_SPI_MspInit+0x148>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8001578:	4b1d      	ldr	r3, [pc, #116]	@ (80015f0 <HAL_SPI_MspInit+0x150>)
 800157a:	4a1e      	ldr	r2, [pc, #120]	@ (80015f4 <HAL_SPI_MspInit+0x154>)
 800157c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 800157e:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <HAL_SPI_MspInit+0x150>)
 8001580:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001584:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001586:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <HAL_SPI_MspInit+0x150>)
 8001588:	2240      	movs	r2, #64	@ 0x40
 800158a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800158c:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <HAL_SPI_MspInit+0x150>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001592:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <HAL_SPI_MspInit+0x150>)
 8001594:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001598:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <HAL_SPI_MspInit+0x150>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015a0:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <HAL_SPI_MspInit+0x150>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80015a6:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <HAL_SPI_MspInit+0x150>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015ac:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <HAL_SPI_MspInit+0x150>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <HAL_SPI_MspInit+0x150>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80015b8:	480d      	ldr	r0, [pc, #52]	@ (80015f0 <HAL_SPI_MspInit+0x150>)
 80015ba:	f000 fa55 	bl	8001a68 <HAL_DMA_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80015c4:	f7ff ff30 	bl	8001428 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a09      	ldr	r2, [pc, #36]	@ (80015f0 <HAL_SPI_MspInit+0x150>)
 80015cc:	649a      	str	r2, [r3, #72]	@ 0x48
 80015ce:	4a08      	ldr	r2, [pc, #32]	@ (80015f0 <HAL_SPI_MspInit+0x150>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	@ 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40013000 	.word	0x40013000
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	200003cc 	.word	0x200003cc
 80015ec:	40026410 	.word	0x40026410
 80015f0:	2000042c 	.word	0x2000042c
 80015f4:	40026440 	.word	0x40026440

080015f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	4b12      	ldr	r3, [pc, #72]	@ (800164c <HAL_MspInit+0x54>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001606:	4a11      	ldr	r2, [pc, #68]	@ (800164c <HAL_MspInit+0x54>)
 8001608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800160c:	6453      	str	r3, [r2, #68]	@ 0x44
 800160e:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <HAL_MspInit+0x54>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_MspInit+0x54>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <HAL_MspInit+0x54>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001628:	6413      	str	r3, [r2, #64]	@ 0x40
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <HAL_MspInit+0x54>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	210f      	movs	r1, #15
 800163a:	f06f 0001 	mvn.w	r0, #1
 800163e:	f000 f9e9 	bl	8001a14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800

08001650 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08c      	sub	sp, #48	@ 0x30
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	4b2e      	ldr	r3, [pc, #184]	@ (8001720 <HAL_InitTick+0xd0>)
 8001666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001668:	4a2d      	ldr	r2, [pc, #180]	@ (8001720 <HAL_InitTick+0xd0>)
 800166a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800166e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001670:	4b2b      	ldr	r3, [pc, #172]	@ (8001720 <HAL_InitTick+0xd0>)
 8001672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001674:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800167c:	f107 020c 	add.w	r2, r7, #12
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f001 fb80 	bl	8002d8c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800168c:	f001 fb6a 	bl	8002d64 <HAL_RCC_GetPCLK2Freq>
 8001690:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001694:	4a23      	ldr	r2, [pc, #140]	@ (8001724 <HAL_InitTick+0xd4>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	0c9b      	lsrs	r3, r3, #18
 800169c:	3b01      	subs	r3, #1
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80016a0:	4b21      	ldr	r3, [pc, #132]	@ (8001728 <HAL_InitTick+0xd8>)
 80016a2:	4a22      	ldr	r2, [pc, #136]	@ (800172c <HAL_InitTick+0xdc>)
 80016a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80016a6:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <HAL_InitTick+0xd8>)
 80016a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016ac:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80016ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001728 <HAL_InitTick+0xd8>)
 80016b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b2:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80016b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <HAL_InitTick+0xd8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <HAL_InitTick+0xd8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c0:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <HAL_InitTick+0xd8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 80016c6:	4818      	ldr	r0, [pc, #96]	@ (8001728 <HAL_InitTick+0xd8>)
 80016c8:	f002 f94e 	bl	8003968 <HAL_TIM_Base_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80016d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11b      	bne.n	8001712 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 80016da:	4813      	ldr	r0, [pc, #76]	@ (8001728 <HAL_InitTick+0xd8>)
 80016dc:	f002 f99e 	bl	8003a1c <HAL_TIM_Base_Start_IT>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80016e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d111      	bne.n	8001712 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80016ee:	201a      	movs	r0, #26
 80016f0:	f000 f9ac 	bl	8001a4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b0f      	cmp	r3, #15
 80016f8:	d808      	bhi.n	800170c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80016fa:	2200      	movs	r2, #0
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	201a      	movs	r0, #26
 8001700:	f000 f988 	bl	8001a14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001704:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <HAL_InitTick+0xe0>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e002      	b.n	8001712 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001712:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001716:	4618      	mov	r0, r3
 8001718:	3730      	adds	r7, #48	@ 0x30
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	431bde83 	.word	0x431bde83
 8001728:	2000048c 	.word	0x2000048c
 800172c:	40014800 	.word	0x40014800
 8001730:	20000004 	.word	0x20000004

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <NMI_Handler+0x4>

0800173c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <MemManage_Handler+0x4>

0800174c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <BusFault_Handler+0x4>

08001754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <UsageFault_Handler+0x4>

0800175c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001770:	4802      	ldr	r0, [pc, #8]	@ (800177c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001772:	f002 f9b5 	bl	8003ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2000048c 	.word	0x2000048c

08001780 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001784:	4802      	ldr	r0, [pc, #8]	@ (8001790 <DMA2_Stream0_IRQHandler+0x10>)
 8001786:	f000 fa75 	bl	8001c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200003cc 	.word	0x200003cc

08001794 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001798:	4802      	ldr	r0, [pc, #8]	@ (80017a4 <DMA2_Stream2_IRQHandler+0x10>)
 800179a:	f000 fa6b 	bl	8001c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000042c 	.word	0x2000042c

080017a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <SystemInit+0x20>)
 80017ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017b2:	4a05      	ldr	r2, [pc, #20]	@ (80017c8 <SystemInit+0x20>)
 80017b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001804 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017d0:	f7ff ffea 	bl	80017a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d4:	480c      	ldr	r0, [pc, #48]	@ (8001808 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017d6:	490d      	ldr	r1, [pc, #52]	@ (800180c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001810 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017dc:	e002      	b.n	80017e4 <LoopCopyDataInit>

080017de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e2:	3304      	adds	r3, #4

080017e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e8:	d3f9      	bcc.n	80017de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001818 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f0:	e001      	b.n	80017f6 <LoopFillZerobss>

080017f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f4:	3204      	adds	r2, #4

080017f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f8:	d3fb      	bcc.n	80017f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fa:	f003 fd93 	bl	8005324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fe:	f7ff fd85 	bl	800130c <main>
  bx  lr    
 8001802:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001804:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800180c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001810:	08005458 	.word	0x08005458
  ldr r2, =_sbss
 8001814:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001818:	2000422c 	.word	0x2000422c

0800181c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC_IRQHandler>
	...

08001820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001824:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0d      	ldr	r2, [pc, #52]	@ (8001860 <HAL_Init+0x40>)
 800182a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800182e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001830:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <HAL_Init+0x40>)
 8001836:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800183a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800183c:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a07      	ldr	r2, [pc, #28]	@ (8001860 <HAL_Init+0x40>)
 8001842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001846:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001848:	2003      	movs	r0, #3
 800184a:	f000 f8d8 	bl	80019fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184e:	200f      	movs	r0, #15
 8001850:	f7ff fefe 	bl	8001650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001854:	f7ff fed0 	bl	80015f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023c00 	.word	0x40023c00

08001864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <HAL_IncTick+0x20>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <HAL_IncTick+0x24>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a04      	ldr	r2, [pc, #16]	@ (8001888 <HAL_IncTick+0x24>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000008 	.word	0x20000008
 8001888:	200004d4 	.word	0x200004d4

0800188c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return uwTick;
 8001890:	4b03      	ldr	r3, [pc, #12]	@ (80018a0 <HAL_GetTick+0x14>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	200004d4 	.word	0x200004d4

080018a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b4:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d6:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60d3      	str	r3, [r2, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f0:	4b04      	ldr	r3, [pc, #16]	@ (8001904 <__NVIC_GetPriorityGrouping+0x18>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 0307 	and.w	r3, r3, #7
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	2b00      	cmp	r3, #0
 8001918:	db0b      	blt.n	8001932 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	f003 021f 	and.w	r2, r3, #31
 8001920:	4907      	ldr	r1, [pc, #28]	@ (8001940 <__NVIC_EnableIRQ+0x38>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	2001      	movs	r0, #1
 800192a:	fa00 f202 	lsl.w	r2, r0, r2
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000e100 	.word	0xe000e100

08001944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	2b00      	cmp	r3, #0
 8001956:	db0a      	blt.n	800196e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	490c      	ldr	r1, [pc, #48]	@ (8001990 <__NVIC_SetPriority+0x4c>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	0112      	lsls	r2, r2, #4
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	440b      	add	r3, r1
 8001968:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800196c:	e00a      	b.n	8001984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4908      	ldr	r1, [pc, #32]	@ (8001994 <__NVIC_SetPriority+0x50>)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	3b04      	subs	r3, #4
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	440b      	add	r3, r1
 8001982:	761a      	strb	r2, [r3, #24]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000e100 	.word	0xe000e100
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	@ 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f1c3 0307 	rsb	r3, r3, #7
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	bf28      	it	cs
 80019b6:	2304      	movcs	r3, #4
 80019b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3304      	adds	r3, #4
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d902      	bls.n	80019c8 <NVIC_EncodePriority+0x30>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3b03      	subs	r3, #3
 80019c6:	e000      	b.n	80019ca <NVIC_EncodePriority+0x32>
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	401a      	ands	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43d9      	mvns	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	4313      	orrs	r3, r2
         );
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	@ 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ff4c 	bl	80018a4 <__NVIC_SetPriorityGrouping>
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a26:	f7ff ff61 	bl	80018ec <__NVIC_GetPriorityGrouping>
 8001a2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	6978      	ldr	r0, [r7, #20]
 8001a32:	f7ff ffb1 	bl	8001998 <NVIC_EncodePriority>
 8001a36:	4602      	mov	r2, r0
 8001a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ff80 	bl	8001944 <__NVIC_SetPriority>
}
 8001a44:	bf00      	nop
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff54 	bl	8001908 <__NVIC_EnableIRQ>
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff ff0a 	bl	800188c <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e099      	b.n	8001bb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0201 	bic.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa4:	e00f      	b.n	8001ac6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aa6:	f7ff fef1 	bl	800188c <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b05      	cmp	r3, #5
 8001ab2:	d908      	bls.n	8001ac6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2203      	movs	r2, #3
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e078      	b.n	8001bb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1e8      	bne.n	8001aa6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	4b38      	ldr	r3, [pc, #224]	@ (8001bc0 <HAL_DMA_Init+0x158>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d107      	bne.n	8001b30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f023 0307 	bic.w	r3, r3, #7
 8001b46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d117      	bne.n	8001b8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00e      	beq.n	8001b8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 fa6f 	bl	8002050 <DMA_CheckFifoParam>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d008      	beq.n	8001b8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2240      	movs	r2, #64	@ 0x40
 8001b7c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b86:	2301      	movs	r3, #1
 8001b88:	e016      	b.n	8001bb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 fa26 	bl	8001fe4 <DMA_CalcBaseAndBitshift>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba0:	223f      	movs	r2, #63	@ 0x3f
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	f010803f 	.word	0xf010803f

08001bc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_DMA_Start_IT+0x26>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e040      	b.n	8001c6c <HAL_DMA_Start_IT+0xa8>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d12f      	bne.n	8001c5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2202      	movs	r2, #2
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f9b8 	bl	8001f88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1c:	223f      	movs	r2, #63	@ 0x3f
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0216 	orr.w	r2, r2, #22
 8001c32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d007      	beq.n	8001c4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0208 	orr.w	r2, r2, #8
 8001c4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	e005      	b.n	8001c6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c66:	2302      	movs	r3, #2
 8001c68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c80:	4b8e      	ldr	r3, [pc, #568]	@ (8001ebc <HAL_DMA_IRQHandler+0x248>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a8e      	ldr	r2, [pc, #568]	@ (8001ec0 <HAL_DMA_IRQHandler+0x24c>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	0a9b      	lsrs	r3, r3, #10
 8001c8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9e:	2208      	movs	r2, #8
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d01a      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d013      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0204 	bic.w	r2, r2, #4
 8001cc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ccc:	2208      	movs	r2, #8
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd8:	f043 0201 	orr.w	r2, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d012      	beq.n	8001d16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00b      	beq.n	8001d16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d02:	2201      	movs	r2, #1
 8001d04:	409a      	lsls	r2, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0e:	f043 0202 	orr.w	r2, r3, #2
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d012      	beq.n	8001d4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00b      	beq.n	8001d4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d38:	2204      	movs	r2, #4
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d44:	f043 0204 	orr.w	r2, r3, #4
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d50:	2210      	movs	r2, #16
 8001d52:	409a      	lsls	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d043      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d03c      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6e:	2210      	movs	r2, #16
 8001d70:	409a      	lsls	r2, r3
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d018      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d108      	bne.n	8001da4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d024      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	4798      	blx	r3
 8001da2:	e01f      	b.n	8001de4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01b      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	4798      	blx	r3
 8001db4:	e016      	b.n	8001de4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d107      	bne.n	8001dd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0208 	bic.w	r2, r2, #8
 8001dd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de8:	2220      	movs	r2, #32
 8001dea:	409a      	lsls	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 808f 	beq.w	8001f14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 8087 	beq.w	8001f14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d136      	bne.n	8001e8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0216 	bic.w	r2, r2, #22
 8001e2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d103      	bne.n	8001e4e <HAL_DMA_IRQHandler+0x1da>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0208 	bic.w	r2, r2, #8
 8001e5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e62:	223f      	movs	r2, #63	@ 0x3f
 8001e64:	409a      	lsls	r2, r3
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d07e      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	4798      	blx	r3
        }
        return;
 8001e8a:	e079      	b.n	8001f80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d01d      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10d      	bne.n	8001ec4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d031      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
 8001eb8:	e02c      	b.n	8001f14 <HAL_DMA_IRQHandler+0x2a0>
 8001eba:	bf00      	nop
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d023      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
 8001ed4:	e01e      	b.n	8001f14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10f      	bne.n	8001f04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0210 	bic.w	r2, r2, #16
 8001ef2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d032      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d022      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2205      	movs	r2, #5
 8001f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	3301      	adds	r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d307      	bcc.n	8001f5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f2      	bne.n	8001f40 <HAL_DMA_IRQHandler+0x2cc>
 8001f5a:	e000      	b.n	8001f5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d005      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	4798      	blx	r3
 8001f7e:	e000      	b.n	8001f82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f80:	bf00      	nop
    }
  }
}
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001fa4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b40      	cmp	r3, #64	@ 0x40
 8001fb4:	d108      	bne.n	8001fc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fc6:	e007      	b.n	8001fd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	60da      	str	r2, [r3, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	3b10      	subs	r3, #16
 8001ff4:	4a14      	ldr	r2, [pc, #80]	@ (8002048 <DMA_CalcBaseAndBitshift+0x64>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ffe:	4a13      	ldr	r2, [pc, #76]	@ (800204c <DMA_CalcBaseAndBitshift+0x68>)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b03      	cmp	r3, #3
 8002010:	d909      	bls.n	8002026 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800201a:	f023 0303 	bic.w	r3, r3, #3
 800201e:	1d1a      	adds	r2, r3, #4
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	659a      	str	r2, [r3, #88]	@ 0x58
 8002024:	e007      	b.n	8002036 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800202e:	f023 0303 	bic.w	r3, r3, #3
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	aaaaaaab 	.word	0xaaaaaaab
 800204c:	08005440 	.word	0x08005440

08002050 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002060:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d11f      	bne.n	80020aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d856      	bhi.n	800211e <DMA_CheckFifoParam+0xce>
 8002070:	a201      	add	r2, pc, #4	@ (adr r2, 8002078 <DMA_CheckFifoParam+0x28>)
 8002072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002076:	bf00      	nop
 8002078:	08002089 	.word	0x08002089
 800207c:	0800209b 	.word	0x0800209b
 8002080:	08002089 	.word	0x08002089
 8002084:	0800211f 	.word	0x0800211f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d046      	beq.n	8002122 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002098:	e043      	b.n	8002122 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020a2:	d140      	bne.n	8002126 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a8:	e03d      	b.n	8002126 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020b2:	d121      	bne.n	80020f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d837      	bhi.n	800212a <DMA_CheckFifoParam+0xda>
 80020ba:	a201      	add	r2, pc, #4	@ (adr r2, 80020c0 <DMA_CheckFifoParam+0x70>)
 80020bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c0:	080020d1 	.word	0x080020d1
 80020c4:	080020d7 	.word	0x080020d7
 80020c8:	080020d1 	.word	0x080020d1
 80020cc:	080020e9 	.word	0x080020e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
      break;
 80020d4:	e030      	b.n	8002138 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d025      	beq.n	800212e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e6:	e022      	b.n	800212e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020f0:	d11f      	bne.n	8002132 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020f6:	e01c      	b.n	8002132 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d903      	bls.n	8002106 <DMA_CheckFifoParam+0xb6>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d003      	beq.n	800210c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002104:	e018      	b.n	8002138 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	73fb      	strb	r3, [r7, #15]
      break;
 800210a:	e015      	b.n	8002138 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00e      	beq.n	8002136 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
      break;
 800211c:	e00b      	b.n	8002136 <DMA_CheckFifoParam+0xe6>
      break;
 800211e:	bf00      	nop
 8002120:	e00a      	b.n	8002138 <DMA_CheckFifoParam+0xe8>
      break;
 8002122:	bf00      	nop
 8002124:	e008      	b.n	8002138 <DMA_CheckFifoParam+0xe8>
      break;
 8002126:	bf00      	nop
 8002128:	e006      	b.n	8002138 <DMA_CheckFifoParam+0xe8>
      break;
 800212a:	bf00      	nop
 800212c:	e004      	b.n	8002138 <DMA_CheckFifoParam+0xe8>
      break;
 800212e:	bf00      	nop
 8002130:	e002      	b.n	8002138 <DMA_CheckFifoParam+0xe8>
      break;   
 8002132:	bf00      	nop
 8002134:	e000      	b.n	8002138 <DMA_CheckFifoParam+0xe8>
      break;
 8002136:	bf00      	nop
    }
  } 
  
  return status; 
 8002138:	7bfb      	ldrb	r3, [r7, #15]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop

08002148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	@ 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	e159      	b.n	8002418 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002164:	2201      	movs	r2, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	429a      	cmp	r2, r3
 800217e:	f040 8148 	bne.w	8002412 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d005      	beq.n	800219a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002196:	2b02      	cmp	r3, #2
 8002198:	d130      	bne.n	80021fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	2203      	movs	r2, #3
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 0201 	and.w	r2, r3, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	2b03      	cmp	r3, #3
 8002206:	d017      	beq.n	8002238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d123      	bne.n	800228c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	08da      	lsrs	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3208      	adds	r2, #8
 800224c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	220f      	movs	r2, #15
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	08da      	lsrs	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3208      	adds	r2, #8
 8002286:	69b9      	ldr	r1, [r7, #24]
 8002288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0203 	and.w	r2, r3, #3
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80a2 	beq.w	8002412 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	4b57      	ldr	r3, [pc, #348]	@ (8002430 <HAL_GPIO_Init+0x2e8>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	4a56      	ldr	r2, [pc, #344]	@ (8002430 <HAL_GPIO_Init+0x2e8>)
 80022d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022de:	4b54      	ldr	r3, [pc, #336]	@ (8002430 <HAL_GPIO_Init+0x2e8>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ea:	4a52      	ldr	r2, [pc, #328]	@ (8002434 <HAL_GPIO_Init+0x2ec>)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3302      	adds	r3, #2
 80022f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	220f      	movs	r2, #15
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a49      	ldr	r2, [pc, #292]	@ (8002438 <HAL_GPIO_Init+0x2f0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d019      	beq.n	800234a <HAL_GPIO_Init+0x202>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a48      	ldr	r2, [pc, #288]	@ (800243c <HAL_GPIO_Init+0x2f4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_GPIO_Init+0x1fe>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a47      	ldr	r2, [pc, #284]	@ (8002440 <HAL_GPIO_Init+0x2f8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00d      	beq.n	8002342 <HAL_GPIO_Init+0x1fa>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a46      	ldr	r2, [pc, #280]	@ (8002444 <HAL_GPIO_Init+0x2fc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d007      	beq.n	800233e <HAL_GPIO_Init+0x1f6>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a45      	ldr	r2, [pc, #276]	@ (8002448 <HAL_GPIO_Init+0x300>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d101      	bne.n	800233a <HAL_GPIO_Init+0x1f2>
 8002336:	2304      	movs	r3, #4
 8002338:	e008      	b.n	800234c <HAL_GPIO_Init+0x204>
 800233a:	2307      	movs	r3, #7
 800233c:	e006      	b.n	800234c <HAL_GPIO_Init+0x204>
 800233e:	2303      	movs	r3, #3
 8002340:	e004      	b.n	800234c <HAL_GPIO_Init+0x204>
 8002342:	2302      	movs	r3, #2
 8002344:	e002      	b.n	800234c <HAL_GPIO_Init+0x204>
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <HAL_GPIO_Init+0x204>
 800234a:	2300      	movs	r3, #0
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	f002 0203 	and.w	r2, r2, #3
 8002352:	0092      	lsls	r2, r2, #2
 8002354:	4093      	lsls	r3, r2
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800235c:	4935      	ldr	r1, [pc, #212]	@ (8002434 <HAL_GPIO_Init+0x2ec>)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	089b      	lsrs	r3, r3, #2
 8002362:	3302      	adds	r3, #2
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800236a:	4b38      	ldr	r3, [pc, #224]	@ (800244c <HAL_GPIO_Init+0x304>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800238e:	4a2f      	ldr	r2, [pc, #188]	@ (800244c <HAL_GPIO_Init+0x304>)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002394:	4b2d      	ldr	r3, [pc, #180]	@ (800244c <HAL_GPIO_Init+0x304>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023b8:	4a24      	ldr	r2, [pc, #144]	@ (800244c <HAL_GPIO_Init+0x304>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023be:	4b23      	ldr	r3, [pc, #140]	@ (800244c <HAL_GPIO_Init+0x304>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023e2:	4a1a      	ldr	r2, [pc, #104]	@ (800244c <HAL_GPIO_Init+0x304>)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e8:	4b18      	ldr	r3, [pc, #96]	@ (800244c <HAL_GPIO_Init+0x304>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800240c:	4a0f      	ldr	r2, [pc, #60]	@ (800244c <HAL_GPIO_Init+0x304>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3301      	adds	r3, #1
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	2b0f      	cmp	r3, #15
 800241c:	f67f aea2 	bls.w	8002164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	3724      	adds	r7, #36	@ 0x24
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800
 8002434:	40013800 	.word	0x40013800
 8002438:	40020000 	.word	0x40020000
 800243c:	40020400 	.word	0x40020400
 8002440:	40020800 	.word	0x40020800
 8002444:	40020c00 	.word	0x40020c00
 8002448:	40021000 	.word	0x40021000
 800244c:	40013c00 	.word	0x40013c00

08002450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
 800245c:	4613      	mov	r3, r2
 800245e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002460:	787b      	ldrb	r3, [r7, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800246c:	e003      	b.n	8002476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	041a      	lsls	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	619a      	str	r2, [r3, #24]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e267      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d075      	beq.n	800258e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024a2:	4b88      	ldr	r3, [pc, #544]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d00c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ae:	4b85      	ldr	r3, [pc, #532]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d112      	bne.n	80024e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ba:	4b82      	ldr	r3, [pc, #520]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024c6:	d10b      	bne.n	80024e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	4b7e      	ldr	r3, [pc, #504]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d05b      	beq.n	800258c <HAL_RCC_OscConfig+0x108>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d157      	bne.n	800258c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e242      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e8:	d106      	bne.n	80024f8 <HAL_RCC_OscConfig+0x74>
 80024ea:	4b76      	ldr	r3, [pc, #472]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a75      	ldr	r2, [pc, #468]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e01d      	b.n	8002534 <HAL_RCC_OscConfig+0xb0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x98>
 8002502:	4b70      	ldr	r3, [pc, #448]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a6f      	ldr	r2, [pc, #444]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b6d      	ldr	r3, [pc, #436]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6c      	ldr	r2, [pc, #432]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e00b      	b.n	8002534 <HAL_RCC_OscConfig+0xb0>
 800251c:	4b69      	ldr	r3, [pc, #420]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a68      	ldr	r2, [pc, #416]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b66      	ldr	r3, [pc, #408]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a65      	ldr	r2, [pc, #404]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 800252e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7ff f9a6 	bl	800188c <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002544:	f7ff f9a2 	bl	800188c <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	@ 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e207      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b5b      	ldr	r3, [pc, #364]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0xc0>
 8002562:	e014      	b.n	800258e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7ff f992 	bl	800188c <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800256c:	f7ff f98e 	bl	800188c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	@ 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e1f3      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	4b51      	ldr	r3, [pc, #324]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0xe8>
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d063      	beq.n	8002662 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800259a:	4b4a      	ldr	r3, [pc, #296]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a6:	4b47      	ldr	r3, [pc, #284]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d11c      	bne.n	80025ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b2:	4b44      	ldr	r3, [pc, #272]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d116      	bne.n	80025ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025be:	4b41      	ldr	r3, [pc, #260]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_RCC_OscConfig+0x152>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e1c7      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d6:	4b3b      	ldr	r3, [pc, #236]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4937      	ldr	r1, [pc, #220]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	e03a      	b.n	8002662 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f4:	4b34      	ldr	r3, [pc, #208]	@ (80026c8 <HAL_RCC_OscConfig+0x244>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fa:	f7ff f947 	bl	800188c <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002602:	f7ff f943 	bl	800188c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e1a8      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	4b2b      	ldr	r3, [pc, #172]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002620:	4b28      	ldr	r3, [pc, #160]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4925      	ldr	r1, [pc, #148]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]
 8002634:	e015      	b.n	8002662 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002636:	4b24      	ldr	r3, [pc, #144]	@ (80026c8 <HAL_RCC_OscConfig+0x244>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7ff f926 	bl	800188c <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002644:	f7ff f922 	bl	800188c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e187      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	4b1b      	ldr	r3, [pc, #108]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d036      	beq.n	80026dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d016      	beq.n	80026a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002676:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <HAL_RCC_OscConfig+0x248>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7ff f906 	bl	800188c <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002684:	f7ff f902 	bl	800188c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e167      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	4b0b      	ldr	r3, [pc, #44]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x200>
 80026a2:	e01b      	b.n	80026dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a4:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <HAL_RCC_OscConfig+0x248>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026aa:	f7ff f8ef 	bl	800188c <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	e00e      	b.n	80026d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b2:	f7ff f8eb 	bl	800188c <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d907      	bls.n	80026d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e150      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
 80026c4:	40023800 	.word	0x40023800
 80026c8:	42470000 	.word	0x42470000
 80026cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d0:	4b88      	ldr	r3, [pc, #544]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80026d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ea      	bne.n	80026b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8097 	beq.w	8002818 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ee:	4b81      	ldr	r3, [pc, #516]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10f      	bne.n	800271a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	4b7d      	ldr	r3, [pc, #500]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002702:	4a7c      	ldr	r2, [pc, #496]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002708:	6413      	str	r3, [r2, #64]	@ 0x40
 800270a:	4b7a      	ldr	r3, [pc, #488]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002716:	2301      	movs	r3, #1
 8002718:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271a:	4b77      	ldr	r3, [pc, #476]	@ (80028f8 <HAL_RCC_OscConfig+0x474>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d118      	bne.n	8002758 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002726:	4b74      	ldr	r3, [pc, #464]	@ (80028f8 <HAL_RCC_OscConfig+0x474>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a73      	ldr	r2, [pc, #460]	@ (80028f8 <HAL_RCC_OscConfig+0x474>)
 800272c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002732:	f7ff f8ab 	bl	800188c <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273a:	f7ff f8a7 	bl	800188c <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e10c      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	4b6a      	ldr	r3, [pc, #424]	@ (80028f8 <HAL_RCC_OscConfig+0x474>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x2ea>
 8002760:	4b64      	ldr	r3, [pc, #400]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002764:	4a63      	ldr	r2, [pc, #396]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6713      	str	r3, [r2, #112]	@ 0x70
 800276c:	e01c      	b.n	80027a8 <HAL_RCC_OscConfig+0x324>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b05      	cmp	r3, #5
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0x30c>
 8002776:	4b5f      	ldr	r3, [pc, #380]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277a:	4a5e      	ldr	r2, [pc, #376]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	6713      	str	r3, [r2, #112]	@ 0x70
 8002782:	4b5c      	ldr	r3, [pc, #368]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002786:	4a5b      	ldr	r2, [pc, #364]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6713      	str	r3, [r2, #112]	@ 0x70
 800278e:	e00b      	b.n	80027a8 <HAL_RCC_OscConfig+0x324>
 8002790:	4b58      	ldr	r3, [pc, #352]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002794:	4a57      	ldr	r2, [pc, #348]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	6713      	str	r3, [r2, #112]	@ 0x70
 800279c:	4b55      	ldr	r3, [pc, #340]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a0:	4a54      	ldr	r2, [pc, #336]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80027a2:	f023 0304 	bic.w	r3, r3, #4
 80027a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d015      	beq.n	80027dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7ff f86c 	bl	800188c <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b8:	f7ff f868 	bl	800188c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e0cb      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ce:	4b49      	ldr	r3, [pc, #292]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0ee      	beq.n	80027b8 <HAL_RCC_OscConfig+0x334>
 80027da:	e014      	b.n	8002806 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027dc:	f7ff f856 	bl	800188c <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7ff f852 	bl	800188c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e0b5      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fa:	4b3e      	ldr	r3, [pc, #248]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1ee      	bne.n	80027e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d105      	bne.n	8002818 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280c:	4b39      	ldr	r3, [pc, #228]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	4a38      	ldr	r2, [pc, #224]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002812:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002816:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80a1 	beq.w	8002964 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002822:	4b34      	ldr	r3, [pc, #208]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b08      	cmp	r3, #8
 800282c:	d05c      	beq.n	80028e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d141      	bne.n	80028ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002836:	4b31      	ldr	r3, [pc, #196]	@ (80028fc <HAL_RCC_OscConfig+0x478>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7ff f826 	bl	800188c <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002844:	f7ff f822 	bl	800188c <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e087      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	4b27      	ldr	r3, [pc, #156]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	019b      	lsls	r3, r3, #6
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002878:	085b      	lsrs	r3, r3, #1
 800287a:	3b01      	subs	r3, #1
 800287c:	041b      	lsls	r3, r3, #16
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	491b      	ldr	r1, [pc, #108]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800288c:	4b1b      	ldr	r3, [pc, #108]	@ (80028fc <HAL_RCC_OscConfig+0x478>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe fffb 	bl	800188c <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289a:	f7fe fff7 	bl	800188c <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e05c      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ac:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x416>
 80028b8:	e054      	b.n	8002964 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ba:	4b10      	ldr	r3, [pc, #64]	@ (80028fc <HAL_RCC_OscConfig+0x478>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7fe ffe4 	bl	800188c <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe ffe0 	bl	800188c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e045      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x444>
 80028e6:	e03d      	b.n	8002964 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e038      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40007000 	.word	0x40007000
 80028fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002900:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <HAL_RCC_OscConfig+0x4ec>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d028      	beq.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d121      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d11a      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002930:	4013      	ands	r3, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002936:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002938:	4293      	cmp	r3, r2
 800293a:	d111      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	3b01      	subs	r3, #1
 800294a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d107      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800

08002974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0cc      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002988:	4b68      	ldr	r3, [pc, #416]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d90c      	bls.n	80029b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b65      	ldr	r3, [pc, #404]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b63      	ldr	r3, [pc, #396]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0b8      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d020      	beq.n	80029fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c8:	4b59      	ldr	r3, [pc, #356]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a58      	ldr	r2, [pc, #352]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029e0:	4b53      	ldr	r3, [pc, #332]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4a52      	ldr	r2, [pc, #328]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ec:	4b50      	ldr	r3, [pc, #320]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	494d      	ldr	r1, [pc, #308]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d044      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b47      	ldr	r3, [pc, #284]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d119      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e07f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d003      	beq.n	8002a32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a32:	4b3f      	ldr	r3, [pc, #252]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e06f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a42:	4b3b      	ldr	r3, [pc, #236]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e067      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a52:	4b37      	ldr	r3, [pc, #220]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f023 0203 	bic.w	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4934      	ldr	r1, [pc, #208]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a64:	f7fe ff12 	bl	800188c <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	e00a      	b.n	8002a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6c:	f7fe ff0e 	bl	800188c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e04f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	4b2b      	ldr	r3, [pc, #172]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 020c 	and.w	r2, r3, #12
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d1eb      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a94:	4b25      	ldr	r3, [pc, #148]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d20c      	bcs.n	8002abc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b22      	ldr	r3, [pc, #136]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	4b20      	ldr	r3, [pc, #128]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e032      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac8:	4b19      	ldr	r3, [pc, #100]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4916      	ldr	r1, [pc, #88]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d009      	beq.n	8002afa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae6:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	490e      	ldr	r1, [pc, #56]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002afa:	f000 f821 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4b0b      	ldr	r3, [pc, #44]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	490a      	ldr	r1, [pc, #40]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	5ccb      	ldrb	r3, [r1, r3]
 8002b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b12:	4a09      	ldr	r2, [pc, #36]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b16:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe fd98 	bl	8001650 <HAL_InitTick>

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023c00 	.word	0x40023c00
 8002b30:	40023800 	.word	0x40023800
 8002b34:	08005428 	.word	0x08005428
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	20000004 	.word	0x20000004

08002b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b44:	b094      	sub	sp, #80	@ 0x50
 8002b46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b50:	2300      	movs	r3, #0
 8002b52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b58:	4b79      	ldr	r3, [pc, #484]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d00d      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x40>
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	f200 80e1 	bhi.w	8002d2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0x34>
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d003      	beq.n	8002b7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b72:	e0db      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b74:	4b73      	ldr	r3, [pc, #460]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b76:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002b78:	e0db      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b7a:	4b73      	ldr	r3, [pc, #460]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b7e:	e0d8      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b80:	4b6f      	ldr	r3, [pc, #444]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b88:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d063      	beq.n	8002c5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b96:	4b6a      	ldr	r3, [pc, #424]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	099b      	lsrs	r3, r3, #6
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ba0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002baa:	2300      	movs	r3, #0
 8002bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bb2:	4622      	mov	r2, r4
 8002bb4:	462b      	mov	r3, r5
 8002bb6:	f04f 0000 	mov.w	r0, #0
 8002bba:	f04f 0100 	mov.w	r1, #0
 8002bbe:	0159      	lsls	r1, r3, #5
 8002bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc4:	0150      	lsls	r0, r2, #5
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4621      	mov	r1, r4
 8002bcc:	1a51      	subs	r1, r2, r1
 8002bce:	6139      	str	r1, [r7, #16]
 8002bd0:	4629      	mov	r1, r5
 8002bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002be4:	4659      	mov	r1, fp
 8002be6:	018b      	lsls	r3, r1, #6
 8002be8:	4651      	mov	r1, sl
 8002bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bee:	4651      	mov	r1, sl
 8002bf0:	018a      	lsls	r2, r1, #6
 8002bf2:	4651      	mov	r1, sl
 8002bf4:	ebb2 0801 	subs.w	r8, r2, r1
 8002bf8:	4659      	mov	r1, fp
 8002bfa:	eb63 0901 	sbc.w	r9, r3, r1
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c12:	4690      	mov	r8, r2
 8002c14:	4699      	mov	r9, r3
 8002c16:	4623      	mov	r3, r4
 8002c18:	eb18 0303 	adds.w	r3, r8, r3
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	462b      	mov	r3, r5
 8002c20:	eb49 0303 	adc.w	r3, r9, r3
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c32:	4629      	mov	r1, r5
 8002c34:	024b      	lsls	r3, r1, #9
 8002c36:	4621      	mov	r1, r4
 8002c38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	024a      	lsls	r2, r1, #9
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c46:	2200      	movs	r2, #0
 8002c48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c50:	f7fd fac6 	bl	80001e0 <__aeabi_uldivmod>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4613      	mov	r3, r2
 8002c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c5c:	e058      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5e:	4b38      	ldr	r3, [pc, #224]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	2200      	movs	r2, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	4611      	mov	r1, r2
 8002c6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	2300      	movs	r3, #0
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c78:	4642      	mov	r2, r8
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	f04f 0000 	mov.w	r0, #0
 8002c80:	f04f 0100 	mov.w	r1, #0
 8002c84:	0159      	lsls	r1, r3, #5
 8002c86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c8a:	0150      	lsls	r0, r2, #5
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4641      	mov	r1, r8
 8002c92:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c96:	4649      	mov	r1, r9
 8002c98:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ca8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cb0:	ebb2 040a 	subs.w	r4, r2, sl
 8002cb4:	eb63 050b 	sbc.w	r5, r3, fp
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	00eb      	lsls	r3, r5, #3
 8002cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cc6:	00e2      	lsls	r2, r4, #3
 8002cc8:	4614      	mov	r4, r2
 8002cca:	461d      	mov	r5, r3
 8002ccc:	4643      	mov	r3, r8
 8002cce:	18e3      	adds	r3, r4, r3
 8002cd0:	603b      	str	r3, [r7, #0]
 8002cd2:	464b      	mov	r3, r9
 8002cd4:	eb45 0303 	adc.w	r3, r5, r3
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	028b      	lsls	r3, r1, #10
 8002cea:	4621      	mov	r1, r4
 8002cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	028a      	lsls	r2, r1, #10
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	61fa      	str	r2, [r7, #28]
 8002d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d04:	f7fd fa6c 	bl	80001e0 <__aeabi_uldivmod>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d10:	4b0b      	ldr	r3, [pc, #44]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	0c1b      	lsrs	r3, r3, #16
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002d20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d2a:	e002      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3750      	adds	r7, #80	@ 0x50
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800
 8002d44:	00f42400 	.word	0x00f42400
 8002d48:	007a1200 	.word	0x007a1200

08002d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d50:	4b03      	ldr	r3, [pc, #12]	@ (8002d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000000 	.word	0x20000000

08002d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d68:	f7ff fff0 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	0b5b      	lsrs	r3, r3, #13
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	4903      	ldr	r1, [pc, #12]	@ (8002d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40023800 	.word	0x40023800
 8002d88:	08005438 	.word	0x08005438

08002d8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	220f      	movs	r2, #15
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d9c:	4b12      	ldr	r3, [pc, #72]	@ (8002de8 <HAL_RCC_GetClockConfig+0x5c>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0203 	and.w	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002da8:	4b0f      	ldr	r3, [pc, #60]	@ (8002de8 <HAL_RCC_GetClockConfig+0x5c>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002db4:	4b0c      	ldr	r3, [pc, #48]	@ (8002de8 <HAL_RCC_GetClockConfig+0x5c>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002dc0:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <HAL_RCC_GetClockConfig+0x5c>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	08db      	lsrs	r3, r3, #3
 8002dc6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dce:	4b07      	ldr	r3, [pc, #28]	@ (8002dec <HAL_RCC_GetClockConfig+0x60>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0207 	and.w	r2, r3, #7
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	601a      	str	r2, [r3, #0]
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40023c00 	.word	0x40023c00

08002df0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e07b      	b.n	8002efa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d108      	bne.n	8002e1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e12:	d009      	beq.n	8002e28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	61da      	str	r2, [r3, #28]
 8002e1a:	e005      	b.n	8002e28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe fb2c 	bl	80014a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eac:	ea42 0103 	orr.w	r1, r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	0c1b      	lsrs	r3, r3, #16
 8002ec6:	f003 0104 	and.w	r1, r3, #4
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	f003 0210 	and.w	r2, r3, #16
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ee8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_SPI_Transmit_DMA+0x20>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e097      	b.n	8003054 <HAL_SPI_Transmit_DMA+0x150>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d002      	beq.n	8002f3e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f3c:	e085      	b.n	800304a <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_SPI_Transmit_DMA+0x46>
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d102      	bne.n	8002f50 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f4e:	e07c      	b.n	800304a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2203      	movs	r2, #3
 8002f54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	88fa      	ldrh	r2, [r7, #6]
 8002f68:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	88fa      	ldrh	r2, [r7, #6]
 8002f6e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f96:	d10f      	bne.n	8002fb8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fa6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fb6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fbc:	4a27      	ldr	r2, [pc, #156]	@ (800305c <HAL_SPI_Transmit_DMA+0x158>)
 8002fbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc4:	4a26      	ldr	r2, [pc, #152]	@ (8003060 <HAL_SPI_Transmit_DMA+0x15c>)
 8002fc6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fcc:	4a25      	ldr	r2, [pc, #148]	@ (8003064 <HAL_SPI_Transmit_DMA+0x160>)
 8002fce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002ff0:	f7fe fde8 	bl	8001bc4 <HAL_DMA_Start_IT>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffe:	f043 0210 	orr.w	r2, r3, #16
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]

    goto error;
 800300a:	e01e      	b.n	800304a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003016:	2b40      	cmp	r3, #64	@ 0x40
 8003018:	d007      	beq.n	800302a <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003028:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0220 	orr.w	r2, r2, #32
 8003038:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0202 	orr.w	r2, r2, #2
 8003048:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003052:	7dfb      	ldrb	r3, [r7, #23]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	08003651 	.word	0x08003651
 8003060:	08003471 	.word	0x08003471
 8003064:	080036a5 	.word	0x080036a5

08003068 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	4613      	mov	r3, r2
 8003074:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d002      	beq.n	800308c <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8003086:	2302      	movs	r3, #2
 8003088:	75fb      	strb	r3, [r7, #23]
    goto error;
 800308a:	e0a2      	b.n	80031d2 <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d110      	bne.n	80030b6 <HAL_SPI_Receive_DMA+0x4e>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800309c:	d10b      	bne.n	80030b6 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2204      	movs	r2, #4
 80030a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f89f 	bl	80031f0 <HAL_SPI_TransmitReceive_DMA>
 80030b2:	4603      	mov	r3, r0
 80030b4:	e092      	b.n	80031dc <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_SPI_Receive_DMA+0x5c>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e08b      	b.n	80031dc <HAL_SPI_Receive_DMA+0x174>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if ((pData == NULL) || (Size == 0U))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_SPI_Receive_DMA+0x70>
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030dc:	e079      	b.n	80031d2 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2204      	movs	r2, #4
 80030e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	88fa      	ldrh	r2, [r7, #6]
 80030f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	88fa      	ldrh	r2, [r7, #6]
 80030fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800311e:	d10f      	bne.n	8003140 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800312e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800313e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003144:	4a27      	ldr	r2, [pc, #156]	@ (80031e4 <HAL_SPI_Receive_DMA+0x17c>)
 8003146:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800314c:	4a26      	ldr	r2, [pc, #152]	@ (80031e8 <HAL_SPI_Receive_DMA+0x180>)
 800314e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003154:	4a25      	ldr	r2, [pc, #148]	@ (80031ec <HAL_SPI_Receive_DMA+0x184>)
 8003156:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315c:	2200      	movs	r2, #0
 800315e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	330c      	adds	r3, #12
 800316a:	4619      	mov	r1, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003170:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003176:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003178:	f7fe fd24 	bl	8001bc4 <HAL_DMA_Start_IT>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d008      	beq.n	8003194 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003186:	f043 0210 	orr.w	r2, r3, #16
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003192:	e01e      	b.n	80031d2 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319e:	2b40      	cmp	r3, #64	@ 0x40
 80031a0:	d007      	beq.n	80031b2 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031b0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0220 	orr.w	r2, r2, #32
 80031c0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0201 	orr.w	r2, r2, #1
 80031d0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80031da:	7dfb      	ldrb	r3, [r7, #23]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	0800366d 	.word	0x0800366d
 80031e8:	08003519 	.word	0x08003519
 80031ec:	080036a5 	.word	0x080036a5

080031f0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_SPI_TransmitReceive_DMA+0x20>
 800320c:	2302      	movs	r3, #2
 800320e:	e0db      	b.n	80033c8 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800321e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003226:	7dbb      	ldrb	r3, [r7, #22]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d00d      	beq.n	8003248 <HAL_SPI_TransmitReceive_DMA+0x58>
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003232:	d106      	bne.n	8003242 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d102      	bne.n	8003242 <HAL_SPI_TransmitReceive_DMA+0x52>
 800323c:	7dbb      	ldrb	r3, [r7, #22]
 800323e:	2b04      	cmp	r3, #4
 8003240:	d002      	beq.n	8003248 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003242:	2302      	movs	r3, #2
 8003244:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003246:	e0ba      	b.n	80033be <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003254:	887b      	ldrh	r3, [r7, #2]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800325e:	e0ae      	b.n	80033be <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b04      	cmp	r3, #4
 800326a:	d003      	beq.n	8003274 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2205      	movs	r2, #5
 8003270:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	887a      	ldrh	r2, [r7, #2]
 8003284:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	887a      	ldrh	r2, [r7, #2]
 800328a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	887a      	ldrh	r2, [r7, #2]
 8003296:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	887a      	ldrh	r2, [r7, #2]
 800329c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d108      	bne.n	80032c8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ba:	4a45      	ldr	r2, [pc, #276]	@ (80033d0 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 80032bc:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c2:	4a44      	ldr	r2, [pc, #272]	@ (80033d4 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80032c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032c6:	e007      	b.n	80032d8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032cc:	4a42      	ldr	r2, [pc, #264]	@ (80033d8 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d4:	4a41      	ldr	r2, [pc, #260]	@ (80033dc <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 80032d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032dc:	4a40      	ldr	r2, [pc, #256]	@ (80033e0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80032de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e4:	2200      	movs	r2, #0
 80032e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	330c      	adds	r3, #12
 80032f2:	4619      	mov	r1, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032fe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003300:	f7fe fc60 	bl	8001bc4 <HAL_DMA_Start_IT>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330e:	f043 0210 	orr.w	r2, r3, #16
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	75fb      	strb	r3, [r7, #23]

    goto error;
 800331a:	e050      	b.n	80033be <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003330:	2200      	movs	r2, #0
 8003332:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003338:	2200      	movs	r2, #0
 800333a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003340:	2200      	movs	r2, #0
 8003342:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003348:	2200      	movs	r2, #0
 800334a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003354:	4619      	mov	r1, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	330c      	adds	r3, #12
 800335c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003362:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003364:	f7fe fc2e 	bl	8001bc4 <HAL_DMA_Start_IT>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003372:	f043 0210 	orr.w	r2, r3, #16
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800337e:	e01e      	b.n	80033be <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338a:	2b40      	cmp	r3, #64	@ 0x40
 800338c:	d007      	beq.n	800339e <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800339c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0220 	orr.w	r2, r2, #32
 80033ac:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0202 	orr.w	r2, r2, #2
 80033bc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	0800366d 	.word	0x0800366d
 80033d4:	08003519 	.word	0x08003519
 80033d8:	08003689 	.word	0x08003689
 80033dc:	080035c1 	.word	0x080035c1
 80033e0:	080036a5 	.word	0x080036a5

080033e4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800347e:	f7fe fa05 	bl	800188c <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003492:	d03b      	beq.n	800350c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0220 	bic.w	r2, r2, #32
 80034a2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0202 	bic.w	r2, r2, #2
 80034b2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	2164      	movs	r1, #100	@ 0x64
 80034b8:	6978      	ldr	r0, [r7, #20]
 80034ba:	f000 fa01 	bl	80038c0 <SPI_EndRxTxTransaction>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c8:	f043 0220 	orr.w	r2, r3, #32
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2200      	movs	r2, #0
 80034f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003504:	6978      	ldr	r0, [r7, #20]
 8003506:	f7ff ffa9 	bl	800345c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800350a:	e002      	b.n	8003512 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800350c:	6978      	ldr	r0, [r7, #20]
 800350e:	f7ff ff69 	bl	80033e4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003524:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003526:	f7fe f9b1 	bl	800188c <HAL_GetTick>
 800352a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003536:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800353a:	d03b      	beq.n	80035b4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0220 	bic.w	r2, r2, #32
 800354a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10d      	bne.n	8003570 <SPI_DMAReceiveCplt+0x58>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800355c:	d108      	bne.n	8003570 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0203 	bic.w	r2, r2, #3
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	e007      	b.n	8003580 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	2164      	movs	r1, #100	@ 0x64
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f935 	bl	80037f4 <SPI_EndRxTransaction>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f7ff ff55 	bl	800345c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80035b2:	e002      	b.n	80035ba <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f7ff ff1f 	bl	80033f8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035cc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035ce:	f7fe f95d 	bl	800188c <HAL_GetTick>
 80035d2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035e2:	d02f      	beq.n	8003644 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0220 	bic.w	r2, r2, #32
 80035f2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	2164      	movs	r1, #100	@ 0x64
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f961 	bl	80038c0 <SPI_EndRxTxTransaction>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d005      	beq.n	8003610 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003608:	f043 0220 	orr.w	r2, r3, #32
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0203 	bic.w	r2, r2, #3
 800361e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f7ff ff0d 	bl	800345c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003642:	e002      	b.n	800364a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7ff fee1 	bl	800340c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f7ff fede 	bl	8003420 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003678:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f7ff feda 	bl	8003434 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003680:	bf00      	nop
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003694:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f7ff fed6 	bl	8003448 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800369c:	bf00      	nop
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0203 	bic.w	r2, r2, #3
 80036c0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c6:	f043 0210 	orr.w	r2, r3, #16
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f7ff fec0 	bl	800345c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80036dc:	bf00      	nop
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036f4:	f7fe f8ca 	bl	800188c <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	4413      	add	r3, r2
 8003702:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003704:	f7fe f8c2 	bl	800188c <HAL_GetTick>
 8003708:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800370a:	4b39      	ldr	r3, [pc, #228]	@ (80037f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	015b      	lsls	r3, r3, #5
 8003710:	0d1b      	lsrs	r3, r3, #20
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	fb02 f303 	mul.w	r3, r2, r3
 8003718:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800371a:	e054      	b.n	80037c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003722:	d050      	beq.n	80037c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003724:	f7fe f8b2 	bl	800188c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	429a      	cmp	r2, r3
 8003732:	d902      	bls.n	800373a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d13d      	bne.n	80037b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003748:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003752:	d111      	bne.n	8003778 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800375c:	d004      	beq.n	8003768 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003766:	d107      	bne.n	8003778 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003776:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003780:	d10f      	bne.n	80037a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e017      	b.n	80037e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4013      	ands	r3, r2
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	bf0c      	ite	eq
 80037d6:	2301      	moveq	r3, #1
 80037d8:	2300      	movne	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	461a      	mov	r2, r3
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d19b      	bne.n	800371c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000000 	.word	0x20000000

080037f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003808:	d111      	bne.n	800382e <SPI_EndRxTransaction+0x3a>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003812:	d004      	beq.n	800381e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800381c:	d107      	bne.n	800382e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800382c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003836:	d12a      	bne.n	800388e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003840:	d012      	beq.n	8003868 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2200      	movs	r2, #0
 800384a:	2180      	movs	r1, #128	@ 0x80
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f7ff ff49 	bl	80036e4 <SPI_WaitFlagStateUntilTimeout>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d02d      	beq.n	80038b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385c:	f043 0220 	orr.w	r2, r3, #32
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e026      	b.n	80038b6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2200      	movs	r2, #0
 8003870:	2101      	movs	r1, #1
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7ff ff36 	bl	80036e4 <SPI_WaitFlagStateUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d01a      	beq.n	80038b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003882:	f043 0220 	orr.w	r2, r3, #32
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e013      	b.n	80038b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2200      	movs	r2, #0
 8003896:	2101      	movs	r1, #1
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f7ff ff23 	bl	80036e4 <SPI_WaitFlagStateUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a8:	f043 0220 	orr.w	r2, r3, #32
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e000      	b.n	80038b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2201      	movs	r2, #1
 80038d4:	2102      	movs	r1, #2
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f7ff ff04 	bl	80036e4 <SPI_WaitFlagStateUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e6:	f043 0220 	orr.w	r2, r3, #32
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e032      	b.n	8003958 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003960 <SPI_EndRxTxTransaction+0xa0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003964 <SPI_EndRxTxTransaction+0xa4>)
 80038f8:	fba2 2303 	umull	r2, r3, r2, r3
 80038fc:	0d5b      	lsrs	r3, r3, #21
 80038fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003910:	d112      	bne.n	8003938 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2200      	movs	r2, #0
 800391a:	2180      	movs	r1, #128	@ 0x80
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7ff fee1 	bl	80036e4 <SPI_WaitFlagStateUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d016      	beq.n	8003956 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392c:	f043 0220 	orr.w	r2, r3, #32
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e00f      	b.n	8003958 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	3b01      	subs	r3, #1
 8003942:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800394e:	2b80      	cmp	r3, #128	@ 0x80
 8003950:	d0f2      	beq.n	8003938 <SPI_EndRxTxTransaction+0x78>
 8003952:	e000      	b.n	8003956 <SPI_EndRxTxTransaction+0x96>
        break;
 8003954:	bf00      	nop
  }

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000000 	.word	0x20000000
 8003964:	165e9f81 	.word	0x165e9f81

08003968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e041      	b.n	80039fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f839 	bl	8003a06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	4619      	mov	r1, r3
 80039a6:	4610      	mov	r0, r2
 80039a8:	f000 f9b2 	bl	8003d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d001      	beq.n	8003a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e044      	b.n	8003abe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1e      	ldr	r2, [pc, #120]	@ (8003acc <HAL_TIM_Base_Start_IT+0xb0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d018      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x6c>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a5e:	d013      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x6c>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00e      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x6c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a19      	ldr	r2, [pc, #100]	@ (8003ad4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d009      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x6c>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a17      	ldr	r2, [pc, #92]	@ (8003ad8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d004      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x6c>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a16      	ldr	r2, [pc, #88]	@ (8003adc <HAL_TIM_Base_Start_IT+0xc0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d111      	bne.n	8003aac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d010      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0201 	orr.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aaa:	e007      	b.n	8003abc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40010000 	.word	0x40010000
 8003ad0:	40000400 	.word	0x40000400
 8003ad4:	40000800 	.word	0x40000800
 8003ad8:	40000c00 	.word	0x40000c00
 8003adc:	40014000 	.word	0x40014000

08003ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d020      	beq.n	8003b44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d01b      	beq.n	8003b44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0202 	mvn.w	r2, #2
 8003b14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8d2 	bl	8003cd4 <HAL_TIM_IC_CaptureCallback>
 8003b30:	e005      	b.n	8003b3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f8c4 	bl	8003cc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f8d5 	bl	8003ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d020      	beq.n	8003b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01b      	beq.n	8003b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0204 	mvn.w	r2, #4
 8003b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2202      	movs	r2, #2
 8003b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f8ac 	bl	8003cd4 <HAL_TIM_IC_CaptureCallback>
 8003b7c:	e005      	b.n	8003b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f89e 	bl	8003cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f8af 	bl	8003ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d020      	beq.n	8003bdc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01b      	beq.n	8003bdc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f06f 0208 	mvn.w	r2, #8
 8003bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f886 	bl	8003cd4 <HAL_TIM_IC_CaptureCallback>
 8003bc8:	e005      	b.n	8003bd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f878 	bl	8003cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f889 	bl	8003ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d020      	beq.n	8003c28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d01b      	beq.n	8003c28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0210 	mvn.w	r2, #16
 8003bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2208      	movs	r2, #8
 8003bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f860 	bl	8003cd4 <HAL_TIM_IC_CaptureCallback>
 8003c14:	e005      	b.n	8003c22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f852 	bl	8003cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f863 	bl	8003ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00c      	beq.n	8003c4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d007      	beq.n	8003c4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 0201 	mvn.w	r2, #1
 8003c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fd fbdc 	bl	8001404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00c      	beq.n	8003c70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f8e6 	bl	8003e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00c      	beq.n	8003c94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f834 	bl	8003cfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00c      	beq.n	8003cb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d007      	beq.n	8003cb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0220 	mvn.w	r2, #32
 8003cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f8b8 	bl	8003e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a3a      	ldr	r2, [pc, #232]	@ (8003e0c <TIM_Base_SetConfig+0xfc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00f      	beq.n	8003d48 <TIM_Base_SetConfig+0x38>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d2e:	d00b      	beq.n	8003d48 <TIM_Base_SetConfig+0x38>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a37      	ldr	r2, [pc, #220]	@ (8003e10 <TIM_Base_SetConfig+0x100>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d007      	beq.n	8003d48 <TIM_Base_SetConfig+0x38>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a36      	ldr	r2, [pc, #216]	@ (8003e14 <TIM_Base_SetConfig+0x104>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d003      	beq.n	8003d48 <TIM_Base_SetConfig+0x38>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a35      	ldr	r2, [pc, #212]	@ (8003e18 <TIM_Base_SetConfig+0x108>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d108      	bne.n	8003d5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8003e0c <TIM_Base_SetConfig+0xfc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d01b      	beq.n	8003d9a <TIM_Base_SetConfig+0x8a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d68:	d017      	beq.n	8003d9a <TIM_Base_SetConfig+0x8a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a28      	ldr	r2, [pc, #160]	@ (8003e10 <TIM_Base_SetConfig+0x100>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d013      	beq.n	8003d9a <TIM_Base_SetConfig+0x8a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a27      	ldr	r2, [pc, #156]	@ (8003e14 <TIM_Base_SetConfig+0x104>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00f      	beq.n	8003d9a <TIM_Base_SetConfig+0x8a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a26      	ldr	r2, [pc, #152]	@ (8003e18 <TIM_Base_SetConfig+0x108>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00b      	beq.n	8003d9a <TIM_Base_SetConfig+0x8a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a25      	ldr	r2, [pc, #148]	@ (8003e1c <TIM_Base_SetConfig+0x10c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d007      	beq.n	8003d9a <TIM_Base_SetConfig+0x8a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a24      	ldr	r2, [pc, #144]	@ (8003e20 <TIM_Base_SetConfig+0x110>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d003      	beq.n	8003d9a <TIM_Base_SetConfig+0x8a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a23      	ldr	r2, [pc, #140]	@ (8003e24 <TIM_Base_SetConfig+0x114>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d108      	bne.n	8003dac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a0e      	ldr	r2, [pc, #56]	@ (8003e0c <TIM_Base_SetConfig+0xfc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d103      	bne.n	8003de0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d105      	bne.n	8003dfe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f023 0201 	bic.w	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	611a      	str	r2, [r3, #16]
  }
}
 8003dfe:	bf00      	nop
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40010000 	.word	0x40010000
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40000800 	.word	0x40000800
 8003e18:	40000c00 	.word	0x40000c00
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	40014400 	.word	0x40014400
 8003e24:	40014800 	.word	0x40014800

08003e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e62:	2b84      	cmp	r3, #132	@ 0x84
 8003e64:	d005      	beq.n	8003e72 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e66:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3303      	adds	r3, #3
 8003e70:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e72:	68fb      	ldr	r3, [r7, #12]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e84:	f000 fae4 	bl	8004450 <vTaskStartScheduler>
  
  return osOK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e90:	b089      	sub	sp, #36	@ 0x24
 8003e92:	af04      	add	r7, sp, #16
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d020      	beq.n	8003ee2 <osThreadCreate+0x54>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01c      	beq.n	8003ee2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685c      	ldr	r4, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691e      	ldr	r6, [r3, #16]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff ffc8 	bl	8003e50 <makeFreeRtosPriority>
 8003ec0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eca:	9202      	str	r2, [sp, #8]
 8003ecc:	9301      	str	r3, [sp, #4]
 8003ece:	9100      	str	r1, [sp, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	4632      	mov	r2, r6
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	f000 f8ed 	bl	80040b6 <xTaskCreateStatic>
 8003edc:	4603      	mov	r3, r0
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	e01c      	b.n	8003f1c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685c      	ldr	r4, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eee:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff ffaa 	bl	8003e50 <makeFreeRtosPriority>
 8003efc:	4602      	mov	r2, r0
 8003efe:	f107 030c 	add.w	r3, r7, #12
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	9200      	str	r2, [sp, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	4632      	mov	r2, r6
 8003f0a:	4629      	mov	r1, r5
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	f000 f932 	bl	8004176 <xTaskCreate>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d001      	beq.n	8003f1c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e000      	b.n	8003f1e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f26 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b084      	sub	sp, #16
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <osDelay+0x16>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	e000      	b.n	8003f3e <osDelay+0x18>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fa50 	bl	80043e4 <vTaskDelay>
  
  return osOK;
 8003f44:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f103 0208 	add.w	r2, r3, #8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f04f 32ff 	mov.w	r2, #4294967295
 8003f66:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f103 0208 	add.w	r2, r3, #8
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f103 0208 	add.w	r2, r3, #8
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	601a      	str	r2, [r3, #0]
}
 8003fe4:	bf00      	nop
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004006:	d103      	bne.n	8004010 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	e00c      	b.n	800402a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3308      	adds	r3, #8
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	e002      	b.n	800401e <vListInsert+0x2e>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	429a      	cmp	r2, r3
 8004028:	d2f6      	bcs.n	8004018 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	601a      	str	r2, [r3, #0]
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004062:	b480      	push	{r7}
 8004064:	b085      	sub	sp, #20
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6892      	ldr	r2, [r2, #8]
 8004078:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6852      	ldr	r2, [r2, #4]
 8004082:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	429a      	cmp	r2, r3
 800408c:	d103      	bne.n	8004096 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	1e5a      	subs	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b08e      	sub	sp, #56	@ 0x38
 80040ba:	af04      	add	r7, sp, #16
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10b      	bne.n	80040e2 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040dc:	bf00      	nop
 80040de:	bf00      	nop
 80040e0:	e7fd      	b.n	80040de <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <xTaskCreateStatic+0x4a>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	61fb      	str	r3, [r7, #28]
}
 80040fa:	bf00      	nop
 80040fc:	bf00      	nop
 80040fe:	e7fd      	b.n	80040fc <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004100:	2354      	movs	r3, #84	@ 0x54
 8004102:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b54      	cmp	r3, #84	@ 0x54
 8004108:	d00b      	beq.n	8004122 <xTaskCreateStatic+0x6c>
	__asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	61bb      	str	r3, [r7, #24]
}
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	e7fd      	b.n	800411e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004122:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004126:	2b00      	cmp	r3, #0
 8004128:	d01e      	beq.n	8004168 <xTaskCreateStatic+0xb2>
 800412a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01b      	beq.n	8004168 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004132:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004136:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004138:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	2202      	movs	r2, #2
 800413e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004142:	2300      	movs	r3, #0
 8004144:	9303      	str	r3, [sp, #12]
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	9302      	str	r3, [sp, #8]
 800414a:	f107 0314 	add.w	r3, r7, #20
 800414e:	9301      	str	r3, [sp, #4]
 8004150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 f850 	bl	8004200 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004160:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004162:	f000 f8d5 	bl	8004310 <prvAddNewTaskToReadyList>
 8004166:	e001      	b.n	800416c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800416c:	697b      	ldr	r3, [r7, #20]
	}
 800416e:	4618      	mov	r0, r3
 8004170:	3728      	adds	r7, #40	@ 0x28
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004176:	b580      	push	{r7, lr}
 8004178:	b08c      	sub	sp, #48	@ 0x30
 800417a:	af04      	add	r7, sp, #16
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	603b      	str	r3, [r7, #0]
 8004182:	4613      	mov	r3, r2
 8004184:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fed4 	bl	8004f38 <pvPortMalloc>
 8004190:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00e      	beq.n	80041b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004198:	2054      	movs	r0, #84	@ 0x54
 800419a:	f000 fecd 	bl	8004f38 <pvPortMalloc>
 800419e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80041ac:	e005      	b.n	80041ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041ae:	6978      	ldr	r0, [r7, #20]
 80041b0:	f000 ff90 	bl	80050d4 <vPortFree>
 80041b4:	e001      	b.n	80041ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d017      	beq.n	80041f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041c8:	88fa      	ldrh	r2, [r7, #6]
 80041ca:	2300      	movs	r3, #0
 80041cc:	9303      	str	r3, [sp, #12]
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	9302      	str	r3, [sp, #8]
 80041d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d4:	9301      	str	r3, [sp, #4]
 80041d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f80e 	bl	8004200 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041e4:	69f8      	ldr	r0, [r7, #28]
 80041e6:	f000 f893 	bl	8004310 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041ea:	2301      	movs	r3, #1
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	e002      	b.n	80041f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041f0:	f04f 33ff 	mov.w	r3, #4294967295
 80041f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041f6:	69bb      	ldr	r3, [r7, #24]
	}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800420e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004210:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004218:	3b01      	subs	r3, #1
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	f023 0307 	bic.w	r3, r3, #7
 8004226:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00b      	beq.n	800424a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	617b      	str	r3, [r7, #20]
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop
 8004248:	e7fd      	b.n	8004246 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01f      	beq.n	8004290 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004250:	2300      	movs	r3, #0
 8004252:	61fb      	str	r3, [r7, #28]
 8004254:	e012      	b.n	800427c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	4413      	add	r3, r2
 800425c:	7819      	ldrb	r1, [r3, #0]
 800425e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	4413      	add	r3, r2
 8004264:	3334      	adds	r3, #52	@ 0x34
 8004266:	460a      	mov	r2, r1
 8004268:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	4413      	add	r3, r2
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d006      	beq.n	8004284 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	3301      	adds	r3, #1
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b0f      	cmp	r3, #15
 8004280:	d9e9      	bls.n	8004256 <prvInitialiseNewTask+0x56>
 8004282:	e000      	b.n	8004286 <prvInitialiseNewTask+0x86>
			{
				break;
 8004284:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800428e:	e003      	b.n	8004298 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429a:	2b06      	cmp	r3, #6
 800429c:	d901      	bls.n	80042a2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800429e:	2306      	movs	r3, #6
 80042a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042ac:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b0:	2200      	movs	r2, #0
 80042b2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b6:	3304      	adds	r3, #4
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff fe68 	bl	8003f8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c0:	3318      	adds	r3, #24
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fe63 	bl	8003f8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d0:	f1c3 0207 	rsb	r2, r3, #7
 80042d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042dc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e0:	2200      	movs	r2, #0
 80042e2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	68f9      	ldr	r1, [r7, #12]
 80042f0:	69b8      	ldr	r0, [r7, #24]
 80042f2:	f000 fc0d 	bl	8004b10 <pxPortInitialiseStack>
 80042f6:	4602      	mov	r2, r0
 80042f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004304:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004306:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004308:	bf00      	nop
 800430a:	3720      	adds	r7, #32
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004318:	f000 fd2e 	bl	8004d78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800431c:	4b2a      	ldr	r3, [pc, #168]	@ (80043c8 <prvAddNewTaskToReadyList+0xb8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3301      	adds	r3, #1
 8004322:	4a29      	ldr	r2, [pc, #164]	@ (80043c8 <prvAddNewTaskToReadyList+0xb8>)
 8004324:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004326:	4b29      	ldr	r3, [pc, #164]	@ (80043cc <prvAddNewTaskToReadyList+0xbc>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800432e:	4a27      	ldr	r2, [pc, #156]	@ (80043cc <prvAddNewTaskToReadyList+0xbc>)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004334:	4b24      	ldr	r3, [pc, #144]	@ (80043c8 <prvAddNewTaskToReadyList+0xb8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d110      	bne.n	800435e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800433c:	f000 fac4 	bl	80048c8 <prvInitialiseTaskLists>
 8004340:	e00d      	b.n	800435e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004342:	4b23      	ldr	r3, [pc, #140]	@ (80043d0 <prvAddNewTaskToReadyList+0xc0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d109      	bne.n	800435e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800434a:	4b20      	ldr	r3, [pc, #128]	@ (80043cc <prvAddNewTaskToReadyList+0xbc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004354:	429a      	cmp	r2, r3
 8004356:	d802      	bhi.n	800435e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004358:	4a1c      	ldr	r2, [pc, #112]	@ (80043cc <prvAddNewTaskToReadyList+0xbc>)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800435e:	4b1d      	ldr	r3, [pc, #116]	@ (80043d4 <prvAddNewTaskToReadyList+0xc4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3301      	adds	r3, #1
 8004364:	4a1b      	ldr	r2, [pc, #108]	@ (80043d4 <prvAddNewTaskToReadyList+0xc4>)
 8004366:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436c:	2201      	movs	r2, #1
 800436e:	409a      	lsls	r2, r3
 8004370:	4b19      	ldr	r3, [pc, #100]	@ (80043d8 <prvAddNewTaskToReadyList+0xc8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4313      	orrs	r3, r2
 8004376:	4a18      	ldr	r2, [pc, #96]	@ (80043d8 <prvAddNewTaskToReadyList+0xc8>)
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800437e:	4613      	mov	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4a15      	ldr	r2, [pc, #84]	@ (80043dc <prvAddNewTaskToReadyList+0xcc>)
 8004388:	441a      	add	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3304      	adds	r3, #4
 800438e:	4619      	mov	r1, r3
 8004390:	4610      	mov	r0, r2
 8004392:	f7ff fe09 	bl	8003fa8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004396:	f000 fd21 	bl	8004ddc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800439a:	4b0d      	ldr	r3, [pc, #52]	@ (80043d0 <prvAddNewTaskToReadyList+0xc0>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00e      	beq.n	80043c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043a2:	4b0a      	ldr	r3, [pc, #40]	@ (80043cc <prvAddNewTaskToReadyList+0xbc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d207      	bcs.n	80043c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043b0:	4b0b      	ldr	r3, [pc, #44]	@ (80043e0 <prvAddNewTaskToReadyList+0xd0>)
 80043b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043c0:	bf00      	nop
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	200005d8 	.word	0x200005d8
 80043cc:	200004d8 	.word	0x200004d8
 80043d0:	200005e4 	.word	0x200005e4
 80043d4:	200005f4 	.word	0x200005f4
 80043d8:	200005e0 	.word	0x200005e0
 80043dc:	200004dc 	.word	0x200004dc
 80043e0:	e000ed04 	.word	0xe000ed04

080043e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d018      	beq.n	8004428 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043f6:	4b14      	ldr	r3, [pc, #80]	@ (8004448 <vTaskDelay+0x64>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00b      	beq.n	8004416 <vTaskDelay+0x32>
	__asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	60bb      	str	r3, [r7, #8]
}
 8004410:	bf00      	nop
 8004412:	bf00      	nop
 8004414:	e7fd      	b.n	8004412 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004416:	f000 f87d 	bl	8004514 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800441a:	2100      	movs	r1, #0
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fb11 	bl	8004a44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004422:	f000 f885 	bl	8004530 <xTaskResumeAll>
 8004426:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d107      	bne.n	800443e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800442e:	4b07      	ldr	r3, [pc, #28]	@ (800444c <vTaskDelay+0x68>)
 8004430:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000600 	.word	0x20000600
 800444c:	e000ed04 	.word	0xe000ed04

08004450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08a      	sub	sp, #40	@ 0x28
 8004454:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004456:	2300      	movs	r3, #0
 8004458:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800445e:	463a      	mov	r2, r7
 8004460:	1d39      	adds	r1, r7, #4
 8004462:	f107 0308 	add.w	r3, r7, #8
 8004466:	4618      	mov	r0, r3
 8004468:	f7fc fe3e 	bl	80010e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800446c:	6839      	ldr	r1, [r7, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	9202      	str	r2, [sp, #8]
 8004474:	9301      	str	r3, [sp, #4]
 8004476:	2300      	movs	r3, #0
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	2300      	movs	r3, #0
 800447c:	460a      	mov	r2, r1
 800447e:	491f      	ldr	r1, [pc, #124]	@ (80044fc <vTaskStartScheduler+0xac>)
 8004480:	481f      	ldr	r0, [pc, #124]	@ (8004500 <vTaskStartScheduler+0xb0>)
 8004482:	f7ff fe18 	bl	80040b6 <xTaskCreateStatic>
 8004486:	4603      	mov	r3, r0
 8004488:	4a1e      	ldr	r2, [pc, #120]	@ (8004504 <vTaskStartScheduler+0xb4>)
 800448a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800448c:	4b1d      	ldr	r3, [pc, #116]	@ (8004504 <vTaskStartScheduler+0xb4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004494:	2301      	movs	r3, #1
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	e001      	b.n	800449e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800449a:	2300      	movs	r3, #0
 800449c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d116      	bne.n	80044d2 <vTaskStartScheduler+0x82>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	613b      	str	r3, [r7, #16]
}
 80044b6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044b8:	4b13      	ldr	r3, [pc, #76]	@ (8004508 <vTaskStartScheduler+0xb8>)
 80044ba:	f04f 32ff 	mov.w	r2, #4294967295
 80044be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044c0:	4b12      	ldr	r3, [pc, #72]	@ (800450c <vTaskStartScheduler+0xbc>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044c6:	4b12      	ldr	r3, [pc, #72]	@ (8004510 <vTaskStartScheduler+0xc0>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044cc:	f000 fbb0 	bl	8004c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044d0:	e00f      	b.n	80044f2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d10b      	bne.n	80044f2 <vTaskStartScheduler+0xa2>
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	60fb      	str	r3, [r7, #12]
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	e7fd      	b.n	80044ee <vTaskStartScheduler+0x9e>
}
 80044f2:	bf00      	nop
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	08005420 	.word	0x08005420
 8004500:	08004899 	.word	0x08004899
 8004504:	200005fc 	.word	0x200005fc
 8004508:	200005f8 	.word	0x200005f8
 800450c:	200005e4 	.word	0x200005e4
 8004510:	200005dc 	.word	0x200005dc

08004514 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004518:	4b04      	ldr	r3, [pc, #16]	@ (800452c <vTaskSuspendAll+0x18>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	4a03      	ldr	r2, [pc, #12]	@ (800452c <vTaskSuspendAll+0x18>)
 8004520:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004522:	bf00      	nop
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	20000600 	.word	0x20000600

08004530 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800453e:	4b42      	ldr	r3, [pc, #264]	@ (8004648 <xTaskResumeAll+0x118>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10b      	bne.n	800455e <xTaskResumeAll+0x2e>
	__asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	603b      	str	r3, [r7, #0]
}
 8004558:	bf00      	nop
 800455a:	bf00      	nop
 800455c:	e7fd      	b.n	800455a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800455e:	f000 fc0b 	bl	8004d78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004562:	4b39      	ldr	r3, [pc, #228]	@ (8004648 <xTaskResumeAll+0x118>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3b01      	subs	r3, #1
 8004568:	4a37      	ldr	r2, [pc, #220]	@ (8004648 <xTaskResumeAll+0x118>)
 800456a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800456c:	4b36      	ldr	r3, [pc, #216]	@ (8004648 <xTaskResumeAll+0x118>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d161      	bne.n	8004638 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004574:	4b35      	ldr	r3, [pc, #212]	@ (800464c <xTaskResumeAll+0x11c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d05d      	beq.n	8004638 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800457c:	e02e      	b.n	80045dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800457e:	4b34      	ldr	r3, [pc, #208]	@ (8004650 <xTaskResumeAll+0x120>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3318      	adds	r3, #24
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fd69 	bl	8004062 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3304      	adds	r3, #4
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff fd64 	bl	8004062 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459e:	2201      	movs	r2, #1
 80045a0:	409a      	lsls	r2, r3
 80045a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004654 <xTaskResumeAll+0x124>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004654 <xTaskResumeAll+0x124>)
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b0:	4613      	mov	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4a27      	ldr	r2, [pc, #156]	@ (8004658 <xTaskResumeAll+0x128>)
 80045ba:	441a      	add	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	3304      	adds	r3, #4
 80045c0:	4619      	mov	r1, r3
 80045c2:	4610      	mov	r0, r2
 80045c4:	f7ff fcf0 	bl	8003fa8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045cc:	4b23      	ldr	r3, [pc, #140]	@ (800465c <xTaskResumeAll+0x12c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d302      	bcc.n	80045dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80045d6:	4b22      	ldr	r3, [pc, #136]	@ (8004660 <xTaskResumeAll+0x130>)
 80045d8:	2201      	movs	r2, #1
 80045da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045dc:	4b1c      	ldr	r3, [pc, #112]	@ (8004650 <xTaskResumeAll+0x120>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1cc      	bne.n	800457e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045ea:	f000 fa0b 	bl	8004a04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80045ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004664 <xTaskResumeAll+0x134>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d010      	beq.n	800461c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045fa:	f000 f837 	bl	800466c <xTaskIncrementTick>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004604:	4b16      	ldr	r3, [pc, #88]	@ (8004660 <xTaskResumeAll+0x130>)
 8004606:	2201      	movs	r2, #1
 8004608:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3b01      	subs	r3, #1
 800460e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f1      	bne.n	80045fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004616:	4b13      	ldr	r3, [pc, #76]	@ (8004664 <xTaskResumeAll+0x134>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800461c:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <xTaskResumeAll+0x130>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d009      	beq.n	8004638 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004624:	2301      	movs	r3, #1
 8004626:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004628:	4b0f      	ldr	r3, [pc, #60]	@ (8004668 <xTaskResumeAll+0x138>)
 800462a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004638:	f000 fbd0 	bl	8004ddc <vPortExitCritical>

	return xAlreadyYielded;
 800463c:	68bb      	ldr	r3, [r7, #8]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20000600 	.word	0x20000600
 800464c:	200005d8 	.word	0x200005d8
 8004650:	20000598 	.word	0x20000598
 8004654:	200005e0 	.word	0x200005e0
 8004658:	200004dc 	.word	0x200004dc
 800465c:	200004d8 	.word	0x200004d8
 8004660:	200005ec 	.word	0x200005ec
 8004664:	200005e8 	.word	0x200005e8
 8004668:	e000ed04 	.word	0xe000ed04

0800466c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004676:	4b4f      	ldr	r3, [pc, #316]	@ (80047b4 <xTaskIncrementTick+0x148>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	f040 808f 	bne.w	800479e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004680:	4b4d      	ldr	r3, [pc, #308]	@ (80047b8 <xTaskIncrementTick+0x14c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3301      	adds	r3, #1
 8004686:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004688:	4a4b      	ldr	r2, [pc, #300]	@ (80047b8 <xTaskIncrementTick+0x14c>)
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d121      	bne.n	80046d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004694:	4b49      	ldr	r3, [pc, #292]	@ (80047bc <xTaskIncrementTick+0x150>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00b      	beq.n	80046b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	603b      	str	r3, [r7, #0]
}
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
 80046b4:	e7fd      	b.n	80046b2 <xTaskIncrementTick+0x46>
 80046b6:	4b41      	ldr	r3, [pc, #260]	@ (80047bc <xTaskIncrementTick+0x150>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	4b40      	ldr	r3, [pc, #256]	@ (80047c0 <xTaskIncrementTick+0x154>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a3e      	ldr	r2, [pc, #248]	@ (80047bc <xTaskIncrementTick+0x150>)
 80046c2:	6013      	str	r3, [r2, #0]
 80046c4:	4a3e      	ldr	r2, [pc, #248]	@ (80047c0 <xTaskIncrementTick+0x154>)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	4b3e      	ldr	r3, [pc, #248]	@ (80047c4 <xTaskIncrementTick+0x158>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3301      	adds	r3, #1
 80046d0:	4a3c      	ldr	r2, [pc, #240]	@ (80047c4 <xTaskIncrementTick+0x158>)
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	f000 f996 	bl	8004a04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046d8:	4b3b      	ldr	r3, [pc, #236]	@ (80047c8 <xTaskIncrementTick+0x15c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d348      	bcc.n	8004774 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046e2:	4b36      	ldr	r3, [pc, #216]	@ (80047bc <xTaskIncrementTick+0x150>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d104      	bne.n	80046f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ec:	4b36      	ldr	r3, [pc, #216]	@ (80047c8 <xTaskIncrementTick+0x15c>)
 80046ee:	f04f 32ff 	mov.w	r2, #4294967295
 80046f2:	601a      	str	r2, [r3, #0]
					break;
 80046f4:	e03e      	b.n	8004774 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046f6:	4b31      	ldr	r3, [pc, #196]	@ (80047bc <xTaskIncrementTick+0x150>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	429a      	cmp	r2, r3
 800470c:	d203      	bcs.n	8004716 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800470e:	4a2e      	ldr	r2, [pc, #184]	@ (80047c8 <xTaskIncrementTick+0x15c>)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004714:	e02e      	b.n	8004774 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	3304      	adds	r3, #4
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff fca1 	bl	8004062 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004724:	2b00      	cmp	r3, #0
 8004726:	d004      	beq.n	8004732 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	3318      	adds	r3, #24
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fc98 	bl	8004062 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004736:	2201      	movs	r2, #1
 8004738:	409a      	lsls	r2, r3
 800473a:	4b24      	ldr	r3, [pc, #144]	@ (80047cc <xTaskIncrementTick+0x160>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4313      	orrs	r3, r2
 8004740:	4a22      	ldr	r2, [pc, #136]	@ (80047cc <xTaskIncrementTick+0x160>)
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004748:	4613      	mov	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4a1f      	ldr	r2, [pc, #124]	@ (80047d0 <xTaskIncrementTick+0x164>)
 8004752:	441a      	add	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	3304      	adds	r3, #4
 8004758:	4619      	mov	r1, r3
 800475a:	4610      	mov	r0, r2
 800475c:	f7ff fc24 	bl	8003fa8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004764:	4b1b      	ldr	r3, [pc, #108]	@ (80047d4 <xTaskIncrementTick+0x168>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476a:	429a      	cmp	r2, r3
 800476c:	d3b9      	bcc.n	80046e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800476e:	2301      	movs	r3, #1
 8004770:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004772:	e7b6      	b.n	80046e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004774:	4b17      	ldr	r3, [pc, #92]	@ (80047d4 <xTaskIncrementTick+0x168>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800477a:	4915      	ldr	r1, [pc, #84]	@ (80047d0 <xTaskIncrementTick+0x164>)
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d901      	bls.n	8004790 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800478c:	2301      	movs	r3, #1
 800478e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004790:	4b11      	ldr	r3, [pc, #68]	@ (80047d8 <xTaskIncrementTick+0x16c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d007      	beq.n	80047a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004798:	2301      	movs	r3, #1
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	e004      	b.n	80047a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800479e:	4b0f      	ldr	r3, [pc, #60]	@ (80047dc <xTaskIncrementTick+0x170>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3301      	adds	r3, #1
 80047a4:	4a0d      	ldr	r2, [pc, #52]	@ (80047dc <xTaskIncrementTick+0x170>)
 80047a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80047a8:	697b      	ldr	r3, [r7, #20]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20000600 	.word	0x20000600
 80047b8:	200005dc 	.word	0x200005dc
 80047bc:	20000590 	.word	0x20000590
 80047c0:	20000594 	.word	0x20000594
 80047c4:	200005f0 	.word	0x200005f0
 80047c8:	200005f8 	.word	0x200005f8
 80047cc:	200005e0 	.word	0x200005e0
 80047d0:	200004dc 	.word	0x200004dc
 80047d4:	200004d8 	.word	0x200004d8
 80047d8:	200005ec 	.word	0x200005ec
 80047dc:	200005e8 	.word	0x200005e8

080047e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047e6:	4b27      	ldr	r3, [pc, #156]	@ (8004884 <vTaskSwitchContext+0xa4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047ee:	4b26      	ldr	r3, [pc, #152]	@ (8004888 <vTaskSwitchContext+0xa8>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047f4:	e040      	b.n	8004878 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80047f6:	4b24      	ldr	r3, [pc, #144]	@ (8004888 <vTaskSwitchContext+0xa8>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047fc:	4b23      	ldr	r3, [pc, #140]	@ (800488c <vTaskSwitchContext+0xac>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	fab3 f383 	clz	r3, r3
 8004808:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800480a:	7afb      	ldrb	r3, [r7, #11]
 800480c:	f1c3 031f 	rsb	r3, r3, #31
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	491f      	ldr	r1, [pc, #124]	@ (8004890 <vTaskSwitchContext+0xb0>)
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10b      	bne.n	800483e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	607b      	str	r3, [r7, #4]
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	e7fd      	b.n	800483a <vTaskSwitchContext+0x5a>
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4a11      	ldr	r2, [pc, #68]	@ (8004890 <vTaskSwitchContext+0xb0>)
 800484a:	4413      	add	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	605a      	str	r2, [r3, #4]
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	3308      	adds	r3, #8
 8004860:	429a      	cmp	r2, r3
 8004862:	d104      	bne.n	800486e <vTaskSwitchContext+0x8e>
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	605a      	str	r2, [r3, #4]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	4a07      	ldr	r2, [pc, #28]	@ (8004894 <vTaskSwitchContext+0xb4>)
 8004876:	6013      	str	r3, [r2, #0]
}
 8004878:	bf00      	nop
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	20000600 	.word	0x20000600
 8004888:	200005ec 	.word	0x200005ec
 800488c:	200005e0 	.word	0x200005e0
 8004890:	200004dc 	.word	0x200004dc
 8004894:	200004d8 	.word	0x200004d8

08004898 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048a0:	f000 f852 	bl	8004948 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048a4:	4b06      	ldr	r3, [pc, #24]	@ (80048c0 <prvIdleTask+0x28>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d9f9      	bls.n	80048a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80048ac:	4b05      	ldr	r3, [pc, #20]	@ (80048c4 <prvIdleTask+0x2c>)
 80048ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048bc:	e7f0      	b.n	80048a0 <prvIdleTask+0x8>
 80048be:	bf00      	nop
 80048c0:	200004dc 	.word	0x200004dc
 80048c4:	e000ed04 	.word	0xe000ed04

080048c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048ce:	2300      	movs	r3, #0
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	e00c      	b.n	80048ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4a12      	ldr	r2, [pc, #72]	@ (8004928 <prvInitialiseTaskLists+0x60>)
 80048e0:	4413      	add	r3, r2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fb33 	bl	8003f4e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3301      	adds	r3, #1
 80048ec:	607b      	str	r3, [r7, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b06      	cmp	r3, #6
 80048f2:	d9ef      	bls.n	80048d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048f4:	480d      	ldr	r0, [pc, #52]	@ (800492c <prvInitialiseTaskLists+0x64>)
 80048f6:	f7ff fb2a 	bl	8003f4e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048fa:	480d      	ldr	r0, [pc, #52]	@ (8004930 <prvInitialiseTaskLists+0x68>)
 80048fc:	f7ff fb27 	bl	8003f4e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004900:	480c      	ldr	r0, [pc, #48]	@ (8004934 <prvInitialiseTaskLists+0x6c>)
 8004902:	f7ff fb24 	bl	8003f4e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004906:	480c      	ldr	r0, [pc, #48]	@ (8004938 <prvInitialiseTaskLists+0x70>)
 8004908:	f7ff fb21 	bl	8003f4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800490c:	480b      	ldr	r0, [pc, #44]	@ (800493c <prvInitialiseTaskLists+0x74>)
 800490e:	f7ff fb1e 	bl	8003f4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004912:	4b0b      	ldr	r3, [pc, #44]	@ (8004940 <prvInitialiseTaskLists+0x78>)
 8004914:	4a05      	ldr	r2, [pc, #20]	@ (800492c <prvInitialiseTaskLists+0x64>)
 8004916:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004918:	4b0a      	ldr	r3, [pc, #40]	@ (8004944 <prvInitialiseTaskLists+0x7c>)
 800491a:	4a05      	ldr	r2, [pc, #20]	@ (8004930 <prvInitialiseTaskLists+0x68>)
 800491c:	601a      	str	r2, [r3, #0]
}
 800491e:	bf00      	nop
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	200004dc 	.word	0x200004dc
 800492c:	20000568 	.word	0x20000568
 8004930:	2000057c 	.word	0x2000057c
 8004934:	20000598 	.word	0x20000598
 8004938:	200005ac 	.word	0x200005ac
 800493c:	200005c4 	.word	0x200005c4
 8004940:	20000590 	.word	0x20000590
 8004944:	20000594 	.word	0x20000594

08004948 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800494e:	e019      	b.n	8004984 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004950:	f000 fa12 	bl	8004d78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004954:	4b10      	ldr	r3, [pc, #64]	@ (8004998 <prvCheckTasksWaitingTermination+0x50>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3304      	adds	r3, #4
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fb7e 	bl	8004062 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004966:	4b0d      	ldr	r3, [pc, #52]	@ (800499c <prvCheckTasksWaitingTermination+0x54>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3b01      	subs	r3, #1
 800496c:	4a0b      	ldr	r2, [pc, #44]	@ (800499c <prvCheckTasksWaitingTermination+0x54>)
 800496e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004970:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <prvCheckTasksWaitingTermination+0x58>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3b01      	subs	r3, #1
 8004976:	4a0a      	ldr	r2, [pc, #40]	@ (80049a0 <prvCheckTasksWaitingTermination+0x58>)
 8004978:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800497a:	f000 fa2f 	bl	8004ddc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f810 	bl	80049a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004984:	4b06      	ldr	r3, [pc, #24]	@ (80049a0 <prvCheckTasksWaitingTermination+0x58>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e1      	bne.n	8004950 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	200005ac 	.word	0x200005ac
 800499c:	200005d8 	.word	0x200005d8
 80049a0:	200005c0 	.word	0x200005c0

080049a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d108      	bne.n	80049c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fb8a 	bl	80050d4 <vPortFree>
				vPortFree( pxTCB );
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 fb87 	bl	80050d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049c6:	e019      	b.n	80049fc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d103      	bne.n	80049da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fb7e 	bl	80050d4 <vPortFree>
	}
 80049d8:	e010      	b.n	80049fc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d00b      	beq.n	80049fc <prvDeleteTCB+0x58>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	60fb      	str	r3, [r7, #12]
}
 80049f6:	bf00      	nop
 80049f8:	bf00      	nop
 80049fa:	e7fd      	b.n	80049f8 <prvDeleteTCB+0x54>
	}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a3c <prvResetNextTaskUnblockTime+0x38>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d104      	bne.n	8004a1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a14:	4b0a      	ldr	r3, [pc, #40]	@ (8004a40 <prvResetNextTaskUnblockTime+0x3c>)
 8004a16:	f04f 32ff 	mov.w	r2, #4294967295
 8004a1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a1c:	e008      	b.n	8004a30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a1e:	4b07      	ldr	r3, [pc, #28]	@ (8004a3c <prvResetNextTaskUnblockTime+0x38>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	4a04      	ldr	r2, [pc, #16]	@ (8004a40 <prvResetNextTaskUnblockTime+0x3c>)
 8004a2e:	6013      	str	r3, [r2, #0]
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	20000590 	.word	0x20000590
 8004a40:	200005f8 	.word	0x200005f8

08004a44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a4e:	4b29      	ldr	r3, [pc, #164]	@ (8004af4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a54:	4b28      	ldr	r3, [pc, #160]	@ (8004af8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff fb01 	bl	8004062 <uxListRemove>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10b      	bne.n	8004a7e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a66:	4b24      	ldr	r3, [pc, #144]	@ (8004af8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	43da      	mvns	r2, r3
 8004a74:	4b21      	ldr	r3, [pc, #132]	@ (8004afc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	4a20      	ldr	r2, [pc, #128]	@ (8004afc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a7c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a84:	d10a      	bne.n	8004a9c <prvAddCurrentTaskToDelayedList+0x58>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004af8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	3304      	adds	r3, #4
 8004a92:	4619      	mov	r1, r3
 8004a94:	481a      	ldr	r0, [pc, #104]	@ (8004b00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a96:	f7ff fa87 	bl	8003fa8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a9a:	e026      	b.n	8004aea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004aa4:	4b14      	ldr	r3, [pc, #80]	@ (8004af8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d209      	bcs.n	8004ac8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ab4:	4b13      	ldr	r3, [pc, #76]	@ (8004b04 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8004af8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3304      	adds	r3, #4
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f7ff fa95 	bl	8003ff0 <vListInsert>
}
 8004ac6:	e010      	b.n	8004aea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8004b08 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b0a      	ldr	r3, [pc, #40]	@ (8004af8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	f7ff fa8b 	bl	8003ff0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ada:	4b0c      	ldr	r3, [pc, #48]	@ (8004b0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d202      	bcs.n	8004aea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ae4:	4a09      	ldr	r2, [pc, #36]	@ (8004b0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	6013      	str	r3, [r2, #0]
}
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	200005dc 	.word	0x200005dc
 8004af8:	200004d8 	.word	0x200004d8
 8004afc:	200005e0 	.word	0x200005e0
 8004b00:	200005c4 	.word	0x200005c4
 8004b04:	20000594 	.word	0x20000594
 8004b08:	20000590 	.word	0x20000590
 8004b0c:	200005f8 	.word	0x200005f8

08004b10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	3b04      	subs	r3, #4
 8004b20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3b04      	subs	r3, #4
 8004b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f023 0201 	bic.w	r2, r3, #1
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3b04      	subs	r3, #4
 8004b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b40:	4a0c      	ldr	r2, [pc, #48]	@ (8004b74 <pxPortInitialiseStack+0x64>)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3b14      	subs	r3, #20
 8004b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3b04      	subs	r3, #4
 8004b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f06f 0202 	mvn.w	r2, #2
 8004b5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3b20      	subs	r3, #32
 8004b64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b66:	68fb      	ldr	r3, [r7, #12]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	08004b79 	.word	0x08004b79

08004b78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b82:	4b13      	ldr	r3, [pc, #76]	@ (8004bd0 <prvTaskExitError+0x58>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8a:	d00b      	beq.n	8004ba4 <prvTaskExitError+0x2c>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	60fb      	str	r3, [r7, #12]
}
 8004b9e:	bf00      	nop
 8004ba0:	bf00      	nop
 8004ba2:	e7fd      	b.n	8004ba0 <prvTaskExitError+0x28>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	60bb      	str	r3, [r7, #8]
}
 8004bb6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bb8:	bf00      	nop
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0fc      	beq.n	8004bba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bc0:	bf00      	nop
 8004bc2:	bf00      	nop
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	2000000c 	.word	0x2000000c
	...

08004be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004be0:	4b07      	ldr	r3, [pc, #28]	@ (8004c00 <pxCurrentTCBConst2>)
 8004be2:	6819      	ldr	r1, [r3, #0]
 8004be4:	6808      	ldr	r0, [r1, #0]
 8004be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bea:	f380 8809 	msr	PSP, r0
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f380 8811 	msr	BASEPRI, r0
 8004bfa:	4770      	bx	lr
 8004bfc:	f3af 8000 	nop.w

08004c00 <pxCurrentTCBConst2>:
 8004c00:	200004d8 	.word	0x200004d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop

08004c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c08:	4808      	ldr	r0, [pc, #32]	@ (8004c2c <prvPortStartFirstTask+0x24>)
 8004c0a:	6800      	ldr	r0, [r0, #0]
 8004c0c:	6800      	ldr	r0, [r0, #0]
 8004c0e:	f380 8808 	msr	MSP, r0
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f380 8814 	msr	CONTROL, r0
 8004c1a:	b662      	cpsie	i
 8004c1c:	b661      	cpsie	f
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	df00      	svc	0
 8004c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c2a:	bf00      	nop
 8004c2c:	e000ed08 	.word	0xe000ed08

08004c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c36:	4b47      	ldr	r3, [pc, #284]	@ (8004d54 <xPortStartScheduler+0x124>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a47      	ldr	r2, [pc, #284]	@ (8004d58 <xPortStartScheduler+0x128>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d10b      	bne.n	8004c58 <xPortStartScheduler+0x28>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	613b      	str	r3, [r7, #16]
}
 8004c52:	bf00      	nop
 8004c54:	bf00      	nop
 8004c56:	e7fd      	b.n	8004c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c58:	4b3e      	ldr	r3, [pc, #248]	@ (8004d54 <xPortStartScheduler+0x124>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a3f      	ldr	r2, [pc, #252]	@ (8004d5c <xPortStartScheduler+0x12c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d10b      	bne.n	8004c7a <xPortStartScheduler+0x4a>
	__asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	60fb      	str	r3, [r7, #12]
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop
 8004c78:	e7fd      	b.n	8004c76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c7a:	4b39      	ldr	r3, [pc, #228]	@ (8004d60 <xPortStartScheduler+0x130>)
 8004c7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	22ff      	movs	r2, #255	@ 0xff
 8004c8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	4b31      	ldr	r3, [pc, #196]	@ (8004d64 <xPortStartScheduler+0x134>)
 8004ca0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ca2:	4b31      	ldr	r3, [pc, #196]	@ (8004d68 <xPortStartScheduler+0x138>)
 8004ca4:	2207      	movs	r2, #7
 8004ca6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ca8:	e009      	b.n	8004cbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004caa:	4b2f      	ldr	r3, [pc, #188]	@ (8004d68 <xPortStartScheduler+0x138>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8004d68 <xPortStartScheduler+0x138>)
 8004cb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cbe:	78fb      	ldrb	r3, [r7, #3]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc6:	2b80      	cmp	r3, #128	@ 0x80
 8004cc8:	d0ef      	beq.n	8004caa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cca:	4b27      	ldr	r3, [pc, #156]	@ (8004d68 <xPortStartScheduler+0x138>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f1c3 0307 	rsb	r3, r3, #7
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d00b      	beq.n	8004cee <xPortStartScheduler+0xbe>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	60bb      	str	r3, [r7, #8]
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	e7fd      	b.n	8004cea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cee:	4b1e      	ldr	r3, [pc, #120]	@ (8004d68 <xPortStartScheduler+0x138>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d68 <xPortStartScheduler+0x138>)
 8004cf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d68 <xPortStartScheduler+0x138>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d00:	4a19      	ldr	r2, [pc, #100]	@ (8004d68 <xPortStartScheduler+0x138>)
 8004d02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d0c:	4b17      	ldr	r3, [pc, #92]	@ (8004d6c <xPortStartScheduler+0x13c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a16      	ldr	r2, [pc, #88]	@ (8004d6c <xPortStartScheduler+0x13c>)
 8004d12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d18:	4b14      	ldr	r3, [pc, #80]	@ (8004d6c <xPortStartScheduler+0x13c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a13      	ldr	r2, [pc, #76]	@ (8004d6c <xPortStartScheduler+0x13c>)
 8004d1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004d22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d24:	f000 f8da 	bl	8004edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d28:	4b11      	ldr	r3, [pc, #68]	@ (8004d70 <xPortStartScheduler+0x140>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d2e:	f000 f8f9 	bl	8004f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d32:	4b10      	ldr	r3, [pc, #64]	@ (8004d74 <xPortStartScheduler+0x144>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a0f      	ldr	r2, [pc, #60]	@ (8004d74 <xPortStartScheduler+0x144>)
 8004d38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004d3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d3e:	f7ff ff63 	bl	8004c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d42:	f7ff fd4d 	bl	80047e0 <vTaskSwitchContext>
	prvTaskExitError();
 8004d46:	f7ff ff17 	bl	8004b78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	e000ed00 	.word	0xe000ed00
 8004d58:	410fc271 	.word	0x410fc271
 8004d5c:	410fc270 	.word	0x410fc270
 8004d60:	e000e400 	.word	0xe000e400
 8004d64:	20000604 	.word	0x20000604
 8004d68:	20000608 	.word	0x20000608
 8004d6c:	e000ed20 	.word	0xe000ed20
 8004d70:	2000000c 	.word	0x2000000c
 8004d74:	e000ef34 	.word	0xe000ef34

08004d78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	607b      	str	r3, [r7, #4]
}
 8004d90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d92:	4b10      	ldr	r3, [pc, #64]	@ (8004dd4 <vPortEnterCritical+0x5c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3301      	adds	r3, #1
 8004d98:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd4 <vPortEnterCritical+0x5c>)
 8004d9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd4 <vPortEnterCritical+0x5c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d110      	bne.n	8004dc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004da4:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd8 <vPortEnterCritical+0x60>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	603b      	str	r3, [r7, #0]
}
 8004dc0:	bf00      	nop
 8004dc2:	bf00      	nop
 8004dc4:	e7fd      	b.n	8004dc2 <vPortEnterCritical+0x4a>
	}
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	2000000c 	.word	0x2000000c
 8004dd8:	e000ed04 	.word	0xe000ed04

08004ddc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004de2:	4b12      	ldr	r3, [pc, #72]	@ (8004e2c <vPortExitCritical+0x50>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10b      	bne.n	8004e02 <vPortExitCritical+0x26>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	607b      	str	r3, [r7, #4]
}
 8004dfc:	bf00      	nop
 8004dfe:	bf00      	nop
 8004e00:	e7fd      	b.n	8004dfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e02:	4b0a      	ldr	r3, [pc, #40]	@ (8004e2c <vPortExitCritical+0x50>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	4a08      	ldr	r2, [pc, #32]	@ (8004e2c <vPortExitCritical+0x50>)
 8004e0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e0c:	4b07      	ldr	r3, [pc, #28]	@ (8004e2c <vPortExitCritical+0x50>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d105      	bne.n	8004e20 <vPortExitCritical+0x44>
 8004e14:	2300      	movs	r3, #0
 8004e16:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	2000000c 	.word	0x2000000c

08004e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e30:	f3ef 8009 	mrs	r0, PSP
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	4b15      	ldr	r3, [pc, #84]	@ (8004e90 <pxCurrentTCBConst>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	f01e 0f10 	tst.w	lr, #16
 8004e40:	bf08      	it	eq
 8004e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4a:	6010      	str	r0, [r2, #0]
 8004e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004e54:	f380 8811 	msr	BASEPRI, r0
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f7ff fcbe 	bl	80047e0 <vTaskSwitchContext>
 8004e64:	f04f 0000 	mov.w	r0, #0
 8004e68:	f380 8811 	msr	BASEPRI, r0
 8004e6c:	bc09      	pop	{r0, r3}
 8004e6e:	6819      	ldr	r1, [r3, #0]
 8004e70:	6808      	ldr	r0, [r1, #0]
 8004e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e76:	f01e 0f10 	tst.w	lr, #16
 8004e7a:	bf08      	it	eq
 8004e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e80:	f380 8809 	msr	PSP, r0
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	f3af 8000 	nop.w

08004e90 <pxCurrentTCBConst>:
 8004e90:	200004d8 	.word	0x200004d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop

08004e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	607b      	str	r3, [r7, #4]
}
 8004eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004eb2:	f7ff fbdb 	bl	800466c <xTaskIncrementTick>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ebc:	4b06      	ldr	r3, [pc, #24]	@ (8004ed8 <SysTick_Handler+0x40>)
 8004ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f383 8811 	msr	BASEPRI, r3
}
 8004ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ed0:	bf00      	nop
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	e000ed04 	.word	0xe000ed04

08004edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8004f10 <vPortSetupTimerInterrupt+0x34>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f14 <vPortSetupTimerInterrupt+0x38>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004eec:	4b0a      	ldr	r3, [pc, #40]	@ (8004f18 <vPortSetupTimerInterrupt+0x3c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8004f1c <vPortSetupTimerInterrupt+0x40>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	099b      	lsrs	r3, r3, #6
 8004ef8:	4a09      	ldr	r2, [pc, #36]	@ (8004f20 <vPortSetupTimerInterrupt+0x44>)
 8004efa:	3b01      	subs	r3, #1
 8004efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004efe:	4b04      	ldr	r3, [pc, #16]	@ (8004f10 <vPortSetupTimerInterrupt+0x34>)
 8004f00:	2207      	movs	r2, #7
 8004f02:	601a      	str	r2, [r3, #0]
}
 8004f04:	bf00      	nop
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	e000e010 	.word	0xe000e010
 8004f14:	e000e018 	.word	0xe000e018
 8004f18:	20000000 	.word	0x20000000
 8004f1c:	10624dd3 	.word	0x10624dd3
 8004f20:	e000e014 	.word	0xe000e014

08004f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004f34 <vPortEnableVFP+0x10>
 8004f28:	6801      	ldr	r1, [r0, #0]
 8004f2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004f2e:	6001      	str	r1, [r0, #0]
 8004f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f32:	bf00      	nop
 8004f34:	e000ed88 	.word	0xe000ed88

08004f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08a      	sub	sp, #40	@ 0x28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f44:	f7ff fae6 	bl	8004514 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f48:	4b5c      	ldr	r3, [pc, #368]	@ (80050bc <pvPortMalloc+0x184>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f50:	f000 f924 	bl	800519c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f54:	4b5a      	ldr	r3, [pc, #360]	@ (80050c0 <pvPortMalloc+0x188>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f040 8095 	bne.w	800508c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01e      	beq.n	8004fa6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004f68:	2208      	movs	r2, #8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d015      	beq.n	8004fa6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f023 0307 	bic.w	r3, r3, #7
 8004f80:	3308      	adds	r3, #8
 8004f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00b      	beq.n	8004fa6 <pvPortMalloc+0x6e>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	617b      	str	r3, [r7, #20]
}
 8004fa0:	bf00      	nop
 8004fa2:	bf00      	nop
 8004fa4:	e7fd      	b.n	8004fa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d06f      	beq.n	800508c <pvPortMalloc+0x154>
 8004fac:	4b45      	ldr	r3, [pc, #276]	@ (80050c4 <pvPortMalloc+0x18c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d86a      	bhi.n	800508c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fb6:	4b44      	ldr	r3, [pc, #272]	@ (80050c8 <pvPortMalloc+0x190>)
 8004fb8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004fba:	4b43      	ldr	r3, [pc, #268]	@ (80050c8 <pvPortMalloc+0x190>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fc0:	e004      	b.n	8004fcc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d903      	bls.n	8004fde <pvPortMalloc+0xa6>
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f1      	bne.n	8004fc2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fde:	4b37      	ldr	r3, [pc, #220]	@ (80050bc <pvPortMalloc+0x184>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d051      	beq.n	800508c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2208      	movs	r2, #8
 8004fee:	4413      	add	r3, r2
 8004ff0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	1ad2      	subs	r2, r2, r3
 8005002:	2308      	movs	r3, #8
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	429a      	cmp	r2, r3
 8005008:	d920      	bls.n	800504c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800500a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4413      	add	r3, r2
 8005010:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00b      	beq.n	8005034 <pvPortMalloc+0xfc>
	__asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	613b      	str	r3, [r7, #16]
}
 800502e:	bf00      	nop
 8005030:	bf00      	nop
 8005032:	e7fd      	b.n	8005030 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	1ad2      	subs	r2, r2, r3
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005046:	69b8      	ldr	r0, [r7, #24]
 8005048:	f000 f90a 	bl	8005260 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800504c:	4b1d      	ldr	r3, [pc, #116]	@ (80050c4 <pvPortMalloc+0x18c>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	4a1b      	ldr	r2, [pc, #108]	@ (80050c4 <pvPortMalloc+0x18c>)
 8005058:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800505a:	4b1a      	ldr	r3, [pc, #104]	@ (80050c4 <pvPortMalloc+0x18c>)
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	4b1b      	ldr	r3, [pc, #108]	@ (80050cc <pvPortMalloc+0x194>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d203      	bcs.n	800506e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005066:	4b17      	ldr	r3, [pc, #92]	@ (80050c4 <pvPortMalloc+0x18c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a18      	ldr	r2, [pc, #96]	@ (80050cc <pvPortMalloc+0x194>)
 800506c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	4b13      	ldr	r3, [pc, #76]	@ (80050c0 <pvPortMalloc+0x188>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	431a      	orrs	r2, r3
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005082:	4b13      	ldr	r3, [pc, #76]	@ (80050d0 <pvPortMalloc+0x198>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3301      	adds	r3, #1
 8005088:	4a11      	ldr	r2, [pc, #68]	@ (80050d0 <pvPortMalloc+0x198>)
 800508a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800508c:	f7ff fa50 	bl	8004530 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00b      	beq.n	80050b2 <pvPortMalloc+0x17a>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	60fb      	str	r3, [r7, #12]
}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	e7fd      	b.n	80050ae <pvPortMalloc+0x176>
	return pvReturn;
 80050b2:	69fb      	ldr	r3, [r7, #28]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3728      	adds	r7, #40	@ 0x28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20004214 	.word	0x20004214
 80050c0:	20004228 	.word	0x20004228
 80050c4:	20004218 	.word	0x20004218
 80050c8:	2000420c 	.word	0x2000420c
 80050cc:	2000421c 	.word	0x2000421c
 80050d0:	20004220 	.word	0x20004220

080050d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d04f      	beq.n	8005186 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050e6:	2308      	movs	r3, #8
 80050e8:	425b      	negs	r3, r3
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4413      	add	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	4b25      	ldr	r3, [pc, #148]	@ (8005190 <vPortFree+0xbc>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4013      	ands	r3, r2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10b      	bne.n	800511a <vPortFree+0x46>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	60fb      	str	r3, [r7, #12]
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	e7fd      	b.n	8005116 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <vPortFree+0x66>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	60bb      	str	r3, [r7, #8]
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	e7fd      	b.n	8005136 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	4b14      	ldr	r3, [pc, #80]	@ (8005190 <vPortFree+0xbc>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4013      	ands	r3, r2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01e      	beq.n	8005186 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d11a      	bne.n	8005186 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	4b0e      	ldr	r3, [pc, #56]	@ (8005190 <vPortFree+0xbc>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	43db      	mvns	r3, r3
 800515a:	401a      	ands	r2, r3
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005160:	f7ff f9d8 	bl	8004514 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	4b0a      	ldr	r3, [pc, #40]	@ (8005194 <vPortFree+0xc0>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4413      	add	r3, r2
 800516e:	4a09      	ldr	r2, [pc, #36]	@ (8005194 <vPortFree+0xc0>)
 8005170:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005172:	6938      	ldr	r0, [r7, #16]
 8005174:	f000 f874 	bl	8005260 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005178:	4b07      	ldr	r3, [pc, #28]	@ (8005198 <vPortFree+0xc4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3301      	adds	r3, #1
 800517e:	4a06      	ldr	r2, [pc, #24]	@ (8005198 <vPortFree+0xc4>)
 8005180:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005182:	f7ff f9d5 	bl	8004530 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005186:	bf00      	nop
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	20004228 	.word	0x20004228
 8005194:	20004218 	.word	0x20004218
 8005198:	20004224 	.word	0x20004224

0800519c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051a2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80051a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051a8:	4b27      	ldr	r3, [pc, #156]	@ (8005248 <prvHeapInit+0xac>)
 80051aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00c      	beq.n	80051d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3307      	adds	r3, #7
 80051ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 0307 	bic.w	r3, r3, #7
 80051c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	4a1f      	ldr	r2, [pc, #124]	@ (8005248 <prvHeapInit+0xac>)
 80051cc:	4413      	add	r3, r2
 80051ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051d4:	4a1d      	ldr	r2, [pc, #116]	@ (800524c <prvHeapInit+0xb0>)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051da:	4b1c      	ldr	r3, [pc, #112]	@ (800524c <prvHeapInit+0xb0>)
 80051dc:	2200      	movs	r2, #0
 80051de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	4413      	add	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051e8:	2208      	movs	r2, #8
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1a9b      	subs	r3, r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0307 	bic.w	r3, r3, #7
 80051f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4a15      	ldr	r2, [pc, #84]	@ (8005250 <prvHeapInit+0xb4>)
 80051fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051fe:	4b14      	ldr	r3, [pc, #80]	@ (8005250 <prvHeapInit+0xb4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2200      	movs	r2, #0
 8005204:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005206:	4b12      	ldr	r3, [pc, #72]	@ (8005250 <prvHeapInit+0xb4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	1ad2      	subs	r2, r2, r3
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800521c:	4b0c      	ldr	r3, [pc, #48]	@ (8005250 <prvHeapInit+0xb4>)
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	4a0a      	ldr	r2, [pc, #40]	@ (8005254 <prvHeapInit+0xb8>)
 800522a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	4a09      	ldr	r2, [pc, #36]	@ (8005258 <prvHeapInit+0xbc>)
 8005232:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005234:	4b09      	ldr	r3, [pc, #36]	@ (800525c <prvHeapInit+0xc0>)
 8005236:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800523a:	601a      	str	r2, [r3, #0]
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	2000060c 	.word	0x2000060c
 800524c:	2000420c 	.word	0x2000420c
 8005250:	20004214 	.word	0x20004214
 8005254:	2000421c 	.word	0x2000421c
 8005258:	20004218 	.word	0x20004218
 800525c:	20004228 	.word	0x20004228

08005260 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005268:	4b28      	ldr	r3, [pc, #160]	@ (800530c <prvInsertBlockIntoFreeList+0xac>)
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	e002      	b.n	8005274 <prvInsertBlockIntoFreeList+0x14>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	429a      	cmp	r2, r3
 800527c:	d8f7      	bhi.n	800526e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	4413      	add	r3, r2
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	429a      	cmp	r2, r3
 800528e:	d108      	bne.n	80052a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	441a      	add	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	441a      	add	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d118      	bne.n	80052e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4b15      	ldr	r3, [pc, #84]	@ (8005310 <prvInsertBlockIntoFreeList+0xb0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d00d      	beq.n	80052de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	441a      	add	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	e008      	b.n	80052f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052de:	4b0c      	ldr	r3, [pc, #48]	@ (8005310 <prvInsertBlockIntoFreeList+0xb0>)
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e003      	b.n	80052f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d002      	beq.n	80052fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052fe:	bf00      	nop
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	2000420c 	.word	0x2000420c
 8005310:	20004214 	.word	0x20004214

08005314 <memset>:
 8005314:	4402      	add	r2, r0
 8005316:	4603      	mov	r3, r0
 8005318:	4293      	cmp	r3, r2
 800531a:	d100      	bne.n	800531e <memset+0xa>
 800531c:	4770      	bx	lr
 800531e:	f803 1b01 	strb.w	r1, [r3], #1
 8005322:	e7f9      	b.n	8005318 <memset+0x4>

08005324 <__libc_init_array>:
 8005324:	b570      	push	{r4, r5, r6, lr}
 8005326:	4d0d      	ldr	r5, [pc, #52]	@ (800535c <__libc_init_array+0x38>)
 8005328:	4c0d      	ldr	r4, [pc, #52]	@ (8005360 <__libc_init_array+0x3c>)
 800532a:	1b64      	subs	r4, r4, r5
 800532c:	10a4      	asrs	r4, r4, #2
 800532e:	2600      	movs	r6, #0
 8005330:	42a6      	cmp	r6, r4
 8005332:	d109      	bne.n	8005348 <__libc_init_array+0x24>
 8005334:	4d0b      	ldr	r5, [pc, #44]	@ (8005364 <__libc_init_array+0x40>)
 8005336:	4c0c      	ldr	r4, [pc, #48]	@ (8005368 <__libc_init_array+0x44>)
 8005338:	f000 f818 	bl	800536c <_init>
 800533c:	1b64      	subs	r4, r4, r5
 800533e:	10a4      	asrs	r4, r4, #2
 8005340:	2600      	movs	r6, #0
 8005342:	42a6      	cmp	r6, r4
 8005344:	d105      	bne.n	8005352 <__libc_init_array+0x2e>
 8005346:	bd70      	pop	{r4, r5, r6, pc}
 8005348:	f855 3b04 	ldr.w	r3, [r5], #4
 800534c:	4798      	blx	r3
 800534e:	3601      	adds	r6, #1
 8005350:	e7ee      	b.n	8005330 <__libc_init_array+0xc>
 8005352:	f855 3b04 	ldr.w	r3, [r5], #4
 8005356:	4798      	blx	r3
 8005358:	3601      	adds	r6, #1
 800535a:	e7f2      	b.n	8005342 <__libc_init_array+0x1e>
 800535c:	08005450 	.word	0x08005450
 8005360:	08005450 	.word	0x08005450
 8005364:	08005450 	.word	0x08005450
 8005368:	08005454 	.word	0x08005454

0800536c <_init>:
 800536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536e:	bf00      	nop
 8005370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005372:	bc08      	pop	{r3}
 8005374:	469e      	mov	lr, r3
 8005376:	4770      	bx	lr

08005378 <_fini>:
 8005378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537a:	bf00      	nop
 800537c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537e:	bc08      	pop	{r3}
 8005380:	469e      	mov	lr, r3
 8005382:	4770      	bx	lr
