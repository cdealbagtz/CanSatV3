
CanSat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08009858  08009858  0000a858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009990  08009990  0000b100  2**0
                  CONTENTS
  4 .ARM          00000008  08009990  08009990  0000a990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009998  08009998  0000b100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009998  08009998  0000a998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800999c  0800999c  0000a99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080099a0  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044f0  20000100  08009aa0  0000b100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200045f0  08009aa0  0000b5f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016314  00000000  00000000  0000b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b70  00000000  00000000  00021444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  00024fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010f1  00000000  00000000  000265a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b4f  00000000  00000000  00027691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b739  00000000  00000000  000411e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099836  00000000  00000000  0005c919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f614f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f90  00000000  00000000  000f6194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000fc124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000100 	.word	0x20000100
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800983c 	.word	0x0800983c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000104 	.word	0x20000104
 80001dc:	0800983c 	.word	0x0800983c

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_ldivmod>:
 8000b08:	b97b      	cbnz	r3, 8000b2a <__aeabi_ldivmod+0x22>
 8000b0a:	b972      	cbnz	r2, 8000b2a <__aeabi_ldivmod+0x22>
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	bfbe      	ittt	lt
 8000b10:	2000      	movlt	r0, #0
 8000b12:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b16:	e006      	blt.n	8000b26 <__aeabi_ldivmod+0x1e>
 8000b18:	bf08      	it	eq
 8000b1a:	2800      	cmpeq	r0, #0
 8000b1c:	bf1c      	itt	ne
 8000b1e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b22:	f04f 30ff 	movne.w	r0, #4294967295
 8000b26:	f000 b9b5 	b.w	8000e94 <__aeabi_idiv0>
 8000b2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b32:	2900      	cmp	r1, #0
 8000b34:	db09      	blt.n	8000b4a <__aeabi_ldivmod+0x42>
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db1a      	blt.n	8000b70 <__aeabi_ldivmod+0x68>
 8000b3a:	f000 f84d 	bl	8000bd8 <__udivmoddi4>
 8000b3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b46:	b004      	add	sp, #16
 8000b48:	4770      	bx	lr
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db1b      	blt.n	8000b8c <__aeabi_ldivmod+0x84>
 8000b54:	f000 f840 	bl	8000bd8 <__udivmoddi4>
 8000b58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b60:	b004      	add	sp, #16
 8000b62:	4240      	negs	r0, r0
 8000b64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b68:	4252      	negs	r2, r2
 8000b6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b6e:	4770      	bx	lr
 8000b70:	4252      	negs	r2, r2
 8000b72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b76:	f000 f82f 	bl	8000bd8 <__udivmoddi4>
 8000b7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b82:	b004      	add	sp, #16
 8000b84:	4240      	negs	r0, r0
 8000b86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8a:	4770      	bx	lr
 8000b8c:	4252      	negs	r2, r2
 8000b8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b92:	f000 f821 	bl	8000bd8 <__udivmoddi4>
 8000b96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b9e:	b004      	add	sp, #16
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <task_init_1ms>:

/**
  * @fn  	task_init_1ms
  * @brief  Inicializaciones para tarea de 1 milisegundo
  */
void task_init_1ms(void){
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <task_1ms>:

/**
  * @fn  	task_1ms
  * @brief  Ejecucion de tareas de 1 milisegundo
  */
void task_1ms(void){
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	af00      	add	r7, sp, #0
	NRF24_StateMachine();
 8000eaa:	f001 fb19 	bl	80024e0 <NRF24_StateMachine>

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <task_init_10ms>:

/**
  * @fn  	task_init_10ms
  * @brief  Inicializaciones para tarea de 10 milisegundos
  */
void task_init_10ms(void){
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <task_10ms>:

/**
  * @fn  	task_10ms
  * @brief  Ejecucion de tareas de 10 milisegundos
  */
void task_10ms(void){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	MPU6050_calculate();
 8000ec4:	f001 fed2 	bl	8002c6c <MPU6050_calculate>
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <task_init_100ms>:

/**
  * @fn  	task_init_100ms
  * @brief  Inicializaciones para tarea de 100 milisegundos
  */
void task_init_100ms(void){
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <task_100ms>:

/**
  * @fn  	task_100ms
  * @brief  Ejecucion de tareas de 100 milisegundos
  */
void task_100ms(void){
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
	BMP280_calculate();
 8000ede:	f000 fd1b 	bl	8001918 <BMP280_calculate>

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <task_init_1000ms>:

/**
  * @fn  	task_init_1000ms
  * @brief  Inicializaciones para tarea de 1000 milisegundos
  */
void task_init_1000ms(void){
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <task_1000ms>:

/**
  * @fn  	task_1000ms
  * @brief  Ejecucion de tareas de 1000 milisegundos
  */
void task_1000ms(void){
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <BMP280_write>:

int32_t T_raw, P_raw, t_fine,Temperature, Altitud;
uint32_t Presure;


void BMP280_write(uint8_t Address, uint8_t Data){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	71fb      	strb	r3, [r7, #7]
 8000f10:	4613      	mov	r3, r2
 8000f12:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f1a:	480f      	ldr	r0, [pc, #60]	@ (8000f58 <BMP280_write+0x54>)
 8000f1c:	f003 fa3e 	bl	800439c <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000f2a:	1df9      	adds	r1, r7, #7
 8000f2c:	2364      	movs	r3, #100	@ 0x64
 8000f2e:	2201      	movs	r2, #1
 8000f30:	480a      	ldr	r0, [pc, #40]	@ (8000f5c <BMP280_write+0x58>)
 8000f32:	f004 ffc4 	bl	8005ebe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8000f36:	1db9      	adds	r1, r7, #6
 8000f38:	2364      	movs	r3, #100	@ 0x64
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4807      	ldr	r0, [pc, #28]	@ (8000f5c <BMP280_write+0x58>)
 8000f3e:	f004 ffbe 	bl	8005ebe <HAL_SPI_Transmit>

	BMP280_unselect();
 8000f42:	2201      	movs	r2, #1
 8000f44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f48:	4803      	ldr	r0, [pc, #12]	@ (8000f58 <BMP280_write+0x54>)
 8000f4a:	f003 fa27 	bl	800439c <HAL_GPIO_WritePin>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	200005a0 	.word	0x200005a0

08000f60 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f7a:	480e      	ldr	r0, [pc, #56]	@ (8000fb4 <BMP280_read+0x54>)
 8000f7c:	f003 fa0e 	bl	800439c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8000f80:	f107 010f 	add.w	r1, r7, #15
 8000f84:	2364      	movs	r3, #100	@ 0x64
 8000f86:	2201      	movs	r2, #1
 8000f88:	480b      	ldr	r0, [pc, #44]	@ (8000fb8 <BMP280_read+0x58>)
 8000f8a:	f004 ff98 	bl	8005ebe <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8000f8e:	f107 010f 	add.w	r1, r7, #15
 8000f92:	2364      	movs	r3, #100	@ 0x64
 8000f94:	2201      	movs	r2, #1
 8000f96:	4808      	ldr	r0, [pc, #32]	@ (8000fb8 <BMP280_read+0x58>)
 8000f98:	f005 f8d4 	bl	8006144 <HAL_SPI_Receive>
	BMP280_unselect();
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fa2:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <BMP280_read+0x54>)
 8000fa4:	f003 f9fa 	bl	800439c <HAL_GPIO_WritePin>

	return Buffer;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	200005a0 	.word	0x200005a0

08000fbc <BMP280_config>:

void BMP280_config(void){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8000fc0:	2157      	movs	r1, #87	@ 0x57
 8000fc2:	20f4      	movs	r0, #244	@ 0xf4
 8000fc4:	f7ff ff9e 	bl	8000f04 <BMP280_write>
	BMP280_write(config, 0x10);
 8000fc8:	2110      	movs	r1, #16
 8000fca:	20f5      	movs	r0, #245	@ 0xf5
 8000fcc:	f7ff ff9a 	bl	8000f04 <BMP280_write>
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <BMP280_calibrationData>:
	uint8_t Buffer   = BMP280_read(status);
	BMP280_im_update = (Buffer&0x01);
	BMP280_measuring = (Buffer&0x08)>>3;
}

void BMP280_calibrationData(void){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000fda:	2388      	movs	r3, #136	@ 0x88
 8000fdc:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]
	BMP280_select();
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ff8:	4843      	ldr	r0, [pc, #268]	@ (8001108 <BMP280_calibrationData+0x134>)
 8000ffa:	f003 f9cf 	bl	800439c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000ffe:	f107 011f 	add.w	r1, r7, #31
 8001002:	2364      	movs	r3, #100	@ 0x64
 8001004:	2201      	movs	r2, #1
 8001006:	4841      	ldr	r0, [pc, #260]	@ (800110c <BMP280_calibrationData+0x138>)
 8001008:	f004 ff59 	bl	8005ebe <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 800100c:	1d39      	adds	r1, r7, #4
 800100e:	2364      	movs	r3, #100	@ 0x64
 8001010:	2218      	movs	r2, #24
 8001012:	483e      	ldr	r0, [pc, #248]	@ (800110c <BMP280_calibrationData+0x138>)
 8001014:	f005 f896 	bl	8006144 <HAL_SPI_Receive>
	BMP280_unselect();
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800101e:	483a      	ldr	r0, [pc, #232]	@ (8001108 <BMP280_calibrationData+0x134>)
 8001020:	f003 f9bc 	bl	800439c <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8001024:	797b      	ldrb	r3, [r7, #5]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	793b      	ldrb	r3, [r7, #4]
 800102c:	b21b      	sxth	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b21b      	sxth	r3, r3
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b36      	ldr	r3, [pc, #216]	@ (8001110 <BMP280_calibrationData+0x13c>)
 8001036:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21a      	sxth	r2, r3
 8001046:	4b33      	ldr	r3, [pc, #204]	@ (8001114 <BMP280_calibrationData+0x140>)
 8001048:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 800104a:	7a7b      	ldrb	r3, [r7, #9]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b21a      	sxth	r2, r3
 8001050:	7a3b      	ldrb	r3, [r7, #8]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21a      	sxth	r2, r3
 8001058:	4b2f      	ldr	r3, [pc, #188]	@ (8001118 <BMP280_calibrationData+0x144>)
 800105a:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 800105c:	7afb      	ldrb	r3, [r7, #11]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	7abb      	ldrb	r3, [r7, #10]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21b      	sxth	r3, r3
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <BMP280_calibrationData+0x148>)
 800106e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8001070:	7b7b      	ldrb	r3, [r7, #13]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	7b3b      	ldrb	r3, [r7, #12]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21a      	sxth	r2, r3
 800107e:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <BMP280_calibrationData+0x14c>)
 8001080:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	b21b      	sxth	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	b21a      	sxth	r2, r3
 8001090:	4b24      	ldr	r3, [pc, #144]	@ (8001124 <BMP280_calibrationData+0x150>)
 8001092:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8001094:	7c7b      	ldrb	r3, [r7, #17]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b21a      	sxth	r2, r3
 800109a:	7c3b      	ldrb	r3, [r7, #16]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <BMP280_calibrationData+0x154>)
 80010a4:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 80010a6:	7cfb      	ldrb	r3, [r7, #19]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	7cbb      	ldrb	r3, [r7, #18]
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <BMP280_calibrationData+0x158>)
 80010b6:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 80010b8:	7d7b      	ldrb	r3, [r7, #21]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	7d3b      	ldrb	r3, [r7, #20]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <BMP280_calibrationData+0x15c>)
 80010c8:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	7dbb      	ldrb	r3, [r7, #22]
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <BMP280_calibrationData+0x160>)
 80010da:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 80010dc:	7e7b      	ldrb	r3, [r7, #25]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	7e3b      	ldrb	r3, [r7, #24]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <BMP280_calibrationData+0x164>)
 80010ec:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 80010ee:	7efb      	ldrb	r3, [r7, #27]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	7ebb      	ldrb	r3, [r7, #26]
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <BMP280_calibrationData+0x168>)
 80010fe:	801a      	strh	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40020000 	.word	0x40020000
 800110c:	200005a0 	.word	0x200005a0
 8001110:	2000011e 	.word	0x2000011e
 8001114:	20000122 	.word	0x20000122
 8001118:	20000124 	.word	0x20000124
 800111c:	20000120 	.word	0x20000120
 8001120:	20000126 	.word	0x20000126
 8001124:	20000128 	.word	0x20000128
 8001128:	2000012a 	.word	0x2000012a
 800112c:	2000012c 	.word	0x2000012c
 8001130:	2000012e 	.word	0x2000012e
 8001134:	20000130 	.word	0x20000130
 8001138:	20000132 	.word	0x20000132
 800113c:	20000134 	.word	0x20000134

08001140 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8001146:	23f7      	movs	r3, #247	@ 0xf7
 8001148:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 800114a:	2300      	movs	r3, #0
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	2300      	movs	r3, #0
 8001150:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001158:	4817      	ldr	r0, [pc, #92]	@ (80011b8 <BMP280_readRawValues+0x78>)
 800115a:	f003 f91f 	bl	800439c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800115e:	1df9      	adds	r1, r7, #7
 8001160:	2364      	movs	r3, #100	@ 0x64
 8001162:	2201      	movs	r2, #1
 8001164:	4815      	ldr	r0, [pc, #84]	@ (80011bc <BMP280_readRawValues+0x7c>)
 8001166:	f004 feaa 	bl	8005ebe <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 800116a:	4639      	mov	r1, r7
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	2206      	movs	r2, #6
 8001170:	4812      	ldr	r0, [pc, #72]	@ (80011bc <BMP280_readRawValues+0x7c>)
 8001172:	f004 ffe7 	bl	8006144 <HAL_SPI_Receive>
	BMP280_unselect();
 8001176:	2201      	movs	r2, #1
 8001178:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800117c:	480e      	ldr	r0, [pc, #56]	@ (80011b8 <BMP280_readRawValues+0x78>)
 800117e:	f003 f90d 	bl	800439c <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8001182:	783b      	ldrb	r3, [r7, #0]
 8001184:	031a      	lsls	r2, r3, #12
 8001186:	787b      	ldrb	r3, [r7, #1]
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	4313      	orrs	r3, r2
 800118c:	78ba      	ldrb	r2, [r7, #2]
 800118e:	0912      	lsrs	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	4313      	orrs	r3, r2
 8001194:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <BMP280_readRawValues+0x80>)
 8001196:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	031a      	lsls	r2, r3, #12
 800119c:	793b      	ldrb	r3, [r7, #4]
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	4313      	orrs	r3, r2
 80011a2:	797a      	ldrb	r2, [r7, #5]
 80011a4:	0912      	lsrs	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	4313      	orrs	r3, r2
 80011aa:	4a06      	ldr	r2, [pc, #24]	@ (80011c4 <BMP280_readRawValues+0x84>)
 80011ac:	6013      	str	r3, [r2, #0]
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40020000 	.word	0x40020000
 80011bc:	200005a0 	.word	0x200005a0
 80011c0:	2000013c 	.word	0x2000013c
 80011c4:	20000138 	.word	0x20000138

080011c8 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <BMP280_measureT+0x74>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	10da      	asrs	r2, r3, #3
 80011d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <BMP280_measureT+0x78>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	4a19      	ldr	r2, [pc, #100]	@ (8001244 <BMP280_measureT+0x7c>)
 80011e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011e4:	fb02 f303 	mul.w	r3, r2, r3
 80011e8:	12db      	asrs	r3, r3, #11
 80011ea:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	111b      	asrs	r3, r3, #4
 80011f0:	4a13      	ldr	r2, [pc, #76]	@ (8001240 <BMP280_measureT+0x78>)
 80011f2:	8812      	ldrh	r2, [r2, #0]
 80011f4:	1a9b      	subs	r3, r3, r2
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	1112      	asrs	r2, r2, #4
 80011fa:	4911      	ldr	r1, [pc, #68]	@ (8001240 <BMP280_measureT+0x78>)
 80011fc:	8809      	ldrh	r1, [r1, #0]
 80011fe:	1a52      	subs	r2, r2, r1
 8001200:	fb02 f303 	mul.w	r3, r2, r3
 8001204:	131b      	asrs	r3, r3, #12
 8001206:	4a10      	ldr	r2, [pc, #64]	@ (8001248 <BMP280_measureT+0x80>)
 8001208:	f9b2 2000 	ldrsh.w	r2, [r2]
 800120c:	fb02 f303 	mul.w	r3, r2, r3
 8001210:	139b      	asrs	r3, r3, #14
 8001212:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4413      	add	r3, r2
 800121a:	4a0c      	ldr	r2, [pc, #48]	@ (800124c <BMP280_measureT+0x84>)
 800121c:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800121e:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <BMP280_measureT+0x84>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	3380      	adds	r3, #128	@ 0x80
 800122a:	121b      	asrs	r3, r3, #8
 800122c:	60fb      	str	r3, [r7, #12]
	return T;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	371c      	adds	r7, #28
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	20000138 	.word	0x20000138
 8001240:	2000011e 	.word	0x2000011e
 8001244:	20000122 	.word	0x20000122
 8001248:	20000124 	.word	0x20000124
 800124c:	20000140 	.word	0x20000140

08001250 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8001250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001254:	b0ca      	sub	sp, #296	@ 0x128
 8001256:	af00      	add	r7, sp, #0
 8001258:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 800125c:	4baf      	ldr	r3, [pc, #700]	@ (800151c <BMP280_measureP+0x2cc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	17da      	asrs	r2, r3, #31
 8001262:	461c      	mov	r4, r3
 8001264:	4615      	mov	r5, r2
 8001266:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800126a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800126e:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001272:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001276:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800127a:	fb03 f102 	mul.w	r1, r3, r2
 800127e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001282:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001286:	fb02 f303 	mul.w	r3, r2, r3
 800128a:	18ca      	adds	r2, r1, r3
 800128c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001290:	fba3 8903 	umull	r8, r9, r3, r3
 8001294:	eb02 0309 	add.w	r3, r2, r9
 8001298:	4699      	mov	r9, r3
 800129a:	4ba1      	ldr	r3, [pc, #644]	@ (8001520 <BMP280_measureP+0x2d0>)
 800129c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	17da      	asrs	r2, r3, #31
 80012a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80012a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80012ac:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80012b0:	4603      	mov	r3, r0
 80012b2:	fb03 f209 	mul.w	r2, r3, r9
 80012b6:	460b      	mov	r3, r1
 80012b8:	fb08 f303 	mul.w	r3, r8, r3
 80012bc:	4413      	add	r3, r2
 80012be:	4602      	mov	r2, r0
 80012c0:	fba8 1202 	umull	r1, r2, r8, r2
 80012c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80012c8:	460a      	mov	r2, r1
 80012ca:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80012ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80012d2:	4413      	add	r3, r2
 80012d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80012d8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80012dc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80012e0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80012e4:	4b8f      	ldr	r3, [pc, #572]	@ (8001524 <BMP280_measureP+0x2d4>)
 80012e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	17da      	asrs	r2, r3, #31
 80012ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80012f2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80012f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012fa:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80012fe:	462a      	mov	r2, r5
 8001300:	fb02 f203 	mul.w	r2, r2, r3
 8001304:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001308:	4621      	mov	r1, r4
 800130a:	fb01 f303 	mul.w	r3, r1, r3
 800130e:	441a      	add	r2, r3
 8001310:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001314:	4621      	mov	r1, r4
 8001316:	fba3 1301 	umull	r1, r3, r3, r1
 800131a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800131e:	460b      	mov	r3, r1
 8001320:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001328:	18d3      	adds	r3, r2, r3
 800132a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800132e:	f04f 0000 	mov.w	r0, #0
 8001332:	f04f 0100 	mov.w	r1, #0
 8001336:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800133a:	462b      	mov	r3, r5
 800133c:	0459      	lsls	r1, r3, #17
 800133e:	4623      	mov	r3, r4
 8001340:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001344:	4623      	mov	r3, r4
 8001346:	0458      	lsls	r0, r3, #17
 8001348:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800134c:	1814      	adds	r4, r2, r0
 800134e:	643c      	str	r4, [r7, #64]	@ 0x40
 8001350:	414b      	adcs	r3, r1
 8001352:	647b      	str	r3, [r7, #68]	@ 0x44
 8001354:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001358:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 800135c:	4b72      	ldr	r3, [pc, #456]	@ (8001528 <BMP280_measureP+0x2d8>)
 800135e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001362:	b21b      	sxth	r3, r3
 8001364:	17da      	asrs	r2, r3, #31
 8001366:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800136a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800136e:	f04f 0000 	mov.w	r0, #0
 8001372:	f04f 0100 	mov.w	r1, #0
 8001376:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800137a:	00d9      	lsls	r1, r3, #3
 800137c:	2000      	movs	r0, #0
 800137e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001382:	1814      	adds	r4, r2, r0
 8001384:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001386:	414b      	adcs	r3, r1
 8001388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800138a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800138e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001392:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001396:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800139a:	fb03 f102 	mul.w	r1, r3, r2
 800139e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80013a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013a6:	fb02 f303 	mul.w	r3, r2, r3
 80013aa:	18ca      	adds	r2, r1, r3
 80013ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013b0:	fba3 1303 	umull	r1, r3, r3, r3
 80013b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80013b8:	460b      	mov	r3, r1
 80013ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80013be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80013c2:	18d3      	adds	r3, r2, r3
 80013c4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80013c8:	4b58      	ldr	r3, [pc, #352]	@ (800152c <BMP280_measureP+0x2dc>)
 80013ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	17da      	asrs	r2, r3, #31
 80013d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80013d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80013da:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80013de:	462b      	mov	r3, r5
 80013e0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80013e4:	4642      	mov	r2, r8
 80013e6:	fb02 f203 	mul.w	r2, r2, r3
 80013ea:	464b      	mov	r3, r9
 80013ec:	4621      	mov	r1, r4
 80013ee:	fb01 f303 	mul.w	r3, r1, r3
 80013f2:	4413      	add	r3, r2
 80013f4:	4622      	mov	r2, r4
 80013f6:	4641      	mov	r1, r8
 80013f8:	fba2 1201 	umull	r1, r2, r2, r1
 80013fc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001400:	460a      	mov	r2, r1
 8001402:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001406:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800140a:	4413      	add	r3, r2
 800140c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001410:	f04f 0000 	mov.w	r0, #0
 8001414:	f04f 0100 	mov.w	r1, #0
 8001418:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800141c:	4623      	mov	r3, r4
 800141e:	0a18      	lsrs	r0, r3, #8
 8001420:	462b      	mov	r3, r5
 8001422:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001426:	462b      	mov	r3, r5
 8001428:	1219      	asrs	r1, r3, #8
 800142a:	4b41      	ldr	r3, [pc, #260]	@ (8001530 <BMP280_measureP+0x2e0>)
 800142c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001430:	b21b      	sxth	r3, r3
 8001432:	17da      	asrs	r2, r3, #31
 8001434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001438:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800143c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001440:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001444:	464a      	mov	r2, r9
 8001446:	fb02 f203 	mul.w	r2, r2, r3
 800144a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800144e:	4644      	mov	r4, r8
 8001450:	fb04 f303 	mul.w	r3, r4, r3
 8001454:	441a      	add	r2, r3
 8001456:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800145a:	4644      	mov	r4, r8
 800145c:	fba3 4304 	umull	r4, r3, r3, r4
 8001460:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001464:	4623      	mov	r3, r4
 8001466:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800146a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800146e:	18d3      	adds	r3, r2, r3
 8001470:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001480:	464c      	mov	r4, r9
 8001482:	0323      	lsls	r3, r4, #12
 8001484:	4644      	mov	r4, r8
 8001486:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800148a:	4644      	mov	r4, r8
 800148c:	0322      	lsls	r2, r4, #12
 800148e:	1884      	adds	r4, r0, r2
 8001490:	633c      	str	r4, [r7, #48]	@ 0x30
 8001492:	eb41 0303 	adc.w	r3, r1, r3
 8001496:	637b      	str	r3, [r7, #52]	@ 0x34
 8001498:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800149c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80014a0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80014a4:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80014a8:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80014ac:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80014b0:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <BMP280_measureP+0x2e4>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	2200      	movs	r2, #0
 80014b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014c0:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014c4:	462b      	mov	r3, r5
 80014c6:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80014ca:	4642      	mov	r2, r8
 80014cc:	fb02 f203 	mul.w	r2, r2, r3
 80014d0:	464b      	mov	r3, r9
 80014d2:	4621      	mov	r1, r4
 80014d4:	fb01 f303 	mul.w	r3, r1, r3
 80014d8:	4413      	add	r3, r2
 80014da:	4622      	mov	r2, r4
 80014dc:	4641      	mov	r1, r8
 80014de:	fba2 1201 	umull	r1, r2, r2, r1
 80014e2:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80014e6:	460a      	mov	r2, r1
 80014e8:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80014ec:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80014f0:	4413      	add	r3, r2
 80014f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001502:	4629      	mov	r1, r5
 8001504:	104a      	asrs	r2, r1, #1
 8001506:	4629      	mov	r1, r5
 8001508:	17cb      	asrs	r3, r1, #31
 800150a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 800150e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001512:	4313      	orrs	r3, r2
 8001514:	d110      	bne.n	8001538 <BMP280_measureP+0x2e8>
	{
	return 0;
 8001516:	2300      	movs	r3, #0
 8001518:	e154      	b.n	80017c4 <BMP280_measureP+0x574>
 800151a:	bf00      	nop
 800151c:	20000140 	.word	0x20000140
 8001520:	2000012e 	.word	0x2000012e
 8001524:	2000012c 	.word	0x2000012c
 8001528:	2000012a 	.word	0x2000012a
 800152c:	20000128 	.word	0x20000128
 8001530:	20000126 	.word	0x20000126
 8001534:	20000120 	.word	0x20000120
	}
	p = 1048576-adc_P;
 8001538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800153c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001540:	17da      	asrs	r2, r3, #31
 8001542:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001544:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001546:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800154a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800154e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001552:	105b      	asrs	r3, r3, #1
 8001554:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001558:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800155c:	07db      	lsls	r3, r3, #31
 800155e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001562:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001566:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800156a:	4621      	mov	r1, r4
 800156c:	1a89      	subs	r1, r1, r2
 800156e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001570:	4629      	mov	r1, r5
 8001572:	eb61 0303 	sbc.w	r3, r1, r3
 8001576:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001578:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800157c:	4622      	mov	r2, r4
 800157e:	462b      	mov	r3, r5
 8001580:	1891      	adds	r1, r2, r2
 8001582:	6239      	str	r1, [r7, #32]
 8001584:	415b      	adcs	r3, r3
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
 8001588:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800158c:	4621      	mov	r1, r4
 800158e:	1851      	adds	r1, r2, r1
 8001590:	61b9      	str	r1, [r7, #24]
 8001592:	4629      	mov	r1, r5
 8001594:	414b      	adcs	r3, r1
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015a4:	4649      	mov	r1, r9
 80015a6:	018b      	lsls	r3, r1, #6
 80015a8:	4641      	mov	r1, r8
 80015aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015ae:	4641      	mov	r1, r8
 80015b0:	018a      	lsls	r2, r1, #6
 80015b2:	4641      	mov	r1, r8
 80015b4:	1889      	adds	r1, r1, r2
 80015b6:	6139      	str	r1, [r7, #16]
 80015b8:	4649      	mov	r1, r9
 80015ba:	eb43 0101 	adc.w	r1, r3, r1
 80015be:	6179      	str	r1, [r7, #20]
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015cc:	4649      	mov	r1, r9
 80015ce:	008b      	lsls	r3, r1, #2
 80015d0:	4641      	mov	r1, r8
 80015d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015d6:	4641      	mov	r1, r8
 80015d8:	008a      	lsls	r2, r1, #2
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	4622      	mov	r2, r4
 80015e2:	189b      	adds	r3, r3, r2
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	460b      	mov	r3, r1
 80015e8:	462a      	mov	r2, r5
 80015ea:	eb42 0303 	adc.w	r3, r2, r3
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80015fc:	4649      	mov	r1, r9
 80015fe:	008b      	lsls	r3, r1, #2
 8001600:	4641      	mov	r1, r8
 8001602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001606:	4641      	mov	r1, r8
 8001608:	008a      	lsls	r2, r1, #2
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	4603      	mov	r3, r0
 8001610:	4622      	mov	r2, r4
 8001612:	189b      	adds	r3, r3, r2
 8001614:	673b      	str	r3, [r7, #112]	@ 0x70
 8001616:	462b      	mov	r3, r5
 8001618:	460a      	mov	r2, r1
 800161a:	eb42 0303 	adc.w	r3, r2, r3
 800161e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001620:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001624:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001628:	f7ff fa6e 	bl	8000b08 <__aeabi_ldivmod>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001634:	4b66      	ldr	r3, [pc, #408]	@ (80017d0 <BMP280_measureP+0x580>)
 8001636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163a:	b21b      	sxth	r3, r3
 800163c:	17da      	asrs	r2, r3, #31
 800163e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001640:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001642:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001646:	f04f 0000 	mov.w	r0, #0
 800164a:	f04f 0100 	mov.w	r1, #0
 800164e:	0b50      	lsrs	r0, r2, #13
 8001650:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001654:	1359      	asrs	r1, r3, #13
 8001656:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800165a:	462b      	mov	r3, r5
 800165c:	fb00 f203 	mul.w	r2, r0, r3
 8001660:	4623      	mov	r3, r4
 8001662:	fb03 f301 	mul.w	r3, r3, r1
 8001666:	4413      	add	r3, r2
 8001668:	4622      	mov	r2, r4
 800166a:	fba2 1200 	umull	r1, r2, r2, r0
 800166e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001672:	460a      	mov	r2, r1
 8001674:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001678:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800167c:	4413      	add	r3, r2
 800167e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001682:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001686:	f04f 0000 	mov.w	r0, #0
 800168a:	f04f 0100 	mov.w	r1, #0
 800168e:	0b50      	lsrs	r0, r2, #13
 8001690:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001694:	1359      	asrs	r1, r3, #13
 8001696:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800169a:	462b      	mov	r3, r5
 800169c:	fb00 f203 	mul.w	r2, r0, r3
 80016a0:	4623      	mov	r3, r4
 80016a2:	fb03 f301 	mul.w	r3, r3, r1
 80016a6:	4413      	add	r3, r2
 80016a8:	4622      	mov	r2, r4
 80016aa:	fba2 1200 	umull	r1, r2, r2, r0
 80016ae:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80016b2:	460a      	mov	r2, r1
 80016b4:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80016b8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80016bc:	4413      	add	r3, r2
 80016be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80016ce:	4621      	mov	r1, r4
 80016d0:	0e4a      	lsrs	r2, r1, #25
 80016d2:	4629      	mov	r1, r5
 80016d4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016d8:	4629      	mov	r1, r5
 80016da:	164b      	asrs	r3, r1, #25
 80016dc:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80016e0:	4b3c      	ldr	r3, [pc, #240]	@ (80017d4 <BMP280_measureP+0x584>)
 80016e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	17da      	asrs	r2, r3, #31
 80016ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80016ec:	667a      	str	r2, [r7, #100]	@ 0x64
 80016ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80016f2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016f6:	462a      	mov	r2, r5
 80016f8:	fb02 f203 	mul.w	r2, r2, r3
 80016fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001700:	4621      	mov	r1, r4
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	4413      	add	r3, r2
 8001708:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800170c:	4621      	mov	r1, r4
 800170e:	fba2 1201 	umull	r1, r2, r2, r1
 8001712:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001716:	460a      	mov	r2, r1
 8001718:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800171c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001720:	4413      	add	r3, r2
 8001722:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001732:	4621      	mov	r1, r4
 8001734:	0cca      	lsrs	r2, r1, #19
 8001736:	4629      	mov	r1, r5
 8001738:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800173c:	4629      	mov	r1, r5
 800173e:	14cb      	asrs	r3, r1, #19
 8001740:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001744:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001748:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800174c:	1884      	adds	r4, r0, r2
 800174e:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001750:	eb41 0303 	adc.w	r3, r1, r3
 8001754:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001756:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800175a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800175e:	4621      	mov	r1, r4
 8001760:	1889      	adds	r1, r1, r2
 8001762:	6539      	str	r1, [r7, #80]	@ 0x50
 8001764:	4629      	mov	r1, r5
 8001766:	eb43 0101 	adc.w	r1, r3, r1
 800176a:	6579      	str	r1, [r7, #84]	@ 0x54
 800176c:	f04f 0000 	mov.w	r0, #0
 8001770:	f04f 0100 	mov.w	r1, #0
 8001774:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001778:	4623      	mov	r3, r4
 800177a:	0a18      	lsrs	r0, r3, #8
 800177c:	462b      	mov	r3, r5
 800177e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001782:	462b      	mov	r3, r5
 8001784:	1219      	asrs	r1, r3, #8
 8001786:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <BMP280_measureP+0x588>)
 8001788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178c:	b21b      	sxth	r3, r3
 800178e:	17da      	asrs	r2, r3, #31
 8001790:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001792:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80017a0:	464c      	mov	r4, r9
 80017a2:	0123      	lsls	r3, r4, #4
 80017a4:	4644      	mov	r4, r8
 80017a6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80017aa:	4644      	mov	r4, r8
 80017ac:	0122      	lsls	r2, r4, #4
 80017ae:	1884      	adds	r4, r0, r2
 80017b0:	603c      	str	r4, [r7, #0]
 80017b2:	eb41 0303 	adc.w	r3, r1, r3
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017bc:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80017c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80017ca:	46bd      	mov	sp, r7
 80017cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017d0:	20000134 	.word	0x20000134
 80017d4:	20000132 	.word	0x20000132
 80017d8:	20000130 	.word	0x20000130
 80017dc:	00000000 	.word	0x00000000

080017e0 <BMP280_measureH>:

int32_t BMP280_measureH(int32_t Pres, int32_t Temp){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <BMP280_measureH+0x14>
 80017f0:	2300      	movs	r3, #0
 80017f2:	e062      	b.n	80018ba <BMP280_measureH+0xda>
	var1 = -log((((double)Pres)/100)/101325);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7fe fe45 	bl	8000484 <__aeabi_i2d>
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	4b38      	ldr	r3, [pc, #224]	@ (80018e0 <BMP280_measureH+0x100>)
 8001800:	f7fe ffd4 	bl	80007ac <__aeabi_ddiv>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	a32e      	add	r3, pc, #184	@ (adr r3, 80018c8 <BMP280_measureH+0xe8>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7fe ffcb 	bl	80007ac <__aeabi_ddiv>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	ec43 2b17 	vmov	d7, r2, r3
 800181e:	eeb0 0a47 	vmov.f32	s0, s14
 8001822:	eef0 0a67 	vmov.f32	s1, s15
 8001826:	f007 fa9b 	bl	8008d60 <log>
 800182a:	ec53 2b10 	vmov	r2, r3, d0
 800182e:	4611      	mov	r1, r2
 8001830:	61b9      	str	r1, [r7, #24]
 8001832:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001836:	61fb      	str	r3, [r7, #28]

	if(var1 == 0) return 0;
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001844:	f7ff f8f0 	bl	8000a28 <__aeabi_dcmpeq>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <BMP280_measureH+0x72>
 800184e:	2300      	movs	r3, #0
 8001850:	e033      	b.n	80018ba <BMP280_measureH+0xda>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8001852:	6838      	ldr	r0, [r7, #0]
 8001854:	f7fe fe16 	bl	8000484 <__aeabi_i2d>
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <BMP280_measureH+0x100>)
 800185e:	f7fe ffa5 	bl	80007ac <__aeabi_ddiv>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	a319      	add	r3, pc, #100	@ (adr r3, 80018d0 <BMP280_measureH+0xf0>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7fe fcbc 	bl	80001ec <__adddf3>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	a117      	add	r1, pc, #92	@ (adr r1, 80018d8 <BMP280_measureH+0xf8>)
 800187a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800187e:	f7fe ff95 	bl	80007ac <__aeabi_ddiv>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	e9c7 2304 	strd	r2, r3, [r7, #16]
	h = (var1/var2)*100;
 800188a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800188e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001892:	f7fe ff8b 	bl	80007ac <__aeabi_ddiv>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <BMP280_measureH+0x100>)
 80018a4:	f7fe fe58 	bl	8000558 <__aeabi_dmul>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t)h;
 80018b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018b4:	f7ff f900 	bl	8000ab8 <__aeabi_d2iz>
 80018b8:	4603      	mov	r3, r0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3720      	adds	r7, #32
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	f3af 8000 	nop.w
 80018c8:	00000000 	.word	0x00000000
 80018cc:	40f8bcd0 	.word	0x40f8bcd0
 80018d0:	66666666 	.word	0x66666666
 80018d4:	40711266 	.word	0x40711266
 80018d8:	ca402a92 	.word	0xca402a92
 80018dc:	3fa17e3e 	.word	0x3fa17e3e
 80018e0:	40590000 	.word	0x40590000

080018e4 <BMP280_init>:

void BMP280_init(void){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	BMP280_unselect();
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018ee:	4808      	ldr	r0, [pc, #32]	@ (8001910 <BMP280_init+0x2c>)
 80018f0:	f002 fd54 	bl	800439c <HAL_GPIO_WritePin>
	BMP280_config();
 80018f4:	f7ff fb62 	bl	8000fbc <BMP280_config>
	BMP280_ID = BMP280_read(0x89);
 80018f8:	2089      	movs	r0, #137	@ 0x89
 80018fa:	f7ff fb31 	bl	8000f60 <BMP280_read>
 80018fe:	4603      	mov	r3, r0
 8001900:	461a      	mov	r2, r3
 8001902:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <BMP280_init+0x30>)
 8001904:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001906:	f7ff fb65 	bl	8000fd4 <BMP280_calibrationData>
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40020000 	.word	0x40020000
 8001914:	2000011c 	.word	0x2000011c

08001918 <BMP280_calculate>:

void BMP280_calculate(void){
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	BMP280_readRawValues();
 800191c:	f7ff fc10 	bl	8001140 <BMP280_readRawValues>
	Temperature = BMP280_measureT(T_raw);
 8001920:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <BMP280_calculate+0x4c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fc4f 	bl	80011c8 <BMP280_measureT>
 800192a:	4603      	mov	r3, r0
 800192c:	4a0e      	ldr	r2, [pc, #56]	@ (8001968 <BMP280_calculate+0x50>)
 800192e:	6013      	str	r3, [r2, #0]
	Presure     = (BMP280_measureP(P_raw)*100)/256;
 8001930:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <BMP280_calculate+0x54>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fc8b 	bl	8001250 <BMP280_measureP>
 800193a:	4603      	mov	r3, r0
 800193c:	2264      	movs	r2, #100	@ 0x64
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	0a1b      	lsrs	r3, r3, #8
 8001944:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <BMP280_calculate+0x58>)
 8001946:	6013      	str	r3, [r2, #0]
	Altitud = BMP280_measureH(Presure, Temperature);
 8001948:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <BMP280_calculate+0x58>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <BMP280_calculate+0x50>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4619      	mov	r1, r3
 8001954:	4610      	mov	r0, r2
 8001956:	f7ff ff43 	bl	80017e0 <BMP280_measureH>
 800195a:	4603      	mov	r3, r0
 800195c:	4a05      	ldr	r2, [pc, #20]	@ (8001974 <BMP280_calculate+0x5c>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000138 	.word	0x20000138
 8001968:	20000144 	.word	0x20000144
 800196c:	2000013c 	.word	0x2000013c
 8001970:	2000014c 	.word	0x2000014c
 8001974:	20000148 	.word	0x20000148

08001978 <NRF24_write>:
uint8_t NRF24_mode;

uint8_t TxBuffer[32];
uint8_t RxBuffer[32];

void NRF24_write(uint8_t Adr, uint8_t data){
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	460a      	mov	r2, r1
 8001982:	71fb      	strb	r3, [r7, #7]
 8001984:	4613      	mov	r3, r2
 8001986:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f043 0320 	orr.w	r3, r3, #32
 800198e:	b2db      	uxtb	r3, r3
 8001990:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8001992:	2200      	movs	r2, #0
 8001994:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001998:	480c      	ldr	r0, [pc, #48]	@ (80019cc <NRF24_write+0x54>)
 800199a:	f002 fcff 	bl	800439c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 800199e:	1dfb      	adds	r3, r7, #7
 80019a0:	2201      	movs	r2, #1
 80019a2:	4619      	mov	r1, r3
 80019a4:	480a      	ldr	r0, [pc, #40]	@ (80019d0 <NRF24_write+0x58>)
 80019a6:	f004 fe95 	bl	80066d4 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &data, 1);
 80019aa:	1dbb      	adds	r3, r7, #6
 80019ac:	2201      	movs	r2, #1
 80019ae:	4619      	mov	r1, r3
 80019b0:	4807      	ldr	r0, [pc, #28]	@ (80019d0 <NRF24_write+0x58>)
 80019b2:	f004 fe8f 	bl	80066d4 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 80019b6:	2201      	movs	r2, #1
 80019b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019bc:	4803      	ldr	r0, [pc, #12]	@ (80019cc <NRF24_write+0x54>)
 80019be:	f002 fced 	bl	800439c <HAL_GPIO_WritePin>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40020400 	.word	0x40020400
 80019d0:	20000548 	.word	0x20000548

080019d4 <NRF24_Addr_write>:

void NRF24_Addr_write(uint8_t Adr,uint8_t *ADDRESS){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
	Adr |= W_REGISTER;
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f043 0320 	orr.w	r3, r3, #32
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[5];
	buffer[0] = ADDRESS[4];
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	791b      	ldrb	r3, [r3, #4]
 80019ee:	723b      	strb	r3, [r7, #8]
	buffer[1] = ADDRESS[3];
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	78db      	ldrb	r3, [r3, #3]
 80019f4:	727b      	strb	r3, [r7, #9]
	buffer[2] = ADDRESS[2];
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	789b      	ldrb	r3, [r3, #2]
 80019fa:	72bb      	strb	r3, [r7, #10]
	buffer[3] = ADDRESS[1];
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	785b      	ldrb	r3, [r3, #1]
 8001a00:	72fb      	strb	r3, [r7, #11]
	buffer[4] = ADDRESS[0];
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	733b      	strb	r3, [r7, #12]

	NRF24_select();
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a0e:	4812      	ldr	r0, [pc, #72]	@ (8001a58 <NRF24_Addr_write+0x84>)
 8001a10:	f002 fcc4 	bl	800439c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001a14:	1dfb      	adds	r3, r7, #7
 8001a16:	2201      	movs	r2, #1
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4810      	ldr	r0, [pc, #64]	@ (8001a5c <NRF24_Addr_write+0x88>)
 8001a1c:	f004 fe5a 	bl	80066d4 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	e00b      	b.n	8001a3e <NRF24_Addr_write+0x6a>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &buffer[n], 1);
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	f107 0208 	add.w	r2, r7, #8
 8001a2c:	4413      	add	r3, r2
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4619      	mov	r1, r3
 8001a32:	480a      	ldr	r0, [pc, #40]	@ (8001a5c <NRF24_Addr_write+0x88>)
 8001a34:	f004 fe4e 	bl	80066d4 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d9f0      	bls.n	8001a26 <NRF24_Addr_write+0x52>
	}

	NRF24_unselect();
 8001a44:	2201      	movs	r2, #1
 8001a46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a4a:	4803      	ldr	r0, [pc, #12]	@ (8001a58 <NRF24_Addr_write+0x84>)
 8001a4c:	f002 fca6 	bl	800439c <HAL_GPIO_WritePin>

}
 8001a50:	bf00      	nop
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40020400 	.word	0x40020400
 8001a5c:	20000548 	.word	0x20000548

08001a60 <NRF24_read>:

uint8_t NRF24_read(uint8_t Adr){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
	uint8_t Replay;
	NRF24_select();
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a70:	480d      	ldr	r0, [pc, #52]	@ (8001aa8 <NRF24_read+0x48>)
 8001a72:	f002 fc93 	bl	800439c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001a76:	1dfb      	adds	r3, r7, #7
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480b      	ldr	r0, [pc, #44]	@ (8001aac <NRF24_read+0x4c>)
 8001a7e:	f004 fe29 	bl	80066d4 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(SPI_NRF24, &Replay, 1);
 8001a82:	f107 030f 	add.w	r3, r7, #15
 8001a86:	2201      	movs	r2, #1
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4808      	ldr	r0, [pc, #32]	@ (8001aac <NRF24_read+0x4c>)
 8001a8c:	f004 fed4 	bl	8006838 <HAL_SPI_Receive_DMA>
	NRF24_unselect();
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a96:	4804      	ldr	r0, [pc, #16]	@ (8001aa8 <NRF24_read+0x48>)
 8001a98:	f002 fc80 	bl	800439c <HAL_GPIO_WritePin>
	return Replay;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	20000548 	.word	0x20000548

08001ab0 <NRF24_Addr_read>:

void NRF24_Addr_read(uint8_t Adr){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[5];
	NRF24_select();
 8001aba:	2200      	movs	r2, #0
 8001abc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ac0:	4836      	ldr	r0, [pc, #216]	@ (8001b9c <NRF24_Addr_read+0xec>)
 8001ac2:	f002 fc6b 	bl	800439c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001ac6:	1dfb      	adds	r3, r7, #7
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4619      	mov	r1, r3
 8001acc:	4834      	ldr	r0, [pc, #208]	@ (8001ba0 <NRF24_Addr_read+0xf0>)
 8001ace:	f004 fe01 	bl	80066d4 <HAL_SPI_Transmit_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	e00b      	b.n	8001af0 <NRF24_Addr_read+0x40>
		HAL_SPI_Receive_DMA(SPI_NRF24, &Buffer[i], 1);
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	f107 0208 	add.w	r2, r7, #8
 8001ade:	4413      	add	r3, r2
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	482e      	ldr	r0, [pc, #184]	@ (8001ba0 <NRF24_Addr_read+0xf0>)
 8001ae6:	f004 fea7 	bl	8006838 <HAL_SPI_Receive_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	3301      	adds	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d9f0      	bls.n	8001ad8 <NRF24_Addr_read+0x28>
	}
	NRF24_unselect();
 8001af6:	2201      	movs	r2, #1
 8001af8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001afc:	4827      	ldr	r0, [pc, #156]	@ (8001b9c <NRF24_Addr_read+0xec>)
 8001afe:	f002 fc4d 	bl	800439c <HAL_GPIO_WritePin>
	switch (Adr) {
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b10      	cmp	r3, #16
 8001b06:	d030      	beq.n	8001b6a <NRF24_Addr_read+0xba>
 8001b08:	2b10      	cmp	r3, #16
 8001b0a:	dc43      	bgt.n	8001b94 <NRF24_Addr_read+0xe4>
 8001b0c:	2b0a      	cmp	r3, #10
 8001b0e:	d002      	beq.n	8001b16 <NRF24_Addr_read+0x66>
 8001b10:	2b0b      	cmp	r3, #11
 8001b12:	d015      	beq.n	8001b40 <NRF24_Addr_read+0x90>
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
			break;
	}
}
 8001b14:	e03e      	b.n	8001b94 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[4]=Buffer[0];
 8001b16:	7a3a      	ldrb	r2, [r7, #8]
 8001b18:	4b22      	ldr	r3, [pc, #136]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[3]=Buffer[1];
 8001b1e:	7a7a      	ldrb	r2, [r7, #9]
 8001b20:	4b20      	ldr	r3, [pc, #128]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b22:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[2]=Buffer[2];
 8001b26:	7aba      	ldrb	r2, [r7, #10]
 8001b28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b2a:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[1]=Buffer[3];
 8001b2e:	7afa      	ldrb	r2, [r7, #11]
 8001b30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b32:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[0]=Buffer[4];
 8001b36:	7b3a      	ldrb	r2, [r7, #12]
 8001b38:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b3a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
			break;
 8001b3e:	e029      	b.n	8001b94 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[4]=Buffer[0];
 8001b40:	7a3a      	ldrb	r2, [r7, #8]
 8001b42:	4b18      	ldr	r3, [pc, #96]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b44:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[3]=Buffer[1];
 8001b48:	7a7a      	ldrb	r2, [r7, #9]
 8001b4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[2]=Buffer[2];
 8001b50:	7aba      	ldrb	r2, [r7, #10]
 8001b52:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b54:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[1]=Buffer[3];
 8001b58:	7afa      	ldrb	r2, [r7, #11]
 8001b5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b5c:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[0]=Buffer[4];
 8001b60:	7b3a      	ldrb	r2, [r7, #12]
 8001b62:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			break;
 8001b68:	e014      	b.n	8001b94 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.TX_ADDR[4]=Buffer[0];
 8001b6a:	7a3a      	ldrb	r2, [r7, #8]
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b6e:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
			NRF24_Configurations_Struct.Actual.TX_ADDR[3]=Buffer[1];
 8001b72:	7a7a      	ldrb	r2, [r7, #9]
 8001b74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b76:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
 8001b7a:	7aba      	ldrb	r2, [r7, #10]
 8001b7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b7e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
 8001b82:	7afa      	ldrb	r2, [r7, #11]
 8001b84:	4b07      	ldr	r3, [pc, #28]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b86:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
 8001b8a:	7b3a      	ldrb	r2, [r7, #12]
 8001b8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b8e:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
			break;
 8001b92:	bf00      	nop
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	20000548 	.word	0x20000548
 8001ba4:	20000150 	.word	0x20000150

08001ba8 <NRF24_FlushTxFIFO>:

void NRF24_FlushTxFIFO(void){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_TX;
 8001bae:	23e1      	movs	r3, #225	@ 0xe1
 8001bb0:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bb8:	4809      	ldr	r0, [pc, #36]	@ (8001be0 <NRF24_FlushTxFIFO+0x38>)
 8001bba:	f002 fbef 	bl	800439c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001bbe:	1dfb      	adds	r3, r7, #7
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4807      	ldr	r0, [pc, #28]	@ (8001be4 <NRF24_FlushTxFIFO+0x3c>)
 8001bc6:	f004 fd85 	bl	80066d4 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bd0:	4803      	ldr	r0, [pc, #12]	@ (8001be0 <NRF24_FlushTxFIFO+0x38>)
 8001bd2:	f002 fbe3 	bl	800439c <HAL_GPIO_WritePin>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40020400 	.word	0x40020400
 8001be4:	20000548 	.word	0x20000548

08001be8 <NRF24_FlushRxFIFO>:

void NRF24_FlushRxFIFO(void){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_RX;
 8001bee:	23e2      	movs	r3, #226	@ 0xe2
 8001bf0:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bf8:	4809      	ldr	r0, [pc, #36]	@ (8001c20 <NRF24_FlushRxFIFO+0x38>)
 8001bfa:	f002 fbcf 	bl	800439c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001bfe:	1dfb      	adds	r3, r7, #7
 8001c00:	2201      	movs	r2, #1
 8001c02:	4619      	mov	r1, r3
 8001c04:	4807      	ldr	r0, [pc, #28]	@ (8001c24 <NRF24_FlushRxFIFO+0x3c>)
 8001c06:	f004 fd65 	bl	80066d4 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c10:	4803      	ldr	r0, [pc, #12]	@ (8001c20 <NRF24_FlushRxFIFO+0x38>)
 8001c12:	f002 fbc3 	bl	800439c <HAL_GPIO_WritePin>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40020400 	.word	0x40020400
 8001c24:	20000548 	.word	0x20000548

08001c28 <NRF24_PowerUp>:

void NRF24_PowerUp(void){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
	uint8_t Adr = 0x00;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer= NRF24_read(Adr);
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff13 	bl	8001a60 <NRF24_read>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f043 0320 	orr.w	r3, r3, #32
 8001c44:	71fb      	strb	r3, [r7, #7]
	Buffer |= 0x02;
 8001c46:	79bb      	ldrb	r3, [r7, #6]
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	71bb      	strb	r3, [r7, #6]
	NRF24_write(Adr, Buffer);
 8001c4e:	79ba      	ldrb	r2, [r7, #6]
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fe8f 	bl	8001978 <NRF24_write>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <NRF24_ActualConfiguration>:

void NRF24_ActualConfiguration(void){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	NRF24_Configurations_Struct.Actual.CONFIG 		= NRF24_read(CONFIG);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff fef9 	bl	8001a60 <NRF24_read>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b5f      	ldr	r3, [pc, #380]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001c74:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	NRF24_Configurations_Struct.Actual.EN_AA  		= NRF24_read(EN_AA);
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f7ff fef1 	bl	8001a60 <NRF24_read>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b5b      	ldr	r3, [pc, #364]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001c84:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	NRF24_Configurations_Struct.Actual.EN_RXADDR  	= NRF24_read(EN_RXADDR);
 8001c88:	2002      	movs	r0, #2
 8001c8a:	f7ff fee9 	bl	8001a60 <NRF24_read>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b57      	ldr	r3, [pc, #348]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001c94:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	NRF24_Configurations_Struct.Actual.SETUP_AW  	= NRF24_read(SETUP_AW);
 8001c98:	2003      	movs	r0, #3
 8001c9a:	f7ff fee1 	bl	8001a60 <NRF24_read>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b53      	ldr	r3, [pc, #332]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001ca4:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	NRF24_Configurations_Struct.Actual.SETUP_RETR 	= NRF24_read(SETUP_RETR);
 8001ca8:	2004      	movs	r0, #4
 8001caa:	f7ff fed9 	bl	8001a60 <NRF24_read>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b4f      	ldr	r3, [pc, #316]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001cb4:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	NRF24_Configurations_Struct.Actual.RF_CH  		= NRF24_read(RF_CH);
 8001cb8:	2005      	movs	r0, #5
 8001cba:	f7ff fed1 	bl	8001a60 <NRF24_read>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001cc4:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
	NRF24_Configurations_Struct.Actual.RF_SETUP  	= NRF24_read(RF_SETUP);
 8001cc8:	2006      	movs	r0, #6
 8001cca:	f7ff fec9 	bl	8001a60 <NRF24_read>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b47      	ldr	r3, [pc, #284]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001cd4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	NRF24_Configurations_Struct.Actual.STATUS  		= NRF24_read(STATUS);
 8001cd8:	2007      	movs	r0, #7
 8001cda:	f7ff fec1 	bl	8001a60 <NRF24_read>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b43      	ldr	r3, [pc, #268]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001ce4:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	NRF24_Configurations_Struct.Actual.OBSERVE  	= NRF24_read(OBSERVE);
 8001ce8:	2008      	movs	r0, #8
 8001cea:	f7ff feb9 	bl	8001a60 <NRF24_read>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001cf4:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	NRF24_Configurations_Struct.Actual.CD  			= NRF24_read(CD);
 8001cf8:	2009      	movs	r0, #9
 8001cfa:	f7ff feb1 	bl	8001a60 <NRF24_read>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b3b      	ldr	r3, [pc, #236]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001d04:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
	NRF24_Addr_read(RX_ADDR_P0);
 8001d08:	200a      	movs	r0, #10
 8001d0a:	f7ff fed1 	bl	8001ab0 <NRF24_Addr_read>
	NRF24_Addr_read(RX_ADDR_P1);
 8001d0e:	200b      	movs	r0, #11
 8001d10:	f7ff fece 	bl	8001ab0 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_ADDR_P2  	= NRF24_read(RX_ADDR_P2);
 8001d14:	200c      	movs	r0, #12
 8001d16:	f7ff fea3 	bl	8001a60 <NRF24_read>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b34      	ldr	r3, [pc, #208]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001d20:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	NRF24_Configurations_Struct.Actual.RX_ADDR_P3 	= NRF24_read(RX_ADDR_P3);
 8001d24:	200d      	movs	r0, #13
 8001d26:	f7ff fe9b 	bl	8001a60 <NRF24_read>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b30      	ldr	r3, [pc, #192]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001d30:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	NRF24_Configurations_Struct.Actual.RX_ADDR_P4  	= NRF24_read(RX_ADDR_P4);
 8001d34:	200e      	movs	r0, #14
 8001d36:	f7ff fe93 	bl	8001a60 <NRF24_read>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001d40:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	NRF24_Configurations_Struct.Actual.RX_ADDR_P5  	= NRF24_read(RX_ADDR_P5);
 8001d44:	200f      	movs	r0, #15
 8001d46:	f7ff fe8b 	bl	8001a60 <NRF24_read>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b28      	ldr	r3, [pc, #160]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001d50:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	NRF24_Addr_read(TX_ADDR);
 8001d54:	2010      	movs	r0, #16
 8001d56:	f7ff feab 	bl	8001ab0 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_PW_P0  	= NRF24_read(RX_PW_P0);
 8001d5a:	2011      	movs	r0, #17
 8001d5c:	f7ff fe80 	bl	8001a60 <NRF24_read>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b22      	ldr	r3, [pc, #136]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001d66:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
	NRF24_Configurations_Struct.Actual.RX_PW_P1  	= NRF24_read(RX_PW_P1);
 8001d6a:	2012      	movs	r0, #18
 8001d6c:	f7ff fe78 	bl	8001a60 <NRF24_read>
 8001d70:	4603      	mov	r3, r0
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b1e      	ldr	r3, [pc, #120]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001d76:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	NRF24_Configurations_Struct.Actual.RX_PW_P2  	= NRF24_read(RX_PW_P2);
 8001d7a:	2013      	movs	r0, #19
 8001d7c:	f7ff fe70 	bl	8001a60 <NRF24_read>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b1a      	ldr	r3, [pc, #104]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001d86:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
	NRF24_Configurations_Struct.Actual.RX_PW_P3  	= NRF24_read(RX_PW_P3);
 8001d8a:	2014      	movs	r0, #20
 8001d8c:	f7ff fe68 	bl	8001a60 <NRF24_read>
 8001d90:	4603      	mov	r3, r0
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b16      	ldr	r3, [pc, #88]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001d96:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	NRF24_Configurations_Struct.Actual.RX_PW_P4  	= NRF24_read(RX_PW_P4);
 8001d9a:	2015      	movs	r0, #21
 8001d9c:	f7ff fe60 	bl	8001a60 <NRF24_read>
 8001da0:	4603      	mov	r3, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001da6:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	NRF24_Configurations_Struct.Actual.RX_PW_P5  	= NRF24_read(RX_PW_P5);
 8001daa:	2016      	movs	r0, #22
 8001dac:	f7ff fe58 	bl	8001a60 <NRF24_read>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001db6:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	NRF24_Configurations_Struct.Actual.FIFO_STATUS  = NRF24_read(FIFO_STATUS);
 8001dba:	2017      	movs	r0, #23
 8001dbc:	f7ff fe50 	bl	8001a60 <NRF24_read>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001dc6:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
	NRF24_Configurations_Struct.Actual.DYNPD  		= NRF24_read(DYNPD);
 8001dca:	201c      	movs	r0, #28
 8001dcc:	f7ff fe48 	bl	8001a60 <NRF24_read>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001dd6:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
	NRF24_Configurations_Struct.Actual.FEATURE  	= NRF24_read(FEATURE);
 8001dda:	201d      	movs	r0, #29
 8001ddc:	f7ff fe40 	bl	8001a60 <NRF24_read>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b02      	ldr	r3, [pc, #8]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001de6:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000150 	.word	0x20000150

08001df4 <NRF24_config>:

void NRF24_config(NRF24_Address_Configurations_t Configuration_struct){
 8001df4:	b084      	sub	sp, #16
 8001df6:	b580      	push	{r7, lr}
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	f107 0c08 	add.w	ip, r7, #8
 8001dfe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	NRF24_write(CONFIG,	Configuration_struct.CONFIG);
 8001e02:	7a3b      	ldrb	r3, [r7, #8]
 8001e04:	4619      	mov	r1, r3
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7ff fdb6 	bl	8001978 <NRF24_write>
	NRF24_write(EN_AA, Configuration_struct.EN_AA);
 8001e0c:	7a7b      	ldrb	r3, [r7, #9]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	2001      	movs	r0, #1
 8001e12:	f7ff fdb1 	bl	8001978 <NRF24_write>
	NRF24_write(EN_RXADDR,Configuration_struct.EN_RXADDR);
 8001e16:	7abb      	ldrb	r3, [r7, #10]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	2002      	movs	r0, #2
 8001e1c:	f7ff fdac 	bl	8001978 <NRF24_write>
	NRF24_write(SETUP_AW,Configuration_struct.SETUP_AW);
 8001e20:	7afb      	ldrb	r3, [r7, #11]
 8001e22:	4619      	mov	r1, r3
 8001e24:	2003      	movs	r0, #3
 8001e26:	f7ff fda7 	bl	8001978 <NRF24_write>
	NRF24_write(SETUP_RETR,Configuration_struct.SETUP_RETR);
 8001e2a:	7b3b      	ldrb	r3, [r7, #12]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	2004      	movs	r0, #4
 8001e30:	f7ff fda2 	bl	8001978 <NRF24_write>
	NRF24_write(RF_CH,Configuration_struct.RF_CH);
 8001e34:	7b7b      	ldrb	r3, [r7, #13]
 8001e36:	4619      	mov	r1, r3
 8001e38:	2005      	movs	r0, #5
 8001e3a:	f7ff fd9d 	bl	8001978 <NRF24_write>
	NRF24_write(RF_SETUP,Configuration_struct.RF_SETUP);
 8001e3e:	7bbb      	ldrb	r3, [r7, #14]
 8001e40:	4619      	mov	r1, r3
 8001e42:	2006      	movs	r0, #6
 8001e44:	f7ff fd98 	bl	8001978 <NRF24_write>
	NRF24_write(STATUS,Configuration_struct.STATUS);
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	2007      	movs	r0, #7
 8001e4e:	f7ff fd93 	bl	8001978 <NRF24_write>
	NRF24_write(OBSERVE,Configuration_struct.OBSERVE);
 8001e52:	7c3b      	ldrb	r3, [r7, #16]
 8001e54:	4619      	mov	r1, r3
 8001e56:	2008      	movs	r0, #8
 8001e58:	f7ff fd8e 	bl	8001978 <NRF24_write>
	NRF24_write(CD,Configuration_struct.CD);
 8001e5c:	7c7b      	ldrb	r3, [r7, #17]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	2009      	movs	r0, #9
 8001e62:	f7ff fd89 	bl	8001978 <NRF24_write>
	NRF24_Addr_write(RX_ADDR_P0, Configuration_struct.RX_ADDR_P0);
 8001e66:	f107 0312 	add.w	r3, r7, #18
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	200a      	movs	r0, #10
 8001e6e:	f7ff fdb1 	bl	80019d4 <NRF24_Addr_write>
	NRF24_Addr_write(RX_ADDR_P1, Configuration_struct.RX_ADDR_P1);
 8001e72:	f107 0317 	add.w	r3, r7, #23
 8001e76:	4619      	mov	r1, r3
 8001e78:	200b      	movs	r0, #11
 8001e7a:	f7ff fdab 	bl	80019d4 <NRF24_Addr_write>
	NRF24_write(RX_ADDR_P2,Configuration_struct.RX_ADDR_P2);
 8001e7e:	7f3b      	ldrb	r3, [r7, #28]
 8001e80:	4619      	mov	r1, r3
 8001e82:	200c      	movs	r0, #12
 8001e84:	f7ff fd78 	bl	8001978 <NRF24_write>
	NRF24_write(RX_ADDR_P3,Configuration_struct.RX_ADDR_P3);
 8001e88:	7f7b      	ldrb	r3, [r7, #29]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	200d      	movs	r0, #13
 8001e8e:	f7ff fd73 	bl	8001978 <NRF24_write>
	NRF24_write(RX_ADDR_P4,Configuration_struct.RX_ADDR_P4);
 8001e92:	7fbb      	ldrb	r3, [r7, #30]
 8001e94:	4619      	mov	r1, r3
 8001e96:	200e      	movs	r0, #14
 8001e98:	f7ff fd6e 	bl	8001978 <NRF24_write>
	NRF24_write(RX_ADDR_P5,Configuration_struct.RX_ADDR_P5);
 8001e9c:	7ffb      	ldrb	r3, [r7, #31]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	200f      	movs	r0, #15
 8001ea2:	f7ff fd69 	bl	8001978 <NRF24_write>
	NRF24_Addr_write(TX_ADDR, Configuration_struct.TX_ADDR);
 8001ea6:	f107 0320 	add.w	r3, r7, #32
 8001eaa:	4619      	mov	r1, r3
 8001eac:	2010      	movs	r0, #16
 8001eae:	f7ff fd91 	bl	80019d4 <NRF24_Addr_write>
	NRF24_write(RX_PW_P0,Configuration_struct.RX_PW_P0);
 8001eb2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	2011      	movs	r0, #17
 8001eba:	f7ff fd5d 	bl	8001978 <NRF24_write>
	NRF24_write(RX_PW_P1,Configuration_struct.RX_PW_P1);
 8001ebe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	2012      	movs	r0, #18
 8001ec6:	f7ff fd57 	bl	8001978 <NRF24_write>
	NRF24_write(RX_PW_P2,Configuration_struct.RX_PW_P2);
 8001eca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ece:	4619      	mov	r1, r3
 8001ed0:	2013      	movs	r0, #19
 8001ed2:	f7ff fd51 	bl	8001978 <NRF24_write>
	NRF24_write(RX_PW_P3,Configuration_struct.RX_PW_P3);
 8001ed6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001eda:	4619      	mov	r1, r3
 8001edc:	2014      	movs	r0, #20
 8001ede:	f7ff fd4b 	bl	8001978 <NRF24_write>
	NRF24_write(RX_PW_P4,Configuration_struct.RX_PW_P4);
 8001ee2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	2015      	movs	r0, #21
 8001eea:	f7ff fd45 	bl	8001978 <NRF24_write>
	NRF24_write(RX_PW_P5,Configuration_struct.RX_PW_P5);
 8001eee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	2016      	movs	r0, #22
 8001ef6:	f7ff fd3f 	bl	8001978 <NRF24_write>
	NRF24_write(FIFO_STATUS,Configuration_struct.FIFO_STATUS);
 8001efa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001efe:	4619      	mov	r1, r3
 8001f00:	2017      	movs	r0, #23
 8001f02:	f7ff fd39 	bl	8001978 <NRF24_write>
	NRF24_write(DYNPD,Configuration_struct.DYNPD);
 8001f06:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	201c      	movs	r0, #28
 8001f0e:	f7ff fd33 	bl	8001978 <NRF24_write>
	NRF24_write(FEATURE,Configuration_struct.FEATURE);
 8001f12:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001f16:	4619      	mov	r1, r3
 8001f18:	201d      	movs	r0, #29
 8001f1a:	f7ff fd2d 	bl	8001978 <NRF24_write>
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f26:	b004      	add	sp, #16
 8001f28:	4770      	bx	lr
	...

08001f2c <NRF24_DefaultConfiguration>:

void NRF24_DefaultConfiguration(void){
 8001f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af06      	add	r7, sp, #24
	NRF24_FlushTxFIFO();
 8001f32:	f7ff fe39 	bl	8001ba8 <NRF24_FlushTxFIFO>
	NRF24_FlushRxFIFO();
 8001f36:	f7ff fe57 	bl	8001be8 <NRF24_FlushRxFIFO>
	NRF24_Configurations_Struct.Default.CONFIG 			= 0x78;
 8001f3a:	4b48      	ldr	r3, [pc, #288]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f3c:	2278      	movs	r2, #120	@ 0x78
 8001f3e:	701a      	strb	r2, [r3, #0]
	NRF24_Configurations_Struct.Default.EN_AA  			= 0x3F;
 8001f40:	4b46      	ldr	r3, [pc, #280]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f42:	223f      	movs	r2, #63	@ 0x3f
 8001f44:	705a      	strb	r2, [r3, #1]
	NRF24_Configurations_Struct.Default.EN_RXADDR  		= 0x03;
 8001f46:	4b45      	ldr	r3, [pc, #276]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f48:	2203      	movs	r2, #3
 8001f4a:	709a      	strb	r2, [r3, #2]
	NRF24_Configurations_Struct.Default.SETUP_AW  		= 0x03;
 8001f4c:	4b43      	ldr	r3, [pc, #268]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f4e:	2203      	movs	r2, #3
 8001f50:	70da      	strb	r2, [r3, #3]
	NRF24_Configurations_Struct.Default.SETUP_RETR 		= 0x03;
 8001f52:	4b42      	ldr	r3, [pc, #264]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f54:	2203      	movs	r2, #3
 8001f56:	711a      	strb	r2, [r3, #4]
	NRF24_Configurations_Struct.Default.RF_CH  			= 0x02;
 8001f58:	4b40      	ldr	r3, [pc, #256]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	715a      	strb	r2, [r3, #5]
	NRF24_Configurations_Struct.Default.RF_SETUP  		= 0x09;
 8001f5e:	4b3f      	ldr	r3, [pc, #252]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f60:	2209      	movs	r2, #9
 8001f62:	719a      	strb	r2, [r3, #6]
	NRF24_Configurations_Struct.Default.STATUS  		= 0X70;
 8001f64:	4b3d      	ldr	r3, [pc, #244]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f66:	2270      	movs	r2, #112	@ 0x70
 8001f68:	71da      	strb	r2, [r3, #7]
	NRF24_Configurations_Struct.Default.OBSERVE  		= 0X00;
 8001f6a:	4b3c      	ldr	r3, [pc, #240]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	721a      	strb	r2, [r3, #8]
	NRF24_Configurations_Struct.Default.CD  			= 0x00;
 8001f70:	4b3a      	ldr	r3, [pc, #232]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	725a      	strb	r2, [r3, #9]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[0]  	= 0xE7;
 8001f76:	4b39      	ldr	r3, [pc, #228]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f78:	22e7      	movs	r2, #231	@ 0xe7
 8001f7a:	729a      	strb	r2, [r3, #10]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[1]  	= 0xE7;
 8001f7c:	4b37      	ldr	r3, [pc, #220]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f7e:	22e7      	movs	r2, #231	@ 0xe7
 8001f80:	72da      	strb	r2, [r3, #11]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[2]  	= 0xE7;
 8001f82:	4b36      	ldr	r3, [pc, #216]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f84:	22e7      	movs	r2, #231	@ 0xe7
 8001f86:	731a      	strb	r2, [r3, #12]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[3]  	= 0xE7;
 8001f88:	4b34      	ldr	r3, [pc, #208]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f8a:	22e7      	movs	r2, #231	@ 0xe7
 8001f8c:	735a      	strb	r2, [r3, #13]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[4]  	= 0xE7;
 8001f8e:	4b33      	ldr	r3, [pc, #204]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f90:	22e7      	movs	r2, #231	@ 0xe7
 8001f92:	739a      	strb	r2, [r3, #14]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[0]  	= 0xC2;
 8001f94:	4b31      	ldr	r3, [pc, #196]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f96:	22c2      	movs	r2, #194	@ 0xc2
 8001f98:	73da      	strb	r2, [r3, #15]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[1]  	= 0xC2;
 8001f9a:	4b30      	ldr	r3, [pc, #192]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f9c:	22c2      	movs	r2, #194	@ 0xc2
 8001f9e:	741a      	strb	r2, [r3, #16]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[2]  	= 0xC2;
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fa2:	22c2      	movs	r2, #194	@ 0xc2
 8001fa4:	745a      	strb	r2, [r3, #17]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[3]  	= 0xC2;
 8001fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fa8:	22c2      	movs	r2, #194	@ 0xc2
 8001faa:	749a      	strb	r2, [r3, #18]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[4]  	= 0xC2;
 8001fac:	4b2b      	ldr	r3, [pc, #172]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fae:	22c2      	movs	r2, #194	@ 0xc2
 8001fb0:	74da      	strb	r2, [r3, #19]
	NRF24_Configurations_Struct.Default.RX_ADDR_P2  	= 0xC3;
 8001fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fb4:	22c3      	movs	r2, #195	@ 0xc3
 8001fb6:	751a      	strb	r2, [r3, #20]
	NRF24_Configurations_Struct.Default.RX_ADDR_P3 		= 0xC4;
 8001fb8:	4b28      	ldr	r3, [pc, #160]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fba:	22c4      	movs	r2, #196	@ 0xc4
 8001fbc:	755a      	strb	r2, [r3, #21]
	NRF24_Configurations_Struct.Default.RX_ADDR_P4  	= 0xC5;
 8001fbe:	4b27      	ldr	r3, [pc, #156]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fc0:	22c5      	movs	r2, #197	@ 0xc5
 8001fc2:	759a      	strb	r2, [r3, #22]
	NRF24_Configurations_Struct.Default.RX_ADDR_P5  	= 0xC6;
 8001fc4:	4b25      	ldr	r3, [pc, #148]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fc6:	22c6      	movs	r2, #198	@ 0xc6
 8001fc8:	75da      	strb	r2, [r3, #23]
	NRF24_Configurations_Struct.Default.TX_ADDR[0]   	= 0xE7;
 8001fca:	4b24      	ldr	r3, [pc, #144]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fcc:	22e7      	movs	r2, #231	@ 0xe7
 8001fce:	761a      	strb	r2, [r3, #24]
	NRF24_Configurations_Struct.Default.TX_ADDR[1]   	= 0xE7;
 8001fd0:	4b22      	ldr	r3, [pc, #136]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fd2:	22e7      	movs	r2, #231	@ 0xe7
 8001fd4:	765a      	strb	r2, [r3, #25]
	NRF24_Configurations_Struct.Default.TX_ADDR[2]   	= 0xE7;
 8001fd6:	4b21      	ldr	r3, [pc, #132]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fd8:	22e7      	movs	r2, #231	@ 0xe7
 8001fda:	769a      	strb	r2, [r3, #26]
	NRF24_Configurations_Struct.Default.TX_ADDR[3]   	= 0xE7;
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fde:	22e7      	movs	r2, #231	@ 0xe7
 8001fe0:	76da      	strb	r2, [r3, #27]
	NRF24_Configurations_Struct.Default.TX_ADDR[4]   	= 0xE7;
 8001fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fe4:	22e7      	movs	r2, #231	@ 0xe7
 8001fe6:	771a      	strb	r2, [r3, #28]
	NRF24_Configurations_Struct.Default.RX_PW_P0  		= 0X20;
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fea:	2220      	movs	r2, #32
 8001fec:	775a      	strb	r2, [r3, #29]
	NRF24_Configurations_Struct.Default.RX_PW_P1  		= 0X20;
 8001fee:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	779a      	strb	r2, [r3, #30]
	NRF24_Configurations_Struct.Default.RX_PW_P2  		= 0X00;
 8001ff4:	4b19      	ldr	r3, [pc, #100]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	77da      	strb	r2, [r3, #31]
	NRF24_Configurations_Struct.Default.RX_PW_P3  		= 0X00;
 8001ffa:	4b18      	ldr	r3, [pc, #96]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2020 	strb.w	r2, [r3, #32]
	NRF24_Configurations_Struct.Default.RX_PW_P4  		= 0X00;
 8002002:	4b16      	ldr	r3, [pc, #88]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	NRF24_Configurations_Struct.Default.RX_PW_P5  		= 0X00;
 800200a:	4b14      	ldr	r3, [pc, #80]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	NRF24_Configurations_Struct.Default.FIFO_STATUS  	= 0X11;
 8002012:	4b12      	ldr	r3, [pc, #72]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8002014:	2211      	movs	r2, #17
 8002016:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	NRF24_Configurations_Struct.Default.DYNPD  			= 0X00;
 800201a:	4b10      	ldr	r3, [pc, #64]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	NRF24_Configurations_Struct.Default.FEATURE  		= 0X00;
 8002022:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	NRF24_config(NRF24_Configurations_Struct.Default);
 800202a:	4e0c      	ldr	r6, [pc, #48]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 800202c:	466c      	mov	r4, sp
 800202e:	f106 0510 	add.w	r5, r6, #16
 8002032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002036:	e895 0003 	ldmia.w	r5, {r0, r1}
 800203a:	6020      	str	r0, [r4, #0]
 800203c:	3404      	adds	r4, #4
 800203e:	8021      	strh	r1, [r4, #0]
 8002040:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002044:	f7ff fed6 	bl	8001df4 <NRF24_config>
	NRF24_ActualConfiguration();
 8002048:	f7ff fe0c 	bl	8001c64 <NRF24_ActualConfiguration>
	NRF24_mode = Init;
 800204c:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <NRF24_DefaultConfiguration+0x134>)
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
}
 8002052:	bf00      	nop
 8002054:	3704      	adds	r7, #4
 8002056:	46bd      	mov	sp, r7
 8002058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800205a:	bf00      	nop
 800205c:	20000150 	.word	0x20000150
 8002060:	200001f3 	.word	0x200001f3

08002064 <NRF24_RxConfiguration>:
	NRF24_config(NRF24_Configurations_Struct.Tx_mode);
	NRF24_ActualConfiguration();
	NRF24_mode = TxMode;
}

void NRF24_RxConfiguration(void){
 8002064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002066:	b087      	sub	sp, #28
 8002068:	af06      	add	r7, sp, #24
	NRF24_Configurations_Struct.Rx_mode.CONFIG 			= 0x79;
 800206a:	4b5b      	ldr	r3, [pc, #364]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800206c:	2279      	movs	r2, #121	@ 0x79
 800206e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	NRF24_Configurations_Struct.Rx_mode.EN_AA  			= 0x03;
 8002072:	4b59      	ldr	r3, [pc, #356]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002074:	2203      	movs	r2, #3
 8002076:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	NRF24_Configurations_Struct.Rx_mode.EN_RXADDR  		= 0x03;
 800207a:	4b57      	ldr	r3, [pc, #348]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800207c:	2203      	movs	r2, #3
 800207e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
	NRF24_Configurations_Struct.Rx_mode.SETUP_AW  		= 0x03;
 8002082:	4b55      	ldr	r3, [pc, #340]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002084:	2203      	movs	r2, #3
 8002086:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
	NRF24_Configurations_Struct.Rx_mode.SETUP_RETR 		= 0x33;
 800208a:	4b53      	ldr	r3, [pc, #332]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800208c:	2233      	movs	r2, #51	@ 0x33
 800208e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	NRF24_Configurations_Struct.Rx_mode.RF_CH  			= 0x12;
 8002092:	4b51      	ldr	r3, [pc, #324]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002094:	2212      	movs	r2, #18
 8002096:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	NRF24_Configurations_Struct.Rx_mode.RF_SETUP  		= 0x09;
 800209a:	4b4f      	ldr	r3, [pc, #316]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800209c:	2209      	movs	r2, #9
 800209e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	NRF24_Configurations_Struct.Rx_mode.STATUS  		= 0X70;
 80020a2:	4b4d      	ldr	r3, [pc, #308]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020a4:	2270      	movs	r2, #112	@ 0x70
 80020a6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
	NRF24_Configurations_Struct.Rx_mode.OBSERVE  		= 0X00;
 80020aa:	4b4b      	ldr	r3, [pc, #300]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	NRF24_Configurations_Struct.Rx_mode.CD  			= 0x00;
 80020b2:	4b49      	ldr	r3, [pc, #292]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[0]  	= 0xE7;
 80020ba:	4b47      	ldr	r3, [pc, #284]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020bc:	22e7      	movs	r2, #231	@ 0xe7
 80020be:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[1]  	= 0xE7;
 80020c2:	4b45      	ldr	r3, [pc, #276]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020c4:	22e7      	movs	r2, #231	@ 0xe7
 80020c6:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[2]  	= 0xE7;
 80020ca:	4b43      	ldr	r3, [pc, #268]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020cc:	22e7      	movs	r2, #231	@ 0xe7
 80020ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[3]  	= 0xE7;
 80020d2:	4b41      	ldr	r3, [pc, #260]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020d4:	22e7      	movs	r2, #231	@ 0xe7
 80020d6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[4]  	= 0xE7;
 80020da:	4b3f      	ldr	r3, [pc, #252]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020dc:	22e7      	movs	r2, #231	@ 0xe7
 80020de:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[0]  	= 0xC2;
 80020e2:	4b3d      	ldr	r3, [pc, #244]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020e4:	22c2      	movs	r2, #194	@ 0xc2
 80020e6:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[1]  	= 0xC2;
 80020ea:	4b3b      	ldr	r3, [pc, #236]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020ec:	22c2      	movs	r2, #194	@ 0xc2
 80020ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[2]  	= 0xC2;
 80020f2:	4b39      	ldr	r3, [pc, #228]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020f4:	22c2      	movs	r2, #194	@ 0xc2
 80020f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[3]  	= 0xC2;
 80020fa:	4b37      	ldr	r3, [pc, #220]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020fc:	22c2      	movs	r2, #194	@ 0xc2
 80020fe:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[4]  	= 0xC2;
 8002102:	4b35      	ldr	r3, [pc, #212]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002104:	22c2      	movs	r2, #194	@ 0xc2
 8002106:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P2  	= 0xC3;
 800210a:	4b33      	ldr	r3, [pc, #204]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800210c:	22c3      	movs	r2, #195	@ 0xc3
 800210e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P3 		= 0xC4;
 8002112:	4b31      	ldr	r3, [pc, #196]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002114:	22c4      	movs	r2, #196	@ 0xc4
 8002116:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P4  	= 0xC5;
 800211a:	4b2f      	ldr	r3, [pc, #188]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800211c:	22c5      	movs	r2, #197	@ 0xc5
 800211e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P5  	= 0xC6;
 8002122:	4b2d      	ldr	r3, [pc, #180]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002124:	22c6      	movs	r2, #198	@ 0xc6
 8002126:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[0]   	= 0xE7;
 800212a:	4b2b      	ldr	r3, [pc, #172]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800212c:	22e7      	movs	r2, #231	@ 0xe7
 800212e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[1]   	= 0xE7;
 8002132:	4b29      	ldr	r3, [pc, #164]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002134:	22e7      	movs	r2, #231	@ 0xe7
 8002136:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[2]   	= 0xE7;
 800213a:	4b27      	ldr	r3, [pc, #156]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800213c:	22e7      	movs	r2, #231	@ 0xe7
 800213e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[3]   	= 0xE7;
 8002142:	4b25      	ldr	r3, [pc, #148]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002144:	22e7      	movs	r2, #231	@ 0xe7
 8002146:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[4]   	= 0xE7;
 800214a:	4b23      	ldr	r3, [pc, #140]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800214c:	22e7      	movs	r2, #231	@ 0xe7
 800214e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P0  		= 0X20;
 8002152:	4b21      	ldr	r3, [pc, #132]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002154:	2220      	movs	r2, #32
 8002156:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P1  		= 0X20;
 800215a:	4b1f      	ldr	r3, [pc, #124]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800215c:	2220      	movs	r2, #32
 800215e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P2  		= 0X00;
 8002162:	4b1d      	ldr	r3, [pc, #116]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002164:	2200      	movs	r2, #0
 8002166:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P3  		= 0X00;
 800216a:	4b1b      	ldr	r3, [pc, #108]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800216c:	2200      	movs	r2, #0
 800216e:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P4  		= 0X00;
 8002172:	4b19      	ldr	r3, [pc, #100]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002174:	2200      	movs	r2, #0
 8002176:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P5  		= 0X00;
 800217a:	4b17      	ldr	r3, [pc, #92]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800217c:	2200      	movs	r2, #0
 800217e:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
	NRF24_Configurations_Struct.Rx_mode.FIFO_STATUS  	= 0X11;
 8002182:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002184:	2211      	movs	r2, #17
 8002186:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
	NRF24_Configurations_Struct.Rx_mode.DYNPD  			= 0X00;
 800218a:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	NRF24_Configurations_Struct.Rx_mode.FEATURE  		= 0X00;
 8002192:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	NRF24_config(NRF24_Configurations_Struct.Rx_mode);
 800219a:	4e0f      	ldr	r6, [pc, #60]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800219c:	466c      	mov	r4, sp
 800219e:	f106 055c 	add.w	r5, r6, #92	@ 0x5c
 80021a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021aa:	6020      	str	r0, [r4, #0]
 80021ac:	3404      	adds	r4, #4
 80021ae:	8021      	strh	r1, [r4, #0]
 80021b0:	f106 034c 	add.w	r3, r6, #76	@ 0x4c
 80021b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021b6:	f7ff fe1d 	bl	8001df4 <NRF24_config>
	NRF24_ActualConfiguration();
 80021ba:	f7ff fd53 	bl	8001c64 <NRF24_ActualConfiguration>
	NRF24_Enable();
 80021be:	2201      	movs	r2, #1
 80021c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021c4:	4805      	ldr	r0, [pc, #20]	@ (80021dc <NRF24_RxConfiguration+0x178>)
 80021c6:	f002 f8e9 	bl	800439c <HAL_GPIO_WritePin>
	NRF24_mode = RxMode;
 80021ca:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <NRF24_RxConfiguration+0x17c>)
 80021cc:	2202      	movs	r2, #2
 80021ce:	701a      	strb	r2, [r3, #0]
}
 80021d0:	bf00      	nop
 80021d2:	3704      	adds	r7, #4
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d8:	20000150 	.word	0x20000150
 80021dc:	40020400 	.word	0x40020400
 80021e0:	200001f3 	.word	0x200001f3

080021e4 <NRF24_CheckFlags>:

void NRF24_CheckFlags(void){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
	uint8_t buffer = NRF24_read(STATUS);
 80021ea:	2007      	movs	r0, #7
 80021ec:	f7ff fc38 	bl	8001a60 <NRF24_read>
 80021f0:	4603      	mov	r3, r0
 80021f2:	71fb      	strb	r3, [r7, #7]
	TX_FULL =  buffer & 0x01;
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	4b28      	ldr	r3, [pc, #160]	@ (80022a0 <NRF24_CheckFlags+0xbc>)
 80021fe:	701a      	strb	r2, [r3, #0]
	RX_P_NO = (buffer & 0x0E) >> 1;
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	105b      	asrs	r3, r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	b2da      	uxtb	r2, r3
 800220c:	4b25      	ldr	r3, [pc, #148]	@ (80022a4 <NRF24_CheckFlags+0xc0>)
 800220e:	701a      	strb	r2, [r3, #0]
	MAX_RT  = (buffer & 0x10) >> 4;
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	111b      	asrs	r3, r3, #4
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	b2da      	uxtb	r2, r3
 800221c:	4b22      	ldr	r3, [pc, #136]	@ (80022a8 <NRF24_CheckFlags+0xc4>)
 800221e:	701a      	strb	r2, [r3, #0]
	TX_DS   = (buffer & 0x20) >> 5;
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	115b      	asrs	r3, r3, #5
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	b2da      	uxtb	r2, r3
 800222c:	4b1f      	ldr	r3, [pc, #124]	@ (80022ac <NRF24_CheckFlags+0xc8>)
 800222e:	701a      	strb	r2, [r3, #0]
	RX_DR   = (buffer & 0x40) >> 6;
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	119b      	asrs	r3, r3, #6
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	b2da      	uxtb	r2, r3
 800223c:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <NRF24_CheckFlags+0xcc>)
 800223e:	701a      	strb	r2, [r3, #0]

	buffer   = NRF24_read(FIFO_STATUS);
 8002240:	2017      	movs	r0, #23
 8002242:	f7ff fc0d 	bl	8001a60 <NRF24_read>
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
	RX_EMPTY =  buffer & 0x01;
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4b18      	ldr	r3, [pc, #96]	@ (80022b4 <NRF24_CheckFlags+0xd0>)
 8002254:	701a      	strb	r2, [r3, #0]
	RX_FULL  = (buffer & 0x02) >> 1;
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	105b      	asrs	r3, r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <NRF24_CheckFlags+0xd4>)
 8002264:	701a      	strb	r2, [r3, #0]
	TX_EMPTY = (buffer & 0x10) >> 4;
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	111b      	asrs	r3, r3, #4
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4b12      	ldr	r3, [pc, #72]	@ (80022bc <NRF24_CheckFlags+0xd8>)
 8002274:	701a      	strb	r2, [r3, #0]
	TX_FULL  = (buffer & 0x20) >> 5;
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	115b      	asrs	r3, r3, #5
 800227a:	b2db      	uxtb	r3, r3
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <NRF24_CheckFlags+0xbc>)
 8002284:	701a      	strb	r2, [r3, #0]
	TX_REUSE = (buffer & 0x40) >> 6;
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	119b      	asrs	r3, r3, #6
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <NRF24_CheckFlags+0xdc>)
 8002294:	701a      	strb	r2, [r3, #0]
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200001e9 	.word	0x200001e9
 80022a4:	200001ea 	.word	0x200001ea
 80022a8:	200001eb 	.word	0x200001eb
 80022ac:	200001ec 	.word	0x200001ec
 80022b0:	200001ed 	.word	0x200001ed
 80022b4:	200001ee 	.word	0x200001ee
 80022b8:	200001ef 	.word	0x200001ef
 80022bc:	200001f0 	.word	0x200001f0
 80022c0:	200001f1 	.word	0x200001f1

080022c4 <NRF24_FIFO_write>:

void NRF24_FIFO_write(uint8_t *pData, uint8_t size){
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
	uint8_t Adr = W_TX_PAYLOAD;
 80022d0:	23a0      	movs	r3, #160	@ 0xa0
 80022d2:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 80022d4:	2200      	movs	r2, #0
 80022d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022da:	4812      	ldr	r0, [pc, #72]	@ (8002324 <NRF24_FIFO_write+0x60>)
 80022dc:	f002 f85e 	bl	800439c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 80022e0:	f107 030e 	add.w	r3, r7, #14
 80022e4:	2201      	movs	r2, #1
 80022e6:	4619      	mov	r1, r3
 80022e8:	480f      	ldr	r0, [pc, #60]	@ (8002328 <NRF24_FIFO_write+0x64>)
 80022ea:	f004 f9f3 	bl	80066d4 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
 80022f2:	e00a      	b.n	800230a <NRF24_FIFO_write+0x46>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &pData[n], 1);
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	2201      	movs	r2, #1
 80022fc:	4619      	mov	r1, r3
 80022fe:	480a      	ldr	r0, [pc, #40]	@ (8002328 <NRF24_FIFO_write+0x64>)
 8002300:	f004 f9e8 	bl	80066d4 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	3301      	adds	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	2b1f      	cmp	r3, #31
 800230e:	d9f1      	bls.n	80022f4 <NRF24_FIFO_write+0x30>
	}
	NRF24_unselect();
 8002310:	2201      	movs	r2, #1
 8002312:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002316:	4803      	ldr	r0, [pc, #12]	@ (8002324 <NRF24_FIFO_write+0x60>)
 8002318:	f002 f840 	bl	800439c <HAL_GPIO_WritePin>
}
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40020400 	.word	0x40020400
 8002328:	20000548 	.word	0x20000548

0800232c <NRF24_FIFO_read>:

void NRF24_FIFO_read(uint8_t *pData){
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	uint8_t Adr = R_RX_PAYLOAD;
 8002334:	2361      	movs	r3, #97	@ 0x61
 8002336:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 8002338:	2200      	movs	r2, #0
 800233a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800233e:	4812      	ldr	r0, [pc, #72]	@ (8002388 <NRF24_FIFO_read+0x5c>)
 8002340:	f002 f82c 	bl	800439c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8002344:	f107 030e 	add.w	r3, r7, #14
 8002348:	2201      	movs	r2, #1
 800234a:	4619      	mov	r1, r3
 800234c:	480f      	ldr	r0, [pc, #60]	@ (800238c <NRF24_FIFO_read+0x60>)
 800234e:	f004 f9c1 	bl	80066d4 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	e00a      	b.n	800236e <NRF24_FIFO_read+0x42>
		HAL_SPI_Receive_DMA(SPI_NRF24, &pData[n], 1);
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	2201      	movs	r2, #1
 8002360:	4619      	mov	r1, r3
 8002362:	480a      	ldr	r0, [pc, #40]	@ (800238c <NRF24_FIFO_read+0x60>)
 8002364:	f004 fa68 	bl	8006838 <HAL_SPI_Receive_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	3301      	adds	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	2b1f      	cmp	r3, #31
 8002372:	d9f1      	bls.n	8002358 <NRF24_FIFO_read+0x2c>
	}
	NRF24_unselect();
 8002374:	2201      	movs	r2, #1
 8002376:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800237a:	4803      	ldr	r0, [pc, #12]	@ (8002388 <NRF24_FIFO_read+0x5c>)
 800237c:	f002 f80e 	bl	800439c <HAL_GPIO_WritePin>
}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40020400 	.word	0x40020400
 800238c:	20000548 	.word	0x20000548

08002390 <NRF24_init>:

void NRF24_init(void){
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
	NRF24_Disable();
 8002394:	2200      	movs	r2, #0
 8002396:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800239a:	4808      	ldr	r0, [pc, #32]	@ (80023bc <NRF24_init+0x2c>)
 800239c:	f001 fffe 	bl	800439c <HAL_GPIO_WritePin>
	NRF24_unselect();
 80023a0:	2201      	movs	r2, #1
 80023a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023a6:	4805      	ldr	r0, [pc, #20]	@ (80023bc <NRF24_init+0x2c>)
 80023a8:	f001 fff8 	bl	800439c <HAL_GPIO_WritePin>
	NRF24_DefaultConfiguration();
 80023ac:	f7ff fdbe 	bl	8001f2c <NRF24_DefaultConfiguration>
	NRF24_mode = 0;
 80023b0:	4b03      	ldr	r3, [pc, #12]	@ (80023c0 <NRF24_init+0x30>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40020400 	.word	0x40020400
 80023c0:	200001f3 	.word	0x200001f3

080023c4 <NRF24_Transmit>:

void NRF24_Transmit(void){
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	NRF24_CheckFlags();
 80023c8:	f7ff ff0c 	bl	80021e4 <NRF24_CheckFlags>
	if(MAX_RT)  NRF24_write(STATUS, 0x70);
 80023cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002444 <NRF24_Transmit+0x80>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <NRF24_Transmit+0x18>
 80023d4:	2170      	movs	r1, #112	@ 0x70
 80023d6:	2007      	movs	r0, #7
 80023d8:	f7ff face 	bl	8001978 <NRF24_write>
	if(TX_FULL) NRF24_FlushTxFIFO();
 80023dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002448 <NRF24_Transmit+0x84>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <NRF24_Transmit+0x24>
 80023e4:	f7ff fbe0 	bl	8001ba8 <NRF24_FlushTxFIFO>
	if(Cont_TX > 10){
 80023e8:	4b18      	ldr	r3, [pc, #96]	@ (800244c <NRF24_Transmit+0x88>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b0a      	cmp	r3, #10
 80023ee:	d909      	bls.n	8002404 <NRF24_Transmit+0x40>
		Cont_TX = 0;
 80023f0:	4b16      	ldr	r3, [pc, #88]	@ (800244c <NRF24_Transmit+0x88>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
		NRF24_FIFO_write(TxBuffer, 32);
 80023f6:	2120      	movs	r1, #32
 80023f8:	4815      	ldr	r0, [pc, #84]	@ (8002450 <NRF24_Transmit+0x8c>)
 80023fa:	f7ff ff63 	bl	80022c4 <NRF24_FIFO_write>
		Transmision_Flag = 0;
 80023fe:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <NRF24_Transmit+0x90>)
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
	}
	switch (Transmision_Flag) {
 8002404:	4b13      	ldr	r3, [pc, #76]	@ (8002454 <NRF24_Transmit+0x90>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <NRF24_Transmit+0x4e>
 800240c:	2b01      	cmp	r3, #1
 800240e:	d00a      	beq.n	8002426 <NRF24_Transmit+0x62>
 8002410:	e010      	b.n	8002434 <NRF24_Transmit+0x70>
		case 0:
			NRF24_Enable();
 8002412:	2201      	movs	r2, #1
 8002414:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002418:	480f      	ldr	r0, [pc, #60]	@ (8002458 <NRF24_Transmit+0x94>)
 800241a:	f001 ffbf 	bl	800439c <HAL_GPIO_WritePin>
			Transmision_Flag = 1;
 800241e:	4b0d      	ldr	r3, [pc, #52]	@ (8002454 <NRF24_Transmit+0x90>)
 8002420:	2201      	movs	r2, #1
 8002422:	701a      	strb	r2, [r3, #0]
			break;
 8002424:	e006      	b.n	8002434 <NRF24_Transmit+0x70>
		case 1:
			NRF24_Disable();
 8002426:	2200      	movs	r2, #0
 8002428:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800242c:	480a      	ldr	r0, [pc, #40]	@ (8002458 <NRF24_Transmit+0x94>)
 800242e:	f001 ffb5 	bl	800439c <HAL_GPIO_WritePin>
			break;
 8002432:	bf00      	nop
	}
	++Cont_TX;
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <NRF24_Transmit+0x88>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	3301      	adds	r3, #1
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b03      	ldr	r3, [pc, #12]	@ (800244c <NRF24_Transmit+0x88>)
 800243e:	701a      	strb	r2, [r3, #0]
}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200001eb 	.word	0x200001eb
 8002448:	200001e9 	.word	0x200001e9
 800244c:	200001f2 	.word	0x200001f2
 8002450:	200001f4 	.word	0x200001f4
 8002454:	200001e8 	.word	0x200001e8
 8002458:	40020400 	.word	0x40020400

0800245c <NRF24_Receive>:

void NRF24_Receive(void){
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
	NRF24_CheckFlags();
 8002460:	f7ff fec0 	bl	80021e4 <NRF24_CheckFlags>
	if(RX_P_NO != 7){
 8002464:	4b04      	ldr	r3, [pc, #16]	@ (8002478 <NRF24_Receive+0x1c>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b07      	cmp	r3, #7
 800246a:	d002      	beq.n	8002472 <NRF24_Receive+0x16>
		NRF24_FIFO_read(RxBuffer);
 800246c:	4803      	ldr	r0, [pc, #12]	@ (800247c <NRF24_Receive+0x20>)
 800246e:	f7ff ff5d 	bl	800232c <NRF24_FIFO_read>
	}
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200001ea 	.word	0x200001ea
 800247c:	20000214 	.word	0x20000214

08002480 <NRF24_TxBuffer>:

void NRF24_TxBuffer(void){
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
	++TxBuffer[0];
 8002486:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <NRF24_TxBuffer+0x5c>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	3301      	adds	r3, #1
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <NRF24_TxBuffer+0x5c>)
 8002490:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < 30; ++n) {
 8002492:	2300      	movs	r3, #0
 8002494:	71fb      	strb	r3, [r7, #7]
 8002496:	e016      	b.n	80024c6 <NRF24_TxBuffer+0x46>
		if(TxBuffer[n]==0xFF){
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	4a10      	ldr	r2, [pc, #64]	@ (80024dc <NRF24_TxBuffer+0x5c>)
 800249c:	5cd3      	ldrb	r3, [r2, r3]
 800249e:	2bff      	cmp	r3, #255	@ 0xff
 80024a0:	d10e      	bne.n	80024c0 <NRF24_TxBuffer+0x40>
			++TxBuffer[n];
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	4a0d      	ldr	r2, [pc, #52]	@ (80024dc <NRF24_TxBuffer+0x5c>)
 80024a6:	5cd2      	ldrb	r2, [r2, r3]
 80024a8:	3201      	adds	r2, #1
 80024aa:	b2d1      	uxtb	r1, r2
 80024ac:	4a0b      	ldr	r2, [pc, #44]	@ (80024dc <NRF24_TxBuffer+0x5c>)
 80024ae:	54d1      	strb	r1, [r2, r3]
			++TxBuffer[n+1];
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	3301      	adds	r3, #1
 80024b4:	4a09      	ldr	r2, [pc, #36]	@ (80024dc <NRF24_TxBuffer+0x5c>)
 80024b6:	5cd2      	ldrb	r2, [r2, r3]
 80024b8:	3201      	adds	r2, #1
 80024ba:	b2d1      	uxtb	r1, r2
 80024bc:	4a07      	ldr	r2, [pc, #28]	@ (80024dc <NRF24_TxBuffer+0x5c>)
 80024be:	54d1      	strb	r1, [r2, r3]
	for (uint8_t n = 0; n < 30; ++n) {
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	3301      	adds	r3, #1
 80024c4:	71fb      	strb	r3, [r7, #7]
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	2b1d      	cmp	r3, #29
 80024ca:	d9e5      	bls.n	8002498 <NRF24_TxBuffer+0x18>
		}
	}
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	200001f4 	.word	0x200001f4

080024e0 <NRF24_StateMachine>:

void NRF24_StateMachine(void){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
	switch (NRF24_mode){
 80024e4:	4b12      	ldr	r3, [pc, #72]	@ (8002530 <NRF24_StateMachine+0x50>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d81a      	bhi.n	8002522 <NRF24_StateMachine+0x42>
 80024ec:	a201      	add	r2, pc, #4	@ (adr r2, 80024f4 <NRF24_StateMachine+0x14>)
 80024ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f2:	bf00      	nop
 80024f4:	08002505 	.word	0x08002505
 80024f8:	08002519 	.word	0x08002519
 80024fc:	08002513 	.word	0x08002513
 8002500:	08002529 	.word	0x08002529
		case Init:
			NRF24_RxConfiguration();
 8002504:	f7ff fdae 	bl	8002064 <NRF24_RxConfiguration>
			NRF24_PowerUp();
 8002508:	f7ff fb8e 	bl	8001c28 <NRF24_PowerUp>
			NRF24_ActualConfiguration();
 800250c:	f7ff fbaa 	bl	8001c64 <NRF24_ActualConfiguration>
			break;
 8002510:	e00b      	b.n	800252a <NRF24_StateMachine+0x4a>
		case RxMode:

			NRF24_Receive();
 8002512:	f7ff ffa3 	bl	800245c <NRF24_Receive>
			break;
 8002516:	e008      	b.n	800252a <NRF24_StateMachine+0x4a>
		case TxMode:
			NRF24_TxBuffer();
 8002518:	f7ff ffb2 	bl	8002480 <NRF24_TxBuffer>
			NRF24_Transmit();
 800251c:	f7ff ff52 	bl	80023c4 <NRF24_Transmit>
			break;
 8002520:	e003      	b.n	800252a <NRF24_StateMachine+0x4a>
		case PowerSave:

			break;
		default:
			NRF24_init();
 8002522:	f7ff ff35 	bl	8002390 <NRF24_init>
	}
}
 8002526:	e000      	b.n	800252a <NRF24_StateMachine+0x4a>
			break;
 8002528:	bf00      	nop
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200001f3 	.word	0x200001f3

08002534 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af04      	add	r7, sp, #16
 800253a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800253c:	2364      	movs	r3, #100	@ 0x64
 800253e:	9302      	str	r3, [sp, #8]
 8002540:	2301      	movs	r3, #1
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	f107 030f 	add.w	r3, r7, #15
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2301      	movs	r3, #1
 800254c:	2275      	movs	r2, #117	@ 0x75
 800254e:	21d0      	movs	r1, #208	@ 0xd0
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f002 f97b 	bl	800484c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	2b68      	cmp	r3, #104	@ 0x68
 800255a:	d13d      	bne.n	80025d8 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002560:	2364      	movs	r3, #100	@ 0x64
 8002562:	9302      	str	r3, [sp, #8]
 8002564:	2301      	movs	r3, #1
 8002566:	9301      	str	r3, [sp, #4]
 8002568:	f107 030e 	add.w	r3, r7, #14
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2301      	movs	r3, #1
 8002570:	226b      	movs	r2, #107	@ 0x6b
 8002572:	21d0      	movs	r1, #208	@ 0xd0
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f002 f86f 	bl	8004658 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800257a:	2307      	movs	r3, #7
 800257c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800257e:	2364      	movs	r3, #100	@ 0x64
 8002580:	9302      	str	r3, [sp, #8]
 8002582:	2301      	movs	r3, #1
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	f107 030e 	add.w	r3, r7, #14
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2301      	movs	r3, #1
 800258e:	2219      	movs	r2, #25
 8002590:	21d0      	movs	r1, #208	@ 0xd0
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f002 f860 	bl	8004658 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002598:	2300      	movs	r3, #0
 800259a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800259c:	2364      	movs	r3, #100	@ 0x64
 800259e:	9302      	str	r3, [sp, #8]
 80025a0:	2301      	movs	r3, #1
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	f107 030e 	add.w	r3, r7, #14
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	2301      	movs	r3, #1
 80025ac:	221c      	movs	r2, #28
 80025ae:	21d0      	movs	r1, #208	@ 0xd0
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f002 f851 	bl	8004658 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80025b6:	2300      	movs	r3, #0
 80025b8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80025ba:	2364      	movs	r3, #100	@ 0x64
 80025bc:	9302      	str	r3, [sp, #8]
 80025be:	2301      	movs	r3, #1
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	f107 030e 	add.w	r3, r7, #14
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2301      	movs	r3, #1
 80025ca:	221b      	movs	r2, #27
 80025cc:	21d0      	movs	r1, #208	@ 0xd0
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f002 f842 	bl	8004658 <HAL_I2C_Mem_Write>
        return 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <MPU6050_Init+0xa6>
    }
    return 1;
 80025d8:	2301      	movs	r3, #1
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	0000      	movs	r0, r0
 80025e4:	0000      	movs	r0, r0
	...

080025e8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80025e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ec:	b094      	sub	sp, #80	@ 0x50
 80025ee:	af04      	add	r7, sp, #16
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80025f4:	2364      	movs	r3, #100	@ 0x64
 80025f6:	9302      	str	r3, [sp, #8]
 80025f8:	230e      	movs	r3, #14
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	f107 0308 	add.w	r3, r7, #8
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2301      	movs	r3, #1
 8002604:	223b      	movs	r2, #59	@ 0x3b
 8002606:	21d0      	movs	r1, #208	@ 0xd0
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f002 f91f 	bl	800484c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800260e:	7a3b      	ldrb	r3, [r7, #8]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	b21a      	sxth	r2, r3
 8002614:	7a7b      	ldrb	r3, [r7, #9]
 8002616:	b21b      	sxth	r3, r3
 8002618:	4313      	orrs	r3, r2
 800261a:	b21a      	sxth	r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002620:	7abb      	ldrb	r3, [r7, #10]
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	b21a      	sxth	r2, r3
 8002626:	7afb      	ldrb	r3, [r7, #11]
 8002628:	b21b      	sxth	r3, r3
 800262a:	4313      	orrs	r3, r2
 800262c:	b21a      	sxth	r2, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002632:	7b3b      	ldrb	r3, [r7, #12]
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	b21a      	sxth	r2, r3
 8002638:	7b7b      	ldrb	r3, [r7, #13]
 800263a:	b21b      	sxth	r3, r3
 800263c:	4313      	orrs	r3, r2
 800263e:	b21a      	sxth	r2, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8002644:	7bbb      	ldrb	r3, [r7, #14]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	b21a      	sxth	r2, r3
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	b21b      	sxth	r3, r3
 800264e:	4313      	orrs	r3, r2
 8002650:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8002652:	7c3b      	ldrb	r3, [r7, #16]
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	b21a      	sxth	r2, r3
 8002658:	7c7b      	ldrb	r3, [r7, #17]
 800265a:	b21b      	sxth	r3, r3
 800265c:	4313      	orrs	r3, r2
 800265e:	b21a      	sxth	r2, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8002664:	7cbb      	ldrb	r3, [r7, #18]
 8002666:	021b      	lsls	r3, r3, #8
 8002668:	b21a      	sxth	r2, r3
 800266a:	7cfb      	ldrb	r3, [r7, #19]
 800266c:	b21b      	sxth	r3, r3
 800266e:	4313      	orrs	r3, r2
 8002670:	b21a      	sxth	r2, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8002676:	7d3b      	ldrb	r3, [r7, #20]
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	b21a      	sxth	r2, r3
 800267c:	7d7b      	ldrb	r3, [r7, #21]
 800267e:	b21b      	sxth	r3, r3
 8002680:	4313      	orrs	r3, r2
 8002682:	b21a      	sxth	r2, r3
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fd fef8 	bl	8000484 <__aeabi_i2d>
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	4bbd      	ldr	r3, [pc, #756]	@ (8002990 <MPU6050_Read_All+0x3a8>)
 800269a:	f7fe f887 	bl	80007ac <__aeabi_ddiv>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	6839      	ldr	r1, [r7, #0]
 80026a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fd fee8 	bl	8000484 <__aeabi_i2d>
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	4bb5      	ldr	r3, [pc, #724]	@ (8002990 <MPU6050_Read_All+0x3a8>)
 80026ba:	f7fe f877 	bl	80007ac <__aeabi_ddiv>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	6839      	ldr	r1, [r7, #0]
 80026c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fd fed8 	bl	8000484 <__aeabi_i2d>
 80026d4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8002978 <MPU6050_Read_All+0x390>)
 80026d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026da:	f7fe f867 	bl	80007ac <__aeabi_ddiv>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	6839      	ldr	r1, [r7, #0]
 80026e4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80026e8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80026ec:	ee07 3a90 	vmov	s15, r3
 80026f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026f4:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8002994 <MPU6050_Read_All+0x3ac>
 80026f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026fc:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8002998 <MPU6050_Read_All+0x3b0>
 8002700:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd feb7 	bl	8000484 <__aeabi_i2d>
 8002716:	a39a      	add	r3, pc, #616	@ (adr r3, 8002980 <MPU6050_Read_All+0x398>)
 8002718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271c:	f7fe f846 	bl	80007ac <__aeabi_ddiv>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	6839      	ldr	r1, [r7, #0]
 8002726:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd fea7 	bl	8000484 <__aeabi_i2d>
 8002736:	a392      	add	r3, pc, #584	@ (adr r3, 8002980 <MPU6050_Read_All+0x398>)
 8002738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273c:	f7fe f836 	bl	80007ac <__aeabi_ddiv>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	6839      	ldr	r1, [r7, #0]
 8002746:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd fe97 	bl	8000484 <__aeabi_i2d>
 8002756:	a38a      	add	r3, pc, #552	@ (adr r3, 8002980 <MPU6050_Read_All+0x398>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f7fe f826 	bl	80007ac <__aeabi_ddiv>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	6839      	ldr	r1, [r7, #0]
 8002766:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800276a:	f001 f813 	bl	8003794 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	4b8a      	ldr	r3, [pc, #552]	@ (800299c <MPU6050_Read_All+0x3b4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	4618      	mov	r0, r3
 8002778:	f7fd fe74 	bl	8000464 <__aeabi_ui2d>
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	4b87      	ldr	r3, [pc, #540]	@ (80029a0 <MPU6050_Read_All+0x3b8>)
 8002782:	f7fe f813 	bl	80007ac <__aeabi_ddiv>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 800278e:	f001 f801 	bl	8003794 <HAL_GetTick>
 8002792:	4603      	mov	r3, r0
 8002794:	4a81      	ldr	r2, [pc, #516]	@ (800299c <MPU6050_Read_All+0x3b4>)
 8002796:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800279e:	461a      	mov	r2, r3
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a6:	fb03 f202 	mul.w	r2, r3, r2
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027b0:	4619      	mov	r1, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd fe60 	bl	8000484 <__aeabi_i2d>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	ec43 2b10 	vmov	d0, r2, r3
 80027cc:	f006 fb06 	bl	8008ddc <sqrt>
 80027d0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80027e0:	f7fe f922 	bl	8000a28 <__aeabi_dcmpeq>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d11f      	bne.n	800282a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd fe47 	bl	8000484 <__aeabi_i2d>
 80027f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027fa:	f7fd ffd7 	bl	80007ac <__aeabi_ddiv>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	ec43 2b17 	vmov	d7, r2, r3
 8002806:	eeb0 0a47 	vmov.f32	s0, s14
 800280a:	eef0 0a67 	vmov.f32	s1, s15
 800280e:	f006 fb13 	bl	8008e38 <atan>
 8002812:	ec51 0b10 	vmov	r0, r1, d0
 8002816:	a35c      	add	r3, pc, #368	@ (adr r3, 8002988 <MPU6050_Read_All+0x3a0>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f7fd fe9c 	bl	8000558 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8002828:	e005      	b.n	8002836 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800283c:	425b      	negs	r3, r3
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fe20 	bl	8000484 <__aeabi_i2d>
 8002844:	4682      	mov	sl, r0
 8002846:	468b      	mov	fp, r1
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fe18 	bl	8000484 <__aeabi_i2d>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	ec43 2b11 	vmov	d1, r2, r3
 800285c:	ec4b ab10 	vmov	d0, sl, fp
 8002860:	f006 fa7a 	bl	8008d58 <atan2>
 8002864:	ec51 0b10 	vmov	r0, r1, d0
 8002868:	a347      	add	r3, pc, #284	@ (adr r3, 8002988 <MPU6050_Read_All+0x3a0>)
 800286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286e:	f7fd fe73 	bl	8000558 <__aeabi_dmul>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	4b49      	ldr	r3, [pc, #292]	@ (80029a4 <MPU6050_Read_All+0x3bc>)
 8002880:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002884:	f7fe f8da 	bl	8000a3c <__aeabi_dcmplt>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <MPU6050_Read_All+0x2bc>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	4b43      	ldr	r3, [pc, #268]	@ (80029a8 <MPU6050_Read_All+0x3c0>)
 800289a:	f7fe f8ed 	bl	8000a78 <__aeabi_dcmpgt>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d114      	bne.n	80028ce <MPU6050_Read_All+0x2e6>
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	4b3f      	ldr	r3, [pc, #252]	@ (80029a8 <MPU6050_Read_All+0x3c0>)
 80028aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028ae:	f7fe f8e3 	bl	8000a78 <__aeabi_dcmpgt>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d015      	beq.n	80028e4 <MPU6050_Read_All+0x2fc>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	4b38      	ldr	r3, [pc, #224]	@ (80029a4 <MPU6050_Read_All+0x3bc>)
 80028c4:	f7fe f8ba 	bl	8000a3c <__aeabi_dcmplt>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 80028ce:	4937      	ldr	r1, [pc, #220]	@ (80029ac <MPU6050_Read_All+0x3c4>)
 80028d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80028d8:	6839      	ldr	r1, [r7, #0]
 80028da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028de:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80028e2:	e014      	b.n	800290e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80028ea:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 80028ee:	eeb0 1a47 	vmov.f32	s2, s14
 80028f2:	eef0 1a67 	vmov.f32	s3, s15
 80028f6:	ed97 0b06 	vldr	d0, [r7, #24]
 80028fa:	482c      	ldr	r0, [pc, #176]	@ (80029ac <MPU6050_Read_All+0x3c4>)
 80028fc:	f000 f85a 	bl	80029b4 <Kalman_getAngle>
 8002900:	eeb0 7a40 	vmov.f32	s14, s0
 8002904:	eef0 7a60 	vmov.f32	s15, s1
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002914:	4690      	mov	r8, r2
 8002916:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	4b22      	ldr	r3, [pc, #136]	@ (80029a8 <MPU6050_Read_All+0x3c0>)
 8002920:	4640      	mov	r0, r8
 8002922:	4649      	mov	r1, r9
 8002924:	f7fe f8a8 	bl	8000a78 <__aeabi_dcmpgt>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d008      	beq.n	8002940 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002934:	4614      	mov	r4, r2
 8002936:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8002946:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800294a:	eeb0 1a47 	vmov.f32	s2, s14
 800294e:	eef0 1a67 	vmov.f32	s3, s15
 8002952:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8002956:	4816      	ldr	r0, [pc, #88]	@ (80029b0 <MPU6050_Read_All+0x3c8>)
 8002958:	f000 f82c 	bl	80029b4 <Kalman_getAngle>
 800295c:	eeb0 7a40 	vmov.f32	s14, s0
 8002960:	eef0 7a60 	vmov.f32	s15, s1
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 800296a:	bf00      	nop
 800296c:	3740      	adds	r7, #64	@ 0x40
 800296e:	46bd      	mov	sp, r7
 8002970:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002974:	f3af 8000 	nop.w
 8002978:	00000000 	.word	0x00000000
 800297c:	40cc2900 	.word	0x40cc2900
 8002980:	00000000 	.word	0x00000000
 8002984:	40606000 	.word	0x40606000
 8002988:	1a63c1f8 	.word	0x1a63c1f8
 800298c:	404ca5dc 	.word	0x404ca5dc
 8002990:	40d00000 	.word	0x40d00000
 8002994:	43aa0000 	.word	0x43aa0000
 8002998:	42121eb8 	.word	0x42121eb8
 800299c:	20000234 	.word	0x20000234
 80029a0:	408f4000 	.word	0x408f4000
 80029a4:	c0568000 	.word	0xc0568000
 80029a8:	40568000 	.word	0x40568000
 80029ac:	20000048 	.word	0x20000048
 80029b0:	20000000 	.word	0x20000000

080029b4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80029b4:	b5b0      	push	{r4, r5, r7, lr}
 80029b6:	b096      	sub	sp, #88	@ 0x58
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	61f8      	str	r0, [r7, #28]
 80029bc:	ed87 0b04 	vstr	d0, [r7, #16]
 80029c0:	ed87 1b02 	vstr	d1, [r7, #8]
 80029c4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80029ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029d2:	f7fd fc09 	bl	80001e8 <__aeabi_dsub>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80029e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029ec:	f7fd fdb4 	bl	8000558 <__aeabi_dmul>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4620      	mov	r0, r4
 80029f6:	4629      	mov	r1, r5
 80029f8:	f7fd fbf8 	bl	80001ec <__adddf3>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	69f9      	ldr	r1, [r7, #28]
 8002a02:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002a12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a16:	f7fd fd9f 	bl	8000558 <__aeabi_dmul>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4610      	mov	r0, r2
 8002a20:	4619      	mov	r1, r3
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002a28:	f7fd fbde 	bl	80001e8 <__aeabi_dsub>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4610      	mov	r0, r2
 8002a32:	4619      	mov	r1, r3
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002a3a:	f7fd fbd5 	bl	80001e8 <__aeabi_dsub>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4610      	mov	r0, r2
 8002a44:	4619      	mov	r1, r3
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	f7fd fbce 	bl	80001ec <__adddf3>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a5c:	f7fd fd7c 	bl	8000558 <__aeabi_dmul>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4620      	mov	r0, r4
 8002a66:	4629      	mov	r1, r5
 8002a68:	f7fd fbc0 	bl	80001ec <__adddf3>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	69f9      	ldr	r1, [r7, #28]
 8002a72:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002a82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a86:	f7fd fd67 	bl	8000558 <__aeabi_dmul>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4620      	mov	r0, r4
 8002a90:	4629      	mov	r1, r5
 8002a92:	f7fd fba9 	bl	80001e8 <__aeabi_dsub>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	69f9      	ldr	r1, [r7, #28]
 8002a9c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ab0:	f7fd fd52 	bl	8000558 <__aeabi_dmul>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4620      	mov	r0, r4
 8002aba:	4629      	mov	r1, r5
 8002abc:	f7fd fb94 	bl	80001e8 <__aeabi_dsub>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	69f9      	ldr	r1, [r7, #28]
 8002ac6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ada:	f7fd fd3d 	bl	8000558 <__aeabi_dmul>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	f7fd fb81 	bl	80001ec <__adddf3>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	69f9      	ldr	r1, [r7, #28]
 8002af0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002b00:	f7fd fb74 	bl	80001ec <__adddf3>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002b12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b16:	f7fd fe49 	bl	80007ac <__aeabi_ddiv>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002b28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b2c:	f7fd fe3e 	bl	80007ac <__aeabi_ddiv>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002b3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b42:	f7fd fb51 	bl	80001e8 <__aeabi_dsub>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002b54:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b5c:	f7fd fcfc 	bl	8000558 <__aeabi_dmul>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4620      	mov	r0, r4
 8002b66:	4629      	mov	r1, r5
 8002b68:	f7fd fb40 	bl	80001ec <__adddf3>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	69f9      	ldr	r1, [r7, #28]
 8002b72:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002b7c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b84:	f7fd fce8 	bl	8000558 <__aeabi_dmul>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	4629      	mov	r1, r5
 8002b90:	f7fd fb2c 	bl	80001ec <__adddf3>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	69f9      	ldr	r1, [r7, #28]
 8002b9a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002ba4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002bae:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8002bb8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002bbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002bc0:	f7fd fcca 	bl	8000558 <__aeabi_dmul>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4620      	mov	r0, r4
 8002bca:	4629      	mov	r1, r5
 8002bcc:	f7fd fb0c 	bl	80001e8 <__aeabi_dsub>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	69f9      	ldr	r1, [r7, #28]
 8002bd6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002be0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002be4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002be8:	f7fd fcb6 	bl	8000558 <__aeabi_dmul>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	f7fd faf8 	bl	80001e8 <__aeabi_dsub>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	69f9      	ldr	r1, [r7, #28]
 8002bfe:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002c08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c10:	f7fd fca2 	bl	8000558 <__aeabi_dmul>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4620      	mov	r0, r4
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	f7fd fae4 	bl	80001e8 <__aeabi_dsub>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	69f9      	ldr	r1, [r7, #28]
 8002c26:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8002c30:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c34:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002c38:	f7fd fc8e 	bl	8000558 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4620      	mov	r0, r4
 8002c42:	4629      	mov	r1, r5
 8002c44:	f7fd fad0 	bl	80001e8 <__aeabi_dsub>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	69f9      	ldr	r1, [r7, #28]
 8002c4e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002c58:	ec43 2b17 	vmov	d7, r2, r3
};
 8002c5c:	eeb0 0a47 	vmov.f32	s0, s14
 8002c60:	eef0 0a67 	vmov.f32	s1, s15
 8002c64:	3758      	adds	r7, #88	@ 0x58
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002c6c <MPU6050_calculate>:

void MPU6050_calculate(void){
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
	MPU6050_Read_All(&hi2c1, &MPU6050);
 8002c70:	4902      	ldr	r1, [pc, #8]	@ (8002c7c <MPU6050_calculate+0x10>)
 8002c72:	4803      	ldr	r0, [pc, #12]	@ (8002c80 <MPU6050_calculate+0x14>)
 8002c74:	f7ff fcb8 	bl	80025e8 <MPU6050_Read_All>
}
 8002c78:	bf00      	nop
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000238 	.word	0x20000238
 8002c80:	200004f4 	.word	0x200004f4

08002c84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cfc <MX_DMA_Init+0x78>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	4a1a      	ldr	r2, [pc, #104]	@ (8002cfc <MX_DMA_Init+0x78>)
 8002c94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c9a:	4b18      	ldr	r3, [pc, #96]	@ (8002cfc <MX_DMA_Init+0x78>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	4b14      	ldr	r3, [pc, #80]	@ (8002cfc <MX_DMA_Init+0x78>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	4a13      	ldr	r2, [pc, #76]	@ (8002cfc <MX_DMA_Init+0x78>)
 8002cb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb6:	4b11      	ldr	r3, [pc, #68]	@ (8002cfc <MX_DMA_Init+0x78>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2105      	movs	r1, #5
 8002cc6:	200e      	movs	r0, #14
 8002cc8:	f000 fe28 	bl	800391c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002ccc:	200e      	movs	r0, #14
 8002cce:	f000 fe41 	bl	8003954 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2105      	movs	r1, #5
 8002cd6:	2038      	movs	r0, #56	@ 0x38
 8002cd8:	f000 fe20 	bl	800391c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002cdc:	2038      	movs	r0, #56	@ 0x38
 8002cde:	f000 fe39 	bl	8003954 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2105      	movs	r1, #5
 8002ce6:	203a      	movs	r0, #58	@ 0x3a
 8002ce8:	f000 fe18 	bl	800391c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002cec:	203a      	movs	r0, #58	@ 0x3a
 8002cee:	f000 fe31 	bl	8003954 <HAL_NVIC_EnableIRQ>

}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800

08002d00 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4a07      	ldr	r2, [pc, #28]	@ (8002d2c <vApplicationGetIdleTaskMemory+0x2c>)
 8002d10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	4a06      	ldr	r2, [pc, #24]	@ (8002d30 <vApplicationGetIdleTaskMemory+0x30>)
 8002d16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2280      	movs	r2, #128	@ 0x80
 8002d1c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	200002a0 	.word	0x200002a0
 8002d30:	200002f4 	.word	0x200002f4

08002d34 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002d34:	b5b0      	push	{r4, r5, r7, lr}
 8002d36:	b09c      	sub	sp, #112	@ 0x70
 8002d38:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task10ms */
  osThreadDef(Task10ms, Task_10ms, osPriorityNormal, 0, 128);
 8002d3a:	4b27      	ldr	r3, [pc, #156]	@ (8002dd8 <MX_FREERTOS_Init+0xa4>)
 8002d3c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8002d40:	461d      	mov	r5, r3
 8002d42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002d4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task10msHandle = osThreadCreate(osThread(Task10ms), NULL);
 8002d4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f004 fd8a 	bl	800786e <osThreadCreate>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002ddc <MX_FREERTOS_Init+0xa8>)
 8002d5e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task100ms */
  osThreadDef(Task100ms, Task_100ms, osPriorityNormal, 0, 128);
 8002d60:	4b1f      	ldr	r3, [pc, #124]	@ (8002de0 <MX_FREERTOS_Init+0xac>)
 8002d62:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8002d66:	461d      	mov	r5, r3
 8002d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002d70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task100msHandle = osThreadCreate(osThread(Task100ms), NULL);
 8002d74:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f004 fd77 	bl	800786e <osThreadCreate>
 8002d80:	4603      	mov	r3, r0
 8002d82:	4a18      	ldr	r2, [pc, #96]	@ (8002de4 <MX_FREERTOS_Init+0xb0>)
 8002d84:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1000ms */
  osThreadDef(Task1000ms, Task_1000ms, osPriorityIdle, 0, 128);
 8002d86:	4b18      	ldr	r3, [pc, #96]	@ (8002de8 <MX_FREERTOS_Init+0xb4>)
 8002d88:	f107 041c 	add.w	r4, r7, #28
 8002d8c:	461d      	mov	r5, r3
 8002d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002d96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1000msHandle = osThreadCreate(osThread(Task1000ms), NULL);
 8002d9a:	f107 031c 	add.w	r3, r7, #28
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f004 fd64 	bl	800786e <osThreadCreate>
 8002da6:	4603      	mov	r3, r0
 8002da8:	4a10      	ldr	r2, [pc, #64]	@ (8002dec <MX_FREERTOS_Init+0xb8>)
 8002daa:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1ms */
  osThreadDef(Task1ms, Task_1ms, osPriorityAboveNormal, 0, 128);
 8002dac:	4b10      	ldr	r3, [pc, #64]	@ (8002df0 <MX_FREERTOS_Init+0xbc>)
 8002dae:	463c      	mov	r4, r7
 8002db0:	461d      	mov	r5, r3
 8002db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002db6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002dba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1msHandle = osThreadCreate(osThread(Task1ms), NULL);
 8002dbe:	463b      	mov	r3, r7
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f004 fd53 	bl	800786e <osThreadCreate>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	4a0a      	ldr	r2, [pc, #40]	@ (8002df4 <MX_FREERTOS_Init+0xc0>)
 8002dcc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002dce:	bf00      	nop
 8002dd0:	3770      	adds	r7, #112	@ 0x70
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	08009864 	.word	0x08009864
 8002ddc:	20000290 	.word	0x20000290
 8002de0:	0800988c 	.word	0x0800988c
 8002de4:	20000294 	.word	0x20000294
 8002de8:	080098b4 	.word	0x080098b4
 8002dec:	20000298 	.word	0x20000298
 8002df0:	080098d8 	.word	0x080098d8
 8002df4:	2000029c 	.word	0x2000029c

08002df8 <Task_10ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_10ms */
void Task_10ms(void const * argument)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_10ms */
	task_init_10ms();
 8002e00:	f7fe f857 	bl	8000eb2 <task_init_10ms>
  /* Infinite loop */
  for(;;)
  {
	task_10ms();
 8002e04:	f7fe f85c 	bl	8000ec0 <task_10ms>
    osDelay(10);
 8002e08:	200a      	movs	r0, #10
 8002e0a:	f004 fd7c 	bl	8007906 <osDelay>
	task_10ms();
 8002e0e:	bf00      	nop
 8002e10:	e7f8      	b.n	8002e04 <Task_10ms+0xc>

08002e12 <Task_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_100ms */
void Task_100ms(void const * argument)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_100ms */
	task_init_100ms();
 8002e1a:	f7fe f857 	bl	8000ecc <task_init_100ms>
  /* Infinite loop */
  for(;;)
  {
	task_100ms();
 8002e1e:	f7fe f85c 	bl	8000eda <task_100ms>
    osDelay(100);
 8002e22:	2064      	movs	r0, #100	@ 0x64
 8002e24:	f004 fd6f 	bl	8007906 <osDelay>
	task_100ms();
 8002e28:	bf00      	nop
 8002e2a:	e7f8      	b.n	8002e1e <Task_100ms+0xc>

08002e2c <Task_1000ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1000ms */
void Task_1000ms(void const * argument)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1000ms */
	task_init_1000ms();
 8002e34:	f7fe f857 	bl	8000ee6 <task_init_1000ms>
  /* Infinite loop */
  for(;;)
  {
	task_1000ms();
 8002e38:	f7fe f85c 	bl	8000ef4 <task_1000ms>
    osDelay(1000);
 8002e3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e40:	f004 fd61 	bl	8007906 <osDelay>
	task_1000ms();
 8002e44:	bf00      	nop
 8002e46:	e7f7      	b.n	8002e38 <Task_1000ms+0xc>

08002e48 <Task_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1ms */
void Task_1ms(void const * argument)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1ms */
	task_init_1ms();
 8002e50:	f7fe f822 	bl	8000e98 <task_init_1ms>
  /* Infinite loop */
  for(;;)
  {
	task_1ms();
 8002e54:	f7fe f827 	bl	8000ea6 <task_1ms>
    osDelay(1);
 8002e58:	2001      	movs	r0, #1
 8002e5a:	f004 fd54 	bl	8007906 <osDelay>
	task_1ms();
 8002e5e:	bf00      	nop
 8002e60:	e7f8      	b.n	8002e54 <Task_1ms+0xc>
	...

08002e64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	@ 0x28
 8002e68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6a:	f107 0314 	add.w	r3, r7, #20
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	609a      	str	r2, [r3, #8]
 8002e76:	60da      	str	r2, [r3, #12]
 8002e78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	4b32      	ldr	r3, [pc, #200]	@ (8002f48 <MX_GPIO_Init+0xe4>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e82:	4a31      	ldr	r2, [pc, #196]	@ (8002f48 <MX_GPIO_Init+0xe4>)
 8002e84:	f043 0304 	orr.w	r3, r3, #4
 8002e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f48 <MX_GPIO_Init+0xe4>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8002f48 <MX_GPIO_Init+0xe4>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8002f48 <MX_GPIO_Init+0xe4>)
 8002ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea6:	4b28      	ldr	r3, [pc, #160]	@ (8002f48 <MX_GPIO_Init+0xe4>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	4b24      	ldr	r3, [pc, #144]	@ (8002f48 <MX_GPIO_Init+0xe4>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	4a23      	ldr	r2, [pc, #140]	@ (8002f48 <MX_GPIO_Init+0xe4>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec2:	4b21      	ldr	r3, [pc, #132]	@ (8002f48 <MX_GPIO_Init+0xe4>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	607b      	str	r3, [r7, #4]
 8002ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f48 <MX_GPIO_Init+0xe4>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8002f48 <MX_GPIO_Init+0xe4>)
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ede:	4b1a      	ldr	r3, [pc, #104]	@ (8002f48 <MX_GPIO_Init+0xe4>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	607b      	str	r3, [r7, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP280_CSN_GPIO_Port, BMP280_CSN_Pin, GPIO_PIN_RESET);
 8002eea:	2200      	movs	r2, #0
 8002eec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ef0:	4816      	ldr	r0, [pc, #88]	@ (8002f4c <MX_GPIO_Init+0xe8>)
 8002ef2:	f001 fa53 	bl	800439c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002efc:	4814      	ldr	r0, [pc, #80]	@ (8002f50 <MX_GPIO_Init+0xec>)
 8002efe:	f001 fa4d 	bl	800439c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP280_CSN_Pin;
 8002f02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f10:	2300      	movs	r3, #0
 8002f12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMP280_CSN_GPIO_Port, &GPIO_InitStruct);
 8002f14:	f107 0314 	add.w	r3, r7, #20
 8002f18:	4619      	mov	r1, r3
 8002f1a:	480c      	ldr	r0, [pc, #48]	@ (8002f4c <MX_GPIO_Init+0xe8>)
 8002f1c:	f001 f8ba 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 8002f20:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f26:	2301      	movs	r3, #1
 8002f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f32:	f107 0314 	add.w	r3, r7, #20
 8002f36:	4619      	mov	r1, r3
 8002f38:	4805      	ldr	r0, [pc, #20]	@ (8002f50 <MX_GPIO_Init+0xec>)
 8002f3a:	f001 f8ab 	bl	8004094 <HAL_GPIO_Init>

}
 8002f3e:	bf00      	nop
 8002f40:	3728      	adds	r7, #40	@ 0x28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40020000 	.word	0x40020000
 8002f50:	40020400 	.word	0x40020400

08002f54 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f58:	4b12      	ldr	r3, [pc, #72]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f5a:	4a13      	ldr	r2, [pc, #76]	@ (8002fa8 <MX_I2C1_Init+0x54>)
 8002f5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002f5e:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f60:	4a12      	ldr	r2, [pc, #72]	@ (8002fac <MX_I2C1_Init+0x58>)
 8002f62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f64:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f70:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f78:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f7e:	4b09      	ldr	r3, [pc, #36]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f84:	4b07      	ldr	r3, [pc, #28]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f8a:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f90:	4804      	ldr	r0, [pc, #16]	@ (8002fa4 <MX_I2C1_Init+0x50>)
 8002f92:	f001 fa1d 	bl	80043d0 <HAL_I2C_Init>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f9c:	f000 f8ee 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fa0:	bf00      	nop
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	200004f4 	.word	0x200004f4
 8002fa8:	40005400 	.word	0x40005400
 8002fac:	00061a80 	.word	0x00061a80

08002fb0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	@ 0x28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 0314 	add.w	r3, r7, #20
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a19      	ldr	r2, [pc, #100]	@ (8003034 <HAL_I2C_MspInit+0x84>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d12b      	bne.n	800302a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	4b18      	ldr	r3, [pc, #96]	@ (8003038 <HAL_I2C_MspInit+0x88>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	4a17      	ldr	r2, [pc, #92]	@ (8003038 <HAL_I2C_MspInit+0x88>)
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fe2:	4b15      	ldr	r3, [pc, #84]	@ (8003038 <HAL_I2C_MspInit+0x88>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fee:	23c0      	movs	r3, #192	@ 0xc0
 8002ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ff2:	2312      	movs	r3, #18
 8002ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ffe:	2304      	movs	r3, #4
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003002:	f107 0314 	add.w	r3, r7, #20
 8003006:	4619      	mov	r1, r3
 8003008:	480c      	ldr	r0, [pc, #48]	@ (800303c <HAL_I2C_MspInit+0x8c>)
 800300a:	f001 f843 	bl	8004094 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	4b09      	ldr	r3, [pc, #36]	@ (8003038 <HAL_I2C_MspInit+0x88>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	4a08      	ldr	r2, [pc, #32]	@ (8003038 <HAL_I2C_MspInit+0x88>)
 8003018:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800301c:	6413      	str	r3, [r2, #64]	@ 0x40
 800301e:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <HAL_I2C_MspInit+0x88>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800302a:	bf00      	nop
 800302c:	3728      	adds	r7, #40	@ 0x28
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40005400 	.word	0x40005400
 8003038:	40023800 	.word	0x40023800
 800303c:	40020400 	.word	0x40020400

08003040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003044:	f000 fb70 	bl	8003728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003048:	f000 f81e 	bl	8003088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800304c:	f7ff ff0a 	bl	8002e64 <MX_GPIO_Init>
  MX_DMA_Init();
 8003050:	f7ff fe18 	bl	8002c84 <MX_DMA_Init>
  MX_SPI1_Init();
 8003054:	f000 f898 	bl	8003188 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003058:	f000 f8cc 	bl	80031f4 <MX_SPI2_Init>
  MX_I2C1_Init();
 800305c:	f7ff ff7a 	bl	8002f54 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_init();
 8003060:	f7ff f996 	bl	8002390 <NRF24_init>
  BMP280_init();
 8003064:	f7fe fc3e 	bl	80018e4 <BMP280_init>
  while (MPU6050_Init(&hi2c1) == 1);
 8003068:	bf00      	nop
 800306a:	4806      	ldr	r0, [pc, #24]	@ (8003084 <main+0x44>)
 800306c:	f7ff fa62 	bl	8002534 <MPU6050_Init>
 8003070:	4603      	mov	r3, r0
 8003072:	2b01      	cmp	r3, #1
 8003074:	d0f9      	beq.n	800306a <main+0x2a>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003076:	f7ff fe5d 	bl	8002d34 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800307a:	f004 fbf1 	bl	8007860 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800307e:	bf00      	nop
 8003080:	e7fd      	b.n	800307e <main+0x3e>
 8003082:	bf00      	nop
 8003084:	200004f4 	.word	0x200004f4

08003088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b094      	sub	sp, #80	@ 0x50
 800308c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800308e:	f107 0320 	add.w	r3, r7, #32
 8003092:	2230      	movs	r2, #48	@ 0x30
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f005 fe2c 	bl	8008cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800309c:	f107 030c 	add.w	r3, r7, #12
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ac:	2300      	movs	r3, #0
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	4b27      	ldr	r3, [pc, #156]	@ (8003150 <SystemClock_Config+0xc8>)
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	4a26      	ldr	r2, [pc, #152]	@ (8003150 <SystemClock_Config+0xc8>)
 80030b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80030bc:	4b24      	ldr	r3, [pc, #144]	@ (8003150 <SystemClock_Config+0xc8>)
 80030be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030c8:	2300      	movs	r3, #0
 80030ca:	607b      	str	r3, [r7, #4]
 80030cc:	4b21      	ldr	r3, [pc, #132]	@ (8003154 <SystemClock_Config+0xcc>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a20      	ldr	r2, [pc, #128]	@ (8003154 <SystemClock_Config+0xcc>)
 80030d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003154 <SystemClock_Config+0xcc>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030e4:	2302      	movs	r3, #2
 80030e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030e8:	2301      	movs	r3, #1
 80030ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030ec:	2310      	movs	r3, #16
 80030ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030f0:	2302      	movs	r3, #2
 80030f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030f4:	2300      	movs	r3, #0
 80030f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80030f8:	2308      	movs	r3, #8
 80030fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80030fc:	2364      	movs	r3, #100	@ 0x64
 80030fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003100:	2302      	movs	r3, #2
 8003102:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003104:	2304      	movs	r3, #4
 8003106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003108:	f107 0320 	add.w	r3, r7, #32
 800310c:	4618      	mov	r0, r3
 800310e:	f002 f983 	bl	8005418 <HAL_RCC_OscConfig>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003118:	f000 f830 	bl	800317c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800311c:	230f      	movs	r3, #15
 800311e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003120:	2302      	movs	r3, #2
 8003122:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003128:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800312c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003132:	f107 030c 	add.w	r3, r7, #12
 8003136:	2103      	movs	r1, #3
 8003138:	4618      	mov	r0, r3
 800313a:	f002 fbe5 	bl	8005908 <HAL_RCC_ClockConfig>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003144:	f000 f81a 	bl	800317c <Error_Handler>
  }
}
 8003148:	bf00      	nop
 800314a:	3750      	adds	r7, #80	@ 0x50
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40023800 	.word	0x40023800
 8003154:	40007000 	.word	0x40007000

08003158 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a04      	ldr	r2, [pc, #16]	@ (8003178 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d101      	bne.n	800316e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800316a:	f000 faff 	bl	800376c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40014800 	.word	0x40014800

0800317c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003180:	b672      	cpsid	i
}
 8003182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003184:	bf00      	nop
 8003186:	e7fd      	b.n	8003184 <Error_Handler+0x8>

08003188 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800318c:	4b17      	ldr	r3, [pc, #92]	@ (80031ec <MX_SPI1_Init+0x64>)
 800318e:	4a18      	ldr	r2, [pc, #96]	@ (80031f0 <MX_SPI1_Init+0x68>)
 8003190:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003192:	4b16      	ldr	r3, [pc, #88]	@ (80031ec <MX_SPI1_Init+0x64>)
 8003194:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003198:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800319a:	4b14      	ldr	r3, [pc, #80]	@ (80031ec <MX_SPI1_Init+0x64>)
 800319c:	2200      	movs	r2, #0
 800319e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031a0:	4b12      	ldr	r3, [pc, #72]	@ (80031ec <MX_SPI1_Init+0x64>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031a6:	4b11      	ldr	r3, [pc, #68]	@ (80031ec <MX_SPI1_Init+0x64>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031ac:	4b0f      	ldr	r3, [pc, #60]	@ (80031ec <MX_SPI1_Init+0x64>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031b2:	4b0e      	ldr	r3, [pc, #56]	@ (80031ec <MX_SPI1_Init+0x64>)
 80031b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80031ba:	4b0c      	ldr	r3, [pc, #48]	@ (80031ec <MX_SPI1_Init+0x64>)
 80031bc:	2218      	movs	r2, #24
 80031be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031c0:	4b0a      	ldr	r3, [pc, #40]	@ (80031ec <MX_SPI1_Init+0x64>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031c6:	4b09      	ldr	r3, [pc, #36]	@ (80031ec <MX_SPI1_Init+0x64>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031cc:	4b07      	ldr	r3, [pc, #28]	@ (80031ec <MX_SPI1_Init+0x64>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80031d2:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <MX_SPI1_Init+0x64>)
 80031d4:	220a      	movs	r2, #10
 80031d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031d8:	4804      	ldr	r0, [pc, #16]	@ (80031ec <MX_SPI1_Init+0x64>)
 80031da:	f002 fde7 	bl	8005dac <HAL_SPI_Init>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80031e4:	f7ff ffca 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031e8:	bf00      	nop
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20000548 	.word	0x20000548
 80031f0:	40013000 	.word	0x40013000

080031f4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80031f8:	4b17      	ldr	r3, [pc, #92]	@ (8003258 <MX_SPI2_Init+0x64>)
 80031fa:	4a18      	ldr	r2, [pc, #96]	@ (800325c <MX_SPI2_Init+0x68>)
 80031fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80031fe:	4b16      	ldr	r3, [pc, #88]	@ (8003258 <MX_SPI2_Init+0x64>)
 8003200:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003204:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003206:	4b14      	ldr	r3, [pc, #80]	@ (8003258 <MX_SPI2_Init+0x64>)
 8003208:	2200      	movs	r2, #0
 800320a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800320c:	4b12      	ldr	r3, [pc, #72]	@ (8003258 <MX_SPI2_Init+0x64>)
 800320e:	2200      	movs	r2, #0
 8003210:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003212:	4b11      	ldr	r3, [pc, #68]	@ (8003258 <MX_SPI2_Init+0x64>)
 8003214:	2200      	movs	r2, #0
 8003216:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003218:	4b0f      	ldr	r3, [pc, #60]	@ (8003258 <MX_SPI2_Init+0x64>)
 800321a:	2200      	movs	r2, #0
 800321c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800321e:	4b0e      	ldr	r3, [pc, #56]	@ (8003258 <MX_SPI2_Init+0x64>)
 8003220:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003224:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003226:	4b0c      	ldr	r3, [pc, #48]	@ (8003258 <MX_SPI2_Init+0x64>)
 8003228:	2218      	movs	r2, #24
 800322a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800322c:	4b0a      	ldr	r3, [pc, #40]	@ (8003258 <MX_SPI2_Init+0x64>)
 800322e:	2200      	movs	r2, #0
 8003230:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003232:	4b09      	ldr	r3, [pc, #36]	@ (8003258 <MX_SPI2_Init+0x64>)
 8003234:	2200      	movs	r2, #0
 8003236:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003238:	4b07      	ldr	r3, [pc, #28]	@ (8003258 <MX_SPI2_Init+0x64>)
 800323a:	2200      	movs	r2, #0
 800323c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800323e:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <MX_SPI2_Init+0x64>)
 8003240:	220a      	movs	r2, #10
 8003242:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003244:	4804      	ldr	r0, [pc, #16]	@ (8003258 <MX_SPI2_Init+0x64>)
 8003246:	f002 fdb1 	bl	8005dac <HAL_SPI_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003250:	f7ff ff94 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003254:	bf00      	nop
 8003256:	bd80      	pop	{r7, pc}
 8003258:	200005a0 	.word	0x200005a0
 800325c:	40003800 	.word	0x40003800

08003260 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08c      	sub	sp, #48	@ 0x30
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003268:	f107 031c 	add.w	r3, r7, #28
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a8a      	ldr	r2, [pc, #552]	@ (80034a8 <HAL_SPI_MspInit+0x248>)
 800327e:	4293      	cmp	r3, r2
 8003280:	f040 8089 	bne.w	8003396 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003284:	2300      	movs	r3, #0
 8003286:	61bb      	str	r3, [r7, #24]
 8003288:	4b88      	ldr	r3, [pc, #544]	@ (80034ac <HAL_SPI_MspInit+0x24c>)
 800328a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328c:	4a87      	ldr	r2, [pc, #540]	@ (80034ac <HAL_SPI_MspInit+0x24c>)
 800328e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003292:	6453      	str	r3, [r2, #68]	@ 0x44
 8003294:	4b85      	ldr	r3, [pc, #532]	@ (80034ac <HAL_SPI_MspInit+0x24c>)
 8003296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003298:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	4b81      	ldr	r3, [pc, #516]	@ (80034ac <HAL_SPI_MspInit+0x24c>)
 80032a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a8:	4a80      	ldr	r2, [pc, #512]	@ (80034ac <HAL_SPI_MspInit+0x24c>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80032b0:	4b7e      	ldr	r3, [pc, #504]	@ (80034ac <HAL_SPI_MspInit+0x24c>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MISO_Pin|NRF24_MOSI_Pin;
 80032bc:	23e0      	movs	r3, #224	@ 0xe0
 80032be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c0:	2302      	movs	r3, #2
 80032c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c8:	2303      	movs	r3, #3
 80032ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032cc:	2305      	movs	r3, #5
 80032ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d0:	f107 031c 	add.w	r3, r7, #28
 80032d4:	4619      	mov	r1, r3
 80032d6:	4876      	ldr	r0, [pc, #472]	@ (80034b0 <HAL_SPI_MspInit+0x250>)
 80032d8:	f000 fedc 	bl	8004094 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80032dc:	4b75      	ldr	r3, [pc, #468]	@ (80034b4 <HAL_SPI_MspInit+0x254>)
 80032de:	4a76      	ldr	r2, [pc, #472]	@ (80034b8 <HAL_SPI_MspInit+0x258>)
 80032e0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80032e2:	4b74      	ldr	r3, [pc, #464]	@ (80034b4 <HAL_SPI_MspInit+0x254>)
 80032e4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80032e8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032ea:	4b72      	ldr	r3, [pc, #456]	@ (80034b4 <HAL_SPI_MspInit+0x254>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f0:	4b70      	ldr	r3, [pc, #448]	@ (80034b4 <HAL_SPI_MspInit+0x254>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032f6:	4b6f      	ldr	r3, [pc, #444]	@ (80034b4 <HAL_SPI_MspInit+0x254>)
 80032f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032fc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032fe:	4b6d      	ldr	r3, [pc, #436]	@ (80034b4 <HAL_SPI_MspInit+0x254>)
 8003300:	2200      	movs	r2, #0
 8003302:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003304:	4b6b      	ldr	r3, [pc, #428]	@ (80034b4 <HAL_SPI_MspInit+0x254>)
 8003306:	2200      	movs	r2, #0
 8003308:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800330a:	4b6a      	ldr	r3, [pc, #424]	@ (80034b4 <HAL_SPI_MspInit+0x254>)
 800330c:	2200      	movs	r2, #0
 800330e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003310:	4b68      	ldr	r3, [pc, #416]	@ (80034b4 <HAL_SPI_MspInit+0x254>)
 8003312:	2200      	movs	r2, #0
 8003314:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003316:	4b67      	ldr	r3, [pc, #412]	@ (80034b4 <HAL_SPI_MspInit+0x254>)
 8003318:	2200      	movs	r2, #0
 800331a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800331c:	4865      	ldr	r0, [pc, #404]	@ (80034b4 <HAL_SPI_MspInit+0x254>)
 800331e:	f000 fb27 	bl	8003970 <HAL_DMA_Init>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8003328:	f7ff ff28 	bl	800317c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a61      	ldr	r2, [pc, #388]	@ (80034b4 <HAL_SPI_MspInit+0x254>)
 8003330:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003332:	4a60      	ldr	r2, [pc, #384]	@ (80034b4 <HAL_SPI_MspInit+0x254>)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8003338:	4b60      	ldr	r3, [pc, #384]	@ (80034bc <HAL_SPI_MspInit+0x25c>)
 800333a:	4a61      	ldr	r2, [pc, #388]	@ (80034c0 <HAL_SPI_MspInit+0x260>)
 800333c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 800333e:	4b5f      	ldr	r3, [pc, #380]	@ (80034bc <HAL_SPI_MspInit+0x25c>)
 8003340:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003344:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003346:	4b5d      	ldr	r3, [pc, #372]	@ (80034bc <HAL_SPI_MspInit+0x25c>)
 8003348:	2240      	movs	r2, #64	@ 0x40
 800334a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800334c:	4b5b      	ldr	r3, [pc, #364]	@ (80034bc <HAL_SPI_MspInit+0x25c>)
 800334e:	2200      	movs	r2, #0
 8003350:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003352:	4b5a      	ldr	r3, [pc, #360]	@ (80034bc <HAL_SPI_MspInit+0x25c>)
 8003354:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003358:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800335a:	4b58      	ldr	r3, [pc, #352]	@ (80034bc <HAL_SPI_MspInit+0x25c>)
 800335c:	2200      	movs	r2, #0
 800335e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003360:	4b56      	ldr	r3, [pc, #344]	@ (80034bc <HAL_SPI_MspInit+0x25c>)
 8003362:	2200      	movs	r2, #0
 8003364:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003366:	4b55      	ldr	r3, [pc, #340]	@ (80034bc <HAL_SPI_MspInit+0x25c>)
 8003368:	2200      	movs	r2, #0
 800336a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800336c:	4b53      	ldr	r3, [pc, #332]	@ (80034bc <HAL_SPI_MspInit+0x25c>)
 800336e:	2200      	movs	r2, #0
 8003370:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003372:	4b52      	ldr	r3, [pc, #328]	@ (80034bc <HAL_SPI_MspInit+0x25c>)
 8003374:	2200      	movs	r2, #0
 8003376:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003378:	4850      	ldr	r0, [pc, #320]	@ (80034bc <HAL_SPI_MspInit+0x25c>)
 800337a:	f000 faf9 	bl	8003970 <HAL_DMA_Init>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8003384:	f7ff fefa 	bl	800317c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a4c      	ldr	r2, [pc, #304]	@ (80034bc <HAL_SPI_MspInit+0x25c>)
 800338c:	649a      	str	r2, [r3, #72]	@ 0x48
 800338e:	4a4b      	ldr	r2, [pc, #300]	@ (80034bc <HAL_SPI_MspInit+0x25c>)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003394:	e084      	b.n	80034a0 <HAL_SPI_MspInit+0x240>
  else if(spiHandle->Instance==SPI2)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a4a      	ldr	r2, [pc, #296]	@ (80034c4 <HAL_SPI_MspInit+0x264>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d17f      	bne.n	80034a0 <HAL_SPI_MspInit+0x240>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033a0:	2300      	movs	r3, #0
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	4b41      	ldr	r3, [pc, #260]	@ (80034ac <HAL_SPI_MspInit+0x24c>)
 80033a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a8:	4a40      	ldr	r2, [pc, #256]	@ (80034ac <HAL_SPI_MspInit+0x24c>)
 80033aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b0:	4b3e      	ldr	r3, [pc, #248]	@ (80034ac <HAL_SPI_MspInit+0x24c>)
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	4b3a      	ldr	r3, [pc, #232]	@ (80034ac <HAL_SPI_MspInit+0x24c>)
 80033c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c4:	4a39      	ldr	r2, [pc, #228]	@ (80034ac <HAL_SPI_MspInit+0x24c>)
 80033c6:	f043 0304 	orr.w	r3, r3, #4
 80033ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80033cc:	4b37      	ldr	r3, [pc, #220]	@ (80034ac <HAL_SPI_MspInit+0x24c>)
 80033ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d8:	2300      	movs	r3, #0
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	4b33      	ldr	r3, [pc, #204]	@ (80034ac <HAL_SPI_MspInit+0x24c>)
 80033de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e0:	4a32      	ldr	r2, [pc, #200]	@ (80034ac <HAL_SPI_MspInit+0x24c>)
 80033e2:	f043 0302 	orr.w	r3, r3, #2
 80033e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80033e8:	4b30      	ldr	r3, [pc, #192]	@ (80034ac <HAL_SPI_MspInit+0x24c>)
 80033ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP280_MISO_Pin|BMP280_MOSI_Pin;
 80033f4:	230c      	movs	r3, #12
 80033f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003400:	2303      	movs	r3, #3
 8003402:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003404:	2305      	movs	r3, #5
 8003406:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003408:	f107 031c 	add.w	r3, r7, #28
 800340c:	4619      	mov	r1, r3
 800340e:	482e      	ldr	r0, [pc, #184]	@ (80034c8 <HAL_SPI_MspInit+0x268>)
 8003410:	f000 fe40 	bl	8004094 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BMP280_SCK_Pin;
 8003414:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341a:	2302      	movs	r3, #2
 800341c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	2300      	movs	r3, #0
 8003420:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003422:	2303      	movs	r3, #3
 8003424:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003426:	2305      	movs	r3, #5
 8003428:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BMP280_SCK_GPIO_Port, &GPIO_InitStruct);
 800342a:	f107 031c 	add.w	r3, r7, #28
 800342e:	4619      	mov	r1, r3
 8003430:	4826      	ldr	r0, [pc, #152]	@ (80034cc <HAL_SPI_MspInit+0x26c>)
 8003432:	f000 fe2f 	bl	8004094 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003436:	4b26      	ldr	r3, [pc, #152]	@ (80034d0 <HAL_SPI_MspInit+0x270>)
 8003438:	4a26      	ldr	r2, [pc, #152]	@ (80034d4 <HAL_SPI_MspInit+0x274>)
 800343a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800343c:	4b24      	ldr	r3, [pc, #144]	@ (80034d0 <HAL_SPI_MspInit+0x270>)
 800343e:	2200      	movs	r2, #0
 8003440:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003442:	4b23      	ldr	r3, [pc, #140]	@ (80034d0 <HAL_SPI_MspInit+0x270>)
 8003444:	2200      	movs	r2, #0
 8003446:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003448:	4b21      	ldr	r3, [pc, #132]	@ (80034d0 <HAL_SPI_MspInit+0x270>)
 800344a:	2200      	movs	r2, #0
 800344c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800344e:	4b20      	ldr	r3, [pc, #128]	@ (80034d0 <HAL_SPI_MspInit+0x270>)
 8003450:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003454:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003456:	4b1e      	ldr	r3, [pc, #120]	@ (80034d0 <HAL_SPI_MspInit+0x270>)
 8003458:	2200      	movs	r2, #0
 800345a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800345c:	4b1c      	ldr	r3, [pc, #112]	@ (80034d0 <HAL_SPI_MspInit+0x270>)
 800345e:	2200      	movs	r2, #0
 8003460:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003462:	4b1b      	ldr	r3, [pc, #108]	@ (80034d0 <HAL_SPI_MspInit+0x270>)
 8003464:	2200      	movs	r2, #0
 8003466:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003468:	4b19      	ldr	r3, [pc, #100]	@ (80034d0 <HAL_SPI_MspInit+0x270>)
 800346a:	2200      	movs	r2, #0
 800346c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800346e:	4b18      	ldr	r3, [pc, #96]	@ (80034d0 <HAL_SPI_MspInit+0x270>)
 8003470:	2200      	movs	r2, #0
 8003472:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003474:	4816      	ldr	r0, [pc, #88]	@ (80034d0 <HAL_SPI_MspInit+0x270>)
 8003476:	f000 fa7b 	bl	8003970 <HAL_DMA_Init>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_SPI_MspInit+0x224>
      Error_Handler();
 8003480:	f7ff fe7c 	bl	800317c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a12      	ldr	r2, [pc, #72]	@ (80034d0 <HAL_SPI_MspInit+0x270>)
 8003488:	64da      	str	r2, [r3, #76]	@ 0x4c
 800348a:	4a11      	ldr	r2, [pc, #68]	@ (80034d0 <HAL_SPI_MspInit+0x270>)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8003490:	2200      	movs	r2, #0
 8003492:	2105      	movs	r1, #5
 8003494:	2024      	movs	r0, #36	@ 0x24
 8003496:	f000 fa41 	bl	800391c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800349a:	2024      	movs	r0, #36	@ 0x24
 800349c:	f000 fa5a 	bl	8003954 <HAL_NVIC_EnableIRQ>
}
 80034a0:	bf00      	nop
 80034a2:	3730      	adds	r7, #48	@ 0x30
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40013000 	.word	0x40013000
 80034ac:	40023800 	.word	0x40023800
 80034b0:	40020000 	.word	0x40020000
 80034b4:	200005f8 	.word	0x200005f8
 80034b8:	40026410 	.word	0x40026410
 80034bc:	20000658 	.word	0x20000658
 80034c0:	40026440 	.word	0x40026440
 80034c4:	40003800 	.word	0x40003800
 80034c8:	40020800 	.word	0x40020800
 80034cc:	40020400 	.word	0x40020400
 80034d0:	200006b8 	.word	0x200006b8
 80034d4:	40026058 	.word	0x40026058

080034d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	607b      	str	r3, [r7, #4]
 80034e2:	4b12      	ldr	r3, [pc, #72]	@ (800352c <HAL_MspInit+0x54>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e6:	4a11      	ldr	r2, [pc, #68]	@ (800352c <HAL_MspInit+0x54>)
 80034e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80034ee:	4b0f      	ldr	r3, [pc, #60]	@ (800352c <HAL_MspInit+0x54>)
 80034f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034f6:	607b      	str	r3, [r7, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	603b      	str	r3, [r7, #0]
 80034fe:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <HAL_MspInit+0x54>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	4a0a      	ldr	r2, [pc, #40]	@ (800352c <HAL_MspInit+0x54>)
 8003504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003508:	6413      	str	r3, [r2, #64]	@ 0x40
 800350a:	4b08      	ldr	r3, [pc, #32]	@ (800352c <HAL_MspInit+0x54>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003516:	2200      	movs	r2, #0
 8003518:	210f      	movs	r1, #15
 800351a:	f06f 0001 	mvn.w	r0, #1
 800351e:	f000 f9fd 	bl	800391c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800

08003530 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08c      	sub	sp, #48	@ 0x30
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8003540:	2300      	movs	r3, #0
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	4b2e      	ldr	r3, [pc, #184]	@ (8003600 <HAL_InitTick+0xd0>)
 8003546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003548:	4a2d      	ldr	r2, [pc, #180]	@ (8003600 <HAL_InitTick+0xd0>)
 800354a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800354e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003550:	4b2b      	ldr	r3, [pc, #172]	@ (8003600 <HAL_InitTick+0xd0>)
 8003552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003554:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800355c:	f107 020c 	add.w	r2, r7, #12
 8003560:	f107 0310 	add.w	r3, r7, #16
 8003564:	4611      	mov	r1, r2
 8003566:	4618      	mov	r0, r3
 8003568:	f002 fbee 	bl	8005d48 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800356c:	f002 fbd8 	bl	8005d20 <HAL_RCC_GetPCLK2Freq>
 8003570:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003574:	4a23      	ldr	r2, [pc, #140]	@ (8003604 <HAL_InitTick+0xd4>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	0c9b      	lsrs	r3, r3, #18
 800357c:	3b01      	subs	r3, #1
 800357e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8003580:	4b21      	ldr	r3, [pc, #132]	@ (8003608 <HAL_InitTick+0xd8>)
 8003582:	4a22      	ldr	r2, [pc, #136]	@ (800360c <HAL_InitTick+0xdc>)
 8003584:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8003586:	4b20      	ldr	r3, [pc, #128]	@ (8003608 <HAL_InitTick+0xd8>)
 8003588:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800358c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800358e:	4a1e      	ldr	r2, [pc, #120]	@ (8003608 <HAL_InitTick+0xd8>)
 8003590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003592:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8003594:	4b1c      	ldr	r3, [pc, #112]	@ (8003608 <HAL_InitTick+0xd8>)
 8003596:	2200      	movs	r2, #0
 8003598:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800359a:	4b1b      	ldr	r3, [pc, #108]	@ (8003608 <HAL_InitTick+0xd8>)
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035a0:	4b19      	ldr	r3, [pc, #100]	@ (8003608 <HAL_InitTick+0xd8>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 80035a6:	4818      	ldr	r0, [pc, #96]	@ (8003608 <HAL_InitTick+0xd8>)
 80035a8:	f003 fece 	bl	8007348 <HAL_TIM_Base_Init>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80035b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d11b      	bne.n	80035f2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 80035ba:	4813      	ldr	r0, [pc, #76]	@ (8003608 <HAL_InitTick+0xd8>)
 80035bc:	f003 ff1e 	bl	80073fc <HAL_TIM_Base_Start_IT>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80035c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d111      	bne.n	80035f2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80035ce:	201a      	movs	r0, #26
 80035d0:	f000 f9c0 	bl	8003954 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b0f      	cmp	r3, #15
 80035d8:	d808      	bhi.n	80035ec <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80035da:	2200      	movs	r2, #0
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	201a      	movs	r0, #26
 80035e0:	f000 f99c 	bl	800391c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003610 <HAL_InitTick+0xe0>)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e002      	b.n	80035f2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80035f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3730      	adds	r7, #48	@ 0x30
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800
 8003604:	431bde83 	.word	0x431bde83
 8003608:	20000718 	.word	0x20000718
 800360c:	40014800 	.word	0x40014800
 8003610:	20000094 	.word	0x20000094

08003614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003618:	bf00      	nop
 800361a:	e7fd      	b.n	8003618 <NMI_Handler+0x4>

0800361c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003620:	bf00      	nop
 8003622:	e7fd      	b.n	8003620 <HardFault_Handler+0x4>

08003624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003628:	bf00      	nop
 800362a:	e7fd      	b.n	8003628 <MemManage_Handler+0x4>

0800362c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003630:	bf00      	nop
 8003632:	e7fd      	b.n	8003630 <BusFault_Handler+0x4>

08003634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003638:	bf00      	nop
 800363a:	e7fd      	b.n	8003638 <UsageFault_Handler+0x4>

0800363c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003640:	bf00      	nop
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003650:	4802      	ldr	r0, [pc, #8]	@ (800365c <DMA1_Stream3_IRQHandler+0x10>)
 8003652:	f000 fab5 	bl	8003bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	200006b8 	.word	0x200006b8

08003660 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003664:	4802      	ldr	r0, [pc, #8]	@ (8003670 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003666:	f003 ff2b 	bl	80074c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000718 	.word	0x20000718

08003674 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003678:	4802      	ldr	r0, [pc, #8]	@ (8003684 <SPI2_IRQHandler+0x10>)
 800367a:	f003 fa9b 	bl	8006bb4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	200005a0 	.word	0x200005a0

08003688 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800368c:	4802      	ldr	r0, [pc, #8]	@ (8003698 <DMA2_Stream0_IRQHandler+0x10>)
 800368e:	f000 fa97 	bl	8003bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	200005f8 	.word	0x200005f8

0800369c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80036a0:	4802      	ldr	r0, [pc, #8]	@ (80036ac <DMA2_Stream2_IRQHandler+0x10>)
 80036a2:	f000 fa8d 	bl	8003bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000658 	.word	0x20000658

080036b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036b4:	4b06      	ldr	r3, [pc, #24]	@ (80036d0 <SystemInit+0x20>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ba:	4a05      	ldr	r2, [pc, #20]	@ (80036d0 <SystemInit+0x20>)
 80036bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036c4:	bf00      	nop
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80036d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800370c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036d8:	f7ff ffea 	bl	80036b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036dc:	480c      	ldr	r0, [pc, #48]	@ (8003710 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036de:	490d      	ldr	r1, [pc, #52]	@ (8003714 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003718 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036e4:	e002      	b.n	80036ec <LoopCopyDataInit>

080036e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ea:	3304      	adds	r3, #4

080036ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036f0:	d3f9      	bcc.n	80036e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036f2:	4a0a      	ldr	r2, [pc, #40]	@ (800371c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003720 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036f8:	e001      	b.n	80036fe <LoopFillZerobss>

080036fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036fc:	3204      	adds	r2, #4

080036fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003700:	d3fb      	bcc.n	80036fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003702:	f005 fb05 	bl	8008d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003706:	f7ff fc9b 	bl	8003040 <main>
  bx  lr    
 800370a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800370c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003714:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8003718:	080099a0 	.word	0x080099a0
  ldr r2, =_sbss
 800371c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8003720:	200045f0 	.word	0x200045f0

08003724 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003724:	e7fe      	b.n	8003724 <ADC_IRQHandler>
	...

08003728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800372c:	4b0e      	ldr	r3, [pc, #56]	@ (8003768 <HAL_Init+0x40>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a0d      	ldr	r2, [pc, #52]	@ (8003768 <HAL_Init+0x40>)
 8003732:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003736:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003738:	4b0b      	ldr	r3, [pc, #44]	@ (8003768 <HAL_Init+0x40>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0a      	ldr	r2, [pc, #40]	@ (8003768 <HAL_Init+0x40>)
 800373e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003742:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003744:	4b08      	ldr	r3, [pc, #32]	@ (8003768 <HAL_Init+0x40>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a07      	ldr	r2, [pc, #28]	@ (8003768 <HAL_Init+0x40>)
 800374a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800374e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003750:	2003      	movs	r0, #3
 8003752:	f000 f8d8 	bl	8003906 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003756:	200f      	movs	r0, #15
 8003758:	f7ff feea 	bl	8003530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800375c:	f7ff febc 	bl	80034d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40023c00 	.word	0x40023c00

0800376c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003770:	4b06      	ldr	r3, [pc, #24]	@ (800378c <HAL_IncTick+0x20>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <HAL_IncTick+0x24>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4413      	add	r3, r2
 800377c:	4a04      	ldr	r2, [pc, #16]	@ (8003790 <HAL_IncTick+0x24>)
 800377e:	6013      	str	r3, [r2, #0]
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	20000098 	.word	0x20000098
 8003790:	20000760 	.word	0x20000760

08003794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return uwTick;
 8003798:	4b03      	ldr	r3, [pc, #12]	@ (80037a8 <HAL_GetTick+0x14>)
 800379a:	681b      	ldr	r3, [r3, #0]
}
 800379c:	4618      	mov	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20000760 	.word	0x20000760

080037ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037bc:	4b0c      	ldr	r3, [pc, #48]	@ (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037c8:	4013      	ands	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037de:	4a04      	ldr	r2, [pc, #16]	@ (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	60d3      	str	r3, [r2, #12]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f8:	4b04      	ldr	r3, [pc, #16]	@ (800380c <__NVIC_GetPriorityGrouping+0x18>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	f003 0307 	and.w	r3, r3, #7
}
 8003802:	4618      	mov	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	db0b      	blt.n	800383a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	f003 021f 	and.w	r2, r3, #31
 8003828:	4907      	ldr	r1, [pc, #28]	@ (8003848 <__NVIC_EnableIRQ+0x38>)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	2001      	movs	r0, #1
 8003832:	fa00 f202 	lsl.w	r2, r0, r2
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	e000e100 	.word	0xe000e100

0800384c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	6039      	str	r1, [r7, #0]
 8003856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385c:	2b00      	cmp	r3, #0
 800385e:	db0a      	blt.n	8003876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	490c      	ldr	r1, [pc, #48]	@ (8003898 <__NVIC_SetPriority+0x4c>)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	0112      	lsls	r2, r2, #4
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	440b      	add	r3, r1
 8003870:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003874:	e00a      	b.n	800388c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	b2da      	uxtb	r2, r3
 800387a:	4908      	ldr	r1, [pc, #32]	@ (800389c <__NVIC_SetPriority+0x50>)
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	3b04      	subs	r3, #4
 8003884:	0112      	lsls	r2, r2, #4
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	440b      	add	r3, r1
 800388a:	761a      	strb	r2, [r3, #24]
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000e100 	.word	0xe000e100
 800389c:	e000ed00 	.word	0xe000ed00

080038a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	@ 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f1c3 0307 	rsb	r3, r3, #7
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	bf28      	it	cs
 80038be:	2304      	movcs	r3, #4
 80038c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3304      	adds	r3, #4
 80038c6:	2b06      	cmp	r3, #6
 80038c8:	d902      	bls.n	80038d0 <NVIC_EncodePriority+0x30>
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	3b03      	subs	r3, #3
 80038ce:	e000      	b.n	80038d2 <NVIC_EncodePriority+0x32>
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d4:	f04f 32ff 	mov.w	r2, #4294967295
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43da      	mvns	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	401a      	ands	r2, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e8:	f04f 31ff 	mov.w	r1, #4294967295
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	fa01 f303 	lsl.w	r3, r1, r3
 80038f2:	43d9      	mvns	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f8:	4313      	orrs	r3, r2
         );
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3724      	adds	r7, #36	@ 0x24
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff ff4c 	bl	80037ac <__NVIC_SetPriorityGrouping>
}
 8003914:	bf00      	nop
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800392e:	f7ff ff61 	bl	80037f4 <__NVIC_GetPriorityGrouping>
 8003932:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	6978      	ldr	r0, [r7, #20]
 800393a:	f7ff ffb1 	bl	80038a0 <NVIC_EncodePriority>
 800393e:	4602      	mov	r2, r0
 8003940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff ff80 	bl	800384c <__NVIC_SetPriority>
}
 800394c:	bf00      	nop
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff ff54 	bl	8003810 <__NVIC_EnableIRQ>
}
 8003968:	bf00      	nop
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800397c:	f7ff ff0a 	bl	8003794 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e099      	b.n	8003ac0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ac:	e00f      	b.n	80039ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039ae:	f7ff fef1 	bl	8003794 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b05      	cmp	r3, #5
 80039ba:	d908      	bls.n	80039ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2203      	movs	r2, #3
 80039c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e078      	b.n	8003ac0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e8      	bne.n	80039ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	4b38      	ldr	r3, [pc, #224]	@ (8003ac8 <HAL_DMA_Init+0x158>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d107      	bne.n	8003a38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a30:	4313      	orrs	r3, r2
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f023 0307 	bic.w	r3, r3, #7
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d117      	bne.n	8003a92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00e      	beq.n	8003a92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fa91 	bl	8003f9c <DMA_CheckFifoParam>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2240      	movs	r2, #64	@ 0x40
 8003a84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e016      	b.n	8003ac0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fa48 	bl	8003f30 <DMA_CalcBaseAndBitshift>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa8:	223f      	movs	r2, #63	@ 0x3f
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	f010803f 	.word	0xf010803f

08003acc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_DMA_Start_IT+0x26>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e040      	b.n	8003b74 <HAL_DMA_Start_IT+0xa8>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d12f      	bne.n	8003b66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f9da 	bl	8003ed4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b24:	223f      	movs	r2, #63	@ 0x3f
 8003b26:	409a      	lsls	r2, r3
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0216 	orr.w	r2, r2, #22
 8003b3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d007      	beq.n	8003b54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0208 	orr.w	r2, r2, #8
 8003b52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	e005      	b.n	8003b72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d004      	beq.n	8003b9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2280      	movs	r2, #128	@ 0x80
 8003b94:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e00c      	b.n	8003bb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2205      	movs	r2, #5
 8003b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bcc:	4b8e      	ldr	r3, [pc, #568]	@ (8003e08 <HAL_DMA_IRQHandler+0x248>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a8e      	ldr	r2, [pc, #568]	@ (8003e0c <HAL_DMA_IRQHandler+0x24c>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	0a9b      	lsrs	r3, r3, #10
 8003bd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bea:	2208      	movs	r2, #8
 8003bec:	409a      	lsls	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d01a      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d013      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0204 	bic.w	r2, r2, #4
 8003c12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c18:	2208      	movs	r2, #8
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c24:	f043 0201 	orr.w	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c30:	2201      	movs	r2, #1
 8003c32:	409a      	lsls	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d012      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4e:	2201      	movs	r2, #1
 8003c50:	409a      	lsls	r2, r3
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5a:	f043 0202 	orr.w	r2, r3, #2
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c66:	2204      	movs	r2, #4
 8003c68:	409a      	lsls	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d012      	beq.n	8003c98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00b      	beq.n	8003c98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c84:	2204      	movs	r2, #4
 8003c86:	409a      	lsls	r2, r3
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c90:	f043 0204 	orr.w	r2, r3, #4
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c9c:	2210      	movs	r2, #16
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d043      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d03c      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cba:	2210      	movs	r2, #16
 8003cbc:	409a      	lsls	r2, r3
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d018      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d108      	bne.n	8003cf0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d024      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	4798      	blx	r3
 8003cee:	e01f      	b.n	8003d30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01b      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	4798      	blx	r3
 8003d00:	e016      	b.n	8003d30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d107      	bne.n	8003d20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0208 	bic.w	r2, r2, #8
 8003d1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d34:	2220      	movs	r2, #32
 8003d36:	409a      	lsls	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 808f 	beq.w	8003e60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8087 	beq.w	8003e60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d56:	2220      	movs	r2, #32
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b05      	cmp	r3, #5
 8003d68:	d136      	bne.n	8003dd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0216 	bic.w	r2, r2, #22
 8003d78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695a      	ldr	r2, [r3, #20]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d103      	bne.n	8003d9a <HAL_DMA_IRQHandler+0x1da>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d007      	beq.n	8003daa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0208 	bic.w	r2, r2, #8
 8003da8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dae:	223f      	movs	r2, #63	@ 0x3f
 8003db0:	409a      	lsls	r2, r3
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d07e      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	4798      	blx	r3
        }
        return;
 8003dd6:	e079      	b.n	8003ecc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d01d      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10d      	bne.n	8003e10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d031      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	4798      	blx	r3
 8003e04:	e02c      	b.n	8003e60 <HAL_DMA_IRQHandler+0x2a0>
 8003e06:	bf00      	nop
 8003e08:	20000090 	.word	0x20000090
 8003e0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d023      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	4798      	blx	r3
 8003e20:	e01e      	b.n	8003e60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10f      	bne.n	8003e50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0210 	bic.w	r2, r2, #16
 8003e3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d032      	beq.n	8003ece <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d022      	beq.n	8003eba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2205      	movs	r2, #5
 8003e78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0201 	bic.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d307      	bcc.n	8003ea8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f2      	bne.n	8003e8c <HAL_DMA_IRQHandler+0x2cc>
 8003ea6:	e000      	b.n	8003eaa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ea8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	4798      	blx	r3
 8003eca:	e000      	b.n	8003ece <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ecc:	bf00      	nop
    }
  }
}
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ef0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b40      	cmp	r3, #64	@ 0x40
 8003f00:	d108      	bne.n	8003f14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f12:	e007      	b.n	8003f24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	60da      	str	r2, [r3, #12]
}
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	3b10      	subs	r3, #16
 8003f40:	4a14      	ldr	r2, [pc, #80]	@ (8003f94 <DMA_CalcBaseAndBitshift+0x64>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	091b      	lsrs	r3, r3, #4
 8003f48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f4a:	4a13      	ldr	r2, [pc, #76]	@ (8003f98 <DMA_CalcBaseAndBitshift+0x68>)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4413      	add	r3, r2
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d909      	bls.n	8003f72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003f66:	f023 0303 	bic.w	r3, r3, #3
 8003f6a:	1d1a      	adds	r2, r3, #4
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f70:	e007      	b.n	8003f82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	aaaaaaab 	.word	0xaaaaaaab
 8003f98:	08009914 	.word	0x08009914

08003f9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d11f      	bne.n	8003ff6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d856      	bhi.n	800406a <DMA_CheckFifoParam+0xce>
 8003fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc4 <DMA_CheckFifoParam+0x28>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08003fd5 	.word	0x08003fd5
 8003fc8:	08003fe7 	.word	0x08003fe7
 8003fcc:	08003fd5 	.word	0x08003fd5
 8003fd0:	0800406b 	.word	0x0800406b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d046      	beq.n	800406e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe4:	e043      	b.n	800406e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003fee:	d140      	bne.n	8004072 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff4:	e03d      	b.n	8004072 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ffe:	d121      	bne.n	8004044 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b03      	cmp	r3, #3
 8004004:	d837      	bhi.n	8004076 <DMA_CheckFifoParam+0xda>
 8004006:	a201      	add	r2, pc, #4	@ (adr r2, 800400c <DMA_CheckFifoParam+0x70>)
 8004008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400c:	0800401d 	.word	0x0800401d
 8004010:	08004023 	.word	0x08004023
 8004014:	0800401d 	.word	0x0800401d
 8004018:	08004035 	.word	0x08004035
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	73fb      	strb	r3, [r7, #15]
      break;
 8004020:	e030      	b.n	8004084 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004026:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d025      	beq.n	800407a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004032:	e022      	b.n	800407a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004038:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800403c:	d11f      	bne.n	800407e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004042:	e01c      	b.n	800407e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d903      	bls.n	8004052 <DMA_CheckFifoParam+0xb6>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b03      	cmp	r3, #3
 800404e:	d003      	beq.n	8004058 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004050:	e018      	b.n	8004084 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	73fb      	strb	r3, [r7, #15]
      break;
 8004056:	e015      	b.n	8004084 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00e      	beq.n	8004082 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
      break;
 8004068:	e00b      	b.n	8004082 <DMA_CheckFifoParam+0xe6>
      break;
 800406a:	bf00      	nop
 800406c:	e00a      	b.n	8004084 <DMA_CheckFifoParam+0xe8>
      break;
 800406e:	bf00      	nop
 8004070:	e008      	b.n	8004084 <DMA_CheckFifoParam+0xe8>
      break;
 8004072:	bf00      	nop
 8004074:	e006      	b.n	8004084 <DMA_CheckFifoParam+0xe8>
      break;
 8004076:	bf00      	nop
 8004078:	e004      	b.n	8004084 <DMA_CheckFifoParam+0xe8>
      break;
 800407a:	bf00      	nop
 800407c:	e002      	b.n	8004084 <DMA_CheckFifoParam+0xe8>
      break;   
 800407e:	bf00      	nop
 8004080:	e000      	b.n	8004084 <DMA_CheckFifoParam+0xe8>
      break;
 8004082:	bf00      	nop
    }
  } 
  
  return status; 
 8004084:	7bfb      	ldrb	r3, [r7, #15]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop

08004094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004094:	b480      	push	{r7}
 8004096:	b089      	sub	sp, #36	@ 0x24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	e159      	b.n	8004364 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040b0:	2201      	movs	r2, #1
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4013      	ands	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	f040 8148 	bne.w	800435e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d005      	beq.n	80040e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d130      	bne.n	8004148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	2203      	movs	r2, #3
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43db      	mvns	r3, r3
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4013      	ands	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4313      	orrs	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800411c:	2201      	movs	r2, #1
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4013      	ands	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	091b      	lsrs	r3, r3, #4
 8004132:	f003 0201 	and.w	r2, r3, #1
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 0303 	and.w	r3, r3, #3
 8004150:	2b03      	cmp	r3, #3
 8004152:	d017      	beq.n	8004184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	2203      	movs	r2, #3
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	43db      	mvns	r3, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4013      	ands	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	4313      	orrs	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d123      	bne.n	80041d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	08da      	lsrs	r2, r3, #3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3208      	adds	r2, #8
 8004198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800419c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	220f      	movs	r2, #15
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	43db      	mvns	r3, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4013      	ands	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	08da      	lsrs	r2, r3, #3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	3208      	adds	r2, #8
 80041d2:	69b9      	ldr	r1, [r7, #24]
 80041d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	2203      	movs	r2, #3
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	4013      	ands	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f003 0203 	and.w	r2, r3, #3
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4313      	orrs	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 80a2 	beq.w	800435e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	4b57      	ldr	r3, [pc, #348]	@ (800437c <HAL_GPIO_Init+0x2e8>)
 8004220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004222:	4a56      	ldr	r2, [pc, #344]	@ (800437c <HAL_GPIO_Init+0x2e8>)
 8004224:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004228:	6453      	str	r3, [r2, #68]	@ 0x44
 800422a:	4b54      	ldr	r3, [pc, #336]	@ (800437c <HAL_GPIO_Init+0x2e8>)
 800422c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004236:	4a52      	ldr	r2, [pc, #328]	@ (8004380 <HAL_GPIO_Init+0x2ec>)
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	089b      	lsrs	r3, r3, #2
 800423c:	3302      	adds	r3, #2
 800423e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	220f      	movs	r2, #15
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	43db      	mvns	r3, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4013      	ands	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a49      	ldr	r2, [pc, #292]	@ (8004384 <HAL_GPIO_Init+0x2f0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d019      	beq.n	8004296 <HAL_GPIO_Init+0x202>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a48      	ldr	r2, [pc, #288]	@ (8004388 <HAL_GPIO_Init+0x2f4>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <HAL_GPIO_Init+0x1fe>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a47      	ldr	r2, [pc, #284]	@ (800438c <HAL_GPIO_Init+0x2f8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00d      	beq.n	800428e <HAL_GPIO_Init+0x1fa>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a46      	ldr	r2, [pc, #280]	@ (8004390 <HAL_GPIO_Init+0x2fc>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d007      	beq.n	800428a <HAL_GPIO_Init+0x1f6>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a45      	ldr	r2, [pc, #276]	@ (8004394 <HAL_GPIO_Init+0x300>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d101      	bne.n	8004286 <HAL_GPIO_Init+0x1f2>
 8004282:	2304      	movs	r3, #4
 8004284:	e008      	b.n	8004298 <HAL_GPIO_Init+0x204>
 8004286:	2307      	movs	r3, #7
 8004288:	e006      	b.n	8004298 <HAL_GPIO_Init+0x204>
 800428a:	2303      	movs	r3, #3
 800428c:	e004      	b.n	8004298 <HAL_GPIO_Init+0x204>
 800428e:	2302      	movs	r3, #2
 8004290:	e002      	b.n	8004298 <HAL_GPIO_Init+0x204>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <HAL_GPIO_Init+0x204>
 8004296:	2300      	movs	r3, #0
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	f002 0203 	and.w	r2, r2, #3
 800429e:	0092      	lsls	r2, r2, #2
 80042a0:	4093      	lsls	r3, r2
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042a8:	4935      	ldr	r1, [pc, #212]	@ (8004380 <HAL_GPIO_Init+0x2ec>)
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	089b      	lsrs	r3, r3, #2
 80042ae:	3302      	adds	r3, #2
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042b6:	4b38      	ldr	r3, [pc, #224]	@ (8004398 <HAL_GPIO_Init+0x304>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	43db      	mvns	r3, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4013      	ands	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042da:	4a2f      	ldr	r2, [pc, #188]	@ (8004398 <HAL_GPIO_Init+0x304>)
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004398 <HAL_GPIO_Init+0x304>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	43db      	mvns	r3, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4013      	ands	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004304:	4a24      	ldr	r2, [pc, #144]	@ (8004398 <HAL_GPIO_Init+0x304>)
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800430a:	4b23      	ldr	r3, [pc, #140]	@ (8004398 <HAL_GPIO_Init+0x304>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	43db      	mvns	r3, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4013      	ands	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800432e:	4a1a      	ldr	r2, [pc, #104]	@ (8004398 <HAL_GPIO_Init+0x304>)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004334:	4b18      	ldr	r3, [pc, #96]	@ (8004398 <HAL_GPIO_Init+0x304>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	43db      	mvns	r3, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4013      	ands	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004358:	4a0f      	ldr	r2, [pc, #60]	@ (8004398 <HAL_GPIO_Init+0x304>)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	3301      	adds	r3, #1
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	2b0f      	cmp	r3, #15
 8004368:	f67f aea2 	bls.w	80040b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800436c:	bf00      	nop
 800436e:	bf00      	nop
 8004370:	3724      	adds	r7, #36	@ 0x24
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40023800 	.word	0x40023800
 8004380:	40013800 	.word	0x40013800
 8004384:	40020000 	.word	0x40020000
 8004388:	40020400 	.word	0x40020400
 800438c:	40020800 	.word	0x40020800
 8004390:	40020c00 	.word	0x40020c00
 8004394:	40021000 	.word	0x40021000
 8004398:	40013c00 	.word	0x40013c00

0800439c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	807b      	strh	r3, [r7, #2]
 80043a8:	4613      	mov	r3, r2
 80043aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043ac:	787b      	ldrb	r3, [r7, #1]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043b2:	887a      	ldrh	r2, [r7, #2]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043b8:	e003      	b.n	80043c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043ba:	887b      	ldrh	r3, [r7, #2]
 80043bc:	041a      	lsls	r2, r3, #16
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	619a      	str	r2, [r3, #24]
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e12b      	b.n	800463a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fe fdda 	bl	8002fb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2224      	movs	r2, #36	@ 0x24
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0201 	bic.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004422:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004432:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004434:	f001 fc60 	bl	8005cf8 <HAL_RCC_GetPCLK1Freq>
 8004438:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4a81      	ldr	r2, [pc, #516]	@ (8004644 <HAL_I2C_Init+0x274>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d807      	bhi.n	8004454 <HAL_I2C_Init+0x84>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4a80      	ldr	r2, [pc, #512]	@ (8004648 <HAL_I2C_Init+0x278>)
 8004448:	4293      	cmp	r3, r2
 800444a:	bf94      	ite	ls
 800444c:	2301      	movls	r3, #1
 800444e:	2300      	movhi	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	e006      	b.n	8004462 <HAL_I2C_Init+0x92>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4a7d      	ldr	r2, [pc, #500]	@ (800464c <HAL_I2C_Init+0x27c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	bf94      	ite	ls
 800445c:	2301      	movls	r3, #1
 800445e:	2300      	movhi	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e0e7      	b.n	800463a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4a78      	ldr	r2, [pc, #480]	@ (8004650 <HAL_I2C_Init+0x280>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	0c9b      	lsrs	r3, r3, #18
 8004474:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4a6a      	ldr	r2, [pc, #424]	@ (8004644 <HAL_I2C_Init+0x274>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d802      	bhi.n	80044a4 <HAL_I2C_Init+0xd4>
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	3301      	adds	r3, #1
 80044a2:	e009      	b.n	80044b8 <HAL_I2C_Init+0xe8>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80044aa:	fb02 f303 	mul.w	r3, r2, r3
 80044ae:	4a69      	ldr	r2, [pc, #420]	@ (8004654 <HAL_I2C_Init+0x284>)
 80044b0:	fba2 2303 	umull	r2, r3, r2, r3
 80044b4:	099b      	lsrs	r3, r3, #6
 80044b6:	3301      	adds	r3, #1
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	430b      	orrs	r3, r1
 80044be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80044ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	495c      	ldr	r1, [pc, #368]	@ (8004644 <HAL_I2C_Init+0x274>)
 80044d4:	428b      	cmp	r3, r1
 80044d6:	d819      	bhi.n	800450c <HAL_I2C_Init+0x13c>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	1e59      	subs	r1, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80044e6:	1c59      	adds	r1, r3, #1
 80044e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80044ec:	400b      	ands	r3, r1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_I2C_Init+0x138>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1e59      	subs	r1, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004500:	3301      	adds	r3, #1
 8004502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004506:	e051      	b.n	80045ac <HAL_I2C_Init+0x1dc>
 8004508:	2304      	movs	r3, #4
 800450a:	e04f      	b.n	80045ac <HAL_I2C_Init+0x1dc>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d111      	bne.n	8004538 <HAL_I2C_Init+0x168>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	1e58      	subs	r0, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6859      	ldr	r1, [r3, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	440b      	add	r3, r1
 8004522:	fbb0 f3f3 	udiv	r3, r0, r3
 8004526:	3301      	adds	r3, #1
 8004528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800452c:	2b00      	cmp	r3, #0
 800452e:	bf0c      	ite	eq
 8004530:	2301      	moveq	r3, #1
 8004532:	2300      	movne	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e012      	b.n	800455e <HAL_I2C_Init+0x18e>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	1e58      	subs	r0, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6859      	ldr	r1, [r3, #4]
 8004540:	460b      	mov	r3, r1
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	0099      	lsls	r1, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	fbb0 f3f3 	udiv	r3, r0, r3
 800454e:	3301      	adds	r3, #1
 8004550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004554:	2b00      	cmp	r3, #0
 8004556:	bf0c      	ite	eq
 8004558:	2301      	moveq	r3, #1
 800455a:	2300      	movne	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_I2C_Init+0x196>
 8004562:	2301      	movs	r3, #1
 8004564:	e022      	b.n	80045ac <HAL_I2C_Init+0x1dc>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10e      	bne.n	800458c <HAL_I2C_Init+0x1bc>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1e58      	subs	r0, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6859      	ldr	r1, [r3, #4]
 8004576:	460b      	mov	r3, r1
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	440b      	add	r3, r1
 800457c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004580:	3301      	adds	r3, #1
 8004582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800458a:	e00f      	b.n	80045ac <HAL_I2C_Init+0x1dc>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	1e58      	subs	r0, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6859      	ldr	r1, [r3, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	0099      	lsls	r1, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	fbb0 f3f3 	udiv	r3, r0, r3
 80045a2:	3301      	adds	r3, #1
 80045a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	6809      	ldr	r1, [r1, #0]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69da      	ldr	r2, [r3, #28]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80045da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6911      	ldr	r1, [r2, #16]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	68d2      	ldr	r2, [r2, #12]
 80045e6:	4311      	orrs	r1, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	430b      	orrs	r3, r1
 80045ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695a      	ldr	r2, [r3, #20]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	000186a0 	.word	0x000186a0
 8004648:	001e847f 	.word	0x001e847f
 800464c:	003d08ff 	.word	0x003d08ff
 8004650:	431bde83 	.word	0x431bde83
 8004654:	10624dd3 	.word	0x10624dd3

08004658 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af02      	add	r7, sp, #8
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	4608      	mov	r0, r1
 8004662:	4611      	mov	r1, r2
 8004664:	461a      	mov	r2, r3
 8004666:	4603      	mov	r3, r0
 8004668:	817b      	strh	r3, [r7, #10]
 800466a:	460b      	mov	r3, r1
 800466c:	813b      	strh	r3, [r7, #8]
 800466e:	4613      	mov	r3, r2
 8004670:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004672:	f7ff f88f 	bl	8003794 <HAL_GetTick>
 8004676:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b20      	cmp	r3, #32
 8004682:	f040 80d9 	bne.w	8004838 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	2319      	movs	r3, #25
 800468c:	2201      	movs	r2, #1
 800468e:	496d      	ldr	r1, [pc, #436]	@ (8004844 <HAL_I2C_Mem_Write+0x1ec>)
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 fc8b 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800469c:	2302      	movs	r3, #2
 800469e:	e0cc      	b.n	800483a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_I2C_Mem_Write+0x56>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e0c5      	b.n	800483a <HAL_I2C_Mem_Write+0x1e2>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d007      	beq.n	80046d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2221      	movs	r2, #33	@ 0x21
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2240      	movs	r2, #64	@ 0x40
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a3a      	ldr	r2, [r7, #32]
 80046fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004704:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4a4d      	ldr	r2, [pc, #308]	@ (8004848 <HAL_I2C_Mem_Write+0x1f0>)
 8004714:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004716:	88f8      	ldrh	r0, [r7, #6]
 8004718:	893a      	ldrh	r2, [r7, #8]
 800471a:	8979      	ldrh	r1, [r7, #10]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	9301      	str	r3, [sp, #4]
 8004720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	4603      	mov	r3, r0
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 fac2 	bl	8004cb0 <I2C_RequestMemoryWrite>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d052      	beq.n	80047d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e081      	b.n	800483a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 fd50 	bl	80051e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00d      	beq.n	8004762 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	2b04      	cmp	r3, #4
 800474c:	d107      	bne.n	800475e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800475c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e06b      	b.n	800483a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004766:	781a      	ldrb	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004788:	b29b      	uxth	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b04      	cmp	r3, #4
 800479e:	d11b      	bne.n	80047d8 <HAL_I2C_Mem_Write+0x180>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d017      	beq.n	80047d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ac:	781a      	ldrb	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1aa      	bne.n	8004736 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 fd43 	bl	8005270 <I2C_WaitOnBTFFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00d      	beq.n	800480c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d107      	bne.n	8004808 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004806:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e016      	b.n	800483a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800481a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	e000      	b.n	800483a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
  }
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	00100002 	.word	0x00100002
 8004848:	ffff0000 	.word	0xffff0000

0800484c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08c      	sub	sp, #48	@ 0x30
 8004850:	af02      	add	r7, sp, #8
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	4608      	mov	r0, r1
 8004856:	4611      	mov	r1, r2
 8004858:	461a      	mov	r2, r3
 800485a:	4603      	mov	r3, r0
 800485c:	817b      	strh	r3, [r7, #10]
 800485e:	460b      	mov	r3, r1
 8004860:	813b      	strh	r3, [r7, #8]
 8004862:	4613      	mov	r3, r2
 8004864:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004866:	f7fe ff95 	bl	8003794 <HAL_GetTick>
 800486a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b20      	cmp	r3, #32
 8004876:	f040 8214 	bne.w	8004ca2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800487a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	2319      	movs	r3, #25
 8004880:	2201      	movs	r2, #1
 8004882:	497b      	ldr	r1, [pc, #492]	@ (8004a70 <HAL_I2C_Mem_Read+0x224>)
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 fb91 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004890:	2302      	movs	r3, #2
 8004892:	e207      	b.n	8004ca4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_I2C_Mem_Read+0x56>
 800489e:	2302      	movs	r3, #2
 80048a0:	e200      	b.n	8004ca4 <HAL_I2C_Mem_Read+0x458>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d007      	beq.n	80048c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2222      	movs	r2, #34	@ 0x22
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2240      	movs	r2, #64	@ 0x40
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80048f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4a5b      	ldr	r2, [pc, #364]	@ (8004a74 <HAL_I2C_Mem_Read+0x228>)
 8004908:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800490a:	88f8      	ldrh	r0, [r7, #6]
 800490c:	893a      	ldrh	r2, [r7, #8]
 800490e:	8979      	ldrh	r1, [r7, #10]
 8004910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004912:	9301      	str	r3, [sp, #4]
 8004914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	4603      	mov	r3, r0
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 fa5e 	bl	8004ddc <I2C_RequestMemoryRead>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e1bc      	b.n	8004ca4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800492e:	2b00      	cmp	r3, #0
 8004930:	d113      	bne.n	800495a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004932:	2300      	movs	r3, #0
 8004934:	623b      	str	r3, [r7, #32]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	623b      	str	r3, [r7, #32]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	623b      	str	r3, [r7, #32]
 8004946:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	e190      	b.n	8004c7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800495e:	2b01      	cmp	r3, #1
 8004960:	d11b      	bne.n	800499a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004970:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	e170      	b.n	8004c7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d11b      	bne.n	80049da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c2:	2300      	movs	r3, #0
 80049c4:	61bb      	str	r3, [r7, #24]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	61bb      	str	r3, [r7, #24]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	e150      	b.n	8004c7c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049da:	2300      	movs	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80049f0:	e144      	b.n	8004c7c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	f200 80f1 	bhi.w	8004bde <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d123      	bne.n	8004a4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fc79 	bl	8005300 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e145      	b.n	8004ca4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691a      	ldr	r2, [r3, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a4a:	e117      	b.n	8004c7c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d14e      	bne.n	8004af2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	4906      	ldr	r1, [pc, #24]	@ (8004a78 <HAL_I2C_Mem_Read+0x22c>)
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 faa4 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d008      	beq.n	8004a7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e11a      	b.n	8004ca4 <HAL_I2C_Mem_Read+0x458>
 8004a6e:	bf00      	nop
 8004a70:	00100002 	.word	0x00100002
 8004a74:	ffff0000 	.word	0xffff0000
 8004a78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004af0:	e0c4      	b.n	8004c7c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af8:	2200      	movs	r2, #0
 8004afa:	496c      	ldr	r1, [pc, #432]	@ (8004cac <HAL_I2C_Mem_Read+0x460>)
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 fa55 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0cb      	b.n	8004ca4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691a      	ldr	r2, [r3, #16]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b54:	2200      	movs	r2, #0
 8004b56:	4955      	ldr	r1, [pc, #340]	@ (8004cac <HAL_I2C_Mem_Read+0x460>)
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fa27 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e09d      	b.n	8004ca4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004bdc:	e04e      	b.n	8004c7c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fb8c 	bl	8005300 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e058      	b.n	8004ca4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d124      	bne.n	8004c7c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d107      	bne.n	8004c4a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c48:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c66:	3b01      	subs	r3, #1
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f47f aeb6 	bne.w	80049f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e000      	b.n	8004ca4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004ca2:	2302      	movs	r3, #2
  }
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3728      	adds	r7, #40	@ 0x28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	00010004 	.word	0x00010004

08004cb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	4608      	mov	r0, r1
 8004cba:	4611      	mov	r1, r2
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	817b      	strh	r3, [r7, #10]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	813b      	strh	r3, [r7, #8]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f960 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00d      	beq.n	8004d0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d00:	d103      	bne.n	8004d0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e05f      	b.n	8004dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d0e:	897b      	ldrh	r3, [r7, #10]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	6a3a      	ldr	r2, [r7, #32]
 8004d22:	492d      	ldr	r1, [pc, #180]	@ (8004dd8 <I2C_RequestMemoryWrite+0x128>)
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 f9bb 	bl	80050a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e04c      	b.n	8004dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d34:	2300      	movs	r3, #0
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d4c:	6a39      	ldr	r1, [r7, #32]
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 fa46 	bl	80051e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00d      	beq.n	8004d76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d107      	bne.n	8004d72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e02b      	b.n	8004dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d105      	bne.n	8004d88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d7c:	893b      	ldrh	r3, [r7, #8]
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	611a      	str	r2, [r3, #16]
 8004d86:	e021      	b.n	8004dcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d88:	893b      	ldrh	r3, [r7, #8]
 8004d8a:	0a1b      	lsrs	r3, r3, #8
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d98:	6a39      	ldr	r1, [r7, #32]
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 fa20 	bl	80051e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00d      	beq.n	8004dc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d107      	bne.n	8004dbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e005      	b.n	8004dce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dc2:	893b      	ldrh	r3, [r7, #8]
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	00010002 	.word	0x00010002

08004ddc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	4608      	mov	r0, r1
 8004de6:	4611      	mov	r1, r2
 8004de8:	461a      	mov	r2, r3
 8004dea:	4603      	mov	r3, r0
 8004dec:	817b      	strh	r3, [r7, #10]
 8004dee:	460b      	mov	r3, r1
 8004df0:	813b      	strh	r3, [r7, #8]
 8004df2:	4613      	mov	r3, r2
 8004df4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f8c2 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00d      	beq.n	8004e4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e3c:	d103      	bne.n	8004e46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e0aa      	b.n	8004fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e4a:	897b      	ldrh	r3, [r7, #10]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	461a      	mov	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	6a3a      	ldr	r2, [r7, #32]
 8004e5e:	4952      	ldr	r1, [pc, #328]	@ (8004fa8 <I2C_RequestMemoryRead+0x1cc>)
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 f91d 	bl	80050a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e097      	b.n	8004fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e88:	6a39      	ldr	r1, [r7, #32]
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 f9a8 	bl	80051e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00d      	beq.n	8004eb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d107      	bne.n	8004eae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e076      	b.n	8004fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004eb2:	88fb      	ldrh	r3, [r7, #6]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d105      	bne.n	8004ec4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004eb8:	893b      	ldrh	r3, [r7, #8]
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	611a      	str	r2, [r3, #16]
 8004ec2:	e021      	b.n	8004f08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ec4:	893b      	ldrh	r3, [r7, #8]
 8004ec6:	0a1b      	lsrs	r3, r3, #8
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ed4:	6a39      	ldr	r1, [r7, #32]
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f982 	bl	80051e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00d      	beq.n	8004efe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d107      	bne.n	8004efa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ef8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e050      	b.n	8004fa0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004efe:	893b      	ldrh	r3, [r7, #8]
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f0a:	6a39      	ldr	r1, [r7, #32]
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f967 	bl	80051e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00d      	beq.n	8004f34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d107      	bne.n	8004f30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e035      	b.n	8004fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f82b 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00d      	beq.n	8004f78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f6a:	d103      	bne.n	8004f74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e013      	b.n	8004fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f78:	897b      	ldrh	r3, [r7, #10]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8a:	6a3a      	ldr	r2, [r7, #32]
 8004f8c:	4906      	ldr	r1, [pc, #24]	@ (8004fa8 <I2C_RequestMemoryRead+0x1cc>)
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f886 	bl	80050a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	00010002 	.word	0x00010002

08004fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fbc:	e048      	b.n	8005050 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc4:	d044      	beq.n	8005050 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc6:	f7fe fbe5 	bl	8003794 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d302      	bcc.n	8004fdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d139      	bne.n	8005050 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	0c1b      	lsrs	r3, r3, #16
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d10d      	bne.n	8005002 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	43da      	mvns	r2, r3
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	bf0c      	ite	eq
 8004ff8:	2301      	moveq	r3, #1
 8004ffa:	2300      	movne	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	461a      	mov	r2, r3
 8005000:	e00c      	b.n	800501c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	43da      	mvns	r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4013      	ands	r3, r2
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	bf0c      	ite	eq
 8005014:	2301      	moveq	r3, #1
 8005016:	2300      	movne	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	461a      	mov	r2, r3
 800501c:	79fb      	ldrb	r3, [r7, #7]
 800501e:	429a      	cmp	r2, r3
 8005020:	d116      	bne.n	8005050 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503c:	f043 0220 	orr.w	r2, r3, #32
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e023      	b.n	8005098 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	0c1b      	lsrs	r3, r3, #16
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b01      	cmp	r3, #1
 8005058:	d10d      	bne.n	8005076 <I2C_WaitOnFlagUntilTimeout+0xca>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	43da      	mvns	r2, r3
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	4013      	ands	r3, r2
 8005066:	b29b      	uxth	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	bf0c      	ite	eq
 800506c:	2301      	moveq	r3, #1
 800506e:	2300      	movne	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	461a      	mov	r2, r3
 8005074:	e00c      	b.n	8005090 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	43da      	mvns	r2, r3
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	4013      	ands	r3, r2
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	bf0c      	ite	eq
 8005088:	2301      	moveq	r3, #1
 800508a:	2300      	movne	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	461a      	mov	r2, r3
 8005090:	79fb      	ldrb	r3, [r7, #7]
 8005092:	429a      	cmp	r2, r3
 8005094:	d093      	beq.n	8004fbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050ae:	e071      	b.n	8005194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050be:	d123      	bne.n	8005108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	f043 0204 	orr.w	r2, r3, #4
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e067      	b.n	80051d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510e:	d041      	beq.n	8005194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005110:	f7fe fb40 	bl	8003794 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	429a      	cmp	r2, r3
 800511e:	d302      	bcc.n	8005126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d136      	bne.n	8005194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	d10c      	bne.n	800514a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	43da      	mvns	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4013      	ands	r3, r2
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	bf14      	ite	ne
 8005142:	2301      	movne	r3, #1
 8005144:	2300      	moveq	r3, #0
 8005146:	b2db      	uxtb	r3, r3
 8005148:	e00b      	b.n	8005162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	43da      	mvns	r2, r3
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	4013      	ands	r3, r2
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	bf14      	ite	ne
 800515c:	2301      	movne	r3, #1
 800515e:	2300      	moveq	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d016      	beq.n	8005194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005180:	f043 0220 	orr.w	r2, r3, #32
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e021      	b.n	80051d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	0c1b      	lsrs	r3, r3, #16
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b01      	cmp	r3, #1
 800519c:	d10c      	bne.n	80051b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	43da      	mvns	r2, r3
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4013      	ands	r3, r2
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	bf14      	ite	ne
 80051b0:	2301      	movne	r3, #1
 80051b2:	2300      	moveq	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	e00b      	b.n	80051d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	43da      	mvns	r2, r3
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4013      	ands	r3, r2
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	bf14      	ite	ne
 80051ca:	2301      	movne	r3, #1
 80051cc:	2300      	moveq	r3, #0
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f47f af6d 	bne.w	80050b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051ec:	e034      	b.n	8005258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f8e3 	bl	80053ba <I2C_IsAcknowledgeFailed>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e034      	b.n	8005268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005204:	d028      	beq.n	8005258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005206:	f7fe fac5 	bl	8003794 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	429a      	cmp	r2, r3
 8005214:	d302      	bcc.n	800521c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d11d      	bne.n	8005258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005226:	2b80      	cmp	r3, #128	@ 0x80
 8005228:	d016      	beq.n	8005258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005244:	f043 0220 	orr.w	r2, r3, #32
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e007      	b.n	8005268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005262:	2b80      	cmp	r3, #128	@ 0x80
 8005264:	d1c3      	bne.n	80051ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800527c:	e034      	b.n	80052e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 f89b 	bl	80053ba <I2C_IsAcknowledgeFailed>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e034      	b.n	80052f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005294:	d028      	beq.n	80052e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005296:	f7fe fa7d 	bl	8003794 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d302      	bcc.n	80052ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d11d      	bne.n	80052e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	f003 0304 	and.w	r3, r3, #4
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d016      	beq.n	80052e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d4:	f043 0220 	orr.w	r2, r3, #32
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e007      	b.n	80052f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d1c3      	bne.n	800527e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800530c:	e049      	b.n	80053a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	f003 0310 	and.w	r3, r3, #16
 8005318:	2b10      	cmp	r3, #16
 800531a:	d119      	bne.n	8005350 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0210 	mvn.w	r2, #16
 8005324:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e030      	b.n	80053b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005350:	f7fe fa20 	bl	8003794 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	429a      	cmp	r2, r3
 800535e:	d302      	bcc.n	8005366 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d11d      	bne.n	80053a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005370:	2b40      	cmp	r3, #64	@ 0x40
 8005372:	d016      	beq.n	80053a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538e:	f043 0220 	orr.w	r2, r3, #32
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e007      	b.n	80053b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ac:	2b40      	cmp	r3, #64	@ 0x40
 80053ae:	d1ae      	bne.n	800530e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053d0:	d11b      	bne.n	800540a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f6:	f043 0204 	orr.w	r2, r3, #4
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e267      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d075      	beq.n	8005522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005436:	4b88      	ldr	r3, [pc, #544]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 030c 	and.w	r3, r3, #12
 800543e:	2b04      	cmp	r3, #4
 8005440:	d00c      	beq.n	800545c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005442:	4b85      	ldr	r3, [pc, #532]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800544a:	2b08      	cmp	r3, #8
 800544c:	d112      	bne.n	8005474 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800544e:	4b82      	ldr	r3, [pc, #520]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005456:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800545a:	d10b      	bne.n	8005474 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800545c:	4b7e      	ldr	r3, [pc, #504]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d05b      	beq.n	8005520 <HAL_RCC_OscConfig+0x108>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d157      	bne.n	8005520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e242      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800547c:	d106      	bne.n	800548c <HAL_RCC_OscConfig+0x74>
 800547e:	4b76      	ldr	r3, [pc, #472]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a75      	ldr	r2, [pc, #468]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 8005484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	e01d      	b.n	80054c8 <HAL_RCC_OscConfig+0xb0>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005494:	d10c      	bne.n	80054b0 <HAL_RCC_OscConfig+0x98>
 8005496:	4b70      	ldr	r3, [pc, #448]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a6f      	ldr	r2, [pc, #444]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 800549c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a6c      	ldr	r2, [pc, #432]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 80054a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	e00b      	b.n	80054c8 <HAL_RCC_OscConfig+0xb0>
 80054b0:	4b69      	ldr	r3, [pc, #420]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a68      	ldr	r2, [pc, #416]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 80054b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	4b66      	ldr	r3, [pc, #408]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a65      	ldr	r2, [pc, #404]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 80054c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d013      	beq.n	80054f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d0:	f7fe f960 	bl	8003794 <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054d8:	f7fe f95c 	bl	8003794 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b64      	cmp	r3, #100	@ 0x64
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e207      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0f0      	beq.n	80054d8 <HAL_RCC_OscConfig+0xc0>
 80054f6:	e014      	b.n	8005522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f8:	f7fe f94c 	bl	8003794 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005500:	f7fe f948 	bl	8003794 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b64      	cmp	r3, #100	@ 0x64
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e1f3      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005512:	4b51      	ldr	r3, [pc, #324]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f0      	bne.n	8005500 <HAL_RCC_OscConfig+0xe8>
 800551e:	e000      	b.n	8005522 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d063      	beq.n	80055f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800552e:	4b4a      	ldr	r3, [pc, #296]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 030c 	and.w	r3, r3, #12
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00b      	beq.n	8005552 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800553a:	4b47      	ldr	r3, [pc, #284]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005542:	2b08      	cmp	r3, #8
 8005544:	d11c      	bne.n	8005580 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005546:	4b44      	ldr	r3, [pc, #272]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d116      	bne.n	8005580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005552:	4b41      	ldr	r3, [pc, #260]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d005      	beq.n	800556a <HAL_RCC_OscConfig+0x152>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d001      	beq.n	800556a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e1c7      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800556a:	4b3b      	ldr	r3, [pc, #236]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	4937      	ldr	r1, [pc, #220]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 800557a:	4313      	orrs	r3, r2
 800557c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800557e:	e03a      	b.n	80055f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d020      	beq.n	80055ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005588:	4b34      	ldr	r3, [pc, #208]	@ (800565c <HAL_RCC_OscConfig+0x244>)
 800558a:	2201      	movs	r2, #1
 800558c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558e:	f7fe f901 	bl	8003794 <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005596:	f7fe f8fd 	bl	8003794 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e1a8      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0f0      	beq.n	8005596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b4:	4b28      	ldr	r3, [pc, #160]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	4925      	ldr	r1, [pc, #148]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	600b      	str	r3, [r1, #0]
 80055c8:	e015      	b.n	80055f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ca:	4b24      	ldr	r3, [pc, #144]	@ (800565c <HAL_RCC_OscConfig+0x244>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d0:	f7fe f8e0 	bl	8003794 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055d8:	f7fe f8dc 	bl	8003794 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e187      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f0      	bne.n	80055d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0308 	and.w	r3, r3, #8
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d036      	beq.n	8005670 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d016      	beq.n	8005638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800560a:	4b15      	ldr	r3, [pc, #84]	@ (8005660 <HAL_RCC_OscConfig+0x248>)
 800560c:	2201      	movs	r2, #1
 800560e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005610:	f7fe f8c0 	bl	8003794 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005618:	f7fe f8bc 	bl	8003794 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e167      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800562a:	4b0b      	ldr	r3, [pc, #44]	@ (8005658 <HAL_RCC_OscConfig+0x240>)
 800562c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0f0      	beq.n	8005618 <HAL_RCC_OscConfig+0x200>
 8005636:	e01b      	b.n	8005670 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005638:	4b09      	ldr	r3, [pc, #36]	@ (8005660 <HAL_RCC_OscConfig+0x248>)
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800563e:	f7fe f8a9 	bl	8003794 <HAL_GetTick>
 8005642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005644:	e00e      	b.n	8005664 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005646:	f7fe f8a5 	bl	8003794 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d907      	bls.n	8005664 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e150      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
 8005658:	40023800 	.word	0x40023800
 800565c:	42470000 	.word	0x42470000
 8005660:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005664:	4b88      	ldr	r3, [pc, #544]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 8005666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1ea      	bne.n	8005646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 8097 	beq.w	80057ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800567e:	2300      	movs	r3, #0
 8005680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005682:	4b81      	ldr	r3, [pc, #516]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 8005684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10f      	bne.n	80056ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	4b7d      	ldr	r3, [pc, #500]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	4a7c      	ldr	r2, [pc, #496]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 8005698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800569c:	6413      	str	r3, [r2, #64]	@ 0x40
 800569e:	4b7a      	ldr	r3, [pc, #488]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056a6:	60bb      	str	r3, [r7, #8]
 80056a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056aa:	2301      	movs	r3, #1
 80056ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ae:	4b77      	ldr	r3, [pc, #476]	@ (800588c <HAL_RCC_OscConfig+0x474>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d118      	bne.n	80056ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056ba:	4b74      	ldr	r3, [pc, #464]	@ (800588c <HAL_RCC_OscConfig+0x474>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a73      	ldr	r2, [pc, #460]	@ (800588c <HAL_RCC_OscConfig+0x474>)
 80056c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c6:	f7fe f865 	bl	8003794 <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056cc:	e008      	b.n	80056e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ce:	f7fe f861 	bl	8003794 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d901      	bls.n	80056e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e10c      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e0:	4b6a      	ldr	r3, [pc, #424]	@ (800588c <HAL_RCC_OscConfig+0x474>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0f0      	beq.n	80056ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d106      	bne.n	8005702 <HAL_RCC_OscConfig+0x2ea>
 80056f4:	4b64      	ldr	r3, [pc, #400]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 80056f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f8:	4a63      	ldr	r2, [pc, #396]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 80056fa:	f043 0301 	orr.w	r3, r3, #1
 80056fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005700:	e01c      	b.n	800573c <HAL_RCC_OscConfig+0x324>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	2b05      	cmp	r3, #5
 8005708:	d10c      	bne.n	8005724 <HAL_RCC_OscConfig+0x30c>
 800570a:	4b5f      	ldr	r3, [pc, #380]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 800570c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800570e:	4a5e      	ldr	r2, [pc, #376]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 8005710:	f043 0304 	orr.w	r3, r3, #4
 8005714:	6713      	str	r3, [r2, #112]	@ 0x70
 8005716:	4b5c      	ldr	r3, [pc, #368]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 8005718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800571a:	4a5b      	ldr	r2, [pc, #364]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 800571c:	f043 0301 	orr.w	r3, r3, #1
 8005720:	6713      	str	r3, [r2, #112]	@ 0x70
 8005722:	e00b      	b.n	800573c <HAL_RCC_OscConfig+0x324>
 8005724:	4b58      	ldr	r3, [pc, #352]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 8005726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005728:	4a57      	ldr	r2, [pc, #348]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 800572a:	f023 0301 	bic.w	r3, r3, #1
 800572e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005730:	4b55      	ldr	r3, [pc, #340]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 8005732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005734:	4a54      	ldr	r2, [pc, #336]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 8005736:	f023 0304 	bic.w	r3, r3, #4
 800573a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d015      	beq.n	8005770 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005744:	f7fe f826 	bl	8003794 <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800574a:	e00a      	b.n	8005762 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800574c:	f7fe f822 	bl	8003794 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800575a:	4293      	cmp	r3, r2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e0cb      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005762:	4b49      	ldr	r3, [pc, #292]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 8005764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0ee      	beq.n	800574c <HAL_RCC_OscConfig+0x334>
 800576e:	e014      	b.n	800579a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005770:	f7fe f810 	bl	8003794 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005776:	e00a      	b.n	800578e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005778:	f7fe f80c 	bl	8003794 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005786:	4293      	cmp	r3, r2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e0b5      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800578e:	4b3e      	ldr	r3, [pc, #248]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 8005790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1ee      	bne.n	8005778 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800579a:	7dfb      	ldrb	r3, [r7, #23]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d105      	bne.n	80057ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a0:	4b39      	ldr	r3, [pc, #228]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 80057a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a4:	4a38      	ldr	r2, [pc, #224]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 80057a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 80a1 	beq.w	80058f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057b6:	4b34      	ldr	r3, [pc, #208]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 030c 	and.w	r3, r3, #12
 80057be:	2b08      	cmp	r3, #8
 80057c0:	d05c      	beq.n	800587c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d141      	bne.n	800584e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ca:	4b31      	ldr	r3, [pc, #196]	@ (8005890 <HAL_RCC_OscConfig+0x478>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d0:	f7fd ffe0 	bl	8003794 <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d8:	f7fd ffdc 	bl	8003794 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e087      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ea:	4b27      	ldr	r3, [pc, #156]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1f0      	bne.n	80057d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	69da      	ldr	r2, [r3, #28]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005804:	019b      	lsls	r3, r3, #6
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580c:	085b      	lsrs	r3, r3, #1
 800580e:	3b01      	subs	r3, #1
 8005810:	041b      	lsls	r3, r3, #16
 8005812:	431a      	orrs	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005818:	061b      	lsls	r3, r3, #24
 800581a:	491b      	ldr	r1, [pc, #108]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 800581c:	4313      	orrs	r3, r2
 800581e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005820:	4b1b      	ldr	r3, [pc, #108]	@ (8005890 <HAL_RCC_OscConfig+0x478>)
 8005822:	2201      	movs	r2, #1
 8005824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005826:	f7fd ffb5 	bl	8003794 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800582e:	f7fd ffb1 	bl	8003794 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e05c      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005840:	4b11      	ldr	r3, [pc, #68]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0f0      	beq.n	800582e <HAL_RCC_OscConfig+0x416>
 800584c:	e054      	b.n	80058f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800584e:	4b10      	ldr	r3, [pc, #64]	@ (8005890 <HAL_RCC_OscConfig+0x478>)
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005854:	f7fd ff9e 	bl	8003794 <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800585c:	f7fd ff9a 	bl	8003794 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e045      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800586e:	4b06      	ldr	r3, [pc, #24]	@ (8005888 <HAL_RCC_OscConfig+0x470>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f0      	bne.n	800585c <HAL_RCC_OscConfig+0x444>
 800587a:	e03d      	b.n	80058f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d107      	bne.n	8005894 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e038      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
 8005888:	40023800 	.word	0x40023800
 800588c:	40007000 	.word	0x40007000
 8005890:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005894:	4b1b      	ldr	r3, [pc, #108]	@ (8005904 <HAL_RCC_OscConfig+0x4ec>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d028      	beq.n	80058f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d121      	bne.n	80058f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d11a      	bne.n	80058f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80058c4:	4013      	ands	r3, r2
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d111      	bne.n	80058f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058da:	085b      	lsrs	r3, r3, #1
 80058dc:	3b01      	subs	r3, #1
 80058de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d107      	bne.n	80058f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e000      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40023800 	.word	0x40023800

08005908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e0cc      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800591c:	4b68      	ldr	r3, [pc, #416]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d90c      	bls.n	8005944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800592a:	4b65      	ldr	r3, [pc, #404]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005932:	4b63      	ldr	r3, [pc, #396]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d001      	beq.n	8005944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e0b8      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d020      	beq.n	8005992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800595c:	4b59      	ldr	r3, [pc, #356]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	4a58      	ldr	r2, [pc, #352]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8005962:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0308 	and.w	r3, r3, #8
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005974:	4b53      	ldr	r3, [pc, #332]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	4a52      	ldr	r2, [pc, #328]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800597a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800597e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005980:	4b50      	ldr	r3, [pc, #320]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	494d      	ldr	r1, [pc, #308]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800598e:	4313      	orrs	r3, r2
 8005990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d044      	beq.n	8005a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d107      	bne.n	80059b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059a6:	4b47      	ldr	r3, [pc, #284]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d119      	bne.n	80059e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e07f      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d003      	beq.n	80059c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	d107      	bne.n	80059d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e06f      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d6:	4b3b      	ldr	r3, [pc, #236]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e067      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059e6:	4b37      	ldr	r3, [pc, #220]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f023 0203 	bic.w	r2, r3, #3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	4934      	ldr	r1, [pc, #208]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059f8:	f7fd fecc 	bl	8003794 <HAL_GetTick>
 80059fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fe:	e00a      	b.n	8005a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a00:	f7fd fec8 	bl	8003794 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e04f      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a16:	4b2b      	ldr	r3, [pc, #172]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 020c 	and.w	r2, r3, #12
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d1eb      	bne.n	8005a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a28:	4b25      	ldr	r3, [pc, #148]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0307 	and.w	r3, r3, #7
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d20c      	bcs.n	8005a50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a36:	4b22      	ldr	r3, [pc, #136]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3e:	4b20      	ldr	r3, [pc, #128]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d001      	beq.n	8005a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e032      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d008      	beq.n	8005a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a5c:	4b19      	ldr	r3, [pc, #100]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	4916      	ldr	r1, [pc, #88]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d009      	beq.n	8005a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a7a:	4b12      	ldr	r3, [pc, #72]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	490e      	ldr	r1, [pc, #56]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a8e:	f000 f821 	bl	8005ad4 <HAL_RCC_GetSysClockFreq>
 8005a92:	4602      	mov	r2, r0
 8005a94:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	091b      	lsrs	r3, r3, #4
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	490a      	ldr	r1, [pc, #40]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8005aa0:	5ccb      	ldrb	r3, [r1, r3]
 8005aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa6:	4a09      	ldr	r2, [pc, #36]	@ (8005acc <HAL_RCC_ClockConfig+0x1c4>)
 8005aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005aaa:	4b09      	ldr	r3, [pc, #36]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fd fd3e 	bl	8003530 <HAL_InitTick>

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	40023c00 	.word	0x40023c00
 8005ac4:	40023800 	.word	0x40023800
 8005ac8:	080098fc 	.word	0x080098fc
 8005acc:	20000090 	.word	0x20000090
 8005ad0:	20000094 	.word	0x20000094

08005ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ad8:	b094      	sub	sp, #80	@ 0x50
 8005ada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005aec:	4b79      	ldr	r3, [pc, #484]	@ (8005cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f003 030c 	and.w	r3, r3, #12
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d00d      	beq.n	8005b14 <HAL_RCC_GetSysClockFreq+0x40>
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	f200 80e1 	bhi.w	8005cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <HAL_RCC_GetSysClockFreq+0x34>
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	d003      	beq.n	8005b0e <HAL_RCC_GetSysClockFreq+0x3a>
 8005b06:	e0db      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b08:	4b73      	ldr	r3, [pc, #460]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005b0c:	e0db      	b.n	8005cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b0e:	4b73      	ldr	r3, [pc, #460]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x208>)
 8005b10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b12:	e0d8      	b.n	8005cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b14:	4b6f      	ldr	r3, [pc, #444]	@ (8005cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b1e:	4b6d      	ldr	r3, [pc, #436]	@ (8005cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d063      	beq.n	8005bf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b2a:	4b6a      	ldr	r3, [pc, #424]	@ (8005cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	099b      	lsrs	r3, r3, #6
 8005b30:	2200      	movs	r2, #0
 8005b32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b3e:	2300      	movs	r3, #0
 8005b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005b46:	4622      	mov	r2, r4
 8005b48:	462b      	mov	r3, r5
 8005b4a:	f04f 0000 	mov.w	r0, #0
 8005b4e:	f04f 0100 	mov.w	r1, #0
 8005b52:	0159      	lsls	r1, r3, #5
 8005b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b58:	0150      	lsls	r0, r2, #5
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4621      	mov	r1, r4
 8005b60:	1a51      	subs	r1, r2, r1
 8005b62:	6139      	str	r1, [r7, #16]
 8005b64:	4629      	mov	r1, r5
 8005b66:	eb63 0301 	sbc.w	r3, r3, r1
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b78:	4659      	mov	r1, fp
 8005b7a:	018b      	lsls	r3, r1, #6
 8005b7c:	4651      	mov	r1, sl
 8005b7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b82:	4651      	mov	r1, sl
 8005b84:	018a      	lsls	r2, r1, #6
 8005b86:	4651      	mov	r1, sl
 8005b88:	ebb2 0801 	subs.w	r8, r2, r1
 8005b8c:	4659      	mov	r1, fp
 8005b8e:	eb63 0901 	sbc.w	r9, r3, r1
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	f04f 0300 	mov.w	r3, #0
 8005b9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ba2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ba6:	4690      	mov	r8, r2
 8005ba8:	4699      	mov	r9, r3
 8005baa:	4623      	mov	r3, r4
 8005bac:	eb18 0303 	adds.w	r3, r8, r3
 8005bb0:	60bb      	str	r3, [r7, #8]
 8005bb2:	462b      	mov	r3, r5
 8005bb4:	eb49 0303 	adc.w	r3, r9, r3
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	f04f 0300 	mov.w	r3, #0
 8005bc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	024b      	lsls	r3, r1, #9
 8005bca:	4621      	mov	r1, r4
 8005bcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005bd0:	4621      	mov	r1, r4
 8005bd2:	024a      	lsls	r2, r1, #9
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bda:	2200      	movs	r2, #0
 8005bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005be0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005be4:	f7fa ffe0 	bl	8000ba8 <__aeabi_uldivmod>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4613      	mov	r3, r2
 8005bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bf0:	e058      	b.n	8005ca4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bf2:	4b38      	ldr	r3, [pc, #224]	@ (8005cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	099b      	lsrs	r3, r3, #6
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c02:	623b      	str	r3, [r7, #32]
 8005c04:	2300      	movs	r3, #0
 8005c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	464b      	mov	r3, r9
 8005c10:	f04f 0000 	mov.w	r0, #0
 8005c14:	f04f 0100 	mov.w	r1, #0
 8005c18:	0159      	lsls	r1, r3, #5
 8005c1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c1e:	0150      	lsls	r0, r2, #5
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	4641      	mov	r1, r8
 8005c26:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	f04f 0300 	mov.w	r3, #0
 8005c38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c44:	ebb2 040a 	subs.w	r4, r2, sl
 8005c48:	eb63 050b 	sbc.w	r5, r3, fp
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	00eb      	lsls	r3, r5, #3
 8005c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c5a:	00e2      	lsls	r2, r4, #3
 8005c5c:	4614      	mov	r4, r2
 8005c5e:	461d      	mov	r5, r3
 8005c60:	4643      	mov	r3, r8
 8005c62:	18e3      	adds	r3, r4, r3
 8005c64:	603b      	str	r3, [r7, #0]
 8005c66:	464b      	mov	r3, r9
 8005c68:	eb45 0303 	adc.w	r3, r5, r3
 8005c6c:	607b      	str	r3, [r7, #4]
 8005c6e:	f04f 0200 	mov.w	r2, #0
 8005c72:	f04f 0300 	mov.w	r3, #0
 8005c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c7a:	4629      	mov	r1, r5
 8005c7c:	028b      	lsls	r3, r1, #10
 8005c7e:	4621      	mov	r1, r4
 8005c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c84:	4621      	mov	r1, r4
 8005c86:	028a      	lsls	r2, r1, #10
 8005c88:	4610      	mov	r0, r2
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c8e:	2200      	movs	r2, #0
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	61fa      	str	r2, [r7, #28]
 8005c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c98:	f7fa ff86 	bl	8000ba8 <__aeabi_uldivmod>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	0c1b      	lsrs	r3, r3, #16
 8005caa:	f003 0303 	and.w	r3, r3, #3
 8005cae:	3301      	adds	r3, #1
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005cb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005cbe:	e002      	b.n	8005cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cc0:	4b05      	ldr	r3, [pc, #20]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3750      	adds	r7, #80	@ 0x50
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cd2:	bf00      	nop
 8005cd4:	40023800 	.word	0x40023800
 8005cd8:	00f42400 	.word	0x00f42400
 8005cdc:	007a1200 	.word	0x007a1200

08005ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ce4:	4b03      	ldr	r3, [pc, #12]	@ (8005cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	20000090 	.word	0x20000090

08005cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cfc:	f7ff fff0 	bl	8005ce0 <HAL_RCC_GetHCLKFreq>
 8005d00:	4602      	mov	r2, r0
 8005d02:	4b05      	ldr	r3, [pc, #20]	@ (8005d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	0a9b      	lsrs	r3, r3, #10
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	4903      	ldr	r1, [pc, #12]	@ (8005d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d0e:	5ccb      	ldrb	r3, [r1, r3]
 8005d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40023800 	.word	0x40023800
 8005d1c:	0800990c 	.word	0x0800990c

08005d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d24:	f7ff ffdc 	bl	8005ce0 <HAL_RCC_GetHCLKFreq>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	4b05      	ldr	r3, [pc, #20]	@ (8005d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	0b5b      	lsrs	r3, r3, #13
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	4903      	ldr	r1, [pc, #12]	@ (8005d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d36:	5ccb      	ldrb	r3, [r1, r3]
 8005d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40023800 	.word	0x40023800
 8005d44:	0800990c 	.word	0x0800990c

08005d48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	220f      	movs	r2, #15
 8005d56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d58:	4b12      	ldr	r3, [pc, #72]	@ (8005da4 <HAL_RCC_GetClockConfig+0x5c>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 0203 	and.w	r2, r3, #3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d64:	4b0f      	ldr	r3, [pc, #60]	@ (8005da4 <HAL_RCC_GetClockConfig+0x5c>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d70:	4b0c      	ldr	r3, [pc, #48]	@ (8005da4 <HAL_RCC_GetClockConfig+0x5c>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d7c:	4b09      	ldr	r3, [pc, #36]	@ (8005da4 <HAL_RCC_GetClockConfig+0x5c>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	08db      	lsrs	r3, r3, #3
 8005d82:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d8a:	4b07      	ldr	r3, [pc, #28]	@ (8005da8 <HAL_RCC_GetClockConfig+0x60>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0207 	and.w	r2, r3, #7
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	601a      	str	r2, [r3, #0]
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40023800 	.word	0x40023800
 8005da8:	40023c00 	.word	0x40023c00

08005dac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e07b      	b.n	8005eb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d108      	bne.n	8005dd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dce:	d009      	beq.n	8005de4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	61da      	str	r2, [r3, #28]
 8005dd6:	e005      	b.n	8005de4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fd fa2e 	bl	8003260 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	431a      	orrs	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e68:	ea42 0103 	orr.w	r1, r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e70:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	0c1b      	lsrs	r3, r3, #16
 8005e82:	f003 0104 	and.w	r1, r3, #4
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8a:	f003 0210 	and.w	r2, r3, #16
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69da      	ldr	r2, [r3, #28]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ea4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b088      	sub	sp, #32
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	603b      	str	r3, [r7, #0]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_SPI_Transmit+0x22>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e12d      	b.n	800613c <HAL_SPI_Transmit+0x27e>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ee8:	f7fd fc54 	bl	8003794 <HAL_GetTick>
 8005eec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005eee:	88fb      	ldrh	r3, [r7, #6]
 8005ef0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d002      	beq.n	8005f04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005efe:	2302      	movs	r3, #2
 8005f00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f02:	e116      	b.n	8006132 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <HAL_SPI_Transmit+0x52>
 8005f0a:	88fb      	ldrh	r3, [r7, #6]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d102      	bne.n	8005f16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f14:	e10d      	b.n	8006132 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2203      	movs	r2, #3
 8005f1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	88fa      	ldrh	r2, [r7, #6]
 8005f2e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	88fa      	ldrh	r2, [r7, #6]
 8005f34:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f5c:	d10f      	bne.n	8005f7e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f88:	2b40      	cmp	r3, #64	@ 0x40
 8005f8a:	d007      	beq.n	8005f9c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fa4:	d14f      	bne.n	8006046 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <HAL_SPI_Transmit+0xf6>
 8005fae:	8afb      	ldrh	r3, [r7, #22]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d142      	bne.n	800603a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb8:	881a      	ldrh	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc4:	1c9a      	adds	r2, r3, #2
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fd8:	e02f      	b.n	800603a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d112      	bne.n	800600e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fec:	881a      	ldrh	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff8:	1c9a      	adds	r2, r3, #2
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006002:	b29b      	uxth	r3, r3
 8006004:	3b01      	subs	r3, #1
 8006006:	b29a      	uxth	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800600c:	e015      	b.n	800603a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800600e:	f7fd fbc1 	bl	8003794 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d803      	bhi.n	8006026 <HAL_SPI_Transmit+0x168>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d102      	bne.n	800602c <HAL_SPI_Transmit+0x16e>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d106      	bne.n	800603a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006038:	e07b      	b.n	8006132 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800603e:	b29b      	uxth	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1ca      	bne.n	8005fda <HAL_SPI_Transmit+0x11c>
 8006044:	e050      	b.n	80060e8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <HAL_SPI_Transmit+0x196>
 800604e:	8afb      	ldrh	r3, [r7, #22]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d144      	bne.n	80060de <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	330c      	adds	r3, #12
 800605e:	7812      	ldrb	r2, [r2, #0]
 8006060:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b01      	subs	r3, #1
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800607a:	e030      	b.n	80060de <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b02      	cmp	r3, #2
 8006088:	d113      	bne.n	80060b2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	330c      	adds	r3, #12
 8006094:	7812      	ldrb	r2, [r2, #0]
 8006096:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	86da      	strh	r2, [r3, #54]	@ 0x36
 80060b0:	e015      	b.n	80060de <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060b2:	f7fd fb6f 	bl	8003794 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d803      	bhi.n	80060ca <HAL_SPI_Transmit+0x20c>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c8:	d102      	bne.n	80060d0 <HAL_SPI_Transmit+0x212>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d106      	bne.n	80060de <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80060dc:	e029      	b.n	8006132 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1c9      	bne.n	800607c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f001 f8d7 	bl	80072a0 <SPI_EndRxTxTransaction>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2220      	movs	r2, #32
 80060fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006106:	2300      	movs	r3, #0
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	77fb      	strb	r3, [r7, #31]
 8006128:	e003      	b.n	8006132 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800613a:	7ffb      	ldrb	r3, [r7, #31]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3720      	adds	r7, #32
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	4613      	mov	r3, r2
 8006152:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006154:	2300      	movs	r3, #0
 8006156:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b01      	cmp	r3, #1
 8006162:	d002      	beq.n	800616a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006164:	2302      	movs	r3, #2
 8006166:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006168:	e0fb      	b.n	8006362 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006172:	d112      	bne.n	800619a <HAL_SPI_Receive+0x56>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10e      	bne.n	800619a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2204      	movs	r2, #4
 8006180:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006184:	88fa      	ldrh	r2, [r7, #6]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	4613      	mov	r3, r2
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 f8ef 	bl	8006374 <HAL_SPI_TransmitReceive>
 8006196:	4603      	mov	r3, r0
 8006198:	e0e8      	b.n	800636c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d101      	bne.n	80061a8 <HAL_SPI_Receive+0x64>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e0e1      	b.n	800636c <HAL_SPI_Receive+0x228>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061b0:	f7fd faf0 	bl	8003794 <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <HAL_SPI_Receive+0x7e>
 80061bc:	88fb      	ldrh	r3, [r7, #6]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d102      	bne.n	80061c8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061c6:	e0cc      	b.n	8006362 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2204      	movs	r2, #4
 80061cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	88fa      	ldrh	r2, [r7, #6]
 80061e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	88fa      	ldrh	r2, [r7, #6]
 80061e6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800620e:	d10f      	bne.n	8006230 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800621e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800622e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800623a:	2b40      	cmp	r3, #64	@ 0x40
 800623c:	d007      	beq.n	800624e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800624c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d16a      	bne.n	800632c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006256:	e032      	b.n	80062be <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b01      	cmp	r3, #1
 8006264:	d115      	bne.n	8006292 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f103 020c 	add.w	r2, r3, #12
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006272:	7812      	ldrb	r2, [r2, #0]
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800627c:	1c5a      	adds	r2, r3, #1
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006286:	b29b      	uxth	r3, r3
 8006288:	3b01      	subs	r3, #1
 800628a:	b29a      	uxth	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006290:	e015      	b.n	80062be <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006292:	f7fd fa7f 	bl	8003794 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d803      	bhi.n	80062aa <HAL_SPI_Receive+0x166>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a8:	d102      	bne.n	80062b0 <HAL_SPI_Receive+0x16c>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d106      	bne.n	80062be <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80062bc:	e051      	b.n	8006362 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1c7      	bne.n	8006258 <HAL_SPI_Receive+0x114>
 80062c8:	e035      	b.n	8006336 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d113      	bne.n	8006300 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e2:	b292      	uxth	r2, r2
 80062e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ea:	1c9a      	adds	r2, r3, #2
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062fe:	e015      	b.n	800632c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006300:	f7fd fa48 	bl	8003794 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	429a      	cmp	r2, r3
 800630e:	d803      	bhi.n	8006318 <HAL_SPI_Receive+0x1d4>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006316:	d102      	bne.n	800631e <HAL_SPI_Receive+0x1da>
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d106      	bne.n	800632c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800632a:	e01a      	b.n	8006362 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006330:	b29b      	uxth	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1c9      	bne.n	80062ca <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 ff4a 	bl	80071d4 <SPI_EndRxTransaction>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2220      	movs	r2, #32
 800634a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	75fb      	strb	r3, [r7, #23]
 8006358:	e003      	b.n	8006362 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800636a:	7dfb      	ldrb	r3, [r7, #23]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b08c      	sub	sp, #48	@ 0x30
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006382:	2301      	movs	r3, #1
 8006384:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <HAL_SPI_TransmitReceive+0x26>
 8006396:	2302      	movs	r3, #2
 8006398:	e198      	b.n	80066cc <HAL_SPI_TransmitReceive+0x358>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063a2:	f7fd f9f7 	bl	8003794 <HAL_GetTick>
 80063a6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80063b8:	887b      	ldrh	r3, [r7, #2]
 80063ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d00f      	beq.n	80063e4 <HAL_SPI_TransmitReceive+0x70>
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063ca:	d107      	bne.n	80063dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d103      	bne.n	80063dc <HAL_SPI_TransmitReceive+0x68>
 80063d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d003      	beq.n	80063e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80063dc:	2302      	movs	r3, #2
 80063de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80063e2:	e16d      	b.n	80066c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d005      	beq.n	80063f6 <HAL_SPI_TransmitReceive+0x82>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <HAL_SPI_TransmitReceive+0x82>
 80063f0:	887b      	ldrh	r3, [r7, #2]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d103      	bne.n	80063fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80063fc:	e160      	b.n	80066c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b04      	cmp	r3, #4
 8006408:	d003      	beq.n	8006412 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2205      	movs	r2, #5
 800640e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	887a      	ldrh	r2, [r7, #2]
 8006422:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	887a      	ldrh	r2, [r7, #2]
 8006428:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	887a      	ldrh	r2, [r7, #2]
 8006434:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	887a      	ldrh	r2, [r7, #2]
 800643a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006452:	2b40      	cmp	r3, #64	@ 0x40
 8006454:	d007      	beq.n	8006466 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006464:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800646e:	d17c      	bne.n	800656a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <HAL_SPI_TransmitReceive+0x10a>
 8006478:	8b7b      	ldrh	r3, [r7, #26]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d16a      	bne.n	8006554 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006482:	881a      	ldrh	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648e:	1c9a      	adds	r2, r3, #2
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006498:	b29b      	uxth	r3, r3
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064a2:	e057      	b.n	8006554 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d11b      	bne.n	80064ea <HAL_SPI_TransmitReceive+0x176>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d016      	beq.n	80064ea <HAL_SPI_TransmitReceive+0x176>
 80064bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d113      	bne.n	80064ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c6:	881a      	ldrh	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d2:	1c9a      	adds	r2, r3, #2
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d119      	bne.n	800652c <HAL_SPI_TransmitReceive+0x1b8>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d014      	beq.n	800652c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650c:	b292      	uxth	r2, r2
 800650e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006514:	1c9a      	adds	r2, r3, #2
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800651e:	b29b      	uxth	r3, r3
 8006520:	3b01      	subs	r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006528:	2301      	movs	r3, #1
 800652a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800652c:	f7fd f932 	bl	8003794 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006538:	429a      	cmp	r2, r3
 800653a:	d80b      	bhi.n	8006554 <HAL_SPI_TransmitReceive+0x1e0>
 800653c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006542:	d007      	beq.n	8006554 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006552:	e0b5      	b.n	80066c0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006558:	b29b      	uxth	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1a2      	bne.n	80064a4 <HAL_SPI_TransmitReceive+0x130>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006562:	b29b      	uxth	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d19d      	bne.n	80064a4 <HAL_SPI_TransmitReceive+0x130>
 8006568:	e080      	b.n	800666c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <HAL_SPI_TransmitReceive+0x204>
 8006572:	8b7b      	ldrh	r3, [r7, #26]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d16f      	bne.n	8006658 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	330c      	adds	r3, #12
 8006582:	7812      	ldrb	r2, [r2, #0]
 8006584:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800659e:	e05b      	b.n	8006658 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d11c      	bne.n	80065e8 <HAL_SPI_TransmitReceive+0x274>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d017      	beq.n	80065e8 <HAL_SPI_TransmitReceive+0x274>
 80065b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d114      	bne.n	80065e8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	330c      	adds	r3, #12
 80065c8:	7812      	ldrb	r2, [r2, #0]
 80065ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d119      	bne.n	800662a <HAL_SPI_TransmitReceive+0x2b6>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d014      	beq.n	800662a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800661c:	b29b      	uxth	r3, r3
 800661e:	3b01      	subs	r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006626:	2301      	movs	r3, #1
 8006628:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800662a:	f7fd f8b3 	bl	8003794 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006636:	429a      	cmp	r2, r3
 8006638:	d803      	bhi.n	8006642 <HAL_SPI_TransmitReceive+0x2ce>
 800663a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006640:	d102      	bne.n	8006648 <HAL_SPI_TransmitReceive+0x2d4>
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	2b00      	cmp	r3, #0
 8006646:	d107      	bne.n	8006658 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006656:	e033      	b.n	80066c0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d19e      	bne.n	80065a0 <HAL_SPI_TransmitReceive+0x22c>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006666:	b29b      	uxth	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d199      	bne.n	80065a0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800666c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800666e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 fe15 	bl	80072a0 <SPI_EndRxTxTransaction>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d006      	beq.n	800668a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006688:	e01a      	b.n	80066c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10a      	bne.n	80066a8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006692:	2300      	movs	r3, #0
 8006694:	617b      	str	r3, [r7, #20]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	617b      	str	r3, [r7, #20]
 80066a6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066b6:	e003      	b.n	80066c0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80066c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3730      	adds	r7, #48	@ 0x30
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	4613      	mov	r3, r2
 80066e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d101      	bne.n	80066f4 <HAL_SPI_Transmit_DMA+0x20>
 80066f0:	2302      	movs	r3, #2
 80066f2:	e097      	b.n	8006824 <HAL_SPI_Transmit_DMA+0x150>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b01      	cmp	r3, #1
 8006706:	d002      	beq.n	800670e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006708:	2302      	movs	r3, #2
 800670a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800670c:	e085      	b.n	800681a <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <HAL_SPI_Transmit_DMA+0x46>
 8006714:	88fb      	ldrh	r3, [r7, #6]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d102      	bne.n	8006720 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800671e:	e07c      	b.n	800681a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2203      	movs	r2, #3
 8006724:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	88fa      	ldrh	r2, [r7, #6]
 8006738:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	88fa      	ldrh	r2, [r7, #6]
 800673e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006766:	d10f      	bne.n	8006788 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006776:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006786:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800678c:	4a27      	ldr	r2, [pc, #156]	@ (800682c <HAL_SPI_Transmit_DMA+0x158>)
 800678e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006794:	4a26      	ldr	r2, [pc, #152]	@ (8006830 <HAL_SPI_Transmit_DMA+0x15c>)
 8006796:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800679c:	4a25      	ldr	r2, [pc, #148]	@ (8006834 <HAL_SPI_Transmit_DMA+0x160>)
 800679e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067a4:	2200      	movs	r2, #0
 80067a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b0:	4619      	mov	r1, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	330c      	adds	r3, #12
 80067b8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067be:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80067c0:	f7fd f984 	bl	8003acc <HAL_DMA_Start_IT>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d008      	beq.n	80067dc <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ce:	f043 0210 	orr.w	r2, r3, #16
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	75fb      	strb	r3, [r7, #23]

    goto error;
 80067da:	e01e      	b.n	800681a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e6:	2b40      	cmp	r3, #64	@ 0x40
 80067e8:	d007      	beq.n	80067fa <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067f8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f042 0220 	orr.w	r2, r2, #32
 8006808:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0202 	orr.w	r2, r2, #2
 8006818:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006822:	7dfb      	ldrb	r3, [r7, #23]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	08007009 	.word	0x08007009
 8006830:	08006e29 	.word	0x08006e29
 8006834:	0800705d 	.word	0x0800705d

08006838 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	4613      	mov	r3, r2
 8006844:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b01      	cmp	r3, #1
 8006854:	d002      	beq.n	800685c <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8006856:	2302      	movs	r3, #2
 8006858:	75fb      	strb	r3, [r7, #23]
    goto error;
 800685a:	e0a2      	b.n	80069a2 <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d110      	bne.n	8006886 <HAL_SPI_Receive_DMA+0x4e>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800686c:	d10b      	bne.n	8006886 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2204      	movs	r2, #4
 8006872:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006876:	88fb      	ldrh	r3, [r7, #6]
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	68b9      	ldr	r1, [r7, #8]
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 f89f 	bl	80069c0 <HAL_SPI_TransmitReceive_DMA>
 8006882:	4603      	mov	r3, r0
 8006884:	e092      	b.n	80069ac <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_SPI_Receive_DMA+0x5c>
 8006890:	2302      	movs	r3, #2
 8006892:	e08b      	b.n	80069ac <HAL_SPI_Receive_DMA+0x174>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if ((pData == NULL) || (Size == 0U))
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <HAL_SPI_Receive_DMA+0x70>
 80068a2:	88fb      	ldrh	r3, [r7, #6]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d102      	bne.n	80068ae <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068ac:	e079      	b.n	80069a2 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2204      	movs	r2, #4
 80068b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	88fa      	ldrh	r2, [r7, #6]
 80068c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	88fa      	ldrh	r2, [r7, #6]
 80068cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068ee:	d10f      	bne.n	8006910 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800690e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006914:	4a27      	ldr	r2, [pc, #156]	@ (80069b4 <HAL_SPI_Receive_DMA+0x17c>)
 8006916:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800691c:	4a26      	ldr	r2, [pc, #152]	@ (80069b8 <HAL_SPI_Receive_DMA+0x180>)
 800691e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006924:	4a25      	ldr	r2, [pc, #148]	@ (80069bc <HAL_SPI_Receive_DMA+0x184>)
 8006926:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800692c:	2200      	movs	r2, #0
 800692e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	330c      	adds	r3, #12
 800693a:	4619      	mov	r1, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006940:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006946:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006948:	f7fd f8c0 	bl	8003acc <HAL_DMA_Start_IT>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d008      	beq.n	8006964 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006956:	f043 0210 	orr.w	r2, r3, #16
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006962:	e01e      	b.n	80069a2 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800696e:	2b40      	cmp	r3, #64	@ 0x40
 8006970:	d007      	beq.n	8006982 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006980:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f042 0220 	orr.w	r2, r2, #32
 8006990:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f042 0201 	orr.w	r2, r2, #1
 80069a0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	08007025 	.word	0x08007025
 80069b8:	08006ed1 	.word	0x08006ed1
 80069bc:	0800705d 	.word	0x0800705d

080069c0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_SPI_TransmitReceive_DMA+0x20>
 80069dc:	2302      	movs	r3, #2
 80069de:	e0db      	b.n	8006b98 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069ee:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80069f6:	7dbb      	ldrb	r3, [r7, #22]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d00d      	beq.n	8006a18 <HAL_SPI_TransmitReceive_DMA+0x58>
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a02:	d106      	bne.n	8006a12 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d102      	bne.n	8006a12 <HAL_SPI_TransmitReceive_DMA+0x52>
 8006a0c:	7dbb      	ldrb	r3, [r7, #22]
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d002      	beq.n	8006a18 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006a12:	2302      	movs	r3, #2
 8006a14:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a16:	e0ba      	b.n	8006b8e <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006a24:	887b      	ldrh	r3, [r7, #2]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d102      	bne.n	8006a30 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a2e:	e0ae      	b.n	8006b8e <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	d003      	beq.n	8006a44 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2205      	movs	r2, #5
 8006a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	887a      	ldrh	r2, [r7, #2]
 8006a54:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	887a      	ldrh	r2, [r7, #2]
 8006a5a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	887a      	ldrh	r2, [r7, #2]
 8006a66:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	887a      	ldrh	r2, [r7, #2]
 8006a6c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	d108      	bne.n	8006a98 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a8a:	4a45      	ldr	r2, [pc, #276]	@ (8006ba0 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8006a8c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a92:	4a44      	ldr	r2, [pc, #272]	@ (8006ba4 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8006a94:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006a96:	e007      	b.n	8006aa8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a9c:	4a42      	ldr	r2, [pc, #264]	@ (8006ba8 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8006a9e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aa4:	4a41      	ldr	r2, [pc, #260]	@ (8006bac <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8006aa6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aac:	4a40      	ldr	r2, [pc, #256]	@ (8006bb0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8006aae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	330c      	adds	r3, #12
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ace:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006ad0:	f7fc fffc 	bl	8003acc <HAL_DMA_Start_IT>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d008      	beq.n	8006aec <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ade:	f043 0210 	orr.w	r2, r3, #16
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006aea:	e050      	b.n	8006b8e <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0201 	orr.w	r2, r2, #1
 8006afa:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b00:	2200      	movs	r2, #0
 8006b02:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b08:	2200      	movs	r2, #0
 8006b0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b10:	2200      	movs	r2, #0
 8006b12:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b18:	2200      	movs	r2, #0
 8006b1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b24:	4619      	mov	r1, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	330c      	adds	r3, #12
 8006b2c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b32:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006b34:	f7fc ffca 	bl	8003acc <HAL_DMA_Start_IT>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d008      	beq.n	8006b50 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b42:	f043 0210 	orr.w	r2, r3, #16
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006b4e:	e01e      	b.n	8006b8e <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b5a:	2b40      	cmp	r3, #64	@ 0x40
 8006b5c:	d007      	beq.n	8006b6e <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b6c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f042 0220 	orr.w	r2, r2, #32
 8006b7c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f042 0202 	orr.w	r2, r2, #2
 8006b8c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	08007025 	.word	0x08007025
 8006ba4:	08006ed1 	.word	0x08006ed1
 8006ba8:	08007041 	.word	0x08007041
 8006bac:	08006f79 	.word	0x08006f79
 8006bb0:	0800705d 	.word	0x0800705d

08006bb4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b088      	sub	sp, #32
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10e      	bne.n	8006bf4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d009      	beq.n	8006bf4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d004      	beq.n	8006bf4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	4798      	blx	r3
    return;
 8006bf2:	e0ce      	b.n	8006d92 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d009      	beq.n	8006c12 <HAL_SPI_IRQHandler+0x5e>
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d004      	beq.n	8006c12 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	4798      	blx	r3
    return;
 8006c10:	e0bf      	b.n	8006d92 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	f003 0320 	and.w	r3, r3, #32
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10a      	bne.n	8006c32 <HAL_SPI_IRQHandler+0x7e>
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d105      	bne.n	8006c32 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 80b0 	beq.w	8006d92 <HAL_SPI_IRQHandler+0x1de>
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	f003 0320 	and.w	r3, r3, #32
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 80aa 	beq.w	8006d92 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d023      	beq.n	8006c90 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d011      	beq.n	8006c78 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c58:	f043 0204 	orr.w	r2, r3, #4
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c60:	2300      	movs	r3, #0
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	e00b      	b.n	8006c90 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c78:	2300      	movs	r3, #0
 8006c7a:	613b      	str	r3, [r7, #16]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	613b      	str	r3, [r7, #16]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	613b      	str	r3, [r7, #16]
 8006c8c:	693b      	ldr	r3, [r7, #16]
        return;
 8006c8e:	e080      	b.n	8006d92 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d014      	beq.n	8006cc4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c9e:	f043 0201 	orr.w	r2, r3, #1
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	60fb      	str	r3, [r7, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00c      	beq.n	8006ce8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd2:	f043 0208 	orr.w	r2, r3, #8
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60bb      	str	r3, [r7, #8]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	60bb      	str	r3, [r7, #8]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d04f      	beq.n	8006d90 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006cfe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d104      	bne.n	8006d1c <HAL_SPI_IRQHandler+0x168>
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d034      	beq.n	8006d86 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0203 	bic.w	r2, r2, #3
 8006d2a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d011      	beq.n	8006d58 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d38:	4a17      	ldr	r2, [pc, #92]	@ (8006d98 <HAL_SPI_IRQHandler+0x1e4>)
 8006d3a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fc ff1b 	bl	8003b7c <HAL_DMA_Abort_IT>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d005      	beq.n	8006d58 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d50:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d016      	beq.n	8006d8e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d64:	4a0c      	ldr	r2, [pc, #48]	@ (8006d98 <HAL_SPI_IRQHandler+0x1e4>)
 8006d66:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fc ff05 	bl	8003b7c <HAL_DMA_Abort_IT>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00a      	beq.n	8006d8e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d7c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006d84:	e003      	b.n	8006d8e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f844 	bl	8006e14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006d8c:	e000      	b.n	8006d90 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006d8e:	bf00      	nop
    return;
 8006d90:	bf00      	nop
  }
}
 8006d92:	3720      	adds	r7, #32
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	0800709d 	.word	0x0800709d

08006d9c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e34:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e36:	f7fc fcad 	bl	8003794 <HAL_GetTick>
 8006e3a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e4a:	d03b      	beq.n	8006ec4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0220 	bic.w	r2, r2, #32
 8006e5a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0202 	bic.w	r2, r2, #2
 8006e6a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	2164      	movs	r1, #100	@ 0x64
 8006e70:	6978      	ldr	r0, [r7, #20]
 8006e72:	f000 fa15 	bl	80072a0 <SPI_EndRxTxTransaction>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d005      	beq.n	8006e88 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e80:	f043 0220 	orr.w	r2, r3, #32
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10a      	bne.n	8006ea6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006ebc:	6978      	ldr	r0, [r7, #20]
 8006ebe:	f7ff ffa9 	bl	8006e14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006ec2:	e002      	b.n	8006eca <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006ec4:	6978      	ldr	r0, [r7, #20]
 8006ec6:	f7ff ff69 	bl	8006d9c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006eca:	3718      	adds	r7, #24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006edc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ede:	f7fc fc59 	bl	8003794 <HAL_GetTick>
 8006ee2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ef2:	d03b      	beq.n	8006f6c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0220 	bic.w	r2, r2, #32
 8006f02:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10d      	bne.n	8006f28 <SPI_DMAReceiveCplt+0x58>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f14:	d108      	bne.n	8006f28 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 0203 	bic.w	r2, r2, #3
 8006f24:	605a      	str	r2, [r3, #4]
 8006f26:	e007      	b.n	8006f38 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0201 	bic.w	r2, r2, #1
 8006f36:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	2164      	movs	r1, #100	@ 0x64
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 f949 	bl	80071d4 <SPI_EndRxTransaction>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f7ff ff55 	bl	8006e14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006f6a:	e002      	b.n	8006f72 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7ff ff1f 	bl	8006db0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f84:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f86:	f7fc fc05 	bl	8003794 <HAL_GetTick>
 8006f8a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f9a:	d02f      	beq.n	8006ffc <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0220 	bic.w	r2, r2, #32
 8006faa:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	2164      	movs	r1, #100	@ 0x64
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 f975 	bl	80072a0 <SPI_EndRxTxTransaction>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc0:	f043 0220 	orr.w	r2, r3, #32
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0203 	bic.w	r2, r2, #3
 8006fd6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7ff ff0d 	bl	8006e14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006ffa:	e002      	b.n	8007002 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7ff fee1 	bl	8006dc4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007014:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f7ff fede 	bl	8006dd8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800701c:	bf00      	nop
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007030:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f7ff feda 	bl	8006dec <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007038:	bf00      	nop
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f7ff fed6 	bl	8006e00 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007054:	bf00      	nop
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007068:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0203 	bic.w	r2, r2, #3
 8007078:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800707e:	f043 0210 	orr.w	r2, r3, #16
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f7ff fec0 	bl	8006e14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007094:	bf00      	nop
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f7ff feac 	bl	8006e14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80070bc:	bf00      	nop
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	603b      	str	r3, [r7, #0]
 80070d0:	4613      	mov	r3, r2
 80070d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80070d4:	f7fc fb5e 	bl	8003794 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070dc:	1a9b      	subs	r3, r3, r2
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	4413      	add	r3, r2
 80070e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070e4:	f7fc fb56 	bl	8003794 <HAL_GetTick>
 80070e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80070ea:	4b39      	ldr	r3, [pc, #228]	@ (80071d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	015b      	lsls	r3, r3, #5
 80070f0:	0d1b      	lsrs	r3, r3, #20
 80070f2:	69fa      	ldr	r2, [r7, #28]
 80070f4:	fb02 f303 	mul.w	r3, r2, r3
 80070f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070fa:	e054      	b.n	80071a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007102:	d050      	beq.n	80071a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007104:	f7fc fb46 	bl	8003794 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	69fa      	ldr	r2, [r7, #28]
 8007110:	429a      	cmp	r2, r3
 8007112:	d902      	bls.n	800711a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d13d      	bne.n	8007196 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007128:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007132:	d111      	bne.n	8007158 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800713c:	d004      	beq.n	8007148 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007146:	d107      	bne.n	8007158 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007156:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007160:	d10f      	bne.n	8007182 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007180:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e017      	b.n	80071c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	4013      	ands	r3, r2
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	bf0c      	ite	eq
 80071b6:	2301      	moveq	r3, #1
 80071b8:	2300      	movne	r3, #0
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	461a      	mov	r2, r3
 80071be:	79fb      	ldrb	r3, [r7, #7]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d19b      	bne.n	80070fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3720      	adds	r7, #32
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	20000090 	.word	0x20000090

080071d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af02      	add	r7, sp, #8
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071e8:	d111      	bne.n	800720e <SPI_EndRxTransaction+0x3a>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071f2:	d004      	beq.n	80071fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071fc:	d107      	bne.n	800720e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800720c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007216:	d12a      	bne.n	800726e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007220:	d012      	beq.n	8007248 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2200      	movs	r2, #0
 800722a:	2180      	movs	r1, #128	@ 0x80
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f7ff ff49 	bl	80070c4 <SPI_WaitFlagStateUntilTimeout>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d02d      	beq.n	8007294 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800723c:	f043 0220 	orr.w	r2, r3, #32
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e026      	b.n	8007296 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2200      	movs	r2, #0
 8007250:	2101      	movs	r1, #1
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f7ff ff36 	bl	80070c4 <SPI_WaitFlagStateUntilTimeout>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d01a      	beq.n	8007294 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007262:	f043 0220 	orr.w	r2, r3, #32
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e013      	b.n	8007296 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2200      	movs	r2, #0
 8007276:	2101      	movs	r1, #1
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f7ff ff23 	bl	80070c4 <SPI_WaitFlagStateUntilTimeout>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d007      	beq.n	8007294 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007288:	f043 0220 	orr.w	r2, r3, #32
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e000      	b.n	8007296 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af02      	add	r7, sp, #8
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2201      	movs	r2, #1
 80072b4:	2102      	movs	r1, #2
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f7ff ff04 	bl	80070c4 <SPI_WaitFlagStateUntilTimeout>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d007      	beq.n	80072d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072c6:	f043 0220 	orr.w	r2, r3, #32
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e032      	b.n	8007338 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80072d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007340 <SPI_EndRxTxTransaction+0xa0>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a1b      	ldr	r2, [pc, #108]	@ (8007344 <SPI_EndRxTxTransaction+0xa4>)
 80072d8:	fba2 2303 	umull	r2, r3, r2, r3
 80072dc:	0d5b      	lsrs	r3, r3, #21
 80072de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80072e2:	fb02 f303 	mul.w	r3, r2, r3
 80072e6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072f0:	d112      	bne.n	8007318 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	2200      	movs	r2, #0
 80072fa:	2180      	movs	r1, #128	@ 0x80
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f7ff fee1 	bl	80070c4 <SPI_WaitFlagStateUntilTimeout>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d016      	beq.n	8007336 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800730c:	f043 0220 	orr.w	r2, r3, #32
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e00f      	b.n	8007338 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	3b01      	subs	r3, #1
 8007322:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800732e:	2b80      	cmp	r3, #128	@ 0x80
 8007330:	d0f2      	beq.n	8007318 <SPI_EndRxTxTransaction+0x78>
 8007332:	e000      	b.n	8007336 <SPI_EndRxTxTransaction+0x96>
        break;
 8007334:	bf00      	nop
  }

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	20000090 	.word	0x20000090
 8007344:	165e9f81 	.word	0x165e9f81

08007348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e041      	b.n	80073de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	d106      	bne.n	8007374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f839 	bl	80073e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3304      	adds	r3, #4
 8007384:	4619      	mov	r1, r3
 8007386:	4610      	mov	r0, r2
 8007388:	f000 f9b2 	bl	80076f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80073ee:	bf00      	nop
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
	...

080073fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b01      	cmp	r3, #1
 800740e:	d001      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e044      	b.n	800749e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68da      	ldr	r2, [r3, #12]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f042 0201 	orr.w	r2, r2, #1
 800742a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a1e      	ldr	r2, [pc, #120]	@ (80074ac <HAL_TIM_Base_Start_IT+0xb0>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d018      	beq.n	8007468 <HAL_TIM_Base_Start_IT+0x6c>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800743e:	d013      	beq.n	8007468 <HAL_TIM_Base_Start_IT+0x6c>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a1a      	ldr	r2, [pc, #104]	@ (80074b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d00e      	beq.n	8007468 <HAL_TIM_Base_Start_IT+0x6c>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a19      	ldr	r2, [pc, #100]	@ (80074b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d009      	beq.n	8007468 <HAL_TIM_Base_Start_IT+0x6c>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a17      	ldr	r2, [pc, #92]	@ (80074b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d004      	beq.n	8007468 <HAL_TIM_Base_Start_IT+0x6c>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a16      	ldr	r2, [pc, #88]	@ (80074bc <HAL_TIM_Base_Start_IT+0xc0>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d111      	bne.n	800748c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f003 0307 	and.w	r3, r3, #7
 8007472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b06      	cmp	r3, #6
 8007478:	d010      	beq.n	800749c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f042 0201 	orr.w	r2, r2, #1
 8007488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800748a:	e007      	b.n	800749c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0201 	orr.w	r2, r2, #1
 800749a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	40010000 	.word	0x40010000
 80074b0:	40000400 	.word	0x40000400
 80074b4:	40000800 	.word	0x40000800
 80074b8:	40000c00 	.word	0x40000c00
 80074bc:	40014000 	.word	0x40014000

080074c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f003 0302 	and.w	r3, r3, #2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d020      	beq.n	8007524 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d01b      	beq.n	8007524 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0202 	mvn.w	r2, #2
 80074f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	f003 0303 	and.w	r3, r3, #3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f8d2 	bl	80076b4 <HAL_TIM_IC_CaptureCallback>
 8007510:	e005      	b.n	800751e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f8c4 	bl	80076a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f8d5 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f003 0304 	and.w	r3, r3, #4
 800752a:	2b00      	cmp	r3, #0
 800752c:	d020      	beq.n	8007570 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b00      	cmp	r3, #0
 8007536:	d01b      	beq.n	8007570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f06f 0204 	mvn.w	r2, #4
 8007540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2202      	movs	r2, #2
 8007546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f8ac 	bl	80076b4 <HAL_TIM_IC_CaptureCallback>
 800755c:	e005      	b.n	800756a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f89e 	bl	80076a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f8af 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	f003 0308 	and.w	r3, r3, #8
 8007576:	2b00      	cmp	r3, #0
 8007578:	d020      	beq.n	80075bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f003 0308 	and.w	r3, r3, #8
 8007580:	2b00      	cmp	r3, #0
 8007582:	d01b      	beq.n	80075bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f06f 0208 	mvn.w	r2, #8
 800758c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2204      	movs	r2, #4
 8007592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	f003 0303 	and.w	r3, r3, #3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f886 	bl	80076b4 <HAL_TIM_IC_CaptureCallback>
 80075a8:	e005      	b.n	80075b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f878 	bl	80076a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f889 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f003 0310 	and.w	r3, r3, #16
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d020      	beq.n	8007608 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f003 0310 	and.w	r3, r3, #16
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d01b      	beq.n	8007608 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f06f 0210 	mvn.w	r2, #16
 80075d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2208      	movs	r2, #8
 80075de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f860 	bl	80076b4 <HAL_TIM_IC_CaptureCallback>
 80075f4:	e005      	b.n	8007602 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f852 	bl	80076a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f863 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00c      	beq.n	800762c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	d007      	beq.n	800762c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f06f 0201 	mvn.w	r2, #1
 8007624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7fb fd96 	bl	8003158 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00c      	beq.n	8007650 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800763c:	2b00      	cmp	r3, #0
 800763e:	d007      	beq.n	8007650 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f8e6 	bl	800781c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00c      	beq.n	8007674 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800766c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f834 	bl	80076dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00c      	beq.n	8007698 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f003 0320 	and.w	r3, r3, #32
 8007684:	2b00      	cmp	r3, #0
 8007686:	d007      	beq.n	8007698 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f06f 0220 	mvn.w	r2, #32
 8007690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f8b8 	bl	8007808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007698:	bf00      	nop
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a3a      	ldr	r2, [pc, #232]	@ (80077ec <TIM_Base_SetConfig+0xfc>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d00f      	beq.n	8007728 <TIM_Base_SetConfig+0x38>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800770e:	d00b      	beq.n	8007728 <TIM_Base_SetConfig+0x38>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a37      	ldr	r2, [pc, #220]	@ (80077f0 <TIM_Base_SetConfig+0x100>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d007      	beq.n	8007728 <TIM_Base_SetConfig+0x38>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a36      	ldr	r2, [pc, #216]	@ (80077f4 <TIM_Base_SetConfig+0x104>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d003      	beq.n	8007728 <TIM_Base_SetConfig+0x38>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a35      	ldr	r2, [pc, #212]	@ (80077f8 <TIM_Base_SetConfig+0x108>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d108      	bne.n	800773a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800772e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	4313      	orrs	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a2b      	ldr	r2, [pc, #172]	@ (80077ec <TIM_Base_SetConfig+0xfc>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d01b      	beq.n	800777a <TIM_Base_SetConfig+0x8a>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007748:	d017      	beq.n	800777a <TIM_Base_SetConfig+0x8a>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a28      	ldr	r2, [pc, #160]	@ (80077f0 <TIM_Base_SetConfig+0x100>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d013      	beq.n	800777a <TIM_Base_SetConfig+0x8a>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a27      	ldr	r2, [pc, #156]	@ (80077f4 <TIM_Base_SetConfig+0x104>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d00f      	beq.n	800777a <TIM_Base_SetConfig+0x8a>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a26      	ldr	r2, [pc, #152]	@ (80077f8 <TIM_Base_SetConfig+0x108>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00b      	beq.n	800777a <TIM_Base_SetConfig+0x8a>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a25      	ldr	r2, [pc, #148]	@ (80077fc <TIM_Base_SetConfig+0x10c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d007      	beq.n	800777a <TIM_Base_SetConfig+0x8a>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a24      	ldr	r2, [pc, #144]	@ (8007800 <TIM_Base_SetConfig+0x110>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d003      	beq.n	800777a <TIM_Base_SetConfig+0x8a>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a23      	ldr	r2, [pc, #140]	@ (8007804 <TIM_Base_SetConfig+0x114>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d108      	bne.n	800778c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	4313      	orrs	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a0e      	ldr	r2, [pc, #56]	@ (80077ec <TIM_Base_SetConfig+0xfc>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d103      	bne.n	80077c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	691a      	ldr	r2, [r3, #16]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d105      	bne.n	80077de <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f023 0201 	bic.w	r2, r3, #1
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	611a      	str	r2, [r3, #16]
  }
}
 80077de:	bf00      	nop
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	40010000 	.word	0x40010000
 80077f0:	40000400 	.word	0x40000400
 80077f4:	40000800 	.word	0x40000800
 80077f8:	40000c00 	.word	0x40000c00
 80077fc:	40014000 	.word	0x40014000
 8007800:	40014400 	.word	0x40014400
 8007804:	40014800 	.word	0x40014800

08007808 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	4603      	mov	r3, r0
 8007838:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800783a:	2300      	movs	r3, #0
 800783c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800783e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007842:	2b84      	cmp	r3, #132	@ 0x84
 8007844:	d005      	beq.n	8007852 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007846:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4413      	add	r3, r2
 800784e:	3303      	adds	r3, #3
 8007850:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007852:	68fb      	ldr	r3, [r7, #12]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007864:	f000 fae4 	bl	8007e30 <vTaskStartScheduler>
  
  return osOK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	bd80      	pop	{r7, pc}

0800786e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800786e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007870:	b089      	sub	sp, #36	@ 0x24
 8007872:	af04      	add	r7, sp, #16
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d020      	beq.n	80078c2 <osThreadCreate+0x54>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01c      	beq.n	80078c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685c      	ldr	r4, [r3, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691e      	ldr	r6, [r3, #16]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff ffc8 	bl	8007830 <makeFreeRtosPriority>
 80078a0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078aa:	9202      	str	r2, [sp, #8]
 80078ac:	9301      	str	r3, [sp, #4]
 80078ae:	9100      	str	r1, [sp, #0]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	4632      	mov	r2, r6
 80078b4:	4629      	mov	r1, r5
 80078b6:	4620      	mov	r0, r4
 80078b8:	f000 f8ed 	bl	8007a96 <xTaskCreateStatic>
 80078bc:	4603      	mov	r3, r0
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	e01c      	b.n	80078fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685c      	ldr	r4, [r3, #4]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078ce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7ff ffaa 	bl	8007830 <makeFreeRtosPriority>
 80078dc:	4602      	mov	r2, r0
 80078de:	f107 030c 	add.w	r3, r7, #12
 80078e2:	9301      	str	r3, [sp, #4]
 80078e4:	9200      	str	r2, [sp, #0]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	4632      	mov	r2, r6
 80078ea:	4629      	mov	r1, r5
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 f932 	bl	8007b56 <xTaskCreate>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d001      	beq.n	80078fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80078f8:	2300      	movs	r3, #0
 80078fa:	e000      	b.n	80078fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80078fc:	68fb      	ldr	r3, [r7, #12]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007906 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <osDelay+0x16>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	e000      	b.n	800791e <osDelay+0x18>
 800791c:	2301      	movs	r3, #1
 800791e:	4618      	mov	r0, r3
 8007920:	f000 fa50 	bl	8007dc4 <vTaskDelay>
  
  return osOK;
 8007924:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f103 0208 	add.w	r2, r3, #8
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f04f 32ff 	mov.w	r2, #4294967295
 8007946:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f103 0208 	add.w	r2, r3, #8
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f103 0208 	add.w	r2, r3, #8
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007962:	bf00      	nop
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800796e:	b480      	push	{r7}
 8007970:	b083      	sub	sp, #12
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	689a      	ldr	r2, [r3, #8]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	601a      	str	r2, [r3, #0]
}
 80079c4:	bf00      	nop
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e6:	d103      	bne.n	80079f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	60fb      	str	r3, [r7, #12]
 80079ee:	e00c      	b.n	8007a0a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3308      	adds	r3, #8
 80079f4:	60fb      	str	r3, [r7, #12]
 80079f6:	e002      	b.n	80079fe <vListInsert+0x2e>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	60fb      	str	r3, [r7, #12]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d2f6      	bcs.n	80079f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	601a      	str	r2, [r3, #0]
}
 8007a36:	bf00      	nop
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a42:	b480      	push	{r7}
 8007a44:	b085      	sub	sp, #20
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	6892      	ldr	r2, [r2, #8]
 8007a58:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	6852      	ldr	r2, [r2, #4]
 8007a62:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d103      	bne.n	8007a76 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	689a      	ldr	r2, [r3, #8]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	1e5a      	subs	r2, r3, #1
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b08e      	sub	sp, #56	@ 0x38
 8007a9a:	af04      	add	r7, sp, #16
 8007a9c:	60f8      	str	r0, [r7, #12]
 8007a9e:	60b9      	str	r1, [r7, #8]
 8007aa0:	607a      	str	r2, [r7, #4]
 8007aa2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10b      	bne.n	8007ac2 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007abc:	bf00      	nop
 8007abe:	bf00      	nop
 8007ac0:	e7fd      	b.n	8007abe <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10b      	bne.n	8007ae0 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	61fb      	str	r3, [r7, #28]
}
 8007ada:	bf00      	nop
 8007adc:	bf00      	nop
 8007ade:	e7fd      	b.n	8007adc <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ae0:	2354      	movs	r3, #84	@ 0x54
 8007ae2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	2b54      	cmp	r3, #84	@ 0x54
 8007ae8:	d00b      	beq.n	8007b02 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	61bb      	str	r3, [r7, #24]
}
 8007afc:	bf00      	nop
 8007afe:	bf00      	nop
 8007b00:	e7fd      	b.n	8007afe <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d01e      	beq.n	8007b48 <xTaskCreateStatic+0xb2>
 8007b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d01b      	beq.n	8007b48 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b12:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b18:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1c:	2202      	movs	r2, #2
 8007b1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b22:	2300      	movs	r3, #0
 8007b24:	9303      	str	r3, [sp, #12]
 8007b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b28:	9302      	str	r3, [sp, #8]
 8007b2a:	f107 0314 	add.w	r3, r7, #20
 8007b2e:	9301      	str	r3, [sp, #4]
 8007b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	68b9      	ldr	r1, [r7, #8]
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f000 f850 	bl	8007be0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b42:	f000 f8d5 	bl	8007cf0 <prvAddNewTaskToReadyList>
 8007b46:	e001      	b.n	8007b4c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b4c:	697b      	ldr	r3, [r7, #20]
	}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3728      	adds	r7, #40	@ 0x28
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b08c      	sub	sp, #48	@ 0x30
 8007b5a:	af04      	add	r7, sp, #16
 8007b5c:	60f8      	str	r0, [r7, #12]
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	603b      	str	r3, [r7, #0]
 8007b62:	4613      	mov	r3, r2
 8007b64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b66:	88fb      	ldrh	r3, [r7, #6]
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 fed4 	bl	8008918 <pvPortMalloc>
 8007b70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00e      	beq.n	8007b96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b78:	2054      	movs	r0, #84	@ 0x54
 8007b7a:	f000 fecd 	bl	8008918 <pvPortMalloc>
 8007b7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b8c:	e005      	b.n	8007b9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b8e:	6978      	ldr	r0, [r7, #20]
 8007b90:	f000 ff90 	bl	8008ab4 <vPortFree>
 8007b94:	e001      	b.n	8007b9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b96:	2300      	movs	r3, #0
 8007b98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d017      	beq.n	8007bd0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ba8:	88fa      	ldrh	r2, [r7, #6]
 8007baa:	2300      	movs	r3, #0
 8007bac:	9303      	str	r3, [sp, #12]
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	9302      	str	r3, [sp, #8]
 8007bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb4:	9301      	str	r3, [sp, #4]
 8007bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	68b9      	ldr	r1, [r7, #8]
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f000 f80e 	bl	8007be0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bc4:	69f8      	ldr	r0, [r7, #28]
 8007bc6:	f000 f893 	bl	8007cf0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	61bb      	str	r3, [r7, #24]
 8007bce:	e002      	b.n	8007bd6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007bd6:	69bb      	ldr	r3, [r7, #24]
	}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3720      	adds	r7, #32
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	f023 0307 	bic.w	r3, r3, #7
 8007c06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	f003 0307 	and.w	r3, r3, #7
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00b      	beq.n	8007c2a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	617b      	str	r3, [r7, #20]
}
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop
 8007c28:	e7fd      	b.n	8007c26 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d01f      	beq.n	8007c70 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c30:	2300      	movs	r3, #0
 8007c32:	61fb      	str	r3, [r7, #28]
 8007c34:	e012      	b.n	8007c5c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	7819      	ldrb	r1, [r3, #0]
 8007c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	4413      	add	r3, r2
 8007c44:	3334      	adds	r3, #52	@ 0x34
 8007c46:	460a      	mov	r2, r1
 8007c48:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	4413      	add	r3, r2
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d006      	beq.n	8007c64 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	61fb      	str	r3, [r7, #28]
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	2b0f      	cmp	r3, #15
 8007c60:	d9e9      	bls.n	8007c36 <prvInitialiseNewTask+0x56>
 8007c62:	e000      	b.n	8007c66 <prvInitialiseNewTask+0x86>
			{
				break;
 8007c64:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c6e:	e003      	b.n	8007c78 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7a:	2b06      	cmp	r3, #6
 8007c7c:	d901      	bls.n	8007c82 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c7e:	2306      	movs	r3, #6
 8007c80:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c86:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c8c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c90:	2200      	movs	r2, #0
 8007c92:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c96:	3304      	adds	r3, #4
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7ff fe68 	bl	800796e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca0:	3318      	adds	r3, #24
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff fe63 	bl	800796e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007caa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb0:	f1c3 0207 	rsb	r2, r3, #7
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cbc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	68f9      	ldr	r1, [r7, #12]
 8007cd0:	69b8      	ldr	r0, [r7, #24]
 8007cd2:	f000 fc0d 	bl	80084f0 <pxPortInitialiseStack>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cda:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d002      	beq.n	8007ce8 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ce4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ce6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ce8:	bf00      	nop
 8007cea:	3720      	adds	r7, #32
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007cf8:	f000 fd2e 	bl	8008758 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8007da8 <prvAddNewTaskToReadyList+0xb8>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3301      	adds	r3, #1
 8007d02:	4a29      	ldr	r2, [pc, #164]	@ (8007da8 <prvAddNewTaskToReadyList+0xb8>)
 8007d04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d06:	4b29      	ldr	r3, [pc, #164]	@ (8007dac <prvAddNewTaskToReadyList+0xbc>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d109      	bne.n	8007d22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d0e:	4a27      	ldr	r2, [pc, #156]	@ (8007dac <prvAddNewTaskToReadyList+0xbc>)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d14:	4b24      	ldr	r3, [pc, #144]	@ (8007da8 <prvAddNewTaskToReadyList+0xb8>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d110      	bne.n	8007d3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d1c:	f000 fac4 	bl	80082a8 <prvInitialiseTaskLists>
 8007d20:	e00d      	b.n	8007d3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d22:	4b23      	ldr	r3, [pc, #140]	@ (8007db0 <prvAddNewTaskToReadyList+0xc0>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d109      	bne.n	8007d3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d2a:	4b20      	ldr	r3, [pc, #128]	@ (8007dac <prvAddNewTaskToReadyList+0xbc>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d802      	bhi.n	8007d3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d38:	4a1c      	ldr	r2, [pc, #112]	@ (8007dac <prvAddNewTaskToReadyList+0xbc>)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8007db4 <prvAddNewTaskToReadyList+0xc4>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3301      	adds	r3, #1
 8007d44:	4a1b      	ldr	r2, [pc, #108]	@ (8007db4 <prvAddNewTaskToReadyList+0xc4>)
 8007d46:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	409a      	lsls	r2, r3
 8007d50:	4b19      	ldr	r3, [pc, #100]	@ (8007db8 <prvAddNewTaskToReadyList+0xc8>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	4a18      	ldr	r2, [pc, #96]	@ (8007db8 <prvAddNewTaskToReadyList+0xc8>)
 8007d58:	6013      	str	r3, [r2, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d5e:	4613      	mov	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4a15      	ldr	r2, [pc, #84]	@ (8007dbc <prvAddNewTaskToReadyList+0xcc>)
 8007d68:	441a      	add	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	4619      	mov	r1, r3
 8007d70:	4610      	mov	r0, r2
 8007d72:	f7ff fe09 	bl	8007988 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d76:	f000 fd21 	bl	80087bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007db0 <prvAddNewTaskToReadyList+0xc0>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00e      	beq.n	8007da0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d82:	4b0a      	ldr	r3, [pc, #40]	@ (8007dac <prvAddNewTaskToReadyList+0xbc>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d207      	bcs.n	8007da0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d90:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc0 <prvAddNewTaskToReadyList+0xd0>)
 8007d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20000864 	.word	0x20000864
 8007dac:	20000764 	.word	0x20000764
 8007db0:	20000870 	.word	0x20000870
 8007db4:	20000880 	.word	0x20000880
 8007db8:	2000086c 	.word	0x2000086c
 8007dbc:	20000768 	.word	0x20000768
 8007dc0:	e000ed04 	.word	0xe000ed04

08007dc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d018      	beq.n	8007e08 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007dd6:	4b14      	ldr	r3, [pc, #80]	@ (8007e28 <vTaskDelay+0x64>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00b      	beq.n	8007df6 <vTaskDelay+0x32>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	60bb      	str	r3, [r7, #8]
}
 8007df0:	bf00      	nop
 8007df2:	bf00      	nop
 8007df4:	e7fd      	b.n	8007df2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007df6:	f000 f87d 	bl	8007ef4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fb11 	bl	8008424 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e02:	f000 f885 	bl	8007f10 <xTaskResumeAll>
 8007e06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d107      	bne.n	8007e1e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007e0e:	4b07      	ldr	r3, [pc, #28]	@ (8007e2c <vTaskDelay+0x68>)
 8007e10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e1e:	bf00      	nop
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	2000088c 	.word	0x2000088c
 8007e2c:	e000ed04 	.word	0xe000ed04

08007e30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08a      	sub	sp, #40	@ 0x28
 8007e34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e3e:	463a      	mov	r2, r7
 8007e40:	1d39      	adds	r1, r7, #4
 8007e42:	f107 0308 	add.w	r3, r7, #8
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fa ff5a 	bl	8002d00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	9202      	str	r2, [sp, #8]
 8007e54:	9301      	str	r3, [sp, #4]
 8007e56:	2300      	movs	r3, #0
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	460a      	mov	r2, r1
 8007e5e:	491f      	ldr	r1, [pc, #124]	@ (8007edc <vTaskStartScheduler+0xac>)
 8007e60:	481f      	ldr	r0, [pc, #124]	@ (8007ee0 <vTaskStartScheduler+0xb0>)
 8007e62:	f7ff fe18 	bl	8007a96 <xTaskCreateStatic>
 8007e66:	4603      	mov	r3, r0
 8007e68:	4a1e      	ldr	r2, [pc, #120]	@ (8007ee4 <vTaskStartScheduler+0xb4>)
 8007e6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ee4 <vTaskStartScheduler+0xb4>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e74:	2301      	movs	r3, #1
 8007e76:	617b      	str	r3, [r7, #20]
 8007e78:	e001      	b.n	8007e7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d116      	bne.n	8007eb2 <vTaskStartScheduler+0x82>
	__asm volatile
 8007e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e88:	f383 8811 	msr	BASEPRI, r3
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	613b      	str	r3, [r7, #16]
}
 8007e96:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e98:	4b13      	ldr	r3, [pc, #76]	@ (8007ee8 <vTaskStartScheduler+0xb8>)
 8007e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ea0:	4b12      	ldr	r3, [pc, #72]	@ (8007eec <vTaskStartScheduler+0xbc>)
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ea6:	4b12      	ldr	r3, [pc, #72]	@ (8007ef0 <vTaskStartScheduler+0xc0>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007eac:	f000 fbb0 	bl	8008610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007eb0:	e00f      	b.n	8007ed2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb8:	d10b      	bne.n	8007ed2 <vTaskStartScheduler+0xa2>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebe:	f383 8811 	msr	BASEPRI, r3
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	60fb      	str	r3, [r7, #12]
}
 8007ecc:	bf00      	nop
 8007ece:	bf00      	nop
 8007ed0:	e7fd      	b.n	8007ece <vTaskStartScheduler+0x9e>
}
 8007ed2:	bf00      	nop
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	080098f4 	.word	0x080098f4
 8007ee0:	08008279 	.word	0x08008279
 8007ee4:	20000888 	.word	0x20000888
 8007ee8:	20000884 	.word	0x20000884
 8007eec:	20000870 	.word	0x20000870
 8007ef0:	20000868 	.word	0x20000868

08007ef4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ef8:	4b04      	ldr	r3, [pc, #16]	@ (8007f0c <vTaskSuspendAll+0x18>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3301      	adds	r3, #1
 8007efe:	4a03      	ldr	r2, [pc, #12]	@ (8007f0c <vTaskSuspendAll+0x18>)
 8007f00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007f02:	bf00      	nop
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	2000088c 	.word	0x2000088c

08007f10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f16:	2300      	movs	r3, #0
 8007f18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f1e:	4b42      	ldr	r3, [pc, #264]	@ (8008028 <xTaskResumeAll+0x118>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10b      	bne.n	8007f3e <xTaskResumeAll+0x2e>
	__asm volatile
 8007f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	603b      	str	r3, [r7, #0]
}
 8007f38:	bf00      	nop
 8007f3a:	bf00      	nop
 8007f3c:	e7fd      	b.n	8007f3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f3e:	f000 fc0b 	bl	8008758 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f42:	4b39      	ldr	r3, [pc, #228]	@ (8008028 <xTaskResumeAll+0x118>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	4a37      	ldr	r2, [pc, #220]	@ (8008028 <xTaskResumeAll+0x118>)
 8007f4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f4c:	4b36      	ldr	r3, [pc, #216]	@ (8008028 <xTaskResumeAll+0x118>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d161      	bne.n	8008018 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f54:	4b35      	ldr	r3, [pc, #212]	@ (800802c <xTaskResumeAll+0x11c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d05d      	beq.n	8008018 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f5c:	e02e      	b.n	8007fbc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f5e:	4b34      	ldr	r3, [pc, #208]	@ (8008030 <xTaskResumeAll+0x120>)
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3318      	adds	r3, #24
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7ff fd69 	bl	8007a42 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	3304      	adds	r3, #4
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7ff fd64 	bl	8007a42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f7e:	2201      	movs	r2, #1
 8007f80:	409a      	lsls	r2, r3
 8007f82:	4b2c      	ldr	r3, [pc, #176]	@ (8008034 <xTaskResumeAll+0x124>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	4a2a      	ldr	r2, [pc, #168]	@ (8008034 <xTaskResumeAll+0x124>)
 8007f8a:	6013      	str	r3, [r2, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f90:	4613      	mov	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4a27      	ldr	r2, [pc, #156]	@ (8008038 <xTaskResumeAll+0x128>)
 8007f9a:	441a      	add	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	4610      	mov	r0, r2
 8007fa4:	f7ff fcf0 	bl	8007988 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fac:	4b23      	ldr	r3, [pc, #140]	@ (800803c <xTaskResumeAll+0x12c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d302      	bcc.n	8007fbc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007fb6:	4b22      	ldr	r3, [pc, #136]	@ (8008040 <xTaskResumeAll+0x130>)
 8007fb8:	2201      	movs	r2, #1
 8007fba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8008030 <xTaskResumeAll+0x120>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1cc      	bne.n	8007f5e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007fca:	f000 fa0b 	bl	80083e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007fce:	4b1d      	ldr	r3, [pc, #116]	@ (8008044 <xTaskResumeAll+0x134>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d010      	beq.n	8007ffc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007fda:	f000 f837 	bl	800804c <xTaskIncrementTick>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007fe4:	4b16      	ldr	r3, [pc, #88]	@ (8008040 <xTaskResumeAll+0x130>)
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	3b01      	subs	r3, #1
 8007fee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1f1      	bne.n	8007fda <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007ff6:	4b13      	ldr	r3, [pc, #76]	@ (8008044 <xTaskResumeAll+0x134>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ffc:	4b10      	ldr	r3, [pc, #64]	@ (8008040 <xTaskResumeAll+0x130>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d009      	beq.n	8008018 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008004:	2301      	movs	r3, #1
 8008006:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008008:	4b0f      	ldr	r3, [pc, #60]	@ (8008048 <xTaskResumeAll+0x138>)
 800800a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008018:	f000 fbd0 	bl	80087bc <vPortExitCritical>

	return xAlreadyYielded;
 800801c:	68bb      	ldr	r3, [r7, #8]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	2000088c 	.word	0x2000088c
 800802c:	20000864 	.word	0x20000864
 8008030:	20000824 	.word	0x20000824
 8008034:	2000086c 	.word	0x2000086c
 8008038:	20000768 	.word	0x20000768
 800803c:	20000764 	.word	0x20000764
 8008040:	20000878 	.word	0x20000878
 8008044:	20000874 	.word	0x20000874
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008052:	2300      	movs	r3, #0
 8008054:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008056:	4b4f      	ldr	r3, [pc, #316]	@ (8008194 <xTaskIncrementTick+0x148>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	f040 808f 	bne.w	800817e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008060:	4b4d      	ldr	r3, [pc, #308]	@ (8008198 <xTaskIncrementTick+0x14c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3301      	adds	r3, #1
 8008066:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008068:	4a4b      	ldr	r2, [pc, #300]	@ (8008198 <xTaskIncrementTick+0x14c>)
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d121      	bne.n	80080b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008074:	4b49      	ldr	r3, [pc, #292]	@ (800819c <xTaskIncrementTick+0x150>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00b      	beq.n	8008096 <xTaskIncrementTick+0x4a>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	603b      	str	r3, [r7, #0]
}
 8008090:	bf00      	nop
 8008092:	bf00      	nop
 8008094:	e7fd      	b.n	8008092 <xTaskIncrementTick+0x46>
 8008096:	4b41      	ldr	r3, [pc, #260]	@ (800819c <xTaskIncrementTick+0x150>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	60fb      	str	r3, [r7, #12]
 800809c:	4b40      	ldr	r3, [pc, #256]	@ (80081a0 <xTaskIncrementTick+0x154>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a3e      	ldr	r2, [pc, #248]	@ (800819c <xTaskIncrementTick+0x150>)
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	4a3e      	ldr	r2, [pc, #248]	@ (80081a0 <xTaskIncrementTick+0x154>)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	4b3e      	ldr	r3, [pc, #248]	@ (80081a4 <xTaskIncrementTick+0x158>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3301      	adds	r3, #1
 80080b0:	4a3c      	ldr	r2, [pc, #240]	@ (80081a4 <xTaskIncrementTick+0x158>)
 80080b2:	6013      	str	r3, [r2, #0]
 80080b4:	f000 f996 	bl	80083e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80080b8:	4b3b      	ldr	r3, [pc, #236]	@ (80081a8 <xTaskIncrementTick+0x15c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d348      	bcc.n	8008154 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080c2:	4b36      	ldr	r3, [pc, #216]	@ (800819c <xTaskIncrementTick+0x150>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d104      	bne.n	80080d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080cc:	4b36      	ldr	r3, [pc, #216]	@ (80081a8 <xTaskIncrementTick+0x15c>)
 80080ce:	f04f 32ff 	mov.w	r2, #4294967295
 80080d2:	601a      	str	r2, [r3, #0]
					break;
 80080d4:	e03e      	b.n	8008154 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080d6:	4b31      	ldr	r3, [pc, #196]	@ (800819c <xTaskIncrementTick+0x150>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d203      	bcs.n	80080f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80080ee:	4a2e      	ldr	r2, [pc, #184]	@ (80081a8 <xTaskIncrementTick+0x15c>)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80080f4:	e02e      	b.n	8008154 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	3304      	adds	r3, #4
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7ff fca1 	bl	8007a42 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008104:	2b00      	cmp	r3, #0
 8008106:	d004      	beq.n	8008112 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	3318      	adds	r3, #24
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff fc98 	bl	8007a42 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008116:	2201      	movs	r2, #1
 8008118:	409a      	lsls	r2, r3
 800811a:	4b24      	ldr	r3, [pc, #144]	@ (80081ac <xTaskIncrementTick+0x160>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4313      	orrs	r3, r2
 8008120:	4a22      	ldr	r2, [pc, #136]	@ (80081ac <xTaskIncrementTick+0x160>)
 8008122:	6013      	str	r3, [r2, #0]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008128:	4613      	mov	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4a1f      	ldr	r2, [pc, #124]	@ (80081b0 <xTaskIncrementTick+0x164>)
 8008132:	441a      	add	r2, r3
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	3304      	adds	r3, #4
 8008138:	4619      	mov	r1, r3
 800813a:	4610      	mov	r0, r2
 800813c:	f7ff fc24 	bl	8007988 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008144:	4b1b      	ldr	r3, [pc, #108]	@ (80081b4 <xTaskIncrementTick+0x168>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814a:	429a      	cmp	r2, r3
 800814c:	d3b9      	bcc.n	80080c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800814e:	2301      	movs	r3, #1
 8008150:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008152:	e7b6      	b.n	80080c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008154:	4b17      	ldr	r3, [pc, #92]	@ (80081b4 <xTaskIncrementTick+0x168>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800815a:	4915      	ldr	r1, [pc, #84]	@ (80081b0 <xTaskIncrementTick+0x164>)
 800815c:	4613      	mov	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4413      	add	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	440b      	add	r3, r1
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d901      	bls.n	8008170 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800816c:	2301      	movs	r3, #1
 800816e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008170:	4b11      	ldr	r3, [pc, #68]	@ (80081b8 <xTaskIncrementTick+0x16c>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d007      	beq.n	8008188 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008178:	2301      	movs	r3, #1
 800817a:	617b      	str	r3, [r7, #20]
 800817c:	e004      	b.n	8008188 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800817e:	4b0f      	ldr	r3, [pc, #60]	@ (80081bc <xTaskIncrementTick+0x170>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3301      	adds	r3, #1
 8008184:	4a0d      	ldr	r2, [pc, #52]	@ (80081bc <xTaskIncrementTick+0x170>)
 8008186:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008188:	697b      	ldr	r3, [r7, #20]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	2000088c 	.word	0x2000088c
 8008198:	20000868 	.word	0x20000868
 800819c:	2000081c 	.word	0x2000081c
 80081a0:	20000820 	.word	0x20000820
 80081a4:	2000087c 	.word	0x2000087c
 80081a8:	20000884 	.word	0x20000884
 80081ac:	2000086c 	.word	0x2000086c
 80081b0:	20000768 	.word	0x20000768
 80081b4:	20000764 	.word	0x20000764
 80081b8:	20000878 	.word	0x20000878
 80081bc:	20000874 	.word	0x20000874

080081c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081c6:	4b27      	ldr	r3, [pc, #156]	@ (8008264 <vTaskSwitchContext+0xa4>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80081ce:	4b26      	ldr	r3, [pc, #152]	@ (8008268 <vTaskSwitchContext+0xa8>)
 80081d0:	2201      	movs	r2, #1
 80081d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80081d4:	e040      	b.n	8008258 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80081d6:	4b24      	ldr	r3, [pc, #144]	@ (8008268 <vTaskSwitchContext+0xa8>)
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081dc:	4b23      	ldr	r3, [pc, #140]	@ (800826c <vTaskSwitchContext+0xac>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	fab3 f383 	clz	r3, r3
 80081e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80081ea:	7afb      	ldrb	r3, [r7, #11]
 80081ec:	f1c3 031f 	rsb	r3, r3, #31
 80081f0:	617b      	str	r3, [r7, #20]
 80081f2:	491f      	ldr	r1, [pc, #124]	@ (8008270 <vTaskSwitchContext+0xb0>)
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	4613      	mov	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	440b      	add	r3, r1
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10b      	bne.n	800821e <vTaskSwitchContext+0x5e>
	__asm volatile
 8008206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	607b      	str	r3, [r7, #4]
}
 8008218:	bf00      	nop
 800821a:	bf00      	nop
 800821c:	e7fd      	b.n	800821a <vTaskSwitchContext+0x5a>
 800821e:	697a      	ldr	r2, [r7, #20]
 8008220:	4613      	mov	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4a11      	ldr	r2, [pc, #68]	@ (8008270 <vTaskSwitchContext+0xb0>)
 800822a:	4413      	add	r3, r2
 800822c:	613b      	str	r3, [r7, #16]
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	605a      	str	r2, [r3, #4]
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	3308      	adds	r3, #8
 8008240:	429a      	cmp	r2, r3
 8008242:	d104      	bne.n	800824e <vTaskSwitchContext+0x8e>
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	605a      	str	r2, [r3, #4]
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	4a07      	ldr	r2, [pc, #28]	@ (8008274 <vTaskSwitchContext+0xb4>)
 8008256:	6013      	str	r3, [r2, #0]
}
 8008258:	bf00      	nop
 800825a:	371c      	adds	r7, #28
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	2000088c 	.word	0x2000088c
 8008268:	20000878 	.word	0x20000878
 800826c:	2000086c 	.word	0x2000086c
 8008270:	20000768 	.word	0x20000768
 8008274:	20000764 	.word	0x20000764

08008278 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008280:	f000 f852 	bl	8008328 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008284:	4b06      	ldr	r3, [pc, #24]	@ (80082a0 <prvIdleTask+0x28>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d9f9      	bls.n	8008280 <prvIdleTask+0x8>
			{
				taskYIELD();
 800828c:	4b05      	ldr	r3, [pc, #20]	@ (80082a4 <prvIdleTask+0x2c>)
 800828e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800829c:	e7f0      	b.n	8008280 <prvIdleTask+0x8>
 800829e:	bf00      	nop
 80082a0:	20000768 	.word	0x20000768
 80082a4:	e000ed04 	.word	0xe000ed04

080082a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082ae:	2300      	movs	r3, #0
 80082b0:	607b      	str	r3, [r7, #4]
 80082b2:	e00c      	b.n	80082ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	4613      	mov	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4a12      	ldr	r2, [pc, #72]	@ (8008308 <prvInitialiseTaskLists+0x60>)
 80082c0:	4413      	add	r3, r2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff fb33 	bl	800792e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3301      	adds	r3, #1
 80082cc:	607b      	str	r3, [r7, #4]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b06      	cmp	r3, #6
 80082d2:	d9ef      	bls.n	80082b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082d4:	480d      	ldr	r0, [pc, #52]	@ (800830c <prvInitialiseTaskLists+0x64>)
 80082d6:	f7ff fb2a 	bl	800792e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082da:	480d      	ldr	r0, [pc, #52]	@ (8008310 <prvInitialiseTaskLists+0x68>)
 80082dc:	f7ff fb27 	bl	800792e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082e0:	480c      	ldr	r0, [pc, #48]	@ (8008314 <prvInitialiseTaskLists+0x6c>)
 80082e2:	f7ff fb24 	bl	800792e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082e6:	480c      	ldr	r0, [pc, #48]	@ (8008318 <prvInitialiseTaskLists+0x70>)
 80082e8:	f7ff fb21 	bl	800792e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082ec:	480b      	ldr	r0, [pc, #44]	@ (800831c <prvInitialiseTaskLists+0x74>)
 80082ee:	f7ff fb1e 	bl	800792e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008320 <prvInitialiseTaskLists+0x78>)
 80082f4:	4a05      	ldr	r2, [pc, #20]	@ (800830c <prvInitialiseTaskLists+0x64>)
 80082f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008324 <prvInitialiseTaskLists+0x7c>)
 80082fa:	4a05      	ldr	r2, [pc, #20]	@ (8008310 <prvInitialiseTaskLists+0x68>)
 80082fc:	601a      	str	r2, [r3, #0]
}
 80082fe:	bf00      	nop
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20000768 	.word	0x20000768
 800830c:	200007f4 	.word	0x200007f4
 8008310:	20000808 	.word	0x20000808
 8008314:	20000824 	.word	0x20000824
 8008318:	20000838 	.word	0x20000838
 800831c:	20000850 	.word	0x20000850
 8008320:	2000081c 	.word	0x2000081c
 8008324:	20000820 	.word	0x20000820

08008328 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800832e:	e019      	b.n	8008364 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008330:	f000 fa12 	bl	8008758 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008334:	4b10      	ldr	r3, [pc, #64]	@ (8008378 <prvCheckTasksWaitingTermination+0x50>)
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	3304      	adds	r3, #4
 8008340:	4618      	mov	r0, r3
 8008342:	f7ff fb7e 	bl	8007a42 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008346:	4b0d      	ldr	r3, [pc, #52]	@ (800837c <prvCheckTasksWaitingTermination+0x54>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	3b01      	subs	r3, #1
 800834c:	4a0b      	ldr	r2, [pc, #44]	@ (800837c <prvCheckTasksWaitingTermination+0x54>)
 800834e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008350:	4b0b      	ldr	r3, [pc, #44]	@ (8008380 <prvCheckTasksWaitingTermination+0x58>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3b01      	subs	r3, #1
 8008356:	4a0a      	ldr	r2, [pc, #40]	@ (8008380 <prvCheckTasksWaitingTermination+0x58>)
 8008358:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800835a:	f000 fa2f 	bl	80087bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f810 	bl	8008384 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008364:	4b06      	ldr	r3, [pc, #24]	@ (8008380 <prvCheckTasksWaitingTermination+0x58>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1e1      	bne.n	8008330 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800836c:	bf00      	nop
 800836e:	bf00      	nop
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20000838 	.word	0x20000838
 800837c:	20000864 	.word	0x20000864
 8008380:	2000084c 	.word	0x2000084c

08008384 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008392:	2b00      	cmp	r3, #0
 8008394:	d108      	bne.n	80083a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800839a:	4618      	mov	r0, r3
 800839c:	f000 fb8a 	bl	8008ab4 <vPortFree>
				vPortFree( pxTCB );
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fb87 	bl	8008ab4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083a6:	e019      	b.n	80083dc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d103      	bne.n	80083ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fb7e 	bl	8008ab4 <vPortFree>
	}
 80083b8:	e010      	b.n	80083dc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d00b      	beq.n	80083dc <prvDeleteTCB+0x58>
	__asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	60fb      	str	r3, [r7, #12]
}
 80083d6:	bf00      	nop
 80083d8:	bf00      	nop
 80083da:	e7fd      	b.n	80083d8 <prvDeleteTCB+0x54>
	}
 80083dc:	bf00      	nop
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083ea:	4b0c      	ldr	r3, [pc, #48]	@ (800841c <prvResetNextTaskUnblockTime+0x38>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d104      	bne.n	80083fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80083f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008420 <prvResetNextTaskUnblockTime+0x3c>)
 80083f6:	f04f 32ff 	mov.w	r2, #4294967295
 80083fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80083fc:	e008      	b.n	8008410 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083fe:	4b07      	ldr	r3, [pc, #28]	@ (800841c <prvResetNextTaskUnblockTime+0x38>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	4a04      	ldr	r2, [pc, #16]	@ (8008420 <prvResetNextTaskUnblockTime+0x3c>)
 800840e:	6013      	str	r3, [r2, #0]
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	2000081c 	.word	0x2000081c
 8008420:	20000884 	.word	0x20000884

08008424 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800842e:	4b29      	ldr	r3, [pc, #164]	@ (80084d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008434:	4b28      	ldr	r3, [pc, #160]	@ (80084d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3304      	adds	r3, #4
 800843a:	4618      	mov	r0, r3
 800843c:	f7ff fb01 	bl	8007a42 <uxListRemove>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10b      	bne.n	800845e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008446:	4b24      	ldr	r3, [pc, #144]	@ (80084d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844c:	2201      	movs	r2, #1
 800844e:	fa02 f303 	lsl.w	r3, r2, r3
 8008452:	43da      	mvns	r2, r3
 8008454:	4b21      	ldr	r3, [pc, #132]	@ (80084dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4013      	ands	r3, r2
 800845a:	4a20      	ldr	r2, [pc, #128]	@ (80084dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800845c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008464:	d10a      	bne.n	800847c <prvAddCurrentTaskToDelayedList+0x58>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d007      	beq.n	800847c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800846c:	4b1a      	ldr	r3, [pc, #104]	@ (80084d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3304      	adds	r3, #4
 8008472:	4619      	mov	r1, r3
 8008474:	481a      	ldr	r0, [pc, #104]	@ (80084e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008476:	f7ff fa87 	bl	8007988 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800847a:	e026      	b.n	80084ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4413      	add	r3, r2
 8008482:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008484:	4b14      	ldr	r3, [pc, #80]	@ (80084d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	429a      	cmp	r2, r3
 8008492:	d209      	bcs.n	80084a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008494:	4b13      	ldr	r3, [pc, #76]	@ (80084e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	4b0f      	ldr	r3, [pc, #60]	@ (80084d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3304      	adds	r3, #4
 800849e:	4619      	mov	r1, r3
 80084a0:	4610      	mov	r0, r2
 80084a2:	f7ff fa95 	bl	80079d0 <vListInsert>
}
 80084a6:	e010      	b.n	80084ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084a8:	4b0f      	ldr	r3, [pc, #60]	@ (80084e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	4b0a      	ldr	r3, [pc, #40]	@ (80084d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3304      	adds	r3, #4
 80084b2:	4619      	mov	r1, r3
 80084b4:	4610      	mov	r0, r2
 80084b6:	f7ff fa8b 	bl	80079d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084ba:	4b0c      	ldr	r3, [pc, #48]	@ (80084ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d202      	bcs.n	80084ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80084c4:	4a09      	ldr	r2, [pc, #36]	@ (80084ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	6013      	str	r3, [r2, #0]
}
 80084ca:	bf00      	nop
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20000868 	.word	0x20000868
 80084d8:	20000764 	.word	0x20000764
 80084dc:	2000086c 	.word	0x2000086c
 80084e0:	20000850 	.word	0x20000850
 80084e4:	20000820 	.word	0x20000820
 80084e8:	2000081c 	.word	0x2000081c
 80084ec:	20000884 	.word	0x20000884

080084f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3b04      	subs	r3, #4
 8008500:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3b04      	subs	r3, #4
 800850e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	f023 0201 	bic.w	r2, r3, #1
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3b04      	subs	r3, #4
 800851e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008520:	4a0c      	ldr	r2, [pc, #48]	@ (8008554 <pxPortInitialiseStack+0x64>)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	3b14      	subs	r3, #20
 800852a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3b04      	subs	r3, #4
 8008536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f06f 0202 	mvn.w	r2, #2
 800853e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	3b20      	subs	r3, #32
 8008544:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008546:	68fb      	ldr	r3, [r7, #12]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	08008559 	.word	0x08008559

08008558 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008562:	4b13      	ldr	r3, [pc, #76]	@ (80085b0 <prvTaskExitError+0x58>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856a:	d00b      	beq.n	8008584 <prvTaskExitError+0x2c>
	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	60fb      	str	r3, [r7, #12]
}
 800857e:	bf00      	nop
 8008580:	bf00      	nop
 8008582:	e7fd      	b.n	8008580 <prvTaskExitError+0x28>
	__asm volatile
 8008584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008588:	f383 8811 	msr	BASEPRI, r3
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	60bb      	str	r3, [r7, #8]
}
 8008596:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008598:	bf00      	nop
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d0fc      	beq.n	800859a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085a0:	bf00      	nop
 80085a2:	bf00      	nop
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	2000009c 	.word	0x2000009c
	...

080085c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085c0:	4b07      	ldr	r3, [pc, #28]	@ (80085e0 <pxCurrentTCBConst2>)
 80085c2:	6819      	ldr	r1, [r3, #0]
 80085c4:	6808      	ldr	r0, [r1, #0]
 80085c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ca:	f380 8809 	msr	PSP, r0
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f04f 0000 	mov.w	r0, #0
 80085d6:	f380 8811 	msr	BASEPRI, r0
 80085da:	4770      	bx	lr
 80085dc:	f3af 8000 	nop.w

080085e0 <pxCurrentTCBConst2>:
 80085e0:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085e4:	bf00      	nop
 80085e6:	bf00      	nop

080085e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085e8:	4808      	ldr	r0, [pc, #32]	@ (800860c <prvPortStartFirstTask+0x24>)
 80085ea:	6800      	ldr	r0, [r0, #0]
 80085ec:	6800      	ldr	r0, [r0, #0]
 80085ee:	f380 8808 	msr	MSP, r0
 80085f2:	f04f 0000 	mov.w	r0, #0
 80085f6:	f380 8814 	msr	CONTROL, r0
 80085fa:	b662      	cpsie	i
 80085fc:	b661      	cpsie	f
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	df00      	svc	0
 8008608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800860a:	bf00      	nop
 800860c:	e000ed08 	.word	0xe000ed08

08008610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008616:	4b47      	ldr	r3, [pc, #284]	@ (8008734 <xPortStartScheduler+0x124>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a47      	ldr	r2, [pc, #284]	@ (8008738 <xPortStartScheduler+0x128>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d10b      	bne.n	8008638 <xPortStartScheduler+0x28>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	613b      	str	r3, [r7, #16]
}
 8008632:	bf00      	nop
 8008634:	bf00      	nop
 8008636:	e7fd      	b.n	8008634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008638:	4b3e      	ldr	r3, [pc, #248]	@ (8008734 <xPortStartScheduler+0x124>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a3f      	ldr	r2, [pc, #252]	@ (800873c <xPortStartScheduler+0x12c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d10b      	bne.n	800865a <xPortStartScheduler+0x4a>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	60fb      	str	r3, [r7, #12]
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop
 8008658:	e7fd      	b.n	8008656 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800865a:	4b39      	ldr	r3, [pc, #228]	@ (8008740 <xPortStartScheduler+0x130>)
 800865c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	b2db      	uxtb	r3, r3
 8008664:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	22ff      	movs	r2, #255	@ 0xff
 800866a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	b2db      	uxtb	r3, r3
 8008672:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	b2db      	uxtb	r3, r3
 8008678:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800867c:	b2da      	uxtb	r2, r3
 800867e:	4b31      	ldr	r3, [pc, #196]	@ (8008744 <xPortStartScheduler+0x134>)
 8008680:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008682:	4b31      	ldr	r3, [pc, #196]	@ (8008748 <xPortStartScheduler+0x138>)
 8008684:	2207      	movs	r2, #7
 8008686:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008688:	e009      	b.n	800869e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800868a:	4b2f      	ldr	r3, [pc, #188]	@ (8008748 <xPortStartScheduler+0x138>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3b01      	subs	r3, #1
 8008690:	4a2d      	ldr	r2, [pc, #180]	@ (8008748 <xPortStartScheduler+0x138>)
 8008692:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	005b      	lsls	r3, r3, #1
 800869a:	b2db      	uxtb	r3, r3
 800869c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800869e:	78fb      	ldrb	r3, [r7, #3]
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086a6:	2b80      	cmp	r3, #128	@ 0x80
 80086a8:	d0ef      	beq.n	800868a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086aa:	4b27      	ldr	r3, [pc, #156]	@ (8008748 <xPortStartScheduler+0x138>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f1c3 0307 	rsb	r3, r3, #7
 80086b2:	2b04      	cmp	r3, #4
 80086b4:	d00b      	beq.n	80086ce <xPortStartScheduler+0xbe>
	__asm volatile
 80086b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	60bb      	str	r3, [r7, #8]
}
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
 80086cc:	e7fd      	b.n	80086ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008748 <xPortStartScheduler+0x138>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	021b      	lsls	r3, r3, #8
 80086d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008748 <xPortStartScheduler+0x138>)
 80086d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008748 <xPortStartScheduler+0x138>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80086e0:	4a19      	ldr	r2, [pc, #100]	@ (8008748 <xPortStartScheduler+0x138>)
 80086e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	b2da      	uxtb	r2, r3
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086ec:	4b17      	ldr	r3, [pc, #92]	@ (800874c <xPortStartScheduler+0x13c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a16      	ldr	r2, [pc, #88]	@ (800874c <xPortStartScheduler+0x13c>)
 80086f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80086f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086f8:	4b14      	ldr	r3, [pc, #80]	@ (800874c <xPortStartScheduler+0x13c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a13      	ldr	r2, [pc, #76]	@ (800874c <xPortStartScheduler+0x13c>)
 80086fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008702:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008704:	f000 f8da 	bl	80088bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008708:	4b11      	ldr	r3, [pc, #68]	@ (8008750 <xPortStartScheduler+0x140>)
 800870a:	2200      	movs	r2, #0
 800870c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800870e:	f000 f8f9 	bl	8008904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008712:	4b10      	ldr	r3, [pc, #64]	@ (8008754 <xPortStartScheduler+0x144>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a0f      	ldr	r2, [pc, #60]	@ (8008754 <xPortStartScheduler+0x144>)
 8008718:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800871c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800871e:	f7ff ff63 	bl	80085e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008722:	f7ff fd4d 	bl	80081c0 <vTaskSwitchContext>
	prvTaskExitError();
 8008726:	f7ff ff17 	bl	8008558 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	e000ed00 	.word	0xe000ed00
 8008738:	410fc271 	.word	0x410fc271
 800873c:	410fc270 	.word	0x410fc270
 8008740:	e000e400 	.word	0xe000e400
 8008744:	20000890 	.word	0x20000890
 8008748:	20000894 	.word	0x20000894
 800874c:	e000ed20 	.word	0xe000ed20
 8008750:	2000009c 	.word	0x2000009c
 8008754:	e000ef34 	.word	0xe000ef34

08008758 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	607b      	str	r3, [r7, #4]
}
 8008770:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008772:	4b10      	ldr	r3, [pc, #64]	@ (80087b4 <vPortEnterCritical+0x5c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3301      	adds	r3, #1
 8008778:	4a0e      	ldr	r2, [pc, #56]	@ (80087b4 <vPortEnterCritical+0x5c>)
 800877a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800877c:	4b0d      	ldr	r3, [pc, #52]	@ (80087b4 <vPortEnterCritical+0x5c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d110      	bne.n	80087a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008784:	4b0c      	ldr	r3, [pc, #48]	@ (80087b8 <vPortEnterCritical+0x60>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	b2db      	uxtb	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00b      	beq.n	80087a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	603b      	str	r3, [r7, #0]
}
 80087a0:	bf00      	nop
 80087a2:	bf00      	nop
 80087a4:	e7fd      	b.n	80087a2 <vPortEnterCritical+0x4a>
	}
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	2000009c 	.word	0x2000009c
 80087b8:	e000ed04 	.word	0xe000ed04

080087bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087c2:	4b12      	ldr	r3, [pc, #72]	@ (800880c <vPortExitCritical+0x50>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10b      	bne.n	80087e2 <vPortExitCritical+0x26>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	607b      	str	r3, [r7, #4]
}
 80087dc:	bf00      	nop
 80087de:	bf00      	nop
 80087e0:	e7fd      	b.n	80087de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80087e2:	4b0a      	ldr	r3, [pc, #40]	@ (800880c <vPortExitCritical+0x50>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	4a08      	ldr	r2, [pc, #32]	@ (800880c <vPortExitCritical+0x50>)
 80087ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087ec:	4b07      	ldr	r3, [pc, #28]	@ (800880c <vPortExitCritical+0x50>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d105      	bne.n	8008800 <vPortExitCritical+0x44>
 80087f4:	2300      	movs	r3, #0
 80087f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80087fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	2000009c 	.word	0x2000009c

08008810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008810:	f3ef 8009 	mrs	r0, PSP
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	4b15      	ldr	r3, [pc, #84]	@ (8008870 <pxCurrentTCBConst>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	f01e 0f10 	tst.w	lr, #16
 8008820:	bf08      	it	eq
 8008822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882a:	6010      	str	r0, [r2, #0]
 800882c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008830:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008834:	f380 8811 	msr	BASEPRI, r0
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	f3bf 8f6f 	isb	sy
 8008840:	f7ff fcbe 	bl	80081c0 <vTaskSwitchContext>
 8008844:	f04f 0000 	mov.w	r0, #0
 8008848:	f380 8811 	msr	BASEPRI, r0
 800884c:	bc09      	pop	{r0, r3}
 800884e:	6819      	ldr	r1, [r3, #0]
 8008850:	6808      	ldr	r0, [r1, #0]
 8008852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008856:	f01e 0f10 	tst.w	lr, #16
 800885a:	bf08      	it	eq
 800885c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008860:	f380 8809 	msr	PSP, r0
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	f3af 8000 	nop.w

08008870 <pxCurrentTCBConst>:
 8008870:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008874:	bf00      	nop
 8008876:	bf00      	nop

08008878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	607b      	str	r3, [r7, #4]
}
 8008890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008892:	f7ff fbdb 	bl	800804c <xTaskIncrementTick>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d003      	beq.n	80088a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800889c:	4b06      	ldr	r3, [pc, #24]	@ (80088b8 <SysTick_Handler+0x40>)
 800889e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	2300      	movs	r3, #0
 80088a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	f383 8811 	msr	BASEPRI, r3
}
 80088ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80088b0:	bf00      	nop
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	e000ed04 	.word	0xe000ed04

080088bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088bc:	b480      	push	{r7}
 80088be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088c0:	4b0b      	ldr	r3, [pc, #44]	@ (80088f0 <vPortSetupTimerInterrupt+0x34>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088c6:	4b0b      	ldr	r3, [pc, #44]	@ (80088f4 <vPortSetupTimerInterrupt+0x38>)
 80088c8:	2200      	movs	r2, #0
 80088ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088cc:	4b0a      	ldr	r3, [pc, #40]	@ (80088f8 <vPortSetupTimerInterrupt+0x3c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a0a      	ldr	r2, [pc, #40]	@ (80088fc <vPortSetupTimerInterrupt+0x40>)
 80088d2:	fba2 2303 	umull	r2, r3, r2, r3
 80088d6:	099b      	lsrs	r3, r3, #6
 80088d8:	4a09      	ldr	r2, [pc, #36]	@ (8008900 <vPortSetupTimerInterrupt+0x44>)
 80088da:	3b01      	subs	r3, #1
 80088dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088de:	4b04      	ldr	r3, [pc, #16]	@ (80088f0 <vPortSetupTimerInterrupt+0x34>)
 80088e0:	2207      	movs	r2, #7
 80088e2:	601a      	str	r2, [r3, #0]
}
 80088e4:	bf00      	nop
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	e000e010 	.word	0xe000e010
 80088f4:	e000e018 	.word	0xe000e018
 80088f8:	20000090 	.word	0x20000090
 80088fc:	10624dd3 	.word	0x10624dd3
 8008900:	e000e014 	.word	0xe000e014

08008904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008904:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008914 <vPortEnableVFP+0x10>
 8008908:	6801      	ldr	r1, [r0, #0]
 800890a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800890e:	6001      	str	r1, [r0, #0]
 8008910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008912:	bf00      	nop
 8008914:	e000ed88 	.word	0xe000ed88

08008918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08a      	sub	sp, #40	@ 0x28
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008920:	2300      	movs	r3, #0
 8008922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008924:	f7ff fae6 	bl	8007ef4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008928:	4b5c      	ldr	r3, [pc, #368]	@ (8008a9c <pvPortMalloc+0x184>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008930:	f000 f924 	bl	8008b7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008934:	4b5a      	ldr	r3, [pc, #360]	@ (8008aa0 <pvPortMalloc+0x188>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4013      	ands	r3, r2
 800893c:	2b00      	cmp	r3, #0
 800893e:	f040 8095 	bne.w	8008a6c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d01e      	beq.n	8008986 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008948:	2208      	movs	r2, #8
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4413      	add	r3, r2
 800894e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	2b00      	cmp	r3, #0
 8008958:	d015      	beq.n	8008986 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f023 0307 	bic.w	r3, r3, #7
 8008960:	3308      	adds	r3, #8
 8008962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f003 0307 	and.w	r3, r3, #7
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00b      	beq.n	8008986 <pvPortMalloc+0x6e>
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	617b      	str	r3, [r7, #20]
}
 8008980:	bf00      	nop
 8008982:	bf00      	nop
 8008984:	e7fd      	b.n	8008982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d06f      	beq.n	8008a6c <pvPortMalloc+0x154>
 800898c:	4b45      	ldr	r3, [pc, #276]	@ (8008aa4 <pvPortMalloc+0x18c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	429a      	cmp	r2, r3
 8008994:	d86a      	bhi.n	8008a6c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008996:	4b44      	ldr	r3, [pc, #272]	@ (8008aa8 <pvPortMalloc+0x190>)
 8008998:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800899a:	4b43      	ldr	r3, [pc, #268]	@ (8008aa8 <pvPortMalloc+0x190>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089a0:	e004      	b.n	80089ac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80089a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d903      	bls.n	80089be <pvPortMalloc+0xa6>
 80089b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1f1      	bne.n	80089a2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089be:	4b37      	ldr	r3, [pc, #220]	@ (8008a9c <pvPortMalloc+0x184>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d051      	beq.n	8008a6c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2208      	movs	r2, #8
 80089ce:	4413      	add	r3, r2
 80089d0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	1ad2      	subs	r2, r2, r3
 80089e2:	2308      	movs	r3, #8
 80089e4:	005b      	lsls	r3, r3, #1
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d920      	bls.n	8008a2c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4413      	add	r3, r2
 80089f0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	f003 0307 	and.w	r3, r3, #7
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00b      	beq.n	8008a14 <pvPortMalloc+0xfc>
	__asm volatile
 80089fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a00:	f383 8811 	msr	BASEPRI, r3
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	613b      	str	r3, [r7, #16]
}
 8008a0e:	bf00      	nop
 8008a10:	bf00      	nop
 8008a12:	e7fd      	b.n	8008a10 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	1ad2      	subs	r2, r2, r3
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a26:	69b8      	ldr	r0, [r7, #24]
 8008a28:	f000 f90a 	bl	8008c40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8008aa4 <pvPortMalloc+0x18c>)
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	4a1b      	ldr	r2, [pc, #108]	@ (8008aa4 <pvPortMalloc+0x18c>)
 8008a38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8008aa4 <pvPortMalloc+0x18c>)
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8008aac <pvPortMalloc+0x194>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d203      	bcs.n	8008a4e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a46:	4b17      	ldr	r3, [pc, #92]	@ (8008aa4 <pvPortMalloc+0x18c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a18      	ldr	r2, [pc, #96]	@ (8008aac <pvPortMalloc+0x194>)
 8008a4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	4b13      	ldr	r3, [pc, #76]	@ (8008aa0 <pvPortMalloc+0x188>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	431a      	orrs	r2, r3
 8008a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5e:	2200      	movs	r2, #0
 8008a60:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a62:	4b13      	ldr	r3, [pc, #76]	@ (8008ab0 <pvPortMalloc+0x198>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3301      	adds	r3, #1
 8008a68:	4a11      	ldr	r2, [pc, #68]	@ (8008ab0 <pvPortMalloc+0x198>)
 8008a6a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a6c:	f7ff fa50 	bl	8007f10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	f003 0307 	and.w	r3, r3, #7
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00b      	beq.n	8008a92 <pvPortMalloc+0x17a>
	__asm volatile
 8008a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7e:	f383 8811 	msr	BASEPRI, r3
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	60fb      	str	r3, [r7, #12]
}
 8008a8c:	bf00      	nop
 8008a8e:	bf00      	nop
 8008a90:	e7fd      	b.n	8008a8e <pvPortMalloc+0x176>
	return pvReturn;
 8008a92:	69fb      	ldr	r3, [r7, #28]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3728      	adds	r7, #40	@ 0x28
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	200044a0 	.word	0x200044a0
 8008aa0:	200044b4 	.word	0x200044b4
 8008aa4:	200044a4 	.word	0x200044a4
 8008aa8:	20004498 	.word	0x20004498
 8008aac:	200044a8 	.word	0x200044a8
 8008ab0:	200044ac 	.word	0x200044ac

08008ab4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d04f      	beq.n	8008b66 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ac6:	2308      	movs	r3, #8
 8008ac8:	425b      	negs	r3, r3
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	4413      	add	r3, r2
 8008ace:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	4b25      	ldr	r3, [pc, #148]	@ (8008b70 <vPortFree+0xbc>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4013      	ands	r3, r2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10b      	bne.n	8008afa <vPortFree+0x46>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	60fb      	str	r3, [r7, #12]
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop
 8008af8:	e7fd      	b.n	8008af6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00b      	beq.n	8008b1a <vPortFree+0x66>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	60bb      	str	r3, [r7, #8]
}
 8008b14:	bf00      	nop
 8008b16:	bf00      	nop
 8008b18:	e7fd      	b.n	8008b16 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	4b14      	ldr	r3, [pc, #80]	@ (8008b70 <vPortFree+0xbc>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4013      	ands	r3, r2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d01e      	beq.n	8008b66 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d11a      	bne.n	8008b66 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	4b0e      	ldr	r3, [pc, #56]	@ (8008b70 <vPortFree+0xbc>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	43db      	mvns	r3, r3
 8008b3a:	401a      	ands	r2, r3
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b40:	f7ff f9d8 	bl	8007ef4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	685a      	ldr	r2, [r3, #4]
 8008b48:	4b0a      	ldr	r3, [pc, #40]	@ (8008b74 <vPortFree+0xc0>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	4a09      	ldr	r2, [pc, #36]	@ (8008b74 <vPortFree+0xc0>)
 8008b50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b52:	6938      	ldr	r0, [r7, #16]
 8008b54:	f000 f874 	bl	8008c40 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b58:	4b07      	ldr	r3, [pc, #28]	@ (8008b78 <vPortFree+0xc4>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	4a06      	ldr	r2, [pc, #24]	@ (8008b78 <vPortFree+0xc4>)
 8008b60:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b62:	f7ff f9d5 	bl	8007f10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b66:	bf00      	nop
 8008b68:	3718      	adds	r7, #24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	200044b4 	.word	0x200044b4
 8008b74:	200044a4 	.word	0x200044a4
 8008b78:	200044b0 	.word	0x200044b0

08008b7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b82:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008b86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b88:	4b27      	ldr	r3, [pc, #156]	@ (8008c28 <prvHeapInit+0xac>)
 8008b8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f003 0307 	and.w	r3, r3, #7
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00c      	beq.n	8008bb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	3307      	adds	r3, #7
 8008b9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f023 0307 	bic.w	r3, r3, #7
 8008ba2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	4a1f      	ldr	r2, [pc, #124]	@ (8008c28 <prvHeapInit+0xac>)
 8008bac:	4413      	add	r3, r2
 8008bae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8008c2c <prvHeapInit+0xb0>)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bba:	4b1c      	ldr	r3, [pc, #112]	@ (8008c2c <prvHeapInit+0xb0>)
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bc8:	2208      	movs	r2, #8
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	1a9b      	subs	r3, r3, r2
 8008bce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f023 0307 	bic.w	r3, r3, #7
 8008bd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	4a15      	ldr	r2, [pc, #84]	@ (8008c30 <prvHeapInit+0xb4>)
 8008bdc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bde:	4b14      	ldr	r3, [pc, #80]	@ (8008c30 <prvHeapInit+0xb4>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2200      	movs	r2, #0
 8008be4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008be6:	4b12      	ldr	r3, [pc, #72]	@ (8008c30 <prvHeapInit+0xb4>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2200      	movs	r2, #0
 8008bec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	1ad2      	subs	r2, r2, r3
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8008c30 <prvHeapInit+0xb4>)
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	4a0a      	ldr	r2, [pc, #40]	@ (8008c34 <prvHeapInit+0xb8>)
 8008c0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	4a09      	ldr	r2, [pc, #36]	@ (8008c38 <prvHeapInit+0xbc>)
 8008c12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c14:	4b09      	ldr	r3, [pc, #36]	@ (8008c3c <prvHeapInit+0xc0>)
 8008c16:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008c1a:	601a      	str	r2, [r3, #0]
}
 8008c1c:	bf00      	nop
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	20000898 	.word	0x20000898
 8008c2c:	20004498 	.word	0x20004498
 8008c30:	200044a0 	.word	0x200044a0
 8008c34:	200044a8 	.word	0x200044a8
 8008c38:	200044a4 	.word	0x200044a4
 8008c3c:	200044b4 	.word	0x200044b4

08008c40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c48:	4b28      	ldr	r3, [pc, #160]	@ (8008cec <prvInsertBlockIntoFreeList+0xac>)
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	e002      	b.n	8008c54 <prvInsertBlockIntoFreeList+0x14>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d8f7      	bhi.n	8008c4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	4413      	add	r3, r2
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d108      	bne.n	8008c82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	441a      	add	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	441a      	add	r2, r3
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d118      	bne.n	8008cc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	4b15      	ldr	r3, [pc, #84]	@ (8008cf0 <prvInsertBlockIntoFreeList+0xb0>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d00d      	beq.n	8008cbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	441a      	add	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	601a      	str	r2, [r3, #0]
 8008cbc:	e008      	b.n	8008cd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf0 <prvInsertBlockIntoFreeList+0xb0>)
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	601a      	str	r2, [r3, #0]
 8008cc6:	e003      	b.n	8008cd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d002      	beq.n	8008cde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cde:	bf00      	nop
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	20004498 	.word	0x20004498
 8008cf0:	200044a0 	.word	0x200044a0

08008cf4 <memset>:
 8008cf4:	4402      	add	r2, r0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d100      	bne.n	8008cfe <memset+0xa>
 8008cfc:	4770      	bx	lr
 8008cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8008d02:	e7f9      	b.n	8008cf8 <memset+0x4>

08008d04 <__errno>:
 8008d04:	4b01      	ldr	r3, [pc, #4]	@ (8008d0c <__errno+0x8>)
 8008d06:	6818      	ldr	r0, [r3, #0]
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	200000a0 	.word	0x200000a0

08008d10 <__libc_init_array>:
 8008d10:	b570      	push	{r4, r5, r6, lr}
 8008d12:	4d0d      	ldr	r5, [pc, #52]	@ (8008d48 <__libc_init_array+0x38>)
 8008d14:	4c0d      	ldr	r4, [pc, #52]	@ (8008d4c <__libc_init_array+0x3c>)
 8008d16:	1b64      	subs	r4, r4, r5
 8008d18:	10a4      	asrs	r4, r4, #2
 8008d1a:	2600      	movs	r6, #0
 8008d1c:	42a6      	cmp	r6, r4
 8008d1e:	d109      	bne.n	8008d34 <__libc_init_array+0x24>
 8008d20:	4d0b      	ldr	r5, [pc, #44]	@ (8008d50 <__libc_init_array+0x40>)
 8008d22:	4c0c      	ldr	r4, [pc, #48]	@ (8008d54 <__libc_init_array+0x44>)
 8008d24:	f000 fd8a 	bl	800983c <_init>
 8008d28:	1b64      	subs	r4, r4, r5
 8008d2a:	10a4      	asrs	r4, r4, #2
 8008d2c:	2600      	movs	r6, #0
 8008d2e:	42a6      	cmp	r6, r4
 8008d30:	d105      	bne.n	8008d3e <__libc_init_array+0x2e>
 8008d32:	bd70      	pop	{r4, r5, r6, pc}
 8008d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d38:	4798      	blx	r3
 8008d3a:	3601      	adds	r6, #1
 8008d3c:	e7ee      	b.n	8008d1c <__libc_init_array+0xc>
 8008d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d42:	4798      	blx	r3
 8008d44:	3601      	adds	r6, #1
 8008d46:	e7f2      	b.n	8008d2e <__libc_init_array+0x1e>
 8008d48:	08009998 	.word	0x08009998
 8008d4c:	08009998 	.word	0x08009998
 8008d50:	08009998 	.word	0x08009998
 8008d54:	0800999c 	.word	0x0800999c

08008d58 <atan2>:
 8008d58:	f000 baf2 	b.w	8009340 <__ieee754_atan2>
 8008d5c:	0000      	movs	r0, r0
	...

08008d60 <log>:
 8008d60:	b538      	push	{r3, r4, r5, lr}
 8008d62:	ed2d 8b02 	vpush	{d8}
 8008d66:	ec55 4b10 	vmov	r4, r5, d0
 8008d6a:	f000 fbb1 	bl	80094d0 <__ieee754_log>
 8008d6e:	4622      	mov	r2, r4
 8008d70:	462b      	mov	r3, r5
 8008d72:	4620      	mov	r0, r4
 8008d74:	4629      	mov	r1, r5
 8008d76:	eeb0 8a40 	vmov.f32	s16, s0
 8008d7a:	eef0 8a60 	vmov.f32	s17, s1
 8008d7e:	f7f7 fe85 	bl	8000a8c <__aeabi_dcmpun>
 8008d82:	b998      	cbnz	r0, 8008dac <log+0x4c>
 8008d84:	2200      	movs	r2, #0
 8008d86:	2300      	movs	r3, #0
 8008d88:	4620      	mov	r0, r4
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	f7f7 fe74 	bl	8000a78 <__aeabi_dcmpgt>
 8008d90:	b960      	cbnz	r0, 8008dac <log+0x4c>
 8008d92:	2200      	movs	r2, #0
 8008d94:	2300      	movs	r3, #0
 8008d96:	4620      	mov	r0, r4
 8008d98:	4629      	mov	r1, r5
 8008d9a:	f7f7 fe45 	bl	8000a28 <__aeabi_dcmpeq>
 8008d9e:	b160      	cbz	r0, 8008dba <log+0x5a>
 8008da0:	f7ff ffb0 	bl	8008d04 <__errno>
 8008da4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8008dd0 <log+0x70>
 8008da8:	2322      	movs	r3, #34	@ 0x22
 8008daa:	6003      	str	r3, [r0, #0]
 8008dac:	eeb0 0a48 	vmov.f32	s0, s16
 8008db0:	eef0 0a68 	vmov.f32	s1, s17
 8008db4:	ecbd 8b02 	vpop	{d8}
 8008db8:	bd38      	pop	{r3, r4, r5, pc}
 8008dba:	f7ff ffa3 	bl	8008d04 <__errno>
 8008dbe:	ecbd 8b02 	vpop	{d8}
 8008dc2:	2321      	movs	r3, #33	@ 0x21
 8008dc4:	6003      	str	r3, [r0, #0]
 8008dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dca:	4803      	ldr	r0, [pc, #12]	@ (8008dd8 <log+0x78>)
 8008dcc:	f000 b9d4 	b.w	8009178 <nan>
 8008dd0:	00000000 	.word	0x00000000
 8008dd4:	fff00000 	.word	0xfff00000
 8008dd8:	0800991c 	.word	0x0800991c

08008ddc <sqrt>:
 8008ddc:	b538      	push	{r3, r4, r5, lr}
 8008dde:	ed2d 8b02 	vpush	{d8}
 8008de2:	ec55 4b10 	vmov	r4, r5, d0
 8008de6:	f000 f9cf 	bl	8009188 <__ieee754_sqrt>
 8008dea:	4622      	mov	r2, r4
 8008dec:	462b      	mov	r3, r5
 8008dee:	4620      	mov	r0, r4
 8008df0:	4629      	mov	r1, r5
 8008df2:	eeb0 8a40 	vmov.f32	s16, s0
 8008df6:	eef0 8a60 	vmov.f32	s17, s1
 8008dfa:	f7f7 fe47 	bl	8000a8c <__aeabi_dcmpun>
 8008dfe:	b990      	cbnz	r0, 8008e26 <sqrt+0x4a>
 8008e00:	2200      	movs	r2, #0
 8008e02:	2300      	movs	r3, #0
 8008e04:	4620      	mov	r0, r4
 8008e06:	4629      	mov	r1, r5
 8008e08:	f7f7 fe18 	bl	8000a3c <__aeabi_dcmplt>
 8008e0c:	b158      	cbz	r0, 8008e26 <sqrt+0x4a>
 8008e0e:	f7ff ff79 	bl	8008d04 <__errno>
 8008e12:	2321      	movs	r3, #33	@ 0x21
 8008e14:	6003      	str	r3, [r0, #0]
 8008e16:	2200      	movs	r2, #0
 8008e18:	2300      	movs	r3, #0
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	f7f7 fcc5 	bl	80007ac <__aeabi_ddiv>
 8008e22:	ec41 0b18 	vmov	d8, r0, r1
 8008e26:	eeb0 0a48 	vmov.f32	s0, s16
 8008e2a:	eef0 0a68 	vmov.f32	s1, s17
 8008e2e:	ecbd 8b02 	vpop	{d8}
 8008e32:	bd38      	pop	{r3, r4, r5, pc}
 8008e34:	0000      	movs	r0, r0
	...

08008e38 <atan>:
 8008e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	ec55 4b10 	vmov	r4, r5, d0
 8008e40:	4bbf      	ldr	r3, [pc, #764]	@ (8009140 <atan+0x308>)
 8008e42:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8008e46:	429e      	cmp	r6, r3
 8008e48:	46ab      	mov	fp, r5
 8008e4a:	d918      	bls.n	8008e7e <atan+0x46>
 8008e4c:	4bbd      	ldr	r3, [pc, #756]	@ (8009144 <atan+0x30c>)
 8008e4e:	429e      	cmp	r6, r3
 8008e50:	d801      	bhi.n	8008e56 <atan+0x1e>
 8008e52:	d109      	bne.n	8008e68 <atan+0x30>
 8008e54:	b144      	cbz	r4, 8008e68 <atan+0x30>
 8008e56:	4622      	mov	r2, r4
 8008e58:	462b      	mov	r3, r5
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	4629      	mov	r1, r5
 8008e5e:	f7f7 f9c5 	bl	80001ec <__adddf3>
 8008e62:	4604      	mov	r4, r0
 8008e64:	460d      	mov	r5, r1
 8008e66:	e006      	b.n	8008e76 <atan+0x3e>
 8008e68:	f1bb 0f00 	cmp.w	fp, #0
 8008e6c:	f340 812b 	ble.w	80090c6 <atan+0x28e>
 8008e70:	a597      	add	r5, pc, #604	@ (adr r5, 80090d0 <atan+0x298>)
 8008e72:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e76:	ec45 4b10 	vmov	d0, r4, r5
 8008e7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7e:	4bb2      	ldr	r3, [pc, #712]	@ (8009148 <atan+0x310>)
 8008e80:	429e      	cmp	r6, r3
 8008e82:	d813      	bhi.n	8008eac <atan+0x74>
 8008e84:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8008e88:	429e      	cmp	r6, r3
 8008e8a:	d80c      	bhi.n	8008ea6 <atan+0x6e>
 8008e8c:	a392      	add	r3, pc, #584	@ (adr r3, 80090d8 <atan+0x2a0>)
 8008e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e92:	4620      	mov	r0, r4
 8008e94:	4629      	mov	r1, r5
 8008e96:	f7f7 f9a9 	bl	80001ec <__adddf3>
 8008e9a:	4bac      	ldr	r3, [pc, #688]	@ (800914c <atan+0x314>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f7f7 fdeb 	bl	8000a78 <__aeabi_dcmpgt>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	d1e7      	bne.n	8008e76 <atan+0x3e>
 8008ea6:	f04f 3aff 	mov.w	sl, #4294967295
 8008eaa:	e029      	b.n	8008f00 <atan+0xc8>
 8008eac:	f000 f95c 	bl	8009168 <fabs>
 8008eb0:	4ba7      	ldr	r3, [pc, #668]	@ (8009150 <atan+0x318>)
 8008eb2:	429e      	cmp	r6, r3
 8008eb4:	ec55 4b10 	vmov	r4, r5, d0
 8008eb8:	f200 80bc 	bhi.w	8009034 <atan+0x1fc>
 8008ebc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8008ec0:	429e      	cmp	r6, r3
 8008ec2:	f200 809e 	bhi.w	8009002 <atan+0x1ca>
 8008ec6:	4622      	mov	r2, r4
 8008ec8:	462b      	mov	r3, r5
 8008eca:	4620      	mov	r0, r4
 8008ecc:	4629      	mov	r1, r5
 8008ece:	f7f7 f98d 	bl	80001ec <__adddf3>
 8008ed2:	4b9e      	ldr	r3, [pc, #632]	@ (800914c <atan+0x314>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f7f7 f987 	bl	80001e8 <__aeabi_dsub>
 8008eda:	2200      	movs	r2, #0
 8008edc:	4606      	mov	r6, r0
 8008ede:	460f      	mov	r7, r1
 8008ee0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	f7f7 f980 	bl	80001ec <__adddf3>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	4639      	mov	r1, r7
 8008ef4:	f7f7 fc5a 	bl	80007ac <__aeabi_ddiv>
 8008ef8:	f04f 0a00 	mov.w	sl, #0
 8008efc:	4604      	mov	r4, r0
 8008efe:	460d      	mov	r5, r1
 8008f00:	4622      	mov	r2, r4
 8008f02:	462b      	mov	r3, r5
 8008f04:	4620      	mov	r0, r4
 8008f06:	4629      	mov	r1, r5
 8008f08:	f7f7 fb26 	bl	8000558 <__aeabi_dmul>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4680      	mov	r8, r0
 8008f12:	4689      	mov	r9, r1
 8008f14:	f7f7 fb20 	bl	8000558 <__aeabi_dmul>
 8008f18:	a371      	add	r3, pc, #452	@ (adr r3, 80090e0 <atan+0x2a8>)
 8008f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1e:	4606      	mov	r6, r0
 8008f20:	460f      	mov	r7, r1
 8008f22:	f7f7 fb19 	bl	8000558 <__aeabi_dmul>
 8008f26:	a370      	add	r3, pc, #448	@ (adr r3, 80090e8 <atan+0x2b0>)
 8008f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2c:	f7f7 f95e 	bl	80001ec <__adddf3>
 8008f30:	4632      	mov	r2, r6
 8008f32:	463b      	mov	r3, r7
 8008f34:	f7f7 fb10 	bl	8000558 <__aeabi_dmul>
 8008f38:	a36d      	add	r3, pc, #436	@ (adr r3, 80090f0 <atan+0x2b8>)
 8008f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3e:	f7f7 f955 	bl	80001ec <__adddf3>
 8008f42:	4632      	mov	r2, r6
 8008f44:	463b      	mov	r3, r7
 8008f46:	f7f7 fb07 	bl	8000558 <__aeabi_dmul>
 8008f4a:	a36b      	add	r3, pc, #428	@ (adr r3, 80090f8 <atan+0x2c0>)
 8008f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f50:	f7f7 f94c 	bl	80001ec <__adddf3>
 8008f54:	4632      	mov	r2, r6
 8008f56:	463b      	mov	r3, r7
 8008f58:	f7f7 fafe 	bl	8000558 <__aeabi_dmul>
 8008f5c:	a368      	add	r3, pc, #416	@ (adr r3, 8009100 <atan+0x2c8>)
 8008f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f62:	f7f7 f943 	bl	80001ec <__adddf3>
 8008f66:	4632      	mov	r2, r6
 8008f68:	463b      	mov	r3, r7
 8008f6a:	f7f7 faf5 	bl	8000558 <__aeabi_dmul>
 8008f6e:	a366      	add	r3, pc, #408	@ (adr r3, 8009108 <atan+0x2d0>)
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	f7f7 f93a 	bl	80001ec <__adddf3>
 8008f78:	4642      	mov	r2, r8
 8008f7a:	464b      	mov	r3, r9
 8008f7c:	f7f7 faec 	bl	8000558 <__aeabi_dmul>
 8008f80:	a363      	add	r3, pc, #396	@ (adr r3, 8009110 <atan+0x2d8>)
 8008f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f86:	4680      	mov	r8, r0
 8008f88:	4689      	mov	r9, r1
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	4639      	mov	r1, r7
 8008f8e:	f7f7 fae3 	bl	8000558 <__aeabi_dmul>
 8008f92:	a361      	add	r3, pc, #388	@ (adr r3, 8009118 <atan+0x2e0>)
 8008f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f98:	f7f7 f926 	bl	80001e8 <__aeabi_dsub>
 8008f9c:	4632      	mov	r2, r6
 8008f9e:	463b      	mov	r3, r7
 8008fa0:	f7f7 fada 	bl	8000558 <__aeabi_dmul>
 8008fa4:	a35e      	add	r3, pc, #376	@ (adr r3, 8009120 <atan+0x2e8>)
 8008fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008faa:	f7f7 f91d 	bl	80001e8 <__aeabi_dsub>
 8008fae:	4632      	mov	r2, r6
 8008fb0:	463b      	mov	r3, r7
 8008fb2:	f7f7 fad1 	bl	8000558 <__aeabi_dmul>
 8008fb6:	a35c      	add	r3, pc, #368	@ (adr r3, 8009128 <atan+0x2f0>)
 8008fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbc:	f7f7 f914 	bl	80001e8 <__aeabi_dsub>
 8008fc0:	4632      	mov	r2, r6
 8008fc2:	463b      	mov	r3, r7
 8008fc4:	f7f7 fac8 	bl	8000558 <__aeabi_dmul>
 8008fc8:	a359      	add	r3, pc, #356	@ (adr r3, 8009130 <atan+0x2f8>)
 8008fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fce:	f7f7 f90b 	bl	80001e8 <__aeabi_dsub>
 8008fd2:	4632      	mov	r2, r6
 8008fd4:	463b      	mov	r3, r7
 8008fd6:	f7f7 fabf 	bl	8000558 <__aeabi_dmul>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4640      	mov	r0, r8
 8008fe0:	4649      	mov	r1, r9
 8008fe2:	f7f7 f903 	bl	80001ec <__adddf3>
 8008fe6:	4622      	mov	r2, r4
 8008fe8:	462b      	mov	r3, r5
 8008fea:	f7f7 fab5 	bl	8000558 <__aeabi_dmul>
 8008fee:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	d148      	bne.n	800908a <atan+0x252>
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	f7f7 f8f4 	bl	80001e8 <__aeabi_dsub>
 8009000:	e72f      	b.n	8008e62 <atan+0x2a>
 8009002:	4b52      	ldr	r3, [pc, #328]	@ (800914c <atan+0x314>)
 8009004:	2200      	movs	r2, #0
 8009006:	4620      	mov	r0, r4
 8009008:	4629      	mov	r1, r5
 800900a:	f7f7 f8ed 	bl	80001e8 <__aeabi_dsub>
 800900e:	4b4f      	ldr	r3, [pc, #316]	@ (800914c <atan+0x314>)
 8009010:	4606      	mov	r6, r0
 8009012:	460f      	mov	r7, r1
 8009014:	2200      	movs	r2, #0
 8009016:	4620      	mov	r0, r4
 8009018:	4629      	mov	r1, r5
 800901a:	f7f7 f8e7 	bl	80001ec <__adddf3>
 800901e:	4602      	mov	r2, r0
 8009020:	460b      	mov	r3, r1
 8009022:	4630      	mov	r0, r6
 8009024:	4639      	mov	r1, r7
 8009026:	f7f7 fbc1 	bl	80007ac <__aeabi_ddiv>
 800902a:	f04f 0a01 	mov.w	sl, #1
 800902e:	4604      	mov	r4, r0
 8009030:	460d      	mov	r5, r1
 8009032:	e765      	b.n	8008f00 <atan+0xc8>
 8009034:	4b47      	ldr	r3, [pc, #284]	@ (8009154 <atan+0x31c>)
 8009036:	429e      	cmp	r6, r3
 8009038:	d21c      	bcs.n	8009074 <atan+0x23c>
 800903a:	4b47      	ldr	r3, [pc, #284]	@ (8009158 <atan+0x320>)
 800903c:	2200      	movs	r2, #0
 800903e:	4620      	mov	r0, r4
 8009040:	4629      	mov	r1, r5
 8009042:	f7f7 f8d1 	bl	80001e8 <__aeabi_dsub>
 8009046:	4b44      	ldr	r3, [pc, #272]	@ (8009158 <atan+0x320>)
 8009048:	4606      	mov	r6, r0
 800904a:	460f      	mov	r7, r1
 800904c:	2200      	movs	r2, #0
 800904e:	4620      	mov	r0, r4
 8009050:	4629      	mov	r1, r5
 8009052:	f7f7 fa81 	bl	8000558 <__aeabi_dmul>
 8009056:	4b3d      	ldr	r3, [pc, #244]	@ (800914c <atan+0x314>)
 8009058:	2200      	movs	r2, #0
 800905a:	f7f7 f8c7 	bl	80001ec <__adddf3>
 800905e:	4602      	mov	r2, r0
 8009060:	460b      	mov	r3, r1
 8009062:	4630      	mov	r0, r6
 8009064:	4639      	mov	r1, r7
 8009066:	f7f7 fba1 	bl	80007ac <__aeabi_ddiv>
 800906a:	f04f 0a02 	mov.w	sl, #2
 800906e:	4604      	mov	r4, r0
 8009070:	460d      	mov	r5, r1
 8009072:	e745      	b.n	8008f00 <atan+0xc8>
 8009074:	4622      	mov	r2, r4
 8009076:	462b      	mov	r3, r5
 8009078:	4938      	ldr	r1, [pc, #224]	@ (800915c <atan+0x324>)
 800907a:	2000      	movs	r0, #0
 800907c:	f7f7 fb96 	bl	80007ac <__aeabi_ddiv>
 8009080:	f04f 0a03 	mov.w	sl, #3
 8009084:	4604      	mov	r4, r0
 8009086:	460d      	mov	r5, r1
 8009088:	e73a      	b.n	8008f00 <atan+0xc8>
 800908a:	4b35      	ldr	r3, [pc, #212]	@ (8009160 <atan+0x328>)
 800908c:	4e35      	ldr	r6, [pc, #212]	@ (8009164 <atan+0x32c>)
 800908e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009096:	f7f7 f8a7 	bl	80001e8 <__aeabi_dsub>
 800909a:	4622      	mov	r2, r4
 800909c:	462b      	mov	r3, r5
 800909e:	f7f7 f8a3 	bl	80001e8 <__aeabi_dsub>
 80090a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	e9d6 0100 	ldrd	r0, r1, [r6]
 80090ae:	f7f7 f89b 	bl	80001e8 <__aeabi_dsub>
 80090b2:	f1bb 0f00 	cmp.w	fp, #0
 80090b6:	4604      	mov	r4, r0
 80090b8:	460d      	mov	r5, r1
 80090ba:	f6bf aedc 	bge.w	8008e76 <atan+0x3e>
 80090be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80090c2:	461d      	mov	r5, r3
 80090c4:	e6d7      	b.n	8008e76 <atan+0x3e>
 80090c6:	a51c      	add	r5, pc, #112	@ (adr r5, 8009138 <atan+0x300>)
 80090c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80090cc:	e6d3      	b.n	8008e76 <atan+0x3e>
 80090ce:	bf00      	nop
 80090d0:	54442d18 	.word	0x54442d18
 80090d4:	3ff921fb 	.word	0x3ff921fb
 80090d8:	8800759c 	.word	0x8800759c
 80090dc:	7e37e43c 	.word	0x7e37e43c
 80090e0:	e322da11 	.word	0xe322da11
 80090e4:	3f90ad3a 	.word	0x3f90ad3a
 80090e8:	24760deb 	.word	0x24760deb
 80090ec:	3fa97b4b 	.word	0x3fa97b4b
 80090f0:	a0d03d51 	.word	0xa0d03d51
 80090f4:	3fb10d66 	.word	0x3fb10d66
 80090f8:	c54c206e 	.word	0xc54c206e
 80090fc:	3fb745cd 	.word	0x3fb745cd
 8009100:	920083ff 	.word	0x920083ff
 8009104:	3fc24924 	.word	0x3fc24924
 8009108:	5555550d 	.word	0x5555550d
 800910c:	3fd55555 	.word	0x3fd55555
 8009110:	2c6a6c2f 	.word	0x2c6a6c2f
 8009114:	bfa2b444 	.word	0xbfa2b444
 8009118:	52defd9a 	.word	0x52defd9a
 800911c:	3fadde2d 	.word	0x3fadde2d
 8009120:	af749a6d 	.word	0xaf749a6d
 8009124:	3fb3b0f2 	.word	0x3fb3b0f2
 8009128:	fe231671 	.word	0xfe231671
 800912c:	3fbc71c6 	.word	0x3fbc71c6
 8009130:	9998ebc4 	.word	0x9998ebc4
 8009134:	3fc99999 	.word	0x3fc99999
 8009138:	54442d18 	.word	0x54442d18
 800913c:	bff921fb 	.word	0xbff921fb
 8009140:	440fffff 	.word	0x440fffff
 8009144:	7ff00000 	.word	0x7ff00000
 8009148:	3fdbffff 	.word	0x3fdbffff
 800914c:	3ff00000 	.word	0x3ff00000
 8009150:	3ff2ffff 	.word	0x3ff2ffff
 8009154:	40038000 	.word	0x40038000
 8009158:	3ff80000 	.word	0x3ff80000
 800915c:	bff00000 	.word	0xbff00000
 8009160:	08009920 	.word	0x08009920
 8009164:	08009940 	.word	0x08009940

08009168 <fabs>:
 8009168:	ec51 0b10 	vmov	r0, r1, d0
 800916c:	4602      	mov	r2, r0
 800916e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009172:	ec43 2b10 	vmov	d0, r2, r3
 8009176:	4770      	bx	lr

08009178 <nan>:
 8009178:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009180 <nan+0x8>
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	00000000 	.word	0x00000000
 8009184:	7ff80000 	.word	0x7ff80000

08009188 <__ieee754_sqrt>:
 8009188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918c:	4a68      	ldr	r2, [pc, #416]	@ (8009330 <__ieee754_sqrt+0x1a8>)
 800918e:	ec55 4b10 	vmov	r4, r5, d0
 8009192:	43aa      	bics	r2, r5
 8009194:	462b      	mov	r3, r5
 8009196:	4621      	mov	r1, r4
 8009198:	d110      	bne.n	80091bc <__ieee754_sqrt+0x34>
 800919a:	4622      	mov	r2, r4
 800919c:	4620      	mov	r0, r4
 800919e:	4629      	mov	r1, r5
 80091a0:	f7f7 f9da 	bl	8000558 <__aeabi_dmul>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4620      	mov	r0, r4
 80091aa:	4629      	mov	r1, r5
 80091ac:	f7f7 f81e 	bl	80001ec <__adddf3>
 80091b0:	4604      	mov	r4, r0
 80091b2:	460d      	mov	r5, r1
 80091b4:	ec45 4b10 	vmov	d0, r4, r5
 80091b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091bc:	2d00      	cmp	r5, #0
 80091be:	dc0e      	bgt.n	80091de <__ieee754_sqrt+0x56>
 80091c0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80091c4:	4322      	orrs	r2, r4
 80091c6:	d0f5      	beq.n	80091b4 <__ieee754_sqrt+0x2c>
 80091c8:	b19d      	cbz	r5, 80091f2 <__ieee754_sqrt+0x6a>
 80091ca:	4622      	mov	r2, r4
 80091cc:	4620      	mov	r0, r4
 80091ce:	4629      	mov	r1, r5
 80091d0:	f7f7 f80a 	bl	80001e8 <__aeabi_dsub>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	f7f7 fae8 	bl	80007ac <__aeabi_ddiv>
 80091dc:	e7e8      	b.n	80091b0 <__ieee754_sqrt+0x28>
 80091de:	152a      	asrs	r2, r5, #20
 80091e0:	d115      	bne.n	800920e <__ieee754_sqrt+0x86>
 80091e2:	2000      	movs	r0, #0
 80091e4:	e009      	b.n	80091fa <__ieee754_sqrt+0x72>
 80091e6:	0acb      	lsrs	r3, r1, #11
 80091e8:	3a15      	subs	r2, #21
 80091ea:	0549      	lsls	r1, r1, #21
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d0fa      	beq.n	80091e6 <__ieee754_sqrt+0x5e>
 80091f0:	e7f7      	b.n	80091e2 <__ieee754_sqrt+0x5a>
 80091f2:	462a      	mov	r2, r5
 80091f4:	e7fa      	b.n	80091ec <__ieee754_sqrt+0x64>
 80091f6:	005b      	lsls	r3, r3, #1
 80091f8:	3001      	adds	r0, #1
 80091fa:	02dc      	lsls	r4, r3, #11
 80091fc:	d5fb      	bpl.n	80091f6 <__ieee754_sqrt+0x6e>
 80091fe:	1e44      	subs	r4, r0, #1
 8009200:	1b12      	subs	r2, r2, r4
 8009202:	f1c0 0420 	rsb	r4, r0, #32
 8009206:	fa21 f404 	lsr.w	r4, r1, r4
 800920a:	4323      	orrs	r3, r4
 800920c:	4081      	lsls	r1, r0
 800920e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009212:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009216:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800921a:	07d2      	lsls	r2, r2, #31
 800921c:	bf5c      	itt	pl
 800921e:	005b      	lslpl	r3, r3, #1
 8009220:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009224:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009228:	bf58      	it	pl
 800922a:	0049      	lslpl	r1, r1, #1
 800922c:	2600      	movs	r6, #0
 800922e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009232:	106d      	asrs	r5, r5, #1
 8009234:	0049      	lsls	r1, r1, #1
 8009236:	2016      	movs	r0, #22
 8009238:	4632      	mov	r2, r6
 800923a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800923e:	1917      	adds	r7, r2, r4
 8009240:	429f      	cmp	r7, r3
 8009242:	bfde      	ittt	le
 8009244:	193a      	addle	r2, r7, r4
 8009246:	1bdb      	suble	r3, r3, r7
 8009248:	1936      	addle	r6, r6, r4
 800924a:	0fcf      	lsrs	r7, r1, #31
 800924c:	3801      	subs	r0, #1
 800924e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009252:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009256:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800925a:	d1f0      	bne.n	800923e <__ieee754_sqrt+0xb6>
 800925c:	4604      	mov	r4, r0
 800925e:	2720      	movs	r7, #32
 8009260:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009264:	429a      	cmp	r2, r3
 8009266:	eb00 0e0c 	add.w	lr, r0, ip
 800926a:	db02      	blt.n	8009272 <__ieee754_sqrt+0xea>
 800926c:	d113      	bne.n	8009296 <__ieee754_sqrt+0x10e>
 800926e:	458e      	cmp	lr, r1
 8009270:	d811      	bhi.n	8009296 <__ieee754_sqrt+0x10e>
 8009272:	f1be 0f00 	cmp.w	lr, #0
 8009276:	eb0e 000c 	add.w	r0, lr, ip
 800927a:	da42      	bge.n	8009302 <__ieee754_sqrt+0x17a>
 800927c:	2800      	cmp	r0, #0
 800927e:	db40      	blt.n	8009302 <__ieee754_sqrt+0x17a>
 8009280:	f102 0801 	add.w	r8, r2, #1
 8009284:	1a9b      	subs	r3, r3, r2
 8009286:	458e      	cmp	lr, r1
 8009288:	bf88      	it	hi
 800928a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800928e:	eba1 010e 	sub.w	r1, r1, lr
 8009292:	4464      	add	r4, ip
 8009294:	4642      	mov	r2, r8
 8009296:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800929a:	3f01      	subs	r7, #1
 800929c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80092a0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80092a4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80092a8:	d1dc      	bne.n	8009264 <__ieee754_sqrt+0xdc>
 80092aa:	4319      	orrs	r1, r3
 80092ac:	d01b      	beq.n	80092e6 <__ieee754_sqrt+0x15e>
 80092ae:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009334 <__ieee754_sqrt+0x1ac>
 80092b2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009338 <__ieee754_sqrt+0x1b0>
 80092b6:	e9da 0100 	ldrd	r0, r1, [sl]
 80092ba:	e9db 2300 	ldrd	r2, r3, [fp]
 80092be:	f7f6 ff93 	bl	80001e8 <__aeabi_dsub>
 80092c2:	e9da 8900 	ldrd	r8, r9, [sl]
 80092c6:	4602      	mov	r2, r0
 80092c8:	460b      	mov	r3, r1
 80092ca:	4640      	mov	r0, r8
 80092cc:	4649      	mov	r1, r9
 80092ce:	f7f7 fbbf 	bl	8000a50 <__aeabi_dcmple>
 80092d2:	b140      	cbz	r0, 80092e6 <__ieee754_sqrt+0x15e>
 80092d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80092d8:	e9da 0100 	ldrd	r0, r1, [sl]
 80092dc:	e9db 2300 	ldrd	r2, r3, [fp]
 80092e0:	d111      	bne.n	8009306 <__ieee754_sqrt+0x17e>
 80092e2:	3601      	adds	r6, #1
 80092e4:	463c      	mov	r4, r7
 80092e6:	1072      	asrs	r2, r6, #1
 80092e8:	0863      	lsrs	r3, r4, #1
 80092ea:	07f1      	lsls	r1, r6, #31
 80092ec:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80092f0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80092f4:	bf48      	it	mi
 80092f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80092fa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80092fe:	4618      	mov	r0, r3
 8009300:	e756      	b.n	80091b0 <__ieee754_sqrt+0x28>
 8009302:	4690      	mov	r8, r2
 8009304:	e7be      	b.n	8009284 <__ieee754_sqrt+0xfc>
 8009306:	f7f6 ff71 	bl	80001ec <__adddf3>
 800930a:	e9da 8900 	ldrd	r8, r9, [sl]
 800930e:	4602      	mov	r2, r0
 8009310:	460b      	mov	r3, r1
 8009312:	4640      	mov	r0, r8
 8009314:	4649      	mov	r1, r9
 8009316:	f7f7 fb91 	bl	8000a3c <__aeabi_dcmplt>
 800931a:	b120      	cbz	r0, 8009326 <__ieee754_sqrt+0x19e>
 800931c:	1ca0      	adds	r0, r4, #2
 800931e:	bf08      	it	eq
 8009320:	3601      	addeq	r6, #1
 8009322:	3402      	adds	r4, #2
 8009324:	e7df      	b.n	80092e6 <__ieee754_sqrt+0x15e>
 8009326:	1c63      	adds	r3, r4, #1
 8009328:	f023 0401 	bic.w	r4, r3, #1
 800932c:	e7db      	b.n	80092e6 <__ieee754_sqrt+0x15e>
 800932e:	bf00      	nop
 8009330:	7ff00000 	.word	0x7ff00000
 8009334:	200000f8 	.word	0x200000f8
 8009338:	200000f0 	.word	0x200000f0
 800933c:	00000000 	.word	0x00000000

08009340 <__ieee754_atan2>:
 8009340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009344:	ec57 6b11 	vmov	r6, r7, d1
 8009348:	4273      	negs	r3, r6
 800934a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80094c8 <__ieee754_atan2+0x188>
 800934e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8009352:	4333      	orrs	r3, r6
 8009354:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009358:	4543      	cmp	r3, r8
 800935a:	ec51 0b10 	vmov	r0, r1, d0
 800935e:	4635      	mov	r5, r6
 8009360:	d809      	bhi.n	8009376 <__ieee754_atan2+0x36>
 8009362:	4244      	negs	r4, r0
 8009364:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009368:	4304      	orrs	r4, r0
 800936a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800936e:	4544      	cmp	r4, r8
 8009370:	468e      	mov	lr, r1
 8009372:	4681      	mov	r9, r0
 8009374:	d907      	bls.n	8009386 <__ieee754_atan2+0x46>
 8009376:	4632      	mov	r2, r6
 8009378:	463b      	mov	r3, r7
 800937a:	f7f6 ff37 	bl	80001ec <__adddf3>
 800937e:	ec41 0b10 	vmov	d0, r0, r1
 8009382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009386:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800938a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800938e:	4334      	orrs	r4, r6
 8009390:	d103      	bne.n	800939a <__ieee754_atan2+0x5a>
 8009392:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009396:	f7ff bd4f 	b.w	8008e38 <atan>
 800939a:	17bc      	asrs	r4, r7, #30
 800939c:	f004 0402 	and.w	r4, r4, #2
 80093a0:	ea53 0909 	orrs.w	r9, r3, r9
 80093a4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80093a8:	d107      	bne.n	80093ba <__ieee754_atan2+0x7a>
 80093aa:	2c02      	cmp	r4, #2
 80093ac:	d05f      	beq.n	800946e <__ieee754_atan2+0x12e>
 80093ae:	2c03      	cmp	r4, #3
 80093b0:	d1e5      	bne.n	800937e <__ieee754_atan2+0x3e>
 80093b2:	a141      	add	r1, pc, #260	@ (adr r1, 80094b8 <__ieee754_atan2+0x178>)
 80093b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093b8:	e7e1      	b.n	800937e <__ieee754_atan2+0x3e>
 80093ba:	4315      	orrs	r5, r2
 80093bc:	d106      	bne.n	80093cc <__ieee754_atan2+0x8c>
 80093be:	f1be 0f00 	cmp.w	lr, #0
 80093c2:	da5f      	bge.n	8009484 <__ieee754_atan2+0x144>
 80093c4:	a13e      	add	r1, pc, #248	@ (adr r1, 80094c0 <__ieee754_atan2+0x180>)
 80093c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ca:	e7d8      	b.n	800937e <__ieee754_atan2+0x3e>
 80093cc:	4542      	cmp	r2, r8
 80093ce:	d10f      	bne.n	80093f0 <__ieee754_atan2+0xb0>
 80093d0:	4293      	cmp	r3, r2
 80093d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80093d6:	d107      	bne.n	80093e8 <__ieee754_atan2+0xa8>
 80093d8:	2c02      	cmp	r4, #2
 80093da:	d84c      	bhi.n	8009476 <__ieee754_atan2+0x136>
 80093dc:	4b34      	ldr	r3, [pc, #208]	@ (80094b0 <__ieee754_atan2+0x170>)
 80093de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80093e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80093e6:	e7ca      	b.n	800937e <__ieee754_atan2+0x3e>
 80093e8:	2c02      	cmp	r4, #2
 80093ea:	d848      	bhi.n	800947e <__ieee754_atan2+0x13e>
 80093ec:	4b31      	ldr	r3, [pc, #196]	@ (80094b4 <__ieee754_atan2+0x174>)
 80093ee:	e7f6      	b.n	80093de <__ieee754_atan2+0x9e>
 80093f0:	4543      	cmp	r3, r8
 80093f2:	d0e4      	beq.n	80093be <__ieee754_atan2+0x7e>
 80093f4:	1a9b      	subs	r3, r3, r2
 80093f6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80093fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80093fe:	da1e      	bge.n	800943e <__ieee754_atan2+0xfe>
 8009400:	2f00      	cmp	r7, #0
 8009402:	da01      	bge.n	8009408 <__ieee754_atan2+0xc8>
 8009404:	323c      	adds	r2, #60	@ 0x3c
 8009406:	db1e      	blt.n	8009446 <__ieee754_atan2+0x106>
 8009408:	4632      	mov	r2, r6
 800940a:	463b      	mov	r3, r7
 800940c:	f7f7 f9ce 	bl	80007ac <__aeabi_ddiv>
 8009410:	ec41 0b10 	vmov	d0, r0, r1
 8009414:	f7ff fea8 	bl	8009168 <fabs>
 8009418:	f7ff fd0e 	bl	8008e38 <atan>
 800941c:	ec51 0b10 	vmov	r0, r1, d0
 8009420:	2c01      	cmp	r4, #1
 8009422:	d013      	beq.n	800944c <__ieee754_atan2+0x10c>
 8009424:	2c02      	cmp	r4, #2
 8009426:	d015      	beq.n	8009454 <__ieee754_atan2+0x114>
 8009428:	2c00      	cmp	r4, #0
 800942a:	d0a8      	beq.n	800937e <__ieee754_atan2+0x3e>
 800942c:	a318      	add	r3, pc, #96	@ (adr r3, 8009490 <__ieee754_atan2+0x150>)
 800942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009432:	f7f6 fed9 	bl	80001e8 <__aeabi_dsub>
 8009436:	a318      	add	r3, pc, #96	@ (adr r3, 8009498 <__ieee754_atan2+0x158>)
 8009438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943c:	e014      	b.n	8009468 <__ieee754_atan2+0x128>
 800943e:	a118      	add	r1, pc, #96	@ (adr r1, 80094a0 <__ieee754_atan2+0x160>)
 8009440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009444:	e7ec      	b.n	8009420 <__ieee754_atan2+0xe0>
 8009446:	2000      	movs	r0, #0
 8009448:	2100      	movs	r1, #0
 800944a:	e7e9      	b.n	8009420 <__ieee754_atan2+0xe0>
 800944c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009450:	4619      	mov	r1, r3
 8009452:	e794      	b.n	800937e <__ieee754_atan2+0x3e>
 8009454:	a30e      	add	r3, pc, #56	@ (adr r3, 8009490 <__ieee754_atan2+0x150>)
 8009456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945a:	f7f6 fec5 	bl	80001e8 <__aeabi_dsub>
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	a10d      	add	r1, pc, #52	@ (adr r1, 8009498 <__ieee754_atan2+0x158>)
 8009464:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009468:	f7f6 febe 	bl	80001e8 <__aeabi_dsub>
 800946c:	e787      	b.n	800937e <__ieee754_atan2+0x3e>
 800946e:	a10a      	add	r1, pc, #40	@ (adr r1, 8009498 <__ieee754_atan2+0x158>)
 8009470:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009474:	e783      	b.n	800937e <__ieee754_atan2+0x3e>
 8009476:	a10c      	add	r1, pc, #48	@ (adr r1, 80094a8 <__ieee754_atan2+0x168>)
 8009478:	e9d1 0100 	ldrd	r0, r1, [r1]
 800947c:	e77f      	b.n	800937e <__ieee754_atan2+0x3e>
 800947e:	2000      	movs	r0, #0
 8009480:	2100      	movs	r1, #0
 8009482:	e77c      	b.n	800937e <__ieee754_atan2+0x3e>
 8009484:	a106      	add	r1, pc, #24	@ (adr r1, 80094a0 <__ieee754_atan2+0x160>)
 8009486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800948a:	e778      	b.n	800937e <__ieee754_atan2+0x3e>
 800948c:	f3af 8000 	nop.w
 8009490:	33145c07 	.word	0x33145c07
 8009494:	3ca1a626 	.word	0x3ca1a626
 8009498:	54442d18 	.word	0x54442d18
 800949c:	400921fb 	.word	0x400921fb
 80094a0:	54442d18 	.word	0x54442d18
 80094a4:	3ff921fb 	.word	0x3ff921fb
 80094a8:	54442d18 	.word	0x54442d18
 80094ac:	3fe921fb 	.word	0x3fe921fb
 80094b0:	08009978 	.word	0x08009978
 80094b4:	08009960 	.word	0x08009960
 80094b8:	54442d18 	.word	0x54442d18
 80094bc:	c00921fb 	.word	0xc00921fb
 80094c0:	54442d18 	.word	0x54442d18
 80094c4:	bff921fb 	.word	0xbff921fb
 80094c8:	7ff00000 	.word	0x7ff00000
 80094cc:	00000000 	.word	0x00000000

080094d0 <__ieee754_log>:
 80094d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d4:	ec51 0b10 	vmov	r0, r1, d0
 80094d8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80094dc:	b087      	sub	sp, #28
 80094de:	460d      	mov	r5, r1
 80094e0:	da26      	bge.n	8009530 <__ieee754_log+0x60>
 80094e2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80094e6:	4303      	orrs	r3, r0
 80094e8:	4602      	mov	r2, r0
 80094ea:	d10a      	bne.n	8009502 <__ieee754_log+0x32>
 80094ec:	49ce      	ldr	r1, [pc, #824]	@ (8009828 <__ieee754_log+0x358>)
 80094ee:	2200      	movs	r2, #0
 80094f0:	2300      	movs	r3, #0
 80094f2:	2000      	movs	r0, #0
 80094f4:	f7f7 f95a 	bl	80007ac <__aeabi_ddiv>
 80094f8:	ec41 0b10 	vmov	d0, r0, r1
 80094fc:	b007      	add	sp, #28
 80094fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009502:	2900      	cmp	r1, #0
 8009504:	da05      	bge.n	8009512 <__ieee754_log+0x42>
 8009506:	460b      	mov	r3, r1
 8009508:	f7f6 fe6e 	bl	80001e8 <__aeabi_dsub>
 800950c:	2200      	movs	r2, #0
 800950e:	2300      	movs	r3, #0
 8009510:	e7f0      	b.n	80094f4 <__ieee754_log+0x24>
 8009512:	4bc6      	ldr	r3, [pc, #792]	@ (800982c <__ieee754_log+0x35c>)
 8009514:	2200      	movs	r2, #0
 8009516:	f7f7 f81f 	bl	8000558 <__aeabi_dmul>
 800951a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800951e:	460d      	mov	r5, r1
 8009520:	4ac3      	ldr	r2, [pc, #780]	@ (8009830 <__ieee754_log+0x360>)
 8009522:	4295      	cmp	r5, r2
 8009524:	dd06      	ble.n	8009534 <__ieee754_log+0x64>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	f7f6 fe5f 	bl	80001ec <__adddf3>
 800952e:	e7e3      	b.n	80094f8 <__ieee754_log+0x28>
 8009530:	2300      	movs	r3, #0
 8009532:	e7f5      	b.n	8009520 <__ieee754_log+0x50>
 8009534:	152c      	asrs	r4, r5, #20
 8009536:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800953a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800953e:	441c      	add	r4, r3
 8009540:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8009544:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8009548:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800954c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8009550:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8009554:	ea42 0105 	orr.w	r1, r2, r5
 8009558:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800955c:	2200      	movs	r2, #0
 800955e:	4bb5      	ldr	r3, [pc, #724]	@ (8009834 <__ieee754_log+0x364>)
 8009560:	f7f6 fe42 	bl	80001e8 <__aeabi_dsub>
 8009564:	1cab      	adds	r3, r5, #2
 8009566:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800956a:	2b02      	cmp	r3, #2
 800956c:	4682      	mov	sl, r0
 800956e:	468b      	mov	fp, r1
 8009570:	f04f 0200 	mov.w	r2, #0
 8009574:	dc53      	bgt.n	800961e <__ieee754_log+0x14e>
 8009576:	2300      	movs	r3, #0
 8009578:	f7f7 fa56 	bl	8000a28 <__aeabi_dcmpeq>
 800957c:	b1d0      	cbz	r0, 80095b4 <__ieee754_log+0xe4>
 800957e:	2c00      	cmp	r4, #0
 8009580:	f000 8120 	beq.w	80097c4 <__ieee754_log+0x2f4>
 8009584:	4620      	mov	r0, r4
 8009586:	f7f6 ff7d 	bl	8000484 <__aeabi_i2d>
 800958a:	a391      	add	r3, pc, #580	@ (adr r3, 80097d0 <__ieee754_log+0x300>)
 800958c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009590:	4606      	mov	r6, r0
 8009592:	460f      	mov	r7, r1
 8009594:	f7f6 ffe0 	bl	8000558 <__aeabi_dmul>
 8009598:	a38f      	add	r3, pc, #572	@ (adr r3, 80097d8 <__ieee754_log+0x308>)
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	4604      	mov	r4, r0
 80095a0:	460d      	mov	r5, r1
 80095a2:	4630      	mov	r0, r6
 80095a4:	4639      	mov	r1, r7
 80095a6:	f7f6 ffd7 	bl	8000558 <__aeabi_dmul>
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	4620      	mov	r0, r4
 80095b0:	4629      	mov	r1, r5
 80095b2:	e7ba      	b.n	800952a <__ieee754_log+0x5a>
 80095b4:	a38a      	add	r3, pc, #552	@ (adr r3, 80097e0 <__ieee754_log+0x310>)
 80095b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ba:	4650      	mov	r0, sl
 80095bc:	4659      	mov	r1, fp
 80095be:	f7f6 ffcb 	bl	8000558 <__aeabi_dmul>
 80095c2:	4602      	mov	r2, r0
 80095c4:	460b      	mov	r3, r1
 80095c6:	2000      	movs	r0, #0
 80095c8:	499b      	ldr	r1, [pc, #620]	@ (8009838 <__ieee754_log+0x368>)
 80095ca:	f7f6 fe0d 	bl	80001e8 <__aeabi_dsub>
 80095ce:	4652      	mov	r2, sl
 80095d0:	4606      	mov	r6, r0
 80095d2:	460f      	mov	r7, r1
 80095d4:	465b      	mov	r3, fp
 80095d6:	4650      	mov	r0, sl
 80095d8:	4659      	mov	r1, fp
 80095da:	f7f6 ffbd 	bl	8000558 <__aeabi_dmul>
 80095de:	4602      	mov	r2, r0
 80095e0:	460b      	mov	r3, r1
 80095e2:	4630      	mov	r0, r6
 80095e4:	4639      	mov	r1, r7
 80095e6:	f7f6 ffb7 	bl	8000558 <__aeabi_dmul>
 80095ea:	4606      	mov	r6, r0
 80095ec:	460f      	mov	r7, r1
 80095ee:	b914      	cbnz	r4, 80095f6 <__ieee754_log+0x126>
 80095f0:	4632      	mov	r2, r6
 80095f2:	463b      	mov	r3, r7
 80095f4:	e0a0      	b.n	8009738 <__ieee754_log+0x268>
 80095f6:	4620      	mov	r0, r4
 80095f8:	f7f6 ff44 	bl	8000484 <__aeabi_i2d>
 80095fc:	a374      	add	r3, pc, #464	@ (adr r3, 80097d0 <__ieee754_log+0x300>)
 80095fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009602:	4680      	mov	r8, r0
 8009604:	4689      	mov	r9, r1
 8009606:	f7f6 ffa7 	bl	8000558 <__aeabi_dmul>
 800960a:	a373      	add	r3, pc, #460	@ (adr r3, 80097d8 <__ieee754_log+0x308>)
 800960c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009610:	4604      	mov	r4, r0
 8009612:	460d      	mov	r5, r1
 8009614:	4640      	mov	r0, r8
 8009616:	4649      	mov	r1, r9
 8009618:	f7f6 ff9e 	bl	8000558 <__aeabi_dmul>
 800961c:	e0a5      	b.n	800976a <__ieee754_log+0x29a>
 800961e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009622:	f7f6 fde3 	bl	80001ec <__adddf3>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	4650      	mov	r0, sl
 800962c:	4659      	mov	r1, fp
 800962e:	f7f7 f8bd 	bl	80007ac <__aeabi_ddiv>
 8009632:	e9cd 0100 	strd	r0, r1, [sp]
 8009636:	4620      	mov	r0, r4
 8009638:	f7f6 ff24 	bl	8000484 <__aeabi_i2d>
 800963c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009644:	4610      	mov	r0, r2
 8009646:	4619      	mov	r1, r3
 8009648:	f7f6 ff86 	bl	8000558 <__aeabi_dmul>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009654:	f7f6 ff80 	bl	8000558 <__aeabi_dmul>
 8009658:	a363      	add	r3, pc, #396	@ (adr r3, 80097e8 <__ieee754_log+0x318>)
 800965a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965e:	4680      	mov	r8, r0
 8009660:	4689      	mov	r9, r1
 8009662:	f7f6 ff79 	bl	8000558 <__aeabi_dmul>
 8009666:	a362      	add	r3, pc, #392	@ (adr r3, 80097f0 <__ieee754_log+0x320>)
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	f7f6 fdbe 	bl	80001ec <__adddf3>
 8009670:	4642      	mov	r2, r8
 8009672:	464b      	mov	r3, r9
 8009674:	f7f6 ff70 	bl	8000558 <__aeabi_dmul>
 8009678:	a35f      	add	r3, pc, #380	@ (adr r3, 80097f8 <__ieee754_log+0x328>)
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	f7f6 fdb5 	bl	80001ec <__adddf3>
 8009682:	4642      	mov	r2, r8
 8009684:	464b      	mov	r3, r9
 8009686:	f7f6 ff67 	bl	8000558 <__aeabi_dmul>
 800968a:	a35d      	add	r3, pc, #372	@ (adr r3, 8009800 <__ieee754_log+0x330>)
 800968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009690:	f7f6 fdac 	bl	80001ec <__adddf3>
 8009694:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009698:	f7f6 ff5e 	bl	8000558 <__aeabi_dmul>
 800969c:	a35a      	add	r3, pc, #360	@ (adr r3, 8009808 <__ieee754_log+0x338>)
 800969e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096a6:	4640      	mov	r0, r8
 80096a8:	4649      	mov	r1, r9
 80096aa:	f7f6 ff55 	bl	8000558 <__aeabi_dmul>
 80096ae:	a358      	add	r3, pc, #352	@ (adr r3, 8009810 <__ieee754_log+0x340>)
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	f7f6 fd9a 	bl	80001ec <__adddf3>
 80096b8:	4642      	mov	r2, r8
 80096ba:	464b      	mov	r3, r9
 80096bc:	f7f6 ff4c 	bl	8000558 <__aeabi_dmul>
 80096c0:	a355      	add	r3, pc, #340	@ (adr r3, 8009818 <__ieee754_log+0x348>)
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	f7f6 fd91 	bl	80001ec <__adddf3>
 80096ca:	4642      	mov	r2, r8
 80096cc:	464b      	mov	r3, r9
 80096ce:	f7f6 ff43 	bl	8000558 <__aeabi_dmul>
 80096d2:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80096de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096e2:	f7f6 fd83 	bl	80001ec <__adddf3>
 80096e6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80096ea:	3551      	adds	r5, #81	@ 0x51
 80096ec:	4335      	orrs	r5, r6
 80096ee:	2d00      	cmp	r5, #0
 80096f0:	4680      	mov	r8, r0
 80096f2:	4689      	mov	r9, r1
 80096f4:	dd48      	ble.n	8009788 <__ieee754_log+0x2b8>
 80096f6:	4b50      	ldr	r3, [pc, #320]	@ (8009838 <__ieee754_log+0x368>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	4650      	mov	r0, sl
 80096fc:	4659      	mov	r1, fp
 80096fe:	f7f6 ff2b 	bl	8000558 <__aeabi_dmul>
 8009702:	4652      	mov	r2, sl
 8009704:	465b      	mov	r3, fp
 8009706:	f7f6 ff27 	bl	8000558 <__aeabi_dmul>
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	4606      	mov	r6, r0
 8009710:	460f      	mov	r7, r1
 8009712:	4640      	mov	r0, r8
 8009714:	4649      	mov	r1, r9
 8009716:	f7f6 fd69 	bl	80001ec <__adddf3>
 800971a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800971e:	f7f6 ff1b 	bl	8000558 <__aeabi_dmul>
 8009722:	4680      	mov	r8, r0
 8009724:	4689      	mov	r9, r1
 8009726:	b964      	cbnz	r4, 8009742 <__ieee754_log+0x272>
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	4630      	mov	r0, r6
 800972e:	4639      	mov	r1, r7
 8009730:	f7f6 fd5a 	bl	80001e8 <__aeabi_dsub>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	4650      	mov	r0, sl
 800973a:	4659      	mov	r1, fp
 800973c:	f7f6 fd54 	bl	80001e8 <__aeabi_dsub>
 8009740:	e6da      	b.n	80094f8 <__ieee754_log+0x28>
 8009742:	a323      	add	r3, pc, #140	@ (adr r3, 80097d0 <__ieee754_log+0x300>)
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800974c:	f7f6 ff04 	bl	8000558 <__aeabi_dmul>
 8009750:	a321      	add	r3, pc, #132	@ (adr r3, 80097d8 <__ieee754_log+0x308>)
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	4604      	mov	r4, r0
 8009758:	460d      	mov	r5, r1
 800975a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800975e:	f7f6 fefb 	bl	8000558 <__aeabi_dmul>
 8009762:	4642      	mov	r2, r8
 8009764:	464b      	mov	r3, r9
 8009766:	f7f6 fd41 	bl	80001ec <__adddf3>
 800976a:	4602      	mov	r2, r0
 800976c:	460b      	mov	r3, r1
 800976e:	4630      	mov	r0, r6
 8009770:	4639      	mov	r1, r7
 8009772:	f7f6 fd39 	bl	80001e8 <__aeabi_dsub>
 8009776:	4652      	mov	r2, sl
 8009778:	465b      	mov	r3, fp
 800977a:	f7f6 fd35 	bl	80001e8 <__aeabi_dsub>
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	4620      	mov	r0, r4
 8009784:	4629      	mov	r1, r5
 8009786:	e7d9      	b.n	800973c <__ieee754_log+0x26c>
 8009788:	4602      	mov	r2, r0
 800978a:	460b      	mov	r3, r1
 800978c:	4650      	mov	r0, sl
 800978e:	4659      	mov	r1, fp
 8009790:	f7f6 fd2a 	bl	80001e8 <__aeabi_dsub>
 8009794:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009798:	f7f6 fede 	bl	8000558 <__aeabi_dmul>
 800979c:	4606      	mov	r6, r0
 800979e:	460f      	mov	r7, r1
 80097a0:	2c00      	cmp	r4, #0
 80097a2:	f43f af25 	beq.w	80095f0 <__ieee754_log+0x120>
 80097a6:	a30a      	add	r3, pc, #40	@ (adr r3, 80097d0 <__ieee754_log+0x300>)
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097b0:	f7f6 fed2 	bl	8000558 <__aeabi_dmul>
 80097b4:	a308      	add	r3, pc, #32	@ (adr r3, 80097d8 <__ieee754_log+0x308>)
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	4604      	mov	r4, r0
 80097bc:	460d      	mov	r5, r1
 80097be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097c2:	e729      	b.n	8009618 <__ieee754_log+0x148>
 80097c4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8009820 <__ieee754_log+0x350>
 80097c8:	e698      	b.n	80094fc <__ieee754_log+0x2c>
 80097ca:	bf00      	nop
 80097cc:	f3af 8000 	nop.w
 80097d0:	fee00000 	.word	0xfee00000
 80097d4:	3fe62e42 	.word	0x3fe62e42
 80097d8:	35793c76 	.word	0x35793c76
 80097dc:	3dea39ef 	.word	0x3dea39ef
 80097e0:	55555555 	.word	0x55555555
 80097e4:	3fd55555 	.word	0x3fd55555
 80097e8:	df3e5244 	.word	0xdf3e5244
 80097ec:	3fc2f112 	.word	0x3fc2f112
 80097f0:	96cb03de 	.word	0x96cb03de
 80097f4:	3fc74664 	.word	0x3fc74664
 80097f8:	94229359 	.word	0x94229359
 80097fc:	3fd24924 	.word	0x3fd24924
 8009800:	55555593 	.word	0x55555593
 8009804:	3fe55555 	.word	0x3fe55555
 8009808:	d078c69f 	.word	0xd078c69f
 800980c:	3fc39a09 	.word	0x3fc39a09
 8009810:	1d8e78af 	.word	0x1d8e78af
 8009814:	3fcc71c5 	.word	0x3fcc71c5
 8009818:	9997fa04 	.word	0x9997fa04
 800981c:	3fd99999 	.word	0x3fd99999
	...
 8009828:	c3500000 	.word	0xc3500000
 800982c:	43500000 	.word	0x43500000
 8009830:	7fefffff 	.word	0x7fefffff
 8009834:	3ff00000 	.word	0x3ff00000
 8009838:	3fe00000 	.word	0x3fe00000

0800983c <_init>:
 800983c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983e:	bf00      	nop
 8009840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009842:	bc08      	pop	{r3}
 8009844:	469e      	mov	lr, r3
 8009846:	4770      	bx	lr

08009848 <_fini>:
 8009848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984a:	bf00      	nop
 800984c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800984e:	bc08      	pop	{r3}
 8009850:	469e      	mov	lr, r3
 8009852:	4770      	bx	lr
