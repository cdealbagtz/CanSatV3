
CanSat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005cec  08005cec  00015cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005db0  08005db0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005db0  08005db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005db8  08005db8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db8  08005db8  00015db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dbc  08005dbc  00015dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004264  20000010  08005dd0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004274  08005dd0  00024274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000150f7  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036b9  00000000  00000000  0003517a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  00038838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc8  00000000  00000000  00039ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001861a  00000000  00000000  0003ac68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000183f9  00000000  00000000  00053282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000986f2  00000000  00000000  0006b67b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053ac  00000000  00000000  00103d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0010911c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005cd4 	.word	0x08005cd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005cd4 	.word	0x08005cd4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <task_init_1ms>:

/**
  * @fn  	task_init_1ms
  * @brief  Inicializaciones para tarea de 1 milisegundo
  */
void task_init_1ms(void){
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <task_1ms>:

/**
  * @fn  	task_1ms
  * @brief  Ejecucion de tareas de 1 milisegundo
  */
void task_1ms(void){
 80004ea:	b580      	push	{r7, lr}
 80004ec:	af00      	add	r7, sp, #0
	NRF24_StateMachine();
 80004ee:	f000 fde9 	bl	80010c4 <NRF24_StateMachine>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <task_init_10ms>:

/**
  * @fn  	task_init_10ms
  * @brief  Inicializaciones para tarea de 10 milisegundos
  */
void task_init_10ms(void){
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0

}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <task_10ms>:

/**
  * @fn  	task_10ms
  * @brief  Ejecucion de tareas de 10 milisegundos
  */
void task_10ms(void){
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0

}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <task_init_100ms>:

/**
  * @fn  	task_init_100ms
  * @brief  Inicializaciones para tarea de 100 milisegundos
  */
void task_init_100ms(void){
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0

}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <task_100ms>:

/**
  * @fn  	task_100ms
  * @brief  Ejecucion de tareas de 100 milisegundos
  */
void task_100ms(void){
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <task_init_1000ms>:

/**
  * @fn  	task_init_1000ms
  * @brief  Inicializaciones para tarea de 1000 milisegundos
  */
void task_init_1000ms(void){
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0

}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <task_1000ms>:

/**
  * @fn  	task_1000ms
  * @brief  Ejecucion de tareas de 1000 milisegundos
  */
void task_1000ms(void){
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
	...

0800054c <NRF24_write>:
uint8_t NRF24_mode;

uint8_t TxBuffer[32];
uint8_t RxBuffer[32];

void NRF24_write(uint8_t Adr, uint8_t data){
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	460a      	mov	r2, r1
 8000556:	71fb      	strb	r3, [r7, #7]
 8000558:	4613      	mov	r3, r2
 800055a:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	f043 0320 	orr.w	r3, r3, #32
 8000562:	b2db      	uxtb	r3, r3
 8000564:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056c:	480c      	ldr	r0, [pc, #48]	; (80005a0 <NRF24_write+0x54>)
 800056e:	f002 f819 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	2201      	movs	r2, #1
 8000576:	4619      	mov	r1, r3
 8000578:	480a      	ldr	r0, [pc, #40]	; (80005a4 <NRF24_write+0x58>)
 800057a:	f002 fd81 	bl	8003080 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &data, 1);
 800057e:	1dbb      	adds	r3, r7, #6
 8000580:	2201      	movs	r2, #1
 8000582:	4619      	mov	r1, r3
 8000584:	4807      	ldr	r0, [pc, #28]	; (80005a4 <NRF24_write+0x58>)
 8000586:	f002 fd7b 	bl	8003080 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <NRF24_write+0x54>)
 8000592:	f002 f807 	bl	80025a4 <HAL_GPIO_WritePin>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40020400 	.word	0x40020400
 80005a4:	20000374 	.word	0x20000374

080005a8 <NRF24_Addr_write>:

void NRF24_Addr_write(uint8_t Adr,uint8_t *ADDRESS){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	6039      	str	r1, [r7, #0]
 80005b2:	71fb      	strb	r3, [r7, #7]
	Adr |= W_REGISTER;
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	f043 0320 	orr.w	r3, r3, #32
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[5];
	buffer[0] = ADDRESS[4];
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	791b      	ldrb	r3, [r3, #4]
 80005c2:	723b      	strb	r3, [r7, #8]
	buffer[1] = ADDRESS[3];
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	78db      	ldrb	r3, [r3, #3]
 80005c8:	727b      	strb	r3, [r7, #9]
	buffer[2] = ADDRESS[2];
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	789b      	ldrb	r3, [r3, #2]
 80005ce:	72bb      	strb	r3, [r7, #10]
	buffer[3] = ADDRESS[1];
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	785b      	ldrb	r3, [r3, #1]
 80005d4:	72fb      	strb	r3, [r7, #11]
	buffer[4] = ADDRESS[0];
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	733b      	strb	r3, [r7, #12]

	NRF24_select();
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e2:	4812      	ldr	r0, [pc, #72]	; (800062c <NRF24_Addr_write+0x84>)
 80005e4:	f001 ffde 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	2201      	movs	r2, #1
 80005ec:	4619      	mov	r1, r3
 80005ee:	4810      	ldr	r0, [pc, #64]	; (8000630 <NRF24_Addr_write+0x88>)
 80005f0:	f002 fd46 	bl	8003080 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]
 80005f8:	e00b      	b.n	8000612 <NRF24_Addr_write+0x6a>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &buffer[n], 1);
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	f107 0208 	add.w	r2, r7, #8
 8000600:	4413      	add	r3, r2
 8000602:	2201      	movs	r2, #1
 8000604:	4619      	mov	r1, r3
 8000606:	480a      	ldr	r0, [pc, #40]	; (8000630 <NRF24_Addr_write+0x88>)
 8000608:	f002 fd3a 	bl	8003080 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	3301      	adds	r3, #1
 8000610:	73fb      	strb	r3, [r7, #15]
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	2b04      	cmp	r3, #4
 8000616:	d9f0      	bls.n	80005fa <NRF24_Addr_write+0x52>
	}

	NRF24_unselect();
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061e:	4803      	ldr	r0, [pc, #12]	; (800062c <NRF24_Addr_write+0x84>)
 8000620:	f001 ffc0 	bl	80025a4 <HAL_GPIO_WritePin>

}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40020400 	.word	0x40020400
 8000630:	20000374 	.word	0x20000374

08000634 <NRF24_read>:

uint8_t NRF24_read(uint8_t Adr){
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
	uint8_t Replay;
	NRF24_select();
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <NRF24_read+0x48>)
 8000646:	f001 ffad 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 800064a:	1dfb      	adds	r3, r7, #7
 800064c:	2201      	movs	r2, #1
 800064e:	4619      	mov	r1, r3
 8000650:	480b      	ldr	r0, [pc, #44]	; (8000680 <NRF24_read+0x4c>)
 8000652:	f002 fd15 	bl	8003080 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(SPI_NRF24, &Replay, 1);
 8000656:	f107 030f 	add.w	r3, r7, #15
 800065a:	2201      	movs	r2, #1
 800065c:	4619      	mov	r1, r3
 800065e:	4808      	ldr	r0, [pc, #32]	; (8000680 <NRF24_read+0x4c>)
 8000660:	f002 fdc0 	bl	80031e4 <HAL_SPI_Receive_DMA>
	NRF24_unselect();
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066a:	4804      	ldr	r0, [pc, #16]	; (800067c <NRF24_read+0x48>)
 800066c:	f001 ff9a 	bl	80025a4 <HAL_GPIO_WritePin>
	return Replay;
 8000670:	7bfb      	ldrb	r3, [r7, #15]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40020400 	.word	0x40020400
 8000680:	20000374 	.word	0x20000374

08000684 <NRF24_Addr_read>:

void NRF24_Addr_read(uint8_t Adr){
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[5];
	NRF24_select();
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000694:	4836      	ldr	r0, [pc, #216]	; (8000770 <NRF24_Addr_read+0xec>)
 8000696:	f001 ff85 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	2201      	movs	r2, #1
 800069e:	4619      	mov	r1, r3
 80006a0:	4834      	ldr	r0, [pc, #208]	; (8000774 <NRF24_Addr_read+0xf0>)
 80006a2:	f002 fced 	bl	8003080 <HAL_SPI_Transmit_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	73fb      	strb	r3, [r7, #15]
 80006aa:	e00b      	b.n	80006c4 <NRF24_Addr_read+0x40>
		HAL_SPI_Receive_DMA(SPI_NRF24, &Buffer[i], 1);
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	f107 0208 	add.w	r2, r7, #8
 80006b2:	4413      	add	r3, r2
 80006b4:	2201      	movs	r2, #1
 80006b6:	4619      	mov	r1, r3
 80006b8:	482e      	ldr	r0, [pc, #184]	; (8000774 <NRF24_Addr_read+0xf0>)
 80006ba:	f002 fd93 	bl	80031e4 <HAL_SPI_Receive_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	3301      	adds	r3, #1
 80006c2:	73fb      	strb	r3, [r7, #15]
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	d9f0      	bls.n	80006ac <NRF24_Addr_read+0x28>
	}
	NRF24_unselect();
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d0:	4827      	ldr	r0, [pc, #156]	; (8000770 <NRF24_Addr_read+0xec>)
 80006d2:	f001 ff67 	bl	80025a4 <HAL_GPIO_WritePin>
	switch (Adr) {
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b10      	cmp	r3, #16
 80006da:	d030      	beq.n	800073e <NRF24_Addr_read+0xba>
 80006dc:	2b10      	cmp	r3, #16
 80006de:	dc43      	bgt.n	8000768 <NRF24_Addr_read+0xe4>
 80006e0:	2b0a      	cmp	r3, #10
 80006e2:	d002      	beq.n	80006ea <NRF24_Addr_read+0x66>
 80006e4:	2b0b      	cmp	r3, #11
 80006e6:	d015      	beq.n	8000714 <NRF24_Addr_read+0x90>
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
			break;
	}
}
 80006e8:	e03e      	b.n	8000768 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[4]=Buffer[0];
 80006ea:	7a3a      	ldrb	r2, [r7, #8]
 80006ec:	4b22      	ldr	r3, [pc, #136]	; (8000778 <NRF24_Addr_read+0xf4>)
 80006ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[3]=Buffer[1];
 80006f2:	7a7a      	ldrb	r2, [r7, #9]
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <NRF24_Addr_read+0xf4>)
 80006f6:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[2]=Buffer[2];
 80006fa:	7aba      	ldrb	r2, [r7, #10]
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <NRF24_Addr_read+0xf4>)
 80006fe:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[1]=Buffer[3];
 8000702:	7afa      	ldrb	r2, [r7, #11]
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <NRF24_Addr_read+0xf4>)
 8000706:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[0]=Buffer[4];
 800070a:	7b3a      	ldrb	r2, [r7, #12]
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <NRF24_Addr_read+0xf4>)
 800070e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			break;
 8000712:	e029      	b.n	8000768 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[4]=Buffer[0];
 8000714:	7a3a      	ldrb	r2, [r7, #8]
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <NRF24_Addr_read+0xf4>)
 8000718:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[3]=Buffer[1];
 800071c:	7a7a      	ldrb	r2, [r7, #9]
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <NRF24_Addr_read+0xf4>)
 8000720:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[2]=Buffer[2];
 8000724:	7aba      	ldrb	r2, [r7, #10]
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <NRF24_Addr_read+0xf4>)
 8000728:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[1]=Buffer[3];
 800072c:	7afa      	ldrb	r2, [r7, #11]
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <NRF24_Addr_read+0xf4>)
 8000730:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[0]=Buffer[4];
 8000734:	7b3a      	ldrb	r2, [r7, #12]
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <NRF24_Addr_read+0xf4>)
 8000738:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
			break;
 800073c:	e014      	b.n	8000768 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.TX_ADDR[4]=Buffer[0];
 800073e:	7a3a      	ldrb	r2, [r7, #8]
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <NRF24_Addr_read+0xf4>)
 8000742:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			NRF24_Configurations_Struct.Actual.TX_ADDR[3]=Buffer[1];
 8000746:	7a7a      	ldrb	r2, [r7, #9]
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <NRF24_Addr_read+0xf4>)
 800074a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
 800074e:	7aba      	ldrb	r2, [r7, #10]
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <NRF24_Addr_read+0xf4>)
 8000752:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
 8000756:	7afa      	ldrb	r2, [r7, #11]
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <NRF24_Addr_read+0xf4>)
 800075a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
 800075e:	7b3a      	ldrb	r2, [r7, #12]
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <NRF24_Addr_read+0xf4>)
 8000762:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
			break;
 8000766:	bf00      	nop
}
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40020400 	.word	0x40020400
 8000774:	20000374 	.word	0x20000374
 8000778:	2000002c 	.word	0x2000002c

0800077c <NRF24_FlushTxFIFO>:

void NRF24_FlushTxFIFO(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_TX;
 8000782:	23e1      	movs	r3, #225	; 0xe1
 8000784:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 7100 	mov.w	r1, #512	; 0x200
 800078c:	4809      	ldr	r0, [pc, #36]	; (80007b4 <NRF24_FlushTxFIFO+0x38>)
 800078e:	f001 ff09 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	2201      	movs	r2, #1
 8000796:	4619      	mov	r1, r3
 8000798:	4807      	ldr	r0, [pc, #28]	; (80007b8 <NRF24_FlushTxFIFO+0x3c>)
 800079a:	f002 fc71 	bl	8003080 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a4:	4803      	ldr	r0, [pc, #12]	; (80007b4 <NRF24_FlushTxFIFO+0x38>)
 80007a6:	f001 fefd 	bl	80025a4 <HAL_GPIO_WritePin>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40020400 	.word	0x40020400
 80007b8:	20000374 	.word	0x20000374

080007bc <NRF24_FlushRxFIFO>:

void NRF24_FlushRxFIFO(void){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_RX;
 80007c2:	23e2      	movs	r3, #226	; 0xe2
 80007c4:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <NRF24_FlushRxFIFO+0x38>)
 80007ce:	f001 fee9 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	2201      	movs	r2, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	4807      	ldr	r0, [pc, #28]	; (80007f8 <NRF24_FlushRxFIFO+0x3c>)
 80007da:	f002 fc51 	bl	8003080 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e4:	4803      	ldr	r0, [pc, #12]	; (80007f4 <NRF24_FlushRxFIFO+0x38>)
 80007e6:	f001 fedd 	bl	80025a4 <HAL_GPIO_WritePin>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40020400 	.word	0x40020400
 80007f8:	20000374 	.word	0x20000374

080007fc <NRF24_PowerUp>:

void NRF24_PowerUp(void){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
	uint8_t Adr = 0x00;
 8000802:	2300      	movs	r3, #0
 8000804:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer= NRF24_read(Adr);
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff13 	bl	8000634 <NRF24_read>
 800080e:	4603      	mov	r3, r0
 8000810:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	f043 0320 	orr.w	r3, r3, #32
 8000818:	71fb      	strb	r3, [r7, #7]
	Buffer |= 0x02;
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	71bb      	strb	r3, [r7, #6]
	NRF24_write(Adr, Buffer);
 8000822:	79ba      	ldrb	r2, [r7, #6]
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fe8f 	bl	800054c <NRF24_write>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <NRF24_ActualConfiguration>:

void NRF24_ActualConfiguration(void){
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	NRF24_Configurations_Struct.Actual.CONFIG 		= NRF24_read(CONFIG);
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff fef9 	bl	8000634 <NRF24_read>
 8000842:	4603      	mov	r3, r0
 8000844:	461a      	mov	r2, r3
 8000846:	4b5f      	ldr	r3, [pc, #380]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 8000848:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	NRF24_Configurations_Struct.Actual.EN_AA  		= NRF24_read(EN_AA);
 800084c:	2001      	movs	r0, #1
 800084e:	f7ff fef1 	bl	8000634 <NRF24_read>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	4b5b      	ldr	r3, [pc, #364]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 8000858:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	NRF24_Configurations_Struct.Actual.EN_RXADDR  	= NRF24_read(EN_RXADDR);
 800085c:	2002      	movs	r0, #2
 800085e:	f7ff fee9 	bl	8000634 <NRF24_read>
 8000862:	4603      	mov	r3, r0
 8000864:	461a      	mov	r2, r3
 8000866:	4b57      	ldr	r3, [pc, #348]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 8000868:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	NRF24_Configurations_Struct.Actual.SETUP_AW  	= NRF24_read(SETUP_AW);
 800086c:	2003      	movs	r0, #3
 800086e:	f7ff fee1 	bl	8000634 <NRF24_read>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	4b53      	ldr	r3, [pc, #332]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 8000878:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	NRF24_Configurations_Struct.Actual.SETUP_RETR 	= NRF24_read(SETUP_RETR);
 800087c:	2004      	movs	r0, #4
 800087e:	f7ff fed9 	bl	8000634 <NRF24_read>
 8000882:	4603      	mov	r3, r0
 8000884:	461a      	mov	r2, r3
 8000886:	4b4f      	ldr	r3, [pc, #316]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 8000888:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	NRF24_Configurations_Struct.Actual.RF_CH  		= NRF24_read(RF_CH);
 800088c:	2005      	movs	r0, #5
 800088e:	f7ff fed1 	bl	8000634 <NRF24_read>
 8000892:	4603      	mov	r3, r0
 8000894:	461a      	mov	r2, r3
 8000896:	4b4b      	ldr	r3, [pc, #300]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 8000898:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	NRF24_Configurations_Struct.Actual.RF_SETUP  	= NRF24_read(RF_SETUP);
 800089c:	2006      	movs	r0, #6
 800089e:	f7ff fec9 	bl	8000634 <NRF24_read>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b47      	ldr	r3, [pc, #284]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 80008a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	NRF24_Configurations_Struct.Actual.STATUS  		= NRF24_read(STATUS);
 80008ac:	2007      	movs	r0, #7
 80008ae:	f7ff fec1 	bl	8000634 <NRF24_read>
 80008b2:	4603      	mov	r3, r0
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b43      	ldr	r3, [pc, #268]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 80008b8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	NRF24_Configurations_Struct.Actual.OBSERVE  	= NRF24_read(OBSERVE);
 80008bc:	2008      	movs	r0, #8
 80008be:	f7ff feb9 	bl	8000634 <NRF24_read>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b3f      	ldr	r3, [pc, #252]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 80008c8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	NRF24_Configurations_Struct.Actual.CD  			= NRF24_read(CD);
 80008cc:	2009      	movs	r0, #9
 80008ce:	f7ff feb1 	bl	8000634 <NRF24_read>
 80008d2:	4603      	mov	r3, r0
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b3b      	ldr	r3, [pc, #236]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 80008d8:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	NRF24_Addr_read(RX_ADDR_P0);
 80008dc:	200a      	movs	r0, #10
 80008de:	f7ff fed1 	bl	8000684 <NRF24_Addr_read>
	NRF24_Addr_read(RX_ADDR_P1);
 80008e2:	200b      	movs	r0, #11
 80008e4:	f7ff fece 	bl	8000684 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_ADDR_P2  	= NRF24_read(RX_ADDR_P2);
 80008e8:	200c      	movs	r0, #12
 80008ea:	f7ff fea3 	bl	8000634 <NRF24_read>
 80008ee:	4603      	mov	r3, r0
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b34      	ldr	r3, [pc, #208]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 80008f4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	NRF24_Configurations_Struct.Actual.RX_ADDR_P3 	= NRF24_read(RX_ADDR_P3);
 80008f8:	200d      	movs	r0, #13
 80008fa:	f7ff fe9b 	bl	8000634 <NRF24_read>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 8000904:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	NRF24_Configurations_Struct.Actual.RX_ADDR_P4  	= NRF24_read(RX_ADDR_P4);
 8000908:	200e      	movs	r0, #14
 800090a:	f7ff fe93 	bl	8000634 <NRF24_read>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 8000914:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	NRF24_Configurations_Struct.Actual.RX_ADDR_P5  	= NRF24_read(RX_ADDR_P5);
 8000918:	200f      	movs	r0, #15
 800091a:	f7ff fe8b 	bl	8000634 <NRF24_read>
 800091e:	4603      	mov	r3, r0
 8000920:	461a      	mov	r2, r3
 8000922:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 8000924:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	NRF24_Addr_read(TX_ADDR);
 8000928:	2010      	movs	r0, #16
 800092a:	f7ff feab 	bl	8000684 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_PW_P0  	= NRF24_read(RX_PW_P0);
 800092e:	2011      	movs	r0, #17
 8000930:	f7ff fe80 	bl	8000634 <NRF24_read>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 800093a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	NRF24_Configurations_Struct.Actual.RX_PW_P1  	= NRF24_read(RX_PW_P1);
 800093e:	2012      	movs	r0, #18
 8000940:	f7ff fe78 	bl	8000634 <NRF24_read>
 8000944:	4603      	mov	r3, r0
 8000946:	461a      	mov	r2, r3
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 800094a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	NRF24_Configurations_Struct.Actual.RX_PW_P2  	= NRF24_read(RX_PW_P2);
 800094e:	2013      	movs	r0, #19
 8000950:	f7ff fe70 	bl	8000634 <NRF24_read>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 800095a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	NRF24_Configurations_Struct.Actual.RX_PW_P3  	= NRF24_read(RX_PW_P3);
 800095e:	2014      	movs	r0, #20
 8000960:	f7ff fe68 	bl	8000634 <NRF24_read>
 8000964:	4603      	mov	r3, r0
 8000966:	461a      	mov	r2, r3
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 800096a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	NRF24_Configurations_Struct.Actual.RX_PW_P4  	= NRF24_read(RX_PW_P4);
 800096e:	2015      	movs	r0, #21
 8000970:	f7ff fe60 	bl	8000634 <NRF24_read>
 8000974:	4603      	mov	r3, r0
 8000976:	461a      	mov	r2, r3
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 800097a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	NRF24_Configurations_Struct.Actual.RX_PW_P5  	= NRF24_read(RX_PW_P5);
 800097e:	2016      	movs	r0, #22
 8000980:	f7ff fe58 	bl	8000634 <NRF24_read>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 800098a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	NRF24_Configurations_Struct.Actual.FIFO_STATUS  = NRF24_read(FIFO_STATUS);
 800098e:	2017      	movs	r0, #23
 8000990:	f7ff fe50 	bl	8000634 <NRF24_read>
 8000994:	4603      	mov	r3, r0
 8000996:	461a      	mov	r2, r3
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 800099a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	NRF24_Configurations_Struct.Actual.DYNPD  		= NRF24_read(DYNPD);
 800099e:	201c      	movs	r0, #28
 80009a0:	f7ff fe48 	bl	8000634 <NRF24_read>
 80009a4:	4603      	mov	r3, r0
 80009a6:	461a      	mov	r2, r3
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 80009aa:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	NRF24_Configurations_Struct.Actual.FEATURE  	= NRF24_read(FEATURE);
 80009ae:	201d      	movs	r0, #29
 80009b0:	f7ff fe40 	bl	8000634 <NRF24_read>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b02      	ldr	r3, [pc, #8]	; (80009c4 <NRF24_ActualConfiguration+0x18c>)
 80009ba:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000002c 	.word	0x2000002c

080009c8 <NRF24_config>:

void NRF24_config(NRF24_Address_Configurations_t Configuration_struct){
 80009c8:	b084      	sub	sp, #16
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	f107 0c08 	add.w	ip, r7, #8
 80009d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	NRF24_write(CONFIG,	Configuration_struct.CONFIG);
 80009d6:	7a3b      	ldrb	r3, [r7, #8]
 80009d8:	4619      	mov	r1, r3
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff fdb6 	bl	800054c <NRF24_write>
	NRF24_write(EN_AA, Configuration_struct.EN_AA);
 80009e0:	7a7b      	ldrb	r3, [r7, #9]
 80009e2:	4619      	mov	r1, r3
 80009e4:	2001      	movs	r0, #1
 80009e6:	f7ff fdb1 	bl	800054c <NRF24_write>
	NRF24_write(EN_RXADDR,Configuration_struct.EN_RXADDR);
 80009ea:	7abb      	ldrb	r3, [r7, #10]
 80009ec:	4619      	mov	r1, r3
 80009ee:	2002      	movs	r0, #2
 80009f0:	f7ff fdac 	bl	800054c <NRF24_write>
	NRF24_write(SETUP_AW,Configuration_struct.SETUP_AW);
 80009f4:	7afb      	ldrb	r3, [r7, #11]
 80009f6:	4619      	mov	r1, r3
 80009f8:	2003      	movs	r0, #3
 80009fa:	f7ff fda7 	bl	800054c <NRF24_write>
	NRF24_write(SETUP_RETR,Configuration_struct.SETUP_RETR);
 80009fe:	7b3b      	ldrb	r3, [r7, #12]
 8000a00:	4619      	mov	r1, r3
 8000a02:	2004      	movs	r0, #4
 8000a04:	f7ff fda2 	bl	800054c <NRF24_write>
	NRF24_write(RF_CH,Configuration_struct.RF_CH);
 8000a08:	7b7b      	ldrb	r3, [r7, #13]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	2005      	movs	r0, #5
 8000a0e:	f7ff fd9d 	bl	800054c <NRF24_write>
	NRF24_write(RF_SETUP,Configuration_struct.RF_SETUP);
 8000a12:	7bbb      	ldrb	r3, [r7, #14]
 8000a14:	4619      	mov	r1, r3
 8000a16:	2006      	movs	r0, #6
 8000a18:	f7ff fd98 	bl	800054c <NRF24_write>
	NRF24_write(STATUS,Configuration_struct.STATUS);
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	2007      	movs	r0, #7
 8000a22:	f7ff fd93 	bl	800054c <NRF24_write>
	NRF24_write(OBSERVE,Configuration_struct.OBSERVE);
 8000a26:	7c3b      	ldrb	r3, [r7, #16]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	2008      	movs	r0, #8
 8000a2c:	f7ff fd8e 	bl	800054c <NRF24_write>
	NRF24_write(CD,Configuration_struct.CD);
 8000a30:	7c7b      	ldrb	r3, [r7, #17]
 8000a32:	4619      	mov	r1, r3
 8000a34:	2009      	movs	r0, #9
 8000a36:	f7ff fd89 	bl	800054c <NRF24_write>
	NRF24_Addr_write(RX_ADDR_P0, Configuration_struct.RX_ADDR_P0);
 8000a3a:	f107 0312 	add.w	r3, r7, #18
 8000a3e:	4619      	mov	r1, r3
 8000a40:	200a      	movs	r0, #10
 8000a42:	f7ff fdb1 	bl	80005a8 <NRF24_Addr_write>
	NRF24_Addr_write(RX_ADDR_P1, Configuration_struct.RX_ADDR_P1);
 8000a46:	f107 0317 	add.w	r3, r7, #23
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	200b      	movs	r0, #11
 8000a4e:	f7ff fdab 	bl	80005a8 <NRF24_Addr_write>
	NRF24_write(RX_ADDR_P2,Configuration_struct.RX_ADDR_P2);
 8000a52:	7f3b      	ldrb	r3, [r7, #28]
 8000a54:	4619      	mov	r1, r3
 8000a56:	200c      	movs	r0, #12
 8000a58:	f7ff fd78 	bl	800054c <NRF24_write>
	NRF24_write(RX_ADDR_P3,Configuration_struct.RX_ADDR_P3);
 8000a5c:	7f7b      	ldrb	r3, [r7, #29]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	200d      	movs	r0, #13
 8000a62:	f7ff fd73 	bl	800054c <NRF24_write>
	NRF24_write(RX_ADDR_P4,Configuration_struct.RX_ADDR_P4);
 8000a66:	7fbb      	ldrb	r3, [r7, #30]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	200e      	movs	r0, #14
 8000a6c:	f7ff fd6e 	bl	800054c <NRF24_write>
	NRF24_write(RX_ADDR_P5,Configuration_struct.RX_ADDR_P5);
 8000a70:	7ffb      	ldrb	r3, [r7, #31]
 8000a72:	4619      	mov	r1, r3
 8000a74:	200f      	movs	r0, #15
 8000a76:	f7ff fd69 	bl	800054c <NRF24_write>
	NRF24_Addr_write(TX_ADDR, Configuration_struct.TX_ADDR);
 8000a7a:	f107 0320 	add.w	r3, r7, #32
 8000a7e:	4619      	mov	r1, r3
 8000a80:	2010      	movs	r0, #16
 8000a82:	f7ff fd91 	bl	80005a8 <NRF24_Addr_write>
	NRF24_write(RX_PW_P0,Configuration_struct.RX_PW_P0);
 8000a86:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	2011      	movs	r0, #17
 8000a8e:	f7ff fd5d 	bl	800054c <NRF24_write>
	NRF24_write(RX_PW_P1,Configuration_struct.RX_PW_P1);
 8000a92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a96:	4619      	mov	r1, r3
 8000a98:	2012      	movs	r0, #18
 8000a9a:	f7ff fd57 	bl	800054c <NRF24_write>
	NRF24_write(RX_PW_P2,Configuration_struct.RX_PW_P2);
 8000a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	2013      	movs	r0, #19
 8000aa6:	f7ff fd51 	bl	800054c <NRF24_write>
	NRF24_write(RX_PW_P3,Configuration_struct.RX_PW_P3);
 8000aaa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	2014      	movs	r0, #20
 8000ab2:	f7ff fd4b 	bl	800054c <NRF24_write>
	NRF24_write(RX_PW_P4,Configuration_struct.RX_PW_P4);
 8000ab6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000aba:	4619      	mov	r1, r3
 8000abc:	2015      	movs	r0, #21
 8000abe:	f7ff fd45 	bl	800054c <NRF24_write>
	NRF24_write(RX_PW_P5,Configuration_struct.RX_PW_P5);
 8000ac2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	2016      	movs	r0, #22
 8000aca:	f7ff fd3f 	bl	800054c <NRF24_write>
	NRF24_write(FIFO_STATUS,Configuration_struct.FIFO_STATUS);
 8000ace:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	2017      	movs	r0, #23
 8000ad6:	f7ff fd39 	bl	800054c <NRF24_write>
	NRF24_write(DYNPD,Configuration_struct.DYNPD);
 8000ada:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ade:	4619      	mov	r1, r3
 8000ae0:	201c      	movs	r0, #28
 8000ae2:	f7ff fd33 	bl	800054c <NRF24_write>
	NRF24_write(FEATURE,Configuration_struct.FEATURE);
 8000ae6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000aea:	4619      	mov	r1, r3
 8000aec:	201d      	movs	r0, #29
 8000aee:	f7ff fd2d 	bl	800054c <NRF24_write>
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000afa:	b004      	add	sp, #16
 8000afc:	4770      	bx	lr
	...

08000b00 <NRF24_DefaultConfiguration>:

void NRF24_DefaultConfiguration(void){
 8000b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b02:	b087      	sub	sp, #28
 8000b04:	af06      	add	r7, sp, #24
	NRF24_FlushTxFIFO();
 8000b06:	f7ff fe39 	bl	800077c <NRF24_FlushTxFIFO>
	NRF24_FlushRxFIFO();
 8000b0a:	f7ff fe57 	bl	80007bc <NRF24_FlushRxFIFO>
	NRF24_Configurations_Struct.Default.CONFIG 			= 0x78;
 8000b0e:	4b48      	ldr	r3, [pc, #288]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b10:	2278      	movs	r2, #120	; 0x78
 8000b12:	701a      	strb	r2, [r3, #0]
	NRF24_Configurations_Struct.Default.EN_AA  			= 0x3F;
 8000b14:	4b46      	ldr	r3, [pc, #280]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b16:	223f      	movs	r2, #63	; 0x3f
 8000b18:	705a      	strb	r2, [r3, #1]
	NRF24_Configurations_Struct.Default.EN_RXADDR  		= 0x03;
 8000b1a:	4b45      	ldr	r3, [pc, #276]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	709a      	strb	r2, [r3, #2]
	NRF24_Configurations_Struct.Default.SETUP_AW  		= 0x03;
 8000b20:	4b43      	ldr	r3, [pc, #268]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b22:	2203      	movs	r2, #3
 8000b24:	70da      	strb	r2, [r3, #3]
	NRF24_Configurations_Struct.Default.SETUP_RETR 		= 0x03;
 8000b26:	4b42      	ldr	r3, [pc, #264]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b28:	2203      	movs	r2, #3
 8000b2a:	711a      	strb	r2, [r3, #4]
	NRF24_Configurations_Struct.Default.RF_CH  			= 0x02;
 8000b2c:	4b40      	ldr	r3, [pc, #256]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b2e:	2202      	movs	r2, #2
 8000b30:	715a      	strb	r2, [r3, #5]
	NRF24_Configurations_Struct.Default.RF_SETUP  		= 0x09;
 8000b32:	4b3f      	ldr	r3, [pc, #252]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b34:	2209      	movs	r2, #9
 8000b36:	719a      	strb	r2, [r3, #6]
	NRF24_Configurations_Struct.Default.STATUS  		= 0X70;
 8000b38:	4b3d      	ldr	r3, [pc, #244]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b3a:	2270      	movs	r2, #112	; 0x70
 8000b3c:	71da      	strb	r2, [r3, #7]
	NRF24_Configurations_Struct.Default.OBSERVE  		= 0X00;
 8000b3e:	4b3c      	ldr	r3, [pc, #240]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	721a      	strb	r2, [r3, #8]
	NRF24_Configurations_Struct.Default.CD  			= 0x00;
 8000b44:	4b3a      	ldr	r3, [pc, #232]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	725a      	strb	r2, [r3, #9]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[0]  	= 0xE7;
 8000b4a:	4b39      	ldr	r3, [pc, #228]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b4c:	22e7      	movs	r2, #231	; 0xe7
 8000b4e:	729a      	strb	r2, [r3, #10]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[1]  	= 0xE7;
 8000b50:	4b37      	ldr	r3, [pc, #220]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b52:	22e7      	movs	r2, #231	; 0xe7
 8000b54:	72da      	strb	r2, [r3, #11]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[2]  	= 0xE7;
 8000b56:	4b36      	ldr	r3, [pc, #216]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b58:	22e7      	movs	r2, #231	; 0xe7
 8000b5a:	731a      	strb	r2, [r3, #12]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[3]  	= 0xE7;
 8000b5c:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b5e:	22e7      	movs	r2, #231	; 0xe7
 8000b60:	735a      	strb	r2, [r3, #13]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[4]  	= 0xE7;
 8000b62:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b64:	22e7      	movs	r2, #231	; 0xe7
 8000b66:	739a      	strb	r2, [r3, #14]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[0]  	= 0xC2;
 8000b68:	4b31      	ldr	r3, [pc, #196]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b6a:	22c2      	movs	r2, #194	; 0xc2
 8000b6c:	73da      	strb	r2, [r3, #15]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[1]  	= 0xC2;
 8000b6e:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b70:	22c2      	movs	r2, #194	; 0xc2
 8000b72:	741a      	strb	r2, [r3, #16]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[2]  	= 0xC2;
 8000b74:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b76:	22c2      	movs	r2, #194	; 0xc2
 8000b78:	745a      	strb	r2, [r3, #17]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[3]  	= 0xC2;
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b7c:	22c2      	movs	r2, #194	; 0xc2
 8000b7e:	749a      	strb	r2, [r3, #18]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[4]  	= 0xC2;
 8000b80:	4b2b      	ldr	r3, [pc, #172]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b82:	22c2      	movs	r2, #194	; 0xc2
 8000b84:	74da      	strb	r2, [r3, #19]
	NRF24_Configurations_Struct.Default.RX_ADDR_P2  	= 0xC3;
 8000b86:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b88:	22c3      	movs	r2, #195	; 0xc3
 8000b8a:	751a      	strb	r2, [r3, #20]
	NRF24_Configurations_Struct.Default.RX_ADDR_P3 		= 0xC4;
 8000b8c:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b8e:	22c4      	movs	r2, #196	; 0xc4
 8000b90:	755a      	strb	r2, [r3, #21]
	NRF24_Configurations_Struct.Default.RX_ADDR_P4  	= 0xC5;
 8000b92:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b94:	22c5      	movs	r2, #197	; 0xc5
 8000b96:	759a      	strb	r2, [r3, #22]
	NRF24_Configurations_Struct.Default.RX_ADDR_P5  	= 0xC6;
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000b9a:	22c6      	movs	r2, #198	; 0xc6
 8000b9c:	75da      	strb	r2, [r3, #23]
	NRF24_Configurations_Struct.Default.TX_ADDR[0]   	= 0xE7;
 8000b9e:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000ba0:	22e7      	movs	r2, #231	; 0xe7
 8000ba2:	761a      	strb	r2, [r3, #24]
	NRF24_Configurations_Struct.Default.TX_ADDR[1]   	= 0xE7;
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000ba6:	22e7      	movs	r2, #231	; 0xe7
 8000ba8:	765a      	strb	r2, [r3, #25]
	NRF24_Configurations_Struct.Default.TX_ADDR[2]   	= 0xE7;
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000bac:	22e7      	movs	r2, #231	; 0xe7
 8000bae:	769a      	strb	r2, [r3, #26]
	NRF24_Configurations_Struct.Default.TX_ADDR[3]   	= 0xE7;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000bb2:	22e7      	movs	r2, #231	; 0xe7
 8000bb4:	76da      	strb	r2, [r3, #27]
	NRF24_Configurations_Struct.Default.TX_ADDR[4]   	= 0xE7;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000bb8:	22e7      	movs	r2, #231	; 0xe7
 8000bba:	771a      	strb	r2, [r3, #28]
	NRF24_Configurations_Struct.Default.RX_PW_P0  		= 0X20;
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000bbe:	2220      	movs	r2, #32
 8000bc0:	775a      	strb	r2, [r3, #29]
	NRF24_Configurations_Struct.Default.RX_PW_P1  		= 0X20;
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000bc4:	2220      	movs	r2, #32
 8000bc6:	779a      	strb	r2, [r3, #30]
	NRF24_Configurations_Struct.Default.RX_PW_P2  		= 0X00;
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	77da      	strb	r2, [r3, #31]
	NRF24_Configurations_Struct.Default.RX_PW_P3  		= 0X00;
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2020 	strb.w	r2, [r3, #32]
	NRF24_Configurations_Struct.Default.RX_PW_P4  		= 0X00;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	NRF24_Configurations_Struct.Default.RX_PW_P5  		= 0X00;
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	NRF24_Configurations_Struct.Default.FIFO_STATUS  	= 0X11;
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000be8:	2211      	movs	r2, #17
 8000bea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	NRF24_Configurations_Struct.Default.DYNPD  			= 0X00;
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	NRF24_Configurations_Struct.Default.FEATURE  		= 0X00;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	NRF24_config(NRF24_Configurations_Struct.Default);
 8000bfe:	4e0c      	ldr	r6, [pc, #48]	; (8000c30 <NRF24_DefaultConfiguration+0x130>)
 8000c00:	466c      	mov	r4, sp
 8000c02:	f106 0510 	add.w	r5, r6, #16
 8000c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c0e:	6020      	str	r0, [r4, #0]
 8000c10:	3404      	adds	r4, #4
 8000c12:	8021      	strh	r1, [r4, #0]
 8000c14:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c18:	f7ff fed6 	bl	80009c8 <NRF24_config>
	NRF24_ActualConfiguration();
 8000c1c:	f7ff fe0c 	bl	8000838 <NRF24_ActualConfiguration>
	NRF24_mode = Init;
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <NRF24_DefaultConfiguration+0x134>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
}
 8000c26:	bf00      	nop
 8000c28:	3704      	adds	r7, #4
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000002c 	.word	0x2000002c
 8000c34:	200000cf 	.word	0x200000cf

08000c38 <NRF24_RxConfiguration>:
	NRF24_config(NRF24_Configurations_Struct.Tx_mode);
	NRF24_ActualConfiguration();
	NRF24_mode = TxMode;
}

void NRF24_RxConfiguration(void){
 8000c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af06      	add	r7, sp, #24
	NRF24_Configurations_Struct.Rx_mode.CONFIG 			= 0x79;
 8000c3e:	4b5b      	ldr	r3, [pc, #364]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000c40:	2279      	movs	r2, #121	; 0x79
 8000c42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	NRF24_Configurations_Struct.Rx_mode.EN_AA  			= 0x03;
 8000c46:	4b59      	ldr	r3, [pc, #356]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000c48:	2203      	movs	r2, #3
 8000c4a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	NRF24_Configurations_Struct.Rx_mode.EN_RXADDR  		= 0x03;
 8000c4e:	4b57      	ldr	r3, [pc, #348]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000c50:	2203      	movs	r2, #3
 8000c52:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	NRF24_Configurations_Struct.Rx_mode.SETUP_AW  		= 0x03;
 8000c56:	4b55      	ldr	r3, [pc, #340]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000c58:	2203      	movs	r2, #3
 8000c5a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	NRF24_Configurations_Struct.Rx_mode.SETUP_RETR 		= 0x33;
 8000c5e:	4b53      	ldr	r3, [pc, #332]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000c60:	2233      	movs	r2, #51	; 0x33
 8000c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	NRF24_Configurations_Struct.Rx_mode.RF_CH  			= 0x12;
 8000c66:	4b51      	ldr	r3, [pc, #324]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000c68:	2212      	movs	r2, #18
 8000c6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	NRF24_Configurations_Struct.Rx_mode.RF_SETUP  		= 0x09;
 8000c6e:	4b4f      	ldr	r3, [pc, #316]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000c70:	2209      	movs	r2, #9
 8000c72:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	NRF24_Configurations_Struct.Rx_mode.STATUS  		= 0X70;
 8000c76:	4b4d      	ldr	r3, [pc, #308]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000c78:	2270      	movs	r2, #112	; 0x70
 8000c7a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	NRF24_Configurations_Struct.Rx_mode.OBSERVE  		= 0X00;
 8000c7e:	4b4b      	ldr	r3, [pc, #300]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	NRF24_Configurations_Struct.Rx_mode.CD  			= 0x00;
 8000c86:	4b49      	ldr	r3, [pc, #292]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[0]  	= 0xE7;
 8000c8e:	4b47      	ldr	r3, [pc, #284]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000c90:	22e7      	movs	r2, #231	; 0xe7
 8000c92:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[1]  	= 0xE7;
 8000c96:	4b45      	ldr	r3, [pc, #276]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000c98:	22e7      	movs	r2, #231	; 0xe7
 8000c9a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[2]  	= 0xE7;
 8000c9e:	4b43      	ldr	r3, [pc, #268]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000ca0:	22e7      	movs	r2, #231	; 0xe7
 8000ca2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[3]  	= 0xE7;
 8000ca6:	4b41      	ldr	r3, [pc, #260]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000ca8:	22e7      	movs	r2, #231	; 0xe7
 8000caa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[4]  	= 0xE7;
 8000cae:	4b3f      	ldr	r3, [pc, #252]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000cb0:	22e7      	movs	r2, #231	; 0xe7
 8000cb2:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[0]  	= 0xC2;
 8000cb6:	4b3d      	ldr	r3, [pc, #244]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000cb8:	22c2      	movs	r2, #194	; 0xc2
 8000cba:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[1]  	= 0xC2;
 8000cbe:	4b3b      	ldr	r3, [pc, #236]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000cc0:	22c2      	movs	r2, #194	; 0xc2
 8000cc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[2]  	= 0xC2;
 8000cc6:	4b39      	ldr	r3, [pc, #228]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000cc8:	22c2      	movs	r2, #194	; 0xc2
 8000cca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[3]  	= 0xC2;
 8000cce:	4b37      	ldr	r3, [pc, #220]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000cd0:	22c2      	movs	r2, #194	; 0xc2
 8000cd2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[4]  	= 0xC2;
 8000cd6:	4b35      	ldr	r3, [pc, #212]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000cd8:	22c2      	movs	r2, #194	; 0xc2
 8000cda:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P2  	= 0xC3;
 8000cde:	4b33      	ldr	r3, [pc, #204]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000ce0:	22c3      	movs	r2, #195	; 0xc3
 8000ce2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P3 		= 0xC4;
 8000ce6:	4b31      	ldr	r3, [pc, #196]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000ce8:	22c4      	movs	r2, #196	; 0xc4
 8000cea:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P4  	= 0xC5;
 8000cee:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000cf0:	22c5      	movs	r2, #197	; 0xc5
 8000cf2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P5  	= 0xC6;
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000cf8:	22c6      	movs	r2, #198	; 0xc6
 8000cfa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[0]   	= 0xE7;
 8000cfe:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000d00:	22e7      	movs	r2, #231	; 0xe7
 8000d02:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[1]   	= 0xE7;
 8000d06:	4b29      	ldr	r3, [pc, #164]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000d08:	22e7      	movs	r2, #231	; 0xe7
 8000d0a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[2]   	= 0xE7;
 8000d0e:	4b27      	ldr	r3, [pc, #156]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000d10:	22e7      	movs	r2, #231	; 0xe7
 8000d12:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[3]   	= 0xE7;
 8000d16:	4b25      	ldr	r3, [pc, #148]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000d18:	22e7      	movs	r2, #231	; 0xe7
 8000d1a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[4]   	= 0xE7;
 8000d1e:	4b23      	ldr	r3, [pc, #140]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000d20:	22e7      	movs	r2, #231	; 0xe7
 8000d22:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P0  		= 0X20;
 8000d26:	4b21      	ldr	r3, [pc, #132]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000d28:	2220      	movs	r2, #32
 8000d2a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P1  		= 0X20;
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000d30:	2220      	movs	r2, #32
 8000d32:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P2  		= 0X00;
 8000d36:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P3  		= 0X00;
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P4  		= 0X00;
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P5  		= 0X00;
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	NRF24_Configurations_Struct.Rx_mode.FIFO_STATUS  	= 0X11;
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000d58:	2211      	movs	r2, #17
 8000d5a:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	NRF24_Configurations_Struct.Rx_mode.DYNPD  			= 0X00;
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	NRF24_Configurations_Struct.Rx_mode.FEATURE  		= 0X00;
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	NRF24_config(NRF24_Configurations_Struct.Rx_mode);
 8000d6e:	4e0f      	ldr	r6, [pc, #60]	; (8000dac <NRF24_RxConfiguration+0x174>)
 8000d70:	466c      	mov	r4, sp
 8000d72:	f106 055c 	add.w	r5, r6, #92	; 0x5c
 8000d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d7e:	6020      	str	r0, [r4, #0]
 8000d80:	3404      	adds	r4, #4
 8000d82:	8021      	strh	r1, [r4, #0]
 8000d84:	f106 034c 	add.w	r3, r6, #76	; 0x4c
 8000d88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d8a:	f7ff fe1d 	bl	80009c8 <NRF24_config>
	NRF24_ActualConfiguration();
 8000d8e:	f7ff fd53 	bl	8000838 <NRF24_ActualConfiguration>
	NRF24_Enable();
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <NRF24_RxConfiguration+0x178>)
 8000d9a:	f001 fc03 	bl	80025a4 <HAL_GPIO_WritePin>
	NRF24_mode = RxMode;
 8000d9e:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <NRF24_RxConfiguration+0x17c>)
 8000da0:	2202      	movs	r2, #2
 8000da2:	701a      	strb	r2, [r3, #0]
}
 8000da4:	bf00      	nop
 8000da6:	3704      	adds	r7, #4
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dac:	2000002c 	.word	0x2000002c
 8000db0:	40020400 	.word	0x40020400
 8000db4:	200000cf 	.word	0x200000cf

08000db8 <NRF24_CheckFlags>:

void NRF24_CheckFlags(void){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
	uint8_t buffer = NRF24_read(STATUS);
 8000dbe:	2007      	movs	r0, #7
 8000dc0:	f7ff fc38 	bl	8000634 <NRF24_read>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
	TX_FULL =  buffer & 0x01;
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <NRF24_CheckFlags+0xbc>)
 8000dd2:	701a      	strb	r2, [r3, #0]
	RX_P_NO = (buffer & 0x0E) >> 1;
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	105b      	asrs	r3, r3, #1
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <NRF24_CheckFlags+0xc0>)
 8000de2:	701a      	strb	r2, [r3, #0]
	MAX_RT  = (buffer & 0x10) >> 4;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	111b      	asrs	r3, r3, #4
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <NRF24_CheckFlags+0xc4>)
 8000df2:	701a      	strb	r2, [r3, #0]
	TX_DS   = (buffer & 0x20) >> 5;
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	115b      	asrs	r3, r3, #5
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <NRF24_CheckFlags+0xc8>)
 8000e02:	701a      	strb	r2, [r3, #0]
	RX_DR   = (buffer & 0x40) >> 6;
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	119b      	asrs	r3, r3, #6
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <NRF24_CheckFlags+0xcc>)
 8000e12:	701a      	strb	r2, [r3, #0]

	buffer   = NRF24_read(FIFO_STATUS);
 8000e14:	2017      	movs	r0, #23
 8000e16:	f7ff fc0d 	bl	8000634 <NRF24_read>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
	RX_EMPTY =  buffer & 0x01;
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <NRF24_CheckFlags+0xd0>)
 8000e28:	701a      	strb	r2, [r3, #0]
	RX_FULL  = (buffer & 0x02) >> 1;
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	105b      	asrs	r3, r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <NRF24_CheckFlags+0xd4>)
 8000e38:	701a      	strb	r2, [r3, #0]
	TX_EMPTY = (buffer & 0x10) >> 4;
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	111b      	asrs	r3, r3, #4
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <NRF24_CheckFlags+0xd8>)
 8000e48:	701a      	strb	r2, [r3, #0]
	TX_FULL  = (buffer & 0x20) >> 5;
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	115b      	asrs	r3, r3, #5
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <NRF24_CheckFlags+0xbc>)
 8000e58:	701a      	strb	r2, [r3, #0]
	TX_REUSE = (buffer & 0x40) >> 6;
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	119b      	asrs	r3, r3, #6
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <NRF24_CheckFlags+0xdc>)
 8000e68:	701a      	strb	r2, [r3, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200000c5 	.word	0x200000c5
 8000e78:	200000c6 	.word	0x200000c6
 8000e7c:	200000c7 	.word	0x200000c7
 8000e80:	200000c8 	.word	0x200000c8
 8000e84:	200000c9 	.word	0x200000c9
 8000e88:	200000ca 	.word	0x200000ca
 8000e8c:	200000cb 	.word	0x200000cb
 8000e90:	200000cc 	.word	0x200000cc
 8000e94:	200000cd 	.word	0x200000cd

08000e98 <NRF24_FIFO_write>:

void NRF24_FIFO_write(uint8_t *pData, uint8_t size){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	70fb      	strb	r3, [r7, #3]
	uint8_t Adr = W_TX_PAYLOAD;
 8000ea4:	23a0      	movs	r3, #160	; 0xa0
 8000ea6:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eae:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <NRF24_FIFO_write+0x60>)
 8000eb0:	f001 fb78 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000eb4:	f107 030e 	add.w	r3, r7, #14
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480f      	ldr	r0, [pc, #60]	; (8000efc <NRF24_FIFO_write+0x64>)
 8000ebe:	f002 f8df 	bl	8003080 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	e00a      	b.n	8000ede <NRF24_FIFO_write+0x46>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &pData[n], 1);
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480a      	ldr	r0, [pc, #40]	; (8000efc <NRF24_FIFO_write+0x64>)
 8000ed4:	f002 f8d4 	bl	8003080 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	3301      	adds	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	2b1f      	cmp	r3, #31
 8000ee2:	d9f1      	bls.n	8000ec8 <NRF24_FIFO_write+0x30>
	}
	NRF24_unselect();
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eea:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <NRF24_FIFO_write+0x60>)
 8000eec:	f001 fb5a 	bl	80025a4 <HAL_GPIO_WritePin>
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	20000374 	.word	0x20000374

08000f00 <NRF24_FIFO_read>:

void NRF24_FIFO_read(uint8_t *pData){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	uint8_t Adr = R_RX_PAYLOAD;
 8000f08:	2361      	movs	r3, #97	; 0x61
 8000f0a:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f12:	4812      	ldr	r0, [pc, #72]	; (8000f5c <NRF24_FIFO_read+0x5c>)
 8000f14:	f001 fb46 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000f18:	f107 030e 	add.w	r3, r7, #14
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480f      	ldr	r0, [pc, #60]	; (8000f60 <NRF24_FIFO_read+0x60>)
 8000f22:	f002 f8ad 	bl	8003080 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	e00a      	b.n	8000f42 <NRF24_FIFO_read+0x42>
		HAL_SPI_Receive_DMA(SPI_NRF24, &pData[n], 1);
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	2201      	movs	r2, #1
 8000f34:	4619      	mov	r1, r3
 8000f36:	480a      	ldr	r0, [pc, #40]	; (8000f60 <NRF24_FIFO_read+0x60>)
 8000f38:	f002 f954 	bl	80031e4 <HAL_SPI_Receive_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b1f      	cmp	r3, #31
 8000f46:	d9f1      	bls.n	8000f2c <NRF24_FIFO_read+0x2c>
	}
	NRF24_unselect();
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4e:	4803      	ldr	r0, [pc, #12]	; (8000f5c <NRF24_FIFO_read+0x5c>)
 8000f50:	f001 fb28 	bl	80025a4 <HAL_GPIO_WritePin>
}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	20000374 	.word	0x20000374

08000f64 <NRF24_init>:

void NRF24_init(void){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	NRF24_Disable();
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6e:	4808      	ldr	r0, [pc, #32]	; (8000f90 <NRF24_init+0x2c>)
 8000f70:	f001 fb18 	bl	80025a4 <HAL_GPIO_WritePin>
	NRF24_unselect();
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <NRF24_init+0x2c>)
 8000f7c:	f001 fb12 	bl	80025a4 <HAL_GPIO_WritePin>
	NRF24_DefaultConfiguration();
 8000f80:	f7ff fdbe 	bl	8000b00 <NRF24_DefaultConfiguration>
	NRF24_mode = 0;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <NRF24_init+0x30>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40020400 	.word	0x40020400
 8000f94:	200000cf 	.word	0x200000cf

08000f98 <NRF24_Transmit>:

void NRF24_Transmit(void){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	NRF24_CheckFlags();
 8000f9c:	f7ff ff0c 	bl	8000db8 <NRF24_CheckFlags>
	if(MAX_RT)  NRF24_write(STATUS, 0x70);
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <NRF24_Transmit+0x80>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <NRF24_Transmit+0x18>
 8000fa8:	2170      	movs	r1, #112	; 0x70
 8000faa:	2007      	movs	r0, #7
 8000fac:	f7ff face 	bl	800054c <NRF24_write>
	if(TX_FULL) NRF24_FlushTxFIFO();
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <NRF24_Transmit+0x84>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <NRF24_Transmit+0x24>
 8000fb8:	f7ff fbe0 	bl	800077c <NRF24_FlushTxFIFO>
	if(Cont_TX > 10){
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <NRF24_Transmit+0x88>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b0a      	cmp	r3, #10
 8000fc2:	d909      	bls.n	8000fd8 <NRF24_Transmit+0x40>
		Cont_TX = 0;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <NRF24_Transmit+0x88>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
		NRF24_FIFO_write(TxBuffer, 32);
 8000fca:	2120      	movs	r1, #32
 8000fcc:	4815      	ldr	r0, [pc, #84]	; (8001024 <NRF24_Transmit+0x8c>)
 8000fce:	f7ff ff63 	bl	8000e98 <NRF24_FIFO_write>
		Transmision_Flag = 0;
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <NRF24_Transmit+0x90>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
	}
	switch (Transmision_Flag) {
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <NRF24_Transmit+0x90>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <NRF24_Transmit+0x4e>
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d00a      	beq.n	8000ffa <NRF24_Transmit+0x62>
 8000fe4:	e010      	b.n	8001008 <NRF24_Transmit+0x70>
		case 0:
			NRF24_Enable();
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fec:	480f      	ldr	r0, [pc, #60]	; (800102c <NRF24_Transmit+0x94>)
 8000fee:	f001 fad9 	bl	80025a4 <HAL_GPIO_WritePin>
			Transmision_Flag = 1;
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <NRF24_Transmit+0x90>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
			break;
 8000ff8:	e006      	b.n	8001008 <NRF24_Transmit+0x70>
		case 1:
			NRF24_Disable();
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001000:	480a      	ldr	r0, [pc, #40]	; (800102c <NRF24_Transmit+0x94>)
 8001002:	f001 facf 	bl	80025a4 <HAL_GPIO_WritePin>
			break;
 8001006:	bf00      	nop
	}
	++Cont_TX;
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <NRF24_Transmit+0x88>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <NRF24_Transmit+0x88>)
 8001012:	701a      	strb	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200000c7 	.word	0x200000c7
 800101c:	200000c5 	.word	0x200000c5
 8001020:	200000ce 	.word	0x200000ce
 8001024:	200000d0 	.word	0x200000d0
 8001028:	200000c4 	.word	0x200000c4
 800102c:	40020400 	.word	0x40020400

08001030 <NRF24_Receive>:

void NRF24_Receive(void){
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	NRF24_CheckFlags();
 8001034:	f7ff fec0 	bl	8000db8 <NRF24_CheckFlags>
	if(RX_P_NO != 7){
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <NRF24_Receive+0x28>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b07      	cmp	r3, #7
 800103e:	d008      	beq.n	8001052 <NRF24_Receive+0x22>
		NRF24_FIFO_read(RxBuffer);
 8001040:	4806      	ldr	r0, [pc, #24]	; (800105c <NRF24_Receive+0x2c>)
 8001042:	f7ff ff5d 	bl	8000f00 <NRF24_FIFO_read>
		HAL_UART_Transmit(&huart6, RxBuffer, 32, 100);
 8001046:	2364      	movs	r3, #100	; 0x64
 8001048:	2220      	movs	r2, #32
 800104a:	4904      	ldr	r1, [pc, #16]	; (800105c <NRF24_Receive+0x2c>)
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <NRF24_Receive+0x30>)
 800104e:	f003 f80d 	bl	800406c <HAL_UART_Transmit>
	}
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200000c6 	.word	0x200000c6
 800105c:	200000f0 	.word	0x200000f0
 8001060:	200004d4 	.word	0x200004d4

08001064 <NRF24_TxBuffer>:

void NRF24_TxBuffer(void){
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
	++TxBuffer[0];
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <NRF24_TxBuffer+0x5c>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <NRF24_TxBuffer+0x5c>)
 8001074:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < 30; ++n) {
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]
 800107a:	e016      	b.n	80010aa <NRF24_TxBuffer+0x46>
		if(TxBuffer[n]==0xFF){
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <NRF24_TxBuffer+0x5c>)
 8001080:	5cd3      	ldrb	r3, [r2, r3]
 8001082:	2bff      	cmp	r3, #255	; 0xff
 8001084:	d10e      	bne.n	80010a4 <NRF24_TxBuffer+0x40>
			++TxBuffer[n];
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <NRF24_TxBuffer+0x5c>)
 800108a:	5cd2      	ldrb	r2, [r2, r3]
 800108c:	3201      	adds	r2, #1
 800108e:	b2d1      	uxtb	r1, r2
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <NRF24_TxBuffer+0x5c>)
 8001092:	54d1      	strb	r1, [r2, r3]
			++TxBuffer[n+1];
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	3301      	adds	r3, #1
 8001098:	4a09      	ldr	r2, [pc, #36]	; (80010c0 <NRF24_TxBuffer+0x5c>)
 800109a:	5cd2      	ldrb	r2, [r2, r3]
 800109c:	3201      	adds	r2, #1
 800109e:	b2d1      	uxtb	r1, r2
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <NRF24_TxBuffer+0x5c>)
 80010a2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t n = 0; n < 30; ++n) {
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	3301      	adds	r3, #1
 80010a8:	71fb      	strb	r3, [r7, #7]
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b1d      	cmp	r3, #29
 80010ae:	d9e5      	bls.n	800107c <NRF24_TxBuffer+0x18>
		}
	}
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	200000d0 	.word	0x200000d0

080010c4 <NRF24_StateMachine>:

void NRF24_StateMachine(void){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	switch (NRF24_mode){
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <NRF24_StateMachine+0x50>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d81a      	bhi.n	8001106 <NRF24_StateMachine+0x42>
 80010d0:	a201      	add	r2, pc, #4	; (adr r2, 80010d8 <NRF24_StateMachine+0x14>)
 80010d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d6:	bf00      	nop
 80010d8:	080010e9 	.word	0x080010e9
 80010dc:	080010fd 	.word	0x080010fd
 80010e0:	080010f7 	.word	0x080010f7
 80010e4:	0800110d 	.word	0x0800110d
		case Init:
			NRF24_RxConfiguration();
 80010e8:	f7ff fda6 	bl	8000c38 <NRF24_RxConfiguration>
			NRF24_PowerUp();
 80010ec:	f7ff fb86 	bl	80007fc <NRF24_PowerUp>
			NRF24_ActualConfiguration();
 80010f0:	f7ff fba2 	bl	8000838 <NRF24_ActualConfiguration>
			break;
 80010f4:	e00b      	b.n	800110e <NRF24_StateMachine+0x4a>
		case RxMode:

			NRF24_Receive();
 80010f6:	f7ff ff9b 	bl	8001030 <NRF24_Receive>
			break;
 80010fa:	e008      	b.n	800110e <NRF24_StateMachine+0x4a>
		case TxMode:
			NRF24_TxBuffer();
 80010fc:	f7ff ffb2 	bl	8001064 <NRF24_TxBuffer>
			NRF24_Transmit();
 8001100:	f7ff ff4a 	bl	8000f98 <NRF24_Transmit>
			break;
 8001104:	e003      	b.n	800110e <NRF24_StateMachine+0x4a>
		case PowerSave:

			break;
		default:
			NRF24_init();
 8001106:	f7ff ff2d 	bl	8000f64 <NRF24_init>
	}
}
 800110a:	e000      	b.n	800110e <NRF24_StateMachine+0x4a>
			break;
 800110c:	bf00      	nop
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200000cf 	.word	0x200000cf

08001118 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <MX_DMA_Init+0x4c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <MX_DMA_Init+0x4c>)
 8001128:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <MX_DMA_Init+0x4c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2105      	movs	r1, #5
 800113e:	2038      	movs	r0, #56	; 0x38
 8001140:	f000 fd12 	bl	8001b68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001144:	2038      	movs	r0, #56	; 0x38
 8001146:	f000 fd2b 	bl	8001ba0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2105      	movs	r1, #5
 800114e:	203a      	movs	r0, #58	; 0x3a
 8001150:	f000 fd0a 	bl	8001b68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001154:	203a      	movs	r0, #58	; 0x3a
 8001156:	f000 fd23 	bl	8001ba0 <HAL_NVIC_EnableIRQ>

}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800

08001168 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4a07      	ldr	r2, [pc, #28]	; (8001194 <vApplicationGetIdleTaskMemory+0x2c>)
 8001178:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <vApplicationGetIdleTaskMemory+0x30>)
 800117e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000120 	.word	0x20000120
 8001198:	20000174 	.word	0x20000174

0800119c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800119c:	b5b0      	push	{r4, r5, r7, lr}
 800119e:	b09c      	sub	sp, #112	; 0x70
 80011a0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task10ms */
  osThreadDef(Task10ms, Task_10ms, osPriorityNormal, 0, 128);
 80011a2:	4b27      	ldr	r3, [pc, #156]	; (8001240 <MX_FREERTOS_Init+0xa4>)
 80011a4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80011a8:	461d      	mov	r5, r3
 80011aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task10msHandle = osThreadCreate(osThread(Task10ms), NULL);
 80011b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 fb30 	bl	8004822 <osThreadCreate>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a1f      	ldr	r2, [pc, #124]	; (8001244 <MX_FREERTOS_Init+0xa8>)
 80011c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task100ms */
  osThreadDef(Task100ms, Task_100ms, osPriorityNormal, 0, 128);
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <MX_FREERTOS_Init+0xac>)
 80011ca:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80011ce:	461d      	mov	r5, r3
 80011d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task100msHandle = osThreadCreate(osThread(Task100ms), NULL);
 80011dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f003 fb1d 	bl	8004822 <osThreadCreate>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a18      	ldr	r2, [pc, #96]	; (800124c <MX_FREERTOS_Init+0xb0>)
 80011ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1000ms */
  osThreadDef(Task1000ms, Task_1000ms, osPriorityIdle, 0, 128);
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_FREERTOS_Init+0xb4>)
 80011f0:	f107 041c 	add.w	r4, r7, #28
 80011f4:	461d      	mov	r5, r3
 80011f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1000msHandle = osThreadCreate(osThread(Task1000ms), NULL);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f003 fb0a 	bl	8004822 <osThreadCreate>
 800120e:	4603      	mov	r3, r0
 8001210:	4a10      	ldr	r2, [pc, #64]	; (8001254 <MX_FREERTOS_Init+0xb8>)
 8001212:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1ms */
  osThreadDef(Task1ms, Task_1ms, osPriorityAboveNormal, 0, 128);
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_FREERTOS_Init+0xbc>)
 8001216:	463c      	mov	r4, r7
 8001218:	461d      	mov	r5, r3
 800121a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001222:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1msHandle = osThreadCreate(osThread(Task1ms), NULL);
 8001226:	463b      	mov	r3, r7
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f003 faf9 	bl	8004822 <osThreadCreate>
 8001230:	4603      	mov	r3, r0
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <MX_FREERTOS_Init+0xc0>)
 8001234:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001236:	bf00      	nop
 8001238:	3770      	adds	r7, #112	; 0x70
 800123a:	46bd      	mov	sp, r7
 800123c:	bdb0      	pop	{r4, r5, r7, pc}
 800123e:	bf00      	nop
 8001240:	08005cf8 	.word	0x08005cf8
 8001244:	20000110 	.word	0x20000110
 8001248:	08005d20 	.word	0x08005d20
 800124c:	20000114 	.word	0x20000114
 8001250:	08005d48 	.word	0x08005d48
 8001254:	20000118 	.word	0x20000118
 8001258:	08005d6c 	.word	0x08005d6c
 800125c:	2000011c 	.word	0x2000011c

08001260 <Task_10ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_10ms */
void Task_10ms(void const * argument)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_10ms */
	task_init_10ms();
 8001268:	f7ff f945 	bl	80004f6 <task_init_10ms>
  /* Infinite loop */
  for(;;)
  {
	task_10ms();
 800126c:	f7ff f94a 	bl	8000504 <task_10ms>
    osDelay(10);
 8001270:	200a      	movs	r0, #10
 8001272:	f003 fb22 	bl	80048ba <osDelay>
	task_10ms();
 8001276:	e7f9      	b.n	800126c <Task_10ms+0xc>

08001278 <Task_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_100ms */
void Task_100ms(void const * argument)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_100ms */
	task_init_100ms();
 8001280:	f7ff f947 	bl	8000512 <task_init_100ms>
  /* Infinite loop */
  for(;;)
  {
	task_100ms();
 8001284:	f7ff f94c 	bl	8000520 <task_100ms>
    osDelay(100);
 8001288:	2064      	movs	r0, #100	; 0x64
 800128a:	f003 fb16 	bl	80048ba <osDelay>
	task_100ms();
 800128e:	e7f9      	b.n	8001284 <Task_100ms+0xc>

08001290 <Task_1000ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1000ms */
void Task_1000ms(void const * argument)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1000ms */
	task_init_1000ms();
 8001298:	f7ff f949 	bl	800052e <task_init_1000ms>
  /* Infinite loop */
  for(;;)
  {
	task_1000ms();
 800129c:	f7ff f94e 	bl	800053c <task_1000ms>
    osDelay(1000);
 80012a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a4:	f003 fb09 	bl	80048ba <osDelay>
	task_1000ms();
 80012a8:	e7f8      	b.n	800129c <Task_1000ms+0xc>

080012aa <Task_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1ms */
void Task_1ms(void const * argument)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1ms */
	task_init_1ms();
 80012b2:	f7ff f913 	bl	80004dc <task_init_1ms>
  /* Infinite loop */
  for(;;)
  {
	task_1ms();
 80012b6:	f7ff f918 	bl	80004ea <task_1ms>
    osDelay(1);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f003 fafd 	bl	80048ba <osDelay>
	task_1ms();
 80012c0:	e7f9      	b.n	80012b6 <Task_1ms+0xc>
	...

080012c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b27      	ldr	r3, [pc, #156]	; (800137c <MX_GPIO_Init+0xb8>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a26      	ldr	r2, [pc, #152]	; (800137c <MX_GPIO_Init+0xb8>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <MX_GPIO_Init+0xb8>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <MX_GPIO_Init+0xb8>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a1f      	ldr	r2, [pc, #124]	; (800137c <MX_GPIO_Init+0xb8>)
 8001300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b1d      	ldr	r3, [pc, #116]	; (800137c <MX_GPIO_Init+0xb8>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <MX_GPIO_Init+0xb8>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a18      	ldr	r2, [pc, #96]	; (800137c <MX_GPIO_Init+0xb8>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <MX_GPIO_Init+0xb8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_GPIO_Init+0xb8>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a11      	ldr	r2, [pc, #68]	; (800137c <MX_GPIO_Init+0xb8>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_GPIO_Init+0xb8>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001350:	480b      	ldr	r0, [pc, #44]	; (8001380 <MX_GPIO_Init+0xbc>)
 8001352:	f001 f927 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 8001356:	f44f 7340 	mov.w	r3, #768	; 0x300
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	4804      	ldr	r0, [pc, #16]	; (8001380 <MX_GPIO_Init+0xbc>)
 8001370:	f000 ff94 	bl	800229c <HAL_GPIO_Init>

}
 8001374:	bf00      	nop
 8001376:	3728      	adds	r7, #40	; 0x28
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800
 8001380:	40020400 	.word	0x40020400

08001384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001388:	f000 faf4 	bl	8001974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138c:	f000 f810 	bl	80013b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001390:	f7ff ff98 	bl	80012c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001394:	f7ff fec0 	bl	8001118 <MX_DMA_Init>
  MX_SPI1_Init();
 8001398:	f000 f88a 	bl	80014b0 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 800139c:	f000 fa4e 	bl	800183c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  NRF24_init();
 80013a0:	f7ff fde0 	bl	8000f64 <NRF24_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80013a4:	f7ff fefa 	bl	800119c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80013a8:	f003 fa34 	bl	8004814 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <main+0x28>
	...

080013b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b094      	sub	sp, #80	; 0x50
 80013b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	2230      	movs	r2, #48	; 0x30
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f004 fc5c 	bl	8005c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <SystemClock_Config+0xc8>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	4a26      	ldr	r2, [pc, #152]	; (8001478 <SystemClock_Config+0xc8>)
 80013de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e2:	6413      	str	r3, [r2, #64]	; 0x40
 80013e4:	4b24      	ldr	r3, [pc, #144]	; (8001478 <SystemClock_Config+0xc8>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f0:	2300      	movs	r3, #0
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	4b21      	ldr	r3, [pc, #132]	; (800147c <SystemClock_Config+0xcc>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a20      	ldr	r2, [pc, #128]	; (800147c <SystemClock_Config+0xcc>)
 80013fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <SystemClock_Config+0xcc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800140c:	2302      	movs	r3, #2
 800140e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001410:	2301      	movs	r3, #1
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001414:	2310      	movs	r3, #16
 8001416:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001418:	2302      	movs	r3, #2
 800141a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800141c:	2300      	movs	r3, #0
 800141e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001420:	2308      	movs	r3, #8
 8001422:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001424:	2364      	movs	r3, #100	; 0x64
 8001426:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001428:	2302      	movs	r3, #2
 800142a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800142c:	2304      	movs	r3, #4
 800142e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4618      	mov	r0, r3
 8001436:	f001 f8cf 	bl	80025d8 <HAL_RCC_OscConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001440:	f000 f830 	bl	80014a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001444:	230f      	movs	r3, #15
 8001446:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001448:	2302      	movs	r3, #2
 800144a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001454:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	2103      	movs	r1, #3
 8001460:	4618      	mov	r0, r3
 8001462:	f001 fb31 	bl	8002ac8 <HAL_RCC_ClockConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800146c:	f000 f81a 	bl	80014a4 <Error_Handler>
  }
}
 8001470:	bf00      	nop
 8001472:	3750      	adds	r7, #80	; 0x50
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800
 800147c:	40007000 	.word	0x40007000

08001480 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001492:	f000 fa91 	bl	80019b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40014800 	.word	0x40014800

080014a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ac:	e7fe      	b.n	80014ac <Error_Handler+0x8>
	...

080014b0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <MX_SPI1_Init+0x64>)
 80014b6:	4a18      	ldr	r2, [pc, #96]	; (8001518 <MX_SPI1_Init+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <MX_SPI1_Init+0x64>)
 80014bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_SPI1_Init+0x64>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_SPI1_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_SPI1_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_SPI1_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_SPI1_Init+0x64>)
 80014dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_SPI1_Init+0x64>)
 80014e4:	2218      	movs	r2, #24
 80014e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <MX_SPI1_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_SPI1_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <MX_SPI1_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_SPI1_Init+0x64>)
 80014fc:	220a      	movs	r2, #10
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <MX_SPI1_Init+0x64>)
 8001502:	f001 fd33 	bl	8002f6c <HAL_SPI_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800150c:	f7ff ffca 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000374 	.word	0x20000374
 8001518:	40013000 	.word	0x40013000

0800151c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a47      	ldr	r2, [pc, #284]	; (8001658 <HAL_SPI_MspInit+0x13c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	f040 8088 	bne.w	8001650 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	4b45      	ldr	r3, [pc, #276]	; (800165c <HAL_SPI_MspInit+0x140>)
 8001546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001548:	4a44      	ldr	r2, [pc, #272]	; (800165c <HAL_SPI_MspInit+0x140>)
 800154a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800154e:	6453      	str	r3, [r2, #68]	; 0x44
 8001550:	4b42      	ldr	r3, [pc, #264]	; (800165c <HAL_SPI_MspInit+0x140>)
 8001552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	4b3e      	ldr	r3, [pc, #248]	; (800165c <HAL_SPI_MspInit+0x140>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	4a3d      	ldr	r2, [pc, #244]	; (800165c <HAL_SPI_MspInit+0x140>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6313      	str	r3, [r2, #48]	; 0x30
 800156c:	4b3b      	ldr	r3, [pc, #236]	; (800165c <HAL_SPI_MspInit+0x140>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001578:	23e0      	movs	r3, #224	; 0xe0
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001588:	2305      	movs	r3, #5
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4833      	ldr	r0, [pc, #204]	; (8001660 <HAL_SPI_MspInit+0x144>)
 8001594:	f000 fe82 	bl	800229c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001598:	4b32      	ldr	r3, [pc, #200]	; (8001664 <HAL_SPI_MspInit+0x148>)
 800159a:	4a33      	ldr	r2, [pc, #204]	; (8001668 <HAL_SPI_MspInit+0x14c>)
 800159c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800159e:	4b31      	ldr	r3, [pc, #196]	; (8001664 <HAL_SPI_MspInit+0x148>)
 80015a0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80015a4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a6:	4b2f      	ldr	r3, [pc, #188]	; (8001664 <HAL_SPI_MspInit+0x148>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ac:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <HAL_SPI_MspInit+0x148>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015b2:	4b2c      	ldr	r3, [pc, #176]	; (8001664 <HAL_SPI_MspInit+0x148>)
 80015b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ba:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <HAL_SPI_MspInit+0x148>)
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <HAL_SPI_MspInit+0x148>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80015c6:	4b27      	ldr	r3, [pc, #156]	; (8001664 <HAL_SPI_MspInit+0x148>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015cc:	4b25      	ldr	r3, [pc, #148]	; (8001664 <HAL_SPI_MspInit+0x148>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d2:	4b24      	ldr	r3, [pc, #144]	; (8001664 <HAL_SPI_MspInit+0x148>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80015d8:	4822      	ldr	r0, [pc, #136]	; (8001664 <HAL_SPI_MspInit+0x148>)
 80015da:	f000 faef 	bl	8001bbc <HAL_DMA_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80015e4:	f7ff ff5e 	bl	80014a4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <HAL_SPI_MspInit+0x148>)
 80015ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80015ee:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <HAL_SPI_MspInit+0x148>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <HAL_SPI_MspInit+0x150>)
 80015f6:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <HAL_SPI_MspInit+0x154>)
 80015f8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <HAL_SPI_MspInit+0x150>)
 80015fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001600:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_SPI_MspInit+0x150>)
 8001604:	2240      	movs	r2, #64	; 0x40
 8001606:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <HAL_SPI_MspInit+0x150>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_SPI_MspInit+0x150>)
 8001610:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001614:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_SPI_MspInit+0x150>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <HAL_SPI_MspInit+0x150>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_SPI_MspInit+0x150>)
 8001624:	2200      	movs	r2, #0
 8001626:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_SPI_MspInit+0x150>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_SPI_MspInit+0x150>)
 8001630:	2200      	movs	r2, #0
 8001632:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001634:	480d      	ldr	r0, [pc, #52]	; (800166c <HAL_SPI_MspInit+0x150>)
 8001636:	f000 fac1 	bl	8001bbc <HAL_DMA_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001640:	f7ff ff30 	bl	80014a4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <HAL_SPI_MspInit+0x150>)
 8001648:	649a      	str	r2, [r3, #72]	; 0x48
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <HAL_SPI_MspInit+0x150>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	; 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40013000 	.word	0x40013000
 800165c:	40023800 	.word	0x40023800
 8001660:	40020000 	.word	0x40020000
 8001664:	200003cc 	.word	0x200003cc
 8001668:	40026410 	.word	0x40026410
 800166c:	2000042c 	.word	0x2000042c
 8001670:	40026440 	.word	0x40026440

08001674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_MspInit+0x54>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <HAL_MspInit+0x54>)
 8001684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001688:	6453      	str	r3, [r2, #68]	; 0x44
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_MspInit+0x54>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_MspInit+0x54>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <HAL_MspInit+0x54>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_MspInit+0x54>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	210f      	movs	r1, #15
 80016b6:	f06f 0001 	mvn.w	r0, #1
 80016ba:	f000 fa55 	bl	8001b68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800

080016cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	; 0x30
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	4b2e      	ldr	r3, [pc, #184]	; (800179c <HAL_InitTick+0xd0>)
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	4a2d      	ldr	r2, [pc, #180]	; (800179c <HAL_InitTick+0xd0>)
 80016e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ea:	6453      	str	r3, [r2, #68]	; 0x44
 80016ec:	4b2b      	ldr	r3, [pc, #172]	; (800179c <HAL_InitTick+0xd0>)
 80016ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016f8:	f107 020c 	add.w	r2, r7, #12
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f001 fc00 	bl	8002f08 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001708:	f001 fbea 	bl	8002ee0 <HAL_RCC_GetPCLK2Freq>
 800170c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800170e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001710:	4a23      	ldr	r2, [pc, #140]	; (80017a0 <HAL_InitTick+0xd4>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	0c9b      	lsrs	r3, r3, #18
 8001718:	3b01      	subs	r3, #1
 800171a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 800171c:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <HAL_InitTick+0xd8>)
 800171e:	4a22      	ldr	r2, [pc, #136]	; (80017a8 <HAL_InitTick+0xdc>)
 8001720:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_InitTick+0xd8>)
 8001724:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001728:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800172a:	4a1e      	ldr	r2, [pc, #120]	; (80017a4 <HAL_InitTick+0xd8>)
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001730:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <HAL_InitTick+0xd8>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_InitTick+0xd8>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_InitTick+0xd8>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001742:	4818      	ldr	r0, [pc, #96]	; (80017a4 <HAL_InitTick+0xd8>)
 8001744:	f002 f9ce 	bl	8003ae4 <HAL_TIM_Base_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800174e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001752:	2b00      	cmp	r3, #0
 8001754:	d11b      	bne.n	800178e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001756:	4813      	ldr	r0, [pc, #76]	; (80017a4 <HAL_InitTick+0xd8>)
 8001758:	f002 fa1e 	bl	8003b98 <HAL_TIM_Base_Start_IT>
 800175c:	4603      	mov	r3, r0
 800175e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001766:	2b00      	cmp	r3, #0
 8001768:	d111      	bne.n	800178e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800176a:	201a      	movs	r0, #26
 800176c:	f000 fa18 	bl	8001ba0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b0f      	cmp	r3, #15
 8001774:	d808      	bhi.n	8001788 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001776:	2200      	movs	r2, #0
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	201a      	movs	r0, #26
 800177c:	f000 f9f4 	bl	8001b68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001780:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <HAL_InitTick+0xe0>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e002      	b.n	800178e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800178e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001792:	4618      	mov	r0, r3
 8001794:	3730      	adds	r7, #48	; 0x30
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	431bde83 	.word	0x431bde83
 80017a4:	2000048c 	.word	0x2000048c
 80017a8:	40014800 	.word	0x40014800
 80017ac:	20000004 	.word	0x20000004

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b4:	e7fe      	b.n	80017b4 <NMI_Handler+0x4>

080017b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <MemManage_Handler+0x4>

080017c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <UsageFault_Handler+0x4>

080017ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80017e2:	f002 fa3b 	bl	8003c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000048c 	.word	0x2000048c

080017f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <DMA2_Stream0_IRQHandler+0x10>)
 80017f6:	f000 fae7 	bl	8001dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200003cc 	.word	0x200003cc

08001804 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <DMA2_Stream2_IRQHandler+0x10>)
 800180a:	f000 fadd 	bl	8001dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000042c 	.word	0x2000042c

08001818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <SystemInit+0x20>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <SystemInit+0x20>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_USART6_UART_Init+0x4c>)
 8001842:	4a12      	ldr	r2, [pc, #72]	; (800188c <MX_USART6_UART_Init+0x50>)
 8001844:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <MX_USART6_UART_Init+0x4c>)
 8001848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800184c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_USART6_UART_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_USART6_UART_Init+0x4c>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_USART6_UART_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_USART6_UART_Init+0x4c>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MX_USART6_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_USART6_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_USART6_UART_Init+0x4c>)
 8001874:	f002 fbaa 	bl	8003fcc <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800187e:	f7ff fe11 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200004d4 	.word	0x200004d4
 800188c:	40011400 	.word	0x40011400

08001890 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_UART_MspInit+0x84>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d12b      	bne.n	800190a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	4a17      	ldr	r2, [pc, #92]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018bc:	f043 0320 	orr.w	r3, r3, #32
 80018c0:	6453      	str	r3, [r2, #68]	; 0x44
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a10      	ldr	r2, [pc, #64]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018ea:	23c0      	movs	r3, #192	; 0xc0
 80018ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80018fa:	2308      	movs	r3, #8
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <HAL_UART_MspInit+0x8c>)
 8001906:	f000 fcc9 	bl	800229c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	; 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40011400 	.word	0x40011400
 8001918:	40023800 	.word	0x40023800
 800191c:	40020800 	.word	0x40020800

08001920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001958 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001924:	f7ff ff78 	bl	8001818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800192a:	490d      	ldr	r1, [pc, #52]	; (8001960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001940:	4c0a      	ldr	r4, [pc, #40]	; (800196c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800194e:	f004 f99d 	bl	8005c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001952:	f7ff fd17 	bl	8001384 <main>
  bx  lr    
 8001956:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001960:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001964:	08005dc0 	.word	0x08005dc0
  ldr r2, =_sbss
 8001968:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800196c:	20004274 	.word	0x20004274

08001970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC_IRQHandler>
	...

08001974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <HAL_Init+0x40>)
 800197e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_Init+0x40>)
 800198a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_Init+0x40>)
 8001996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199c:	2003      	movs	r0, #3
 800199e:	f000 f8d8 	bl	8001b52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a2:	200f      	movs	r0, #15
 80019a4:	f7ff fe92 	bl	80016cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a8:	f7ff fe64 	bl	8001674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023c00 	.word	0x40023c00

080019b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x20>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x24>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_IncTick+0x24>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008
 80019dc:	2000051c 	.word	0x2000051c

080019e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_GetTick+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	2000051c 	.word	0x2000051c

080019f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a14:	4013      	ands	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2a:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	60d3      	str	r3, [r2, #12]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <__NVIC_GetPriorityGrouping+0x18>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	f003 0307 	and.w	r3, r3, #7
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	db0b      	blt.n	8001a86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	f003 021f 	and.w	r2, r3, #31
 8001a74:	4907      	ldr	r1, [pc, #28]	; (8001a94 <__NVIC_EnableIRQ+0x38>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000e100 	.word	0xe000e100

08001a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6039      	str	r1, [r7, #0]
 8001aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	db0a      	blt.n	8001ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	490c      	ldr	r1, [pc, #48]	; (8001ae4 <__NVIC_SetPriority+0x4c>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	0112      	lsls	r2, r2, #4
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	440b      	add	r3, r1
 8001abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac0:	e00a      	b.n	8001ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4908      	ldr	r1, [pc, #32]	; (8001ae8 <__NVIC_SetPriority+0x50>)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	3b04      	subs	r3, #4
 8001ad0:	0112      	lsls	r2, r2, #4
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	761a      	strb	r2, [r3, #24]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000e100 	.word	0xe000e100
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f1c3 0307 	rsb	r3, r3, #7
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	bf28      	it	cs
 8001b0a:	2304      	movcs	r3, #4
 8001b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3304      	adds	r3, #4
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d902      	bls.n	8001b1c <NVIC_EncodePriority+0x30>
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3b03      	subs	r3, #3
 8001b1a:	e000      	b.n	8001b1e <NVIC_EncodePriority+0x32>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	401a      	ands	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	43d9      	mvns	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	4313      	orrs	r3, r2
         );
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3724      	adds	r7, #36	; 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ff4c 	bl	80019f8 <__NVIC_SetPriorityGrouping>
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b7a:	f7ff ff61 	bl	8001a40 <__NVIC_GetPriorityGrouping>
 8001b7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	68b9      	ldr	r1, [r7, #8]
 8001b84:	6978      	ldr	r0, [r7, #20]
 8001b86:	f7ff ffb1 	bl	8001aec <NVIC_EncodePriority>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b90:	4611      	mov	r1, r2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff80 	bl	8001a98 <__NVIC_SetPriority>
}
 8001b98:	bf00      	nop
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ff54 	bl	8001a5c <__NVIC_EnableIRQ>
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bc8:	f7ff ff0a 	bl	80019e0 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e099      	b.n	8001d0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0201 	bic.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bf8:	e00f      	b.n	8001c1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bfa:	f7ff fef1 	bl	80019e0 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b05      	cmp	r3, #5
 8001c06:	d908      	bls.n	8001c1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2203      	movs	r2, #3
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e078      	b.n	8001d0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1e8      	bne.n	8001bfa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <HAL_DMA_Init+0x158>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d107      	bne.n	8001c84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f023 0307 	bic.w	r3, r3, #7
 8001c9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d117      	bne.n	8001cde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00e      	beq.n	8001cde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fa6f 	bl	80021a4 <DMA_CheckFifoParam>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2240      	movs	r2, #64	; 0x40
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e016      	b.n	8001d0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fa26 	bl	8002138 <DMA_CalcBaseAndBitshift>
 8001cec:	4603      	mov	r3, r0
 8001cee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	223f      	movs	r2, #63	; 0x3f
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	f010803f 	.word	0xf010803f

08001d18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_DMA_Start_IT+0x26>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e040      	b.n	8001dc0 <HAL_DMA_Start_IT+0xa8>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d12f      	bne.n	8001db2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2202      	movs	r2, #2
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f9b8 	bl	80020dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	223f      	movs	r2, #63	; 0x3f
 8001d72:	409a      	lsls	r2, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0216 	orr.w	r2, r2, #22
 8001d86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0208 	orr.w	r2, r2, #8
 8001d9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	e005      	b.n	8001dbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dd4:	4b8e      	ldr	r3, [pc, #568]	; (8002010 <HAL_DMA_IRQHandler+0x248>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a8e      	ldr	r2, [pc, #568]	; (8002014 <HAL_DMA_IRQHandler+0x24c>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	0a9b      	lsrs	r3, r3, #10
 8001de0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	2208      	movs	r2, #8
 8001df4:	409a      	lsls	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d01a      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d013      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0204 	bic.w	r2, r2, #4
 8001e1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	2208      	movs	r2, #8
 8001e22:	409a      	lsls	r2, r3
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2c:	f043 0201 	orr.w	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	2201      	movs	r2, #1
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d012      	beq.n	8001e6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00b      	beq.n	8001e6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e56:	2201      	movs	r2, #1
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e62:	f043 0202 	orr.w	r2, r3, #2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6e:	2204      	movs	r2, #4
 8001e70:	409a      	lsls	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d012      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00b      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e98:	f043 0204 	orr.w	r2, r3, #4
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d043      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d03c      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d018      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d108      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d024      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	4798      	blx	r3
 8001ef6:	e01f      	b.n	8001f38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d01b      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
 8001f08:	e016      	b.n	8001f38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d107      	bne.n	8001f28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0208 	bic.w	r2, r2, #8
 8001f26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 808f 	beq.w	8002068 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8087 	beq.w	8002068 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5e:	2220      	movs	r2, #32
 8001f60:	409a      	lsls	r2, r3
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b05      	cmp	r3, #5
 8001f70:	d136      	bne.n	8001fe0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0216 	bic.w	r2, r2, #22
 8001f80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d103      	bne.n	8001fa2 <HAL_DMA_IRQHandler+0x1da>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d007      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0208 	bic.w	r2, r2, #8
 8001fb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	223f      	movs	r2, #63	; 0x3f
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d07e      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	4798      	blx	r3
        }
        return;
 8001fde:	e079      	b.n	80020d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d01d      	beq.n	800202a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10d      	bne.n	8002018 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002000:	2b00      	cmp	r3, #0
 8002002:	d031      	beq.n	8002068 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	4798      	blx	r3
 800200c:	e02c      	b.n	8002068 <HAL_DMA_IRQHandler+0x2a0>
 800200e:	bf00      	nop
 8002010:	20000000 	.word	0x20000000
 8002014:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201c:	2b00      	cmp	r3, #0
 800201e:	d023      	beq.n	8002068 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4798      	blx	r3
 8002028:	e01e      	b.n	8002068 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10f      	bne.n	8002058 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0210 	bic.w	r2, r2, #16
 8002046:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206c:	2b00      	cmp	r3, #0
 800206e:	d032      	beq.n	80020d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d022      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2205      	movs	r2, #5
 8002080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0201 	bic.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	3301      	adds	r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	429a      	cmp	r2, r3
 800209e:	d307      	bcc.n	80020b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f2      	bne.n	8002094 <HAL_DMA_IRQHandler+0x2cc>
 80020ae:	e000      	b.n	80020b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	4798      	blx	r3
 80020d2:	e000      	b.n	80020d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020d4:	bf00      	nop
    }
  }
}
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b40      	cmp	r3, #64	; 0x40
 8002108:	d108      	bne.n	800211c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800211a:	e007      	b.n	800212c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	60da      	str	r2, [r3, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	3b10      	subs	r3, #16
 8002148:	4a14      	ldr	r2, [pc, #80]	; (800219c <DMA_CalcBaseAndBitshift+0x64>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	091b      	lsrs	r3, r3, #4
 8002150:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002152:	4a13      	ldr	r2, [pc, #76]	; (80021a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d909      	bls.n	800217a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800216e:	f023 0303 	bic.w	r3, r3, #3
 8002172:	1d1a      	adds	r2, r3, #4
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	659a      	str	r2, [r3, #88]	; 0x58
 8002178:	e007      	b.n	800218a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002182:	f023 0303 	bic.w	r3, r3, #3
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	aaaaaaab 	.word	0xaaaaaaab
 80021a0:	08005da8 	.word	0x08005da8

080021a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d11f      	bne.n	80021fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d856      	bhi.n	8002272 <DMA_CheckFifoParam+0xce>
 80021c4:	a201      	add	r2, pc, #4	; (adr r2, 80021cc <DMA_CheckFifoParam+0x28>)
 80021c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ca:	bf00      	nop
 80021cc:	080021dd 	.word	0x080021dd
 80021d0:	080021ef 	.word	0x080021ef
 80021d4:	080021dd 	.word	0x080021dd
 80021d8:	08002273 	.word	0x08002273
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d046      	beq.n	8002276 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ec:	e043      	b.n	8002276 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021f6:	d140      	bne.n	800227a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021fc:	e03d      	b.n	800227a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002206:	d121      	bne.n	800224c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d837      	bhi.n	800227e <DMA_CheckFifoParam+0xda>
 800220e:	a201      	add	r2, pc, #4	; (adr r2, 8002214 <DMA_CheckFifoParam+0x70>)
 8002210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002214:	08002225 	.word	0x08002225
 8002218:	0800222b 	.word	0x0800222b
 800221c:	08002225 	.word	0x08002225
 8002220:	0800223d 	.word	0x0800223d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
      break;
 8002228:	e030      	b.n	800228c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d025      	beq.n	8002282 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800223a:	e022      	b.n	8002282 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002244:	d11f      	bne.n	8002286 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800224a:	e01c      	b.n	8002286 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d903      	bls.n	800225a <DMA_CheckFifoParam+0xb6>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d003      	beq.n	8002260 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002258:	e018      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
      break;
 800225e:	e015      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00e      	beq.n	800228a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
      break;
 8002270:	e00b      	b.n	800228a <DMA_CheckFifoParam+0xe6>
      break;
 8002272:	bf00      	nop
 8002274:	e00a      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 8002276:	bf00      	nop
 8002278:	e008      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 800227a:	bf00      	nop
 800227c:	e006      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 800227e:	bf00      	nop
 8002280:	e004      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 8002282:	bf00      	nop
 8002284:	e002      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;   
 8002286:	bf00      	nop
 8002288:	e000      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 800228a:	bf00      	nop
    }
  } 
  
  return status; 
 800228c:	7bfb      	ldrb	r3, [r7, #15]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	; 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e159      	b.n	800256c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f040 8148 	bne.w	8002566 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d005      	beq.n	80022ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d130      	bne.n	8002350 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002324:	2201      	movs	r2, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 0201 	and.w	r2, r3, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b03      	cmp	r3, #3
 800235a:	d017      	beq.n	800238c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d123      	bne.n	80023e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	08da      	lsrs	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3208      	adds	r2, #8
 80023a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	220f      	movs	r2, #15
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	08da      	lsrs	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3208      	adds	r2, #8
 80023da:	69b9      	ldr	r1, [r7, #24]
 80023dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0203 	and.w	r2, r3, #3
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80a2 	beq.w	8002566 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b57      	ldr	r3, [pc, #348]	; (8002584 <HAL_GPIO_Init+0x2e8>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	4a56      	ldr	r2, [pc, #344]	; (8002584 <HAL_GPIO_Init+0x2e8>)
 800242c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002430:	6453      	str	r3, [r2, #68]	; 0x44
 8002432:	4b54      	ldr	r3, [pc, #336]	; (8002584 <HAL_GPIO_Init+0x2e8>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243e:	4a52      	ldr	r2, [pc, #328]	; (8002588 <HAL_GPIO_Init+0x2ec>)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a49      	ldr	r2, [pc, #292]	; (800258c <HAL_GPIO_Init+0x2f0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d019      	beq.n	800249e <HAL_GPIO_Init+0x202>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a48      	ldr	r2, [pc, #288]	; (8002590 <HAL_GPIO_Init+0x2f4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_GPIO_Init+0x1fe>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a47      	ldr	r2, [pc, #284]	; (8002594 <HAL_GPIO_Init+0x2f8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00d      	beq.n	8002496 <HAL_GPIO_Init+0x1fa>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a46      	ldr	r2, [pc, #280]	; (8002598 <HAL_GPIO_Init+0x2fc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d007      	beq.n	8002492 <HAL_GPIO_Init+0x1f6>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a45      	ldr	r2, [pc, #276]	; (800259c <HAL_GPIO_Init+0x300>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d101      	bne.n	800248e <HAL_GPIO_Init+0x1f2>
 800248a:	2304      	movs	r3, #4
 800248c:	e008      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 800248e:	2307      	movs	r3, #7
 8002490:	e006      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 8002492:	2303      	movs	r3, #3
 8002494:	e004      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 8002496:	2302      	movs	r3, #2
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 800249e:	2300      	movs	r3, #0
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	f002 0203 	and.w	r2, r2, #3
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	4093      	lsls	r3, r2
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b0:	4935      	ldr	r1, [pc, #212]	; (8002588 <HAL_GPIO_Init+0x2ec>)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	3302      	adds	r3, #2
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024be:	4b38      	ldr	r3, [pc, #224]	; (80025a0 <HAL_GPIO_Init+0x304>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024e2:	4a2f      	ldr	r2, [pc, #188]	; (80025a0 <HAL_GPIO_Init+0x304>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e8:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_GPIO_Init+0x304>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800250c:	4a24      	ldr	r2, [pc, #144]	; (80025a0 <HAL_GPIO_Init+0x304>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002512:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <HAL_GPIO_Init+0x304>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002536:	4a1a      	ldr	r2, [pc, #104]	; (80025a0 <HAL_GPIO_Init+0x304>)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800253c:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <HAL_GPIO_Init+0x304>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002560:	4a0f      	ldr	r2, [pc, #60]	; (80025a0 <HAL_GPIO_Init+0x304>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3301      	adds	r3, #1
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	2b0f      	cmp	r3, #15
 8002570:	f67f aea2 	bls.w	80022b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	40013800 	.word	0x40013800
 800258c:	40020000 	.word	0x40020000
 8002590:	40020400 	.word	0x40020400
 8002594:	40020800 	.word	0x40020800
 8002598:	40020c00 	.word	0x40020c00
 800259c:	40021000 	.word	0x40021000
 80025a0:	40013c00 	.word	0x40013c00

080025a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025c0:	e003      	b.n	80025ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	041a      	lsls	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	619a      	str	r2, [r3, #24]
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
	...

080025d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e267      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d075      	beq.n	80026e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025f6:	4b88      	ldr	r3, [pc, #544]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d00c      	beq.n	800261c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002602:	4b85      	ldr	r3, [pc, #532]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800260a:	2b08      	cmp	r3, #8
 800260c:	d112      	bne.n	8002634 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800260e:	4b82      	ldr	r3, [pc, #520]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800261a:	d10b      	bne.n	8002634 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261c:	4b7e      	ldr	r3, [pc, #504]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d05b      	beq.n	80026e0 <HAL_RCC_OscConfig+0x108>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d157      	bne.n	80026e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e242      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263c:	d106      	bne.n	800264c <HAL_RCC_OscConfig+0x74>
 800263e:	4b76      	ldr	r3, [pc, #472]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a75      	ldr	r2, [pc, #468]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e01d      	b.n	8002688 <HAL_RCC_OscConfig+0xb0>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x98>
 8002656:	4b70      	ldr	r3, [pc, #448]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a6f      	ldr	r2, [pc, #444]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 800265c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	4b6d      	ldr	r3, [pc, #436]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a6c      	ldr	r2, [pc, #432]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	e00b      	b.n	8002688 <HAL_RCC_OscConfig+0xb0>
 8002670:	4b69      	ldr	r3, [pc, #420]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a68      	ldr	r2, [pc, #416]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4b66      	ldr	r3, [pc, #408]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a65      	ldr	r2, [pc, #404]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d013      	beq.n	80026b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7ff f9a6 	bl	80019e0 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002698:	f7ff f9a2 	bl	80019e0 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b64      	cmp	r3, #100	; 0x64
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e207      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	4b5b      	ldr	r3, [pc, #364]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0xc0>
 80026b6:	e014      	b.n	80026e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff f992 	bl	80019e0 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c0:	f7ff f98e 	bl	80019e0 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	; 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e1f3      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d2:	4b51      	ldr	r3, [pc, #324]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0xe8>
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d063      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ee:	4b4a      	ldr	r3, [pc, #296]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00b      	beq.n	8002712 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fa:	4b47      	ldr	r3, [pc, #284]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002702:	2b08      	cmp	r3, #8
 8002704:	d11c      	bne.n	8002740 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002706:	4b44      	ldr	r3, [pc, #272]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d116      	bne.n	8002740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002712:	4b41      	ldr	r3, [pc, #260]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_RCC_OscConfig+0x152>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d001      	beq.n	800272a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e1c7      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272a:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4937      	ldr	r1, [pc, #220]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273e:	e03a      	b.n	80027b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d020      	beq.n	800278a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002748:	4b34      	ldr	r3, [pc, #208]	; (800281c <HAL_RCC_OscConfig+0x244>)
 800274a:	2201      	movs	r2, #1
 800274c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7ff f947 	bl	80019e0 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002756:	f7ff f943 	bl	80019e0 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e1a8      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002768:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002774:	4b28      	ldr	r3, [pc, #160]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4925      	ldr	r1, [pc, #148]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002784:	4313      	orrs	r3, r2
 8002786:	600b      	str	r3, [r1, #0]
 8002788:	e015      	b.n	80027b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278a:	4b24      	ldr	r3, [pc, #144]	; (800281c <HAL_RCC_OscConfig+0x244>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7ff f926 	bl	80019e0 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002798:	f7ff f922 	bl	80019e0 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e187      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027aa:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d036      	beq.n	8002830 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d016      	beq.n	80027f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <HAL_RCC_OscConfig+0x248>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7ff f906 	bl	80019e0 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d8:	f7ff f902 	bl	80019e0 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e167      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 80027ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0x200>
 80027f6:	e01b      	b.n	8002830 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f8:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_RCC_OscConfig+0x248>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fe:	f7ff f8ef 	bl	80019e0 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002804:	e00e      	b.n	8002824 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002806:	f7ff f8eb 	bl	80019e0 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d907      	bls.n	8002824 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e150      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
 8002818:	40023800 	.word	0x40023800
 800281c:	42470000 	.word	0x42470000
 8002820:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	4b88      	ldr	r3, [pc, #544]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ea      	bne.n	8002806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8097 	beq.w	800296c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002842:	4b81      	ldr	r3, [pc, #516]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10f      	bne.n	800286e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	4b7d      	ldr	r3, [pc, #500]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	4a7c      	ldr	r2, [pc, #496]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285c:	6413      	str	r3, [r2, #64]	; 0x40
 800285e:	4b7a      	ldr	r3, [pc, #488]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800286a:	2301      	movs	r3, #1
 800286c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286e:	4b77      	ldr	r3, [pc, #476]	; (8002a4c <HAL_RCC_OscConfig+0x474>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d118      	bne.n	80028ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287a:	4b74      	ldr	r3, [pc, #464]	; (8002a4c <HAL_RCC_OscConfig+0x474>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a73      	ldr	r2, [pc, #460]	; (8002a4c <HAL_RCC_OscConfig+0x474>)
 8002880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002886:	f7ff f8ab 	bl	80019e0 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288e:	f7ff f8a7 	bl	80019e0 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e10c      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <HAL_RCC_OscConfig+0x474>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d106      	bne.n	80028c2 <HAL_RCC_OscConfig+0x2ea>
 80028b4:	4b64      	ldr	r3, [pc, #400]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b8:	4a63      	ldr	r2, [pc, #396]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	6713      	str	r3, [r2, #112]	; 0x70
 80028c0:	e01c      	b.n	80028fc <HAL_RCC_OscConfig+0x324>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b05      	cmp	r3, #5
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x30c>
 80028ca:	4b5f      	ldr	r3, [pc, #380]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	4a5e      	ldr	r2, [pc, #376]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	6713      	str	r3, [r2, #112]	; 0x70
 80028d6:	4b5c      	ldr	r3, [pc, #368]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	4a5b      	ldr	r2, [pc, #364]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6713      	str	r3, [r2, #112]	; 0x70
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0x324>
 80028e4:	4b58      	ldr	r3, [pc, #352]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	4a57      	ldr	r2, [pc, #348]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	6713      	str	r3, [r2, #112]	; 0x70
 80028f0:	4b55      	ldr	r3, [pc, #340]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f4:	4a54      	ldr	r2, [pc, #336]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028f6:	f023 0304 	bic.w	r3, r3, #4
 80028fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d015      	beq.n	8002930 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002904:	f7ff f86c 	bl	80019e0 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290a:	e00a      	b.n	8002922 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800290c:	f7ff f868 	bl	80019e0 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	; 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e0cb      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002922:	4b49      	ldr	r3, [pc, #292]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0ee      	beq.n	800290c <HAL_RCC_OscConfig+0x334>
 800292e:	e014      	b.n	800295a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002930:	f7ff f856 	bl	80019e0 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002938:	f7ff f852 	bl	80019e0 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	; 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e0b5      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294e:	4b3e      	ldr	r3, [pc, #248]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1ee      	bne.n	8002938 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800295a:	7dfb      	ldrb	r3, [r7, #23]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d105      	bne.n	800296c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002960:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	4a38      	ldr	r2, [pc, #224]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800296a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80a1 	beq.w	8002ab8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002976:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b08      	cmp	r3, #8
 8002980:	d05c      	beq.n	8002a3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d141      	bne.n	8002a0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298a:	4b31      	ldr	r3, [pc, #196]	; (8002a50 <HAL_RCC_OscConfig+0x478>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7ff f826 	bl	80019e0 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002998:	f7ff f822 	bl	80019e0 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e087      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	4b27      	ldr	r3, [pc, #156]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69da      	ldr	r2, [r3, #28]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	019b      	lsls	r3, r3, #6
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	3b01      	subs	r3, #1
 80029d0:	041b      	lsls	r3, r3, #16
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	061b      	lsls	r3, r3, #24
 80029da:	491b      	ldr	r1, [pc, #108]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <HAL_RCC_OscConfig+0x478>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e6:	f7fe fffb 	bl	80019e0 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ee:	f7fe fff7 	bl	80019e0 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e05c      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x416>
 8002a0c:	e054      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <HAL_RCC_OscConfig+0x478>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe ffe4 	bl	80019e0 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe ffe0 	bl	80019e0 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e045      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x444>
 8002a3a:	e03d      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e038      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_RCC_OscConfig+0x4ec>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d028      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d121      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d11a      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a84:	4013      	ands	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d111      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	085b      	lsrs	r3, r3, #1
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d107      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800

08002ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0cc      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002adc:	4b68      	ldr	r3, [pc, #416]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d90c      	bls.n	8002b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b65      	ldr	r3, [pc, #404]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b63      	ldr	r3, [pc, #396]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0b8      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d020      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b1c:	4b59      	ldr	r3, [pc, #356]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4a58      	ldr	r2, [pc, #352]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b34:	4b53      	ldr	r3, [pc, #332]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a52      	ldr	r2, [pc, #328]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b40:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	494d      	ldr	r1, [pc, #308]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d044      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d107      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b47      	ldr	r3, [pc, #284]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d119      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e07f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b86:	4b3f      	ldr	r3, [pc, #252]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e06f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b96:	4b3b      	ldr	r3, [pc, #236]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e067      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba6:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f023 0203 	bic.w	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4934      	ldr	r1, [pc, #208]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb8:	f7fe ff12 	bl	80019e0 <HAL_GetTick>
 8002bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc0:	f7fe ff0e 	bl	80019e0 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e04f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 020c 	and.w	r2, r3, #12
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d1eb      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be8:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d20c      	bcs.n	8002c10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e032      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4916      	ldr	r1, [pc, #88]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d009      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c3a:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	490e      	ldr	r1, [pc, #56]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c4e:	f000 f821 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002c52:	4602      	mov	r2, r0
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	490a      	ldr	r1, [pc, #40]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002c60:	5ccb      	ldrb	r3, [r1, r3]
 8002c62:	fa22 f303 	lsr.w	r3, r2, r3
 8002c66:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe fd2c 	bl	80016cc <HAL_InitTick>

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023c00 	.word	0x40023c00
 8002c84:	40023800 	.word	0x40023800
 8002c88:	08005d90 	.word	0x08005d90
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	20000004 	.word	0x20000004

08002c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c98:	b094      	sub	sp, #80	; 0x50
 8002c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cac:	4b79      	ldr	r3, [pc, #484]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	f200 80e1 	bhi.w	8002e80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d003      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0x3a>
 8002cc6:	e0db      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc8:	4b73      	ldr	r3, [pc, #460]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ccc:	e0db      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cce:	4b73      	ldr	r3, [pc, #460]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x208>)
 8002cd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cd2:	e0d8      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd4:	4b6f      	ldr	r3, [pc, #444]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cdc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cde:	4b6d      	ldr	r3, [pc, #436]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d063      	beq.n	8002db2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cea:	4b6a      	ldr	r3, [pc, #424]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	099b      	lsrs	r3, r3, #6
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cf4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8002cfe:	2300      	movs	r3, #0
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
 8002d02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d06:	4622      	mov	r2, r4
 8002d08:	462b      	mov	r3, r5
 8002d0a:	f04f 0000 	mov.w	r0, #0
 8002d0e:	f04f 0100 	mov.w	r1, #0
 8002d12:	0159      	lsls	r1, r3, #5
 8002d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d18:	0150      	lsls	r0, r2, #5
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4621      	mov	r1, r4
 8002d20:	1a51      	subs	r1, r2, r1
 8002d22:	6139      	str	r1, [r7, #16]
 8002d24:	4629      	mov	r1, r5
 8002d26:	eb63 0301 	sbc.w	r3, r3, r1
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d38:	4659      	mov	r1, fp
 8002d3a:	018b      	lsls	r3, r1, #6
 8002d3c:	4651      	mov	r1, sl
 8002d3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d42:	4651      	mov	r1, sl
 8002d44:	018a      	lsls	r2, r1, #6
 8002d46:	4651      	mov	r1, sl
 8002d48:	ebb2 0801 	subs.w	r8, r2, r1
 8002d4c:	4659      	mov	r1, fp
 8002d4e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d66:	4690      	mov	r8, r2
 8002d68:	4699      	mov	r9, r3
 8002d6a:	4623      	mov	r3, r4
 8002d6c:	eb18 0303 	adds.w	r3, r8, r3
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	462b      	mov	r3, r5
 8002d74:	eb49 0303 	adc.w	r3, r9, r3
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d86:	4629      	mov	r1, r5
 8002d88:	024b      	lsls	r3, r1, #9
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d90:	4621      	mov	r1, r4
 8002d92:	024a      	lsls	r2, r1, #9
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002da0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002da4:	f7fd fa1c 	bl	80001e0 <__aeabi_uldivmod>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4613      	mov	r3, r2
 8002dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db0:	e058      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db2:	4b38      	ldr	r3, [pc, #224]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	099b      	lsrs	r3, r3, #6
 8002db8:	2200      	movs	r2, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dc2:	623b      	str	r3, [r7, #32]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dcc:	4642      	mov	r2, r8
 8002dce:	464b      	mov	r3, r9
 8002dd0:	f04f 0000 	mov.w	r0, #0
 8002dd4:	f04f 0100 	mov.w	r1, #0
 8002dd8:	0159      	lsls	r1, r3, #5
 8002dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dde:	0150      	lsls	r0, r2, #5
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4641      	mov	r1, r8
 8002de6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dea:	4649      	mov	r1, r9
 8002dec:	eb63 0b01 	sbc.w	fp, r3, r1
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e04:	ebb2 040a 	subs.w	r4, r2, sl
 8002e08:	eb63 050b 	sbc.w	r5, r3, fp
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	00eb      	lsls	r3, r5, #3
 8002e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e1a:	00e2      	lsls	r2, r4, #3
 8002e1c:	4614      	mov	r4, r2
 8002e1e:	461d      	mov	r5, r3
 8002e20:	4643      	mov	r3, r8
 8002e22:	18e3      	adds	r3, r4, r3
 8002e24:	603b      	str	r3, [r7, #0]
 8002e26:	464b      	mov	r3, r9
 8002e28:	eb45 0303 	adc.w	r3, r5, r3
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	028b      	lsls	r3, r1, #10
 8002e3e:	4621      	mov	r1, r4
 8002e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e44:	4621      	mov	r1, r4
 8002e46:	028a      	lsls	r2, r1, #10
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4e:	2200      	movs	r2, #0
 8002e50:	61bb      	str	r3, [r7, #24]
 8002e52:	61fa      	str	r2, [r7, #28]
 8002e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e58:	f7fd f9c2 	bl	80001e0 <__aeabi_uldivmod>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4613      	mov	r3, r2
 8002e62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	0c1b      	lsrs	r3, r3, #16
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	3301      	adds	r3, #1
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e7e:	e002      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3750      	adds	r7, #80	; 0x50
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800
 8002e98:	00f42400 	.word	0x00f42400
 8002e9c:	007a1200 	.word	0x007a1200

08002ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea4:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000000 	.word	0x20000000

08002eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ebc:	f7ff fff0 	bl	8002ea0 <HAL_RCC_GetHCLKFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	0a9b      	lsrs	r3, r3, #10
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	4903      	ldr	r1, [pc, #12]	; (8002edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ece:	5ccb      	ldrb	r3, [r1, r3]
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	08005da0 	.word	0x08005da0

08002ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ee4:	f7ff ffdc 	bl	8002ea0 <HAL_RCC_GetHCLKFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	0b5b      	lsrs	r3, r3, #13
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	4903      	ldr	r1, [pc, #12]	; (8002f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40023800 	.word	0x40023800
 8002f04:	08005da0 	.word	0x08005da0

08002f08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	220f      	movs	r2, #15
 8002f16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_RCC_GetClockConfig+0x5c>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0203 	and.w	r2, r3, #3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f24:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <HAL_RCC_GetClockConfig+0x5c>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <HAL_RCC_GetClockConfig+0x5c>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_RCC_GetClockConfig+0x5c>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	08db      	lsrs	r3, r3, #3
 8002f42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <HAL_RCC_GetClockConfig+0x60>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0207 	and.w	r2, r3, #7
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	601a      	str	r2, [r3, #0]
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40023c00 	.word	0x40023c00

08002f6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e07b      	b.n	8003076 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d108      	bne.n	8002f98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f8e:	d009      	beq.n	8002fa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	61da      	str	r2, [r3, #28]
 8002f96:	e005      	b.n	8002fa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fe faac 	bl	800151c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003028:	ea42 0103 	orr.w	r1, r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	0c1b      	lsrs	r3, r3, #16
 8003042:	f003 0104 	and.w	r1, r3, #4
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	f003 0210 	and.w	r2, r3, #16
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69da      	ldr	r2, [r3, #28]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003064:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	4613      	mov	r3, r2
 800308c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_SPI_Transmit_DMA+0x20>
 800309c:	2302      	movs	r3, #2
 800309e:	e097      	b.n	80031d0 <HAL_SPI_Transmit_DMA+0x150>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d002      	beq.n	80030ba <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80030b4:	2302      	movs	r3, #2
 80030b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030b8:	e085      	b.n	80031c6 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_SPI_Transmit_DMA+0x46>
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030ca:	e07c      	b.n	80031c6 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2203      	movs	r2, #3
 80030d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	88fa      	ldrh	r2, [r7, #6]
 80030e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	88fa      	ldrh	r2, [r7, #6]
 80030ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003112:	d10f      	bne.n	8003134 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003122:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003132:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003138:	4a27      	ldr	r2, [pc, #156]	; (80031d8 <HAL_SPI_Transmit_DMA+0x158>)
 800313a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003140:	4a26      	ldr	r2, [pc, #152]	; (80031dc <HAL_SPI_Transmit_DMA+0x15c>)
 8003142:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003148:	4a25      	ldr	r2, [pc, #148]	; (80031e0 <HAL_SPI_Transmit_DMA+0x160>)
 800314a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003150:	2200      	movs	r2, #0
 8003152:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	4619      	mov	r1, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	330c      	adds	r3, #12
 8003164:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800316a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800316c:	f7fe fdd4 	bl	8001d18 <HAL_DMA_Start_IT>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317a:	f043 0210 	orr.w	r2, r3, #16
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003186:	e01e      	b.n	80031c6 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003192:	2b40      	cmp	r3, #64	; 0x40
 8003194:	d007      	beq.n	80031a6 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031a4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0220 	orr.w	r2, r2, #32
 80031b4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0202 	orr.w	r2, r2, #2
 80031c4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	080037cd 	.word	0x080037cd
 80031dc:	080035ed 	.word	0x080035ed
 80031e0:	08003821 	.word	0x08003821

080031e4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	4613      	mov	r3, r2
 80031f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d002      	beq.n	8003208 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8003202:	2302      	movs	r3, #2
 8003204:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003206:	e0a2      	b.n	800334e <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d110      	bne.n	8003232 <HAL_SPI_Receive_DMA+0x4e>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003218:	d10b      	bne.n	8003232 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2204      	movs	r2, #4
 800321e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f89f 	bl	800336c <HAL_SPI_TransmitReceive_DMA>
 800322e:	4603      	mov	r3, r0
 8003230:	e092      	b.n	8003358 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_SPI_Receive_DMA+0x5c>
 800323c:	2302      	movs	r3, #2
 800323e:	e08b      	b.n	8003358 <HAL_SPI_Receive_DMA+0x174>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_SPI_Receive_DMA+0x70>
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003258:	e079      	b.n	800334e <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2204      	movs	r2, #4
 800325e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	88fa      	ldrh	r2, [r7, #6]
 8003272:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	88fa      	ldrh	r2, [r7, #6]
 8003278:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800329a:	d10f      	bne.n	80032bc <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c0:	4a27      	ldr	r2, [pc, #156]	; (8003360 <HAL_SPI_Receive_DMA+0x17c>)
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c8:	4a26      	ldr	r2, [pc, #152]	; (8003364 <HAL_SPI_Receive_DMA+0x180>)
 80032ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d0:	4a25      	ldr	r2, [pc, #148]	; (8003368 <HAL_SPI_Receive_DMA+0x184>)
 80032d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d8:	2200      	movs	r2, #0
 80032da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	330c      	adds	r3, #12
 80032e6:	4619      	mov	r1, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80032f4:	f7fe fd10 	bl	8001d18 <HAL_DMA_Start_IT>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d008      	beq.n	8003310 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	f043 0210 	orr.w	r2, r3, #16
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800330e:	e01e      	b.n	800334e <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331a:	2b40      	cmp	r3, #64	; 0x40
 800331c:	d007      	beq.n	800332e <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800332c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0220 	orr.w	r2, r2, #32
 800333c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0201 	orr.w	r2, r2, #1
 800334c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003356:	7dfb      	ldrb	r3, [r7, #23]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	080037e9 	.word	0x080037e9
 8003364:	08003695 	.word	0x08003695
 8003368:	08003821 	.word	0x08003821

0800336c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_SPI_TransmitReceive_DMA+0x20>
 8003388:	2302      	movs	r3, #2
 800338a:	e0db      	b.n	8003544 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800339a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80033a2:	7dbb      	ldrb	r3, [r7, #22]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d00d      	beq.n	80033c4 <HAL_SPI_TransmitReceive_DMA+0x58>
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ae:	d106      	bne.n	80033be <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <HAL_SPI_TransmitReceive_DMA+0x52>
 80033b8:	7dbb      	ldrb	r3, [r7, #22]
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d002      	beq.n	80033c4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80033be:	2302      	movs	r3, #2
 80033c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033c2:	e0ba      	b.n	800353a <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80033d0:	887b      	ldrh	r3, [r7, #2]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033da:	e0ae      	b.n	800353a <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d003      	beq.n	80033f0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2205      	movs	r2, #5
 80033ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	887a      	ldrh	r2, [r7, #2]
 8003400:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	887a      	ldrh	r2, [r7, #2]
 8003406:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	887a      	ldrh	r2, [r7, #2]
 8003412:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	887a      	ldrh	r2, [r7, #2]
 8003418:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b04      	cmp	r3, #4
 8003430:	d108      	bne.n	8003444 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003436:	4a45      	ldr	r2, [pc, #276]	; (800354c <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343e:	4a44      	ldr	r2, [pc, #272]	; (8003550 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8003440:	63da      	str	r2, [r3, #60]	; 0x3c
 8003442:	e007      	b.n	8003454 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003448:	4a42      	ldr	r2, [pc, #264]	; (8003554 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 800344a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003450:	4a41      	ldr	r2, [pc, #260]	; (8003558 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8003452:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003458:	4a40      	ldr	r2, [pc, #256]	; (800355c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800345a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003460:	2200      	movs	r2, #0
 8003462:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	330c      	adds	r3, #12
 800346e:	4619      	mov	r1, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800347c:	f7fe fc4c 	bl	8001d18 <HAL_DMA_Start_IT>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	f043 0210 	orr.w	r2, r3, #16
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003496:	e050      	b.n	800353a <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ac:	2200      	movs	r2, #0
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b4:	2200      	movs	r2, #0
 80034b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034bc:	2200      	movs	r2, #0
 80034be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c4:	2200      	movs	r2, #0
 80034c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	4619      	mov	r1, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	330c      	adds	r3, #12
 80034d8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80034e0:	f7fe fc1a 	bl	8001d18 <HAL_DMA_Start_IT>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ee:	f043 0210 	orr.w	r2, r3, #16
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	75fb      	strb	r3, [r7, #23]

    goto error;
 80034fa:	e01e      	b.n	800353a <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b40      	cmp	r3, #64	; 0x40
 8003508:	d007      	beq.n	800351a <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003518:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0220 	orr.w	r2, r2, #32
 8003528:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0202 	orr.w	r2, r2, #2
 8003538:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003542:	7dfb      	ldrb	r3, [r7, #23]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	080037e9 	.word	0x080037e9
 8003550:	08003695 	.word	0x08003695
 8003554:	08003805 	.word	0x08003805
 8003558:	0800373d 	.word	0x0800373d
 800355c:	08003821 	.word	0x08003821

08003560 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035fa:	f7fe f9f1 	bl	80019e0 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360e:	d03b      	beq.n	8003688 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0220 	bic.w	r2, r2, #32
 800361e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0202 	bic.w	r2, r2, #2
 800362e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	2164      	movs	r1, #100	; 0x64
 8003634:	6978      	ldr	r0, [r7, #20]
 8003636:	f000 fa01 	bl	8003a3c <SPI_EndRxTxTransaction>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	f043 0220 	orr.w	r2, r3, #32
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2200      	movs	r2, #0
 800366e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003680:	6978      	ldr	r0, [r7, #20]
 8003682:	f7ff ffa9 	bl	80035d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003686:	e002      	b.n	800368e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003688:	6978      	ldr	r0, [r7, #20]
 800368a:	f7ff ff69 	bl	8003560 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036a2:	f7fe f99d 	bl	80019e0 <HAL_GetTick>
 80036a6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b6:	d03b      	beq.n	8003730 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0220 	bic.w	r2, r2, #32
 80036c6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10d      	bne.n	80036ec <SPI_DMAReceiveCplt+0x58>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036d8:	d108      	bne.n	80036ec <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0203 	bic.w	r2, r2, #3
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	e007      	b.n	80036fc <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	2164      	movs	r1, #100	; 0x64
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f935 	bl	8003970 <SPI_EndRxTransaction>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7ff ff55 	bl	80035d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800372e:	e002      	b.n	8003736 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f7ff ff1f 	bl	8003574 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800374a:	f7fe f949 	bl	80019e0 <HAL_GetTick>
 800374e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375e:	d02f      	beq.n	80037c0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0220 	bic.w	r2, r2, #32
 800376e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	2164      	movs	r1, #100	; 0x64
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f961 	bl	8003a3c <SPI_EndRxTxTransaction>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	f043 0220 	orr.w	r2, r3, #32
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0203 	bic.w	r2, r2, #3
 800379a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f7ff ff0d 	bl	80035d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80037be:	e002      	b.n	80037c6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f7ff fee1 	bl	8003588 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f7ff fede 	bl	800359c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037e0:	bf00      	nop
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f7ff feda 	bl	80035b0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037fc:	bf00      	nop
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003810:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f7ff fed6 	bl	80035c4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003818:	bf00      	nop
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0203 	bic.w	r2, r2, #3
 800383c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	f043 0210 	orr.w	r2, r3, #16
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f7ff fec0 	bl	80035d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003870:	f7fe f8b6 	bl	80019e0 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	4413      	add	r3, r2
 800387e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003880:	f7fe f8ae 	bl	80019e0 <HAL_GetTick>
 8003884:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003886:	4b39      	ldr	r3, [pc, #228]	; (800396c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	015b      	lsls	r3, r3, #5
 800388c:	0d1b      	lsrs	r3, r3, #20
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	fb02 f303 	mul.w	r3, r2, r3
 8003894:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003896:	e054      	b.n	8003942 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d050      	beq.n	8003942 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038a0:	f7fe f89e 	bl	80019e0 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d902      	bls.n	80038b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d13d      	bne.n	8003932 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ce:	d111      	bne.n	80038f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d8:	d004      	beq.n	80038e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e2:	d107      	bne.n	80038f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038fc:	d10f      	bne.n	800391e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800391c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e017      	b.n	8003962 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	3b01      	subs	r3, #1
 8003940:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4013      	ands	r3, r2
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	bf0c      	ite	eq
 8003952:	2301      	moveq	r3, #1
 8003954:	2300      	movne	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	429a      	cmp	r2, r3
 800395e:	d19b      	bne.n	8003898 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000000 	.word	0x20000000

08003970 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003984:	d111      	bne.n	80039aa <SPI_EndRxTransaction+0x3a>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800398e:	d004      	beq.n	800399a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003998:	d107      	bne.n	80039aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039b2:	d12a      	bne.n	8003a0a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039bc:	d012      	beq.n	80039e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2180      	movs	r1, #128	; 0x80
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f7ff ff49 	bl	8003860 <SPI_WaitFlagStateUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d02d      	beq.n	8003a30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d8:	f043 0220 	orr.w	r2, r3, #32
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e026      	b.n	8003a32 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2200      	movs	r2, #0
 80039ec:	2101      	movs	r1, #1
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff ff36 	bl	8003860 <SPI_WaitFlagStateUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d01a      	beq.n	8003a30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fe:	f043 0220 	orr.w	r2, r3, #32
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e013      	b.n	8003a32 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2200      	movs	r2, #0
 8003a12:	2101      	movs	r1, #1
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7ff ff23 	bl	8003860 <SPI_WaitFlagStateUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d007      	beq.n	8003a30 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a24:	f043 0220 	orr.w	r2, r3, #32
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e000      	b.n	8003a32 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	2102      	movs	r1, #2
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f7ff ff04 	bl	8003860 <SPI_WaitFlagStateUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a62:	f043 0220 	orr.w	r2, r3, #32
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e032      	b.n	8003ad4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a6e:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <SPI_EndRxTxTransaction+0xa0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1b      	ldr	r2, [pc, #108]	; (8003ae0 <SPI_EndRxTxTransaction+0xa4>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	0d5b      	lsrs	r3, r3, #21
 8003a7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a8c:	d112      	bne.n	8003ab4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2200      	movs	r2, #0
 8003a96:	2180      	movs	r1, #128	; 0x80
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f7ff fee1 	bl	8003860 <SPI_WaitFlagStateUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d016      	beq.n	8003ad2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa8:	f043 0220 	orr.w	r2, r3, #32
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e00f      	b.n	8003ad4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aca:	2b80      	cmp	r3, #128	; 0x80
 8003acc:	d0f2      	beq.n	8003ab4 <SPI_EndRxTxTransaction+0x78>
 8003ace:	e000      	b.n	8003ad2 <SPI_EndRxTxTransaction+0x96>
        break;
 8003ad0:	bf00      	nop
  }

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	165e9f81 	.word	0x165e9f81

08003ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e041      	b.n	8003b7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f839 	bl	8003b82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	4619      	mov	r1, r3
 8003b22:	4610      	mov	r0, r2
 8003b24:	f000 f9b2 	bl	8003e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d001      	beq.n	8003bb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e044      	b.n	8003c3a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0201 	orr.w	r2, r2, #1
 8003bc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <HAL_TIM_Base_Start_IT+0xb0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d018      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x6c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bda:	d013      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x6c>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1a      	ldr	r2, [pc, #104]	; (8003c4c <HAL_TIM_Base_Start_IT+0xb4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00e      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x6c>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a19      	ldr	r2, [pc, #100]	; (8003c50 <HAL_TIM_Base_Start_IT+0xb8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d009      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x6c>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <HAL_TIM_Base_Start_IT+0xbc>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d004      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x6c>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a16      	ldr	r2, [pc, #88]	; (8003c58 <HAL_TIM_Base_Start_IT+0xc0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d111      	bne.n	8003c28 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b06      	cmp	r3, #6
 8003c14:	d010      	beq.n	8003c38 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c26:	e007      	b.n	8003c38 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40000800 	.word	0x40000800
 8003c54:	40000c00 	.word	0x40000c00
 8003c58:	40014000 	.word	0x40014000

08003c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d020      	beq.n	8003cc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01b      	beq.n	8003cc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0202 	mvn.w	r2, #2
 8003c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f8d2 	bl	8003e50 <HAL_TIM_IC_CaptureCallback>
 8003cac:	e005      	b.n	8003cba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f8c4 	bl	8003e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f8d5 	bl	8003e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d020      	beq.n	8003d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01b      	beq.n	8003d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0204 	mvn.w	r2, #4
 8003cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f8ac 	bl	8003e50 <HAL_TIM_IC_CaptureCallback>
 8003cf8:	e005      	b.n	8003d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f89e 	bl	8003e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f8af 	bl	8003e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d020      	beq.n	8003d58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01b      	beq.n	8003d58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0208 	mvn.w	r2, #8
 8003d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f886 	bl	8003e50 <HAL_TIM_IC_CaptureCallback>
 8003d44:	e005      	b.n	8003d52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f878 	bl	8003e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f889 	bl	8003e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d020      	beq.n	8003da4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01b      	beq.n	8003da4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0210 	mvn.w	r2, #16
 8003d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2208      	movs	r2, #8
 8003d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f860 	bl	8003e50 <HAL_TIM_IC_CaptureCallback>
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f852 	bl	8003e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f863 	bl	8003e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00c      	beq.n	8003dc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0201 	mvn.w	r2, #1
 8003dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fd fb5c 	bl	8001480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00c      	beq.n	8003dec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f8e6 	bl	8003fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00c      	beq.n	8003e10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d007      	beq.n	8003e10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f834 	bl	8003e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00c      	beq.n	8003e34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0220 	mvn.w	r2, #32
 8003e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f8b8 	bl	8003fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a3a      	ldr	r2, [pc, #232]	; (8003f88 <TIM_Base_SetConfig+0xfc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00f      	beq.n	8003ec4 <TIM_Base_SetConfig+0x38>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eaa:	d00b      	beq.n	8003ec4 <TIM_Base_SetConfig+0x38>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a37      	ldr	r2, [pc, #220]	; (8003f8c <TIM_Base_SetConfig+0x100>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d007      	beq.n	8003ec4 <TIM_Base_SetConfig+0x38>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a36      	ldr	r2, [pc, #216]	; (8003f90 <TIM_Base_SetConfig+0x104>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_Base_SetConfig+0x38>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a35      	ldr	r2, [pc, #212]	; (8003f94 <TIM_Base_SetConfig+0x108>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d108      	bne.n	8003ed6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2b      	ldr	r2, [pc, #172]	; (8003f88 <TIM_Base_SetConfig+0xfc>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d01b      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee4:	d017      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a28      	ldr	r2, [pc, #160]	; (8003f8c <TIM_Base_SetConfig+0x100>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a27      	ldr	r2, [pc, #156]	; (8003f90 <TIM_Base_SetConfig+0x104>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00f      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a26      	ldr	r2, [pc, #152]	; (8003f94 <TIM_Base_SetConfig+0x108>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00b      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a25      	ldr	r2, [pc, #148]	; (8003f98 <TIM_Base_SetConfig+0x10c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a24      	ldr	r2, [pc, #144]	; (8003f9c <TIM_Base_SetConfig+0x110>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a23      	ldr	r2, [pc, #140]	; (8003fa0 <TIM_Base_SetConfig+0x114>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d108      	bne.n	8003f28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a0e      	ldr	r2, [pc, #56]	; (8003f88 <TIM_Base_SetConfig+0xfc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d103      	bne.n	8003f5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d105      	bne.n	8003f7a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f023 0201 	bic.w	r2, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	611a      	str	r2, [r3, #16]
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800
 8003f94:	40000c00 	.word	0x40000c00
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40014400 	.word	0x40014400
 8003fa0:	40014800 	.word	0x40014800

08003fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e042      	b.n	8004064 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd fc4c 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2224      	movs	r2, #36	; 0x24
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800400e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f973 	bl	80042fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695a      	ldr	r2, [r3, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004034:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004044:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	; 0x28
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	4613      	mov	r3, r2
 800407a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b20      	cmp	r3, #32
 800408a:	d175      	bne.n	8004178 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_UART_Transmit+0x2c>
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e06e      	b.n	800417a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2221      	movs	r2, #33	; 0x21
 80040a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040aa:	f7fd fc99 	bl	80019e0 <HAL_GetTick>
 80040ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	88fa      	ldrh	r2, [r7, #6]
 80040b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	88fa      	ldrh	r2, [r7, #6]
 80040ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c4:	d108      	bne.n	80040d8 <HAL_UART_Transmit+0x6c>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d104      	bne.n	80040d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	e003      	b.n	80040e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040e0:	e02e      	b.n	8004140 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2200      	movs	r2, #0
 80040ea:	2180      	movs	r1, #128	; 0x80
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f848 	bl	8004182 <UART_WaitOnFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e03a      	b.n	800417a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10b      	bne.n	8004122 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004118:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	3302      	adds	r3, #2
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	e007      	b.n	8004132 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	3301      	adds	r3, #1
 8004130:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1cb      	bne.n	80040e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2200      	movs	r2, #0
 8004152:	2140      	movs	r1, #64	; 0x40
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f814 	bl	8004182 <UART_WaitOnFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e006      	b.n	800417a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	e000      	b.n	800417a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004178:	2302      	movs	r3, #2
  }
}
 800417a:	4618      	mov	r0, r3
 800417c:	3720      	adds	r7, #32
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b086      	sub	sp, #24
 8004186:	af00      	add	r7, sp, #0
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	603b      	str	r3, [r7, #0]
 800418e:	4613      	mov	r3, r2
 8004190:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004192:	e03b      	b.n	800420c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419a:	d037      	beq.n	800420c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419c:	f7fd fc20 	bl	80019e0 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	6a3a      	ldr	r2, [r7, #32]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d302      	bcc.n	80041b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e03a      	b.n	800422c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d023      	beq.n	800420c <UART_WaitOnFlagUntilTimeout+0x8a>
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b80      	cmp	r3, #128	; 0x80
 80041c8:	d020      	beq.n	800420c <UART_WaitOnFlagUntilTimeout+0x8a>
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b40      	cmp	r3, #64	; 0x40
 80041ce:	d01d      	beq.n	800420c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d116      	bne.n	800420c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f81d 	bl	8004234 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2208      	movs	r2, #8
 80041fe:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e00f      	b.n	800422c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4013      	ands	r3, r2
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	429a      	cmp	r2, r3
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	429a      	cmp	r2, r3
 8004228:	d0b4      	beq.n	8004194 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004234:	b480      	push	{r7}
 8004236:	b095      	sub	sp, #84	; 0x54
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	330c      	adds	r3, #12
 8004242:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800425c:	643a      	str	r2, [r7, #64]	; 0x40
 800425e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e5      	bne.n	800423c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3314      	adds	r3, #20
 8004276:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	64bb      	str	r3, [r7, #72]	; 0x48
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3314      	adds	r3, #20
 800428e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004290:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004292:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e5      	bne.n	8004270 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d119      	bne.n	80042e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f023 0310 	bic.w	r3, r3, #16
 80042c2:	647b      	str	r3, [r7, #68]	; 0x44
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042cc:	61ba      	str	r2, [r7, #24]
 80042ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6979      	ldr	r1, [r7, #20]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	613b      	str	r3, [r7, #16]
   return(result);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e5      	bne.n	80042ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042ee:	bf00      	nop
 80042f0:	3754      	adds	r7, #84	; 0x54
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004300:	b0c0      	sub	sp, #256	; 0x100
 8004302:	af00      	add	r7, sp, #0
 8004304:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004318:	68d9      	ldr	r1, [r3, #12]
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	ea40 0301 	orr.w	r3, r0, r1
 8004324:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	431a      	orrs	r2, r3
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	431a      	orrs	r2, r3
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004354:	f021 010c 	bic.w	r1, r1, #12
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004362:	430b      	orrs	r3, r1
 8004364:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004376:	6999      	ldr	r1, [r3, #24]
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	ea40 0301 	orr.w	r3, r0, r1
 8004382:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	4b8f      	ldr	r3, [pc, #572]	; (80045c8 <UART_SetConfig+0x2cc>)
 800438c:	429a      	cmp	r2, r3
 800438e:	d005      	beq.n	800439c <UART_SetConfig+0xa0>
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	4b8d      	ldr	r3, [pc, #564]	; (80045cc <UART_SetConfig+0x2d0>)
 8004398:	429a      	cmp	r2, r3
 800439a:	d104      	bne.n	80043a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800439c:	f7fe fda0 	bl	8002ee0 <HAL_RCC_GetPCLK2Freq>
 80043a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043a4:	e003      	b.n	80043ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043a6:	f7fe fd87 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 80043aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b8:	f040 810c 	bne.w	80045d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043c0:	2200      	movs	r2, #0
 80043c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043ce:	4622      	mov	r2, r4
 80043d0:	462b      	mov	r3, r5
 80043d2:	1891      	adds	r1, r2, r2
 80043d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80043d6:	415b      	adcs	r3, r3
 80043d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043de:	4621      	mov	r1, r4
 80043e0:	eb12 0801 	adds.w	r8, r2, r1
 80043e4:	4629      	mov	r1, r5
 80043e6:	eb43 0901 	adc.w	r9, r3, r1
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043fe:	4690      	mov	r8, r2
 8004400:	4699      	mov	r9, r3
 8004402:	4623      	mov	r3, r4
 8004404:	eb18 0303 	adds.w	r3, r8, r3
 8004408:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800440c:	462b      	mov	r3, r5
 800440e:	eb49 0303 	adc.w	r3, r9, r3
 8004412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004422:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004426:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800442a:	460b      	mov	r3, r1
 800442c:	18db      	adds	r3, r3, r3
 800442e:	653b      	str	r3, [r7, #80]	; 0x50
 8004430:	4613      	mov	r3, r2
 8004432:	eb42 0303 	adc.w	r3, r2, r3
 8004436:	657b      	str	r3, [r7, #84]	; 0x54
 8004438:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800443c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004440:	f7fb fece 	bl	80001e0 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4b61      	ldr	r3, [pc, #388]	; (80045d0 <UART_SetConfig+0x2d4>)
 800444a:	fba3 2302 	umull	r2, r3, r3, r2
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	011c      	lsls	r4, r3, #4
 8004452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004456:	2200      	movs	r2, #0
 8004458:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800445c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004460:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004464:	4642      	mov	r2, r8
 8004466:	464b      	mov	r3, r9
 8004468:	1891      	adds	r1, r2, r2
 800446a:	64b9      	str	r1, [r7, #72]	; 0x48
 800446c:	415b      	adcs	r3, r3
 800446e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004470:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004474:	4641      	mov	r1, r8
 8004476:	eb12 0a01 	adds.w	sl, r2, r1
 800447a:	4649      	mov	r1, r9
 800447c:	eb43 0b01 	adc.w	fp, r3, r1
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800448c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004490:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004494:	4692      	mov	sl, r2
 8004496:	469b      	mov	fp, r3
 8004498:	4643      	mov	r3, r8
 800449a:	eb1a 0303 	adds.w	r3, sl, r3
 800449e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044a2:	464b      	mov	r3, r9
 80044a4:	eb4b 0303 	adc.w	r3, fp, r3
 80044a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044c0:	460b      	mov	r3, r1
 80044c2:	18db      	adds	r3, r3, r3
 80044c4:	643b      	str	r3, [r7, #64]	; 0x40
 80044c6:	4613      	mov	r3, r2
 80044c8:	eb42 0303 	adc.w	r3, r2, r3
 80044cc:	647b      	str	r3, [r7, #68]	; 0x44
 80044ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044d6:	f7fb fe83 	bl	80001e0 <__aeabi_uldivmod>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4611      	mov	r1, r2
 80044e0:	4b3b      	ldr	r3, [pc, #236]	; (80045d0 <UART_SetConfig+0x2d4>)
 80044e2:	fba3 2301 	umull	r2, r3, r3, r1
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	2264      	movs	r2, #100	; 0x64
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	1acb      	subs	r3, r1, r3
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044f6:	4b36      	ldr	r3, [pc, #216]	; (80045d0 <UART_SetConfig+0x2d4>)
 80044f8:	fba3 2302 	umull	r2, r3, r3, r2
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004504:	441c      	add	r4, r3
 8004506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800450a:	2200      	movs	r2, #0
 800450c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004510:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004514:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004518:	4642      	mov	r2, r8
 800451a:	464b      	mov	r3, r9
 800451c:	1891      	adds	r1, r2, r2
 800451e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004520:	415b      	adcs	r3, r3
 8004522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004524:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004528:	4641      	mov	r1, r8
 800452a:	1851      	adds	r1, r2, r1
 800452c:	6339      	str	r1, [r7, #48]	; 0x30
 800452e:	4649      	mov	r1, r9
 8004530:	414b      	adcs	r3, r1
 8004532:	637b      	str	r3, [r7, #52]	; 0x34
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004540:	4659      	mov	r1, fp
 8004542:	00cb      	lsls	r3, r1, #3
 8004544:	4651      	mov	r1, sl
 8004546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800454a:	4651      	mov	r1, sl
 800454c:	00ca      	lsls	r2, r1, #3
 800454e:	4610      	mov	r0, r2
 8004550:	4619      	mov	r1, r3
 8004552:	4603      	mov	r3, r0
 8004554:	4642      	mov	r2, r8
 8004556:	189b      	adds	r3, r3, r2
 8004558:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800455c:	464b      	mov	r3, r9
 800455e:	460a      	mov	r2, r1
 8004560:	eb42 0303 	adc.w	r3, r2, r3
 8004564:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004574:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004578:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800457c:	460b      	mov	r3, r1
 800457e:	18db      	adds	r3, r3, r3
 8004580:	62bb      	str	r3, [r7, #40]	; 0x28
 8004582:	4613      	mov	r3, r2
 8004584:	eb42 0303 	adc.w	r3, r2, r3
 8004588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800458a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800458e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004592:	f7fb fe25 	bl	80001e0 <__aeabi_uldivmod>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <UART_SetConfig+0x2d4>)
 800459c:	fba3 1302 	umull	r1, r3, r3, r2
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	2164      	movs	r1, #100	; 0x64
 80045a4:	fb01 f303 	mul.w	r3, r1, r3
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	3332      	adds	r3, #50	; 0x32
 80045ae:	4a08      	ldr	r2, [pc, #32]	; (80045d0 <UART_SetConfig+0x2d4>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	f003 0207 	and.w	r2, r3, #7
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4422      	add	r2, r4
 80045c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045c4:	e106      	b.n	80047d4 <UART_SetConfig+0x4d8>
 80045c6:	bf00      	nop
 80045c8:	40011000 	.word	0x40011000
 80045cc:	40011400 	.word	0x40011400
 80045d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d8:	2200      	movs	r2, #0
 80045da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045e6:	4642      	mov	r2, r8
 80045e8:	464b      	mov	r3, r9
 80045ea:	1891      	adds	r1, r2, r2
 80045ec:	6239      	str	r1, [r7, #32]
 80045ee:	415b      	adcs	r3, r3
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
 80045f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045f6:	4641      	mov	r1, r8
 80045f8:	1854      	adds	r4, r2, r1
 80045fa:	4649      	mov	r1, r9
 80045fc:	eb43 0501 	adc.w	r5, r3, r1
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	00eb      	lsls	r3, r5, #3
 800460a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800460e:	00e2      	lsls	r2, r4, #3
 8004610:	4614      	mov	r4, r2
 8004612:	461d      	mov	r5, r3
 8004614:	4643      	mov	r3, r8
 8004616:	18e3      	adds	r3, r4, r3
 8004618:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800461c:	464b      	mov	r3, r9
 800461e:	eb45 0303 	adc.w	r3, r5, r3
 8004622:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004632:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004642:	4629      	mov	r1, r5
 8004644:	008b      	lsls	r3, r1, #2
 8004646:	4621      	mov	r1, r4
 8004648:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800464c:	4621      	mov	r1, r4
 800464e:	008a      	lsls	r2, r1, #2
 8004650:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004654:	f7fb fdc4 	bl	80001e0 <__aeabi_uldivmod>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4b60      	ldr	r3, [pc, #384]	; (80047e0 <UART_SetConfig+0x4e4>)
 800465e:	fba3 2302 	umull	r2, r3, r3, r2
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	011c      	lsls	r4, r3, #4
 8004666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800466a:	2200      	movs	r2, #0
 800466c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004670:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004674:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004678:	4642      	mov	r2, r8
 800467a:	464b      	mov	r3, r9
 800467c:	1891      	adds	r1, r2, r2
 800467e:	61b9      	str	r1, [r7, #24]
 8004680:	415b      	adcs	r3, r3
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004688:	4641      	mov	r1, r8
 800468a:	1851      	adds	r1, r2, r1
 800468c:	6139      	str	r1, [r7, #16]
 800468e:	4649      	mov	r1, r9
 8004690:	414b      	adcs	r3, r1
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046a0:	4659      	mov	r1, fp
 80046a2:	00cb      	lsls	r3, r1, #3
 80046a4:	4651      	mov	r1, sl
 80046a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046aa:	4651      	mov	r1, sl
 80046ac:	00ca      	lsls	r2, r1, #3
 80046ae:	4610      	mov	r0, r2
 80046b0:	4619      	mov	r1, r3
 80046b2:	4603      	mov	r3, r0
 80046b4:	4642      	mov	r2, r8
 80046b6:	189b      	adds	r3, r3, r2
 80046b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046bc:	464b      	mov	r3, r9
 80046be:	460a      	mov	r2, r1
 80046c0:	eb42 0303 	adc.w	r3, r2, r3
 80046c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80046d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046e0:	4649      	mov	r1, r9
 80046e2:	008b      	lsls	r3, r1, #2
 80046e4:	4641      	mov	r1, r8
 80046e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ea:	4641      	mov	r1, r8
 80046ec:	008a      	lsls	r2, r1, #2
 80046ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046f2:	f7fb fd75 	bl	80001e0 <__aeabi_uldivmod>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4611      	mov	r1, r2
 80046fc:	4b38      	ldr	r3, [pc, #224]	; (80047e0 <UART_SetConfig+0x4e4>)
 80046fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	2264      	movs	r2, #100	; 0x64
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	1acb      	subs	r3, r1, r3
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	3332      	adds	r3, #50	; 0x32
 8004710:	4a33      	ldr	r2, [pc, #204]	; (80047e0 <UART_SetConfig+0x4e4>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800471c:	441c      	add	r4, r3
 800471e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004722:	2200      	movs	r2, #0
 8004724:	673b      	str	r3, [r7, #112]	; 0x70
 8004726:	677a      	str	r2, [r7, #116]	; 0x74
 8004728:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800472c:	4642      	mov	r2, r8
 800472e:	464b      	mov	r3, r9
 8004730:	1891      	adds	r1, r2, r2
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	415b      	adcs	r3, r3
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800473c:	4641      	mov	r1, r8
 800473e:	1851      	adds	r1, r2, r1
 8004740:	6039      	str	r1, [r7, #0]
 8004742:	4649      	mov	r1, r9
 8004744:	414b      	adcs	r3, r1
 8004746:	607b      	str	r3, [r7, #4]
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004754:	4659      	mov	r1, fp
 8004756:	00cb      	lsls	r3, r1, #3
 8004758:	4651      	mov	r1, sl
 800475a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800475e:	4651      	mov	r1, sl
 8004760:	00ca      	lsls	r2, r1, #3
 8004762:	4610      	mov	r0, r2
 8004764:	4619      	mov	r1, r3
 8004766:	4603      	mov	r3, r0
 8004768:	4642      	mov	r2, r8
 800476a:	189b      	adds	r3, r3, r2
 800476c:	66bb      	str	r3, [r7, #104]	; 0x68
 800476e:	464b      	mov	r3, r9
 8004770:	460a      	mov	r2, r1
 8004772:	eb42 0303 	adc.w	r3, r2, r3
 8004776:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	663b      	str	r3, [r7, #96]	; 0x60
 8004782:	667a      	str	r2, [r7, #100]	; 0x64
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004790:	4649      	mov	r1, r9
 8004792:	008b      	lsls	r3, r1, #2
 8004794:	4641      	mov	r1, r8
 8004796:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800479a:	4641      	mov	r1, r8
 800479c:	008a      	lsls	r2, r1, #2
 800479e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047a2:	f7fb fd1d 	bl	80001e0 <__aeabi_uldivmod>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <UART_SetConfig+0x4e4>)
 80047ac:	fba3 1302 	umull	r1, r3, r3, r2
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	2164      	movs	r1, #100	; 0x64
 80047b4:	fb01 f303 	mul.w	r3, r1, r3
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	3332      	adds	r3, #50	; 0x32
 80047be:	4a08      	ldr	r2, [pc, #32]	; (80047e0 <UART_SetConfig+0x4e4>)
 80047c0:	fba2 2303 	umull	r2, r3, r2, r3
 80047c4:	095b      	lsrs	r3, r3, #5
 80047c6:	f003 020f 	and.w	r2, r3, #15
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4422      	add	r2, r4
 80047d2:	609a      	str	r2, [r3, #8]
}
 80047d4:	bf00      	nop
 80047d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047da:	46bd      	mov	sp, r7
 80047dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047e0:	51eb851f 	.word	0x51eb851f

080047e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80047f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047f6:	2b84      	cmp	r3, #132	; 0x84
 80047f8:	d005      	beq.n	8004806 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80047fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4413      	add	r3, r2
 8004802:	3303      	adds	r3, #3
 8004804:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004806:	68fb      	ldr	r3, [r7, #12]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004818:	f000 fade 	bl	8004dd8 <vTaskStartScheduler>
  
  return osOK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	bd80      	pop	{r7, pc}

08004822 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004822:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004824:	b089      	sub	sp, #36	; 0x24
 8004826:	af04      	add	r7, sp, #16
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d020      	beq.n	8004876 <osThreadCreate+0x54>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01c      	beq.n	8004876 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685c      	ldr	r4, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691e      	ldr	r6, [r3, #16]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800484e:	4618      	mov	r0, r3
 8004850:	f7ff ffc8 	bl	80047e4 <makeFreeRtosPriority>
 8004854:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800485e:	9202      	str	r2, [sp, #8]
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	9100      	str	r1, [sp, #0]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	4632      	mov	r2, r6
 8004868:	4629      	mov	r1, r5
 800486a:	4620      	mov	r0, r4
 800486c:	f000 f8ed 	bl	8004a4a <xTaskCreateStatic>
 8004870:	4603      	mov	r3, r0
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	e01c      	b.n	80048b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685c      	ldr	r4, [r3, #4]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004882:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff ffaa 	bl	80047e4 <makeFreeRtosPriority>
 8004890:	4602      	mov	r2, r0
 8004892:	f107 030c 	add.w	r3, r7, #12
 8004896:	9301      	str	r3, [sp, #4]
 8004898:	9200      	str	r2, [sp, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	4632      	mov	r2, r6
 800489e:	4629      	mov	r1, r5
 80048a0:	4620      	mov	r0, r4
 80048a2:	f000 f92f 	bl	8004b04 <xTaskCreate>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d001      	beq.n	80048b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80048ac:	2300      	movs	r3, #0
 80048ae:	e000      	b.n	80048b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80048b0:	68fb      	ldr	r3, [r7, #12]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <osDelay+0x16>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	e000      	b.n	80048d2 <osDelay+0x18>
 80048d0:	2301      	movs	r3, #1
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fa4c 	bl	8004d70 <vTaskDelay>
  
  return osOK;
 80048d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f103 0208 	add.w	r2, r3, #8
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f04f 32ff 	mov.w	r2, #4294967295
 80048fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f103 0208 	add.w	r2, r3, #8
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f103 0208 	add.w	r2, r3, #8
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	601a      	str	r2, [r3, #0]
}
 8004978:	bf00      	nop
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499a:	d103      	bne.n	80049a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	e00c      	b.n	80049be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3308      	adds	r3, #8
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	e002      	b.n	80049b2 <vListInsert+0x2e>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d2f6      	bcs.n	80049ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	601a      	str	r2, [r3, #0]
}
 80049ea:	bf00      	nop
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049f6:	b480      	push	{r7}
 80049f8:	b085      	sub	sp, #20
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6892      	ldr	r2, [r2, #8]
 8004a0c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6852      	ldr	r2, [r2, #4]
 8004a16:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d103      	bne.n	8004a2a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	1e5a      	subs	r2, r3, #1
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b08e      	sub	sp, #56	; 0x38
 8004a4e:	af04      	add	r7, sp, #16
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	607a      	str	r2, [r7, #4]
 8004a56:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a70:	bf00      	nop
 8004a72:	e7fe      	b.n	8004a72 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10a      	bne.n	8004a90 <xTaskCreateStatic+0x46>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	61fb      	str	r3, [r7, #28]
}
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a90:	2354      	movs	r3, #84	; 0x54
 8004a92:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	2b54      	cmp	r3, #84	; 0x54
 8004a98:	d00a      	beq.n	8004ab0 <xTaskCreateStatic+0x66>
	__asm volatile
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	61bb      	str	r3, [r7, #24]
}
 8004aac:	bf00      	nop
 8004aae:	e7fe      	b.n	8004aae <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ab0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01e      	beq.n	8004af6 <xTaskCreateStatic+0xac>
 8004ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d01b      	beq.n	8004af6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	9303      	str	r3, [sp, #12]
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	9302      	str	r3, [sp, #8]
 8004ad8:	f107 0314 	add.w	r3, r7, #20
 8004adc:	9301      	str	r3, [sp, #4]
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f850 	bl	8004b8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004aee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004af0:	f000 f8d4 	bl	8004c9c <prvAddNewTaskToReadyList>
 8004af4:	e001      	b.n	8004afa <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004afa:	697b      	ldr	r3, [r7, #20]
	}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3728      	adds	r7, #40	; 0x28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08c      	sub	sp, #48	; 0x30
 8004b08:	af04      	add	r7, sp, #16
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	4613      	mov	r3, r2
 8004b12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b14:	88fb      	ldrh	r3, [r7, #6]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fec5 	bl	80058a8 <pvPortMalloc>
 8004b1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00e      	beq.n	8004b44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b26:	2054      	movs	r0, #84	; 0x54
 8004b28:	f000 febe 	bl	80058a8 <pvPortMalloc>
 8004b2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30
 8004b3a:	e005      	b.n	8004b48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b3c:	6978      	ldr	r0, [r7, #20]
 8004b3e:	f000 ff7f 	bl	8005a40 <vPortFree>
 8004b42:	e001      	b.n	8004b48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d017      	beq.n	8004b7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b56:	88fa      	ldrh	r2, [r7, #6]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	9303      	str	r3, [sp, #12]
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	9302      	str	r3, [sp, #8]
 8004b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b62:	9301      	str	r3, [sp, #4]
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f80e 	bl	8004b8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b72:	69f8      	ldr	r0, [r7, #28]
 8004b74:	f000 f892 	bl	8004c9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	61bb      	str	r3, [r7, #24]
 8004b7c:	e002      	b.n	8004b84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b84:	69bb      	ldr	r3, [r7, #24]
	}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3720      	adds	r7, #32
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b088      	sub	sp, #32
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	60f8      	str	r0, [r7, #12]
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	f023 0307 	bic.w	r3, r3, #7
 8004bb4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	617b      	str	r3, [r7, #20]
}
 8004bd2:	bf00      	nop
 8004bd4:	e7fe      	b.n	8004bd4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01f      	beq.n	8004c1c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61fb      	str	r3, [r7, #28]
 8004be0:	e012      	b.n	8004c08 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	4413      	add	r3, r2
 8004be8:	7819      	ldrb	r1, [r3, #0]
 8004bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	4413      	add	r3, r2
 8004bf0:	3334      	adds	r3, #52	; 0x34
 8004bf2:	460a      	mov	r2, r1
 8004bf4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d006      	beq.n	8004c10 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	3301      	adds	r3, #1
 8004c06:	61fb      	str	r3, [r7, #28]
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	2b0f      	cmp	r3, #15
 8004c0c:	d9e9      	bls.n	8004be2 <prvInitialiseNewTask+0x54>
 8004c0e:	e000      	b.n	8004c12 <prvInitialiseNewTask+0x84>
			{
				break;
 8004c10:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c1a:	e003      	b.n	8004c24 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	2b06      	cmp	r3, #6
 8004c28:	d901      	bls.n	8004c2e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c2a:	2306      	movs	r3, #6
 8004c2c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c32:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c38:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	3304      	adds	r3, #4
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff fe6c 	bl	8004922 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	3318      	adds	r3, #24
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fe67 	bl	8004922 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	f1c3 0207 	rsb	r2, r3, #7
 8004c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c68:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	69b8      	ldr	r0, [r7, #24]
 8004c7e:	f000 fc05 	bl	800548c <pxPortInitialiseStack>
 8004c82:	4602      	mov	r2, r0
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c94:	bf00      	nop
 8004c96:	3720      	adds	r7, #32
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ca4:	f000 fd1e 	bl	80056e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ca8:	4b2a      	ldr	r3, [pc, #168]	; (8004d54 <prvAddNewTaskToReadyList+0xb8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3301      	adds	r3, #1
 8004cae:	4a29      	ldr	r2, [pc, #164]	; (8004d54 <prvAddNewTaskToReadyList+0xb8>)
 8004cb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cb2:	4b29      	ldr	r3, [pc, #164]	; (8004d58 <prvAddNewTaskToReadyList+0xbc>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cba:	4a27      	ldr	r2, [pc, #156]	; (8004d58 <prvAddNewTaskToReadyList+0xbc>)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cc0:	4b24      	ldr	r3, [pc, #144]	; (8004d54 <prvAddNewTaskToReadyList+0xb8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d110      	bne.n	8004cea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cc8:	f000 fabc 	bl	8005244 <prvInitialiseTaskLists>
 8004ccc:	e00d      	b.n	8004cea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cce:	4b23      	ldr	r3, [pc, #140]	; (8004d5c <prvAddNewTaskToReadyList+0xc0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d109      	bne.n	8004cea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cd6:	4b20      	ldr	r3, [pc, #128]	; (8004d58 <prvAddNewTaskToReadyList+0xbc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d802      	bhi.n	8004cea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ce4:	4a1c      	ldr	r2, [pc, #112]	; (8004d58 <prvAddNewTaskToReadyList+0xbc>)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cea:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <prvAddNewTaskToReadyList+0xc4>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	4a1b      	ldr	r2, [pc, #108]	; (8004d60 <prvAddNewTaskToReadyList+0xc4>)
 8004cf2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <prvAddNewTaskToReadyList+0xc8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	4a18      	ldr	r2, [pc, #96]	; (8004d64 <prvAddNewTaskToReadyList+0xc8>)
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4a15      	ldr	r2, [pc, #84]	; (8004d68 <prvAddNewTaskToReadyList+0xcc>)
 8004d14:	441a      	add	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	f7ff fe0d 	bl	800493c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d22:	f000 fd0f 	bl	8005744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d26:	4b0d      	ldr	r3, [pc, #52]	; (8004d5c <prvAddNewTaskToReadyList+0xc0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00e      	beq.n	8004d4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d2e:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <prvAddNewTaskToReadyList+0xbc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d207      	bcs.n	8004d4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <prvAddNewTaskToReadyList+0xd0>)
 8004d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20000620 	.word	0x20000620
 8004d58:	20000520 	.word	0x20000520
 8004d5c:	2000062c 	.word	0x2000062c
 8004d60:	2000063c 	.word	0x2000063c
 8004d64:	20000628 	.word	0x20000628
 8004d68:	20000524 	.word	0x20000524
 8004d6c:	e000ed04 	.word	0xe000ed04

08004d70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d017      	beq.n	8004db2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d82:	4b13      	ldr	r3, [pc, #76]	; (8004dd0 <vTaskDelay+0x60>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <vTaskDelay+0x30>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	60bb      	str	r3, [r7, #8]
}
 8004d9c:	bf00      	nop
 8004d9e:	e7fe      	b.n	8004d9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004da0:	f000 f87a 	bl	8004e98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004da4:	2100      	movs	r1, #0
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fb0a 	bl	80053c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004dac:	f000 f882 	bl	8004eb4 <xTaskResumeAll>
 8004db0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d107      	bne.n	8004dc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004db8:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <vTaskDelay+0x64>)
 8004dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004dc8:	bf00      	nop
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20000648 	.word	0x20000648
 8004dd4:	e000ed04 	.word	0xe000ed04

08004dd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	; 0x28
 8004ddc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004de2:	2300      	movs	r3, #0
 8004de4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004de6:	463a      	mov	r2, r7
 8004de8:	1d39      	adds	r1, r7, #4
 8004dea:	f107 0308 	add.w	r3, r7, #8
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fc f9ba 	bl	8001168 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004df4:	6839      	ldr	r1, [r7, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	9202      	str	r2, [sp, #8]
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	2300      	movs	r3, #0
 8004e04:	460a      	mov	r2, r1
 8004e06:	491e      	ldr	r1, [pc, #120]	; (8004e80 <vTaskStartScheduler+0xa8>)
 8004e08:	481e      	ldr	r0, [pc, #120]	; (8004e84 <vTaskStartScheduler+0xac>)
 8004e0a:	f7ff fe1e 	bl	8004a4a <xTaskCreateStatic>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	4a1d      	ldr	r2, [pc, #116]	; (8004e88 <vTaskStartScheduler+0xb0>)
 8004e12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e14:	4b1c      	ldr	r3, [pc, #112]	; (8004e88 <vTaskStartScheduler+0xb0>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	e001      	b.n	8004e26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d116      	bne.n	8004e5a <vTaskStartScheduler+0x82>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	613b      	str	r3, [r7, #16]
}
 8004e3e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e40:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <vTaskStartScheduler+0xb4>)
 8004e42:	f04f 32ff 	mov.w	r2, #4294967295
 8004e46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e48:	4b11      	ldr	r3, [pc, #68]	; (8004e90 <vTaskStartScheduler+0xb8>)
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e4e:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <vTaskStartScheduler+0xbc>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e54:	f000 fba4 	bl	80055a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e58:	e00e      	b.n	8004e78 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e60:	d10a      	bne.n	8004e78 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	60fb      	str	r3, [r7, #12]
}
 8004e74:	bf00      	nop
 8004e76:	e7fe      	b.n	8004e76 <vTaskStartScheduler+0x9e>
}
 8004e78:	bf00      	nop
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	08005d88 	.word	0x08005d88
 8004e84:	08005215 	.word	0x08005215
 8004e88:	20000644 	.word	0x20000644
 8004e8c:	20000640 	.word	0x20000640
 8004e90:	2000062c 	.word	0x2000062c
 8004e94:	20000624 	.word	0x20000624

08004e98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e9c:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <vTaskSuspendAll+0x18>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	4a03      	ldr	r2, [pc, #12]	; (8004eb0 <vTaskSuspendAll+0x18>)
 8004ea4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ea6:	bf00      	nop
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	20000648 	.word	0x20000648

08004eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ec2:	4b41      	ldr	r3, [pc, #260]	; (8004fc8 <xTaskResumeAll+0x114>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10a      	bne.n	8004ee0 <xTaskResumeAll+0x2c>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	603b      	str	r3, [r7, #0]
}
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ee0:	f000 fc00 	bl	80056e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ee4:	4b38      	ldr	r3, [pc, #224]	; (8004fc8 <xTaskResumeAll+0x114>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	4a37      	ldr	r2, [pc, #220]	; (8004fc8 <xTaskResumeAll+0x114>)
 8004eec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eee:	4b36      	ldr	r3, [pc, #216]	; (8004fc8 <xTaskResumeAll+0x114>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d161      	bne.n	8004fba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ef6:	4b35      	ldr	r3, [pc, #212]	; (8004fcc <xTaskResumeAll+0x118>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d05d      	beq.n	8004fba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004efe:	e02e      	b.n	8004f5e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f00:	4b33      	ldr	r3, [pc, #204]	; (8004fd0 <xTaskResumeAll+0x11c>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3318      	adds	r3, #24
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff fd72 	bl	80049f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3304      	adds	r3, #4
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff fd6d 	bl	80049f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	2201      	movs	r2, #1
 8004f22:	409a      	lsls	r2, r3
 8004f24:	4b2b      	ldr	r3, [pc, #172]	; (8004fd4 <xTaskResumeAll+0x120>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	4a2a      	ldr	r2, [pc, #168]	; (8004fd4 <xTaskResumeAll+0x120>)
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4a27      	ldr	r2, [pc, #156]	; (8004fd8 <xTaskResumeAll+0x124>)
 8004f3c:	441a      	add	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3304      	adds	r3, #4
 8004f42:	4619      	mov	r1, r3
 8004f44:	4610      	mov	r0, r2
 8004f46:	f7ff fcf9 	bl	800493c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4e:	4b23      	ldr	r3, [pc, #140]	; (8004fdc <xTaskResumeAll+0x128>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d302      	bcc.n	8004f5e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004f58:	4b21      	ldr	r3, [pc, #132]	; (8004fe0 <xTaskResumeAll+0x12c>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f5e:	4b1c      	ldr	r3, [pc, #112]	; (8004fd0 <xTaskResumeAll+0x11c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1cc      	bne.n	8004f00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f6c:	f000 fa08 	bl	8005380 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f70:	4b1c      	ldr	r3, [pc, #112]	; (8004fe4 <xTaskResumeAll+0x130>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d010      	beq.n	8004f9e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f7c:	f000 f836 	bl	8004fec <xTaskIncrementTick>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004f86:	4b16      	ldr	r3, [pc, #88]	; (8004fe0 <xTaskResumeAll+0x12c>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f1      	bne.n	8004f7c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004f98:	4b12      	ldr	r3, [pc, #72]	; (8004fe4 <xTaskResumeAll+0x130>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f9e:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <xTaskResumeAll+0x12c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d009      	beq.n	8004fba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004faa:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <xTaskResumeAll+0x134>)
 8004fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fba:	f000 fbc3 	bl	8005744 <vPortExitCritical>

	return xAlreadyYielded;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20000648 	.word	0x20000648
 8004fcc:	20000620 	.word	0x20000620
 8004fd0:	200005e0 	.word	0x200005e0
 8004fd4:	20000628 	.word	0x20000628
 8004fd8:	20000524 	.word	0x20000524
 8004fdc:	20000520 	.word	0x20000520
 8004fe0:	20000634 	.word	0x20000634
 8004fe4:	20000630 	.word	0x20000630
 8004fe8:	e000ed04 	.word	0xe000ed04

08004fec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ff6:	4b4e      	ldr	r3, [pc, #312]	; (8005130 <xTaskIncrementTick+0x144>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f040 808e 	bne.w	800511c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005000:	4b4c      	ldr	r3, [pc, #304]	; (8005134 <xTaskIncrementTick+0x148>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3301      	adds	r3, #1
 8005006:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005008:	4a4a      	ldr	r2, [pc, #296]	; (8005134 <xTaskIncrementTick+0x148>)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d120      	bne.n	8005056 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005014:	4b48      	ldr	r3, [pc, #288]	; (8005138 <xTaskIncrementTick+0x14c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <xTaskIncrementTick+0x48>
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	603b      	str	r3, [r7, #0]
}
 8005030:	bf00      	nop
 8005032:	e7fe      	b.n	8005032 <xTaskIncrementTick+0x46>
 8005034:	4b40      	ldr	r3, [pc, #256]	; (8005138 <xTaskIncrementTick+0x14c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	4b40      	ldr	r3, [pc, #256]	; (800513c <xTaskIncrementTick+0x150>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a3e      	ldr	r2, [pc, #248]	; (8005138 <xTaskIncrementTick+0x14c>)
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	4a3e      	ldr	r2, [pc, #248]	; (800513c <xTaskIncrementTick+0x150>)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	4b3d      	ldr	r3, [pc, #244]	; (8005140 <xTaskIncrementTick+0x154>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3301      	adds	r3, #1
 800504e:	4a3c      	ldr	r2, [pc, #240]	; (8005140 <xTaskIncrementTick+0x154>)
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	f000 f995 	bl	8005380 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005056:	4b3b      	ldr	r3, [pc, #236]	; (8005144 <xTaskIncrementTick+0x158>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	429a      	cmp	r2, r3
 800505e:	d348      	bcc.n	80050f2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005060:	4b35      	ldr	r3, [pc, #212]	; (8005138 <xTaskIncrementTick+0x14c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d104      	bne.n	8005074 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800506a:	4b36      	ldr	r3, [pc, #216]	; (8005144 <xTaskIncrementTick+0x158>)
 800506c:	f04f 32ff 	mov.w	r2, #4294967295
 8005070:	601a      	str	r2, [r3, #0]
					break;
 8005072:	e03e      	b.n	80050f2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005074:	4b30      	ldr	r3, [pc, #192]	; (8005138 <xTaskIncrementTick+0x14c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	429a      	cmp	r2, r3
 800508a:	d203      	bcs.n	8005094 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800508c:	4a2d      	ldr	r2, [pc, #180]	; (8005144 <xTaskIncrementTick+0x158>)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005092:	e02e      	b.n	80050f2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	3304      	adds	r3, #4
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff fcac 	bl	80049f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d004      	beq.n	80050b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	3318      	adds	r3, #24
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff fca3 	bl	80049f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	2201      	movs	r2, #1
 80050b6:	409a      	lsls	r2, r3
 80050b8:	4b23      	ldr	r3, [pc, #140]	; (8005148 <xTaskIncrementTick+0x15c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4313      	orrs	r3, r2
 80050be:	4a22      	ldr	r2, [pc, #136]	; (8005148 <xTaskIncrementTick+0x15c>)
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4a1f      	ldr	r2, [pc, #124]	; (800514c <xTaskIncrementTick+0x160>)
 80050d0:	441a      	add	r2, r3
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	3304      	adds	r3, #4
 80050d6:	4619      	mov	r1, r3
 80050d8:	4610      	mov	r0, r2
 80050da:	f7ff fc2f 	bl	800493c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e2:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <xTaskIncrementTick+0x164>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d3b9      	bcc.n	8005060 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80050ec:	2301      	movs	r3, #1
 80050ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050f0:	e7b6      	b.n	8005060 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050f2:	4b17      	ldr	r3, [pc, #92]	; (8005150 <xTaskIncrementTick+0x164>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f8:	4914      	ldr	r1, [pc, #80]	; (800514c <xTaskIncrementTick+0x160>)
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	440b      	add	r3, r1
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d901      	bls.n	800510e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800510a:	2301      	movs	r3, #1
 800510c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800510e:	4b11      	ldr	r3, [pc, #68]	; (8005154 <xTaskIncrementTick+0x168>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005116:	2301      	movs	r3, #1
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	e004      	b.n	8005126 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800511c:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <xTaskIncrementTick+0x16c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3301      	adds	r3, #1
 8005122:	4a0d      	ldr	r2, [pc, #52]	; (8005158 <xTaskIncrementTick+0x16c>)
 8005124:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005126:	697b      	ldr	r3, [r7, #20]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20000648 	.word	0x20000648
 8005134:	20000624 	.word	0x20000624
 8005138:	200005d8 	.word	0x200005d8
 800513c:	200005dc 	.word	0x200005dc
 8005140:	20000638 	.word	0x20000638
 8005144:	20000640 	.word	0x20000640
 8005148:	20000628 	.word	0x20000628
 800514c:	20000524 	.word	0x20000524
 8005150:	20000520 	.word	0x20000520
 8005154:	20000634 	.word	0x20000634
 8005158:	20000630 	.word	0x20000630

0800515c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005162:	4b27      	ldr	r3, [pc, #156]	; (8005200 <vTaskSwitchContext+0xa4>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800516a:	4b26      	ldr	r3, [pc, #152]	; (8005204 <vTaskSwitchContext+0xa8>)
 800516c:	2201      	movs	r2, #1
 800516e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005170:	e03f      	b.n	80051f2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005172:	4b24      	ldr	r3, [pc, #144]	; (8005204 <vTaskSwitchContext+0xa8>)
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005178:	4b23      	ldr	r3, [pc, #140]	; (8005208 <vTaskSwitchContext+0xac>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	fab3 f383 	clz	r3, r3
 8005184:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005186:	7afb      	ldrb	r3, [r7, #11]
 8005188:	f1c3 031f 	rsb	r3, r3, #31
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	491f      	ldr	r1, [pc, #124]	; (800520c <vTaskSwitchContext+0xb0>)
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	607b      	str	r3, [r7, #4]
}
 80051b4:	bf00      	nop
 80051b6:	e7fe      	b.n	80051b6 <vTaskSwitchContext+0x5a>
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4613      	mov	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4a12      	ldr	r2, [pc, #72]	; (800520c <vTaskSwitchContext+0xb0>)
 80051c4:	4413      	add	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	605a      	str	r2, [r3, #4]
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	3308      	adds	r3, #8
 80051da:	429a      	cmp	r2, r3
 80051dc:	d104      	bne.n	80051e8 <vTaskSwitchContext+0x8c>
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	605a      	str	r2, [r3, #4]
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	4a08      	ldr	r2, [pc, #32]	; (8005210 <vTaskSwitchContext+0xb4>)
 80051f0:	6013      	str	r3, [r2, #0]
}
 80051f2:	bf00      	nop
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	20000648 	.word	0x20000648
 8005204:	20000634 	.word	0x20000634
 8005208:	20000628 	.word	0x20000628
 800520c:	20000524 	.word	0x20000524
 8005210:	20000520 	.word	0x20000520

08005214 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800521c:	f000 f852 	bl	80052c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005220:	4b06      	ldr	r3, [pc, #24]	; (800523c <prvIdleTask+0x28>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d9f9      	bls.n	800521c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005228:	4b05      	ldr	r3, [pc, #20]	; (8005240 <prvIdleTask+0x2c>)
 800522a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005238:	e7f0      	b.n	800521c <prvIdleTask+0x8>
 800523a:	bf00      	nop
 800523c:	20000524 	.word	0x20000524
 8005240:	e000ed04 	.word	0xe000ed04

08005244 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800524a:	2300      	movs	r3, #0
 800524c:	607b      	str	r3, [r7, #4]
 800524e:	e00c      	b.n	800526a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4a12      	ldr	r2, [pc, #72]	; (80052a4 <prvInitialiseTaskLists+0x60>)
 800525c:	4413      	add	r3, r2
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff fb3f 	bl	80048e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3301      	adds	r3, #1
 8005268:	607b      	str	r3, [r7, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b06      	cmp	r3, #6
 800526e:	d9ef      	bls.n	8005250 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005270:	480d      	ldr	r0, [pc, #52]	; (80052a8 <prvInitialiseTaskLists+0x64>)
 8005272:	f7ff fb36 	bl	80048e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005276:	480d      	ldr	r0, [pc, #52]	; (80052ac <prvInitialiseTaskLists+0x68>)
 8005278:	f7ff fb33 	bl	80048e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800527c:	480c      	ldr	r0, [pc, #48]	; (80052b0 <prvInitialiseTaskLists+0x6c>)
 800527e:	f7ff fb30 	bl	80048e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005282:	480c      	ldr	r0, [pc, #48]	; (80052b4 <prvInitialiseTaskLists+0x70>)
 8005284:	f7ff fb2d 	bl	80048e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005288:	480b      	ldr	r0, [pc, #44]	; (80052b8 <prvInitialiseTaskLists+0x74>)
 800528a:	f7ff fb2a 	bl	80048e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800528e:	4b0b      	ldr	r3, [pc, #44]	; (80052bc <prvInitialiseTaskLists+0x78>)
 8005290:	4a05      	ldr	r2, [pc, #20]	; (80052a8 <prvInitialiseTaskLists+0x64>)
 8005292:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005294:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <prvInitialiseTaskLists+0x7c>)
 8005296:	4a05      	ldr	r2, [pc, #20]	; (80052ac <prvInitialiseTaskLists+0x68>)
 8005298:	601a      	str	r2, [r3, #0]
}
 800529a:	bf00      	nop
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20000524 	.word	0x20000524
 80052a8:	200005b0 	.word	0x200005b0
 80052ac:	200005c4 	.word	0x200005c4
 80052b0:	200005e0 	.word	0x200005e0
 80052b4:	200005f4 	.word	0x200005f4
 80052b8:	2000060c 	.word	0x2000060c
 80052bc:	200005d8 	.word	0x200005d8
 80052c0:	200005dc 	.word	0x200005dc

080052c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052ca:	e019      	b.n	8005300 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80052cc:	f000 fa0a 	bl	80056e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052d0:	4b10      	ldr	r3, [pc, #64]	; (8005314 <prvCheckTasksWaitingTermination+0x50>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3304      	adds	r3, #4
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff fb8a 	bl	80049f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80052e2:	4b0d      	ldr	r3, [pc, #52]	; (8005318 <prvCheckTasksWaitingTermination+0x54>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	4a0b      	ldr	r2, [pc, #44]	; (8005318 <prvCheckTasksWaitingTermination+0x54>)
 80052ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80052ec:	4b0b      	ldr	r3, [pc, #44]	; (800531c <prvCheckTasksWaitingTermination+0x58>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	4a0a      	ldr	r2, [pc, #40]	; (800531c <prvCheckTasksWaitingTermination+0x58>)
 80052f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052f6:	f000 fa25 	bl	8005744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f810 	bl	8005320 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005300:	4b06      	ldr	r3, [pc, #24]	; (800531c <prvCheckTasksWaitingTermination+0x58>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e1      	bne.n	80052cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005308:	bf00      	nop
 800530a:	bf00      	nop
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	200005f4 	.word	0x200005f4
 8005318:	20000620 	.word	0x20000620
 800531c:	20000608 	.word	0x20000608

08005320 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800532e:	2b00      	cmp	r3, #0
 8005330:	d108      	bne.n	8005344 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fb82 	bl	8005a40 <vPortFree>
				vPortFree( pxTCB );
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fb7f 	bl	8005a40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005342:	e018      	b.n	8005376 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800534a:	2b01      	cmp	r3, #1
 800534c:	d103      	bne.n	8005356 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fb76 	bl	8005a40 <vPortFree>
	}
 8005354:	e00f      	b.n	8005376 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800535c:	2b02      	cmp	r3, #2
 800535e:	d00a      	beq.n	8005376 <prvDeleteTCB+0x56>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	60fb      	str	r3, [r7, #12]
}
 8005372:	bf00      	nop
 8005374:	e7fe      	b.n	8005374 <prvDeleteTCB+0x54>
	}
 8005376:	bf00      	nop
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005386:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <prvResetNextTaskUnblockTime+0x38>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d104      	bne.n	800539a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005390:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <prvResetNextTaskUnblockTime+0x3c>)
 8005392:	f04f 32ff 	mov.w	r2, #4294967295
 8005396:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005398:	e008      	b.n	80053ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800539a:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <prvResetNextTaskUnblockTime+0x38>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	4a04      	ldr	r2, [pc, #16]	; (80053bc <prvResetNextTaskUnblockTime+0x3c>)
 80053aa:	6013      	str	r3, [r2, #0]
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	200005d8 	.word	0x200005d8
 80053bc:	20000640 	.word	0x20000640

080053c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053ca:	4b29      	ldr	r3, [pc, #164]	; (8005470 <prvAddCurrentTaskToDelayedList+0xb0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053d0:	4b28      	ldr	r3, [pc, #160]	; (8005474 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3304      	adds	r3, #4
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff fb0d 	bl	80049f6 <uxListRemove>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10b      	bne.n	80053fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80053e2:	4b24      	ldr	r3, [pc, #144]	; (8005474 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	2201      	movs	r2, #1
 80053ea:	fa02 f303 	lsl.w	r3, r2, r3
 80053ee:	43da      	mvns	r2, r3
 80053f0:	4b21      	ldr	r3, [pc, #132]	; (8005478 <prvAddCurrentTaskToDelayedList+0xb8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4013      	ands	r3, r2
 80053f6:	4a20      	ldr	r2, [pc, #128]	; (8005478 <prvAddCurrentTaskToDelayedList+0xb8>)
 80053f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005400:	d10a      	bne.n	8005418 <prvAddCurrentTaskToDelayedList+0x58>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005408:	4b1a      	ldr	r3, [pc, #104]	; (8005474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3304      	adds	r3, #4
 800540e:	4619      	mov	r1, r3
 8005410:	481a      	ldr	r0, [pc, #104]	; (800547c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005412:	f7ff fa93 	bl	800493c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005416:	e026      	b.n	8005466 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4413      	add	r3, r2
 800541e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005420:	4b14      	ldr	r3, [pc, #80]	; (8005474 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	429a      	cmp	r2, r3
 800542e:	d209      	bcs.n	8005444 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005430:	4b13      	ldr	r3, [pc, #76]	; (8005480 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	4b0f      	ldr	r3, [pc, #60]	; (8005474 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3304      	adds	r3, #4
 800543a:	4619      	mov	r1, r3
 800543c:	4610      	mov	r0, r2
 800543e:	f7ff faa1 	bl	8004984 <vListInsert>
}
 8005442:	e010      	b.n	8005466 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005444:	4b0f      	ldr	r3, [pc, #60]	; (8005484 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	4b0a      	ldr	r3, [pc, #40]	; (8005474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3304      	adds	r3, #4
 800544e:	4619      	mov	r1, r3
 8005450:	4610      	mov	r0, r2
 8005452:	f7ff fa97 	bl	8004984 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005456:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	429a      	cmp	r2, r3
 800545e:	d202      	bcs.n	8005466 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005460:	4a09      	ldr	r2, [pc, #36]	; (8005488 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	6013      	str	r3, [r2, #0]
}
 8005466:	bf00      	nop
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000624 	.word	0x20000624
 8005474:	20000520 	.word	0x20000520
 8005478:	20000628 	.word	0x20000628
 800547c:	2000060c 	.word	0x2000060c
 8005480:	200005dc 	.word	0x200005dc
 8005484:	200005d8 	.word	0x200005d8
 8005488:	20000640 	.word	0x20000640

0800548c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3b04      	subs	r3, #4
 800549c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3b04      	subs	r3, #4
 80054aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f023 0201 	bic.w	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3b04      	subs	r3, #4
 80054ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054bc:	4a0c      	ldr	r2, [pc, #48]	; (80054f0 <pxPortInitialiseStack+0x64>)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	3b14      	subs	r3, #20
 80054c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3b04      	subs	r3, #4
 80054d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f06f 0202 	mvn.w	r2, #2
 80054da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3b20      	subs	r3, #32
 80054e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80054e2:	68fb      	ldr	r3, [r7, #12]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	080054f5 	.word	0x080054f5

080054f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80054fe:	4b12      	ldr	r3, [pc, #72]	; (8005548 <prvTaskExitError+0x54>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005506:	d00a      	beq.n	800551e <prvTaskExitError+0x2a>
	__asm volatile
 8005508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	60fb      	str	r3, [r7, #12]
}
 800551a:	bf00      	nop
 800551c:	e7fe      	b.n	800551c <prvTaskExitError+0x28>
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	60bb      	str	r3, [r7, #8]
}
 8005530:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005532:	bf00      	nop
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0fc      	beq.n	8005534 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800553a:	bf00      	nop
 800553c:	bf00      	nop
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	2000000c 	.word	0x2000000c
 800554c:	00000000 	.word	0x00000000

08005550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <pxCurrentTCBConst2>)
 8005552:	6819      	ldr	r1, [r3, #0]
 8005554:	6808      	ldr	r0, [r1, #0]
 8005556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555a:	f380 8809 	msr	PSP, r0
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f04f 0000 	mov.w	r0, #0
 8005566:	f380 8811 	msr	BASEPRI, r0
 800556a:	4770      	bx	lr
 800556c:	f3af 8000 	nop.w

08005570 <pxCurrentTCBConst2>:
 8005570:	20000520 	.word	0x20000520
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop

08005578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005578:	4808      	ldr	r0, [pc, #32]	; (800559c <prvPortStartFirstTask+0x24>)
 800557a:	6800      	ldr	r0, [r0, #0]
 800557c:	6800      	ldr	r0, [r0, #0]
 800557e:	f380 8808 	msr	MSP, r0
 8005582:	f04f 0000 	mov.w	r0, #0
 8005586:	f380 8814 	msr	CONTROL, r0
 800558a:	b662      	cpsie	i
 800558c:	b661      	cpsie	f
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	df00      	svc	0
 8005598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800559a:	bf00      	nop
 800559c:	e000ed08 	.word	0xe000ed08

080055a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055a6:	4b46      	ldr	r3, [pc, #280]	; (80056c0 <xPortStartScheduler+0x120>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a46      	ldr	r2, [pc, #280]	; (80056c4 <xPortStartScheduler+0x124>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d10a      	bne.n	80055c6 <xPortStartScheduler+0x26>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	613b      	str	r3, [r7, #16]
}
 80055c2:	bf00      	nop
 80055c4:	e7fe      	b.n	80055c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80055c6:	4b3e      	ldr	r3, [pc, #248]	; (80056c0 <xPortStartScheduler+0x120>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a3f      	ldr	r2, [pc, #252]	; (80056c8 <xPortStartScheduler+0x128>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d10a      	bne.n	80055e6 <xPortStartScheduler+0x46>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	60fb      	str	r3, [r7, #12]
}
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055e6:	4b39      	ldr	r3, [pc, #228]	; (80056cc <xPortStartScheduler+0x12c>)
 80055e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	22ff      	movs	r2, #255	; 0xff
 80055f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	b2db      	uxtb	r3, r3
 8005604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005608:	b2da      	uxtb	r2, r3
 800560a:	4b31      	ldr	r3, [pc, #196]	; (80056d0 <xPortStartScheduler+0x130>)
 800560c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800560e:	4b31      	ldr	r3, [pc, #196]	; (80056d4 <xPortStartScheduler+0x134>)
 8005610:	2207      	movs	r2, #7
 8005612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005614:	e009      	b.n	800562a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005616:	4b2f      	ldr	r3, [pc, #188]	; (80056d4 <xPortStartScheduler+0x134>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3b01      	subs	r3, #1
 800561c:	4a2d      	ldr	r2, [pc, #180]	; (80056d4 <xPortStartScheduler+0x134>)
 800561e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	b2db      	uxtb	r3, r3
 8005628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800562a:	78fb      	ldrb	r3, [r7, #3]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005632:	2b80      	cmp	r3, #128	; 0x80
 8005634:	d0ef      	beq.n	8005616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005636:	4b27      	ldr	r3, [pc, #156]	; (80056d4 <xPortStartScheduler+0x134>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f1c3 0307 	rsb	r3, r3, #7
 800563e:	2b04      	cmp	r3, #4
 8005640:	d00a      	beq.n	8005658 <xPortStartScheduler+0xb8>
	__asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	60bb      	str	r3, [r7, #8]
}
 8005654:	bf00      	nop
 8005656:	e7fe      	b.n	8005656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005658:	4b1e      	ldr	r3, [pc, #120]	; (80056d4 <xPortStartScheduler+0x134>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	021b      	lsls	r3, r3, #8
 800565e:	4a1d      	ldr	r2, [pc, #116]	; (80056d4 <xPortStartScheduler+0x134>)
 8005660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005662:	4b1c      	ldr	r3, [pc, #112]	; (80056d4 <xPortStartScheduler+0x134>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800566a:	4a1a      	ldr	r2, [pc, #104]	; (80056d4 <xPortStartScheduler+0x134>)
 800566c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	b2da      	uxtb	r2, r3
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005676:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <xPortStartScheduler+0x138>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a17      	ldr	r2, [pc, #92]	; (80056d8 <xPortStartScheduler+0x138>)
 800567c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005682:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <xPortStartScheduler+0x138>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a14      	ldr	r2, [pc, #80]	; (80056d8 <xPortStartScheduler+0x138>)
 8005688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800568c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800568e:	f000 f8dd 	bl	800584c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005692:	4b12      	ldr	r3, [pc, #72]	; (80056dc <xPortStartScheduler+0x13c>)
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005698:	f000 f8fc 	bl	8005894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800569c:	4b10      	ldr	r3, [pc, #64]	; (80056e0 <xPortStartScheduler+0x140>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a0f      	ldr	r2, [pc, #60]	; (80056e0 <xPortStartScheduler+0x140>)
 80056a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80056a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056a8:	f7ff ff66 	bl	8005578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056ac:	f7ff fd56 	bl	800515c <vTaskSwitchContext>
	prvTaskExitError();
 80056b0:	f7ff ff20 	bl	80054f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	e000ed00 	.word	0xe000ed00
 80056c4:	410fc271 	.word	0x410fc271
 80056c8:	410fc270 	.word	0x410fc270
 80056cc:	e000e400 	.word	0xe000e400
 80056d0:	2000064c 	.word	0x2000064c
 80056d4:	20000650 	.word	0x20000650
 80056d8:	e000ed20 	.word	0xe000ed20
 80056dc:	2000000c 	.word	0x2000000c
 80056e0:	e000ef34 	.word	0xe000ef34

080056e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	607b      	str	r3, [r7, #4]
}
 80056fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80056fe:	4b0f      	ldr	r3, [pc, #60]	; (800573c <vPortEnterCritical+0x58>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3301      	adds	r3, #1
 8005704:	4a0d      	ldr	r2, [pc, #52]	; (800573c <vPortEnterCritical+0x58>)
 8005706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005708:	4b0c      	ldr	r3, [pc, #48]	; (800573c <vPortEnterCritical+0x58>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d10f      	bne.n	8005730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005710:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <vPortEnterCritical+0x5c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <vPortEnterCritical+0x4c>
	__asm volatile
 800571a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	603b      	str	r3, [r7, #0]
}
 800572c:	bf00      	nop
 800572e:	e7fe      	b.n	800572e <vPortEnterCritical+0x4a>
	}
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	2000000c 	.word	0x2000000c
 8005740:	e000ed04 	.word	0xe000ed04

08005744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800574a:	4b12      	ldr	r3, [pc, #72]	; (8005794 <vPortExitCritical+0x50>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10a      	bne.n	8005768 <vPortExitCritical+0x24>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	607b      	str	r3, [r7, #4]
}
 8005764:	bf00      	nop
 8005766:	e7fe      	b.n	8005766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005768:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <vPortExitCritical+0x50>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3b01      	subs	r3, #1
 800576e:	4a09      	ldr	r2, [pc, #36]	; (8005794 <vPortExitCritical+0x50>)
 8005770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005772:	4b08      	ldr	r3, [pc, #32]	; (8005794 <vPortExitCritical+0x50>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d105      	bne.n	8005786 <vPortExitCritical+0x42>
 800577a:	2300      	movs	r3, #0
 800577c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	2000000c 	.word	0x2000000c
	...

080057a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057a0:	f3ef 8009 	mrs	r0, PSP
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	4b15      	ldr	r3, [pc, #84]	; (8005800 <pxCurrentTCBConst>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	f01e 0f10 	tst.w	lr, #16
 80057b0:	bf08      	it	eq
 80057b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80057b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ba:	6010      	str	r0, [r2, #0]
 80057bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80057c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80057c4:	f380 8811 	msr	BASEPRI, r0
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f7ff fcc4 	bl	800515c <vTaskSwitchContext>
 80057d4:	f04f 0000 	mov.w	r0, #0
 80057d8:	f380 8811 	msr	BASEPRI, r0
 80057dc:	bc09      	pop	{r0, r3}
 80057de:	6819      	ldr	r1, [r3, #0]
 80057e0:	6808      	ldr	r0, [r1, #0]
 80057e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e6:	f01e 0f10 	tst.w	lr, #16
 80057ea:	bf08      	it	eq
 80057ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80057f0:	f380 8809 	msr	PSP, r0
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	f3af 8000 	nop.w

08005800 <pxCurrentTCBConst>:
 8005800:	20000520 	.word	0x20000520
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop

08005808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	607b      	str	r3, [r7, #4]
}
 8005820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005822:	f7ff fbe3 	bl	8004fec <xTaskIncrementTick>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800582c:	4b06      	ldr	r3, [pc, #24]	; (8005848 <SysTick_Handler+0x40>)
 800582e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	2300      	movs	r3, #0
 8005836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	f383 8811 	msr	BASEPRI, r3
}
 800583e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005840:	bf00      	nop
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005850:	4b0b      	ldr	r3, [pc, #44]	; (8005880 <vPortSetupTimerInterrupt+0x34>)
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005856:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <vPortSetupTimerInterrupt+0x38>)
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800585c:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <vPortSetupTimerInterrupt+0x3c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a0a      	ldr	r2, [pc, #40]	; (800588c <vPortSetupTimerInterrupt+0x40>)
 8005862:	fba2 2303 	umull	r2, r3, r2, r3
 8005866:	099b      	lsrs	r3, r3, #6
 8005868:	4a09      	ldr	r2, [pc, #36]	; (8005890 <vPortSetupTimerInterrupt+0x44>)
 800586a:	3b01      	subs	r3, #1
 800586c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800586e:	4b04      	ldr	r3, [pc, #16]	; (8005880 <vPortSetupTimerInterrupt+0x34>)
 8005870:	2207      	movs	r2, #7
 8005872:	601a      	str	r2, [r3, #0]
}
 8005874:	bf00      	nop
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	e000e010 	.word	0xe000e010
 8005884:	e000e018 	.word	0xe000e018
 8005888:	20000000 	.word	0x20000000
 800588c:	10624dd3 	.word	0x10624dd3
 8005890:	e000e014 	.word	0xe000e014

08005894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80058a4 <vPortEnableVFP+0x10>
 8005898:	6801      	ldr	r1, [r0, #0]
 800589a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800589e:	6001      	str	r1, [r0, #0]
 80058a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80058a2:	bf00      	nop
 80058a4:	e000ed88 	.word	0xe000ed88

080058a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08a      	sub	sp, #40	; 0x28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80058b0:	2300      	movs	r3, #0
 80058b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80058b4:	f7ff faf0 	bl	8004e98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80058b8:	4b5b      	ldr	r3, [pc, #364]	; (8005a28 <pvPortMalloc+0x180>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80058c0:	f000 f920 	bl	8005b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80058c4:	4b59      	ldr	r3, [pc, #356]	; (8005a2c <pvPortMalloc+0x184>)
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4013      	ands	r3, r2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f040 8093 	bne.w	80059f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01d      	beq.n	8005914 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80058d8:	2208      	movs	r2, #8
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4413      	add	r3, r2
 80058de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d014      	beq.n	8005914 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f023 0307 	bic.w	r3, r3, #7
 80058f0:	3308      	adds	r3, #8
 80058f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <pvPortMalloc+0x6c>
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	617b      	str	r3, [r7, #20]
}
 8005910:	bf00      	nop
 8005912:	e7fe      	b.n	8005912 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d06e      	beq.n	80059f8 <pvPortMalloc+0x150>
 800591a:	4b45      	ldr	r3, [pc, #276]	; (8005a30 <pvPortMalloc+0x188>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	429a      	cmp	r2, r3
 8005922:	d869      	bhi.n	80059f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005924:	4b43      	ldr	r3, [pc, #268]	; (8005a34 <pvPortMalloc+0x18c>)
 8005926:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005928:	4b42      	ldr	r3, [pc, #264]	; (8005a34 <pvPortMalloc+0x18c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800592e:	e004      	b.n	800593a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	429a      	cmp	r2, r3
 8005942:	d903      	bls.n	800594c <pvPortMalloc+0xa4>
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1f1      	bne.n	8005930 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800594c:	4b36      	ldr	r3, [pc, #216]	; (8005a28 <pvPortMalloc+0x180>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005952:	429a      	cmp	r2, r3
 8005954:	d050      	beq.n	80059f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2208      	movs	r2, #8
 800595c:	4413      	add	r3, r2
 800595e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	1ad2      	subs	r2, r2, r3
 8005970:	2308      	movs	r3, #8
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	429a      	cmp	r2, r3
 8005976:	d91f      	bls.n	80059b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4413      	add	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <pvPortMalloc+0xf8>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	613b      	str	r3, [r7, #16]
}
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	1ad2      	subs	r2, r2, r3
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80059b2:	69b8      	ldr	r0, [r7, #24]
 80059b4:	f000 f908 	bl	8005bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059b8:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <pvPortMalloc+0x188>)
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	4a1b      	ldr	r2, [pc, #108]	; (8005a30 <pvPortMalloc+0x188>)
 80059c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059c6:	4b1a      	ldr	r3, [pc, #104]	; (8005a30 <pvPortMalloc+0x188>)
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	4b1b      	ldr	r3, [pc, #108]	; (8005a38 <pvPortMalloc+0x190>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d203      	bcs.n	80059da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80059d2:	4b17      	ldr	r3, [pc, #92]	; (8005a30 <pvPortMalloc+0x188>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a18      	ldr	r2, [pc, #96]	; (8005a38 <pvPortMalloc+0x190>)
 80059d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	4b13      	ldr	r3, [pc, #76]	; (8005a2c <pvPortMalloc+0x184>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80059ee:	4b13      	ldr	r3, [pc, #76]	; (8005a3c <pvPortMalloc+0x194>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3301      	adds	r3, #1
 80059f4:	4a11      	ldr	r2, [pc, #68]	; (8005a3c <pvPortMalloc+0x194>)
 80059f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80059f8:	f7ff fa5c 	bl	8004eb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <pvPortMalloc+0x174>
	__asm volatile
 8005a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	60fb      	str	r3, [r7, #12]
}
 8005a18:	bf00      	nop
 8005a1a:	e7fe      	b.n	8005a1a <pvPortMalloc+0x172>
	return pvReturn;
 8005a1c:	69fb      	ldr	r3, [r7, #28]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3728      	adds	r7, #40	; 0x28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	2000425c 	.word	0x2000425c
 8005a2c:	20004270 	.word	0x20004270
 8005a30:	20004260 	.word	0x20004260
 8005a34:	20004254 	.word	0x20004254
 8005a38:	20004264 	.word	0x20004264
 8005a3c:	20004268 	.word	0x20004268

08005a40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d04d      	beq.n	8005aee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a52:	2308      	movs	r3, #8
 8005a54:	425b      	negs	r3, r3
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	4413      	add	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	4b24      	ldr	r3, [pc, #144]	; (8005af8 <vPortFree+0xb8>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10a      	bne.n	8005a84 <vPortFree+0x44>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	60fb      	str	r3, [r7, #12]
}
 8005a80:	bf00      	nop
 8005a82:	e7fe      	b.n	8005a82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <vPortFree+0x62>
	__asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	60bb      	str	r3, [r7, #8]
}
 8005a9e:	bf00      	nop
 8005aa0:	e7fe      	b.n	8005aa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	4b14      	ldr	r3, [pc, #80]	; (8005af8 <vPortFree+0xb8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01e      	beq.n	8005aee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d11a      	bne.n	8005aee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	4b0e      	ldr	r3, [pc, #56]	; (8005af8 <vPortFree+0xb8>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	401a      	ands	r2, r3
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ac8:	f7ff f9e6 	bl	8004e98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <vPortFree+0xbc>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	4a09      	ldr	r2, [pc, #36]	; (8005afc <vPortFree+0xbc>)
 8005ad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ada:	6938      	ldr	r0, [r7, #16]
 8005adc:	f000 f874 	bl	8005bc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ae0:	4b07      	ldr	r3, [pc, #28]	; (8005b00 <vPortFree+0xc0>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	4a06      	ldr	r2, [pc, #24]	; (8005b00 <vPortFree+0xc0>)
 8005ae8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005aea:	f7ff f9e3 	bl	8004eb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005aee:	bf00      	nop
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20004270 	.word	0x20004270
 8005afc:	20004260 	.word	0x20004260
 8005b00:	2000426c 	.word	0x2000426c

08005b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b10:	4b27      	ldr	r3, [pc, #156]	; (8005bb0 <prvHeapInit+0xac>)
 8005b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00c      	beq.n	8005b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3307      	adds	r3, #7
 8005b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0307 	bic.w	r3, r3, #7
 8005b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	4a1f      	ldr	r2, [pc, #124]	; (8005bb0 <prvHeapInit+0xac>)
 8005b34:	4413      	add	r3, r2
 8005b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b3c:	4a1d      	ldr	r2, [pc, #116]	; (8005bb4 <prvHeapInit+0xb0>)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b42:	4b1c      	ldr	r3, [pc, #112]	; (8005bb4 <prvHeapInit+0xb0>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b50:	2208      	movs	r2, #8
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	1a9b      	subs	r3, r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 0307 	bic.w	r3, r3, #7
 8005b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4a15      	ldr	r2, [pc, #84]	; (8005bb8 <prvHeapInit+0xb4>)
 8005b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b66:	4b14      	ldr	r3, [pc, #80]	; (8005bb8 <prvHeapInit+0xb4>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b6e:	4b12      	ldr	r3, [pc, #72]	; (8005bb8 <prvHeapInit+0xb4>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	1ad2      	subs	r2, r2, r3
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b84:	4b0c      	ldr	r3, [pc, #48]	; (8005bb8 <prvHeapInit+0xb4>)
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	4a0a      	ldr	r2, [pc, #40]	; (8005bbc <prvHeapInit+0xb8>)
 8005b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	4a09      	ldr	r2, [pc, #36]	; (8005bc0 <prvHeapInit+0xbc>)
 8005b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b9c:	4b09      	ldr	r3, [pc, #36]	; (8005bc4 <prvHeapInit+0xc0>)
 8005b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ba2:	601a      	str	r2, [r3, #0]
}
 8005ba4:	bf00      	nop
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	20000654 	.word	0x20000654
 8005bb4:	20004254 	.word	0x20004254
 8005bb8:	2000425c 	.word	0x2000425c
 8005bbc:	20004264 	.word	0x20004264
 8005bc0:	20004260 	.word	0x20004260
 8005bc4:	20004270 	.word	0x20004270

08005bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005bd0:	4b28      	ldr	r3, [pc, #160]	; (8005c74 <prvInsertBlockIntoFreeList+0xac>)
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	e002      	b.n	8005bdc <prvInsertBlockIntoFreeList+0x14>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d8f7      	bhi.n	8005bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d108      	bne.n	8005c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	441a      	add	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	441a      	add	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d118      	bne.n	8005c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	4b15      	ldr	r3, [pc, #84]	; (8005c78 <prvInsertBlockIntoFreeList+0xb0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d00d      	beq.n	8005c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	441a      	add	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	e008      	b.n	8005c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c46:	4b0c      	ldr	r3, [pc, #48]	; (8005c78 <prvInsertBlockIntoFreeList+0xb0>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	e003      	b.n	8005c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d002      	beq.n	8005c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	20004254 	.word	0x20004254
 8005c78:	2000425c 	.word	0x2000425c

08005c7c <memset>:
 8005c7c:	4402      	add	r2, r0
 8005c7e:	4603      	mov	r3, r0
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d100      	bne.n	8005c86 <memset+0xa>
 8005c84:	4770      	bx	lr
 8005c86:	f803 1b01 	strb.w	r1, [r3], #1
 8005c8a:	e7f9      	b.n	8005c80 <memset+0x4>

08005c8c <__libc_init_array>:
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	4d0d      	ldr	r5, [pc, #52]	; (8005cc4 <__libc_init_array+0x38>)
 8005c90:	4c0d      	ldr	r4, [pc, #52]	; (8005cc8 <__libc_init_array+0x3c>)
 8005c92:	1b64      	subs	r4, r4, r5
 8005c94:	10a4      	asrs	r4, r4, #2
 8005c96:	2600      	movs	r6, #0
 8005c98:	42a6      	cmp	r6, r4
 8005c9a:	d109      	bne.n	8005cb0 <__libc_init_array+0x24>
 8005c9c:	4d0b      	ldr	r5, [pc, #44]	; (8005ccc <__libc_init_array+0x40>)
 8005c9e:	4c0c      	ldr	r4, [pc, #48]	; (8005cd0 <__libc_init_array+0x44>)
 8005ca0:	f000 f818 	bl	8005cd4 <_init>
 8005ca4:	1b64      	subs	r4, r4, r5
 8005ca6:	10a4      	asrs	r4, r4, #2
 8005ca8:	2600      	movs	r6, #0
 8005caa:	42a6      	cmp	r6, r4
 8005cac:	d105      	bne.n	8005cba <__libc_init_array+0x2e>
 8005cae:	bd70      	pop	{r4, r5, r6, pc}
 8005cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb4:	4798      	blx	r3
 8005cb6:	3601      	adds	r6, #1
 8005cb8:	e7ee      	b.n	8005c98 <__libc_init_array+0xc>
 8005cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cbe:	4798      	blx	r3
 8005cc0:	3601      	adds	r6, #1
 8005cc2:	e7f2      	b.n	8005caa <__libc_init_array+0x1e>
 8005cc4:	08005db8 	.word	0x08005db8
 8005cc8:	08005db8 	.word	0x08005db8
 8005ccc:	08005db8 	.word	0x08005db8
 8005cd0:	08005dbc 	.word	0x08005dbc

08005cd4 <_init>:
 8005cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd6:	bf00      	nop
 8005cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cda:	bc08      	pop	{r3}
 8005cdc:	469e      	mov	lr, r3
 8005cde:	4770      	bx	lr

08005ce0 <_fini>:
 8005ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce2:	bf00      	nop
 8005ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce6:	bc08      	pop	{r3}
 8005ce8:	469e      	mov	lr, r3
 8005cea:	4770      	bx	lr
