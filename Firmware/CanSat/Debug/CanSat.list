
CanSat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076fc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800789c  0800789c  0000889c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007964  08007964  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007964  08007964  00008964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800796c  0800796c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800796c  0800796c  0000896c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007970  08007970  00008970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007974  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004440  20000060  080079d4  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044a0  080079d4  000094a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012716  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003454  00000000  00000000  0001b7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  0001ec00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e59  00000000  00000000  0001fec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018db0  00000000  00000000  00020d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016307  00000000  00000000  00039ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096df7  00000000  00000000  0004fdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6bc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005044  00000000  00000000  000e6c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ebc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007884 	.word	0x08007884

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007884 	.word	0x08007884

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_ldivmod>:
 8000b08:	b97b      	cbnz	r3, 8000b2a <__aeabi_ldivmod+0x22>
 8000b0a:	b972      	cbnz	r2, 8000b2a <__aeabi_ldivmod+0x22>
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	bfbe      	ittt	lt
 8000b10:	2000      	movlt	r0, #0
 8000b12:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b16:	e006      	blt.n	8000b26 <__aeabi_ldivmod+0x1e>
 8000b18:	bf08      	it	eq
 8000b1a:	2800      	cmpeq	r0, #0
 8000b1c:	bf1c      	itt	ne
 8000b1e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b22:	f04f 30ff 	movne.w	r0, #4294967295
 8000b26:	f000 b9b5 	b.w	8000e94 <__aeabi_idiv0>
 8000b2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b32:	2900      	cmp	r1, #0
 8000b34:	db09      	blt.n	8000b4a <__aeabi_ldivmod+0x42>
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db1a      	blt.n	8000b70 <__aeabi_ldivmod+0x68>
 8000b3a:	f000 f84d 	bl	8000bd8 <__udivmoddi4>
 8000b3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b46:	b004      	add	sp, #16
 8000b48:	4770      	bx	lr
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db1b      	blt.n	8000b8c <__aeabi_ldivmod+0x84>
 8000b54:	f000 f840 	bl	8000bd8 <__udivmoddi4>
 8000b58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b60:	b004      	add	sp, #16
 8000b62:	4240      	negs	r0, r0
 8000b64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b68:	4252      	negs	r2, r2
 8000b6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b6e:	4770      	bx	lr
 8000b70:	4252      	negs	r2, r2
 8000b72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b76:	f000 f82f 	bl	8000bd8 <__udivmoddi4>
 8000b7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b82:	b004      	add	sp, #16
 8000b84:	4240      	negs	r0, r0
 8000b86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8a:	4770      	bx	lr
 8000b8c:	4252      	negs	r2, r2
 8000b8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b92:	f000 f821 	bl	8000bd8 <__udivmoddi4>
 8000b96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b9e:	b004      	add	sp, #16
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <task_init_1ms>:

/**
  * @fn  	task_init_1ms
  * @brief  Inicializaciones para tarea de 1 milisegundo
  */
void task_init_1ms(void){
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <task_1ms>:

/**
  * @fn  	task_1ms
  * @brief  Ejecucion de tareas de 1 milisegundo
  */
void task_1ms(void){
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	af00      	add	r7, sp, #0
	NRF24_StateMachine();
 8000eaa:	f001 fb19 	bl	80024e0 <NRF24_StateMachine>

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <task_init_10ms>:

/**
  * @fn  	task_init_10ms
  * @brief  Inicializaciones para tarea de 10 milisegundos
  */
void task_init_10ms(void){
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <task_10ms>:

/**
  * @fn  	task_10ms
  * @brief  Ejecucion de tareas de 10 milisegundos
  */
void task_10ms(void){
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <task_init_100ms>:

/**
  * @fn  	task_init_100ms
  * @brief  Inicializaciones para tarea de 100 milisegundos
  */
void task_init_100ms(void){
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <task_100ms>:

/**
  * @fn  	task_100ms
  * @brief  Ejecucion de tareas de 100 milisegundos
  */
void task_100ms(void){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	BMP280_calculate();
 8000ee0:	f000 fd1a 	bl	8001918 <BMP280_calculate>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <task_init_1000ms>:

/**
  * @fn  	task_init_1000ms
  * @brief  Inicializaciones para tarea de 1000 milisegundos
  */
void task_init_1000ms(void){
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <task_1000ms>:

/**
  * @fn  	task_1000ms
  * @brief  Ejecucion de tareas de 1000 milisegundos
  */
void task_1000ms(void){
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <BMP280_write>:

int32_t T_raw, P_raw, t_fine,Temperature, Altitud;
uint32_t Presure;


void BMP280_write(uint8_t Address, uint8_t Data){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	71fb      	strb	r3, [r7, #7]
 8000f10:	4613      	mov	r3, r2
 8000f12:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f1a:	480f      	ldr	r0, [pc, #60]	@ (8000f58 <BMP280_write+0x54>)
 8000f1c:	f002 fe14 	bl	8003b48 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000f2a:	1df9      	adds	r1, r7, #7
 8000f2c:	2364      	movs	r3, #100	@ 0x64
 8000f2e:	2201      	movs	r2, #1
 8000f30:	480a      	ldr	r0, [pc, #40]	@ (8000f5c <BMP280_write+0x58>)
 8000f32:	f003 fb62 	bl	80045fa <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8000f36:	1db9      	adds	r1, r7, #6
 8000f38:	2364      	movs	r3, #100	@ 0x64
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4807      	ldr	r0, [pc, #28]	@ (8000f5c <BMP280_write+0x58>)
 8000f3e:	f003 fb5c 	bl	80045fa <HAL_SPI_Transmit>

	BMP280_unselect();
 8000f42:	2201      	movs	r2, #1
 8000f44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f48:	4803      	ldr	r0, [pc, #12]	@ (8000f58 <BMP280_write+0x54>)
 8000f4a:	f002 fdfd 	bl	8003b48 <HAL_GPIO_WritePin>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	20000450 	.word	0x20000450

08000f60 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f7a:	480e      	ldr	r0, [pc, #56]	@ (8000fb4 <BMP280_read+0x54>)
 8000f7c:	f002 fde4 	bl	8003b48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8000f80:	f107 010f 	add.w	r1, r7, #15
 8000f84:	2364      	movs	r3, #100	@ 0x64
 8000f86:	2201      	movs	r2, #1
 8000f88:	480b      	ldr	r0, [pc, #44]	@ (8000fb8 <BMP280_read+0x58>)
 8000f8a:	f003 fb36 	bl	80045fa <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8000f8e:	f107 010f 	add.w	r1, r7, #15
 8000f92:	2364      	movs	r3, #100	@ 0x64
 8000f94:	2201      	movs	r2, #1
 8000f96:	4808      	ldr	r0, [pc, #32]	@ (8000fb8 <BMP280_read+0x58>)
 8000f98:	f003 fc72 	bl	8004880 <HAL_SPI_Receive>
	BMP280_unselect();
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fa2:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <BMP280_read+0x54>)
 8000fa4:	f002 fdd0 	bl	8003b48 <HAL_GPIO_WritePin>

	return Buffer;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	20000450 	.word	0x20000450

08000fbc <BMP280_config>:

void BMP280_config(void){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8000fc0:	2157      	movs	r1, #87	@ 0x57
 8000fc2:	20f4      	movs	r0, #244	@ 0xf4
 8000fc4:	f7ff ff9e 	bl	8000f04 <BMP280_write>
	BMP280_write(config, 0x10);
 8000fc8:	2110      	movs	r1, #16
 8000fca:	20f5      	movs	r0, #245	@ 0xf5
 8000fcc:	f7ff ff9a 	bl	8000f04 <BMP280_write>
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <BMP280_calibrationData>:
	uint8_t Buffer   = BMP280_read(status);
	BMP280_im_update = (Buffer&0x01);
	BMP280_measuring = (Buffer&0x08)>>3;
}

void BMP280_calibrationData(void){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000fda:	2388      	movs	r3, #136	@ 0x88
 8000fdc:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]
	BMP280_select();
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ff8:	4843      	ldr	r0, [pc, #268]	@ (8001108 <BMP280_calibrationData+0x134>)
 8000ffa:	f002 fda5 	bl	8003b48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000ffe:	f107 011f 	add.w	r1, r7, #31
 8001002:	2364      	movs	r3, #100	@ 0x64
 8001004:	2201      	movs	r2, #1
 8001006:	4841      	ldr	r0, [pc, #260]	@ (800110c <BMP280_calibrationData+0x138>)
 8001008:	f003 faf7 	bl	80045fa <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 800100c:	1d39      	adds	r1, r7, #4
 800100e:	2364      	movs	r3, #100	@ 0x64
 8001010:	2218      	movs	r2, #24
 8001012:	483e      	ldr	r0, [pc, #248]	@ (800110c <BMP280_calibrationData+0x138>)
 8001014:	f003 fc34 	bl	8004880 <HAL_SPI_Receive>
	BMP280_unselect();
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800101e:	483a      	ldr	r0, [pc, #232]	@ (8001108 <BMP280_calibrationData+0x134>)
 8001020:	f002 fd92 	bl	8003b48 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8001024:	797b      	ldrb	r3, [r7, #5]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	793b      	ldrb	r3, [r7, #4]
 800102c:	b21b      	sxth	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b21b      	sxth	r3, r3
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b36      	ldr	r3, [pc, #216]	@ (8001110 <BMP280_calibrationData+0x13c>)
 8001036:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21a      	sxth	r2, r3
 8001046:	4b33      	ldr	r3, [pc, #204]	@ (8001114 <BMP280_calibrationData+0x140>)
 8001048:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 800104a:	7a7b      	ldrb	r3, [r7, #9]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b21a      	sxth	r2, r3
 8001050:	7a3b      	ldrb	r3, [r7, #8]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21a      	sxth	r2, r3
 8001058:	4b2f      	ldr	r3, [pc, #188]	@ (8001118 <BMP280_calibrationData+0x144>)
 800105a:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 800105c:	7afb      	ldrb	r3, [r7, #11]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	7abb      	ldrb	r3, [r7, #10]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21b      	sxth	r3, r3
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <BMP280_calibrationData+0x148>)
 800106e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8001070:	7b7b      	ldrb	r3, [r7, #13]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	7b3b      	ldrb	r3, [r7, #12]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21a      	sxth	r2, r3
 800107e:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <BMP280_calibrationData+0x14c>)
 8001080:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	b21b      	sxth	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	b21a      	sxth	r2, r3
 8001090:	4b24      	ldr	r3, [pc, #144]	@ (8001124 <BMP280_calibrationData+0x150>)
 8001092:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8001094:	7c7b      	ldrb	r3, [r7, #17]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b21a      	sxth	r2, r3
 800109a:	7c3b      	ldrb	r3, [r7, #16]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <BMP280_calibrationData+0x154>)
 80010a4:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 80010a6:	7cfb      	ldrb	r3, [r7, #19]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	7cbb      	ldrb	r3, [r7, #18]
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <BMP280_calibrationData+0x158>)
 80010b6:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 80010b8:	7d7b      	ldrb	r3, [r7, #21]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	7d3b      	ldrb	r3, [r7, #20]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <BMP280_calibrationData+0x15c>)
 80010c8:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	7dbb      	ldrb	r3, [r7, #22]
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <BMP280_calibrationData+0x160>)
 80010da:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 80010dc:	7e7b      	ldrb	r3, [r7, #25]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	7e3b      	ldrb	r3, [r7, #24]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <BMP280_calibrationData+0x164>)
 80010ec:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 80010ee:	7efb      	ldrb	r3, [r7, #27]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	7ebb      	ldrb	r3, [r7, #26]
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <BMP280_calibrationData+0x168>)
 80010fe:	801a      	strh	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40020000 	.word	0x40020000
 800110c:	20000450 	.word	0x20000450
 8001110:	2000007e 	.word	0x2000007e
 8001114:	20000082 	.word	0x20000082
 8001118:	20000084 	.word	0x20000084
 800111c:	20000080 	.word	0x20000080
 8001120:	20000086 	.word	0x20000086
 8001124:	20000088 	.word	0x20000088
 8001128:	2000008a 	.word	0x2000008a
 800112c:	2000008c 	.word	0x2000008c
 8001130:	2000008e 	.word	0x2000008e
 8001134:	20000090 	.word	0x20000090
 8001138:	20000092 	.word	0x20000092
 800113c:	20000094 	.word	0x20000094

08001140 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8001146:	23f7      	movs	r3, #247	@ 0xf7
 8001148:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 800114a:	2300      	movs	r3, #0
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	2300      	movs	r3, #0
 8001150:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001158:	4817      	ldr	r0, [pc, #92]	@ (80011b8 <BMP280_readRawValues+0x78>)
 800115a:	f002 fcf5 	bl	8003b48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800115e:	1df9      	adds	r1, r7, #7
 8001160:	2364      	movs	r3, #100	@ 0x64
 8001162:	2201      	movs	r2, #1
 8001164:	4815      	ldr	r0, [pc, #84]	@ (80011bc <BMP280_readRawValues+0x7c>)
 8001166:	f003 fa48 	bl	80045fa <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 800116a:	4639      	mov	r1, r7
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	2206      	movs	r2, #6
 8001170:	4812      	ldr	r0, [pc, #72]	@ (80011bc <BMP280_readRawValues+0x7c>)
 8001172:	f003 fb85 	bl	8004880 <HAL_SPI_Receive>
	BMP280_unselect();
 8001176:	2201      	movs	r2, #1
 8001178:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800117c:	480e      	ldr	r0, [pc, #56]	@ (80011b8 <BMP280_readRawValues+0x78>)
 800117e:	f002 fce3 	bl	8003b48 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8001182:	783b      	ldrb	r3, [r7, #0]
 8001184:	031a      	lsls	r2, r3, #12
 8001186:	787b      	ldrb	r3, [r7, #1]
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	4313      	orrs	r3, r2
 800118c:	78ba      	ldrb	r2, [r7, #2]
 800118e:	0912      	lsrs	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	4313      	orrs	r3, r2
 8001194:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <BMP280_readRawValues+0x80>)
 8001196:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	031a      	lsls	r2, r3, #12
 800119c:	793b      	ldrb	r3, [r7, #4]
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	4313      	orrs	r3, r2
 80011a2:	797a      	ldrb	r2, [r7, #5]
 80011a4:	0912      	lsrs	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	4313      	orrs	r3, r2
 80011aa:	4a06      	ldr	r2, [pc, #24]	@ (80011c4 <BMP280_readRawValues+0x84>)
 80011ac:	6013      	str	r3, [r2, #0]
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40020000 	.word	0x40020000
 80011bc:	20000450 	.word	0x20000450
 80011c0:	2000009c 	.word	0x2000009c
 80011c4:	20000098 	.word	0x20000098

080011c8 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <BMP280_measureT+0x74>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	10da      	asrs	r2, r3, #3
 80011d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <BMP280_measureT+0x78>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	4a19      	ldr	r2, [pc, #100]	@ (8001244 <BMP280_measureT+0x7c>)
 80011e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011e4:	fb02 f303 	mul.w	r3, r2, r3
 80011e8:	12db      	asrs	r3, r3, #11
 80011ea:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	111b      	asrs	r3, r3, #4
 80011f0:	4a13      	ldr	r2, [pc, #76]	@ (8001240 <BMP280_measureT+0x78>)
 80011f2:	8812      	ldrh	r2, [r2, #0]
 80011f4:	1a9b      	subs	r3, r3, r2
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	1112      	asrs	r2, r2, #4
 80011fa:	4911      	ldr	r1, [pc, #68]	@ (8001240 <BMP280_measureT+0x78>)
 80011fc:	8809      	ldrh	r1, [r1, #0]
 80011fe:	1a52      	subs	r2, r2, r1
 8001200:	fb02 f303 	mul.w	r3, r2, r3
 8001204:	131b      	asrs	r3, r3, #12
 8001206:	4a10      	ldr	r2, [pc, #64]	@ (8001248 <BMP280_measureT+0x80>)
 8001208:	f9b2 2000 	ldrsh.w	r2, [r2]
 800120c:	fb02 f303 	mul.w	r3, r2, r3
 8001210:	139b      	asrs	r3, r3, #14
 8001212:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4413      	add	r3, r2
 800121a:	4a0c      	ldr	r2, [pc, #48]	@ (800124c <BMP280_measureT+0x84>)
 800121c:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800121e:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <BMP280_measureT+0x84>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	3380      	adds	r3, #128	@ 0x80
 800122a:	121b      	asrs	r3, r3, #8
 800122c:	60fb      	str	r3, [r7, #12]
	return T;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	371c      	adds	r7, #28
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	20000098 	.word	0x20000098
 8001240:	2000007e 	.word	0x2000007e
 8001244:	20000082 	.word	0x20000082
 8001248:	20000084 	.word	0x20000084
 800124c:	200000a0 	.word	0x200000a0

08001250 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8001250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001254:	b0ca      	sub	sp, #296	@ 0x128
 8001256:	af00      	add	r7, sp, #0
 8001258:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 800125c:	4baf      	ldr	r3, [pc, #700]	@ (800151c <BMP280_measureP+0x2cc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	17da      	asrs	r2, r3, #31
 8001262:	461c      	mov	r4, r3
 8001264:	4615      	mov	r5, r2
 8001266:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800126a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800126e:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001272:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001276:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800127a:	fb03 f102 	mul.w	r1, r3, r2
 800127e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001282:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001286:	fb02 f303 	mul.w	r3, r2, r3
 800128a:	18ca      	adds	r2, r1, r3
 800128c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001290:	fba3 8903 	umull	r8, r9, r3, r3
 8001294:	eb02 0309 	add.w	r3, r2, r9
 8001298:	4699      	mov	r9, r3
 800129a:	4ba1      	ldr	r3, [pc, #644]	@ (8001520 <BMP280_measureP+0x2d0>)
 800129c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	17da      	asrs	r2, r3, #31
 80012a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80012a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80012ac:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80012b0:	4603      	mov	r3, r0
 80012b2:	fb03 f209 	mul.w	r2, r3, r9
 80012b6:	460b      	mov	r3, r1
 80012b8:	fb08 f303 	mul.w	r3, r8, r3
 80012bc:	4413      	add	r3, r2
 80012be:	4602      	mov	r2, r0
 80012c0:	fba8 1202 	umull	r1, r2, r8, r2
 80012c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80012c8:	460a      	mov	r2, r1
 80012ca:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80012ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80012d2:	4413      	add	r3, r2
 80012d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80012d8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80012dc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80012e0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80012e4:	4b8f      	ldr	r3, [pc, #572]	@ (8001524 <BMP280_measureP+0x2d4>)
 80012e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	17da      	asrs	r2, r3, #31
 80012ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80012f2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80012f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012fa:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80012fe:	462a      	mov	r2, r5
 8001300:	fb02 f203 	mul.w	r2, r2, r3
 8001304:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001308:	4621      	mov	r1, r4
 800130a:	fb01 f303 	mul.w	r3, r1, r3
 800130e:	441a      	add	r2, r3
 8001310:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001314:	4621      	mov	r1, r4
 8001316:	fba3 1301 	umull	r1, r3, r3, r1
 800131a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800131e:	460b      	mov	r3, r1
 8001320:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001328:	18d3      	adds	r3, r2, r3
 800132a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800132e:	f04f 0000 	mov.w	r0, #0
 8001332:	f04f 0100 	mov.w	r1, #0
 8001336:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800133a:	462b      	mov	r3, r5
 800133c:	0459      	lsls	r1, r3, #17
 800133e:	4623      	mov	r3, r4
 8001340:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001344:	4623      	mov	r3, r4
 8001346:	0458      	lsls	r0, r3, #17
 8001348:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800134c:	1814      	adds	r4, r2, r0
 800134e:	643c      	str	r4, [r7, #64]	@ 0x40
 8001350:	414b      	adcs	r3, r1
 8001352:	647b      	str	r3, [r7, #68]	@ 0x44
 8001354:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001358:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 800135c:	4b72      	ldr	r3, [pc, #456]	@ (8001528 <BMP280_measureP+0x2d8>)
 800135e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001362:	b21b      	sxth	r3, r3
 8001364:	17da      	asrs	r2, r3, #31
 8001366:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800136a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800136e:	f04f 0000 	mov.w	r0, #0
 8001372:	f04f 0100 	mov.w	r1, #0
 8001376:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800137a:	00d9      	lsls	r1, r3, #3
 800137c:	2000      	movs	r0, #0
 800137e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001382:	1814      	adds	r4, r2, r0
 8001384:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001386:	414b      	adcs	r3, r1
 8001388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800138a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800138e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001392:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001396:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800139a:	fb03 f102 	mul.w	r1, r3, r2
 800139e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80013a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013a6:	fb02 f303 	mul.w	r3, r2, r3
 80013aa:	18ca      	adds	r2, r1, r3
 80013ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013b0:	fba3 1303 	umull	r1, r3, r3, r3
 80013b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80013b8:	460b      	mov	r3, r1
 80013ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80013be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80013c2:	18d3      	adds	r3, r2, r3
 80013c4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80013c8:	4b58      	ldr	r3, [pc, #352]	@ (800152c <BMP280_measureP+0x2dc>)
 80013ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	17da      	asrs	r2, r3, #31
 80013d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80013d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80013da:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80013de:	462b      	mov	r3, r5
 80013e0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80013e4:	4642      	mov	r2, r8
 80013e6:	fb02 f203 	mul.w	r2, r2, r3
 80013ea:	464b      	mov	r3, r9
 80013ec:	4621      	mov	r1, r4
 80013ee:	fb01 f303 	mul.w	r3, r1, r3
 80013f2:	4413      	add	r3, r2
 80013f4:	4622      	mov	r2, r4
 80013f6:	4641      	mov	r1, r8
 80013f8:	fba2 1201 	umull	r1, r2, r2, r1
 80013fc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001400:	460a      	mov	r2, r1
 8001402:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001406:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800140a:	4413      	add	r3, r2
 800140c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001410:	f04f 0000 	mov.w	r0, #0
 8001414:	f04f 0100 	mov.w	r1, #0
 8001418:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800141c:	4623      	mov	r3, r4
 800141e:	0a18      	lsrs	r0, r3, #8
 8001420:	462b      	mov	r3, r5
 8001422:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001426:	462b      	mov	r3, r5
 8001428:	1219      	asrs	r1, r3, #8
 800142a:	4b41      	ldr	r3, [pc, #260]	@ (8001530 <BMP280_measureP+0x2e0>)
 800142c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001430:	b21b      	sxth	r3, r3
 8001432:	17da      	asrs	r2, r3, #31
 8001434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001438:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800143c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001440:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001444:	464a      	mov	r2, r9
 8001446:	fb02 f203 	mul.w	r2, r2, r3
 800144a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800144e:	4644      	mov	r4, r8
 8001450:	fb04 f303 	mul.w	r3, r4, r3
 8001454:	441a      	add	r2, r3
 8001456:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800145a:	4644      	mov	r4, r8
 800145c:	fba3 4304 	umull	r4, r3, r3, r4
 8001460:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001464:	4623      	mov	r3, r4
 8001466:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800146a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800146e:	18d3      	adds	r3, r2, r3
 8001470:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001480:	464c      	mov	r4, r9
 8001482:	0323      	lsls	r3, r4, #12
 8001484:	4644      	mov	r4, r8
 8001486:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800148a:	4644      	mov	r4, r8
 800148c:	0322      	lsls	r2, r4, #12
 800148e:	1884      	adds	r4, r0, r2
 8001490:	633c      	str	r4, [r7, #48]	@ 0x30
 8001492:	eb41 0303 	adc.w	r3, r1, r3
 8001496:	637b      	str	r3, [r7, #52]	@ 0x34
 8001498:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800149c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80014a0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80014a4:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80014a8:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80014ac:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80014b0:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <BMP280_measureP+0x2e4>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	2200      	movs	r2, #0
 80014b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014c0:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014c4:	462b      	mov	r3, r5
 80014c6:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80014ca:	4642      	mov	r2, r8
 80014cc:	fb02 f203 	mul.w	r2, r2, r3
 80014d0:	464b      	mov	r3, r9
 80014d2:	4621      	mov	r1, r4
 80014d4:	fb01 f303 	mul.w	r3, r1, r3
 80014d8:	4413      	add	r3, r2
 80014da:	4622      	mov	r2, r4
 80014dc:	4641      	mov	r1, r8
 80014de:	fba2 1201 	umull	r1, r2, r2, r1
 80014e2:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80014e6:	460a      	mov	r2, r1
 80014e8:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80014ec:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80014f0:	4413      	add	r3, r2
 80014f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001502:	4629      	mov	r1, r5
 8001504:	104a      	asrs	r2, r1, #1
 8001506:	4629      	mov	r1, r5
 8001508:	17cb      	asrs	r3, r1, #31
 800150a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 800150e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001512:	4313      	orrs	r3, r2
 8001514:	d110      	bne.n	8001538 <BMP280_measureP+0x2e8>
	{
	return 0;
 8001516:	2300      	movs	r3, #0
 8001518:	e154      	b.n	80017c4 <BMP280_measureP+0x574>
 800151a:	bf00      	nop
 800151c:	200000a0 	.word	0x200000a0
 8001520:	2000008e 	.word	0x2000008e
 8001524:	2000008c 	.word	0x2000008c
 8001528:	2000008a 	.word	0x2000008a
 800152c:	20000088 	.word	0x20000088
 8001530:	20000086 	.word	0x20000086
 8001534:	20000080 	.word	0x20000080
	}
	p = 1048576-adc_P;
 8001538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800153c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001540:	17da      	asrs	r2, r3, #31
 8001542:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001544:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001546:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800154a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800154e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001552:	105b      	asrs	r3, r3, #1
 8001554:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001558:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800155c:	07db      	lsls	r3, r3, #31
 800155e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001562:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001566:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800156a:	4621      	mov	r1, r4
 800156c:	1a89      	subs	r1, r1, r2
 800156e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001570:	4629      	mov	r1, r5
 8001572:	eb61 0303 	sbc.w	r3, r1, r3
 8001576:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001578:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800157c:	4622      	mov	r2, r4
 800157e:	462b      	mov	r3, r5
 8001580:	1891      	adds	r1, r2, r2
 8001582:	6239      	str	r1, [r7, #32]
 8001584:	415b      	adcs	r3, r3
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
 8001588:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800158c:	4621      	mov	r1, r4
 800158e:	1851      	adds	r1, r2, r1
 8001590:	61b9      	str	r1, [r7, #24]
 8001592:	4629      	mov	r1, r5
 8001594:	414b      	adcs	r3, r1
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015a4:	4649      	mov	r1, r9
 80015a6:	018b      	lsls	r3, r1, #6
 80015a8:	4641      	mov	r1, r8
 80015aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015ae:	4641      	mov	r1, r8
 80015b0:	018a      	lsls	r2, r1, #6
 80015b2:	4641      	mov	r1, r8
 80015b4:	1889      	adds	r1, r1, r2
 80015b6:	6139      	str	r1, [r7, #16]
 80015b8:	4649      	mov	r1, r9
 80015ba:	eb43 0101 	adc.w	r1, r3, r1
 80015be:	6179      	str	r1, [r7, #20]
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015cc:	4649      	mov	r1, r9
 80015ce:	008b      	lsls	r3, r1, #2
 80015d0:	4641      	mov	r1, r8
 80015d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015d6:	4641      	mov	r1, r8
 80015d8:	008a      	lsls	r2, r1, #2
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	4622      	mov	r2, r4
 80015e2:	189b      	adds	r3, r3, r2
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	460b      	mov	r3, r1
 80015e8:	462a      	mov	r2, r5
 80015ea:	eb42 0303 	adc.w	r3, r2, r3
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80015fc:	4649      	mov	r1, r9
 80015fe:	008b      	lsls	r3, r1, #2
 8001600:	4641      	mov	r1, r8
 8001602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001606:	4641      	mov	r1, r8
 8001608:	008a      	lsls	r2, r1, #2
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	4603      	mov	r3, r0
 8001610:	4622      	mov	r2, r4
 8001612:	189b      	adds	r3, r3, r2
 8001614:	673b      	str	r3, [r7, #112]	@ 0x70
 8001616:	462b      	mov	r3, r5
 8001618:	460a      	mov	r2, r1
 800161a:	eb42 0303 	adc.w	r3, r2, r3
 800161e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001620:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001624:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001628:	f7ff fa6e 	bl	8000b08 <__aeabi_ldivmod>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001634:	4b66      	ldr	r3, [pc, #408]	@ (80017d0 <BMP280_measureP+0x580>)
 8001636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163a:	b21b      	sxth	r3, r3
 800163c:	17da      	asrs	r2, r3, #31
 800163e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001640:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001642:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001646:	f04f 0000 	mov.w	r0, #0
 800164a:	f04f 0100 	mov.w	r1, #0
 800164e:	0b50      	lsrs	r0, r2, #13
 8001650:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001654:	1359      	asrs	r1, r3, #13
 8001656:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800165a:	462b      	mov	r3, r5
 800165c:	fb00 f203 	mul.w	r2, r0, r3
 8001660:	4623      	mov	r3, r4
 8001662:	fb03 f301 	mul.w	r3, r3, r1
 8001666:	4413      	add	r3, r2
 8001668:	4622      	mov	r2, r4
 800166a:	fba2 1200 	umull	r1, r2, r2, r0
 800166e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001672:	460a      	mov	r2, r1
 8001674:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001678:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800167c:	4413      	add	r3, r2
 800167e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001682:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001686:	f04f 0000 	mov.w	r0, #0
 800168a:	f04f 0100 	mov.w	r1, #0
 800168e:	0b50      	lsrs	r0, r2, #13
 8001690:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001694:	1359      	asrs	r1, r3, #13
 8001696:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800169a:	462b      	mov	r3, r5
 800169c:	fb00 f203 	mul.w	r2, r0, r3
 80016a0:	4623      	mov	r3, r4
 80016a2:	fb03 f301 	mul.w	r3, r3, r1
 80016a6:	4413      	add	r3, r2
 80016a8:	4622      	mov	r2, r4
 80016aa:	fba2 1200 	umull	r1, r2, r2, r0
 80016ae:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80016b2:	460a      	mov	r2, r1
 80016b4:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80016b8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80016bc:	4413      	add	r3, r2
 80016be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80016ce:	4621      	mov	r1, r4
 80016d0:	0e4a      	lsrs	r2, r1, #25
 80016d2:	4629      	mov	r1, r5
 80016d4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016d8:	4629      	mov	r1, r5
 80016da:	164b      	asrs	r3, r1, #25
 80016dc:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80016e0:	4b3c      	ldr	r3, [pc, #240]	@ (80017d4 <BMP280_measureP+0x584>)
 80016e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	17da      	asrs	r2, r3, #31
 80016ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80016ec:	667a      	str	r2, [r7, #100]	@ 0x64
 80016ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80016f2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016f6:	462a      	mov	r2, r5
 80016f8:	fb02 f203 	mul.w	r2, r2, r3
 80016fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001700:	4621      	mov	r1, r4
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	4413      	add	r3, r2
 8001708:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800170c:	4621      	mov	r1, r4
 800170e:	fba2 1201 	umull	r1, r2, r2, r1
 8001712:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001716:	460a      	mov	r2, r1
 8001718:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800171c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001720:	4413      	add	r3, r2
 8001722:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001732:	4621      	mov	r1, r4
 8001734:	0cca      	lsrs	r2, r1, #19
 8001736:	4629      	mov	r1, r5
 8001738:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800173c:	4629      	mov	r1, r5
 800173e:	14cb      	asrs	r3, r1, #19
 8001740:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001744:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001748:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800174c:	1884      	adds	r4, r0, r2
 800174e:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001750:	eb41 0303 	adc.w	r3, r1, r3
 8001754:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001756:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800175a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800175e:	4621      	mov	r1, r4
 8001760:	1889      	adds	r1, r1, r2
 8001762:	6539      	str	r1, [r7, #80]	@ 0x50
 8001764:	4629      	mov	r1, r5
 8001766:	eb43 0101 	adc.w	r1, r3, r1
 800176a:	6579      	str	r1, [r7, #84]	@ 0x54
 800176c:	f04f 0000 	mov.w	r0, #0
 8001770:	f04f 0100 	mov.w	r1, #0
 8001774:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001778:	4623      	mov	r3, r4
 800177a:	0a18      	lsrs	r0, r3, #8
 800177c:	462b      	mov	r3, r5
 800177e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001782:	462b      	mov	r3, r5
 8001784:	1219      	asrs	r1, r3, #8
 8001786:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <BMP280_measureP+0x588>)
 8001788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178c:	b21b      	sxth	r3, r3
 800178e:	17da      	asrs	r2, r3, #31
 8001790:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001792:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80017a0:	464c      	mov	r4, r9
 80017a2:	0123      	lsls	r3, r4, #4
 80017a4:	4644      	mov	r4, r8
 80017a6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80017aa:	4644      	mov	r4, r8
 80017ac:	0122      	lsls	r2, r4, #4
 80017ae:	1884      	adds	r4, r0, r2
 80017b0:	603c      	str	r4, [r7, #0]
 80017b2:	eb41 0303 	adc.w	r3, r1, r3
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017bc:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80017c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80017ca:	46bd      	mov	sp, r7
 80017cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017d0:	20000094 	.word	0x20000094
 80017d4:	20000092 	.word	0x20000092
 80017d8:	20000090 	.word	0x20000090
 80017dc:	00000000 	.word	0x00000000

080017e0 <BMP280_measureH>:

int32_t BMP280_measureH(int32_t Pres, int32_t Temp){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <BMP280_measureH+0x14>
 80017f0:	2300      	movs	r3, #0
 80017f2:	e062      	b.n	80018ba <BMP280_measureH+0xda>
	var1 = -log((((double)Pres)/100)/101325);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7fe fe45 	bl	8000484 <__aeabi_i2d>
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	4b38      	ldr	r3, [pc, #224]	@ (80018e0 <BMP280_measureH+0x100>)
 8001800:	f7fe ffd4 	bl	80007ac <__aeabi_ddiv>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	a32e      	add	r3, pc, #184	@ (adr r3, 80018c8 <BMP280_measureH+0xe8>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7fe ffcb 	bl	80007ac <__aeabi_ddiv>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	ec43 2b17 	vmov	d7, r2, r3
 800181e:	eeb0 0a47 	vmov.f32	s0, s14
 8001822:	eef0 0a67 	vmov.f32	s1, s15
 8001826:	f005 fe2f 	bl	8007488 <log>
 800182a:	ec53 2b10 	vmov	r2, r3, d0
 800182e:	4611      	mov	r1, r2
 8001830:	61b9      	str	r1, [r7, #24]
 8001832:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001836:	61fb      	str	r3, [r7, #28]

	if(var1 == 0) return 0;
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001844:	f7ff f8f0 	bl	8000a28 <__aeabi_dcmpeq>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <BMP280_measureH+0x72>
 800184e:	2300      	movs	r3, #0
 8001850:	e033      	b.n	80018ba <BMP280_measureH+0xda>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8001852:	6838      	ldr	r0, [r7, #0]
 8001854:	f7fe fe16 	bl	8000484 <__aeabi_i2d>
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <BMP280_measureH+0x100>)
 800185e:	f7fe ffa5 	bl	80007ac <__aeabi_ddiv>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	a319      	add	r3, pc, #100	@ (adr r3, 80018d0 <BMP280_measureH+0xf0>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7fe fcbc 	bl	80001ec <__adddf3>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	a117      	add	r1, pc, #92	@ (adr r1, 80018d8 <BMP280_measureH+0xf8>)
 800187a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800187e:	f7fe ff95 	bl	80007ac <__aeabi_ddiv>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	e9c7 2304 	strd	r2, r3, [r7, #16]
	h = (var1/var2)*100;
 800188a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800188e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001892:	f7fe ff8b 	bl	80007ac <__aeabi_ddiv>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <BMP280_measureH+0x100>)
 80018a4:	f7fe fe58 	bl	8000558 <__aeabi_dmul>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t)h;
 80018b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018b4:	f7ff f900 	bl	8000ab8 <__aeabi_d2iz>
 80018b8:	4603      	mov	r3, r0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3720      	adds	r7, #32
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	f3af 8000 	nop.w
 80018c8:	00000000 	.word	0x00000000
 80018cc:	40f8bcd0 	.word	0x40f8bcd0
 80018d0:	66666666 	.word	0x66666666
 80018d4:	40711266 	.word	0x40711266
 80018d8:	ca402a92 	.word	0xca402a92
 80018dc:	3fa17e3e 	.word	0x3fa17e3e
 80018e0:	40590000 	.word	0x40590000

080018e4 <BMP280_init>:

void BMP280_init(void){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	BMP280_unselect();
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018ee:	4808      	ldr	r0, [pc, #32]	@ (8001910 <BMP280_init+0x2c>)
 80018f0:	f002 f92a 	bl	8003b48 <HAL_GPIO_WritePin>
	BMP280_config();
 80018f4:	f7ff fb62 	bl	8000fbc <BMP280_config>
	BMP280_ID = BMP280_read(0x89);
 80018f8:	2089      	movs	r0, #137	@ 0x89
 80018fa:	f7ff fb31 	bl	8000f60 <BMP280_read>
 80018fe:	4603      	mov	r3, r0
 8001900:	461a      	mov	r2, r3
 8001902:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <BMP280_init+0x30>)
 8001904:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001906:	f7ff fb65 	bl	8000fd4 <BMP280_calibrationData>
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40020000 	.word	0x40020000
 8001914:	2000007c 	.word	0x2000007c

08001918 <BMP280_calculate>:

void BMP280_calculate(void){
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	BMP280_readRawValues();
 800191c:	f7ff fc10 	bl	8001140 <BMP280_readRawValues>
	Temperature = BMP280_measureT(T_raw);
 8001920:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <BMP280_calculate+0x4c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fc4f 	bl	80011c8 <BMP280_measureT>
 800192a:	4603      	mov	r3, r0
 800192c:	4a0e      	ldr	r2, [pc, #56]	@ (8001968 <BMP280_calculate+0x50>)
 800192e:	6013      	str	r3, [r2, #0]
	Presure     = (BMP280_measureP(P_raw)*100)/256;
 8001930:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <BMP280_calculate+0x54>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fc8b 	bl	8001250 <BMP280_measureP>
 800193a:	4603      	mov	r3, r0
 800193c:	2264      	movs	r2, #100	@ 0x64
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	0a1b      	lsrs	r3, r3, #8
 8001944:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <BMP280_calculate+0x58>)
 8001946:	6013      	str	r3, [r2, #0]
	Altitud = BMP280_measureH(Presure, Temperature);
 8001948:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <BMP280_calculate+0x58>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <BMP280_calculate+0x50>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4619      	mov	r1, r3
 8001954:	4610      	mov	r0, r2
 8001956:	f7ff ff43 	bl	80017e0 <BMP280_measureH>
 800195a:	4603      	mov	r3, r0
 800195c:	4a05      	ldr	r2, [pc, #20]	@ (8001974 <BMP280_calculate+0x5c>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000098 	.word	0x20000098
 8001968:	200000a4 	.word	0x200000a4
 800196c:	2000009c 	.word	0x2000009c
 8001970:	200000ac 	.word	0x200000ac
 8001974:	200000a8 	.word	0x200000a8

08001978 <NRF24_write>:
uint8_t NRF24_mode;

uint8_t TxBuffer[32];
uint8_t RxBuffer[32];

void NRF24_write(uint8_t Adr, uint8_t data){
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	460a      	mov	r2, r1
 8001982:	71fb      	strb	r3, [r7, #7]
 8001984:	4613      	mov	r3, r2
 8001986:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f043 0320 	orr.w	r3, r3, #32
 800198e:	b2db      	uxtb	r3, r3
 8001990:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8001992:	2200      	movs	r2, #0
 8001994:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001998:	480c      	ldr	r0, [pc, #48]	@ (80019cc <NRF24_write+0x54>)
 800199a:	f002 f8d5 	bl	8003b48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 800199e:	1dfb      	adds	r3, r7, #7
 80019a0:	2201      	movs	r2, #1
 80019a2:	4619      	mov	r1, r3
 80019a4:	480a      	ldr	r0, [pc, #40]	@ (80019d0 <NRF24_write+0x58>)
 80019a6:	f003 fa33 	bl	8004e10 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &data, 1);
 80019aa:	1dbb      	adds	r3, r7, #6
 80019ac:	2201      	movs	r2, #1
 80019ae:	4619      	mov	r1, r3
 80019b0:	4807      	ldr	r0, [pc, #28]	@ (80019d0 <NRF24_write+0x58>)
 80019b2:	f003 fa2d 	bl	8004e10 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 80019b6:	2201      	movs	r2, #1
 80019b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019bc:	4803      	ldr	r0, [pc, #12]	@ (80019cc <NRF24_write+0x54>)
 80019be:	f002 f8c3 	bl	8003b48 <HAL_GPIO_WritePin>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40020400 	.word	0x40020400
 80019d0:	200003f8 	.word	0x200003f8

080019d4 <NRF24_Addr_write>:

void NRF24_Addr_write(uint8_t Adr,uint8_t *ADDRESS){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
	Adr |= W_REGISTER;
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f043 0320 	orr.w	r3, r3, #32
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[5];
	buffer[0] = ADDRESS[4];
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	791b      	ldrb	r3, [r3, #4]
 80019ee:	723b      	strb	r3, [r7, #8]
	buffer[1] = ADDRESS[3];
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	78db      	ldrb	r3, [r3, #3]
 80019f4:	727b      	strb	r3, [r7, #9]
	buffer[2] = ADDRESS[2];
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	789b      	ldrb	r3, [r3, #2]
 80019fa:	72bb      	strb	r3, [r7, #10]
	buffer[3] = ADDRESS[1];
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	785b      	ldrb	r3, [r3, #1]
 8001a00:	72fb      	strb	r3, [r7, #11]
	buffer[4] = ADDRESS[0];
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	733b      	strb	r3, [r7, #12]

	NRF24_select();
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a0e:	4812      	ldr	r0, [pc, #72]	@ (8001a58 <NRF24_Addr_write+0x84>)
 8001a10:	f002 f89a 	bl	8003b48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001a14:	1dfb      	adds	r3, r7, #7
 8001a16:	2201      	movs	r2, #1
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4810      	ldr	r0, [pc, #64]	@ (8001a5c <NRF24_Addr_write+0x88>)
 8001a1c:	f003 f9f8 	bl	8004e10 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	e00b      	b.n	8001a3e <NRF24_Addr_write+0x6a>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &buffer[n], 1);
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	f107 0208 	add.w	r2, r7, #8
 8001a2c:	4413      	add	r3, r2
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4619      	mov	r1, r3
 8001a32:	480a      	ldr	r0, [pc, #40]	@ (8001a5c <NRF24_Addr_write+0x88>)
 8001a34:	f003 f9ec 	bl	8004e10 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d9f0      	bls.n	8001a26 <NRF24_Addr_write+0x52>
	}

	NRF24_unselect();
 8001a44:	2201      	movs	r2, #1
 8001a46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a4a:	4803      	ldr	r0, [pc, #12]	@ (8001a58 <NRF24_Addr_write+0x84>)
 8001a4c:	f002 f87c 	bl	8003b48 <HAL_GPIO_WritePin>

}
 8001a50:	bf00      	nop
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40020400 	.word	0x40020400
 8001a5c:	200003f8 	.word	0x200003f8

08001a60 <NRF24_read>:

uint8_t NRF24_read(uint8_t Adr){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
	uint8_t Replay;
	NRF24_select();
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a70:	480d      	ldr	r0, [pc, #52]	@ (8001aa8 <NRF24_read+0x48>)
 8001a72:	f002 f869 	bl	8003b48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001a76:	1dfb      	adds	r3, r7, #7
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480b      	ldr	r0, [pc, #44]	@ (8001aac <NRF24_read+0x4c>)
 8001a7e:	f003 f9c7 	bl	8004e10 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(SPI_NRF24, &Replay, 1);
 8001a82:	f107 030f 	add.w	r3, r7, #15
 8001a86:	2201      	movs	r2, #1
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4808      	ldr	r0, [pc, #32]	@ (8001aac <NRF24_read+0x4c>)
 8001a8c:	f003 fa72 	bl	8004f74 <HAL_SPI_Receive_DMA>
	NRF24_unselect();
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a96:	4804      	ldr	r0, [pc, #16]	@ (8001aa8 <NRF24_read+0x48>)
 8001a98:	f002 f856 	bl	8003b48 <HAL_GPIO_WritePin>
	return Replay;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	200003f8 	.word	0x200003f8

08001ab0 <NRF24_Addr_read>:

void NRF24_Addr_read(uint8_t Adr){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[5];
	NRF24_select();
 8001aba:	2200      	movs	r2, #0
 8001abc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ac0:	4836      	ldr	r0, [pc, #216]	@ (8001b9c <NRF24_Addr_read+0xec>)
 8001ac2:	f002 f841 	bl	8003b48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001ac6:	1dfb      	adds	r3, r7, #7
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4619      	mov	r1, r3
 8001acc:	4834      	ldr	r0, [pc, #208]	@ (8001ba0 <NRF24_Addr_read+0xf0>)
 8001ace:	f003 f99f 	bl	8004e10 <HAL_SPI_Transmit_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	e00b      	b.n	8001af0 <NRF24_Addr_read+0x40>
		HAL_SPI_Receive_DMA(SPI_NRF24, &Buffer[i], 1);
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	f107 0208 	add.w	r2, r7, #8
 8001ade:	4413      	add	r3, r2
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	482e      	ldr	r0, [pc, #184]	@ (8001ba0 <NRF24_Addr_read+0xf0>)
 8001ae6:	f003 fa45 	bl	8004f74 <HAL_SPI_Receive_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	3301      	adds	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d9f0      	bls.n	8001ad8 <NRF24_Addr_read+0x28>
	}
	NRF24_unselect();
 8001af6:	2201      	movs	r2, #1
 8001af8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001afc:	4827      	ldr	r0, [pc, #156]	@ (8001b9c <NRF24_Addr_read+0xec>)
 8001afe:	f002 f823 	bl	8003b48 <HAL_GPIO_WritePin>
	switch (Adr) {
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b10      	cmp	r3, #16
 8001b06:	d030      	beq.n	8001b6a <NRF24_Addr_read+0xba>
 8001b08:	2b10      	cmp	r3, #16
 8001b0a:	dc43      	bgt.n	8001b94 <NRF24_Addr_read+0xe4>
 8001b0c:	2b0a      	cmp	r3, #10
 8001b0e:	d002      	beq.n	8001b16 <NRF24_Addr_read+0x66>
 8001b10:	2b0b      	cmp	r3, #11
 8001b12:	d015      	beq.n	8001b40 <NRF24_Addr_read+0x90>
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
			break;
	}
}
 8001b14:	e03e      	b.n	8001b94 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[4]=Buffer[0];
 8001b16:	7a3a      	ldrb	r2, [r7, #8]
 8001b18:	4b22      	ldr	r3, [pc, #136]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[3]=Buffer[1];
 8001b1e:	7a7a      	ldrb	r2, [r7, #9]
 8001b20:	4b20      	ldr	r3, [pc, #128]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b22:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[2]=Buffer[2];
 8001b26:	7aba      	ldrb	r2, [r7, #10]
 8001b28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b2a:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[1]=Buffer[3];
 8001b2e:	7afa      	ldrb	r2, [r7, #11]
 8001b30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b32:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[0]=Buffer[4];
 8001b36:	7b3a      	ldrb	r2, [r7, #12]
 8001b38:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b3a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
			break;
 8001b3e:	e029      	b.n	8001b94 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[4]=Buffer[0];
 8001b40:	7a3a      	ldrb	r2, [r7, #8]
 8001b42:	4b18      	ldr	r3, [pc, #96]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b44:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[3]=Buffer[1];
 8001b48:	7a7a      	ldrb	r2, [r7, #9]
 8001b4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[2]=Buffer[2];
 8001b50:	7aba      	ldrb	r2, [r7, #10]
 8001b52:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b54:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[1]=Buffer[3];
 8001b58:	7afa      	ldrb	r2, [r7, #11]
 8001b5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b5c:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[0]=Buffer[4];
 8001b60:	7b3a      	ldrb	r2, [r7, #12]
 8001b62:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			break;
 8001b68:	e014      	b.n	8001b94 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.TX_ADDR[4]=Buffer[0];
 8001b6a:	7a3a      	ldrb	r2, [r7, #8]
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b6e:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
			NRF24_Configurations_Struct.Actual.TX_ADDR[3]=Buffer[1];
 8001b72:	7a7a      	ldrb	r2, [r7, #9]
 8001b74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b76:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
 8001b7a:	7aba      	ldrb	r2, [r7, #10]
 8001b7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b7e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
 8001b82:	7afa      	ldrb	r2, [r7, #11]
 8001b84:	4b07      	ldr	r3, [pc, #28]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b86:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
 8001b8a:	7b3a      	ldrb	r2, [r7, #12]
 8001b8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <NRF24_Addr_read+0xf4>)
 8001b8e:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
			break;
 8001b92:	bf00      	nop
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	200003f8 	.word	0x200003f8
 8001ba4:	200000b0 	.word	0x200000b0

08001ba8 <NRF24_FlushTxFIFO>:

void NRF24_FlushTxFIFO(void){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_TX;
 8001bae:	23e1      	movs	r3, #225	@ 0xe1
 8001bb0:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bb8:	4809      	ldr	r0, [pc, #36]	@ (8001be0 <NRF24_FlushTxFIFO+0x38>)
 8001bba:	f001 ffc5 	bl	8003b48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001bbe:	1dfb      	adds	r3, r7, #7
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4807      	ldr	r0, [pc, #28]	@ (8001be4 <NRF24_FlushTxFIFO+0x3c>)
 8001bc6:	f003 f923 	bl	8004e10 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bd0:	4803      	ldr	r0, [pc, #12]	@ (8001be0 <NRF24_FlushTxFIFO+0x38>)
 8001bd2:	f001 ffb9 	bl	8003b48 <HAL_GPIO_WritePin>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40020400 	.word	0x40020400
 8001be4:	200003f8 	.word	0x200003f8

08001be8 <NRF24_FlushRxFIFO>:

void NRF24_FlushRxFIFO(void){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_RX;
 8001bee:	23e2      	movs	r3, #226	@ 0xe2
 8001bf0:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bf8:	4809      	ldr	r0, [pc, #36]	@ (8001c20 <NRF24_FlushRxFIFO+0x38>)
 8001bfa:	f001 ffa5 	bl	8003b48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001bfe:	1dfb      	adds	r3, r7, #7
 8001c00:	2201      	movs	r2, #1
 8001c02:	4619      	mov	r1, r3
 8001c04:	4807      	ldr	r0, [pc, #28]	@ (8001c24 <NRF24_FlushRxFIFO+0x3c>)
 8001c06:	f003 f903 	bl	8004e10 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c10:	4803      	ldr	r0, [pc, #12]	@ (8001c20 <NRF24_FlushRxFIFO+0x38>)
 8001c12:	f001 ff99 	bl	8003b48 <HAL_GPIO_WritePin>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40020400 	.word	0x40020400
 8001c24:	200003f8 	.word	0x200003f8

08001c28 <NRF24_PowerUp>:

void NRF24_PowerUp(void){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
	uint8_t Adr = 0x00;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer= NRF24_read(Adr);
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff13 	bl	8001a60 <NRF24_read>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f043 0320 	orr.w	r3, r3, #32
 8001c44:	71fb      	strb	r3, [r7, #7]
	Buffer |= 0x02;
 8001c46:	79bb      	ldrb	r3, [r7, #6]
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	71bb      	strb	r3, [r7, #6]
	NRF24_write(Adr, Buffer);
 8001c4e:	79ba      	ldrb	r2, [r7, #6]
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fe8f 	bl	8001978 <NRF24_write>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <NRF24_ActualConfiguration>:

void NRF24_ActualConfiguration(void){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	NRF24_Configurations_Struct.Actual.CONFIG 		= NRF24_read(CONFIG);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff fef9 	bl	8001a60 <NRF24_read>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b5f      	ldr	r3, [pc, #380]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001c74:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	NRF24_Configurations_Struct.Actual.EN_AA  		= NRF24_read(EN_AA);
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f7ff fef1 	bl	8001a60 <NRF24_read>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b5b      	ldr	r3, [pc, #364]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001c84:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	NRF24_Configurations_Struct.Actual.EN_RXADDR  	= NRF24_read(EN_RXADDR);
 8001c88:	2002      	movs	r0, #2
 8001c8a:	f7ff fee9 	bl	8001a60 <NRF24_read>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b57      	ldr	r3, [pc, #348]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001c94:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	NRF24_Configurations_Struct.Actual.SETUP_AW  	= NRF24_read(SETUP_AW);
 8001c98:	2003      	movs	r0, #3
 8001c9a:	f7ff fee1 	bl	8001a60 <NRF24_read>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b53      	ldr	r3, [pc, #332]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001ca4:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	NRF24_Configurations_Struct.Actual.SETUP_RETR 	= NRF24_read(SETUP_RETR);
 8001ca8:	2004      	movs	r0, #4
 8001caa:	f7ff fed9 	bl	8001a60 <NRF24_read>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b4f      	ldr	r3, [pc, #316]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001cb4:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	NRF24_Configurations_Struct.Actual.RF_CH  		= NRF24_read(RF_CH);
 8001cb8:	2005      	movs	r0, #5
 8001cba:	f7ff fed1 	bl	8001a60 <NRF24_read>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001cc4:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
	NRF24_Configurations_Struct.Actual.RF_SETUP  	= NRF24_read(RF_SETUP);
 8001cc8:	2006      	movs	r0, #6
 8001cca:	f7ff fec9 	bl	8001a60 <NRF24_read>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b47      	ldr	r3, [pc, #284]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001cd4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	NRF24_Configurations_Struct.Actual.STATUS  		= NRF24_read(STATUS);
 8001cd8:	2007      	movs	r0, #7
 8001cda:	f7ff fec1 	bl	8001a60 <NRF24_read>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b43      	ldr	r3, [pc, #268]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001ce4:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	NRF24_Configurations_Struct.Actual.OBSERVE  	= NRF24_read(OBSERVE);
 8001ce8:	2008      	movs	r0, #8
 8001cea:	f7ff feb9 	bl	8001a60 <NRF24_read>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001cf4:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	NRF24_Configurations_Struct.Actual.CD  			= NRF24_read(CD);
 8001cf8:	2009      	movs	r0, #9
 8001cfa:	f7ff feb1 	bl	8001a60 <NRF24_read>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b3b      	ldr	r3, [pc, #236]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001d04:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
	NRF24_Addr_read(RX_ADDR_P0);
 8001d08:	200a      	movs	r0, #10
 8001d0a:	f7ff fed1 	bl	8001ab0 <NRF24_Addr_read>
	NRF24_Addr_read(RX_ADDR_P1);
 8001d0e:	200b      	movs	r0, #11
 8001d10:	f7ff fece 	bl	8001ab0 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_ADDR_P2  	= NRF24_read(RX_ADDR_P2);
 8001d14:	200c      	movs	r0, #12
 8001d16:	f7ff fea3 	bl	8001a60 <NRF24_read>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b34      	ldr	r3, [pc, #208]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001d20:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	NRF24_Configurations_Struct.Actual.RX_ADDR_P3 	= NRF24_read(RX_ADDR_P3);
 8001d24:	200d      	movs	r0, #13
 8001d26:	f7ff fe9b 	bl	8001a60 <NRF24_read>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b30      	ldr	r3, [pc, #192]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001d30:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	NRF24_Configurations_Struct.Actual.RX_ADDR_P4  	= NRF24_read(RX_ADDR_P4);
 8001d34:	200e      	movs	r0, #14
 8001d36:	f7ff fe93 	bl	8001a60 <NRF24_read>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001d40:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	NRF24_Configurations_Struct.Actual.RX_ADDR_P5  	= NRF24_read(RX_ADDR_P5);
 8001d44:	200f      	movs	r0, #15
 8001d46:	f7ff fe8b 	bl	8001a60 <NRF24_read>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b28      	ldr	r3, [pc, #160]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001d50:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	NRF24_Addr_read(TX_ADDR);
 8001d54:	2010      	movs	r0, #16
 8001d56:	f7ff feab 	bl	8001ab0 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_PW_P0  	= NRF24_read(RX_PW_P0);
 8001d5a:	2011      	movs	r0, #17
 8001d5c:	f7ff fe80 	bl	8001a60 <NRF24_read>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b22      	ldr	r3, [pc, #136]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001d66:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
	NRF24_Configurations_Struct.Actual.RX_PW_P1  	= NRF24_read(RX_PW_P1);
 8001d6a:	2012      	movs	r0, #18
 8001d6c:	f7ff fe78 	bl	8001a60 <NRF24_read>
 8001d70:	4603      	mov	r3, r0
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b1e      	ldr	r3, [pc, #120]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001d76:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	NRF24_Configurations_Struct.Actual.RX_PW_P2  	= NRF24_read(RX_PW_P2);
 8001d7a:	2013      	movs	r0, #19
 8001d7c:	f7ff fe70 	bl	8001a60 <NRF24_read>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b1a      	ldr	r3, [pc, #104]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001d86:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
	NRF24_Configurations_Struct.Actual.RX_PW_P3  	= NRF24_read(RX_PW_P3);
 8001d8a:	2014      	movs	r0, #20
 8001d8c:	f7ff fe68 	bl	8001a60 <NRF24_read>
 8001d90:	4603      	mov	r3, r0
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b16      	ldr	r3, [pc, #88]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001d96:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	NRF24_Configurations_Struct.Actual.RX_PW_P4  	= NRF24_read(RX_PW_P4);
 8001d9a:	2015      	movs	r0, #21
 8001d9c:	f7ff fe60 	bl	8001a60 <NRF24_read>
 8001da0:	4603      	mov	r3, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001da6:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	NRF24_Configurations_Struct.Actual.RX_PW_P5  	= NRF24_read(RX_PW_P5);
 8001daa:	2016      	movs	r0, #22
 8001dac:	f7ff fe58 	bl	8001a60 <NRF24_read>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001db6:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	NRF24_Configurations_Struct.Actual.FIFO_STATUS  = NRF24_read(FIFO_STATUS);
 8001dba:	2017      	movs	r0, #23
 8001dbc:	f7ff fe50 	bl	8001a60 <NRF24_read>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001dc6:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
	NRF24_Configurations_Struct.Actual.DYNPD  		= NRF24_read(DYNPD);
 8001dca:	201c      	movs	r0, #28
 8001dcc:	f7ff fe48 	bl	8001a60 <NRF24_read>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001dd6:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
	NRF24_Configurations_Struct.Actual.FEATURE  	= NRF24_read(FEATURE);
 8001dda:	201d      	movs	r0, #29
 8001ddc:	f7ff fe40 	bl	8001a60 <NRF24_read>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b02      	ldr	r3, [pc, #8]	@ (8001df0 <NRF24_ActualConfiguration+0x18c>)
 8001de6:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200000b0 	.word	0x200000b0

08001df4 <NRF24_config>:

void NRF24_config(NRF24_Address_Configurations_t Configuration_struct){
 8001df4:	b084      	sub	sp, #16
 8001df6:	b580      	push	{r7, lr}
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	f107 0c08 	add.w	ip, r7, #8
 8001dfe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	NRF24_write(CONFIG,	Configuration_struct.CONFIG);
 8001e02:	7a3b      	ldrb	r3, [r7, #8]
 8001e04:	4619      	mov	r1, r3
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7ff fdb6 	bl	8001978 <NRF24_write>
	NRF24_write(EN_AA, Configuration_struct.EN_AA);
 8001e0c:	7a7b      	ldrb	r3, [r7, #9]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	2001      	movs	r0, #1
 8001e12:	f7ff fdb1 	bl	8001978 <NRF24_write>
	NRF24_write(EN_RXADDR,Configuration_struct.EN_RXADDR);
 8001e16:	7abb      	ldrb	r3, [r7, #10]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	2002      	movs	r0, #2
 8001e1c:	f7ff fdac 	bl	8001978 <NRF24_write>
	NRF24_write(SETUP_AW,Configuration_struct.SETUP_AW);
 8001e20:	7afb      	ldrb	r3, [r7, #11]
 8001e22:	4619      	mov	r1, r3
 8001e24:	2003      	movs	r0, #3
 8001e26:	f7ff fda7 	bl	8001978 <NRF24_write>
	NRF24_write(SETUP_RETR,Configuration_struct.SETUP_RETR);
 8001e2a:	7b3b      	ldrb	r3, [r7, #12]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	2004      	movs	r0, #4
 8001e30:	f7ff fda2 	bl	8001978 <NRF24_write>
	NRF24_write(RF_CH,Configuration_struct.RF_CH);
 8001e34:	7b7b      	ldrb	r3, [r7, #13]
 8001e36:	4619      	mov	r1, r3
 8001e38:	2005      	movs	r0, #5
 8001e3a:	f7ff fd9d 	bl	8001978 <NRF24_write>
	NRF24_write(RF_SETUP,Configuration_struct.RF_SETUP);
 8001e3e:	7bbb      	ldrb	r3, [r7, #14]
 8001e40:	4619      	mov	r1, r3
 8001e42:	2006      	movs	r0, #6
 8001e44:	f7ff fd98 	bl	8001978 <NRF24_write>
	NRF24_write(STATUS,Configuration_struct.STATUS);
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	2007      	movs	r0, #7
 8001e4e:	f7ff fd93 	bl	8001978 <NRF24_write>
	NRF24_write(OBSERVE,Configuration_struct.OBSERVE);
 8001e52:	7c3b      	ldrb	r3, [r7, #16]
 8001e54:	4619      	mov	r1, r3
 8001e56:	2008      	movs	r0, #8
 8001e58:	f7ff fd8e 	bl	8001978 <NRF24_write>
	NRF24_write(CD,Configuration_struct.CD);
 8001e5c:	7c7b      	ldrb	r3, [r7, #17]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	2009      	movs	r0, #9
 8001e62:	f7ff fd89 	bl	8001978 <NRF24_write>
	NRF24_Addr_write(RX_ADDR_P0, Configuration_struct.RX_ADDR_P0);
 8001e66:	f107 0312 	add.w	r3, r7, #18
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	200a      	movs	r0, #10
 8001e6e:	f7ff fdb1 	bl	80019d4 <NRF24_Addr_write>
	NRF24_Addr_write(RX_ADDR_P1, Configuration_struct.RX_ADDR_P1);
 8001e72:	f107 0317 	add.w	r3, r7, #23
 8001e76:	4619      	mov	r1, r3
 8001e78:	200b      	movs	r0, #11
 8001e7a:	f7ff fdab 	bl	80019d4 <NRF24_Addr_write>
	NRF24_write(RX_ADDR_P2,Configuration_struct.RX_ADDR_P2);
 8001e7e:	7f3b      	ldrb	r3, [r7, #28]
 8001e80:	4619      	mov	r1, r3
 8001e82:	200c      	movs	r0, #12
 8001e84:	f7ff fd78 	bl	8001978 <NRF24_write>
	NRF24_write(RX_ADDR_P3,Configuration_struct.RX_ADDR_P3);
 8001e88:	7f7b      	ldrb	r3, [r7, #29]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	200d      	movs	r0, #13
 8001e8e:	f7ff fd73 	bl	8001978 <NRF24_write>
	NRF24_write(RX_ADDR_P4,Configuration_struct.RX_ADDR_P4);
 8001e92:	7fbb      	ldrb	r3, [r7, #30]
 8001e94:	4619      	mov	r1, r3
 8001e96:	200e      	movs	r0, #14
 8001e98:	f7ff fd6e 	bl	8001978 <NRF24_write>
	NRF24_write(RX_ADDR_P5,Configuration_struct.RX_ADDR_P5);
 8001e9c:	7ffb      	ldrb	r3, [r7, #31]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	200f      	movs	r0, #15
 8001ea2:	f7ff fd69 	bl	8001978 <NRF24_write>
	NRF24_Addr_write(TX_ADDR, Configuration_struct.TX_ADDR);
 8001ea6:	f107 0320 	add.w	r3, r7, #32
 8001eaa:	4619      	mov	r1, r3
 8001eac:	2010      	movs	r0, #16
 8001eae:	f7ff fd91 	bl	80019d4 <NRF24_Addr_write>
	NRF24_write(RX_PW_P0,Configuration_struct.RX_PW_P0);
 8001eb2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	2011      	movs	r0, #17
 8001eba:	f7ff fd5d 	bl	8001978 <NRF24_write>
	NRF24_write(RX_PW_P1,Configuration_struct.RX_PW_P1);
 8001ebe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	2012      	movs	r0, #18
 8001ec6:	f7ff fd57 	bl	8001978 <NRF24_write>
	NRF24_write(RX_PW_P2,Configuration_struct.RX_PW_P2);
 8001eca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ece:	4619      	mov	r1, r3
 8001ed0:	2013      	movs	r0, #19
 8001ed2:	f7ff fd51 	bl	8001978 <NRF24_write>
	NRF24_write(RX_PW_P3,Configuration_struct.RX_PW_P3);
 8001ed6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001eda:	4619      	mov	r1, r3
 8001edc:	2014      	movs	r0, #20
 8001ede:	f7ff fd4b 	bl	8001978 <NRF24_write>
	NRF24_write(RX_PW_P4,Configuration_struct.RX_PW_P4);
 8001ee2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	2015      	movs	r0, #21
 8001eea:	f7ff fd45 	bl	8001978 <NRF24_write>
	NRF24_write(RX_PW_P5,Configuration_struct.RX_PW_P5);
 8001eee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	2016      	movs	r0, #22
 8001ef6:	f7ff fd3f 	bl	8001978 <NRF24_write>
	NRF24_write(FIFO_STATUS,Configuration_struct.FIFO_STATUS);
 8001efa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001efe:	4619      	mov	r1, r3
 8001f00:	2017      	movs	r0, #23
 8001f02:	f7ff fd39 	bl	8001978 <NRF24_write>
	NRF24_write(DYNPD,Configuration_struct.DYNPD);
 8001f06:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	201c      	movs	r0, #28
 8001f0e:	f7ff fd33 	bl	8001978 <NRF24_write>
	NRF24_write(FEATURE,Configuration_struct.FEATURE);
 8001f12:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001f16:	4619      	mov	r1, r3
 8001f18:	201d      	movs	r0, #29
 8001f1a:	f7ff fd2d 	bl	8001978 <NRF24_write>
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f26:	b004      	add	sp, #16
 8001f28:	4770      	bx	lr
	...

08001f2c <NRF24_DefaultConfiguration>:

void NRF24_DefaultConfiguration(void){
 8001f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af06      	add	r7, sp, #24
	NRF24_FlushTxFIFO();
 8001f32:	f7ff fe39 	bl	8001ba8 <NRF24_FlushTxFIFO>
	NRF24_FlushRxFIFO();
 8001f36:	f7ff fe57 	bl	8001be8 <NRF24_FlushRxFIFO>
	NRF24_Configurations_Struct.Default.CONFIG 			= 0x78;
 8001f3a:	4b48      	ldr	r3, [pc, #288]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f3c:	2278      	movs	r2, #120	@ 0x78
 8001f3e:	701a      	strb	r2, [r3, #0]
	NRF24_Configurations_Struct.Default.EN_AA  			= 0x3F;
 8001f40:	4b46      	ldr	r3, [pc, #280]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f42:	223f      	movs	r2, #63	@ 0x3f
 8001f44:	705a      	strb	r2, [r3, #1]
	NRF24_Configurations_Struct.Default.EN_RXADDR  		= 0x03;
 8001f46:	4b45      	ldr	r3, [pc, #276]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f48:	2203      	movs	r2, #3
 8001f4a:	709a      	strb	r2, [r3, #2]
	NRF24_Configurations_Struct.Default.SETUP_AW  		= 0x03;
 8001f4c:	4b43      	ldr	r3, [pc, #268]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f4e:	2203      	movs	r2, #3
 8001f50:	70da      	strb	r2, [r3, #3]
	NRF24_Configurations_Struct.Default.SETUP_RETR 		= 0x03;
 8001f52:	4b42      	ldr	r3, [pc, #264]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f54:	2203      	movs	r2, #3
 8001f56:	711a      	strb	r2, [r3, #4]
	NRF24_Configurations_Struct.Default.RF_CH  			= 0x02;
 8001f58:	4b40      	ldr	r3, [pc, #256]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	715a      	strb	r2, [r3, #5]
	NRF24_Configurations_Struct.Default.RF_SETUP  		= 0x09;
 8001f5e:	4b3f      	ldr	r3, [pc, #252]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f60:	2209      	movs	r2, #9
 8001f62:	719a      	strb	r2, [r3, #6]
	NRF24_Configurations_Struct.Default.STATUS  		= 0X70;
 8001f64:	4b3d      	ldr	r3, [pc, #244]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f66:	2270      	movs	r2, #112	@ 0x70
 8001f68:	71da      	strb	r2, [r3, #7]
	NRF24_Configurations_Struct.Default.OBSERVE  		= 0X00;
 8001f6a:	4b3c      	ldr	r3, [pc, #240]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	721a      	strb	r2, [r3, #8]
	NRF24_Configurations_Struct.Default.CD  			= 0x00;
 8001f70:	4b3a      	ldr	r3, [pc, #232]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	725a      	strb	r2, [r3, #9]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[0]  	= 0xE7;
 8001f76:	4b39      	ldr	r3, [pc, #228]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f78:	22e7      	movs	r2, #231	@ 0xe7
 8001f7a:	729a      	strb	r2, [r3, #10]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[1]  	= 0xE7;
 8001f7c:	4b37      	ldr	r3, [pc, #220]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f7e:	22e7      	movs	r2, #231	@ 0xe7
 8001f80:	72da      	strb	r2, [r3, #11]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[2]  	= 0xE7;
 8001f82:	4b36      	ldr	r3, [pc, #216]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f84:	22e7      	movs	r2, #231	@ 0xe7
 8001f86:	731a      	strb	r2, [r3, #12]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[3]  	= 0xE7;
 8001f88:	4b34      	ldr	r3, [pc, #208]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f8a:	22e7      	movs	r2, #231	@ 0xe7
 8001f8c:	735a      	strb	r2, [r3, #13]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[4]  	= 0xE7;
 8001f8e:	4b33      	ldr	r3, [pc, #204]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f90:	22e7      	movs	r2, #231	@ 0xe7
 8001f92:	739a      	strb	r2, [r3, #14]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[0]  	= 0xC2;
 8001f94:	4b31      	ldr	r3, [pc, #196]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f96:	22c2      	movs	r2, #194	@ 0xc2
 8001f98:	73da      	strb	r2, [r3, #15]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[1]  	= 0xC2;
 8001f9a:	4b30      	ldr	r3, [pc, #192]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001f9c:	22c2      	movs	r2, #194	@ 0xc2
 8001f9e:	741a      	strb	r2, [r3, #16]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[2]  	= 0xC2;
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fa2:	22c2      	movs	r2, #194	@ 0xc2
 8001fa4:	745a      	strb	r2, [r3, #17]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[3]  	= 0xC2;
 8001fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fa8:	22c2      	movs	r2, #194	@ 0xc2
 8001faa:	749a      	strb	r2, [r3, #18]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[4]  	= 0xC2;
 8001fac:	4b2b      	ldr	r3, [pc, #172]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fae:	22c2      	movs	r2, #194	@ 0xc2
 8001fb0:	74da      	strb	r2, [r3, #19]
	NRF24_Configurations_Struct.Default.RX_ADDR_P2  	= 0xC3;
 8001fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fb4:	22c3      	movs	r2, #195	@ 0xc3
 8001fb6:	751a      	strb	r2, [r3, #20]
	NRF24_Configurations_Struct.Default.RX_ADDR_P3 		= 0xC4;
 8001fb8:	4b28      	ldr	r3, [pc, #160]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fba:	22c4      	movs	r2, #196	@ 0xc4
 8001fbc:	755a      	strb	r2, [r3, #21]
	NRF24_Configurations_Struct.Default.RX_ADDR_P4  	= 0xC5;
 8001fbe:	4b27      	ldr	r3, [pc, #156]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fc0:	22c5      	movs	r2, #197	@ 0xc5
 8001fc2:	759a      	strb	r2, [r3, #22]
	NRF24_Configurations_Struct.Default.RX_ADDR_P5  	= 0xC6;
 8001fc4:	4b25      	ldr	r3, [pc, #148]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fc6:	22c6      	movs	r2, #198	@ 0xc6
 8001fc8:	75da      	strb	r2, [r3, #23]
	NRF24_Configurations_Struct.Default.TX_ADDR[0]   	= 0xE7;
 8001fca:	4b24      	ldr	r3, [pc, #144]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fcc:	22e7      	movs	r2, #231	@ 0xe7
 8001fce:	761a      	strb	r2, [r3, #24]
	NRF24_Configurations_Struct.Default.TX_ADDR[1]   	= 0xE7;
 8001fd0:	4b22      	ldr	r3, [pc, #136]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fd2:	22e7      	movs	r2, #231	@ 0xe7
 8001fd4:	765a      	strb	r2, [r3, #25]
	NRF24_Configurations_Struct.Default.TX_ADDR[2]   	= 0xE7;
 8001fd6:	4b21      	ldr	r3, [pc, #132]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fd8:	22e7      	movs	r2, #231	@ 0xe7
 8001fda:	769a      	strb	r2, [r3, #26]
	NRF24_Configurations_Struct.Default.TX_ADDR[3]   	= 0xE7;
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fde:	22e7      	movs	r2, #231	@ 0xe7
 8001fe0:	76da      	strb	r2, [r3, #27]
	NRF24_Configurations_Struct.Default.TX_ADDR[4]   	= 0xE7;
 8001fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fe4:	22e7      	movs	r2, #231	@ 0xe7
 8001fe6:	771a      	strb	r2, [r3, #28]
	NRF24_Configurations_Struct.Default.RX_PW_P0  		= 0X20;
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001fea:	2220      	movs	r2, #32
 8001fec:	775a      	strb	r2, [r3, #29]
	NRF24_Configurations_Struct.Default.RX_PW_P1  		= 0X20;
 8001fee:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	779a      	strb	r2, [r3, #30]
	NRF24_Configurations_Struct.Default.RX_PW_P2  		= 0X00;
 8001ff4:	4b19      	ldr	r3, [pc, #100]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	77da      	strb	r2, [r3, #31]
	NRF24_Configurations_Struct.Default.RX_PW_P3  		= 0X00;
 8001ffa:	4b18      	ldr	r3, [pc, #96]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2020 	strb.w	r2, [r3, #32]
	NRF24_Configurations_Struct.Default.RX_PW_P4  		= 0X00;
 8002002:	4b16      	ldr	r3, [pc, #88]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	NRF24_Configurations_Struct.Default.RX_PW_P5  		= 0X00;
 800200a:	4b14      	ldr	r3, [pc, #80]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	NRF24_Configurations_Struct.Default.FIFO_STATUS  	= 0X11;
 8002012:	4b12      	ldr	r3, [pc, #72]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8002014:	2211      	movs	r2, #17
 8002016:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	NRF24_Configurations_Struct.Default.DYNPD  			= 0X00;
 800201a:	4b10      	ldr	r3, [pc, #64]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	NRF24_Configurations_Struct.Default.FEATURE  		= 0X00;
 8002022:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	NRF24_config(NRF24_Configurations_Struct.Default);
 800202a:	4e0c      	ldr	r6, [pc, #48]	@ (800205c <NRF24_DefaultConfiguration+0x130>)
 800202c:	466c      	mov	r4, sp
 800202e:	f106 0510 	add.w	r5, r6, #16
 8002032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002036:	e895 0003 	ldmia.w	r5, {r0, r1}
 800203a:	6020      	str	r0, [r4, #0]
 800203c:	3404      	adds	r4, #4
 800203e:	8021      	strh	r1, [r4, #0]
 8002040:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002044:	f7ff fed6 	bl	8001df4 <NRF24_config>
	NRF24_ActualConfiguration();
 8002048:	f7ff fe0c 	bl	8001c64 <NRF24_ActualConfiguration>
	NRF24_mode = Init;
 800204c:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <NRF24_DefaultConfiguration+0x134>)
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
}
 8002052:	bf00      	nop
 8002054:	3704      	adds	r7, #4
 8002056:	46bd      	mov	sp, r7
 8002058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800205a:	bf00      	nop
 800205c:	200000b0 	.word	0x200000b0
 8002060:	20000153 	.word	0x20000153

08002064 <NRF24_RxConfiguration>:
	NRF24_config(NRF24_Configurations_Struct.Tx_mode);
	NRF24_ActualConfiguration();
	NRF24_mode = TxMode;
}

void NRF24_RxConfiguration(void){
 8002064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002066:	b087      	sub	sp, #28
 8002068:	af06      	add	r7, sp, #24
	NRF24_Configurations_Struct.Rx_mode.CONFIG 			= 0x79;
 800206a:	4b5b      	ldr	r3, [pc, #364]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800206c:	2279      	movs	r2, #121	@ 0x79
 800206e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	NRF24_Configurations_Struct.Rx_mode.EN_AA  			= 0x03;
 8002072:	4b59      	ldr	r3, [pc, #356]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002074:	2203      	movs	r2, #3
 8002076:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	NRF24_Configurations_Struct.Rx_mode.EN_RXADDR  		= 0x03;
 800207a:	4b57      	ldr	r3, [pc, #348]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800207c:	2203      	movs	r2, #3
 800207e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
	NRF24_Configurations_Struct.Rx_mode.SETUP_AW  		= 0x03;
 8002082:	4b55      	ldr	r3, [pc, #340]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002084:	2203      	movs	r2, #3
 8002086:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
	NRF24_Configurations_Struct.Rx_mode.SETUP_RETR 		= 0x33;
 800208a:	4b53      	ldr	r3, [pc, #332]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800208c:	2233      	movs	r2, #51	@ 0x33
 800208e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	NRF24_Configurations_Struct.Rx_mode.RF_CH  			= 0x12;
 8002092:	4b51      	ldr	r3, [pc, #324]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002094:	2212      	movs	r2, #18
 8002096:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	NRF24_Configurations_Struct.Rx_mode.RF_SETUP  		= 0x09;
 800209a:	4b4f      	ldr	r3, [pc, #316]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800209c:	2209      	movs	r2, #9
 800209e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	NRF24_Configurations_Struct.Rx_mode.STATUS  		= 0X70;
 80020a2:	4b4d      	ldr	r3, [pc, #308]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020a4:	2270      	movs	r2, #112	@ 0x70
 80020a6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
	NRF24_Configurations_Struct.Rx_mode.OBSERVE  		= 0X00;
 80020aa:	4b4b      	ldr	r3, [pc, #300]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	NRF24_Configurations_Struct.Rx_mode.CD  			= 0x00;
 80020b2:	4b49      	ldr	r3, [pc, #292]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[0]  	= 0xE7;
 80020ba:	4b47      	ldr	r3, [pc, #284]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020bc:	22e7      	movs	r2, #231	@ 0xe7
 80020be:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[1]  	= 0xE7;
 80020c2:	4b45      	ldr	r3, [pc, #276]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020c4:	22e7      	movs	r2, #231	@ 0xe7
 80020c6:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[2]  	= 0xE7;
 80020ca:	4b43      	ldr	r3, [pc, #268]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020cc:	22e7      	movs	r2, #231	@ 0xe7
 80020ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[3]  	= 0xE7;
 80020d2:	4b41      	ldr	r3, [pc, #260]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020d4:	22e7      	movs	r2, #231	@ 0xe7
 80020d6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[4]  	= 0xE7;
 80020da:	4b3f      	ldr	r3, [pc, #252]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020dc:	22e7      	movs	r2, #231	@ 0xe7
 80020de:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[0]  	= 0xC2;
 80020e2:	4b3d      	ldr	r3, [pc, #244]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020e4:	22c2      	movs	r2, #194	@ 0xc2
 80020e6:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[1]  	= 0xC2;
 80020ea:	4b3b      	ldr	r3, [pc, #236]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020ec:	22c2      	movs	r2, #194	@ 0xc2
 80020ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[2]  	= 0xC2;
 80020f2:	4b39      	ldr	r3, [pc, #228]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020f4:	22c2      	movs	r2, #194	@ 0xc2
 80020f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[3]  	= 0xC2;
 80020fa:	4b37      	ldr	r3, [pc, #220]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 80020fc:	22c2      	movs	r2, #194	@ 0xc2
 80020fe:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[4]  	= 0xC2;
 8002102:	4b35      	ldr	r3, [pc, #212]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002104:	22c2      	movs	r2, #194	@ 0xc2
 8002106:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P2  	= 0xC3;
 800210a:	4b33      	ldr	r3, [pc, #204]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800210c:	22c3      	movs	r2, #195	@ 0xc3
 800210e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P3 		= 0xC4;
 8002112:	4b31      	ldr	r3, [pc, #196]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002114:	22c4      	movs	r2, #196	@ 0xc4
 8002116:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P4  	= 0xC5;
 800211a:	4b2f      	ldr	r3, [pc, #188]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800211c:	22c5      	movs	r2, #197	@ 0xc5
 800211e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P5  	= 0xC6;
 8002122:	4b2d      	ldr	r3, [pc, #180]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002124:	22c6      	movs	r2, #198	@ 0xc6
 8002126:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[0]   	= 0xE7;
 800212a:	4b2b      	ldr	r3, [pc, #172]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800212c:	22e7      	movs	r2, #231	@ 0xe7
 800212e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[1]   	= 0xE7;
 8002132:	4b29      	ldr	r3, [pc, #164]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002134:	22e7      	movs	r2, #231	@ 0xe7
 8002136:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[2]   	= 0xE7;
 800213a:	4b27      	ldr	r3, [pc, #156]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800213c:	22e7      	movs	r2, #231	@ 0xe7
 800213e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[3]   	= 0xE7;
 8002142:	4b25      	ldr	r3, [pc, #148]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002144:	22e7      	movs	r2, #231	@ 0xe7
 8002146:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[4]   	= 0xE7;
 800214a:	4b23      	ldr	r3, [pc, #140]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800214c:	22e7      	movs	r2, #231	@ 0xe7
 800214e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P0  		= 0X20;
 8002152:	4b21      	ldr	r3, [pc, #132]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002154:	2220      	movs	r2, #32
 8002156:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P1  		= 0X20;
 800215a:	4b1f      	ldr	r3, [pc, #124]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800215c:	2220      	movs	r2, #32
 800215e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P2  		= 0X00;
 8002162:	4b1d      	ldr	r3, [pc, #116]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002164:	2200      	movs	r2, #0
 8002166:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P3  		= 0X00;
 800216a:	4b1b      	ldr	r3, [pc, #108]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800216c:	2200      	movs	r2, #0
 800216e:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P4  		= 0X00;
 8002172:	4b19      	ldr	r3, [pc, #100]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002174:	2200      	movs	r2, #0
 8002176:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P5  		= 0X00;
 800217a:	4b17      	ldr	r3, [pc, #92]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800217c:	2200      	movs	r2, #0
 800217e:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
	NRF24_Configurations_Struct.Rx_mode.FIFO_STATUS  	= 0X11;
 8002182:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002184:	2211      	movs	r2, #17
 8002186:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
	NRF24_Configurations_Struct.Rx_mode.DYNPD  			= 0X00;
 800218a:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	NRF24_Configurations_Struct.Rx_mode.FEATURE  		= 0X00;
 8002192:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	NRF24_config(NRF24_Configurations_Struct.Rx_mode);
 800219a:	4e0f      	ldr	r6, [pc, #60]	@ (80021d8 <NRF24_RxConfiguration+0x174>)
 800219c:	466c      	mov	r4, sp
 800219e:	f106 055c 	add.w	r5, r6, #92	@ 0x5c
 80021a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021aa:	6020      	str	r0, [r4, #0]
 80021ac:	3404      	adds	r4, #4
 80021ae:	8021      	strh	r1, [r4, #0]
 80021b0:	f106 034c 	add.w	r3, r6, #76	@ 0x4c
 80021b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021b6:	f7ff fe1d 	bl	8001df4 <NRF24_config>
	NRF24_ActualConfiguration();
 80021ba:	f7ff fd53 	bl	8001c64 <NRF24_ActualConfiguration>
	NRF24_Enable();
 80021be:	2201      	movs	r2, #1
 80021c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021c4:	4805      	ldr	r0, [pc, #20]	@ (80021dc <NRF24_RxConfiguration+0x178>)
 80021c6:	f001 fcbf 	bl	8003b48 <HAL_GPIO_WritePin>
	NRF24_mode = RxMode;
 80021ca:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <NRF24_RxConfiguration+0x17c>)
 80021cc:	2202      	movs	r2, #2
 80021ce:	701a      	strb	r2, [r3, #0]
}
 80021d0:	bf00      	nop
 80021d2:	3704      	adds	r7, #4
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d8:	200000b0 	.word	0x200000b0
 80021dc:	40020400 	.word	0x40020400
 80021e0:	20000153 	.word	0x20000153

080021e4 <NRF24_CheckFlags>:

void NRF24_CheckFlags(void){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
	uint8_t buffer = NRF24_read(STATUS);
 80021ea:	2007      	movs	r0, #7
 80021ec:	f7ff fc38 	bl	8001a60 <NRF24_read>
 80021f0:	4603      	mov	r3, r0
 80021f2:	71fb      	strb	r3, [r7, #7]
	TX_FULL =  buffer & 0x01;
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	4b28      	ldr	r3, [pc, #160]	@ (80022a0 <NRF24_CheckFlags+0xbc>)
 80021fe:	701a      	strb	r2, [r3, #0]
	RX_P_NO = (buffer & 0x0E) >> 1;
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	105b      	asrs	r3, r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	b2da      	uxtb	r2, r3
 800220c:	4b25      	ldr	r3, [pc, #148]	@ (80022a4 <NRF24_CheckFlags+0xc0>)
 800220e:	701a      	strb	r2, [r3, #0]
	MAX_RT  = (buffer & 0x10) >> 4;
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	111b      	asrs	r3, r3, #4
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	b2da      	uxtb	r2, r3
 800221c:	4b22      	ldr	r3, [pc, #136]	@ (80022a8 <NRF24_CheckFlags+0xc4>)
 800221e:	701a      	strb	r2, [r3, #0]
	TX_DS   = (buffer & 0x20) >> 5;
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	115b      	asrs	r3, r3, #5
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	b2da      	uxtb	r2, r3
 800222c:	4b1f      	ldr	r3, [pc, #124]	@ (80022ac <NRF24_CheckFlags+0xc8>)
 800222e:	701a      	strb	r2, [r3, #0]
	RX_DR   = (buffer & 0x40) >> 6;
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	119b      	asrs	r3, r3, #6
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	b2da      	uxtb	r2, r3
 800223c:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <NRF24_CheckFlags+0xcc>)
 800223e:	701a      	strb	r2, [r3, #0]

	buffer   = NRF24_read(FIFO_STATUS);
 8002240:	2017      	movs	r0, #23
 8002242:	f7ff fc0d 	bl	8001a60 <NRF24_read>
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
	RX_EMPTY =  buffer & 0x01;
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4b18      	ldr	r3, [pc, #96]	@ (80022b4 <NRF24_CheckFlags+0xd0>)
 8002254:	701a      	strb	r2, [r3, #0]
	RX_FULL  = (buffer & 0x02) >> 1;
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	105b      	asrs	r3, r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <NRF24_CheckFlags+0xd4>)
 8002264:	701a      	strb	r2, [r3, #0]
	TX_EMPTY = (buffer & 0x10) >> 4;
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	111b      	asrs	r3, r3, #4
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4b12      	ldr	r3, [pc, #72]	@ (80022bc <NRF24_CheckFlags+0xd8>)
 8002274:	701a      	strb	r2, [r3, #0]
	TX_FULL  = (buffer & 0x20) >> 5;
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	115b      	asrs	r3, r3, #5
 800227a:	b2db      	uxtb	r3, r3
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <NRF24_CheckFlags+0xbc>)
 8002284:	701a      	strb	r2, [r3, #0]
	TX_REUSE = (buffer & 0x40) >> 6;
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	119b      	asrs	r3, r3, #6
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <NRF24_CheckFlags+0xdc>)
 8002294:	701a      	strb	r2, [r3, #0]
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000149 	.word	0x20000149
 80022a4:	2000014a 	.word	0x2000014a
 80022a8:	2000014b 	.word	0x2000014b
 80022ac:	2000014c 	.word	0x2000014c
 80022b0:	2000014d 	.word	0x2000014d
 80022b4:	2000014e 	.word	0x2000014e
 80022b8:	2000014f 	.word	0x2000014f
 80022bc:	20000150 	.word	0x20000150
 80022c0:	20000151 	.word	0x20000151

080022c4 <NRF24_FIFO_write>:

void NRF24_FIFO_write(uint8_t *pData, uint8_t size){
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
	uint8_t Adr = W_TX_PAYLOAD;
 80022d0:	23a0      	movs	r3, #160	@ 0xa0
 80022d2:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 80022d4:	2200      	movs	r2, #0
 80022d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022da:	4812      	ldr	r0, [pc, #72]	@ (8002324 <NRF24_FIFO_write+0x60>)
 80022dc:	f001 fc34 	bl	8003b48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 80022e0:	f107 030e 	add.w	r3, r7, #14
 80022e4:	2201      	movs	r2, #1
 80022e6:	4619      	mov	r1, r3
 80022e8:	480f      	ldr	r0, [pc, #60]	@ (8002328 <NRF24_FIFO_write+0x64>)
 80022ea:	f002 fd91 	bl	8004e10 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
 80022f2:	e00a      	b.n	800230a <NRF24_FIFO_write+0x46>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &pData[n], 1);
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	2201      	movs	r2, #1
 80022fc:	4619      	mov	r1, r3
 80022fe:	480a      	ldr	r0, [pc, #40]	@ (8002328 <NRF24_FIFO_write+0x64>)
 8002300:	f002 fd86 	bl	8004e10 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	3301      	adds	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	2b1f      	cmp	r3, #31
 800230e:	d9f1      	bls.n	80022f4 <NRF24_FIFO_write+0x30>
	}
	NRF24_unselect();
 8002310:	2201      	movs	r2, #1
 8002312:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002316:	4803      	ldr	r0, [pc, #12]	@ (8002324 <NRF24_FIFO_write+0x60>)
 8002318:	f001 fc16 	bl	8003b48 <HAL_GPIO_WritePin>
}
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40020400 	.word	0x40020400
 8002328:	200003f8 	.word	0x200003f8

0800232c <NRF24_FIFO_read>:

void NRF24_FIFO_read(uint8_t *pData){
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	uint8_t Adr = R_RX_PAYLOAD;
 8002334:	2361      	movs	r3, #97	@ 0x61
 8002336:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 8002338:	2200      	movs	r2, #0
 800233a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800233e:	4812      	ldr	r0, [pc, #72]	@ (8002388 <NRF24_FIFO_read+0x5c>)
 8002340:	f001 fc02 	bl	8003b48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8002344:	f107 030e 	add.w	r3, r7, #14
 8002348:	2201      	movs	r2, #1
 800234a:	4619      	mov	r1, r3
 800234c:	480f      	ldr	r0, [pc, #60]	@ (800238c <NRF24_FIFO_read+0x60>)
 800234e:	f002 fd5f 	bl	8004e10 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	e00a      	b.n	800236e <NRF24_FIFO_read+0x42>
		HAL_SPI_Receive_DMA(SPI_NRF24, &pData[n], 1);
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	2201      	movs	r2, #1
 8002360:	4619      	mov	r1, r3
 8002362:	480a      	ldr	r0, [pc, #40]	@ (800238c <NRF24_FIFO_read+0x60>)
 8002364:	f002 fe06 	bl	8004f74 <HAL_SPI_Receive_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	3301      	adds	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	2b1f      	cmp	r3, #31
 8002372:	d9f1      	bls.n	8002358 <NRF24_FIFO_read+0x2c>
	}
	NRF24_unselect();
 8002374:	2201      	movs	r2, #1
 8002376:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800237a:	4803      	ldr	r0, [pc, #12]	@ (8002388 <NRF24_FIFO_read+0x5c>)
 800237c:	f001 fbe4 	bl	8003b48 <HAL_GPIO_WritePin>
}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40020400 	.word	0x40020400
 800238c:	200003f8 	.word	0x200003f8

08002390 <NRF24_init>:

void NRF24_init(void){
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
	NRF24_Disable();
 8002394:	2200      	movs	r2, #0
 8002396:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800239a:	4808      	ldr	r0, [pc, #32]	@ (80023bc <NRF24_init+0x2c>)
 800239c:	f001 fbd4 	bl	8003b48 <HAL_GPIO_WritePin>
	NRF24_unselect();
 80023a0:	2201      	movs	r2, #1
 80023a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023a6:	4805      	ldr	r0, [pc, #20]	@ (80023bc <NRF24_init+0x2c>)
 80023a8:	f001 fbce 	bl	8003b48 <HAL_GPIO_WritePin>
	NRF24_DefaultConfiguration();
 80023ac:	f7ff fdbe 	bl	8001f2c <NRF24_DefaultConfiguration>
	NRF24_mode = 0;
 80023b0:	4b03      	ldr	r3, [pc, #12]	@ (80023c0 <NRF24_init+0x30>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40020400 	.word	0x40020400
 80023c0:	20000153 	.word	0x20000153

080023c4 <NRF24_Transmit>:

void NRF24_Transmit(void){
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	NRF24_CheckFlags();
 80023c8:	f7ff ff0c 	bl	80021e4 <NRF24_CheckFlags>
	if(MAX_RT)  NRF24_write(STATUS, 0x70);
 80023cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002444 <NRF24_Transmit+0x80>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <NRF24_Transmit+0x18>
 80023d4:	2170      	movs	r1, #112	@ 0x70
 80023d6:	2007      	movs	r0, #7
 80023d8:	f7ff face 	bl	8001978 <NRF24_write>
	if(TX_FULL) NRF24_FlushTxFIFO();
 80023dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002448 <NRF24_Transmit+0x84>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <NRF24_Transmit+0x24>
 80023e4:	f7ff fbe0 	bl	8001ba8 <NRF24_FlushTxFIFO>
	if(Cont_TX > 10){
 80023e8:	4b18      	ldr	r3, [pc, #96]	@ (800244c <NRF24_Transmit+0x88>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b0a      	cmp	r3, #10
 80023ee:	d909      	bls.n	8002404 <NRF24_Transmit+0x40>
		Cont_TX = 0;
 80023f0:	4b16      	ldr	r3, [pc, #88]	@ (800244c <NRF24_Transmit+0x88>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
		NRF24_FIFO_write(TxBuffer, 32);
 80023f6:	2120      	movs	r1, #32
 80023f8:	4815      	ldr	r0, [pc, #84]	@ (8002450 <NRF24_Transmit+0x8c>)
 80023fa:	f7ff ff63 	bl	80022c4 <NRF24_FIFO_write>
		Transmision_Flag = 0;
 80023fe:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <NRF24_Transmit+0x90>)
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
	}
	switch (Transmision_Flag) {
 8002404:	4b13      	ldr	r3, [pc, #76]	@ (8002454 <NRF24_Transmit+0x90>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <NRF24_Transmit+0x4e>
 800240c:	2b01      	cmp	r3, #1
 800240e:	d00a      	beq.n	8002426 <NRF24_Transmit+0x62>
 8002410:	e010      	b.n	8002434 <NRF24_Transmit+0x70>
		case 0:
			NRF24_Enable();
 8002412:	2201      	movs	r2, #1
 8002414:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002418:	480f      	ldr	r0, [pc, #60]	@ (8002458 <NRF24_Transmit+0x94>)
 800241a:	f001 fb95 	bl	8003b48 <HAL_GPIO_WritePin>
			Transmision_Flag = 1;
 800241e:	4b0d      	ldr	r3, [pc, #52]	@ (8002454 <NRF24_Transmit+0x90>)
 8002420:	2201      	movs	r2, #1
 8002422:	701a      	strb	r2, [r3, #0]
			break;
 8002424:	e006      	b.n	8002434 <NRF24_Transmit+0x70>
		case 1:
			NRF24_Disable();
 8002426:	2200      	movs	r2, #0
 8002428:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800242c:	480a      	ldr	r0, [pc, #40]	@ (8002458 <NRF24_Transmit+0x94>)
 800242e:	f001 fb8b 	bl	8003b48 <HAL_GPIO_WritePin>
			break;
 8002432:	bf00      	nop
	}
	++Cont_TX;
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <NRF24_Transmit+0x88>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	3301      	adds	r3, #1
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b03      	ldr	r3, [pc, #12]	@ (800244c <NRF24_Transmit+0x88>)
 800243e:	701a      	strb	r2, [r3, #0]
}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}
 8002444:	2000014b 	.word	0x2000014b
 8002448:	20000149 	.word	0x20000149
 800244c:	20000152 	.word	0x20000152
 8002450:	20000154 	.word	0x20000154
 8002454:	20000148 	.word	0x20000148
 8002458:	40020400 	.word	0x40020400

0800245c <NRF24_Receive>:

void NRF24_Receive(void){
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
	NRF24_CheckFlags();
 8002460:	f7ff fec0 	bl	80021e4 <NRF24_CheckFlags>
	if(RX_P_NO != 7){
 8002464:	4b04      	ldr	r3, [pc, #16]	@ (8002478 <NRF24_Receive+0x1c>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b07      	cmp	r3, #7
 800246a:	d002      	beq.n	8002472 <NRF24_Receive+0x16>
		NRF24_FIFO_read(RxBuffer);
 800246c:	4803      	ldr	r0, [pc, #12]	@ (800247c <NRF24_Receive+0x20>)
 800246e:	f7ff ff5d 	bl	800232c <NRF24_FIFO_read>
	}
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2000014a 	.word	0x2000014a
 800247c:	20000174 	.word	0x20000174

08002480 <NRF24_TxBuffer>:

void NRF24_TxBuffer(void){
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
	++TxBuffer[0];
 8002486:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <NRF24_TxBuffer+0x5c>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	3301      	adds	r3, #1
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <NRF24_TxBuffer+0x5c>)
 8002490:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < 30; ++n) {
 8002492:	2300      	movs	r3, #0
 8002494:	71fb      	strb	r3, [r7, #7]
 8002496:	e016      	b.n	80024c6 <NRF24_TxBuffer+0x46>
		if(TxBuffer[n]==0xFF){
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	4a10      	ldr	r2, [pc, #64]	@ (80024dc <NRF24_TxBuffer+0x5c>)
 800249c:	5cd3      	ldrb	r3, [r2, r3]
 800249e:	2bff      	cmp	r3, #255	@ 0xff
 80024a0:	d10e      	bne.n	80024c0 <NRF24_TxBuffer+0x40>
			++TxBuffer[n];
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	4a0d      	ldr	r2, [pc, #52]	@ (80024dc <NRF24_TxBuffer+0x5c>)
 80024a6:	5cd2      	ldrb	r2, [r2, r3]
 80024a8:	3201      	adds	r2, #1
 80024aa:	b2d1      	uxtb	r1, r2
 80024ac:	4a0b      	ldr	r2, [pc, #44]	@ (80024dc <NRF24_TxBuffer+0x5c>)
 80024ae:	54d1      	strb	r1, [r2, r3]
			++TxBuffer[n+1];
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	3301      	adds	r3, #1
 80024b4:	4a09      	ldr	r2, [pc, #36]	@ (80024dc <NRF24_TxBuffer+0x5c>)
 80024b6:	5cd2      	ldrb	r2, [r2, r3]
 80024b8:	3201      	adds	r2, #1
 80024ba:	b2d1      	uxtb	r1, r2
 80024bc:	4a07      	ldr	r2, [pc, #28]	@ (80024dc <NRF24_TxBuffer+0x5c>)
 80024be:	54d1      	strb	r1, [r2, r3]
	for (uint8_t n = 0; n < 30; ++n) {
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	3301      	adds	r3, #1
 80024c4:	71fb      	strb	r3, [r7, #7]
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	2b1d      	cmp	r3, #29
 80024ca:	d9e5      	bls.n	8002498 <NRF24_TxBuffer+0x18>
		}
	}
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000154 	.word	0x20000154

080024e0 <NRF24_StateMachine>:

void NRF24_StateMachine(void){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
	switch (NRF24_mode){
 80024e4:	4b12      	ldr	r3, [pc, #72]	@ (8002530 <NRF24_StateMachine+0x50>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d81a      	bhi.n	8002522 <NRF24_StateMachine+0x42>
 80024ec:	a201      	add	r2, pc, #4	@ (adr r2, 80024f4 <NRF24_StateMachine+0x14>)
 80024ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f2:	bf00      	nop
 80024f4:	08002505 	.word	0x08002505
 80024f8:	08002519 	.word	0x08002519
 80024fc:	08002513 	.word	0x08002513
 8002500:	08002529 	.word	0x08002529
		case Init:
			NRF24_RxConfiguration();
 8002504:	f7ff fdae 	bl	8002064 <NRF24_RxConfiguration>
			NRF24_PowerUp();
 8002508:	f7ff fb8e 	bl	8001c28 <NRF24_PowerUp>
			NRF24_ActualConfiguration();
 800250c:	f7ff fbaa 	bl	8001c64 <NRF24_ActualConfiguration>
			break;
 8002510:	e00b      	b.n	800252a <NRF24_StateMachine+0x4a>
		case RxMode:

			NRF24_Receive();
 8002512:	f7ff ffa3 	bl	800245c <NRF24_Receive>
			break;
 8002516:	e008      	b.n	800252a <NRF24_StateMachine+0x4a>
		case TxMode:
			NRF24_TxBuffer();
 8002518:	f7ff ffb2 	bl	8002480 <NRF24_TxBuffer>
			NRF24_Transmit();
 800251c:	f7ff ff52 	bl	80023c4 <NRF24_Transmit>
			break;
 8002520:	e003      	b.n	800252a <NRF24_StateMachine+0x4a>
		case PowerSave:

			break;
		default:
			NRF24_init();
 8002522:	f7ff ff35 	bl	8002390 <NRF24_init>
	}
}
 8002526:	e000      	b.n	800252a <NRF24_StateMachine+0x4a>
			break;
 8002528:	bf00      	nop
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000153 	.word	0x20000153

08002534 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <MX_DMA_Init+0x78>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	4a1a      	ldr	r2, [pc, #104]	@ (80025ac <MX_DMA_Init+0x78>)
 8002544:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002548:	6313      	str	r3, [r2, #48]	@ 0x30
 800254a:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <MX_DMA_Init+0x78>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <MX_DMA_Init+0x78>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	4a13      	ldr	r2, [pc, #76]	@ (80025ac <MX_DMA_Init+0x78>)
 8002560:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002564:	6313      	str	r3, [r2, #48]	@ 0x30
 8002566:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <MX_DMA_Init+0x78>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002572:	2200      	movs	r2, #0
 8002574:	2105      	movs	r1, #5
 8002576:	200e      	movs	r0, #14
 8002578:	f000 fda6 	bl	80030c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800257c:	200e      	movs	r0, #14
 800257e:	f000 fdbf 	bl	8003100 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002582:	2200      	movs	r2, #0
 8002584:	2105      	movs	r1, #5
 8002586:	2038      	movs	r0, #56	@ 0x38
 8002588:	f000 fd9e 	bl	80030c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800258c:	2038      	movs	r0, #56	@ 0x38
 800258e:	f000 fdb7 	bl	8003100 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2105      	movs	r1, #5
 8002596:	203a      	movs	r0, #58	@ 0x3a
 8002598:	f000 fd96 	bl	80030c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800259c:	203a      	movs	r0, #58	@ 0x3a
 800259e:	f000 fdaf 	bl	8003100 <HAL_NVIC_EnableIRQ>

}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800

080025b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4a07      	ldr	r2, [pc, #28]	@ (80025dc <vApplicationGetIdleTaskMemory+0x2c>)
 80025c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	4a06      	ldr	r2, [pc, #24]	@ (80025e0 <vApplicationGetIdleTaskMemory+0x30>)
 80025c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2280      	movs	r2, #128	@ 0x80
 80025cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	200001a4 	.word	0x200001a4
 80025e0:	200001f8 	.word	0x200001f8

080025e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80025e4:	b5b0      	push	{r4, r5, r7, lr}
 80025e6:	b09c      	sub	sp, #112	@ 0x70
 80025e8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task10ms */
  osThreadDef(Task10ms, Task_10ms, osPriorityNormal, 0, 128);
 80025ea:	4b27      	ldr	r3, [pc, #156]	@ (8002688 <MX_FREERTOS_Init+0xa4>)
 80025ec:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80025f0:	461d      	mov	r5, r3
 80025f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task10msHandle = osThreadCreate(osThread(Task10ms), NULL);
 80025fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f003 fcd0 	bl	8005faa <osThreadCreate>
 800260a:	4603      	mov	r3, r0
 800260c:	4a1f      	ldr	r2, [pc, #124]	@ (800268c <MX_FREERTOS_Init+0xa8>)
 800260e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task100ms */
  osThreadDef(Task100ms, Task_100ms, osPriorityNormal, 0, 128);
 8002610:	4b1f      	ldr	r3, [pc, #124]	@ (8002690 <MX_FREERTOS_Init+0xac>)
 8002612:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8002616:	461d      	mov	r5, r3
 8002618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800261a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800261c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task100msHandle = osThreadCreate(osThread(Task100ms), NULL);
 8002624:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f003 fcbd 	bl	8005faa <osThreadCreate>
 8002630:	4603      	mov	r3, r0
 8002632:	4a18      	ldr	r2, [pc, #96]	@ (8002694 <MX_FREERTOS_Init+0xb0>)
 8002634:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1000ms */
  osThreadDef(Task1000ms, Task_1000ms, osPriorityIdle, 0, 128);
 8002636:	4b18      	ldr	r3, [pc, #96]	@ (8002698 <MX_FREERTOS_Init+0xb4>)
 8002638:	f107 041c 	add.w	r4, r7, #28
 800263c:	461d      	mov	r5, r3
 800263e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002642:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1000msHandle = osThreadCreate(osThread(Task1000ms), NULL);
 800264a:	f107 031c 	add.w	r3, r7, #28
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f003 fcaa 	bl	8005faa <osThreadCreate>
 8002656:	4603      	mov	r3, r0
 8002658:	4a10      	ldr	r2, [pc, #64]	@ (800269c <MX_FREERTOS_Init+0xb8>)
 800265a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1ms */
  osThreadDef(Task1ms, Task_1ms, osPriorityAboveNormal, 0, 128);
 800265c:	4b10      	ldr	r3, [pc, #64]	@ (80026a0 <MX_FREERTOS_Init+0xbc>)
 800265e:	463c      	mov	r4, r7
 8002660:	461d      	mov	r5, r3
 8002662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800266a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1msHandle = osThreadCreate(osThread(Task1ms), NULL);
 800266e:	463b      	mov	r3, r7
 8002670:	2100      	movs	r1, #0
 8002672:	4618      	mov	r0, r3
 8002674:	f003 fc99 	bl	8005faa <osThreadCreate>
 8002678:	4603      	mov	r3, r0
 800267a:	4a0a      	ldr	r2, [pc, #40]	@ (80026a4 <MX_FREERTOS_Init+0xc0>)
 800267c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800267e:	bf00      	nop
 8002680:	3770      	adds	r7, #112	@ 0x70
 8002682:	46bd      	mov	sp, r7
 8002684:	bdb0      	pop	{r4, r5, r7, pc}
 8002686:	bf00      	nop
 8002688:	080078a8 	.word	0x080078a8
 800268c:	20000194 	.word	0x20000194
 8002690:	080078d0 	.word	0x080078d0
 8002694:	20000198 	.word	0x20000198
 8002698:	080078f8 	.word	0x080078f8
 800269c:	2000019c 	.word	0x2000019c
 80026a0:	0800791c 	.word	0x0800791c
 80026a4:	200001a0 	.word	0x200001a0

080026a8 <Task_10ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_10ms */
void Task_10ms(void const * argument)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_10ms */
	task_init_10ms();
 80026b0:	f7fe fbff 	bl	8000eb2 <task_init_10ms>
  /* Infinite loop */
  for(;;)
  {
	task_10ms();
 80026b4:	f7fe fc04 	bl	8000ec0 <task_10ms>
    osDelay(10);
 80026b8:	200a      	movs	r0, #10
 80026ba:	f003 fcc2 	bl	8006042 <osDelay>
	task_10ms();
 80026be:	bf00      	nop
 80026c0:	e7f8      	b.n	80026b4 <Task_10ms+0xc>

080026c2 <Task_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_100ms */
void Task_100ms(void const * argument)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_100ms */
	task_init_100ms();
 80026ca:	f7fe fc00 	bl	8000ece <task_init_100ms>
  /* Infinite loop */
  for(;;)
  {
	task_100ms();
 80026ce:	f7fe fc05 	bl	8000edc <task_100ms>
    osDelay(100);
 80026d2:	2064      	movs	r0, #100	@ 0x64
 80026d4:	f003 fcb5 	bl	8006042 <osDelay>
	task_100ms();
 80026d8:	bf00      	nop
 80026da:	e7f8      	b.n	80026ce <Task_100ms+0xc>

080026dc <Task_1000ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1000ms */
void Task_1000ms(void const * argument)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1000ms */
	task_init_1000ms();
 80026e4:	f7fe fc00 	bl	8000ee8 <task_init_1000ms>
  /* Infinite loop */
  for(;;)
  {
	task_1000ms();
 80026e8:	f7fe fc05 	bl	8000ef6 <task_1000ms>
    osDelay(1000);
 80026ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026f0:	f003 fca7 	bl	8006042 <osDelay>
	task_1000ms();
 80026f4:	bf00      	nop
 80026f6:	e7f7      	b.n	80026e8 <Task_1000ms+0xc>

080026f8 <Task_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1ms */
void Task_1ms(void const * argument)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1ms */
	task_init_1ms();
 8002700:	f7fe fbca 	bl	8000e98 <task_init_1ms>
  /* Infinite loop */
  for(;;)
  {
	task_1ms();
 8002704:	f7fe fbcf 	bl	8000ea6 <task_1ms>
    osDelay(1);
 8002708:	2001      	movs	r0, #1
 800270a:	f003 fc9a 	bl	8006042 <osDelay>
	task_1ms();
 800270e:	bf00      	nop
 8002710:	e7f8      	b.n	8002704 <Task_1ms+0xc>
	...

08002714 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08a      	sub	sp, #40	@ 0x28
 8002718:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	60da      	str	r2, [r3, #12]
 8002728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	4b32      	ldr	r3, [pc, #200]	@ (80027f8 <MX_GPIO_Init+0xe4>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	4a31      	ldr	r2, [pc, #196]	@ (80027f8 <MX_GPIO_Init+0xe4>)
 8002734:	f043 0304 	orr.w	r3, r3, #4
 8002738:	6313      	str	r3, [r2, #48]	@ 0x30
 800273a:	4b2f      	ldr	r3, [pc, #188]	@ (80027f8 <MX_GPIO_Init+0xe4>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	4b2b      	ldr	r3, [pc, #172]	@ (80027f8 <MX_GPIO_Init+0xe4>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	4a2a      	ldr	r2, [pc, #168]	@ (80027f8 <MX_GPIO_Init+0xe4>)
 8002750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002754:	6313      	str	r3, [r2, #48]	@ 0x30
 8002756:	4b28      	ldr	r3, [pc, #160]	@ (80027f8 <MX_GPIO_Init+0xe4>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	4b24      	ldr	r3, [pc, #144]	@ (80027f8 <MX_GPIO_Init+0xe4>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	4a23      	ldr	r2, [pc, #140]	@ (80027f8 <MX_GPIO_Init+0xe4>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6313      	str	r3, [r2, #48]	@ 0x30
 8002772:	4b21      	ldr	r3, [pc, #132]	@ (80027f8 <MX_GPIO_Init+0xe4>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	4b1d      	ldr	r3, [pc, #116]	@ (80027f8 <MX_GPIO_Init+0xe4>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	4a1c      	ldr	r2, [pc, #112]	@ (80027f8 <MX_GPIO_Init+0xe4>)
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	6313      	str	r3, [r2, #48]	@ 0x30
 800278e:	4b1a      	ldr	r3, [pc, #104]	@ (80027f8 <MX_GPIO_Init+0xe4>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP280_CSN_GPIO_Port, BMP280_CSN_Pin, GPIO_PIN_RESET);
 800279a:	2200      	movs	r2, #0
 800279c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027a0:	4816      	ldr	r0, [pc, #88]	@ (80027fc <MX_GPIO_Init+0xe8>)
 80027a2:	f001 f9d1 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 80027a6:	2200      	movs	r2, #0
 80027a8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80027ac:	4814      	ldr	r0, [pc, #80]	@ (8002800 <MX_GPIO_Init+0xec>)
 80027ae:	f001 f9cb 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP280_CSN_Pin;
 80027b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b8:	2301      	movs	r3, #1
 80027ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c0:	2300      	movs	r3, #0
 80027c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMP280_CSN_GPIO_Port, &GPIO_InitStruct);
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	4619      	mov	r1, r3
 80027ca:	480c      	ldr	r0, [pc, #48]	@ (80027fc <MX_GPIO_Init+0xe8>)
 80027cc:	f001 f838 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 80027d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d6:	2301      	movs	r3, #1
 80027d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027de:	2300      	movs	r3, #0
 80027e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e2:	f107 0314 	add.w	r3, r7, #20
 80027e6:	4619      	mov	r1, r3
 80027e8:	4805      	ldr	r0, [pc, #20]	@ (8002800 <MX_GPIO_Init+0xec>)
 80027ea:	f001 f829 	bl	8003840 <HAL_GPIO_Init>

}
 80027ee:	bf00      	nop
 80027f0:	3728      	adds	r7, #40	@ 0x28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40020000 	.word	0x40020000
 8002800:	40020400 	.word	0x40020400

08002804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002808:	f000 fb64 	bl	8002ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800280c:	f000 f812 	bl	8002834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002810:	f7ff ff80 	bl	8002714 <MX_GPIO_Init>
  MX_DMA_Init();
 8002814:	f7ff fe8e 	bl	8002534 <MX_DMA_Init>
  MX_SPI1_Init();
 8002818:	f000 f88c 	bl	8002934 <MX_SPI1_Init>
  MX_SPI2_Init();
 800281c:	f000 f8c0 	bl	80029a0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  NRF24_init();
 8002820:	f7ff fdb6 	bl	8002390 <NRF24_init>
  BMP280_init();
 8002824:	f7ff f85e 	bl	80018e4 <BMP280_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002828:	f7ff fedc 	bl	80025e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800282c:	f003 fbb6 	bl	8005f9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002830:	bf00      	nop
 8002832:	e7fd      	b.n	8002830 <main+0x2c>

08002834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b094      	sub	sp, #80	@ 0x50
 8002838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800283a:	f107 0320 	add.w	r3, r7, #32
 800283e:	2230      	movs	r2, #48	@ 0x30
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f004 fdee 	bl	8007424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002848:	f107 030c 	add.w	r3, r7, #12
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002858:	2300      	movs	r3, #0
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	4b27      	ldr	r3, [pc, #156]	@ (80028fc <SystemClock_Config+0xc8>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	4a26      	ldr	r2, [pc, #152]	@ (80028fc <SystemClock_Config+0xc8>)
 8002862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002866:	6413      	str	r3, [r2, #64]	@ 0x40
 8002868:	4b24      	ldr	r3, [pc, #144]	@ (80028fc <SystemClock_Config+0xc8>)
 800286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002874:	2300      	movs	r3, #0
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	4b21      	ldr	r3, [pc, #132]	@ (8002900 <SystemClock_Config+0xcc>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a20      	ldr	r2, [pc, #128]	@ (8002900 <SystemClock_Config+0xcc>)
 800287e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b1e      	ldr	r3, [pc, #120]	@ (8002900 <SystemClock_Config+0xcc>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002890:	2302      	movs	r3, #2
 8002892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002894:	2301      	movs	r3, #1
 8002896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002898:	2310      	movs	r3, #16
 800289a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800289c:	2302      	movs	r3, #2
 800289e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028a0:	2300      	movs	r3, #0
 80028a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028a4:	2308      	movs	r3, #8
 80028a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80028a8:	2364      	movs	r3, #100	@ 0x64
 80028aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028ac:	2302      	movs	r3, #2
 80028ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80028b0:	2304      	movs	r3, #4
 80028b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028b4:	f107 0320 	add.w	r3, r7, #32
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 f95f 	bl	8003b7c <HAL_RCC_OscConfig>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80028c4:	f000 f830 	bl	8002928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028c8:	230f      	movs	r3, #15
 80028ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028cc:	2302      	movs	r3, #2
 80028ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80028de:	f107 030c 	add.w	r3, r7, #12
 80028e2:	2103      	movs	r1, #3
 80028e4:	4618      	mov	r0, r3
 80028e6:	f001 fbc1 	bl	800406c <HAL_RCC_ClockConfig>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80028f0:	f000 f81a 	bl	8002928 <Error_Handler>
  }
}
 80028f4:	bf00      	nop
 80028f6:	3750      	adds	r7, #80	@ 0x50
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	40007000 	.word	0x40007000

08002904 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a04      	ldr	r2, [pc, #16]	@ (8002924 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d101      	bne.n	800291a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002916:	f000 faff 	bl	8002f18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40014800 	.word	0x40014800

08002928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800292c:	b672      	cpsid	i
}
 800292e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002930:	bf00      	nop
 8002932:	e7fd      	b.n	8002930 <Error_Handler+0x8>

08002934 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002938:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <MX_SPI1_Init+0x64>)
 800293a:	4a18      	ldr	r2, [pc, #96]	@ (800299c <MX_SPI1_Init+0x68>)
 800293c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800293e:	4b16      	ldr	r3, [pc, #88]	@ (8002998 <MX_SPI1_Init+0x64>)
 8002940:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002944:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002946:	4b14      	ldr	r3, [pc, #80]	@ (8002998 <MX_SPI1_Init+0x64>)
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800294c:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <MX_SPI1_Init+0x64>)
 800294e:	2200      	movs	r2, #0
 8002950:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002952:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <MX_SPI1_Init+0x64>)
 8002954:	2200      	movs	r2, #0
 8002956:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002958:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <MX_SPI1_Init+0x64>)
 800295a:	2200      	movs	r2, #0
 800295c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800295e:	4b0e      	ldr	r3, [pc, #56]	@ (8002998 <MX_SPI1_Init+0x64>)
 8002960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002964:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002966:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <MX_SPI1_Init+0x64>)
 8002968:	2218      	movs	r2, #24
 800296a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800296c:	4b0a      	ldr	r3, [pc, #40]	@ (8002998 <MX_SPI1_Init+0x64>)
 800296e:	2200      	movs	r2, #0
 8002970:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002972:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <MX_SPI1_Init+0x64>)
 8002974:	2200      	movs	r2, #0
 8002976:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002978:	4b07      	ldr	r3, [pc, #28]	@ (8002998 <MX_SPI1_Init+0x64>)
 800297a:	2200      	movs	r2, #0
 800297c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800297e:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <MX_SPI1_Init+0x64>)
 8002980:	220a      	movs	r2, #10
 8002982:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002984:	4804      	ldr	r0, [pc, #16]	@ (8002998 <MX_SPI1_Init+0x64>)
 8002986:	f001 fdaf 	bl	80044e8 <HAL_SPI_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002990:	f7ff ffca 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}
 8002998:	200003f8 	.word	0x200003f8
 800299c:	40013000 	.word	0x40013000

080029a0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80029a4:	4b17      	ldr	r3, [pc, #92]	@ (8002a04 <MX_SPI2_Init+0x64>)
 80029a6:	4a18      	ldr	r2, [pc, #96]	@ (8002a08 <MX_SPI2_Init+0x68>)
 80029a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80029aa:	4b16      	ldr	r3, [pc, #88]	@ (8002a04 <MX_SPI2_Init+0x64>)
 80029ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80029b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80029b2:	4b14      	ldr	r3, [pc, #80]	@ (8002a04 <MX_SPI2_Init+0x64>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80029b8:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <MX_SPI2_Init+0x64>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029be:	4b11      	ldr	r3, [pc, #68]	@ (8002a04 <MX_SPI2_Init+0x64>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a04 <MX_SPI2_Init+0x64>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80029ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002a04 <MX_SPI2_Init+0x64>)
 80029cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80029d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002a04 <MX_SPI2_Init+0x64>)
 80029d4:	2218      	movs	r2, #24
 80029d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a04 <MX_SPI2_Init+0x64>)
 80029da:	2200      	movs	r2, #0
 80029dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80029de:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <MX_SPI2_Init+0x64>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e4:	4b07      	ldr	r3, [pc, #28]	@ (8002a04 <MX_SPI2_Init+0x64>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80029ea:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <MX_SPI2_Init+0x64>)
 80029ec:	220a      	movs	r2, #10
 80029ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80029f0:	4804      	ldr	r0, [pc, #16]	@ (8002a04 <MX_SPI2_Init+0x64>)
 80029f2:	f001 fd79 	bl	80044e8 <HAL_SPI_Init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80029fc:	f7ff ff94 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000450 	.word	0x20000450
 8002a08:	40003800 	.word	0x40003800

08002a0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08c      	sub	sp, #48	@ 0x30
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 031c 	add.w	r3, r7, #28
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a8a      	ldr	r2, [pc, #552]	@ (8002c54 <HAL_SPI_MspInit+0x248>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	f040 8089 	bne.w	8002b42 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a30:	2300      	movs	r3, #0
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	4b88      	ldr	r3, [pc, #544]	@ (8002c58 <HAL_SPI_MspInit+0x24c>)
 8002a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a38:	4a87      	ldr	r2, [pc, #540]	@ (8002c58 <HAL_SPI_MspInit+0x24c>)
 8002a3a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a40:	4b85      	ldr	r3, [pc, #532]	@ (8002c58 <HAL_SPI_MspInit+0x24c>)
 8002a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	4b81      	ldr	r3, [pc, #516]	@ (8002c58 <HAL_SPI_MspInit+0x24c>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a54:	4a80      	ldr	r2, [pc, #512]	@ (8002c58 <HAL_SPI_MspInit+0x24c>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a5c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c58 <HAL_SPI_MspInit+0x24c>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MISO_Pin|NRF24_MOSI_Pin;
 8002a68:	23e0      	movs	r3, #224	@ 0xe0
 8002a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a74:	2303      	movs	r3, #3
 8002a76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a78:	2305      	movs	r3, #5
 8002a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	4619      	mov	r1, r3
 8002a82:	4876      	ldr	r0, [pc, #472]	@ (8002c5c <HAL_SPI_MspInit+0x250>)
 8002a84:	f000 fedc 	bl	8003840 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002a88:	4b75      	ldr	r3, [pc, #468]	@ (8002c60 <HAL_SPI_MspInit+0x254>)
 8002a8a:	4a76      	ldr	r2, [pc, #472]	@ (8002c64 <HAL_SPI_MspInit+0x258>)
 8002a8c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002a8e:	4b74      	ldr	r3, [pc, #464]	@ (8002c60 <HAL_SPI_MspInit+0x254>)
 8002a90:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002a94:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a96:	4b72      	ldr	r3, [pc, #456]	@ (8002c60 <HAL_SPI_MspInit+0x254>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a9c:	4b70      	ldr	r3, [pc, #448]	@ (8002c60 <HAL_SPI_MspInit+0x254>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002aa2:	4b6f      	ldr	r3, [pc, #444]	@ (8002c60 <HAL_SPI_MspInit+0x254>)
 8002aa4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002aa8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8002c60 <HAL_SPI_MspInit+0x254>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ab0:	4b6b      	ldr	r3, [pc, #428]	@ (8002c60 <HAL_SPI_MspInit+0x254>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8002c60 <HAL_SPI_MspInit+0x254>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002abc:	4b68      	ldr	r3, [pc, #416]	@ (8002c60 <HAL_SPI_MspInit+0x254>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ac2:	4b67      	ldr	r3, [pc, #412]	@ (8002c60 <HAL_SPI_MspInit+0x254>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002ac8:	4865      	ldr	r0, [pc, #404]	@ (8002c60 <HAL_SPI_MspInit+0x254>)
 8002aca:	f000 fb27 	bl	800311c <HAL_DMA_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002ad4:	f7ff ff28 	bl	8002928 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a61      	ldr	r2, [pc, #388]	@ (8002c60 <HAL_SPI_MspInit+0x254>)
 8002adc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002ade:	4a60      	ldr	r2, [pc, #384]	@ (8002c60 <HAL_SPI_MspInit+0x254>)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8002ae4:	4b60      	ldr	r3, [pc, #384]	@ (8002c68 <HAL_SPI_MspInit+0x25c>)
 8002ae6:	4a61      	ldr	r2, [pc, #388]	@ (8002c6c <HAL_SPI_MspInit+0x260>)
 8002ae8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8002aea:	4b5f      	ldr	r3, [pc, #380]	@ (8002c68 <HAL_SPI_MspInit+0x25c>)
 8002aec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002af0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002af2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c68 <HAL_SPI_MspInit+0x25c>)
 8002af4:	2240      	movs	r2, #64	@ 0x40
 8002af6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002af8:	4b5b      	ldr	r3, [pc, #364]	@ (8002c68 <HAL_SPI_MspInit+0x25c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002afe:	4b5a      	ldr	r3, [pc, #360]	@ (8002c68 <HAL_SPI_MspInit+0x25c>)
 8002b00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b04:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b06:	4b58      	ldr	r3, [pc, #352]	@ (8002c68 <HAL_SPI_MspInit+0x25c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b0c:	4b56      	ldr	r3, [pc, #344]	@ (8002c68 <HAL_SPI_MspInit+0x25c>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002b12:	4b55      	ldr	r3, [pc, #340]	@ (8002c68 <HAL_SPI_MspInit+0x25c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b18:	4b53      	ldr	r3, [pc, #332]	@ (8002c68 <HAL_SPI_MspInit+0x25c>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b1e:	4b52      	ldr	r3, [pc, #328]	@ (8002c68 <HAL_SPI_MspInit+0x25c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002b24:	4850      	ldr	r0, [pc, #320]	@ (8002c68 <HAL_SPI_MspInit+0x25c>)
 8002b26:	f000 faf9 	bl	800311c <HAL_DMA_Init>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8002b30:	f7ff fefa 	bl	8002928 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a4c      	ldr	r2, [pc, #304]	@ (8002c68 <HAL_SPI_MspInit+0x25c>)
 8002b38:	649a      	str	r2, [r3, #72]	@ 0x48
 8002b3a:	4a4b      	ldr	r2, [pc, #300]	@ (8002c68 <HAL_SPI_MspInit+0x25c>)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002b40:	e084      	b.n	8002c4c <HAL_SPI_MspInit+0x240>
  else if(spiHandle->Instance==SPI2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a4a      	ldr	r2, [pc, #296]	@ (8002c70 <HAL_SPI_MspInit+0x264>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d17f      	bne.n	8002c4c <HAL_SPI_MspInit+0x240>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	4b41      	ldr	r3, [pc, #260]	@ (8002c58 <HAL_SPI_MspInit+0x24c>)
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	4a40      	ldr	r2, [pc, #256]	@ (8002c58 <HAL_SPI_MspInit+0x24c>)
 8002b56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b5c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c58 <HAL_SPI_MspInit+0x24c>)
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c58 <HAL_SPI_MspInit+0x24c>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b70:	4a39      	ldr	r2, [pc, #228]	@ (8002c58 <HAL_SPI_MspInit+0x24c>)
 8002b72:	f043 0304 	orr.w	r3, r3, #4
 8002b76:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b78:	4b37      	ldr	r3, [pc, #220]	@ (8002c58 <HAL_SPI_MspInit+0x24c>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b84:	2300      	movs	r3, #0
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	4b33      	ldr	r3, [pc, #204]	@ (8002c58 <HAL_SPI_MspInit+0x24c>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8c:	4a32      	ldr	r2, [pc, #200]	@ (8002c58 <HAL_SPI_MspInit+0x24c>)
 8002b8e:	f043 0302 	orr.w	r3, r3, #2
 8002b92:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b94:	4b30      	ldr	r3, [pc, #192]	@ (8002c58 <HAL_SPI_MspInit+0x24c>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP280_MISO_Pin|BMP280_MOSI_Pin;
 8002ba0:	230c      	movs	r3, #12
 8002ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bac:	2303      	movs	r3, #3
 8002bae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bb0:	2305      	movs	r3, #5
 8002bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb4:	f107 031c 	add.w	r3, r7, #28
 8002bb8:	4619      	mov	r1, r3
 8002bba:	482e      	ldr	r0, [pc, #184]	@ (8002c74 <HAL_SPI_MspInit+0x268>)
 8002bbc:	f000 fe40 	bl	8003840 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BMP280_SCK_Pin;
 8002bc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bd2:	2305      	movs	r3, #5
 8002bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BMP280_SCK_GPIO_Port, &GPIO_InitStruct);
 8002bd6:	f107 031c 	add.w	r3, r7, #28
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4826      	ldr	r0, [pc, #152]	@ (8002c78 <HAL_SPI_MspInit+0x26c>)
 8002bde:	f000 fe2f 	bl	8003840 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002be2:	4b26      	ldr	r3, [pc, #152]	@ (8002c7c <HAL_SPI_MspInit+0x270>)
 8002be4:	4a26      	ldr	r2, [pc, #152]	@ (8002c80 <HAL_SPI_MspInit+0x274>)
 8002be6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002be8:	4b24      	ldr	r3, [pc, #144]	@ (8002c7c <HAL_SPI_MspInit+0x270>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bee:	4b23      	ldr	r3, [pc, #140]	@ (8002c7c <HAL_SPI_MspInit+0x270>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bf4:	4b21      	ldr	r3, [pc, #132]	@ (8002c7c <HAL_SPI_MspInit+0x270>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bfa:	4b20      	ldr	r3, [pc, #128]	@ (8002c7c <HAL_SPI_MspInit+0x270>)
 8002bfc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c00:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c02:	4b1e      	ldr	r3, [pc, #120]	@ (8002c7c <HAL_SPI_MspInit+0x270>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c08:	4b1c      	ldr	r3, [pc, #112]	@ (8002c7c <HAL_SPI_MspInit+0x270>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c7c <HAL_SPI_MspInit+0x270>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c14:	4b19      	ldr	r3, [pc, #100]	@ (8002c7c <HAL_SPI_MspInit+0x270>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c1a:	4b18      	ldr	r3, [pc, #96]	@ (8002c7c <HAL_SPI_MspInit+0x270>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002c20:	4816      	ldr	r0, [pc, #88]	@ (8002c7c <HAL_SPI_MspInit+0x270>)
 8002c22:	f000 fa7b 	bl	800311c <HAL_DMA_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_SPI_MspInit+0x224>
      Error_Handler();
 8002c2c:	f7ff fe7c 	bl	8002928 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a12      	ldr	r2, [pc, #72]	@ (8002c7c <HAL_SPI_MspInit+0x270>)
 8002c34:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002c36:	4a11      	ldr	r2, [pc, #68]	@ (8002c7c <HAL_SPI_MspInit+0x270>)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2105      	movs	r1, #5
 8002c40:	2024      	movs	r0, #36	@ 0x24
 8002c42:	f000 fa41 	bl	80030c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002c46:	2024      	movs	r0, #36	@ 0x24
 8002c48:	f000 fa5a 	bl	8003100 <HAL_NVIC_EnableIRQ>
}
 8002c4c:	bf00      	nop
 8002c4e:	3730      	adds	r7, #48	@ 0x30
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40013000 	.word	0x40013000
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40020000 	.word	0x40020000
 8002c60:	200004a8 	.word	0x200004a8
 8002c64:	40026410 	.word	0x40026410
 8002c68:	20000508 	.word	0x20000508
 8002c6c:	40026440 	.word	0x40026440
 8002c70:	40003800 	.word	0x40003800
 8002c74:	40020800 	.word	0x40020800
 8002c78:	40020400 	.word	0x40020400
 8002c7c:	20000568 	.word	0x20000568
 8002c80:	40026058 	.word	0x40026058

08002c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	4b12      	ldr	r3, [pc, #72]	@ (8002cd8 <HAL_MspInit+0x54>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c92:	4a11      	ldr	r2, [pc, #68]	@ (8002cd8 <HAL_MspInit+0x54>)
 8002c94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd8 <HAL_MspInit+0x54>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <HAL_MspInit+0x54>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd8 <HAL_MspInit+0x54>)
 8002cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cb6:	4b08      	ldr	r3, [pc, #32]	@ (8002cd8 <HAL_MspInit+0x54>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	210f      	movs	r1, #15
 8002cc6:	f06f 0001 	mvn.w	r0, #1
 8002cca:	f000 f9fd 	bl	80030c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800

08002cdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08c      	sub	sp, #48	@ 0x30
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8002cec:	2300      	movs	r3, #0
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8002dac <HAL_InitTick+0xd0>)
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf4:	4a2d      	ldr	r2, [pc, #180]	@ (8002dac <HAL_InitTick+0xd0>)
 8002cf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cfa:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8002dac <HAL_InitTick+0xd0>)
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d08:	f107 020c 	add.w	r2, r7, #12
 8002d0c:	f107 0310 	add.w	r3, r7, #16
 8002d10:	4611      	mov	r1, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f001 fbb6 	bl	8004484 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002d18:	f001 fba0 	bl	800445c <HAL_RCC_GetPCLK2Freq>
 8002d1c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d20:	4a23      	ldr	r2, [pc, #140]	@ (8002db0 <HAL_InitTick+0xd4>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0c9b      	lsrs	r3, r3, #18
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8002d2c:	4b21      	ldr	r3, [pc, #132]	@ (8002db4 <HAL_InitTick+0xd8>)
 8002d2e:	4a22      	ldr	r2, [pc, #136]	@ (8002db8 <HAL_InitTick+0xdc>)
 8002d30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8002d32:	4b20      	ldr	r3, [pc, #128]	@ (8002db4 <HAL_InitTick+0xd8>)
 8002d34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d38:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8002d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002db4 <HAL_InitTick+0xd8>)
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8002d40:	4b1c      	ldr	r3, [pc, #112]	@ (8002db4 <HAL_InitTick+0xd8>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d46:	4b1b      	ldr	r3, [pc, #108]	@ (8002db4 <HAL_InitTick+0xd8>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d4c:	4b19      	ldr	r3, [pc, #100]	@ (8002db4 <HAL_InitTick+0xd8>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8002d52:	4818      	ldr	r0, [pc, #96]	@ (8002db4 <HAL_InitTick+0xd8>)
 8002d54:	f002 fe96 	bl	8005a84 <HAL_TIM_Base_Init>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d11b      	bne.n	8002d9e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8002d66:	4813      	ldr	r0, [pc, #76]	@ (8002db4 <HAL_InitTick+0xd8>)
 8002d68:	f002 fee6 	bl	8005b38 <HAL_TIM_Base_Start_IT>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002d72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d111      	bne.n	8002d9e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002d7a:	201a      	movs	r0, #26
 8002d7c:	f000 f9c0 	bl	8003100 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b0f      	cmp	r3, #15
 8002d84:	d808      	bhi.n	8002d98 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8002d86:	2200      	movs	r2, #0
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	201a      	movs	r0, #26
 8002d8c:	f000 f99c 	bl	80030c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d90:	4a0a      	ldr	r2, [pc, #40]	@ (8002dbc <HAL_InitTick+0xe0>)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e002      	b.n	8002d9e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002d9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3730      	adds	r7, #48	@ 0x30
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800
 8002db0:	431bde83 	.word	0x431bde83
 8002db4:	200005c8 	.word	0x200005c8
 8002db8:	40014800 	.word	0x40014800
 8002dbc:	20000004 	.word	0x20000004

08002dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002dc4:	bf00      	nop
 8002dc6:	e7fd      	b.n	8002dc4 <NMI_Handler+0x4>

08002dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dcc:	bf00      	nop
 8002dce:	e7fd      	b.n	8002dcc <HardFault_Handler+0x4>

08002dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd4:	bf00      	nop
 8002dd6:	e7fd      	b.n	8002dd4 <MemManage_Handler+0x4>

08002dd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ddc:	bf00      	nop
 8002dde:	e7fd      	b.n	8002ddc <BusFault_Handler+0x4>

08002de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de4:	bf00      	nop
 8002de6:	e7fd      	b.n	8002de4 <UsageFault_Handler+0x4>

08002de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002dfc:	4802      	ldr	r0, [pc, #8]	@ (8002e08 <DMA1_Stream3_IRQHandler+0x10>)
 8002dfe:	f000 fab5 	bl	800336c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000568 	.word	0x20000568

08002e0c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002e10:	4802      	ldr	r0, [pc, #8]	@ (8002e1c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002e12:	f002 fef3 	bl	8005bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	200005c8 	.word	0x200005c8

08002e20 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002e24:	4802      	ldr	r0, [pc, #8]	@ (8002e30 <SPI2_IRQHandler+0x10>)
 8002e26:	f002 fa63 	bl	80052f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000450 	.word	0x20000450

08002e34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002e38:	4802      	ldr	r0, [pc, #8]	@ (8002e44 <DMA2_Stream0_IRQHandler+0x10>)
 8002e3a:	f000 fa97 	bl	800336c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	200004a8 	.word	0x200004a8

08002e48 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002e4c:	4802      	ldr	r0, [pc, #8]	@ (8002e58 <DMA2_Stream2_IRQHandler+0x10>)
 8002e4e:	f000 fa8d 	bl	800336c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000508 	.word	0x20000508

08002e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e60:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <SystemInit+0x20>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e66:	4a05      	ldr	r2, [pc, #20]	@ (8002e7c <SystemInit+0x20>)
 8002e68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002eb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e84:	f7ff ffea 	bl	8002e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e88:	480c      	ldr	r0, [pc, #48]	@ (8002ebc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e8a:	490d      	ldr	r1, [pc, #52]	@ (8002ec0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e90:	e002      	b.n	8002e98 <LoopCopyDataInit>

08002e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e96:	3304      	adds	r3, #4

08002e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e9c:	d3f9      	bcc.n	8002e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8002ecc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ea4:	e001      	b.n	8002eaa <LoopFillZerobss>

08002ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ea8:	3204      	adds	r2, #4

08002eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eac:	d3fb      	bcc.n	8002ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eae:	f004 fac7 	bl	8007440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eb2:	f7ff fca7 	bl	8002804 <main>
  bx  lr    
 8002eb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002eb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ec0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002ec4:	08007974 	.word	0x08007974
  ldr r2, =_sbss
 8002ec8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002ecc:	200044a0 	.word	0x200044a0

08002ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ed0:	e7fe      	b.n	8002ed0 <ADC_IRQHandler>
	...

08002ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f14 <HAL_Init+0x40>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f14 <HAL_Init+0x40>)
 8002ede:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <HAL_Init+0x40>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f14 <HAL_Init+0x40>)
 8002eea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef0:	4b08      	ldr	r3, [pc, #32]	@ (8002f14 <HAL_Init+0x40>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a07      	ldr	r2, [pc, #28]	@ (8002f14 <HAL_Init+0x40>)
 8002ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002efc:	2003      	movs	r0, #3
 8002efe:	f000 f8d8 	bl	80030b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f02:	200f      	movs	r0, #15
 8002f04:	f7ff feea 	bl	8002cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f08:	f7ff febc 	bl	8002c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40023c00 	.word	0x40023c00

08002f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <HAL_IncTick+0x20>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <HAL_IncTick+0x24>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4413      	add	r3, r2
 8002f28:	4a04      	ldr	r2, [pc, #16]	@ (8002f3c <HAL_IncTick+0x24>)
 8002f2a:	6013      	str	r3, [r2, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000008 	.word	0x20000008
 8002f3c:	20000610 	.word	0x20000610

08002f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return uwTick;
 8002f44:	4b03      	ldr	r3, [pc, #12]	@ (8002f54 <HAL_GetTick+0x14>)
 8002f46:	681b      	ldr	r3, [r3, #0]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000610 	.word	0x20000610

08002f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f68:	4b0c      	ldr	r3, [pc, #48]	@ (8002f9c <__NVIC_SetPriorityGrouping+0x44>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f74:	4013      	ands	r3, r2
 8002f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f8a:	4a04      	ldr	r2, [pc, #16]	@ (8002f9c <__NVIC_SetPriorityGrouping+0x44>)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	60d3      	str	r3, [r2, #12]
}
 8002f90:	bf00      	nop
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa4:	4b04      	ldr	r3, [pc, #16]	@ (8002fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	f003 0307 	and.w	r3, r3, #7
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	db0b      	blt.n	8002fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	f003 021f 	and.w	r2, r3, #31
 8002fd4:	4907      	ldr	r1, [pc, #28]	@ (8002ff4 <__NVIC_EnableIRQ+0x38>)
 8002fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	2001      	movs	r0, #1
 8002fde:	fa00 f202 	lsl.w	r2, r0, r2
 8002fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	e000e100 	.word	0xe000e100

08002ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	6039      	str	r1, [r7, #0]
 8003002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003008:	2b00      	cmp	r3, #0
 800300a:	db0a      	blt.n	8003022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	b2da      	uxtb	r2, r3
 8003010:	490c      	ldr	r1, [pc, #48]	@ (8003044 <__NVIC_SetPriority+0x4c>)
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	0112      	lsls	r2, r2, #4
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	440b      	add	r3, r1
 800301c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003020:	e00a      	b.n	8003038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	b2da      	uxtb	r2, r3
 8003026:	4908      	ldr	r1, [pc, #32]	@ (8003048 <__NVIC_SetPriority+0x50>)
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	3b04      	subs	r3, #4
 8003030:	0112      	lsls	r2, r2, #4
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	440b      	add	r3, r1
 8003036:	761a      	strb	r2, [r3, #24]
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000e100 	.word	0xe000e100
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800304c:	b480      	push	{r7}
 800304e:	b089      	sub	sp, #36	@ 0x24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f1c3 0307 	rsb	r3, r3, #7
 8003066:	2b04      	cmp	r3, #4
 8003068:	bf28      	it	cs
 800306a:	2304      	movcs	r3, #4
 800306c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3304      	adds	r3, #4
 8003072:	2b06      	cmp	r3, #6
 8003074:	d902      	bls.n	800307c <NVIC_EncodePriority+0x30>
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3b03      	subs	r3, #3
 800307a:	e000      	b.n	800307e <NVIC_EncodePriority+0x32>
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003080:	f04f 32ff 	mov.w	r2, #4294967295
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43da      	mvns	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	401a      	ands	r2, r3
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003094:	f04f 31ff 	mov.w	r1, #4294967295
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	fa01 f303 	lsl.w	r3, r1, r3
 800309e:	43d9      	mvns	r1, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	4313      	orrs	r3, r2
         );
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3724      	adds	r7, #36	@ 0x24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff ff4c 	bl	8002f58 <__NVIC_SetPriorityGrouping>
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030da:	f7ff ff61 	bl	8002fa0 <__NVIC_GetPriorityGrouping>
 80030de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	68b9      	ldr	r1, [r7, #8]
 80030e4:	6978      	ldr	r0, [r7, #20]
 80030e6:	f7ff ffb1 	bl	800304c <NVIC_EncodePriority>
 80030ea:	4602      	mov	r2, r0
 80030ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f0:	4611      	mov	r1, r2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff ff80 	bl	8002ff8 <__NVIC_SetPriority>
}
 80030f8:	bf00      	nop
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ff54 	bl	8002fbc <__NVIC_EnableIRQ>
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003128:	f7ff ff0a 	bl	8002f40 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e099      	b.n	800326c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003158:	e00f      	b.n	800317a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800315a:	f7ff fef1 	bl	8002f40 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b05      	cmp	r3, #5
 8003166:	d908      	bls.n	800317a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2203      	movs	r2, #3
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e078      	b.n	800326c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1e8      	bne.n	800315a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4b38      	ldr	r3, [pc, #224]	@ (8003274 <HAL_DMA_Init+0x158>)
 8003194:	4013      	ands	r3, r2
 8003196:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d107      	bne.n	80031e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031dc:	4313      	orrs	r3, r2
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f023 0307 	bic.w	r3, r3, #7
 80031fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	2b04      	cmp	r3, #4
 800320c:	d117      	bne.n	800323e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	4313      	orrs	r3, r2
 8003216:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00e      	beq.n	800323e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fa91 	bl	8003748 <DMA_CheckFifoParam>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2240      	movs	r2, #64	@ 0x40
 8003230:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800323a:	2301      	movs	r3, #1
 800323c:	e016      	b.n	800326c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fa48 	bl	80036dc <DMA_CalcBaseAndBitshift>
 800324c:	4603      	mov	r3, r0
 800324e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003254:	223f      	movs	r2, #63	@ 0x3f
 8003256:	409a      	lsls	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	f010803f 	.word	0xf010803f

08003278 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_DMA_Start_IT+0x26>
 800329a:	2302      	movs	r3, #2
 800329c:	e040      	b.n	8003320 <HAL_DMA_Start_IT+0xa8>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d12f      	bne.n	8003312 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2202      	movs	r2, #2
 80032b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f9da 	bl	8003680 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d0:	223f      	movs	r2, #63	@ 0x3f
 80032d2:	409a      	lsls	r2, r3
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0216 	orr.w	r2, r2, #22
 80032e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d007      	beq.n	8003300 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0208 	orr.w	r2, r2, #8
 80032fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	e005      	b.n	800331e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800331a:	2302      	movs	r3, #2
 800331c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800331e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d004      	beq.n	8003346 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2280      	movs	r2, #128	@ 0x80
 8003340:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e00c      	b.n	8003360 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2205      	movs	r2, #5
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0201 	bic.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003378:	4b8e      	ldr	r3, [pc, #568]	@ (80035b4 <HAL_DMA_IRQHandler+0x248>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a8e      	ldr	r2, [pc, #568]	@ (80035b8 <HAL_DMA_IRQHandler+0x24c>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	0a9b      	lsrs	r3, r3, #10
 8003384:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003396:	2208      	movs	r2, #8
 8003398:	409a      	lsls	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d01a      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d013      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0204 	bic.w	r2, r2, #4
 80033be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c4:	2208      	movs	r2, #8
 80033c6:	409a      	lsls	r2, r3
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d0:	f043 0201 	orr.w	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033dc:	2201      	movs	r2, #1
 80033de:	409a      	lsls	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d012      	beq.n	800340e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fa:	2201      	movs	r2, #1
 80033fc:	409a      	lsls	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003406:	f043 0202 	orr.w	r2, r3, #2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003412:	2204      	movs	r2, #4
 8003414:	409a      	lsls	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d012      	beq.n	8003444 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00b      	beq.n	8003444 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003430:	2204      	movs	r2, #4
 8003432:	409a      	lsls	r2, r3
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343c:	f043 0204 	orr.w	r2, r3, #4
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003448:	2210      	movs	r2, #16
 800344a:	409a      	lsls	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d043      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d03c      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003466:	2210      	movs	r2, #16
 8003468:	409a      	lsls	r2, r3
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d018      	beq.n	80034ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d108      	bne.n	800349c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d024      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
 800349a:	e01f      	b.n	80034dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01b      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4798      	blx	r3
 80034ac:	e016      	b.n	80034dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d107      	bne.n	80034cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0208 	bic.w	r2, r2, #8
 80034ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e0:	2220      	movs	r2, #32
 80034e2:	409a      	lsls	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 808f 	beq.w	800360c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8087 	beq.w	800360c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003502:	2220      	movs	r2, #32
 8003504:	409a      	lsls	r2, r3
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b05      	cmp	r3, #5
 8003514:	d136      	bne.n	8003584 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0216 	bic.w	r2, r2, #22
 8003524:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003534:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d103      	bne.n	8003546 <HAL_DMA_IRQHandler+0x1da>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0208 	bic.w	r2, r2, #8
 8003554:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355a:	223f      	movs	r2, #63	@ 0x3f
 800355c:	409a      	lsls	r2, r3
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003576:	2b00      	cmp	r3, #0
 8003578:	d07e      	beq.n	8003678 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	4798      	blx	r3
        }
        return;
 8003582:	e079      	b.n	8003678 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01d      	beq.n	80035ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10d      	bne.n	80035bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d031      	beq.n	800360c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	4798      	blx	r3
 80035b0:	e02c      	b.n	800360c <HAL_DMA_IRQHandler+0x2a0>
 80035b2:	bf00      	nop
 80035b4:	20000000 	.word	0x20000000
 80035b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d023      	beq.n	800360c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
 80035cc:	e01e      	b.n	800360c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10f      	bne.n	80035fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0210 	bic.w	r2, r2, #16
 80035ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003610:	2b00      	cmp	r3, #0
 8003612:	d032      	beq.n	800367a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d022      	beq.n	8003666 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2205      	movs	r2, #5
 8003624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	3301      	adds	r3, #1
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	429a      	cmp	r2, r3
 8003642:	d307      	bcc.n	8003654 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f2      	bne.n	8003638 <HAL_DMA_IRQHandler+0x2cc>
 8003652:	e000      	b.n	8003656 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003654:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	4798      	blx	r3
 8003676:	e000      	b.n	800367a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003678:	bf00      	nop
    }
  }
}
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800369c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b40      	cmp	r3, #64	@ 0x40
 80036ac:	d108      	bne.n	80036c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036be:	e007      	b.n	80036d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	60da      	str	r2, [r3, #12]
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	3b10      	subs	r3, #16
 80036ec:	4a14      	ldr	r2, [pc, #80]	@ (8003740 <DMA_CalcBaseAndBitshift+0x64>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036f6:	4a13      	ldr	r2, [pc, #76]	@ (8003744 <DMA_CalcBaseAndBitshift+0x68>)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d909      	bls.n	800371e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	1d1a      	adds	r2, r3, #4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	659a      	str	r2, [r3, #88]	@ 0x58
 800371c:	e007      	b.n	800372e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003726:	f023 0303 	bic.w	r3, r3, #3
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	aaaaaaab 	.word	0xaaaaaaab
 8003744:	08007958 	.word	0x08007958

08003748 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003758:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d11f      	bne.n	80037a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d856      	bhi.n	8003816 <DMA_CheckFifoParam+0xce>
 8003768:	a201      	add	r2, pc, #4	@ (adr r2, 8003770 <DMA_CheckFifoParam+0x28>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	08003781 	.word	0x08003781
 8003774:	08003793 	.word	0x08003793
 8003778:	08003781 	.word	0x08003781
 800377c:	08003817 	.word	0x08003817
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003784:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d046      	beq.n	800381a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003790:	e043      	b.n	800381a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003796:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800379a:	d140      	bne.n	800381e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a0:	e03d      	b.n	800381e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037aa:	d121      	bne.n	80037f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d837      	bhi.n	8003822 <DMA_CheckFifoParam+0xda>
 80037b2:	a201      	add	r2, pc, #4	@ (adr r2, 80037b8 <DMA_CheckFifoParam+0x70>)
 80037b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b8:	080037c9 	.word	0x080037c9
 80037bc:	080037cf 	.word	0x080037cf
 80037c0:	080037c9 	.word	0x080037c9
 80037c4:	080037e1 	.word	0x080037e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
      break;
 80037cc:	e030      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d025      	beq.n	8003826 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037de:	e022      	b.n	8003826 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037e8:	d11f      	bne.n	800382a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037ee:	e01c      	b.n	800382a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d903      	bls.n	80037fe <DMA_CheckFifoParam+0xb6>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d003      	beq.n	8003804 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037fc:	e018      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
      break;
 8003802:	e015      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003808:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00e      	beq.n	800382e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
      break;
 8003814:	e00b      	b.n	800382e <DMA_CheckFifoParam+0xe6>
      break;
 8003816:	bf00      	nop
 8003818:	e00a      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 800381a:	bf00      	nop
 800381c:	e008      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 800381e:	bf00      	nop
 8003820:	e006      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 8003822:	bf00      	nop
 8003824:	e004      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 8003826:	bf00      	nop
 8003828:	e002      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;   
 800382a:	bf00      	nop
 800382c:	e000      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 800382e:	bf00      	nop
    }
  } 
  
  return status; 
 8003830:	7bfb      	ldrb	r3, [r7, #15]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop

08003840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	@ 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	e159      	b.n	8003b10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800385c:	2201      	movs	r2, #1
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	429a      	cmp	r2, r3
 8003876:	f040 8148 	bne.w	8003b0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	2b01      	cmp	r3, #1
 8003884:	d005      	beq.n	8003892 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800388e:	2b02      	cmp	r3, #2
 8003890:	d130      	bne.n	80038f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	2203      	movs	r2, #3
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038c8:	2201      	movs	r2, #1
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 0201 	and.w	r2, r3, #1
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d017      	beq.n	8003930 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	2203      	movs	r2, #3
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d123      	bne.n	8003984 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	08da      	lsrs	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3208      	adds	r2, #8
 8003944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	220f      	movs	r2, #15
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	08da      	lsrs	r2, r3, #3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3208      	adds	r2, #8
 800397e:	69b9      	ldr	r1, [r7, #24]
 8003980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2203      	movs	r2, #3
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0203 	and.w	r2, r3, #3
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80a2 	beq.w	8003b0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	4b57      	ldr	r3, [pc, #348]	@ (8003b28 <HAL_GPIO_Init+0x2e8>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ce:	4a56      	ldr	r2, [pc, #344]	@ (8003b28 <HAL_GPIO_Init+0x2e8>)
 80039d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80039d6:	4b54      	ldr	r3, [pc, #336]	@ (8003b28 <HAL_GPIO_Init+0x2e8>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039e2:	4a52      	ldr	r2, [pc, #328]	@ (8003b2c <HAL_GPIO_Init+0x2ec>)
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	3302      	adds	r3, #2
 80039ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	220f      	movs	r2, #15
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a49      	ldr	r2, [pc, #292]	@ (8003b30 <HAL_GPIO_Init+0x2f0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d019      	beq.n	8003a42 <HAL_GPIO_Init+0x202>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a48      	ldr	r2, [pc, #288]	@ (8003b34 <HAL_GPIO_Init+0x2f4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <HAL_GPIO_Init+0x1fe>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a47      	ldr	r2, [pc, #284]	@ (8003b38 <HAL_GPIO_Init+0x2f8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00d      	beq.n	8003a3a <HAL_GPIO_Init+0x1fa>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a46      	ldr	r2, [pc, #280]	@ (8003b3c <HAL_GPIO_Init+0x2fc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d007      	beq.n	8003a36 <HAL_GPIO_Init+0x1f6>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a45      	ldr	r2, [pc, #276]	@ (8003b40 <HAL_GPIO_Init+0x300>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d101      	bne.n	8003a32 <HAL_GPIO_Init+0x1f2>
 8003a2e:	2304      	movs	r3, #4
 8003a30:	e008      	b.n	8003a44 <HAL_GPIO_Init+0x204>
 8003a32:	2307      	movs	r3, #7
 8003a34:	e006      	b.n	8003a44 <HAL_GPIO_Init+0x204>
 8003a36:	2303      	movs	r3, #3
 8003a38:	e004      	b.n	8003a44 <HAL_GPIO_Init+0x204>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e002      	b.n	8003a44 <HAL_GPIO_Init+0x204>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_GPIO_Init+0x204>
 8003a42:	2300      	movs	r3, #0
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	f002 0203 	and.w	r2, r2, #3
 8003a4a:	0092      	lsls	r2, r2, #2
 8003a4c:	4093      	lsls	r3, r2
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a54:	4935      	ldr	r1, [pc, #212]	@ (8003b2c <HAL_GPIO_Init+0x2ec>)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	089b      	lsrs	r3, r3, #2
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a62:	4b38      	ldr	r3, [pc, #224]	@ (8003b44 <HAL_GPIO_Init+0x304>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a86:	4a2f      	ldr	r2, [pc, #188]	@ (8003b44 <HAL_GPIO_Init+0x304>)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b44 <HAL_GPIO_Init+0x304>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ab0:	4a24      	ldr	r2, [pc, #144]	@ (8003b44 <HAL_GPIO_Init+0x304>)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ab6:	4b23      	ldr	r3, [pc, #140]	@ (8003b44 <HAL_GPIO_Init+0x304>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ada:	4a1a      	ldr	r2, [pc, #104]	@ (8003b44 <HAL_GPIO_Init+0x304>)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ae0:	4b18      	ldr	r3, [pc, #96]	@ (8003b44 <HAL_GPIO_Init+0x304>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b04:	4a0f      	ldr	r2, [pc, #60]	@ (8003b44 <HAL_GPIO_Init+0x304>)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2b0f      	cmp	r3, #15
 8003b14:	f67f aea2 	bls.w	800385c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	3724      	adds	r7, #36	@ 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40013800 	.word	0x40013800
 8003b30:	40020000 	.word	0x40020000
 8003b34:	40020400 	.word	0x40020400
 8003b38:	40020800 	.word	0x40020800
 8003b3c:	40020c00 	.word	0x40020c00
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40013c00 	.word	0x40013c00

08003b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	807b      	strh	r3, [r7, #2]
 8003b54:	4613      	mov	r3, r2
 8003b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b58:	787b      	ldrb	r3, [r7, #1]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b5e:	887a      	ldrh	r2, [r7, #2]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b64:	e003      	b.n	8003b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b66:	887b      	ldrh	r3, [r7, #2]
 8003b68:	041a      	lsls	r2, r3, #16
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	619a      	str	r2, [r3, #24]
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
	...

08003b7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e267      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d075      	beq.n	8003c86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b9a:	4b88      	ldr	r3, [pc, #544]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d00c      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba6:	4b85      	ldr	r3, [pc, #532]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d112      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb2:	4b82      	ldr	r3, [pc, #520]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc0:	4b7e      	ldr	r3, [pc, #504]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d05b      	beq.n	8003c84 <HAL_RCC_OscConfig+0x108>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d157      	bne.n	8003c84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e242      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003be0:	d106      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x74>
 8003be2:	4b76      	ldr	r3, [pc, #472]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a75      	ldr	r2, [pc, #468]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e01d      	b.n	8003c2c <HAL_RCC_OscConfig+0xb0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x98>
 8003bfa:	4b70      	ldr	r3, [pc, #448]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a6f      	ldr	r2, [pc, #444]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b6d      	ldr	r3, [pc, #436]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a6c      	ldr	r2, [pc, #432]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0xb0>
 8003c14:	4b69      	ldr	r3, [pc, #420]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a68      	ldr	r2, [pc, #416]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b66      	ldr	r3, [pc, #408]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a65      	ldr	r2, [pc, #404]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7ff f984 	bl	8002f40 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7ff f980 	bl	8002f40 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	@ 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e207      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	4b5b      	ldr	r3, [pc, #364]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0xc0>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7ff f970 	bl	8002f40 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c64:	f7ff f96c 	bl	8002f40 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	@ 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e1f3      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c76:	4b51      	ldr	r3, [pc, #324]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0xe8>
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d063      	beq.n	8003d5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c92:	4b4a      	ldr	r3, [pc, #296]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9e:	4b47      	ldr	r3, [pc, #284]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d11c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003caa:	4b44      	ldr	r3, [pc, #272]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d116      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb6:	4b41      	ldr	r3, [pc, #260]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_RCC_OscConfig+0x152>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d001      	beq.n	8003cce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e1c7      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cce:	4b3b      	ldr	r3, [pc, #236]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4937      	ldr	r1, [pc, #220]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce2:	e03a      	b.n	8003d5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d020      	beq.n	8003d2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cec:	4b34      	ldr	r3, [pc, #208]	@ (8003dc0 <HAL_RCC_OscConfig+0x244>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf2:	f7ff f925 	bl	8002f40 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cfa:	f7ff f921 	bl	8002f40 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e1a8      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d18:	4b28      	ldr	r3, [pc, #160]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4925      	ldr	r1, [pc, #148]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	600b      	str	r3, [r1, #0]
 8003d2c:	e015      	b.n	8003d5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d2e:	4b24      	ldr	r3, [pc, #144]	@ (8003dc0 <HAL_RCC_OscConfig+0x244>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7ff f904 	bl	8002f40 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d3c:	f7ff f900 	bl	8002f40 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e187      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d036      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d016      	beq.n	8003d9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d6e:	4b15      	ldr	r3, [pc, #84]	@ (8003dc4 <HAL_RCC_OscConfig+0x248>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d74:	f7ff f8e4 	bl	8002f40 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d7c:	f7ff f8e0 	bl	8002f40 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e167      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0x200>
 8003d9a:	e01b      	b.n	8003dd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d9c:	4b09      	ldr	r3, [pc, #36]	@ (8003dc4 <HAL_RCC_OscConfig+0x248>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da2:	f7ff f8cd 	bl	8002f40 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da8:	e00e      	b.n	8003dc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003daa:	f7ff f8c9 	bl	8002f40 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d907      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e150      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	42470000 	.word	0x42470000
 8003dc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc8:	4b88      	ldr	r3, [pc, #544]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003dca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1ea      	bne.n	8003daa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8097 	beq.w	8003f10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de2:	2300      	movs	r3, #0
 8003de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de6:	4b81      	ldr	r3, [pc, #516]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10f      	bne.n	8003e12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	4b7d      	ldr	r3, [pc, #500]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	4a7c      	ldr	r2, [pc, #496]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e02:	4b7a      	ldr	r3, [pc, #488]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e12:	4b77      	ldr	r3, [pc, #476]	@ (8003ff0 <HAL_RCC_OscConfig+0x474>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d118      	bne.n	8003e50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e1e:	4b74      	ldr	r3, [pc, #464]	@ (8003ff0 <HAL_RCC_OscConfig+0x474>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a73      	ldr	r2, [pc, #460]	@ (8003ff0 <HAL_RCC_OscConfig+0x474>)
 8003e24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e2a:	f7ff f889 	bl	8002f40 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e32:	f7ff f885 	bl	8002f40 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e10c      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e44:	4b6a      	ldr	r3, [pc, #424]	@ (8003ff0 <HAL_RCC_OscConfig+0x474>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d106      	bne.n	8003e66 <HAL_RCC_OscConfig+0x2ea>
 8003e58:	4b64      	ldr	r3, [pc, #400]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5c:	4a63      	ldr	r2, [pc, #396]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e64:	e01c      	b.n	8003ea0 <HAL_RCC_OscConfig+0x324>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b05      	cmp	r3, #5
 8003e6c:	d10c      	bne.n	8003e88 <HAL_RCC_OscConfig+0x30c>
 8003e6e:	4b5f      	ldr	r3, [pc, #380]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e72:	4a5e      	ldr	r2, [pc, #376]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e74:	f043 0304 	orr.w	r3, r3, #4
 8003e78:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e7a:	4b5c      	ldr	r3, [pc, #368]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7e:	4a5b      	ldr	r2, [pc, #364]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e86:	e00b      	b.n	8003ea0 <HAL_RCC_OscConfig+0x324>
 8003e88:	4b58      	ldr	r3, [pc, #352]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8c:	4a57      	ldr	r2, [pc, #348]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e8e:	f023 0301 	bic.w	r3, r3, #1
 8003e92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e94:	4b55      	ldr	r3, [pc, #340]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e98:	4a54      	ldr	r2, [pc, #336]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e9a:	f023 0304 	bic.w	r3, r3, #4
 8003e9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d015      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea8:	f7ff f84a 	bl	8002f40 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb0:	f7ff f846 	bl	8002f40 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e0cb      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec6:	4b49      	ldr	r3, [pc, #292]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0ee      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x334>
 8003ed2:	e014      	b.n	8003efe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed4:	f7ff f834 	bl	8002f40 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003edc:	f7ff f830 	bl	8002f40 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e0b5      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef2:	4b3e      	ldr	r3, [pc, #248]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1ee      	bne.n	8003edc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d105      	bne.n	8003f10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f04:	4b39      	ldr	r3, [pc, #228]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f08:	4a38      	ldr	r2, [pc, #224]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 80a1 	beq.w	800405c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f1a:	4b34      	ldr	r3, [pc, #208]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d05c      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d141      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	4b31      	ldr	r3, [pc, #196]	@ (8003ff4 <HAL_RCC_OscConfig+0x478>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f34:	f7ff f804 	bl	8002f40 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f3c:	f7ff f800 	bl	8002f40 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e087      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4e:	4b27      	ldr	r3, [pc, #156]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	019b      	lsls	r3, r3, #6
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	3b01      	subs	r3, #1
 8003f74:	041b      	lsls	r3, r3, #16
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	491b      	ldr	r1, [pc, #108]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f84:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff4 <HAL_RCC_OscConfig+0x478>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7fe ffd9 	bl	8002f40 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f92:	f7fe ffd5 	bl	8002f40 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e05c      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa4:	4b11      	ldr	r3, [pc, #68]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x416>
 8003fb0:	e054      	b.n	800405c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb2:	4b10      	ldr	r3, [pc, #64]	@ (8003ff4 <HAL_RCC_OscConfig+0x478>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb8:	f7fe ffc2 	bl	8002f40 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc0:	f7fe ffbe 	bl	8002f40 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e045      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd2:	4b06      	ldr	r3, [pc, #24]	@ (8003fec <HAL_RCC_OscConfig+0x470>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x444>
 8003fde:	e03d      	b.n	800405c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d107      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e038      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8004068 <HAL_RCC_OscConfig+0x4ec>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d028      	beq.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004010:	429a      	cmp	r2, r3
 8004012:	d121      	bne.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401e:	429a      	cmp	r2, r3
 8004020:	d11a      	bne.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004028:	4013      	ands	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800402e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004030:	4293      	cmp	r3, r2
 8004032:	d111      	bne.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403e:	085b      	lsrs	r3, r3, #1
 8004040:	3b01      	subs	r3, #1
 8004042:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d107      	bne.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004052:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40023800 	.word	0x40023800

0800406c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0cc      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004080:	4b68      	ldr	r3, [pc, #416]	@ (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d90c      	bls.n	80040a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408e:	4b65      	ldr	r3, [pc, #404]	@ (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b63      	ldr	r3, [pc, #396]	@ (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0b8      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d020      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c0:	4b59      	ldr	r3, [pc, #356]	@ (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	4a58      	ldr	r2, [pc, #352]	@ (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d8:	4b53      	ldr	r3, [pc, #332]	@ (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4a52      	ldr	r2, [pc, #328]	@ (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e4:	4b50      	ldr	r3, [pc, #320]	@ (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	494d      	ldr	r1, [pc, #308]	@ (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d044      	beq.n	800418c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d107      	bne.n	800411a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410a:	4b47      	ldr	r3, [pc, #284]	@ (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d119      	bne.n	800414a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e07f      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d003      	beq.n	800412a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004126:	2b03      	cmp	r3, #3
 8004128:	d107      	bne.n	800413a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800412a:	4b3f      	ldr	r3, [pc, #252]	@ (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e06f      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413a:	4b3b      	ldr	r3, [pc, #236]	@ (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e067      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800414a:	4b37      	ldr	r3, [pc, #220]	@ (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f023 0203 	bic.w	r2, r3, #3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4934      	ldr	r1, [pc, #208]	@ (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	4313      	orrs	r3, r2
 800415a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800415c:	f7fe fef0 	bl	8002f40 <HAL_GetTick>
 8004160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004162:	e00a      	b.n	800417a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004164:	f7fe feec 	bl	8002f40 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e04f      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417a:	4b2b      	ldr	r3, [pc, #172]	@ (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 020c 	and.w	r2, r3, #12
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	429a      	cmp	r2, r3
 800418a:	d1eb      	bne.n	8004164 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800418c:	4b25      	ldr	r3, [pc, #148]	@ (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d20c      	bcs.n	80041b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419a:	4b22      	ldr	r3, [pc, #136]	@ (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b20      	ldr	r3, [pc, #128]	@ (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e032      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c0:	4b19      	ldr	r3, [pc, #100]	@ (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4916      	ldr	r1, [pc, #88]	@ (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041de:	4b12      	ldr	r3, [pc, #72]	@ (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	490e      	ldr	r1, [pc, #56]	@ (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041f2:	f000 f821 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 80041f6:	4602      	mov	r2, r0
 80041f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	091b      	lsrs	r3, r3, #4
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	490a      	ldr	r1, [pc, #40]	@ (800422c <HAL_RCC_ClockConfig+0x1c0>)
 8004204:	5ccb      	ldrb	r3, [r1, r3]
 8004206:	fa22 f303 	lsr.w	r3, r2, r3
 800420a:	4a09      	ldr	r2, [pc, #36]	@ (8004230 <HAL_RCC_ClockConfig+0x1c4>)
 800420c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800420e:	4b09      	ldr	r3, [pc, #36]	@ (8004234 <HAL_RCC_ClockConfig+0x1c8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe fd62 	bl	8002cdc <HAL_InitTick>

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40023c00 	.word	0x40023c00
 8004228:	40023800 	.word	0x40023800
 800422c:	08007940 	.word	0x08007940
 8004230:	20000000 	.word	0x20000000
 8004234:	20000004 	.word	0x20000004

08004238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800423c:	b094      	sub	sp, #80	@ 0x50
 800423e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	647b      	str	r3, [r7, #68]	@ 0x44
 8004244:	2300      	movs	r3, #0
 8004246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004248:	2300      	movs	r3, #0
 800424a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004250:	4b79      	ldr	r3, [pc, #484]	@ (8004438 <HAL_RCC_GetSysClockFreq+0x200>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	2b08      	cmp	r3, #8
 800425a:	d00d      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x40>
 800425c:	2b08      	cmp	r3, #8
 800425e:	f200 80e1 	bhi.w	8004424 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0x34>
 8004266:	2b04      	cmp	r3, #4
 8004268:	d003      	beq.n	8004272 <HAL_RCC_GetSysClockFreq+0x3a>
 800426a:	e0db      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800426c:	4b73      	ldr	r3, [pc, #460]	@ (800443c <HAL_RCC_GetSysClockFreq+0x204>)
 800426e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004270:	e0db      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004272:	4b73      	ldr	r3, [pc, #460]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x208>)
 8004274:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004276:	e0d8      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004278:	4b6f      	ldr	r3, [pc, #444]	@ (8004438 <HAL_RCC_GetSysClockFreq+0x200>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004280:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004282:	4b6d      	ldr	r3, [pc, #436]	@ (8004438 <HAL_RCC_GetSysClockFreq+0x200>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d063      	beq.n	8004356 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428e:	4b6a      	ldr	r3, [pc, #424]	@ (8004438 <HAL_RCC_GetSysClockFreq+0x200>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	2200      	movs	r2, #0
 8004296:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004298:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800429a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80042a2:	2300      	movs	r3, #0
 80042a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80042a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80042aa:	4622      	mov	r2, r4
 80042ac:	462b      	mov	r3, r5
 80042ae:	f04f 0000 	mov.w	r0, #0
 80042b2:	f04f 0100 	mov.w	r1, #0
 80042b6:	0159      	lsls	r1, r3, #5
 80042b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042bc:	0150      	lsls	r0, r2, #5
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4621      	mov	r1, r4
 80042c4:	1a51      	subs	r1, r2, r1
 80042c6:	6139      	str	r1, [r7, #16]
 80042c8:	4629      	mov	r1, r5
 80042ca:	eb63 0301 	sbc.w	r3, r3, r1
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042dc:	4659      	mov	r1, fp
 80042de:	018b      	lsls	r3, r1, #6
 80042e0:	4651      	mov	r1, sl
 80042e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042e6:	4651      	mov	r1, sl
 80042e8:	018a      	lsls	r2, r1, #6
 80042ea:	4651      	mov	r1, sl
 80042ec:	ebb2 0801 	subs.w	r8, r2, r1
 80042f0:	4659      	mov	r1, fp
 80042f2:	eb63 0901 	sbc.w	r9, r3, r1
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004302:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004306:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800430a:	4690      	mov	r8, r2
 800430c:	4699      	mov	r9, r3
 800430e:	4623      	mov	r3, r4
 8004310:	eb18 0303 	adds.w	r3, r8, r3
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	462b      	mov	r3, r5
 8004318:	eb49 0303 	adc.w	r3, r9, r3
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800432a:	4629      	mov	r1, r5
 800432c:	024b      	lsls	r3, r1, #9
 800432e:	4621      	mov	r1, r4
 8004330:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004334:	4621      	mov	r1, r4
 8004336:	024a      	lsls	r2, r1, #9
 8004338:	4610      	mov	r0, r2
 800433a:	4619      	mov	r1, r3
 800433c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800433e:	2200      	movs	r2, #0
 8004340:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004342:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004344:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004348:	f7fc fc2e 	bl	8000ba8 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4613      	mov	r3, r2
 8004352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004354:	e058      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004356:	4b38      	ldr	r3, [pc, #224]	@ (8004438 <HAL_RCC_GetSysClockFreq+0x200>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	099b      	lsrs	r3, r3, #6
 800435c:	2200      	movs	r2, #0
 800435e:	4618      	mov	r0, r3
 8004360:	4611      	mov	r1, r2
 8004362:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004366:	623b      	str	r3, [r7, #32]
 8004368:	2300      	movs	r3, #0
 800436a:	627b      	str	r3, [r7, #36]	@ 0x24
 800436c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004370:	4642      	mov	r2, r8
 8004372:	464b      	mov	r3, r9
 8004374:	f04f 0000 	mov.w	r0, #0
 8004378:	f04f 0100 	mov.w	r1, #0
 800437c:	0159      	lsls	r1, r3, #5
 800437e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004382:	0150      	lsls	r0, r2, #5
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4641      	mov	r1, r8
 800438a:	ebb2 0a01 	subs.w	sl, r2, r1
 800438e:	4649      	mov	r1, r9
 8004390:	eb63 0b01 	sbc.w	fp, r3, r1
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043a8:	ebb2 040a 	subs.w	r4, r2, sl
 80043ac:	eb63 050b 	sbc.w	r5, r3, fp
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	00eb      	lsls	r3, r5, #3
 80043ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043be:	00e2      	lsls	r2, r4, #3
 80043c0:	4614      	mov	r4, r2
 80043c2:	461d      	mov	r5, r3
 80043c4:	4643      	mov	r3, r8
 80043c6:	18e3      	adds	r3, r4, r3
 80043c8:	603b      	str	r3, [r7, #0]
 80043ca:	464b      	mov	r3, r9
 80043cc:	eb45 0303 	adc.w	r3, r5, r3
 80043d0:	607b      	str	r3, [r7, #4]
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043de:	4629      	mov	r1, r5
 80043e0:	028b      	lsls	r3, r1, #10
 80043e2:	4621      	mov	r1, r4
 80043e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043e8:	4621      	mov	r1, r4
 80043ea:	028a      	lsls	r2, r1, #10
 80043ec:	4610      	mov	r0, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043f2:	2200      	movs	r2, #0
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	61fa      	str	r2, [r7, #28]
 80043f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043fc:	f7fc fbd4 	bl	8000ba8 <__aeabi_uldivmod>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4613      	mov	r3, r2
 8004406:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004408:	4b0b      	ldr	r3, [pc, #44]	@ (8004438 <HAL_RCC_GetSysClockFreq+0x200>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	0c1b      	lsrs	r3, r3, #16
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	3301      	adds	r3, #1
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004418:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800441a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004422:	e002      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004424:	4b05      	ldr	r3, [pc, #20]	@ (800443c <HAL_RCC_GetSysClockFreq+0x204>)
 8004426:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800442a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800442c:	4618      	mov	r0, r3
 800442e:	3750      	adds	r7, #80	@ 0x50
 8004430:	46bd      	mov	sp, r7
 8004432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800
 800443c:	00f42400 	.word	0x00f42400
 8004440:	007a1200 	.word	0x007a1200

08004444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004448:	4b03      	ldr	r3, [pc, #12]	@ (8004458 <HAL_RCC_GetHCLKFreq+0x14>)
 800444a:	681b      	ldr	r3, [r3, #0]
}
 800444c:	4618      	mov	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000000 	.word	0x20000000

0800445c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004460:	f7ff fff0 	bl	8004444 <HAL_RCC_GetHCLKFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b05      	ldr	r3, [pc, #20]	@ (800447c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	0b5b      	lsrs	r3, r3, #13
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	4903      	ldr	r1, [pc, #12]	@ (8004480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40023800 	.word	0x40023800
 8004480:	08007950 	.word	0x08007950

08004484 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	220f      	movs	r2, #15
 8004492:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004494:	4b12      	ldr	r3, [pc, #72]	@ (80044e0 <HAL_RCC_GetClockConfig+0x5c>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 0203 	and.w	r2, r3, #3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044a0:	4b0f      	ldr	r3, [pc, #60]	@ (80044e0 <HAL_RCC_GetClockConfig+0x5c>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80044ac:	4b0c      	ldr	r3, [pc, #48]	@ (80044e0 <HAL_RCC_GetClockConfig+0x5c>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80044b8:	4b09      	ldr	r3, [pc, #36]	@ (80044e0 <HAL_RCC_GetClockConfig+0x5c>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	08db      	lsrs	r3, r3, #3
 80044be:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044c6:	4b07      	ldr	r3, [pc, #28]	@ (80044e4 <HAL_RCC_GetClockConfig+0x60>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0207 	and.w	r2, r3, #7
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	601a      	str	r2, [r3, #0]
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800
 80044e4:	40023c00 	.word	0x40023c00

080044e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e07b      	b.n	80045f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d108      	bne.n	8004514 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800450a:	d009      	beq.n	8004520 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	61da      	str	r2, [r3, #28]
 8004512:	e005      	b.n	8004520 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fe fa66 	bl	8002a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004556:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a4:	ea42 0103 	orr.w	r1, r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	0c1b      	lsrs	r3, r3, #16
 80045be:	f003 0104 	and.w	r1, r3, #4
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c6:	f003 0210 	and.w	r2, r3, #16
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69da      	ldr	r2, [r3, #28]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b088      	sub	sp, #32
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_SPI_Transmit+0x22>
 8004618:	2302      	movs	r3, #2
 800461a:	e12d      	b.n	8004878 <HAL_SPI_Transmit+0x27e>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004624:	f7fe fc8c 	bl	8002f40 <HAL_GetTick>
 8004628:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800462a:	88fb      	ldrh	r3, [r7, #6]
 800462c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b01      	cmp	r3, #1
 8004638:	d002      	beq.n	8004640 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800463a:	2302      	movs	r3, #2
 800463c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800463e:	e116      	b.n	800486e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <HAL_SPI_Transmit+0x52>
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d102      	bne.n	8004652 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004650:	e10d      	b.n	800486e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2203      	movs	r2, #3
 8004656:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	88fa      	ldrh	r2, [r7, #6]
 800466a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	88fa      	ldrh	r2, [r7, #6]
 8004670:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004698:	d10f      	bne.n	80046ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c4:	2b40      	cmp	r3, #64	@ 0x40
 80046c6:	d007      	beq.n	80046d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046e0:	d14f      	bne.n	8004782 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_SPI_Transmit+0xf6>
 80046ea:	8afb      	ldrh	r3, [r7, #22]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d142      	bne.n	8004776 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f4:	881a      	ldrh	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004700:	1c9a      	adds	r2, r3, #2
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004714:	e02f      	b.n	8004776 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b02      	cmp	r3, #2
 8004722:	d112      	bne.n	800474a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004728:	881a      	ldrh	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004734:	1c9a      	adds	r2, r3, #2
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004748:	e015      	b.n	8004776 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800474a:	f7fe fbf9 	bl	8002f40 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d803      	bhi.n	8004762 <HAL_SPI_Transmit+0x168>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004760:	d102      	bne.n	8004768 <HAL_SPI_Transmit+0x16e>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d106      	bne.n	8004776 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004774:	e07b      	b.n	800486e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1ca      	bne.n	8004716 <HAL_SPI_Transmit+0x11c>
 8004780:	e050      	b.n	8004824 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <HAL_SPI_Transmit+0x196>
 800478a:	8afb      	ldrh	r3, [r7, #22]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d144      	bne.n	800481a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	330c      	adds	r3, #12
 800479a:	7812      	ldrb	r2, [r2, #0]
 800479c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80047b6:	e030      	b.n	800481a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d113      	bne.n	80047ee <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	330c      	adds	r3, #12
 80047d0:	7812      	ldrb	r2, [r2, #0]
 80047d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80047ec:	e015      	b.n	800481a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047ee:	f7fe fba7 	bl	8002f40 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d803      	bhi.n	8004806 <HAL_SPI_Transmit+0x20c>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004804:	d102      	bne.n	800480c <HAL_SPI_Transmit+0x212>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d106      	bne.n	800481a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004818:	e029      	b.n	800486e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1c9      	bne.n	80047b8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	6839      	ldr	r1, [r7, #0]
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f001 f8d7 	bl	80059dc <SPI_EndRxTxTransaction>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2220      	movs	r2, #32
 8004838:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10a      	bne.n	8004858 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004842:	2300      	movs	r3, #0
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e003      	b.n	800486e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004876:	7ffb      	ldrb	r3, [r7, #31]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3720      	adds	r7, #32
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af02      	add	r7, sp, #8
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	4613      	mov	r3, r2
 800488e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d002      	beq.n	80048a6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80048a0:	2302      	movs	r3, #2
 80048a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048a4:	e0fb      	b.n	8004a9e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048ae:	d112      	bne.n	80048d6 <HAL_SPI_Receive+0x56>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10e      	bne.n	80048d6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2204      	movs	r2, #4
 80048bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80048c0:	88fa      	ldrh	r2, [r7, #6]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	4613      	mov	r3, r2
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	68b9      	ldr	r1, [r7, #8]
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 f8ef 	bl	8004ab0 <HAL_SPI_TransmitReceive>
 80048d2:	4603      	mov	r3, r0
 80048d4:	e0e8      	b.n	8004aa8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d101      	bne.n	80048e4 <HAL_SPI_Receive+0x64>
 80048e0:	2302      	movs	r3, #2
 80048e2:	e0e1      	b.n	8004aa8 <HAL_SPI_Receive+0x228>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048ec:	f7fe fb28 	bl	8002f40 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <HAL_SPI_Receive+0x7e>
 80048f8:	88fb      	ldrh	r3, [r7, #6]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d102      	bne.n	8004904 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004902:	e0cc      	b.n	8004a9e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2204      	movs	r2, #4
 8004908:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	88fa      	ldrh	r2, [r7, #6]
 800491c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	88fa      	ldrh	r2, [r7, #6]
 8004922:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800494a:	d10f      	bne.n	800496c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800495a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800496a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004976:	2b40      	cmp	r3, #64	@ 0x40
 8004978:	d007      	beq.n	800498a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004988:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d16a      	bne.n	8004a68 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004992:	e032      	b.n	80049fa <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d115      	bne.n	80049ce <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f103 020c 	add.w	r2, r3, #12
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ae:	7812      	ldrb	r2, [r2, #0]
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049cc:	e015      	b.n	80049fa <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ce:	f7fe fab7 	bl	8002f40 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d803      	bhi.n	80049e6 <HAL_SPI_Receive+0x166>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e4:	d102      	bne.n	80049ec <HAL_SPI_Receive+0x16c>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d106      	bne.n	80049fa <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80049f8:	e051      	b.n	8004a9e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1c7      	bne.n	8004994 <HAL_SPI_Receive+0x114>
 8004a04:	e035      	b.n	8004a72 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d113      	bne.n	8004a3c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1e:	b292      	uxth	r2, r2
 8004a20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a26:	1c9a      	adds	r2, r3, #2
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a3a:	e015      	b.n	8004a68 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a3c:	f7fe fa80 	bl	8002f40 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d803      	bhi.n	8004a54 <HAL_SPI_Receive+0x1d4>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a52:	d102      	bne.n	8004a5a <HAL_SPI_Receive+0x1da>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d106      	bne.n	8004a68 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004a66:	e01a      	b.n	8004a9e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1c9      	bne.n	8004a06 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	6839      	ldr	r1, [r7, #0]
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 ff4a 	bl	8005910 <SPI_EndRxTransaction>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	75fb      	strb	r3, [r7, #23]
 8004a94:	e003      	b.n	8004a9e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08c      	sub	sp, #48	@ 0x30
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_SPI_TransmitReceive+0x26>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e198      	b.n	8004e08 <HAL_SPI_TransmitReceive+0x358>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ade:	f7fe fa2f 	bl	8002f40 <HAL_GetTick>
 8004ae2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004af4:	887b      	ldrh	r3, [r7, #2]
 8004af6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004af8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d00f      	beq.n	8004b20 <HAL_SPI_TransmitReceive+0x70>
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b06:	d107      	bne.n	8004b18 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d103      	bne.n	8004b18 <HAL_SPI_TransmitReceive+0x68>
 8004b10:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d003      	beq.n	8004b20 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
 8004b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004b1e:	e16d      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_SPI_TransmitReceive+0x82>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <HAL_SPI_TransmitReceive+0x82>
 8004b2c:	887b      	ldrh	r3, [r7, #2]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d103      	bne.n	8004b3a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004b38:	e160      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d003      	beq.n	8004b4e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2205      	movs	r2, #5
 8004b4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	887a      	ldrh	r2, [r7, #2]
 8004b5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	887a      	ldrh	r2, [r7, #2]
 8004b64:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	887a      	ldrh	r2, [r7, #2]
 8004b70:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	887a      	ldrh	r2, [r7, #2]
 8004b76:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8e:	2b40      	cmp	r3, #64	@ 0x40
 8004b90:	d007      	beq.n	8004ba2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ba0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004baa:	d17c      	bne.n	8004ca6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <HAL_SPI_TransmitReceive+0x10a>
 8004bb4:	8b7b      	ldrh	r3, [r7, #26]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d16a      	bne.n	8004c90 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbe:	881a      	ldrh	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bca:	1c9a      	adds	r2, r3, #2
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bde:	e057      	b.n	8004c90 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d11b      	bne.n	8004c26 <HAL_SPI_TransmitReceive+0x176>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d016      	beq.n	8004c26 <HAL_SPI_TransmitReceive+0x176>
 8004bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d113      	bne.n	8004c26 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c02:	881a      	ldrh	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0e:	1c9a      	adds	r2, r3, #2
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d119      	bne.n	8004c68 <HAL_SPI_TransmitReceive+0x1b8>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d014      	beq.n	8004c68 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c48:	b292      	uxth	r2, r2
 8004c4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c50:	1c9a      	adds	r2, r3, #2
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c64:	2301      	movs	r3, #1
 8004c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c68:	f7fe f96a 	bl	8002f40 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d80b      	bhi.n	8004c90 <HAL_SPI_TransmitReceive+0x1e0>
 8004c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7e:	d007      	beq.n	8004c90 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004c8e:	e0b5      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1a2      	bne.n	8004be0 <HAL_SPI_TransmitReceive+0x130>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d19d      	bne.n	8004be0 <HAL_SPI_TransmitReceive+0x130>
 8004ca4:	e080      	b.n	8004da8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_SPI_TransmitReceive+0x204>
 8004cae:	8b7b      	ldrh	r3, [r7, #26]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d16f      	bne.n	8004d94 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	330c      	adds	r3, #12
 8004cbe:	7812      	ldrb	r2, [r2, #0]
 8004cc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cda:	e05b      	b.n	8004d94 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d11c      	bne.n	8004d24 <HAL_SPI_TransmitReceive+0x274>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d017      	beq.n	8004d24 <HAL_SPI_TransmitReceive+0x274>
 8004cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d114      	bne.n	8004d24 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	330c      	adds	r3, #12
 8004d04:	7812      	ldrb	r2, [r2, #0]
 8004d06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d119      	bne.n	8004d66 <HAL_SPI_TransmitReceive+0x2b6>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d014      	beq.n	8004d66 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d62:	2301      	movs	r3, #1
 8004d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d66:	f7fe f8eb 	bl	8002f40 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d803      	bhi.n	8004d7e <HAL_SPI_TransmitReceive+0x2ce>
 8004d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7c:	d102      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x2d4>
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d107      	bne.n	8004d94 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004d92:	e033      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d19e      	bne.n	8004cdc <HAL_SPI_TransmitReceive+0x22c>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d199      	bne.n	8004cdc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004daa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 fe15 	bl	80059dc <SPI_EndRxTxTransaction>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d006      	beq.n	8004dc6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004dc4:	e01a      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004df2:	e003      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004e04:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3730      	adds	r7, #48	@ 0x30
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_SPI_Transmit_DMA+0x20>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e097      	b.n	8004f60 <HAL_SPI_Transmit_DMA+0x150>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d002      	beq.n	8004e4a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
 8004e46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e48:	e085      	b.n	8004f56 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <HAL_SPI_Transmit_DMA+0x46>
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d102      	bne.n	8004e5c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e5a:	e07c      	b.n	8004f56 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2203      	movs	r2, #3
 8004e60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	88fa      	ldrh	r2, [r7, #6]
 8004e74:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	88fa      	ldrh	r2, [r7, #6]
 8004e7a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ea2:	d10f      	bne.n	8004ec4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ec2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ec8:	4a27      	ldr	r2, [pc, #156]	@ (8004f68 <HAL_SPI_Transmit_DMA+0x158>)
 8004eca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ed0:	4a26      	ldr	r2, [pc, #152]	@ (8004f6c <HAL_SPI_Transmit_DMA+0x15c>)
 8004ed2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ed8:	4a25      	ldr	r2, [pc, #148]	@ (8004f70 <HAL_SPI_Transmit_DMA+0x160>)
 8004eda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eec:	4619      	mov	r1, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	330c      	adds	r3, #12
 8004ef4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004efa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004efc:	f7fe f9bc 	bl	8003278 <HAL_DMA_Start_IT>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f0a:	f043 0210 	orr.w	r2, r3, #16
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	75fb      	strb	r3, [r7, #23]

    goto error;
 8004f16:	e01e      	b.n	8004f56 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f22:	2b40      	cmp	r3, #64	@ 0x40
 8004f24:	d007      	beq.n	8004f36 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f34:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 0220 	orr.w	r2, r2, #32
 8004f44:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0202 	orr.w	r2, r2, #2
 8004f54:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	08005745 	.word	0x08005745
 8004f6c:	08005565 	.word	0x08005565
 8004f70:	08005799 	.word	0x08005799

08004f74 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d002      	beq.n	8004f98 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8004f92:	2302      	movs	r3, #2
 8004f94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f96:	e0a2      	b.n	80050de <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d110      	bne.n	8004fc2 <HAL_SPI_Receive_DMA+0x4e>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fa8:	d10b      	bne.n	8004fc2 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2204      	movs	r2, #4
 8004fae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	68b9      	ldr	r1, [r7, #8]
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f89f 	bl	80050fc <HAL_SPI_TransmitReceive_DMA>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	e092      	b.n	80050e8 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_SPI_Receive_DMA+0x5c>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e08b      	b.n	80050e8 <HAL_SPI_Receive_DMA+0x174>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if ((pData == NULL) || (Size == 0U))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <HAL_SPI_Receive_DMA+0x70>
 8004fde:	88fb      	ldrh	r3, [r7, #6]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d102      	bne.n	8004fea <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fe8:	e079      	b.n	80050de <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2204      	movs	r2, #4
 8004fee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	88fa      	ldrh	r2, [r7, #6]
 8005002:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	88fa      	ldrh	r2, [r7, #6]
 8005008:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800502a:	d10f      	bne.n	800504c <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800503a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800504a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005050:	4a27      	ldr	r2, [pc, #156]	@ (80050f0 <HAL_SPI_Receive_DMA+0x17c>)
 8005052:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005058:	4a26      	ldr	r2, [pc, #152]	@ (80050f4 <HAL_SPI_Receive_DMA+0x180>)
 800505a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005060:	4a25      	ldr	r2, [pc, #148]	@ (80050f8 <HAL_SPI_Receive_DMA+0x184>)
 8005062:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005068:	2200      	movs	r2, #0
 800506a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	330c      	adds	r3, #12
 8005076:	4619      	mov	r1, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005082:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005084:	f7fe f8f8 	bl	8003278 <HAL_DMA_Start_IT>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005092:	f043 0210 	orr.w	r2, r3, #16
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800509e:	e01e      	b.n	80050de <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050aa:	2b40      	cmp	r3, #64	@ 0x40
 80050ac:	d007      	beq.n	80050be <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050bc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0220 	orr.w	r2, r2, #32
 80050cc:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f042 0201 	orr.w	r2, r2, #1
 80050dc:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	08005761 	.word	0x08005761
 80050f4:	0800560d 	.word	0x0800560d
 80050f8:	08005799 	.word	0x08005799

080050fc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_SPI_TransmitReceive_DMA+0x20>
 8005118:	2302      	movs	r3, #2
 800511a:	e0db      	b.n	80052d4 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800512a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005132:	7dbb      	ldrb	r3, [r7, #22]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d00d      	beq.n	8005154 <HAL_SPI_TransmitReceive_DMA+0x58>
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800513e:	d106      	bne.n	800514e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d102      	bne.n	800514e <HAL_SPI_TransmitReceive_DMA+0x52>
 8005148:	7dbb      	ldrb	r3, [r7, #22]
 800514a:	2b04      	cmp	r3, #4
 800514c:	d002      	beq.n	8005154 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800514e:	2302      	movs	r3, #2
 8005150:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005152:	e0ba      	b.n	80052ca <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d005      	beq.n	8005166 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005160:	887b      	ldrh	r3, [r7, #2]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d102      	bne.n	800516c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	75fb      	strb	r3, [r7, #23]
    goto error;
 800516a:	e0ae      	b.n	80052ca <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b04      	cmp	r3, #4
 8005176:	d003      	beq.n	8005180 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2205      	movs	r2, #5
 800517c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	887a      	ldrh	r2, [r7, #2]
 8005190:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	887a      	ldrh	r2, [r7, #2]
 8005196:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	887a      	ldrh	r2, [r7, #2]
 80051a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	887a      	ldrh	r2, [r7, #2]
 80051a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d108      	bne.n	80051d4 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c6:	4a45      	ldr	r2, [pc, #276]	@ (80052dc <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 80051c8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ce:	4a44      	ldr	r2, [pc, #272]	@ (80052e0 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80051d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80051d2:	e007      	b.n	80051e4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d8:	4a42      	ldr	r2, [pc, #264]	@ (80052e4 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 80051da:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051e0:	4a41      	ldr	r2, [pc, #260]	@ (80052e8 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 80051e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051e8:	4a40      	ldr	r2, [pc, #256]	@ (80052ec <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80051ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051f0:	2200      	movs	r2, #0
 80051f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	330c      	adds	r3, #12
 80051fe:	4619      	mov	r1, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005204:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800520a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800520c:	f7fe f834 	bl	8003278 <HAL_DMA_Start_IT>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d008      	beq.n	8005228 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521a:	f043 0210 	orr.w	r2, r3, #16
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005226:	e050      	b.n	80052ca <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0201 	orr.w	r2, r2, #1
 8005236:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800523c:	2200      	movs	r2, #0
 800523e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005244:	2200      	movs	r2, #0
 8005246:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800524c:	2200      	movs	r2, #0
 800524e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005254:	2200      	movs	r2, #0
 8005256:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005260:	4619      	mov	r1, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	330c      	adds	r3, #12
 8005268:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800526e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005270:	f7fe f802 	bl	8003278 <HAL_DMA_Start_IT>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d008      	beq.n	800528c <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527e:	f043 0210 	orr.w	r2, r3, #16
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]

    goto error;
 800528a:	e01e      	b.n	80052ca <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005296:	2b40      	cmp	r3, #64	@ 0x40
 8005298:	d007      	beq.n	80052aa <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052a8:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0220 	orr.w	r2, r2, #32
 80052b8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0202 	orr.w	r2, r2, #2
 80052c8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	08005761 	.word	0x08005761
 80052e0:	0800560d 	.word	0x0800560d
 80052e4:	0800577d 	.word	0x0800577d
 80052e8:	080056b5 	.word	0x080056b5
 80052ec:	08005799 	.word	0x08005799

080052f0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10e      	bne.n	8005330 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005318:	2b00      	cmp	r3, #0
 800531a:	d009      	beq.n	8005330 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d004      	beq.n	8005330 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	4798      	blx	r3
    return;
 800532e:	e0ce      	b.n	80054ce <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d009      	beq.n	800534e <HAL_SPI_IRQHandler+0x5e>
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005340:	2b00      	cmp	r3, #0
 8005342:	d004      	beq.n	800534e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	4798      	blx	r3
    return;
 800534c:	e0bf      	b.n	80054ce <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	f003 0320 	and.w	r3, r3, #32
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <HAL_SPI_IRQHandler+0x7e>
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800535e:	2b00      	cmp	r3, #0
 8005360:	d105      	bne.n	800536e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80b0 	beq.w	80054ce <HAL_SPI_IRQHandler+0x1de>
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 80aa 	beq.w	80054ce <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005380:	2b00      	cmp	r3, #0
 8005382:	d023      	beq.n	80053cc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b03      	cmp	r3, #3
 800538e:	d011      	beq.n	80053b4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005394:	f043 0204 	orr.w	r2, r3, #4
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	e00b      	b.n	80053cc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053b4:	2300      	movs	r3, #0
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	613b      	str	r3, [r7, #16]
 80053c8:	693b      	ldr	r3, [r7, #16]
        return;
 80053ca:	e080      	b.n	80054ce <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d014      	beq.n	8005400 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053da:	f043 0201 	orr.w	r2, r3, #1
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00c      	beq.n	8005424 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540e:	f043 0208 	orr.w	r2, r3, #8
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005416:	2300      	movs	r3, #0
 8005418:	60bb      	str	r3, [r7, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	60bb      	str	r3, [r7, #8]
 8005422:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005428:	2b00      	cmp	r3, #0
 800542a:	d04f      	beq.n	80054cc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800543a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d104      	bne.n	8005458 <HAL_SPI_IRQHandler+0x168>
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d034      	beq.n	80054c2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0203 	bic.w	r2, r2, #3
 8005466:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800546c:	2b00      	cmp	r3, #0
 800546e:	d011      	beq.n	8005494 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005474:	4a17      	ldr	r2, [pc, #92]	@ (80054d4 <HAL_SPI_IRQHandler+0x1e4>)
 8005476:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800547c:	4618      	mov	r0, r3
 800547e:	f7fd ff53 	bl	8003328 <HAL_DMA_Abort_IT>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800548c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005498:	2b00      	cmp	r3, #0
 800549a:	d016      	beq.n	80054ca <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054a0:	4a0c      	ldr	r2, [pc, #48]	@ (80054d4 <HAL_SPI_IRQHandler+0x1e4>)
 80054a2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fd ff3d 	bl	8003328 <HAL_DMA_Abort_IT>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00a      	beq.n	80054ca <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80054c0:	e003      	b.n	80054ca <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f844 	bl	8005550 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80054c8:	e000      	b.n	80054cc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80054ca:	bf00      	nop
    return;
 80054cc:	bf00      	nop
  }
}
 80054ce:	3720      	adds	r7, #32
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	080057d9 	.word	0x080057d9

080054d8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005570:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005572:	f7fd fce5 	bl	8002f40 <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005586:	d03b      	beq.n	8005600 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0220 	bic.w	r2, r2, #32
 8005596:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0202 	bic.w	r2, r2, #2
 80055a6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	2164      	movs	r1, #100	@ 0x64
 80055ac:	6978      	ldr	r0, [r7, #20]
 80055ae:	f000 fa15 	bl	80059dc <SPI_EndRxTxTransaction>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d005      	beq.n	80055c4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055bc:	f043 0220 	orr.w	r2, r3, #32
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2200      	movs	r2, #0
 80055e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80055f8:	6978      	ldr	r0, [r7, #20]
 80055fa:	f7ff ffa9 	bl	8005550 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80055fe:	e002      	b.n	8005606 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005600:	6978      	ldr	r0, [r7, #20]
 8005602:	f7ff ff69 	bl	80054d8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005618:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800561a:	f7fd fc91 	bl	8002f40 <HAL_GetTick>
 800561e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800562a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800562e:	d03b      	beq.n	80056a8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0220 	bic.w	r2, r2, #32
 800563e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10d      	bne.n	8005664 <SPI_DMAReceiveCplt+0x58>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005650:	d108      	bne.n	8005664 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0203 	bic.w	r2, r2, #3
 8005660:	605a      	str	r2, [r3, #4]
 8005662:	e007      	b.n	8005674 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0201 	bic.w	r2, r2, #1
 8005672:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	2164      	movs	r1, #100	@ 0x64
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f949 	bl	8005910 <SPI_EndRxTransaction>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2220      	movs	r2, #32
 8005688:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f7ff ff55 	bl	8005550 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80056a6:	e002      	b.n	80056ae <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f7ff ff1f 	bl	80054ec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056c2:	f7fd fc3d 	bl	8002f40 <HAL_GetTick>
 80056c6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056d6:	d02f      	beq.n	8005738 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0220 	bic.w	r2, r2, #32
 80056e6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	2164      	movs	r1, #100	@ 0x64
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 f975 	bl	80059dc <SPI_EndRxTxTransaction>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056fc:	f043 0220 	orr.w	r2, r3, #32
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0203 	bic.w	r2, r2, #3
 8005712:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f7ff ff0d 	bl	8005550 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005736:	e002      	b.n	800573e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f7ff fee1 	bl	8005500 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005750:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f7ff fede 	bl	8005514 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005758:	bf00      	nop
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff feda 	bl	8005528 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005774:	bf00      	nop
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005788:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f7ff fed6 	bl	800553c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005790:	bf00      	nop
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0203 	bic.w	r2, r2, #3
 80057b4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ba:	f043 0210 	orr.w	r2, r3, #16
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f7ff fec0 	bl	8005550 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80057d0:	bf00      	nop
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f7ff feac 	bl	8005550 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80057f8:	bf00      	nop
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	603b      	str	r3, [r7, #0]
 800580c:	4613      	mov	r3, r2
 800580e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005810:	f7fd fb96 	bl	8002f40 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005818:	1a9b      	subs	r3, r3, r2
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	4413      	add	r3, r2
 800581e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005820:	f7fd fb8e 	bl	8002f40 <HAL_GetTick>
 8005824:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005826:	4b39      	ldr	r3, [pc, #228]	@ (800590c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	015b      	lsls	r3, r3, #5
 800582c:	0d1b      	lsrs	r3, r3, #20
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	fb02 f303 	mul.w	r3, r2, r3
 8005834:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005836:	e054      	b.n	80058e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583e:	d050      	beq.n	80058e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005840:	f7fd fb7e 	bl	8002f40 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	429a      	cmp	r2, r3
 800584e:	d902      	bls.n	8005856 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d13d      	bne.n	80058d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005864:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800586e:	d111      	bne.n	8005894 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005878:	d004      	beq.n	8005884 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005882:	d107      	bne.n	8005894 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005892:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800589c:	d10f      	bne.n	80058be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e017      	b.n	8005902 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	3b01      	subs	r3, #1
 80058e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4013      	ands	r3, r2
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	bf0c      	ite	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	2300      	movne	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d19b      	bne.n	8005838 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3720      	adds	r7, #32
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20000000 	.word	0x20000000

08005910 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af02      	add	r7, sp, #8
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005924:	d111      	bne.n	800594a <SPI_EndRxTransaction+0x3a>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800592e:	d004      	beq.n	800593a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005938:	d107      	bne.n	800594a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005948:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005952:	d12a      	bne.n	80059aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800595c:	d012      	beq.n	8005984 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2200      	movs	r2, #0
 8005966:	2180      	movs	r1, #128	@ 0x80
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f7ff ff49 	bl	8005800 <SPI_WaitFlagStateUntilTimeout>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d02d      	beq.n	80059d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005978:	f043 0220 	orr.w	r2, r3, #32
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e026      	b.n	80059d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2200      	movs	r2, #0
 800598c:	2101      	movs	r1, #1
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f7ff ff36 	bl	8005800 <SPI_WaitFlagStateUntilTimeout>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d01a      	beq.n	80059d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800599e:	f043 0220 	orr.w	r2, r3, #32
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e013      	b.n	80059d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2200      	movs	r2, #0
 80059b2:	2101      	movs	r1, #1
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f7ff ff23 	bl	8005800 <SPI_WaitFlagStateUntilTimeout>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d007      	beq.n	80059d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c4:	f043 0220 	orr.w	r2, r3, #32
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e000      	b.n	80059d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b088      	sub	sp, #32
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2201      	movs	r2, #1
 80059f0:	2102      	movs	r1, #2
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f7ff ff04 	bl	8005800 <SPI_WaitFlagStateUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d007      	beq.n	8005a0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a02:	f043 0220 	orr.w	r2, r3, #32
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e032      	b.n	8005a74 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8005a7c <SPI_EndRxTxTransaction+0xa0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a1b      	ldr	r2, [pc, #108]	@ (8005a80 <SPI_EndRxTxTransaction+0xa4>)
 8005a14:	fba2 2303 	umull	r2, r3, r2, r3
 8005a18:	0d5b      	lsrs	r3, r3, #21
 8005a1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a1e:	fb02 f303 	mul.w	r3, r2, r3
 8005a22:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a2c:	d112      	bne.n	8005a54 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2200      	movs	r2, #0
 8005a36:	2180      	movs	r1, #128	@ 0x80
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f7ff fee1 	bl	8005800 <SPI_WaitFlagStateUntilTimeout>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d016      	beq.n	8005a72 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a48:	f043 0220 	orr.w	r2, r3, #32
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e00f      	b.n	8005a74 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a6a:	2b80      	cmp	r3, #128	@ 0x80
 8005a6c:	d0f2      	beq.n	8005a54 <SPI_EndRxTxTransaction+0x78>
 8005a6e:	e000      	b.n	8005a72 <SPI_EndRxTxTransaction+0x96>
        break;
 8005a70:	bf00      	nop
  }

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	20000000 	.word	0x20000000
 8005a80:	165e9f81 	.word	0x165e9f81

08005a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e041      	b.n	8005b1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d106      	bne.n	8005ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f839 	bl	8005b22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	f000 f9b2 	bl	8005e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
	...

08005b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d001      	beq.n	8005b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e044      	b.n	8005bda <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0201 	orr.w	r2, r2, #1
 8005b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a1e      	ldr	r2, [pc, #120]	@ (8005be8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d018      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b7a:	d013      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1a      	ldr	r2, [pc, #104]	@ (8005bec <HAL_TIM_Base_Start_IT+0xb4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00e      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a19      	ldr	r2, [pc, #100]	@ (8005bf0 <HAL_TIM_Base_Start_IT+0xb8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d009      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a17      	ldr	r2, [pc, #92]	@ (8005bf4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d004      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a16      	ldr	r2, [pc, #88]	@ (8005bf8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d111      	bne.n	8005bc8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b06      	cmp	r3, #6
 8005bb4:	d010      	beq.n	8005bd8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 0201 	orr.w	r2, r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc6:	e007      	b.n	8005bd8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 0201 	orr.w	r2, r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	40010000 	.word	0x40010000
 8005bec:	40000400 	.word	0x40000400
 8005bf0:	40000800 	.word	0x40000800
 8005bf4:	40000c00 	.word	0x40000c00
 8005bf8:	40014000 	.word	0x40014000

08005bfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d020      	beq.n	8005c60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01b      	beq.n	8005c60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0202 	mvn.w	r2, #2
 8005c30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f8d2 	bl	8005df0 <HAL_TIM_IC_CaptureCallback>
 8005c4c:	e005      	b.n	8005c5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f8c4 	bl	8005ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f8d5 	bl	8005e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f003 0304 	and.w	r3, r3, #4
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d020      	beq.n	8005cac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01b      	beq.n	8005cac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f06f 0204 	mvn.w	r2, #4
 8005c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2202      	movs	r2, #2
 8005c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f8ac 	bl	8005df0 <HAL_TIM_IC_CaptureCallback>
 8005c98:	e005      	b.n	8005ca6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f89e 	bl	8005ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f8af 	bl	8005e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d020      	beq.n	8005cf8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01b      	beq.n	8005cf8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f06f 0208 	mvn.w	r2, #8
 8005cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2204      	movs	r2, #4
 8005cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f886 	bl	8005df0 <HAL_TIM_IC_CaptureCallback>
 8005ce4:	e005      	b.n	8005cf2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f878 	bl	8005ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f889 	bl	8005e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 0310 	and.w	r3, r3, #16
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d020      	beq.n	8005d44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01b      	beq.n	8005d44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0210 	mvn.w	r2, #16
 8005d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2208      	movs	r2, #8
 8005d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f860 	bl	8005df0 <HAL_TIM_IC_CaptureCallback>
 8005d30:	e005      	b.n	8005d3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f852 	bl	8005ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f863 	bl	8005e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00c      	beq.n	8005d68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d007      	beq.n	8005d68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0201 	mvn.w	r2, #1
 8005d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fc fdce 	bl	8002904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00c      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d007      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f8e6 	bl	8005f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00c      	beq.n	8005db0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f834 	bl	8005e18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00c      	beq.n	8005dd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d007      	beq.n	8005dd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0220 	mvn.w	r2, #32
 8005dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f8b8 	bl	8005f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dd4:	bf00      	nop
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a3a      	ldr	r2, [pc, #232]	@ (8005f28 <TIM_Base_SetConfig+0xfc>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00f      	beq.n	8005e64 <TIM_Base_SetConfig+0x38>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e4a:	d00b      	beq.n	8005e64 <TIM_Base_SetConfig+0x38>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a37      	ldr	r2, [pc, #220]	@ (8005f2c <TIM_Base_SetConfig+0x100>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d007      	beq.n	8005e64 <TIM_Base_SetConfig+0x38>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a36      	ldr	r2, [pc, #216]	@ (8005f30 <TIM_Base_SetConfig+0x104>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d003      	beq.n	8005e64 <TIM_Base_SetConfig+0x38>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a35      	ldr	r2, [pc, #212]	@ (8005f34 <TIM_Base_SetConfig+0x108>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d108      	bne.n	8005e76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a2b      	ldr	r2, [pc, #172]	@ (8005f28 <TIM_Base_SetConfig+0xfc>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d01b      	beq.n	8005eb6 <TIM_Base_SetConfig+0x8a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e84:	d017      	beq.n	8005eb6 <TIM_Base_SetConfig+0x8a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a28      	ldr	r2, [pc, #160]	@ (8005f2c <TIM_Base_SetConfig+0x100>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <TIM_Base_SetConfig+0x8a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a27      	ldr	r2, [pc, #156]	@ (8005f30 <TIM_Base_SetConfig+0x104>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00f      	beq.n	8005eb6 <TIM_Base_SetConfig+0x8a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a26      	ldr	r2, [pc, #152]	@ (8005f34 <TIM_Base_SetConfig+0x108>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00b      	beq.n	8005eb6 <TIM_Base_SetConfig+0x8a>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a25      	ldr	r2, [pc, #148]	@ (8005f38 <TIM_Base_SetConfig+0x10c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d007      	beq.n	8005eb6 <TIM_Base_SetConfig+0x8a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a24      	ldr	r2, [pc, #144]	@ (8005f3c <TIM_Base_SetConfig+0x110>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d003      	beq.n	8005eb6 <TIM_Base_SetConfig+0x8a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a23      	ldr	r2, [pc, #140]	@ (8005f40 <TIM_Base_SetConfig+0x114>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d108      	bne.n	8005ec8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	689a      	ldr	r2, [r3, #8]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a0e      	ldr	r2, [pc, #56]	@ (8005f28 <TIM_Base_SetConfig+0xfc>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d103      	bne.n	8005efc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	691a      	ldr	r2, [r3, #16]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d105      	bne.n	8005f1a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	f023 0201 	bic.w	r2, r3, #1
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	611a      	str	r2, [r3, #16]
  }
}
 8005f1a:	bf00      	nop
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40010000 	.word	0x40010000
 8005f2c:	40000400 	.word	0x40000400
 8005f30:	40000800 	.word	0x40000800
 8005f34:	40000c00 	.word	0x40000c00
 8005f38:	40014000 	.word	0x40014000
 8005f3c:	40014400 	.word	0x40014400
 8005f40:	40014800 	.word	0x40014800

08005f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f7e:	2b84      	cmp	r3, #132	@ 0x84
 8005f80:	d005      	beq.n	8005f8e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005f82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4413      	add	r3, r2
 8005f8a:	3303      	adds	r3, #3
 8005f8c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005fa0:	f000 fae4 	bl	800656c <vTaskStartScheduler>
  
  return osOK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005faa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fac:	b089      	sub	sp, #36	@ 0x24
 8005fae:	af04      	add	r7, sp, #16
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d020      	beq.n	8005ffe <osThreadCreate+0x54>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01c      	beq.n	8005ffe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685c      	ldr	r4, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691e      	ldr	r6, [r3, #16]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff ffc8 	bl	8005f6c <makeFreeRtosPriority>
 8005fdc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fe6:	9202      	str	r2, [sp, #8]
 8005fe8:	9301      	str	r3, [sp, #4]
 8005fea:	9100      	str	r1, [sp, #0]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	4632      	mov	r2, r6
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f000 f8ed 	bl	80061d2 <xTaskCreateStatic>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	e01c      	b.n	8006038 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685c      	ldr	r4, [r3, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800600a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff ffaa 	bl	8005f6c <makeFreeRtosPriority>
 8006018:	4602      	mov	r2, r0
 800601a:	f107 030c 	add.w	r3, r7, #12
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	9200      	str	r2, [sp, #0]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	4632      	mov	r2, r6
 8006026:	4629      	mov	r1, r5
 8006028:	4620      	mov	r0, r4
 800602a:	f000 f932 	bl	8006292 <xTaskCreate>
 800602e:	4603      	mov	r3, r0
 8006030:	2b01      	cmp	r3, #1
 8006032:	d001      	beq.n	8006038 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006034:	2300      	movs	r3, #0
 8006036:	e000      	b.n	800603a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006038:	68fb      	ldr	r3, [r7, #12]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006042 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <osDelay+0x16>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	e000      	b.n	800605a <osDelay+0x18>
 8006058:	2301      	movs	r3, #1
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fa50 	bl	8006500 <vTaskDelay>
  
  return osOK;
 8006060:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f103 0208 	add.w	r2, r3, #8
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f04f 32ff 	mov.w	r2, #4294967295
 8006082:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f103 0208 	add.w	r2, r3, #8
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f103 0208 	add.w	r2, r3, #8
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	601a      	str	r2, [r3, #0]
}
 8006100:	bf00      	nop
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006122:	d103      	bne.n	800612c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	e00c      	b.n	8006146 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3308      	adds	r3, #8
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	e002      	b.n	800613a <vListInsert+0x2e>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	429a      	cmp	r2, r3
 8006144:	d2f6      	bcs.n	8006134 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	601a      	str	r2, [r3, #0]
}
 8006172:	bf00      	nop
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	6892      	ldr	r2, [r2, #8]
 8006194:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	6852      	ldr	r2, [r2, #4]
 800619e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d103      	bne.n	80061b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	1e5a      	subs	r2, r3, #1
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b08e      	sub	sp, #56	@ 0x38
 80061d6:	af04      	add	r7, sp, #16
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	607a      	str	r2, [r7, #4]
 80061de:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10b      	bne.n	80061fe <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061f8:	bf00      	nop
 80061fa:	bf00      	nop
 80061fc:	e7fd      	b.n	80061fa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80061fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10b      	bne.n	800621c <xTaskCreateStatic+0x4a>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	61fb      	str	r3, [r7, #28]
}
 8006216:	bf00      	nop
 8006218:	bf00      	nop
 800621a:	e7fd      	b.n	8006218 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800621c:	2354      	movs	r3, #84	@ 0x54
 800621e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	2b54      	cmp	r3, #84	@ 0x54
 8006224:	d00b      	beq.n	800623e <xTaskCreateStatic+0x6c>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	61bb      	str	r3, [r7, #24]
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	e7fd      	b.n	800623a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800623e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006242:	2b00      	cmp	r3, #0
 8006244:	d01e      	beq.n	8006284 <xTaskCreateStatic+0xb2>
 8006246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01b      	beq.n	8006284 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800624c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006254:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	2202      	movs	r2, #2
 800625a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800625e:	2300      	movs	r3, #0
 8006260:	9303      	str	r3, [sp, #12]
 8006262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006264:	9302      	str	r3, [sp, #8]
 8006266:	f107 0314 	add.w	r3, r7, #20
 800626a:	9301      	str	r3, [sp, #4]
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 f850 	bl	800631c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800627c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800627e:	f000 f8d5 	bl	800642c <prvAddNewTaskToReadyList>
 8006282:	e001      	b.n	8006288 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006284:	2300      	movs	r3, #0
 8006286:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006288:	697b      	ldr	r3, [r7, #20]
	}
 800628a:	4618      	mov	r0, r3
 800628c:	3728      	adds	r7, #40	@ 0x28
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006292:	b580      	push	{r7, lr}
 8006294:	b08c      	sub	sp, #48	@ 0x30
 8006296:	af04      	add	r7, sp, #16
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	603b      	str	r3, [r7, #0]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 fece 	bl	8007048 <pvPortMalloc>
 80062ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00e      	beq.n	80062d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062b4:	2054      	movs	r0, #84	@ 0x54
 80062b6:	f000 fec7 	bl	8007048 <pvPortMalloc>
 80062ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80062c8:	e005      	b.n	80062d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062ca:	6978      	ldr	r0, [r7, #20]
 80062cc:	f000 ff8a 	bl	80071e4 <vPortFree>
 80062d0:	e001      	b.n	80062d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d017      	beq.n	800630c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062e4:	88fa      	ldrh	r2, [r7, #6]
 80062e6:	2300      	movs	r3, #0
 80062e8:	9303      	str	r3, [sp, #12]
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	9302      	str	r3, [sp, #8]
 80062ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f0:	9301      	str	r3, [sp, #4]
 80062f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68b9      	ldr	r1, [r7, #8]
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 f80e 	bl	800631c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006300:	69f8      	ldr	r0, [r7, #28]
 8006302:	f000 f893 	bl	800642c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006306:	2301      	movs	r3, #1
 8006308:	61bb      	str	r3, [r7, #24]
 800630a:	e002      	b.n	8006312 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800630c:	f04f 33ff 	mov.w	r3, #4294967295
 8006310:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006312:	69bb      	ldr	r3, [r7, #24]
	}
 8006314:	4618      	mov	r0, r3
 8006316:	3720      	adds	r7, #32
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800632a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006334:	3b01      	subs	r3, #1
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	f023 0307 	bic.w	r3, r3, #7
 8006342:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00b      	beq.n	8006366 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	617b      	str	r3, [r7, #20]
}
 8006360:	bf00      	nop
 8006362:	bf00      	nop
 8006364:	e7fd      	b.n	8006362 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d01f      	beq.n	80063ac <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800636c:	2300      	movs	r3, #0
 800636e:	61fb      	str	r3, [r7, #28]
 8006370:	e012      	b.n	8006398 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	7819      	ldrb	r1, [r3, #0]
 800637a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	4413      	add	r3, r2
 8006380:	3334      	adds	r3, #52	@ 0x34
 8006382:	460a      	mov	r2, r1
 8006384:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	4413      	add	r3, r2
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d006      	beq.n	80063a0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	3301      	adds	r3, #1
 8006396:	61fb      	str	r3, [r7, #28]
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	2b0f      	cmp	r3, #15
 800639c:	d9e9      	bls.n	8006372 <prvInitialiseNewTask+0x56>
 800639e:	e000      	b.n	80063a2 <prvInitialiseNewTask+0x86>
			{
				break;
 80063a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063aa:	e003      	b.n	80063b4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b6:	2b06      	cmp	r3, #6
 80063b8:	d901      	bls.n	80063be <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063ba:	2306      	movs	r3, #6
 80063bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063c8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80063ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063cc:	2200      	movs	r2, #0
 80063ce:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d2:	3304      	adds	r3, #4
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff fe68 	bl	80060aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063dc:	3318      	adds	r3, #24
 80063de:	4618      	mov	r0, r3
 80063e0:	f7ff fe63 	bl	80060aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ec:	f1c3 0207 	rsb	r2, r3, #7
 80063f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fc:	2200      	movs	r2, #0
 80063fe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	68f9      	ldr	r1, [r7, #12]
 800640c:	69b8      	ldr	r0, [r7, #24]
 800640e:	f000 fc0d 	bl	8006c2c <pxPortInitialiseStack>
 8006412:	4602      	mov	r2, r0
 8006414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006416:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800641e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006420:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006422:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006424:	bf00      	nop
 8006426:	3720      	adds	r7, #32
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006434:	f000 fd28 	bl	8006e88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006438:	4b2a      	ldr	r3, [pc, #168]	@ (80064e4 <prvAddNewTaskToReadyList+0xb8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3301      	adds	r3, #1
 800643e:	4a29      	ldr	r2, [pc, #164]	@ (80064e4 <prvAddNewTaskToReadyList+0xb8>)
 8006440:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006442:	4b29      	ldr	r3, [pc, #164]	@ (80064e8 <prvAddNewTaskToReadyList+0xbc>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d109      	bne.n	800645e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800644a:	4a27      	ldr	r2, [pc, #156]	@ (80064e8 <prvAddNewTaskToReadyList+0xbc>)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006450:	4b24      	ldr	r3, [pc, #144]	@ (80064e4 <prvAddNewTaskToReadyList+0xb8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d110      	bne.n	800647a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006458:	f000 fac4 	bl	80069e4 <prvInitialiseTaskLists>
 800645c:	e00d      	b.n	800647a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800645e:	4b23      	ldr	r3, [pc, #140]	@ (80064ec <prvAddNewTaskToReadyList+0xc0>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d109      	bne.n	800647a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006466:	4b20      	ldr	r3, [pc, #128]	@ (80064e8 <prvAddNewTaskToReadyList+0xbc>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006470:	429a      	cmp	r2, r3
 8006472:	d802      	bhi.n	800647a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006474:	4a1c      	ldr	r2, [pc, #112]	@ (80064e8 <prvAddNewTaskToReadyList+0xbc>)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800647a:	4b1d      	ldr	r3, [pc, #116]	@ (80064f0 <prvAddNewTaskToReadyList+0xc4>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3301      	adds	r3, #1
 8006480:	4a1b      	ldr	r2, [pc, #108]	@ (80064f0 <prvAddNewTaskToReadyList+0xc4>)
 8006482:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006488:	2201      	movs	r2, #1
 800648a:	409a      	lsls	r2, r3
 800648c:	4b19      	ldr	r3, [pc, #100]	@ (80064f4 <prvAddNewTaskToReadyList+0xc8>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4313      	orrs	r3, r2
 8006492:	4a18      	ldr	r2, [pc, #96]	@ (80064f4 <prvAddNewTaskToReadyList+0xc8>)
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4a15      	ldr	r2, [pc, #84]	@ (80064f8 <prvAddNewTaskToReadyList+0xcc>)
 80064a4:	441a      	add	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3304      	adds	r3, #4
 80064aa:	4619      	mov	r1, r3
 80064ac:	4610      	mov	r0, r2
 80064ae:	f7ff fe09 	bl	80060c4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064b2:	f000 fd1b 	bl	8006eec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064b6:	4b0d      	ldr	r3, [pc, #52]	@ (80064ec <prvAddNewTaskToReadyList+0xc0>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00e      	beq.n	80064dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064be:	4b0a      	ldr	r3, [pc, #40]	@ (80064e8 <prvAddNewTaskToReadyList+0xbc>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d207      	bcs.n	80064dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064cc:	4b0b      	ldr	r3, [pc, #44]	@ (80064fc <prvAddNewTaskToReadyList+0xd0>)
 80064ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064dc:	bf00      	nop
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20000714 	.word	0x20000714
 80064e8:	20000614 	.word	0x20000614
 80064ec:	20000720 	.word	0x20000720
 80064f0:	20000730 	.word	0x20000730
 80064f4:	2000071c 	.word	0x2000071c
 80064f8:	20000618 	.word	0x20000618
 80064fc:	e000ed04 	.word	0xe000ed04

08006500 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d018      	beq.n	8006544 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006512:	4b14      	ldr	r3, [pc, #80]	@ (8006564 <vTaskDelay+0x64>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00b      	beq.n	8006532 <vTaskDelay+0x32>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	60bb      	str	r3, [r7, #8]
}
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	e7fd      	b.n	800652e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006532:	f000 f87d 	bl	8006630 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006536:	2100      	movs	r1, #0
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fb11 	bl	8006b60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800653e:	f000 f885 	bl	800664c <xTaskResumeAll>
 8006542:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d107      	bne.n	800655a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800654a:	4b07      	ldr	r3, [pc, #28]	@ (8006568 <vTaskDelay+0x68>)
 800654c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800655a:	bf00      	nop
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	2000073c 	.word	0x2000073c
 8006568:	e000ed04 	.word	0xe000ed04

0800656c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08a      	sub	sp, #40	@ 0x28
 8006570:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006572:	2300      	movs	r3, #0
 8006574:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006576:	2300      	movs	r3, #0
 8006578:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800657a:	463a      	mov	r2, r7
 800657c:	1d39      	adds	r1, r7, #4
 800657e:	f107 0308 	add.w	r3, r7, #8
 8006582:	4618      	mov	r0, r3
 8006584:	f7fc f814 	bl	80025b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	9202      	str	r2, [sp, #8]
 8006590:	9301      	str	r3, [sp, #4]
 8006592:	2300      	movs	r3, #0
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	2300      	movs	r3, #0
 8006598:	460a      	mov	r2, r1
 800659a:	491f      	ldr	r1, [pc, #124]	@ (8006618 <vTaskStartScheduler+0xac>)
 800659c:	481f      	ldr	r0, [pc, #124]	@ (800661c <vTaskStartScheduler+0xb0>)
 800659e:	f7ff fe18 	bl	80061d2 <xTaskCreateStatic>
 80065a2:	4603      	mov	r3, r0
 80065a4:	4a1e      	ldr	r2, [pc, #120]	@ (8006620 <vTaskStartScheduler+0xb4>)
 80065a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006620 <vTaskStartScheduler+0xb4>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065b0:	2301      	movs	r3, #1
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	e001      	b.n	80065ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065b6:	2300      	movs	r3, #0
 80065b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d116      	bne.n	80065ee <vTaskStartScheduler+0x82>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	613b      	str	r3, [r7, #16]
}
 80065d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065d4:	4b13      	ldr	r3, [pc, #76]	@ (8006624 <vTaskStartScheduler+0xb8>)
 80065d6:	f04f 32ff 	mov.w	r2, #4294967295
 80065da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065dc:	4b12      	ldr	r3, [pc, #72]	@ (8006628 <vTaskStartScheduler+0xbc>)
 80065de:	2201      	movs	r2, #1
 80065e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065e2:	4b12      	ldr	r3, [pc, #72]	@ (800662c <vTaskStartScheduler+0xc0>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065e8:	f000 fbaa 	bl	8006d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065ec:	e00f      	b.n	800660e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f4:	d10b      	bne.n	800660e <vTaskStartScheduler+0xa2>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	60fb      	str	r3, [r7, #12]
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	e7fd      	b.n	800660a <vTaskStartScheduler+0x9e>
}
 800660e:	bf00      	nop
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	08007938 	.word	0x08007938
 800661c:	080069b5 	.word	0x080069b5
 8006620:	20000738 	.word	0x20000738
 8006624:	20000734 	.word	0x20000734
 8006628:	20000720 	.word	0x20000720
 800662c:	20000718 	.word	0x20000718

08006630 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006634:	4b04      	ldr	r3, [pc, #16]	@ (8006648 <vTaskSuspendAll+0x18>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3301      	adds	r3, #1
 800663a:	4a03      	ldr	r2, [pc, #12]	@ (8006648 <vTaskSuspendAll+0x18>)
 800663c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800663e:	bf00      	nop
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	2000073c 	.word	0x2000073c

0800664c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006656:	2300      	movs	r3, #0
 8006658:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800665a:	4b42      	ldr	r3, [pc, #264]	@ (8006764 <xTaskResumeAll+0x118>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10b      	bne.n	800667a <xTaskResumeAll+0x2e>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	603b      	str	r3, [r7, #0]
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop
 8006678:	e7fd      	b.n	8006676 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800667a:	f000 fc05 	bl	8006e88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800667e:	4b39      	ldr	r3, [pc, #228]	@ (8006764 <xTaskResumeAll+0x118>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3b01      	subs	r3, #1
 8006684:	4a37      	ldr	r2, [pc, #220]	@ (8006764 <xTaskResumeAll+0x118>)
 8006686:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006688:	4b36      	ldr	r3, [pc, #216]	@ (8006764 <xTaskResumeAll+0x118>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d161      	bne.n	8006754 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006690:	4b35      	ldr	r3, [pc, #212]	@ (8006768 <xTaskResumeAll+0x11c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d05d      	beq.n	8006754 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006698:	e02e      	b.n	80066f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800669a:	4b34      	ldr	r3, [pc, #208]	@ (800676c <xTaskResumeAll+0x120>)
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3318      	adds	r3, #24
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7ff fd69 	bl	800617e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3304      	adds	r3, #4
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7ff fd64 	bl	800617e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ba:	2201      	movs	r2, #1
 80066bc:	409a      	lsls	r2, r3
 80066be:	4b2c      	ldr	r3, [pc, #176]	@ (8006770 <xTaskResumeAll+0x124>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006770 <xTaskResumeAll+0x124>)
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066cc:	4613      	mov	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4a27      	ldr	r2, [pc, #156]	@ (8006774 <xTaskResumeAll+0x128>)
 80066d6:	441a      	add	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3304      	adds	r3, #4
 80066dc:	4619      	mov	r1, r3
 80066de:	4610      	mov	r0, r2
 80066e0:	f7ff fcf0 	bl	80060c4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e8:	4b23      	ldr	r3, [pc, #140]	@ (8006778 <xTaskResumeAll+0x12c>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d302      	bcc.n	80066f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80066f2:	4b22      	ldr	r3, [pc, #136]	@ (800677c <xTaskResumeAll+0x130>)
 80066f4:	2201      	movs	r2, #1
 80066f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066f8:	4b1c      	ldr	r3, [pc, #112]	@ (800676c <xTaskResumeAll+0x120>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1cc      	bne.n	800669a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006706:	f000 fa0b 	bl	8006b20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800670a:	4b1d      	ldr	r3, [pc, #116]	@ (8006780 <xTaskResumeAll+0x134>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d010      	beq.n	8006738 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006716:	f000 f837 	bl	8006788 <xTaskIncrementTick>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006720:	4b16      	ldr	r3, [pc, #88]	@ (800677c <xTaskResumeAll+0x130>)
 8006722:	2201      	movs	r2, #1
 8006724:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3b01      	subs	r3, #1
 800672a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1f1      	bne.n	8006716 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006732:	4b13      	ldr	r3, [pc, #76]	@ (8006780 <xTaskResumeAll+0x134>)
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006738:	4b10      	ldr	r3, [pc, #64]	@ (800677c <xTaskResumeAll+0x130>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d009      	beq.n	8006754 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006740:	2301      	movs	r3, #1
 8006742:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006744:	4b0f      	ldr	r3, [pc, #60]	@ (8006784 <xTaskResumeAll+0x138>)
 8006746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006754:	f000 fbca 	bl	8006eec <vPortExitCritical>

	return xAlreadyYielded;
 8006758:	68bb      	ldr	r3, [r7, #8]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	2000073c 	.word	0x2000073c
 8006768:	20000714 	.word	0x20000714
 800676c:	200006d4 	.word	0x200006d4
 8006770:	2000071c 	.word	0x2000071c
 8006774:	20000618 	.word	0x20000618
 8006778:	20000614 	.word	0x20000614
 800677c:	20000728 	.word	0x20000728
 8006780:	20000724 	.word	0x20000724
 8006784:	e000ed04 	.word	0xe000ed04

08006788 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800678e:	2300      	movs	r3, #0
 8006790:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006792:	4b4f      	ldr	r3, [pc, #316]	@ (80068d0 <xTaskIncrementTick+0x148>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f040 808f 	bne.w	80068ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800679c:	4b4d      	ldr	r3, [pc, #308]	@ (80068d4 <xTaskIncrementTick+0x14c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3301      	adds	r3, #1
 80067a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067a4:	4a4b      	ldr	r2, [pc, #300]	@ (80068d4 <xTaskIncrementTick+0x14c>)
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d121      	bne.n	80067f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80067b0:	4b49      	ldr	r3, [pc, #292]	@ (80068d8 <xTaskIncrementTick+0x150>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00b      	beq.n	80067d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	603b      	str	r3, [r7, #0]
}
 80067cc:	bf00      	nop
 80067ce:	bf00      	nop
 80067d0:	e7fd      	b.n	80067ce <xTaskIncrementTick+0x46>
 80067d2:	4b41      	ldr	r3, [pc, #260]	@ (80068d8 <xTaskIncrementTick+0x150>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	4b40      	ldr	r3, [pc, #256]	@ (80068dc <xTaskIncrementTick+0x154>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a3e      	ldr	r2, [pc, #248]	@ (80068d8 <xTaskIncrementTick+0x150>)
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	4a3e      	ldr	r2, [pc, #248]	@ (80068dc <xTaskIncrementTick+0x154>)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	4b3e      	ldr	r3, [pc, #248]	@ (80068e0 <xTaskIncrementTick+0x158>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3301      	adds	r3, #1
 80067ec:	4a3c      	ldr	r2, [pc, #240]	@ (80068e0 <xTaskIncrementTick+0x158>)
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	f000 f996 	bl	8006b20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067f4:	4b3b      	ldr	r3, [pc, #236]	@ (80068e4 <xTaskIncrementTick+0x15c>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d348      	bcc.n	8006890 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067fe:	4b36      	ldr	r3, [pc, #216]	@ (80068d8 <xTaskIncrementTick+0x150>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d104      	bne.n	8006812 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006808:	4b36      	ldr	r3, [pc, #216]	@ (80068e4 <xTaskIncrementTick+0x15c>)
 800680a:	f04f 32ff 	mov.w	r2, #4294967295
 800680e:	601a      	str	r2, [r3, #0]
					break;
 8006810:	e03e      	b.n	8006890 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006812:	4b31      	ldr	r3, [pc, #196]	@ (80068d8 <xTaskIncrementTick+0x150>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	429a      	cmp	r2, r3
 8006828:	d203      	bcs.n	8006832 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800682a:	4a2e      	ldr	r2, [pc, #184]	@ (80068e4 <xTaskIncrementTick+0x15c>)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006830:	e02e      	b.n	8006890 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	3304      	adds	r3, #4
 8006836:	4618      	mov	r0, r3
 8006838:	f7ff fca1 	bl	800617e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006840:	2b00      	cmp	r3, #0
 8006842:	d004      	beq.n	800684e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	3318      	adds	r3, #24
 8006848:	4618      	mov	r0, r3
 800684a:	f7ff fc98 	bl	800617e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006852:	2201      	movs	r2, #1
 8006854:	409a      	lsls	r2, r3
 8006856:	4b24      	ldr	r3, [pc, #144]	@ (80068e8 <xTaskIncrementTick+0x160>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4313      	orrs	r3, r2
 800685c:	4a22      	ldr	r2, [pc, #136]	@ (80068e8 <xTaskIncrementTick+0x160>)
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006864:	4613      	mov	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4a1f      	ldr	r2, [pc, #124]	@ (80068ec <xTaskIncrementTick+0x164>)
 800686e:	441a      	add	r2, r3
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	3304      	adds	r3, #4
 8006874:	4619      	mov	r1, r3
 8006876:	4610      	mov	r0, r2
 8006878:	f7ff fc24 	bl	80060c4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006880:	4b1b      	ldr	r3, [pc, #108]	@ (80068f0 <xTaskIncrementTick+0x168>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006886:	429a      	cmp	r2, r3
 8006888:	d3b9      	bcc.n	80067fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800688a:	2301      	movs	r3, #1
 800688c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800688e:	e7b6      	b.n	80067fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006890:	4b17      	ldr	r3, [pc, #92]	@ (80068f0 <xTaskIncrementTick+0x168>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006896:	4915      	ldr	r1, [pc, #84]	@ (80068ec <xTaskIncrementTick+0x164>)
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d901      	bls.n	80068ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80068a8:	2301      	movs	r3, #1
 80068aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80068ac:	4b11      	ldr	r3, [pc, #68]	@ (80068f4 <xTaskIncrementTick+0x16c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d007      	beq.n	80068c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80068b4:	2301      	movs	r3, #1
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	e004      	b.n	80068c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068ba:	4b0f      	ldr	r3, [pc, #60]	@ (80068f8 <xTaskIncrementTick+0x170>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3301      	adds	r3, #1
 80068c0:	4a0d      	ldr	r2, [pc, #52]	@ (80068f8 <xTaskIncrementTick+0x170>)
 80068c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068c4:	697b      	ldr	r3, [r7, #20]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	2000073c 	.word	0x2000073c
 80068d4:	20000718 	.word	0x20000718
 80068d8:	200006cc 	.word	0x200006cc
 80068dc:	200006d0 	.word	0x200006d0
 80068e0:	2000072c 	.word	0x2000072c
 80068e4:	20000734 	.word	0x20000734
 80068e8:	2000071c 	.word	0x2000071c
 80068ec:	20000618 	.word	0x20000618
 80068f0:	20000614 	.word	0x20000614
 80068f4:	20000728 	.word	0x20000728
 80068f8:	20000724 	.word	0x20000724

080068fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006902:	4b27      	ldr	r3, [pc, #156]	@ (80069a0 <vTaskSwitchContext+0xa4>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800690a:	4b26      	ldr	r3, [pc, #152]	@ (80069a4 <vTaskSwitchContext+0xa8>)
 800690c:	2201      	movs	r2, #1
 800690e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006910:	e040      	b.n	8006994 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006912:	4b24      	ldr	r3, [pc, #144]	@ (80069a4 <vTaskSwitchContext+0xa8>)
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006918:	4b23      	ldr	r3, [pc, #140]	@ (80069a8 <vTaskSwitchContext+0xac>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	fab3 f383 	clz	r3, r3
 8006924:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006926:	7afb      	ldrb	r3, [r7, #11]
 8006928:	f1c3 031f 	rsb	r3, r3, #31
 800692c:	617b      	str	r3, [r7, #20]
 800692e:	491f      	ldr	r1, [pc, #124]	@ (80069ac <vTaskSwitchContext+0xb0>)
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	4613      	mov	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	440b      	add	r3, r1
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10b      	bne.n	800695a <vTaskSwitchContext+0x5e>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	607b      	str	r3, [r7, #4]
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop
 8006958:	e7fd      	b.n	8006956 <vTaskSwitchContext+0x5a>
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4613      	mov	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4a11      	ldr	r2, [pc, #68]	@ (80069ac <vTaskSwitchContext+0xb0>)
 8006966:	4413      	add	r3, r2
 8006968:	613b      	str	r3, [r7, #16]
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	605a      	str	r2, [r3, #4]
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	3308      	adds	r3, #8
 800697c:	429a      	cmp	r2, r3
 800697e:	d104      	bne.n	800698a <vTaskSwitchContext+0x8e>
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	605a      	str	r2, [r3, #4]
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	4a07      	ldr	r2, [pc, #28]	@ (80069b0 <vTaskSwitchContext+0xb4>)
 8006992:	6013      	str	r3, [r2, #0]
}
 8006994:	bf00      	nop
 8006996:	371c      	adds	r7, #28
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	2000073c 	.word	0x2000073c
 80069a4:	20000728 	.word	0x20000728
 80069a8:	2000071c 	.word	0x2000071c
 80069ac:	20000618 	.word	0x20000618
 80069b0:	20000614 	.word	0x20000614

080069b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069bc:	f000 f852 	bl	8006a64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069c0:	4b06      	ldr	r3, [pc, #24]	@ (80069dc <prvIdleTask+0x28>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d9f9      	bls.n	80069bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80069c8:	4b05      	ldr	r3, [pc, #20]	@ (80069e0 <prvIdleTask+0x2c>)
 80069ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069d8:	e7f0      	b.n	80069bc <prvIdleTask+0x8>
 80069da:	bf00      	nop
 80069dc:	20000618 	.word	0x20000618
 80069e0:	e000ed04 	.word	0xe000ed04

080069e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069ea:	2300      	movs	r3, #0
 80069ec:	607b      	str	r3, [r7, #4]
 80069ee:	e00c      	b.n	8006a0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	4613      	mov	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4a12      	ldr	r2, [pc, #72]	@ (8006a44 <prvInitialiseTaskLists+0x60>)
 80069fc:	4413      	add	r3, r2
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff fb33 	bl	800606a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3301      	adds	r3, #1
 8006a08:	607b      	str	r3, [r7, #4]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b06      	cmp	r3, #6
 8006a0e:	d9ef      	bls.n	80069f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a10:	480d      	ldr	r0, [pc, #52]	@ (8006a48 <prvInitialiseTaskLists+0x64>)
 8006a12:	f7ff fb2a 	bl	800606a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a16:	480d      	ldr	r0, [pc, #52]	@ (8006a4c <prvInitialiseTaskLists+0x68>)
 8006a18:	f7ff fb27 	bl	800606a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a1c:	480c      	ldr	r0, [pc, #48]	@ (8006a50 <prvInitialiseTaskLists+0x6c>)
 8006a1e:	f7ff fb24 	bl	800606a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a22:	480c      	ldr	r0, [pc, #48]	@ (8006a54 <prvInitialiseTaskLists+0x70>)
 8006a24:	f7ff fb21 	bl	800606a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a28:	480b      	ldr	r0, [pc, #44]	@ (8006a58 <prvInitialiseTaskLists+0x74>)
 8006a2a:	f7ff fb1e 	bl	800606a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a5c <prvInitialiseTaskLists+0x78>)
 8006a30:	4a05      	ldr	r2, [pc, #20]	@ (8006a48 <prvInitialiseTaskLists+0x64>)
 8006a32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a34:	4b0a      	ldr	r3, [pc, #40]	@ (8006a60 <prvInitialiseTaskLists+0x7c>)
 8006a36:	4a05      	ldr	r2, [pc, #20]	@ (8006a4c <prvInitialiseTaskLists+0x68>)
 8006a38:	601a      	str	r2, [r3, #0]
}
 8006a3a:	bf00      	nop
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20000618 	.word	0x20000618
 8006a48:	200006a4 	.word	0x200006a4
 8006a4c:	200006b8 	.word	0x200006b8
 8006a50:	200006d4 	.word	0x200006d4
 8006a54:	200006e8 	.word	0x200006e8
 8006a58:	20000700 	.word	0x20000700
 8006a5c:	200006cc 	.word	0x200006cc
 8006a60:	200006d0 	.word	0x200006d0

08006a64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a6a:	e019      	b.n	8006aa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a6c:	f000 fa0c 	bl	8006e88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a70:	4b10      	ldr	r3, [pc, #64]	@ (8006ab4 <prvCheckTasksWaitingTermination+0x50>)
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7ff fb7e 	bl	800617e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a82:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab8 <prvCheckTasksWaitingTermination+0x54>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	4a0b      	ldr	r2, [pc, #44]	@ (8006ab8 <prvCheckTasksWaitingTermination+0x54>)
 8006a8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006abc <prvCheckTasksWaitingTermination+0x58>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3b01      	subs	r3, #1
 8006a92:	4a0a      	ldr	r2, [pc, #40]	@ (8006abc <prvCheckTasksWaitingTermination+0x58>)
 8006a94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a96:	f000 fa29 	bl	8006eec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f810 	bl	8006ac0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006aa0:	4b06      	ldr	r3, [pc, #24]	@ (8006abc <prvCheckTasksWaitingTermination+0x58>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e1      	bne.n	8006a6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	200006e8 	.word	0x200006e8
 8006ab8:	20000714 	.word	0x20000714
 8006abc:	200006fc 	.word	0x200006fc

08006ac0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d108      	bne.n	8006ae4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 fb84 	bl	80071e4 <vPortFree>
				vPortFree( pxTCB );
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fb81 	bl	80071e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ae2:	e019      	b.n	8006b18 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d103      	bne.n	8006af6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fb78 	bl	80071e4 <vPortFree>
	}
 8006af4:	e010      	b.n	8006b18 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d00b      	beq.n	8006b18 <prvDeleteTCB+0x58>
	__asm volatile
 8006b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	60fb      	str	r3, [r7, #12]
}
 8006b12:	bf00      	nop
 8006b14:	bf00      	nop
 8006b16:	e7fd      	b.n	8006b14 <prvDeleteTCB+0x54>
	}
 8006b18:	bf00      	nop
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b26:	4b0c      	ldr	r3, [pc, #48]	@ (8006b58 <prvResetNextTaskUnblockTime+0x38>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d104      	bne.n	8006b3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b30:	4b0a      	ldr	r3, [pc, #40]	@ (8006b5c <prvResetNextTaskUnblockTime+0x3c>)
 8006b32:	f04f 32ff 	mov.w	r2, #4294967295
 8006b36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b38:	e008      	b.n	8006b4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b3a:	4b07      	ldr	r3, [pc, #28]	@ (8006b58 <prvResetNextTaskUnblockTime+0x38>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	4a04      	ldr	r2, [pc, #16]	@ (8006b5c <prvResetNextTaskUnblockTime+0x3c>)
 8006b4a:	6013      	str	r3, [r2, #0]
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	200006cc 	.word	0x200006cc
 8006b5c:	20000734 	.word	0x20000734

08006b60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b6a:	4b29      	ldr	r3, [pc, #164]	@ (8006c10 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b70:	4b28      	ldr	r3, [pc, #160]	@ (8006c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3304      	adds	r3, #4
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7ff fb01 	bl	800617e <uxListRemove>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10b      	bne.n	8006b9a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006b82:	4b24      	ldr	r3, [pc, #144]	@ (8006c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b88:	2201      	movs	r2, #1
 8006b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8e:	43da      	mvns	r2, r3
 8006b90:	4b21      	ldr	r3, [pc, #132]	@ (8006c18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4013      	ands	r3, r2
 8006b96:	4a20      	ldr	r2, [pc, #128]	@ (8006c18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b98:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba0:	d10a      	bne.n	8006bb8 <prvAddCurrentTaskToDelayedList+0x58>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d007      	beq.n	8006bb8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8006c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3304      	adds	r3, #4
 8006bae:	4619      	mov	r1, r3
 8006bb0:	481a      	ldr	r0, [pc, #104]	@ (8006c1c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006bb2:	f7ff fa87 	bl	80060c4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006bb6:	e026      	b.n	8006c06 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006bc0:	4b14      	ldr	r3, [pc, #80]	@ (8006c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d209      	bcs.n	8006be4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bd0:	4b13      	ldr	r3, [pc, #76]	@ (8006c20 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8006c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3304      	adds	r3, #4
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4610      	mov	r0, r2
 8006bde:	f7ff fa95 	bl	800610c <vListInsert>
}
 8006be2:	e010      	b.n	8006c06 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006be4:	4b0f      	ldr	r3, [pc, #60]	@ (8006c24 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	4b0a      	ldr	r3, [pc, #40]	@ (8006c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3304      	adds	r3, #4
 8006bee:	4619      	mov	r1, r3
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	f7ff fa8b 	bl	800610c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8006c28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d202      	bcs.n	8006c06 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006c00:	4a09      	ldr	r2, [pc, #36]	@ (8006c28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	6013      	str	r3, [r2, #0]
}
 8006c06:	bf00      	nop
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	20000718 	.word	0x20000718
 8006c14:	20000614 	.word	0x20000614
 8006c18:	2000071c 	.word	0x2000071c
 8006c1c:	20000700 	.word	0x20000700
 8006c20:	200006d0 	.word	0x200006d0
 8006c24:	200006cc 	.word	0x200006cc
 8006c28:	20000734 	.word	0x20000734

08006c2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3b04      	subs	r3, #4
 8006c3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3b04      	subs	r3, #4
 8006c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f023 0201 	bic.w	r2, r3, #1
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3b04      	subs	r3, #4
 8006c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8006c90 <pxPortInitialiseStack+0x64>)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3b14      	subs	r3, #20
 8006c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3b04      	subs	r3, #4
 8006c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f06f 0202 	mvn.w	r2, #2
 8006c7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	3b20      	subs	r3, #32
 8006c80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c82:	68fb      	ldr	r3, [r7, #12]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	08006c95 	.word	0x08006c95

08006c94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c9e:	4b13      	ldr	r3, [pc, #76]	@ (8006cec <prvTaskExitError+0x58>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca6:	d00b      	beq.n	8006cc0 <prvTaskExitError+0x2c>
	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	60fb      	str	r3, [r7, #12]
}
 8006cba:	bf00      	nop
 8006cbc:	bf00      	nop
 8006cbe:	e7fd      	b.n	8006cbc <prvTaskExitError+0x28>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	60bb      	str	r3, [r7, #8]
}
 8006cd2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006cd4:	bf00      	nop
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0fc      	beq.n	8006cd6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006cdc:	bf00      	nop
 8006cde:	bf00      	nop
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	2000000c 	.word	0x2000000c

08006cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006cf0:	4b07      	ldr	r3, [pc, #28]	@ (8006d10 <pxCurrentTCBConst2>)
 8006cf2:	6819      	ldr	r1, [r3, #0]
 8006cf4:	6808      	ldr	r0, [r1, #0]
 8006cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfa:	f380 8809 	msr	PSP, r0
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f04f 0000 	mov.w	r0, #0
 8006d06:	f380 8811 	msr	BASEPRI, r0
 8006d0a:	4770      	bx	lr
 8006d0c:	f3af 8000 	nop.w

08006d10 <pxCurrentTCBConst2>:
 8006d10:	20000614 	.word	0x20000614
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop

08006d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d18:	4808      	ldr	r0, [pc, #32]	@ (8006d3c <prvPortStartFirstTask+0x24>)
 8006d1a:	6800      	ldr	r0, [r0, #0]
 8006d1c:	6800      	ldr	r0, [r0, #0]
 8006d1e:	f380 8808 	msr	MSP, r0
 8006d22:	f04f 0000 	mov.w	r0, #0
 8006d26:	f380 8814 	msr	CONTROL, r0
 8006d2a:	b662      	cpsie	i
 8006d2c:	b661      	cpsie	f
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	df00      	svc	0
 8006d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d3a:	bf00      	nop
 8006d3c:	e000ed08 	.word	0xe000ed08

08006d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d46:	4b47      	ldr	r3, [pc, #284]	@ (8006e64 <xPortStartScheduler+0x124>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a47      	ldr	r2, [pc, #284]	@ (8006e68 <xPortStartScheduler+0x128>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d10b      	bne.n	8006d68 <xPortStartScheduler+0x28>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	613b      	str	r3, [r7, #16]
}
 8006d62:	bf00      	nop
 8006d64:	bf00      	nop
 8006d66:	e7fd      	b.n	8006d64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d68:	4b3e      	ldr	r3, [pc, #248]	@ (8006e64 <xPortStartScheduler+0x124>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a3f      	ldr	r2, [pc, #252]	@ (8006e6c <xPortStartScheduler+0x12c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d10b      	bne.n	8006d8a <xPortStartScheduler+0x4a>
	__asm volatile
 8006d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	60fb      	str	r3, [r7, #12]
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	e7fd      	b.n	8006d86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d8a:	4b39      	ldr	r3, [pc, #228]	@ (8006e70 <xPortStartScheduler+0x130>)
 8006d8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	22ff      	movs	r2, #255	@ 0xff
 8006d9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	4b31      	ldr	r3, [pc, #196]	@ (8006e74 <xPortStartScheduler+0x134>)
 8006db0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006db2:	4b31      	ldr	r3, [pc, #196]	@ (8006e78 <xPortStartScheduler+0x138>)
 8006db4:	2207      	movs	r2, #7
 8006db6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006db8:	e009      	b.n	8006dce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006dba:	4b2f      	ldr	r3, [pc, #188]	@ (8006e78 <xPortStartScheduler+0x138>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8006e78 <xPortStartScheduler+0x138>)
 8006dc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006dc4:	78fb      	ldrb	r3, [r7, #3]
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dce:	78fb      	ldrb	r3, [r7, #3]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dd6:	2b80      	cmp	r3, #128	@ 0x80
 8006dd8:	d0ef      	beq.n	8006dba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006dda:	4b27      	ldr	r3, [pc, #156]	@ (8006e78 <xPortStartScheduler+0x138>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f1c3 0307 	rsb	r3, r3, #7
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	d00b      	beq.n	8006dfe <xPortStartScheduler+0xbe>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	60bb      	str	r3, [r7, #8]
}
 8006df8:	bf00      	nop
 8006dfa:	bf00      	nop
 8006dfc:	e7fd      	b.n	8006dfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8006e78 <xPortStartScheduler+0x138>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	021b      	lsls	r3, r3, #8
 8006e04:	4a1c      	ldr	r2, [pc, #112]	@ (8006e78 <xPortStartScheduler+0x138>)
 8006e06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e08:	4b1b      	ldr	r3, [pc, #108]	@ (8006e78 <xPortStartScheduler+0x138>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e10:	4a19      	ldr	r2, [pc, #100]	@ (8006e78 <xPortStartScheduler+0x138>)
 8006e12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e1c:	4b17      	ldr	r3, [pc, #92]	@ (8006e7c <xPortStartScheduler+0x13c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a16      	ldr	r2, [pc, #88]	@ (8006e7c <xPortStartScheduler+0x13c>)
 8006e22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006e26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e28:	4b14      	ldr	r3, [pc, #80]	@ (8006e7c <xPortStartScheduler+0x13c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a13      	ldr	r2, [pc, #76]	@ (8006e7c <xPortStartScheduler+0x13c>)
 8006e2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006e32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e34:	f000 f8da 	bl	8006fec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e38:	4b11      	ldr	r3, [pc, #68]	@ (8006e80 <xPortStartScheduler+0x140>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e3e:	f000 f8f9 	bl	8007034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e42:	4b10      	ldr	r3, [pc, #64]	@ (8006e84 <xPortStartScheduler+0x144>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a0f      	ldr	r2, [pc, #60]	@ (8006e84 <xPortStartScheduler+0x144>)
 8006e48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006e4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e4e:	f7ff ff63 	bl	8006d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e52:	f7ff fd53 	bl	80068fc <vTaskSwitchContext>
	prvTaskExitError();
 8006e56:	f7ff ff1d 	bl	8006c94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	e000ed00 	.word	0xe000ed00
 8006e68:	410fc271 	.word	0x410fc271
 8006e6c:	410fc270 	.word	0x410fc270
 8006e70:	e000e400 	.word	0xe000e400
 8006e74:	20000740 	.word	0x20000740
 8006e78:	20000744 	.word	0x20000744
 8006e7c:	e000ed20 	.word	0xe000ed20
 8006e80:	2000000c 	.word	0x2000000c
 8006e84:	e000ef34 	.word	0xe000ef34

08006e88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	607b      	str	r3, [r7, #4]
}
 8006ea0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ea2:	4b10      	ldr	r3, [pc, #64]	@ (8006ee4 <vPortEnterCritical+0x5c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	4a0e      	ldr	r2, [pc, #56]	@ (8006ee4 <vPortEnterCritical+0x5c>)
 8006eaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006eac:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee4 <vPortEnterCritical+0x5c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d110      	bne.n	8006ed6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee8 <vPortEnterCritical+0x60>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00b      	beq.n	8006ed6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	603b      	str	r3, [r7, #0]
}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	e7fd      	b.n	8006ed2 <vPortEnterCritical+0x4a>
	}
}
 8006ed6:	bf00      	nop
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	2000000c 	.word	0x2000000c
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ef2:	4b12      	ldr	r3, [pc, #72]	@ (8006f3c <vPortExitCritical+0x50>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10b      	bne.n	8006f12 <vPortExitCritical+0x26>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	607b      	str	r3, [r7, #4]
}
 8006f0c:	bf00      	nop
 8006f0e:	bf00      	nop
 8006f10:	e7fd      	b.n	8006f0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f12:	4b0a      	ldr	r3, [pc, #40]	@ (8006f3c <vPortExitCritical+0x50>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	4a08      	ldr	r2, [pc, #32]	@ (8006f3c <vPortExitCritical+0x50>)
 8006f1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f1c:	4b07      	ldr	r3, [pc, #28]	@ (8006f3c <vPortExitCritical+0x50>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d105      	bne.n	8006f30 <vPortExitCritical+0x44>
 8006f24:	2300      	movs	r3, #0
 8006f26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	2000000c 	.word	0x2000000c

08006f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f40:	f3ef 8009 	mrs	r0, PSP
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	4b15      	ldr	r3, [pc, #84]	@ (8006fa0 <pxCurrentTCBConst>)
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	f01e 0f10 	tst.w	lr, #16
 8006f50:	bf08      	it	eq
 8006f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5a:	6010      	str	r0, [r2, #0]
 8006f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006f64:	f380 8811 	msr	BASEPRI, r0
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f7ff fcc4 	bl	80068fc <vTaskSwitchContext>
 8006f74:	f04f 0000 	mov.w	r0, #0
 8006f78:	f380 8811 	msr	BASEPRI, r0
 8006f7c:	bc09      	pop	{r0, r3}
 8006f7e:	6819      	ldr	r1, [r3, #0]
 8006f80:	6808      	ldr	r0, [r1, #0]
 8006f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f86:	f01e 0f10 	tst.w	lr, #16
 8006f8a:	bf08      	it	eq
 8006f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f90:	f380 8809 	msr	PSP, r0
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	f3af 8000 	nop.w

08006fa0 <pxCurrentTCBConst>:
 8006fa0:	20000614 	.word	0x20000614
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop

08006fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	607b      	str	r3, [r7, #4]
}
 8006fc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fc2:	f7ff fbe1 	bl	8006788 <xTaskIncrementTick>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fcc:	4b06      	ldr	r3, [pc, #24]	@ (8006fe8 <SysTick_Handler+0x40>)
 8006fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	f383 8811 	msr	BASEPRI, r3
}
 8006fde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	e000ed04 	.word	0xe000ed04

08006fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fec:	b480      	push	{r7}
 8006fee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8007020 <vPortSetupTimerInterrupt+0x34>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8007024 <vPortSetupTimerInterrupt+0x38>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8007028 <vPortSetupTimerInterrupt+0x3c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a0a      	ldr	r2, [pc, #40]	@ (800702c <vPortSetupTimerInterrupt+0x40>)
 8007002:	fba2 2303 	umull	r2, r3, r2, r3
 8007006:	099b      	lsrs	r3, r3, #6
 8007008:	4a09      	ldr	r2, [pc, #36]	@ (8007030 <vPortSetupTimerInterrupt+0x44>)
 800700a:	3b01      	subs	r3, #1
 800700c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800700e:	4b04      	ldr	r3, [pc, #16]	@ (8007020 <vPortSetupTimerInterrupt+0x34>)
 8007010:	2207      	movs	r2, #7
 8007012:	601a      	str	r2, [r3, #0]
}
 8007014:	bf00      	nop
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	e000e010 	.word	0xe000e010
 8007024:	e000e018 	.word	0xe000e018
 8007028:	20000000 	.word	0x20000000
 800702c:	10624dd3 	.word	0x10624dd3
 8007030:	e000e014 	.word	0xe000e014

08007034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007034:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007044 <vPortEnableVFP+0x10>
 8007038:	6801      	ldr	r1, [r0, #0]
 800703a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800703e:	6001      	str	r1, [r0, #0]
 8007040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007042:	bf00      	nop
 8007044:	e000ed88 	.word	0xe000ed88

08007048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08a      	sub	sp, #40	@ 0x28
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007050:	2300      	movs	r3, #0
 8007052:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007054:	f7ff faec 	bl	8006630 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007058:	4b5c      	ldr	r3, [pc, #368]	@ (80071cc <pvPortMalloc+0x184>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007060:	f000 f924 	bl	80072ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007064:	4b5a      	ldr	r3, [pc, #360]	@ (80071d0 <pvPortMalloc+0x188>)
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4013      	ands	r3, r2
 800706c:	2b00      	cmp	r3, #0
 800706e:	f040 8095 	bne.w	800719c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01e      	beq.n	80070b6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007078:	2208      	movs	r2, #8
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4413      	add	r3, r2
 800707e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	2b00      	cmp	r3, #0
 8007088:	d015      	beq.n	80070b6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f023 0307 	bic.w	r3, r3, #7
 8007090:	3308      	adds	r3, #8
 8007092:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f003 0307 	and.w	r3, r3, #7
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00b      	beq.n	80070b6 <pvPortMalloc+0x6e>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	617b      	str	r3, [r7, #20]
}
 80070b0:	bf00      	nop
 80070b2:	bf00      	nop
 80070b4:	e7fd      	b.n	80070b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d06f      	beq.n	800719c <pvPortMalloc+0x154>
 80070bc:	4b45      	ldr	r3, [pc, #276]	@ (80071d4 <pvPortMalloc+0x18c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d86a      	bhi.n	800719c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80070c6:	4b44      	ldr	r3, [pc, #272]	@ (80071d8 <pvPortMalloc+0x190>)
 80070c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80070ca:	4b43      	ldr	r3, [pc, #268]	@ (80071d8 <pvPortMalloc+0x190>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070d0:	e004      	b.n	80070dc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80070d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d903      	bls.n	80070ee <pvPortMalloc+0xa6>
 80070e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1f1      	bne.n	80070d2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070ee:	4b37      	ldr	r3, [pc, #220]	@ (80071cc <pvPortMalloc+0x184>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d051      	beq.n	800719c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2208      	movs	r2, #8
 80070fe:	4413      	add	r3, r2
 8007100:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800710a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	1ad2      	subs	r2, r2, r3
 8007112:	2308      	movs	r3, #8
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	429a      	cmp	r2, r3
 8007118:	d920      	bls.n	800715c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800711a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4413      	add	r3, r2
 8007120:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00b      	beq.n	8007144 <pvPortMalloc+0xfc>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	613b      	str	r3, [r7, #16]
}
 800713e:	bf00      	nop
 8007140:	bf00      	nop
 8007142:	e7fd      	b.n	8007140 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	1ad2      	subs	r2, r2, r3
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007156:	69b8      	ldr	r0, [r7, #24]
 8007158:	f000 f90a 	bl	8007370 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800715c:	4b1d      	ldr	r3, [pc, #116]	@ (80071d4 <pvPortMalloc+0x18c>)
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	4a1b      	ldr	r2, [pc, #108]	@ (80071d4 <pvPortMalloc+0x18c>)
 8007168:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800716a:	4b1a      	ldr	r3, [pc, #104]	@ (80071d4 <pvPortMalloc+0x18c>)
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	4b1b      	ldr	r3, [pc, #108]	@ (80071dc <pvPortMalloc+0x194>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	d203      	bcs.n	800717e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007176:	4b17      	ldr	r3, [pc, #92]	@ (80071d4 <pvPortMalloc+0x18c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a18      	ldr	r2, [pc, #96]	@ (80071dc <pvPortMalloc+0x194>)
 800717c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800717e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	4b13      	ldr	r3, [pc, #76]	@ (80071d0 <pvPortMalloc+0x188>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	431a      	orrs	r2, r3
 8007188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800718c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718e:	2200      	movs	r2, #0
 8007190:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007192:	4b13      	ldr	r3, [pc, #76]	@ (80071e0 <pvPortMalloc+0x198>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	3301      	adds	r3, #1
 8007198:	4a11      	ldr	r2, [pc, #68]	@ (80071e0 <pvPortMalloc+0x198>)
 800719a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800719c:	f7ff fa56 	bl	800664c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00b      	beq.n	80071c2 <pvPortMalloc+0x17a>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	60fb      	str	r3, [r7, #12]
}
 80071bc:	bf00      	nop
 80071be:	bf00      	nop
 80071c0:	e7fd      	b.n	80071be <pvPortMalloc+0x176>
	return pvReturn;
 80071c2:	69fb      	ldr	r3, [r7, #28]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3728      	adds	r7, #40	@ 0x28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	20004350 	.word	0x20004350
 80071d0:	20004364 	.word	0x20004364
 80071d4:	20004354 	.word	0x20004354
 80071d8:	20004348 	.word	0x20004348
 80071dc:	20004358 	.word	0x20004358
 80071e0:	2000435c 	.word	0x2000435c

080071e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d04f      	beq.n	8007296 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071f6:	2308      	movs	r3, #8
 80071f8:	425b      	negs	r3, r3
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	4413      	add	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	4b25      	ldr	r3, [pc, #148]	@ (80072a0 <vPortFree+0xbc>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4013      	ands	r3, r2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10b      	bne.n	800722a <vPortFree+0x46>
	__asm volatile
 8007212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	60fb      	str	r3, [r7, #12]
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop
 8007228:	e7fd      	b.n	8007226 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00b      	beq.n	800724a <vPortFree+0x66>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	60bb      	str	r3, [r7, #8]
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	e7fd      	b.n	8007246 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	4b14      	ldr	r3, [pc, #80]	@ (80072a0 <vPortFree+0xbc>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4013      	ands	r3, r2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01e      	beq.n	8007296 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d11a      	bne.n	8007296 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	4b0e      	ldr	r3, [pc, #56]	@ (80072a0 <vPortFree+0xbc>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	43db      	mvns	r3, r3
 800726a:	401a      	ands	r2, r3
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007270:	f7ff f9de 	bl	8006630 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	4b0a      	ldr	r3, [pc, #40]	@ (80072a4 <vPortFree+0xc0>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4413      	add	r3, r2
 800727e:	4a09      	ldr	r2, [pc, #36]	@ (80072a4 <vPortFree+0xc0>)
 8007280:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007282:	6938      	ldr	r0, [r7, #16]
 8007284:	f000 f874 	bl	8007370 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007288:	4b07      	ldr	r3, [pc, #28]	@ (80072a8 <vPortFree+0xc4>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3301      	adds	r3, #1
 800728e:	4a06      	ldr	r2, [pc, #24]	@ (80072a8 <vPortFree+0xc4>)
 8007290:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007292:	f7ff f9db 	bl	800664c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007296:	bf00      	nop
 8007298:	3718      	adds	r7, #24
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	20004364 	.word	0x20004364
 80072a4:	20004354 	.word	0x20004354
 80072a8:	20004360 	.word	0x20004360

080072ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072b2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80072b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80072b8:	4b27      	ldr	r3, [pc, #156]	@ (8007358 <prvHeapInit+0xac>)
 80072ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f003 0307 	and.w	r3, r3, #7
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00c      	beq.n	80072e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3307      	adds	r3, #7
 80072ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f023 0307 	bic.w	r3, r3, #7
 80072d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	4a1f      	ldr	r2, [pc, #124]	@ (8007358 <prvHeapInit+0xac>)
 80072dc:	4413      	add	r3, r2
 80072de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072e4:	4a1d      	ldr	r2, [pc, #116]	@ (800735c <prvHeapInit+0xb0>)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072ea:	4b1c      	ldr	r3, [pc, #112]	@ (800735c <prvHeapInit+0xb0>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	4413      	add	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072f8:	2208      	movs	r2, #8
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	1a9b      	subs	r3, r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 0307 	bic.w	r3, r3, #7
 8007306:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4a15      	ldr	r2, [pc, #84]	@ (8007360 <prvHeapInit+0xb4>)
 800730c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800730e:	4b14      	ldr	r3, [pc, #80]	@ (8007360 <prvHeapInit+0xb4>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2200      	movs	r2, #0
 8007314:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007316:	4b12      	ldr	r3, [pc, #72]	@ (8007360 <prvHeapInit+0xb4>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2200      	movs	r2, #0
 800731c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	1ad2      	subs	r2, r2, r3
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800732c:	4b0c      	ldr	r3, [pc, #48]	@ (8007360 <prvHeapInit+0xb4>)
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	4a0a      	ldr	r2, [pc, #40]	@ (8007364 <prvHeapInit+0xb8>)
 800733a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	4a09      	ldr	r2, [pc, #36]	@ (8007368 <prvHeapInit+0xbc>)
 8007342:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007344:	4b09      	ldr	r3, [pc, #36]	@ (800736c <prvHeapInit+0xc0>)
 8007346:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800734a:	601a      	str	r2, [r3, #0]
}
 800734c:	bf00      	nop
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	20000748 	.word	0x20000748
 800735c:	20004348 	.word	0x20004348
 8007360:	20004350 	.word	0x20004350
 8007364:	20004358 	.word	0x20004358
 8007368:	20004354 	.word	0x20004354
 800736c:	20004364 	.word	0x20004364

08007370 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007378:	4b28      	ldr	r3, [pc, #160]	@ (800741c <prvInsertBlockIntoFreeList+0xac>)
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	e002      	b.n	8007384 <prvInsertBlockIntoFreeList+0x14>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	60fb      	str	r3, [r7, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	429a      	cmp	r2, r3
 800738c:	d8f7      	bhi.n	800737e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	4413      	add	r3, r2
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	429a      	cmp	r2, r3
 800739e:	d108      	bne.n	80073b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	441a      	add	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	441a      	add	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d118      	bne.n	80073f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	4b15      	ldr	r3, [pc, #84]	@ (8007420 <prvInsertBlockIntoFreeList+0xb0>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d00d      	beq.n	80073ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	441a      	add	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	e008      	b.n	8007400 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007420 <prvInsertBlockIntoFreeList+0xb0>)
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	e003      	b.n	8007400 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	429a      	cmp	r2, r3
 8007406:	d002      	beq.n	800740e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800740e:	bf00      	nop
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	20004348 	.word	0x20004348
 8007420:	20004350 	.word	0x20004350

08007424 <memset>:
 8007424:	4402      	add	r2, r0
 8007426:	4603      	mov	r3, r0
 8007428:	4293      	cmp	r3, r2
 800742a:	d100      	bne.n	800742e <memset+0xa>
 800742c:	4770      	bx	lr
 800742e:	f803 1b01 	strb.w	r1, [r3], #1
 8007432:	e7f9      	b.n	8007428 <memset+0x4>

08007434 <__errno>:
 8007434:	4b01      	ldr	r3, [pc, #4]	@ (800743c <__errno+0x8>)
 8007436:	6818      	ldr	r0, [r3, #0]
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	20000010 	.word	0x20000010

08007440 <__libc_init_array>:
 8007440:	b570      	push	{r4, r5, r6, lr}
 8007442:	4d0d      	ldr	r5, [pc, #52]	@ (8007478 <__libc_init_array+0x38>)
 8007444:	4c0d      	ldr	r4, [pc, #52]	@ (800747c <__libc_init_array+0x3c>)
 8007446:	1b64      	subs	r4, r4, r5
 8007448:	10a4      	asrs	r4, r4, #2
 800744a:	2600      	movs	r6, #0
 800744c:	42a6      	cmp	r6, r4
 800744e:	d109      	bne.n	8007464 <__libc_init_array+0x24>
 8007450:	4d0b      	ldr	r5, [pc, #44]	@ (8007480 <__libc_init_array+0x40>)
 8007452:	4c0c      	ldr	r4, [pc, #48]	@ (8007484 <__libc_init_array+0x44>)
 8007454:	f000 fa16 	bl	8007884 <_init>
 8007458:	1b64      	subs	r4, r4, r5
 800745a:	10a4      	asrs	r4, r4, #2
 800745c:	2600      	movs	r6, #0
 800745e:	42a6      	cmp	r6, r4
 8007460:	d105      	bne.n	800746e <__libc_init_array+0x2e>
 8007462:	bd70      	pop	{r4, r5, r6, pc}
 8007464:	f855 3b04 	ldr.w	r3, [r5], #4
 8007468:	4798      	blx	r3
 800746a:	3601      	adds	r6, #1
 800746c:	e7ee      	b.n	800744c <__libc_init_array+0xc>
 800746e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007472:	4798      	blx	r3
 8007474:	3601      	adds	r6, #1
 8007476:	e7f2      	b.n	800745e <__libc_init_array+0x1e>
 8007478:	0800796c 	.word	0x0800796c
 800747c:	0800796c 	.word	0x0800796c
 8007480:	0800796c 	.word	0x0800796c
 8007484:	08007970 	.word	0x08007970

08007488 <log>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	ed2d 8b02 	vpush	{d8}
 800748e:	ec55 4b10 	vmov	r4, r5, d0
 8007492:	f000 f841 	bl	8007518 <__ieee754_log>
 8007496:	4622      	mov	r2, r4
 8007498:	462b      	mov	r3, r5
 800749a:	4620      	mov	r0, r4
 800749c:	4629      	mov	r1, r5
 800749e:	eeb0 8a40 	vmov.f32	s16, s0
 80074a2:	eef0 8a60 	vmov.f32	s17, s1
 80074a6:	f7f9 faf1 	bl	8000a8c <__aeabi_dcmpun>
 80074aa:	b998      	cbnz	r0, 80074d4 <log+0x4c>
 80074ac:	2200      	movs	r2, #0
 80074ae:	2300      	movs	r3, #0
 80074b0:	4620      	mov	r0, r4
 80074b2:	4629      	mov	r1, r5
 80074b4:	f7f9 fae0 	bl	8000a78 <__aeabi_dcmpgt>
 80074b8:	b960      	cbnz	r0, 80074d4 <log+0x4c>
 80074ba:	2200      	movs	r2, #0
 80074bc:	2300      	movs	r3, #0
 80074be:	4620      	mov	r0, r4
 80074c0:	4629      	mov	r1, r5
 80074c2:	f7f9 fab1 	bl	8000a28 <__aeabi_dcmpeq>
 80074c6:	b160      	cbz	r0, 80074e2 <log+0x5a>
 80074c8:	f7ff ffb4 	bl	8007434 <__errno>
 80074cc:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 80074f8 <log+0x70>
 80074d0:	2322      	movs	r3, #34	@ 0x22
 80074d2:	6003      	str	r3, [r0, #0]
 80074d4:	eeb0 0a48 	vmov.f32	s0, s16
 80074d8:	eef0 0a68 	vmov.f32	s1, s17
 80074dc:	ecbd 8b02 	vpop	{d8}
 80074e0:	bd38      	pop	{r3, r4, r5, pc}
 80074e2:	f7ff ffa7 	bl	8007434 <__errno>
 80074e6:	ecbd 8b02 	vpop	{d8}
 80074ea:	2321      	movs	r3, #33	@ 0x21
 80074ec:	6003      	str	r3, [r0, #0]
 80074ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074f2:	4803      	ldr	r0, [pc, #12]	@ (8007500 <log+0x78>)
 80074f4:	f000 b808 	b.w	8007508 <nan>
 80074f8:	00000000 	.word	0x00000000
 80074fc:	fff00000 	.word	0xfff00000
 8007500:	08007960 	.word	0x08007960
 8007504:	00000000 	.word	0x00000000

08007508 <nan>:
 8007508:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007510 <nan+0x8>
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	00000000 	.word	0x00000000
 8007514:	7ff80000 	.word	0x7ff80000

08007518 <__ieee754_log>:
 8007518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751c:	ec51 0b10 	vmov	r0, r1, d0
 8007520:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8007524:	b087      	sub	sp, #28
 8007526:	460d      	mov	r5, r1
 8007528:	da26      	bge.n	8007578 <__ieee754_log+0x60>
 800752a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800752e:	4303      	orrs	r3, r0
 8007530:	4602      	mov	r2, r0
 8007532:	d10a      	bne.n	800754a <__ieee754_log+0x32>
 8007534:	49ce      	ldr	r1, [pc, #824]	@ (8007870 <__ieee754_log+0x358>)
 8007536:	2200      	movs	r2, #0
 8007538:	2300      	movs	r3, #0
 800753a:	2000      	movs	r0, #0
 800753c:	f7f9 f936 	bl	80007ac <__aeabi_ddiv>
 8007540:	ec41 0b10 	vmov	d0, r0, r1
 8007544:	b007      	add	sp, #28
 8007546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800754a:	2900      	cmp	r1, #0
 800754c:	da05      	bge.n	800755a <__ieee754_log+0x42>
 800754e:	460b      	mov	r3, r1
 8007550:	f7f8 fe4a 	bl	80001e8 <__aeabi_dsub>
 8007554:	2200      	movs	r2, #0
 8007556:	2300      	movs	r3, #0
 8007558:	e7f0      	b.n	800753c <__ieee754_log+0x24>
 800755a:	4bc6      	ldr	r3, [pc, #792]	@ (8007874 <__ieee754_log+0x35c>)
 800755c:	2200      	movs	r2, #0
 800755e:	f7f8 fffb 	bl	8000558 <__aeabi_dmul>
 8007562:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8007566:	460d      	mov	r5, r1
 8007568:	4ac3      	ldr	r2, [pc, #780]	@ (8007878 <__ieee754_log+0x360>)
 800756a:	4295      	cmp	r5, r2
 800756c:	dd06      	ble.n	800757c <__ieee754_log+0x64>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	f7f8 fe3b 	bl	80001ec <__adddf3>
 8007576:	e7e3      	b.n	8007540 <__ieee754_log+0x28>
 8007578:	2300      	movs	r3, #0
 800757a:	e7f5      	b.n	8007568 <__ieee754_log+0x50>
 800757c:	152c      	asrs	r4, r5, #20
 800757e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8007582:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007586:	441c      	add	r4, r3
 8007588:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800758c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8007590:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007594:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8007598:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800759c:	ea42 0105 	orr.w	r1, r2, r5
 80075a0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80075a4:	2200      	movs	r2, #0
 80075a6:	4bb5      	ldr	r3, [pc, #724]	@ (800787c <__ieee754_log+0x364>)
 80075a8:	f7f8 fe1e 	bl	80001e8 <__aeabi_dsub>
 80075ac:	1cab      	adds	r3, r5, #2
 80075ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	4682      	mov	sl, r0
 80075b6:	468b      	mov	fp, r1
 80075b8:	f04f 0200 	mov.w	r2, #0
 80075bc:	dc53      	bgt.n	8007666 <__ieee754_log+0x14e>
 80075be:	2300      	movs	r3, #0
 80075c0:	f7f9 fa32 	bl	8000a28 <__aeabi_dcmpeq>
 80075c4:	b1d0      	cbz	r0, 80075fc <__ieee754_log+0xe4>
 80075c6:	2c00      	cmp	r4, #0
 80075c8:	f000 8120 	beq.w	800780c <__ieee754_log+0x2f4>
 80075cc:	4620      	mov	r0, r4
 80075ce:	f7f8 ff59 	bl	8000484 <__aeabi_i2d>
 80075d2:	a391      	add	r3, pc, #580	@ (adr r3, 8007818 <__ieee754_log+0x300>)
 80075d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d8:	4606      	mov	r6, r0
 80075da:	460f      	mov	r7, r1
 80075dc:	f7f8 ffbc 	bl	8000558 <__aeabi_dmul>
 80075e0:	a38f      	add	r3, pc, #572	@ (adr r3, 8007820 <__ieee754_log+0x308>)
 80075e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e6:	4604      	mov	r4, r0
 80075e8:	460d      	mov	r5, r1
 80075ea:	4630      	mov	r0, r6
 80075ec:	4639      	mov	r1, r7
 80075ee:	f7f8 ffb3 	bl	8000558 <__aeabi_dmul>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	4620      	mov	r0, r4
 80075f8:	4629      	mov	r1, r5
 80075fa:	e7ba      	b.n	8007572 <__ieee754_log+0x5a>
 80075fc:	a38a      	add	r3, pc, #552	@ (adr r3, 8007828 <__ieee754_log+0x310>)
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	4650      	mov	r0, sl
 8007604:	4659      	mov	r1, fp
 8007606:	f7f8 ffa7 	bl	8000558 <__aeabi_dmul>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	2000      	movs	r0, #0
 8007610:	499b      	ldr	r1, [pc, #620]	@ (8007880 <__ieee754_log+0x368>)
 8007612:	f7f8 fde9 	bl	80001e8 <__aeabi_dsub>
 8007616:	4652      	mov	r2, sl
 8007618:	4606      	mov	r6, r0
 800761a:	460f      	mov	r7, r1
 800761c:	465b      	mov	r3, fp
 800761e:	4650      	mov	r0, sl
 8007620:	4659      	mov	r1, fp
 8007622:	f7f8 ff99 	bl	8000558 <__aeabi_dmul>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4630      	mov	r0, r6
 800762c:	4639      	mov	r1, r7
 800762e:	f7f8 ff93 	bl	8000558 <__aeabi_dmul>
 8007632:	4606      	mov	r6, r0
 8007634:	460f      	mov	r7, r1
 8007636:	b914      	cbnz	r4, 800763e <__ieee754_log+0x126>
 8007638:	4632      	mov	r2, r6
 800763a:	463b      	mov	r3, r7
 800763c:	e0a0      	b.n	8007780 <__ieee754_log+0x268>
 800763e:	4620      	mov	r0, r4
 8007640:	f7f8 ff20 	bl	8000484 <__aeabi_i2d>
 8007644:	a374      	add	r3, pc, #464	@ (adr r3, 8007818 <__ieee754_log+0x300>)
 8007646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764a:	4680      	mov	r8, r0
 800764c:	4689      	mov	r9, r1
 800764e:	f7f8 ff83 	bl	8000558 <__aeabi_dmul>
 8007652:	a373      	add	r3, pc, #460	@ (adr r3, 8007820 <__ieee754_log+0x308>)
 8007654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007658:	4604      	mov	r4, r0
 800765a:	460d      	mov	r5, r1
 800765c:	4640      	mov	r0, r8
 800765e:	4649      	mov	r1, r9
 8007660:	f7f8 ff7a 	bl	8000558 <__aeabi_dmul>
 8007664:	e0a5      	b.n	80077b2 <__ieee754_log+0x29a>
 8007666:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800766a:	f7f8 fdbf 	bl	80001ec <__adddf3>
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	4650      	mov	r0, sl
 8007674:	4659      	mov	r1, fp
 8007676:	f7f9 f899 	bl	80007ac <__aeabi_ddiv>
 800767a:	e9cd 0100 	strd	r0, r1, [sp]
 800767e:	4620      	mov	r0, r4
 8007680:	f7f8 ff00 	bl	8000484 <__aeabi_i2d>
 8007684:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007688:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800768c:	4610      	mov	r0, r2
 800768e:	4619      	mov	r1, r3
 8007690:	f7f8 ff62 	bl	8000558 <__aeabi_dmul>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800769c:	f7f8 ff5c 	bl	8000558 <__aeabi_dmul>
 80076a0:	a363      	add	r3, pc, #396	@ (adr r3, 8007830 <__ieee754_log+0x318>)
 80076a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a6:	4680      	mov	r8, r0
 80076a8:	4689      	mov	r9, r1
 80076aa:	f7f8 ff55 	bl	8000558 <__aeabi_dmul>
 80076ae:	a362      	add	r3, pc, #392	@ (adr r3, 8007838 <__ieee754_log+0x320>)
 80076b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b4:	f7f8 fd9a 	bl	80001ec <__adddf3>
 80076b8:	4642      	mov	r2, r8
 80076ba:	464b      	mov	r3, r9
 80076bc:	f7f8 ff4c 	bl	8000558 <__aeabi_dmul>
 80076c0:	a35f      	add	r3, pc, #380	@ (adr r3, 8007840 <__ieee754_log+0x328>)
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	f7f8 fd91 	bl	80001ec <__adddf3>
 80076ca:	4642      	mov	r2, r8
 80076cc:	464b      	mov	r3, r9
 80076ce:	f7f8 ff43 	bl	8000558 <__aeabi_dmul>
 80076d2:	a35d      	add	r3, pc, #372	@ (adr r3, 8007848 <__ieee754_log+0x330>)
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	f7f8 fd88 	bl	80001ec <__adddf3>
 80076dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076e0:	f7f8 ff3a 	bl	8000558 <__aeabi_dmul>
 80076e4:	a35a      	add	r3, pc, #360	@ (adr r3, 8007850 <__ieee754_log+0x338>)
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076ee:	4640      	mov	r0, r8
 80076f0:	4649      	mov	r1, r9
 80076f2:	f7f8 ff31 	bl	8000558 <__aeabi_dmul>
 80076f6:	a358      	add	r3, pc, #352	@ (adr r3, 8007858 <__ieee754_log+0x340>)
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f7f8 fd76 	bl	80001ec <__adddf3>
 8007700:	4642      	mov	r2, r8
 8007702:	464b      	mov	r3, r9
 8007704:	f7f8 ff28 	bl	8000558 <__aeabi_dmul>
 8007708:	a355      	add	r3, pc, #340	@ (adr r3, 8007860 <__ieee754_log+0x348>)
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	f7f8 fd6d 	bl	80001ec <__adddf3>
 8007712:	4642      	mov	r2, r8
 8007714:	464b      	mov	r3, r9
 8007716:	f7f8 ff1f 	bl	8000558 <__aeabi_dmul>
 800771a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8007726:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800772a:	f7f8 fd5f 	bl	80001ec <__adddf3>
 800772e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8007732:	3551      	adds	r5, #81	@ 0x51
 8007734:	4335      	orrs	r5, r6
 8007736:	2d00      	cmp	r5, #0
 8007738:	4680      	mov	r8, r0
 800773a:	4689      	mov	r9, r1
 800773c:	dd48      	ble.n	80077d0 <__ieee754_log+0x2b8>
 800773e:	4b50      	ldr	r3, [pc, #320]	@ (8007880 <__ieee754_log+0x368>)
 8007740:	2200      	movs	r2, #0
 8007742:	4650      	mov	r0, sl
 8007744:	4659      	mov	r1, fp
 8007746:	f7f8 ff07 	bl	8000558 <__aeabi_dmul>
 800774a:	4652      	mov	r2, sl
 800774c:	465b      	mov	r3, fp
 800774e:	f7f8 ff03 	bl	8000558 <__aeabi_dmul>
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	4606      	mov	r6, r0
 8007758:	460f      	mov	r7, r1
 800775a:	4640      	mov	r0, r8
 800775c:	4649      	mov	r1, r9
 800775e:	f7f8 fd45 	bl	80001ec <__adddf3>
 8007762:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007766:	f7f8 fef7 	bl	8000558 <__aeabi_dmul>
 800776a:	4680      	mov	r8, r0
 800776c:	4689      	mov	r9, r1
 800776e:	b964      	cbnz	r4, 800778a <__ieee754_log+0x272>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4630      	mov	r0, r6
 8007776:	4639      	mov	r1, r7
 8007778:	f7f8 fd36 	bl	80001e8 <__aeabi_dsub>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	4650      	mov	r0, sl
 8007782:	4659      	mov	r1, fp
 8007784:	f7f8 fd30 	bl	80001e8 <__aeabi_dsub>
 8007788:	e6da      	b.n	8007540 <__ieee754_log+0x28>
 800778a:	a323      	add	r3, pc, #140	@ (adr r3, 8007818 <__ieee754_log+0x300>)
 800778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007794:	f7f8 fee0 	bl	8000558 <__aeabi_dmul>
 8007798:	a321      	add	r3, pc, #132	@ (adr r3, 8007820 <__ieee754_log+0x308>)
 800779a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779e:	4604      	mov	r4, r0
 80077a0:	460d      	mov	r5, r1
 80077a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077a6:	f7f8 fed7 	bl	8000558 <__aeabi_dmul>
 80077aa:	4642      	mov	r2, r8
 80077ac:	464b      	mov	r3, r9
 80077ae:	f7f8 fd1d 	bl	80001ec <__adddf3>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4630      	mov	r0, r6
 80077b8:	4639      	mov	r1, r7
 80077ba:	f7f8 fd15 	bl	80001e8 <__aeabi_dsub>
 80077be:	4652      	mov	r2, sl
 80077c0:	465b      	mov	r3, fp
 80077c2:	f7f8 fd11 	bl	80001e8 <__aeabi_dsub>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	4620      	mov	r0, r4
 80077cc:	4629      	mov	r1, r5
 80077ce:	e7d9      	b.n	8007784 <__ieee754_log+0x26c>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4650      	mov	r0, sl
 80077d6:	4659      	mov	r1, fp
 80077d8:	f7f8 fd06 	bl	80001e8 <__aeabi_dsub>
 80077dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077e0:	f7f8 feba 	bl	8000558 <__aeabi_dmul>
 80077e4:	4606      	mov	r6, r0
 80077e6:	460f      	mov	r7, r1
 80077e8:	2c00      	cmp	r4, #0
 80077ea:	f43f af25 	beq.w	8007638 <__ieee754_log+0x120>
 80077ee:	a30a      	add	r3, pc, #40	@ (adr r3, 8007818 <__ieee754_log+0x300>)
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077f8:	f7f8 feae 	bl	8000558 <__aeabi_dmul>
 80077fc:	a308      	add	r3, pc, #32	@ (adr r3, 8007820 <__ieee754_log+0x308>)
 80077fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007802:	4604      	mov	r4, r0
 8007804:	460d      	mov	r5, r1
 8007806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800780a:	e729      	b.n	8007660 <__ieee754_log+0x148>
 800780c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8007868 <__ieee754_log+0x350>
 8007810:	e698      	b.n	8007544 <__ieee754_log+0x2c>
 8007812:	bf00      	nop
 8007814:	f3af 8000 	nop.w
 8007818:	fee00000 	.word	0xfee00000
 800781c:	3fe62e42 	.word	0x3fe62e42
 8007820:	35793c76 	.word	0x35793c76
 8007824:	3dea39ef 	.word	0x3dea39ef
 8007828:	55555555 	.word	0x55555555
 800782c:	3fd55555 	.word	0x3fd55555
 8007830:	df3e5244 	.word	0xdf3e5244
 8007834:	3fc2f112 	.word	0x3fc2f112
 8007838:	96cb03de 	.word	0x96cb03de
 800783c:	3fc74664 	.word	0x3fc74664
 8007840:	94229359 	.word	0x94229359
 8007844:	3fd24924 	.word	0x3fd24924
 8007848:	55555593 	.word	0x55555593
 800784c:	3fe55555 	.word	0x3fe55555
 8007850:	d078c69f 	.word	0xd078c69f
 8007854:	3fc39a09 	.word	0x3fc39a09
 8007858:	1d8e78af 	.word	0x1d8e78af
 800785c:	3fcc71c5 	.word	0x3fcc71c5
 8007860:	9997fa04 	.word	0x9997fa04
 8007864:	3fd99999 	.word	0x3fd99999
	...
 8007870:	c3500000 	.word	0xc3500000
 8007874:	43500000 	.word	0x43500000
 8007878:	7fefffff 	.word	0x7fefffff
 800787c:	3ff00000 	.word	0x3ff00000
 8007880:	3fe00000 	.word	0x3fe00000

08007884 <_init>:
 8007884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007886:	bf00      	nop
 8007888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788a:	bc08      	pop	{r3}
 800788c:	469e      	mov	lr, r3
 800788e:	4770      	bx	lr

08007890 <_fini>:
 8007890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007892:	bf00      	nop
 8007894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007896:	bc08      	pop	{r3}
 8007898:	469e      	mov	lr, r3
 800789a:	4770      	bx	lr
