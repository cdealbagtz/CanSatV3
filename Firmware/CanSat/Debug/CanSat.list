
CanSat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000975c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08009900  08009900  00019900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a38  08009a38  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08009a38  08009a38  00019a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a40  08009a40  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a40  08009a40  00019a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a44  08009a44  00019a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08009a48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004500  20000100  08009b48  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004600  08009b48  00024600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016530  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b8b  00000000  00000000  000366a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e8  00000000  00000000  0003a230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f2  00000000  00000000  0003b818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b4c  00000000  00000000  0003c90a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b61f  00000000  00000000  00056456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000997d1  00000000  00000000  00071a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f9c  00000000  00000000  0010b248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001111e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000100 	.word	0x20000100
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080098e4 	.word	0x080098e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000104 	.word	0x20000104
 80001dc:	080098e4 	.word	0x080098e4

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_ldivmod>:
 8000b08:	b97b      	cbnz	r3, 8000b2a <__aeabi_ldivmod+0x22>
 8000b0a:	b972      	cbnz	r2, 8000b2a <__aeabi_ldivmod+0x22>
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	bfbe      	ittt	lt
 8000b10:	2000      	movlt	r0, #0
 8000b12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b16:	e006      	blt.n	8000b26 <__aeabi_ldivmod+0x1e>
 8000b18:	bf08      	it	eq
 8000b1a:	2800      	cmpeq	r0, #0
 8000b1c:	bf1c      	itt	ne
 8000b1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b22:	f04f 30ff 	movne.w	r0, #4294967295
 8000b26:	f000 b9bb 	b.w	8000ea0 <__aeabi_idiv0>
 8000b2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b32:	2900      	cmp	r1, #0
 8000b34:	db09      	blt.n	8000b4a <__aeabi_ldivmod+0x42>
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db1a      	blt.n	8000b70 <__aeabi_ldivmod+0x68>
 8000b3a:	f000 f84d 	bl	8000bd8 <__udivmoddi4>
 8000b3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b46:	b004      	add	sp, #16
 8000b48:	4770      	bx	lr
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db1b      	blt.n	8000b8c <__aeabi_ldivmod+0x84>
 8000b54:	f000 f840 	bl	8000bd8 <__udivmoddi4>
 8000b58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b60:	b004      	add	sp, #16
 8000b62:	4240      	negs	r0, r0
 8000b64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b68:	4252      	negs	r2, r2
 8000b6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b6e:	4770      	bx	lr
 8000b70:	4252      	negs	r2, r2
 8000b72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b76:	f000 f82f 	bl	8000bd8 <__udivmoddi4>
 8000b7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b82:	b004      	add	sp, #16
 8000b84:	4240      	negs	r0, r0
 8000b86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8a:	4770      	bx	lr
 8000b8c:	4252      	negs	r2, r2
 8000b8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b92:	f000 f821 	bl	8000bd8 <__udivmoddi4>
 8000b96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b9e:	b004      	add	sp, #16
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <task_init_1ms>:

/**
  * @fn  	task_init_1ms
  * @brief  Inicializaciones para tarea de 1 milisegundo
  */
void task_init_1ms(void){
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <task_1ms>:

/**
  * @fn  	task_1ms
  * @brief  Ejecucion de tareas de 1 milisegundo
  */
void task_1ms(void){
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	af00      	add	r7, sp, #0
	NRF24_StateMachine();
 8000eb6:	f001 fb7f 	bl	80025b8 <NRF24_StateMachine>

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <task_init_10ms>:

/**
  * @fn  	task_init_10ms
  * @brief  Inicializaciones para tarea de 10 milisegundos
  */
void task_init_10ms(void){
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <task_10ms>:

/**
  * @fn  	task_10ms
  * @brief  Ejecucion de tareas de 10 milisegundos
  */
void task_10ms(void){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	MPU6050_calculate();
 8000ed0:	f001 ff38 	bl	8002d44 <MPU6050_calculate>
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <task_init_100ms>:

/**
  * @fn  	task_init_100ms
  * @brief  Inicializaciones para tarea de 100 milisegundos
  */
void task_init_100ms(void){
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <task_100ms>:

/**
  * @fn  	task_100ms
  * @brief  Ejecucion de tareas de 100 milisegundos
  */
void task_100ms(void){
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
	BMP280_calculate();
 8000eea:	f000 fd19 	bl	8001920 <BMP280_calculate>

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <task_init_1000ms>:

/**
  * @fn  	task_init_1000ms
  * @brief  Inicializaciones para tarea de 1000 milisegundos
  */
void task_init_1000ms(void){
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <task_1000ms>:

/**
  * @fn  	task_1000ms
  * @brief  Ejecucion de tareas de 1000 milisegundos
  */
void task_1000ms(void){
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <BMP280_write>:
int32_t T_raw, P_raw, t_fine;
S32_t Temperature, Altitud;
U32_t Presure;


void BMP280_write(uint8_t Address, uint8_t Data){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	460a      	mov	r2, r1
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f26:	480f      	ldr	r0, [pc, #60]	; (8000f64 <BMP280_write+0x54>)
 8000f28:	f003 fa94 	bl	8004454 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000f36:	1df9      	adds	r1, r7, #7
 8000f38:	2364      	movs	r3, #100	; 0x64
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	480a      	ldr	r0, [pc, #40]	; (8000f68 <BMP280_write+0x58>)
 8000f3e:	f005 f81a 	bl	8005f76 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8000f42:	1db9      	adds	r1, r7, #6
 8000f44:	2364      	movs	r3, #100	; 0x64
 8000f46:	2201      	movs	r2, #1
 8000f48:	4807      	ldr	r0, [pc, #28]	; (8000f68 <BMP280_write+0x58>)
 8000f4a:	f005 f814 	bl	8005f76 <HAL_SPI_Transmit>

	BMP280_unselect();
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <BMP280_write+0x54>)
 8000f56:	f003 fa7d 	bl	8004454 <HAL_GPIO_WritePin>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40020000 	.word	0x40020000
 8000f68:	200005b0 	.word	0x200005b0

08000f6c <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f86:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <BMP280_read+0x54>)
 8000f88:	f003 fa64 	bl	8004454 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8000f8c:	f107 010f 	add.w	r1, r7, #15
 8000f90:	2364      	movs	r3, #100	; 0x64
 8000f92:	2201      	movs	r2, #1
 8000f94:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <BMP280_read+0x58>)
 8000f96:	f004 ffee 	bl	8005f76 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8000f9a:	f107 010f 	add.w	r1, r7, #15
 8000f9e:	2364      	movs	r3, #100	; 0x64
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <BMP280_read+0x58>)
 8000fa4:	f005 f92a 	bl	80061fc <HAL_SPI_Receive>
	BMP280_unselect();
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fae:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <BMP280_read+0x54>)
 8000fb0:	f003 fa50 	bl	8004454 <HAL_GPIO_WritePin>

	return Buffer;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	200005b0 	.word	0x200005b0

08000fc8 <BMP280_config>:

void BMP280_config(void){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8000fcc:	2157      	movs	r1, #87	; 0x57
 8000fce:	20f4      	movs	r0, #244	; 0xf4
 8000fd0:	f7ff ff9e 	bl	8000f10 <BMP280_write>
	BMP280_write(config, 0x10);
 8000fd4:	2110      	movs	r1, #16
 8000fd6:	20f5      	movs	r0, #245	; 0xf5
 8000fd8:	f7ff ff9a 	bl	8000f10 <BMP280_write>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <BMP280_calibrationData>:
	uint8_t Buffer   = BMP280_read(status);
	BMP280_im_update = (Buffer&0x01);
	BMP280_measuring = (Buffer&0x08)>>3;
}

void BMP280_calibrationData(void){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000fe6:	2388      	movs	r3, #136	; 0x88
 8000fe8:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
	BMP280_select();
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001004:	4843      	ldr	r0, [pc, #268]	; (8001114 <BMP280_calibrationData+0x134>)
 8001006:	f003 fa25 	bl	8004454 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800100a:	f107 011f 	add.w	r1, r7, #31
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	2201      	movs	r2, #1
 8001012:	4841      	ldr	r0, [pc, #260]	; (8001118 <BMP280_calibrationData+0x138>)
 8001014:	f004 ffaf 	bl	8005f76 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8001018:	1d39      	adds	r1, r7, #4
 800101a:	2364      	movs	r3, #100	; 0x64
 800101c:	2218      	movs	r2, #24
 800101e:	483e      	ldr	r0, [pc, #248]	; (8001118 <BMP280_calibrationData+0x138>)
 8001020:	f005 f8ec 	bl	80061fc <HAL_SPI_Receive>
	BMP280_unselect();
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102a:	483a      	ldr	r0, [pc, #232]	; (8001114 <BMP280_calibrationData+0x134>)
 800102c:	f003 fa12 	bl	8004454 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8001030:	797b      	ldrb	r3, [r7, #5]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21a      	sxth	r2, r3
 8001036:	793b      	ldrb	r3, [r7, #4]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21b      	sxth	r3, r3
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b36      	ldr	r3, [pc, #216]	; (800111c <BMP280_calibrationData+0x13c>)
 8001042:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	b21a      	sxth	r2, r3
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	b21b      	sxth	r3, r3
 800104e:	4313      	orrs	r3, r2
 8001050:	b21a      	sxth	r2, r3
 8001052:	4b33      	ldr	r3, [pc, #204]	; (8001120 <BMP280_calibrationData+0x140>)
 8001054:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 8001056:	7a7b      	ldrb	r3, [r7, #9]
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21a      	sxth	r2, r3
 800105c:	7a3b      	ldrb	r3, [r7, #8]
 800105e:	b21b      	sxth	r3, r3
 8001060:	4313      	orrs	r3, r2
 8001062:	b21a      	sxth	r2, r3
 8001064:	4b2f      	ldr	r3, [pc, #188]	; (8001124 <BMP280_calibrationData+0x144>)
 8001066:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8001068:	7afb      	ldrb	r3, [r7, #11]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	7abb      	ldrb	r3, [r7, #10]
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21b      	sxth	r3, r3
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <BMP280_calibrationData+0x148>)
 800107a:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 800107c:	7b7b      	ldrb	r3, [r7, #13]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	7b3b      	ldrb	r3, [r7, #12]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21a      	sxth	r2, r3
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <BMP280_calibrationData+0x14c>)
 800108c:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	b21a      	sxth	r2, r3
 8001094:	7bbb      	ldrb	r3, [r7, #14]
 8001096:	b21b      	sxth	r3, r3
 8001098:	4313      	orrs	r3, r2
 800109a:	b21a      	sxth	r2, r3
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <BMP280_calibrationData+0x150>)
 800109e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 80010a0:	7c7b      	ldrb	r3, [r7, #17]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	7c3b      	ldrb	r3, [r7, #16]
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <BMP280_calibrationData+0x154>)
 80010b0:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 80010b2:	7cfb      	ldrb	r3, [r7, #19]
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	7cbb      	ldrb	r3, [r7, #18]
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	b21a      	sxth	r2, r3
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <BMP280_calibrationData+0x158>)
 80010c2:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 80010c4:	7d7b      	ldrb	r3, [r7, #21]
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	7d3b      	ldrb	r3, [r7, #20]
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	4313      	orrs	r3, r2
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <BMP280_calibrationData+0x15c>)
 80010d4:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	7dbb      	ldrb	r3, [r7, #22]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <BMP280_calibrationData+0x160>)
 80010e6:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 80010e8:	7e7b      	ldrb	r3, [r7, #25]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	7e3b      	ldrb	r3, [r7, #24]
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <BMP280_calibrationData+0x164>)
 80010f8:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 80010fa:	7efb      	ldrb	r3, [r7, #27]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	b21a      	sxth	r2, r3
 8001100:	7ebb      	ldrb	r3, [r7, #26]
 8001102:	b21b      	sxth	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b21a      	sxth	r2, r3
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <BMP280_calibrationData+0x168>)
 800110a:	801a      	strh	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40020000 	.word	0x40020000
 8001118:	200005b0 	.word	0x200005b0
 800111c:	2000011e 	.word	0x2000011e
 8001120:	20000122 	.word	0x20000122
 8001124:	20000124 	.word	0x20000124
 8001128:	20000120 	.word	0x20000120
 800112c:	20000126 	.word	0x20000126
 8001130:	20000128 	.word	0x20000128
 8001134:	2000012a 	.word	0x2000012a
 8001138:	2000012c 	.word	0x2000012c
 800113c:	2000012e 	.word	0x2000012e
 8001140:	20000130 	.word	0x20000130
 8001144:	20000132 	.word	0x20000132
 8001148:	20000134 	.word	0x20000134

0800114c <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8001152:	23f7      	movs	r3, #247	; 0xf7
 8001154:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	2300      	movs	r3, #0
 800115c:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001164:	4817      	ldr	r0, [pc, #92]	; (80011c4 <BMP280_readRawValues+0x78>)
 8001166:	f003 f975 	bl	8004454 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800116a:	1df9      	adds	r1, r7, #7
 800116c:	2364      	movs	r3, #100	; 0x64
 800116e:	2201      	movs	r2, #1
 8001170:	4815      	ldr	r0, [pc, #84]	; (80011c8 <BMP280_readRawValues+0x7c>)
 8001172:	f004 ff00 	bl	8005f76 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 8001176:	4639      	mov	r1, r7
 8001178:	2364      	movs	r3, #100	; 0x64
 800117a:	2206      	movs	r2, #6
 800117c:	4812      	ldr	r0, [pc, #72]	; (80011c8 <BMP280_readRawValues+0x7c>)
 800117e:	f005 f83d 	bl	80061fc <HAL_SPI_Receive>
	BMP280_unselect();
 8001182:	2201      	movs	r2, #1
 8001184:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001188:	480e      	ldr	r0, [pc, #56]	; (80011c4 <BMP280_readRawValues+0x78>)
 800118a:	f003 f963 	bl	8004454 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 800118e:	783b      	ldrb	r3, [r7, #0]
 8001190:	031a      	lsls	r2, r3, #12
 8001192:	787b      	ldrb	r3, [r7, #1]
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	4313      	orrs	r3, r2
 8001198:	78ba      	ldrb	r2, [r7, #2]
 800119a:	0912      	lsrs	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	4313      	orrs	r3, r2
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <BMP280_readRawValues+0x80>)
 80011a2:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	031a      	lsls	r2, r3, #12
 80011a8:	793b      	ldrb	r3, [r7, #4]
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	4313      	orrs	r3, r2
 80011ae:	797a      	ldrb	r2, [r7, #5]
 80011b0:	0912      	lsrs	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	4313      	orrs	r3, r2
 80011b6:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <BMP280_readRawValues+0x84>)
 80011b8:	6013      	str	r3, [r2, #0]
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40020000 	.word	0x40020000
 80011c8:	200005b0 	.word	0x200005b0
 80011cc:	2000013c 	.word	0x2000013c
 80011d0:	20000138 	.word	0x20000138

080011d4 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 80011d4:	b480      	push	{r7}
 80011d6:	b087      	sub	sp, #28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80011dc:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <BMP280_measureT+0x74>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	10da      	asrs	r2, r3, #3
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <BMP280_measureT+0x78>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	4a19      	ldr	r2, [pc, #100]	; (8001250 <BMP280_measureT+0x7c>)
 80011ec:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011f0:	fb02 f303 	mul.w	r3, r2, r3
 80011f4:	12db      	asrs	r3, r3, #11
 80011f6:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	111b      	asrs	r3, r3, #4
 80011fc:	4a13      	ldr	r2, [pc, #76]	; (800124c <BMP280_measureT+0x78>)
 80011fe:	8812      	ldrh	r2, [r2, #0]
 8001200:	1a9b      	subs	r3, r3, r2
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	1112      	asrs	r2, r2, #4
 8001206:	4911      	ldr	r1, [pc, #68]	; (800124c <BMP280_measureT+0x78>)
 8001208:	8809      	ldrh	r1, [r1, #0]
 800120a:	1a52      	subs	r2, r2, r1
 800120c:	fb02 f303 	mul.w	r3, r2, r3
 8001210:	131b      	asrs	r3, r3, #12
 8001212:	4a10      	ldr	r2, [pc, #64]	; (8001254 <BMP280_measureT+0x80>)
 8001214:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001218:	fb02 f303 	mul.w	r3, r2, r3
 800121c:	139b      	asrs	r3, r3, #14
 800121e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4413      	add	r3, r2
 8001226:	4a0c      	ldr	r2, [pc, #48]	; (8001258 <BMP280_measureT+0x84>)
 8001228:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <BMP280_measureT+0x84>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	3380      	adds	r3, #128	; 0x80
 8001236:	121b      	asrs	r3, r3, #8
 8001238:	60fb      	str	r3, [r7, #12]
	return T;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	371c      	adds	r7, #28
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	20000138 	.word	0x20000138
 800124c:	2000011e 	.word	0x2000011e
 8001250:	20000122 	.word	0x20000122
 8001254:	20000124 	.word	0x20000124
 8001258:	20000140 	.word	0x20000140

0800125c <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 800125c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001260:	b0ca      	sub	sp, #296	; 0x128
 8001262:	af00      	add	r7, sp, #0
 8001264:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001268:	4baf      	ldr	r3, [pc, #700]	; (8001528 <BMP280_measureP+0x2cc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	17da      	asrs	r2, r3, #31
 800126e:	461c      	mov	r4, r3
 8001270:	4615      	mov	r5, r2
 8001272:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001276:	f145 3bff 	adc.w	fp, r5, #4294967295
 800127a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800127e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001282:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001286:	fb03 f102 	mul.w	r1, r3, r2
 800128a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800128e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001292:	fb02 f303 	mul.w	r3, r2, r3
 8001296:	18ca      	adds	r2, r1, r3
 8001298:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800129c:	fba3 8903 	umull	r8, r9, r3, r3
 80012a0:	eb02 0309 	add.w	r3, r2, r9
 80012a4:	4699      	mov	r9, r3
 80012a6:	4ba1      	ldr	r3, [pc, #644]	; (800152c <BMP280_measureP+0x2d0>)
 80012a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	17da      	asrs	r2, r3, #31
 80012b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80012b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80012b8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80012bc:	4603      	mov	r3, r0
 80012be:	fb03 f209 	mul.w	r2, r3, r9
 80012c2:	460b      	mov	r3, r1
 80012c4:	fb08 f303 	mul.w	r3, r8, r3
 80012c8:	4413      	add	r3, r2
 80012ca:	4602      	mov	r2, r0
 80012cc:	fba8 1202 	umull	r1, r2, r8, r2
 80012d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80012d4:	460a      	mov	r2, r1
 80012d6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80012da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80012de:	4413      	add	r3, r2
 80012e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80012e4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80012e8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80012ec:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80012f0:	4b8f      	ldr	r3, [pc, #572]	; (8001530 <BMP280_measureP+0x2d4>)
 80012f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	17da      	asrs	r2, r3, #31
 80012fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80012fe:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001302:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001306:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800130a:	462a      	mov	r2, r5
 800130c:	fb02 f203 	mul.w	r2, r2, r3
 8001310:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001314:	4621      	mov	r1, r4
 8001316:	fb01 f303 	mul.w	r3, r1, r3
 800131a:	441a      	add	r2, r3
 800131c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001320:	4621      	mov	r1, r4
 8001322:	fba3 1301 	umull	r1, r3, r3, r1
 8001326:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800132a:	460b      	mov	r3, r1
 800132c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001334:	18d3      	adds	r3, r2, r3
 8001336:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800133a:	f04f 0000 	mov.w	r0, #0
 800133e:	f04f 0100 	mov.w	r1, #0
 8001342:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001346:	462b      	mov	r3, r5
 8001348:	0459      	lsls	r1, r3, #17
 800134a:	4623      	mov	r3, r4
 800134c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001350:	4623      	mov	r3, r4
 8001352:	0458      	lsls	r0, r3, #17
 8001354:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001358:	1814      	adds	r4, r2, r0
 800135a:	643c      	str	r4, [r7, #64]	; 0x40
 800135c:	414b      	adcs	r3, r1
 800135e:	647b      	str	r3, [r7, #68]	; 0x44
 8001360:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001364:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001368:	4b72      	ldr	r3, [pc, #456]	; (8001534 <BMP280_measureP+0x2d8>)
 800136a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136e:	b21b      	sxth	r3, r3
 8001370:	17da      	asrs	r2, r3, #31
 8001372:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001376:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800137a:	f04f 0000 	mov.w	r0, #0
 800137e:	f04f 0100 	mov.w	r1, #0
 8001382:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001386:	00d9      	lsls	r1, r3, #3
 8001388:	2000      	movs	r0, #0
 800138a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800138e:	1814      	adds	r4, r2, r0
 8001390:	63bc      	str	r4, [r7, #56]	; 0x38
 8001392:	414b      	adcs	r3, r1
 8001394:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001396:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800139a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800139e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80013a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013a6:	fb03 f102 	mul.w	r1, r3, r2
 80013aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80013ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	18ca      	adds	r2, r1, r3
 80013b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013bc:	fba3 1303 	umull	r1, r3, r3, r3
 80013c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80013c4:	460b      	mov	r3, r1
 80013c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80013ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80013ce:	18d3      	adds	r3, r2, r3
 80013d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80013d4:	4b58      	ldr	r3, [pc, #352]	; (8001538 <BMP280_measureP+0x2dc>)
 80013d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013da:	b21b      	sxth	r3, r3
 80013dc:	17da      	asrs	r2, r3, #31
 80013de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80013e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80013e6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80013ea:	462b      	mov	r3, r5
 80013ec:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80013f0:	4642      	mov	r2, r8
 80013f2:	fb02 f203 	mul.w	r2, r2, r3
 80013f6:	464b      	mov	r3, r9
 80013f8:	4621      	mov	r1, r4
 80013fa:	fb01 f303 	mul.w	r3, r1, r3
 80013fe:	4413      	add	r3, r2
 8001400:	4622      	mov	r2, r4
 8001402:	4641      	mov	r1, r8
 8001404:	fba2 1201 	umull	r1, r2, r2, r1
 8001408:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800140c:	460a      	mov	r2, r1
 800140e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001412:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001416:	4413      	add	r3, r2
 8001418:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800141c:	f04f 0000 	mov.w	r0, #0
 8001420:	f04f 0100 	mov.w	r1, #0
 8001424:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001428:	4623      	mov	r3, r4
 800142a:	0a18      	lsrs	r0, r3, #8
 800142c:	462b      	mov	r3, r5
 800142e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001432:	462b      	mov	r3, r5
 8001434:	1219      	asrs	r1, r3, #8
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <BMP280_measureP+0x2e0>)
 8001438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143c:	b21b      	sxth	r3, r3
 800143e:	17da      	asrs	r2, r3, #31
 8001440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001444:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001448:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800144c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001450:	464a      	mov	r2, r9
 8001452:	fb02 f203 	mul.w	r2, r2, r3
 8001456:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800145a:	4644      	mov	r4, r8
 800145c:	fb04 f303 	mul.w	r3, r4, r3
 8001460:	441a      	add	r2, r3
 8001462:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001466:	4644      	mov	r4, r8
 8001468:	fba3 4304 	umull	r4, r3, r3, r4
 800146c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001470:	4623      	mov	r3, r4
 8001472:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001476:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800147a:	18d3      	adds	r3, r2, r3
 800147c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800148c:	464c      	mov	r4, r9
 800148e:	0323      	lsls	r3, r4, #12
 8001490:	4644      	mov	r4, r8
 8001492:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001496:	4644      	mov	r4, r8
 8001498:	0322      	lsls	r2, r4, #12
 800149a:	1884      	adds	r4, r0, r2
 800149c:	633c      	str	r4, [r7, #48]	; 0x30
 800149e:	eb41 0303 	adc.w	r3, r1, r3
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
 80014a4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80014a8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80014ac:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80014b0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80014b4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80014b8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80014bc:	4b20      	ldr	r3, [pc, #128]	; (8001540 <BMP280_measureP+0x2e4>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	2200      	movs	r2, #0
 80014c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014cc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80014d0:	462b      	mov	r3, r5
 80014d2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80014d6:	4642      	mov	r2, r8
 80014d8:	fb02 f203 	mul.w	r2, r2, r3
 80014dc:	464b      	mov	r3, r9
 80014de:	4621      	mov	r1, r4
 80014e0:	fb01 f303 	mul.w	r3, r1, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	4622      	mov	r2, r4
 80014e8:	4641      	mov	r1, r8
 80014ea:	fba2 1201 	umull	r1, r2, r2, r1
 80014ee:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80014f2:	460a      	mov	r2, r1
 80014f4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80014f8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80014fc:	4413      	add	r3, r2
 80014fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800150e:	4629      	mov	r1, r5
 8001510:	104a      	asrs	r2, r1, #1
 8001512:	4629      	mov	r1, r5
 8001514:	17cb      	asrs	r3, r1, #31
 8001516:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800151a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800151e:	4313      	orrs	r3, r2
 8001520:	d110      	bne.n	8001544 <BMP280_measureP+0x2e8>
	{
	return 0;
 8001522:	2300      	movs	r3, #0
 8001524:	e154      	b.n	80017d0 <BMP280_measureP+0x574>
 8001526:	bf00      	nop
 8001528:	20000140 	.word	0x20000140
 800152c:	2000012e 	.word	0x2000012e
 8001530:	2000012c 	.word	0x2000012c
 8001534:	2000012a 	.word	0x2000012a
 8001538:	20000128 	.word	0x20000128
 800153c:	20000126 	.word	0x20000126
 8001540:	20000120 	.word	0x20000120
	}
	p = 1048576-adc_P;
 8001544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001548:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800154c:	17da      	asrs	r2, r3, #31
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001550:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001552:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001556:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800155a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800155e:	105b      	asrs	r3, r3, #1
 8001560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001564:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001568:	07db      	lsls	r3, r3, #31
 800156a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800156e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001572:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001576:	4621      	mov	r1, r4
 8001578:	1a89      	subs	r1, r1, r2
 800157a:	67b9      	str	r1, [r7, #120]	; 0x78
 800157c:	4629      	mov	r1, r5
 800157e:	eb61 0303 	sbc.w	r3, r1, r3
 8001582:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001584:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001588:	4622      	mov	r2, r4
 800158a:	462b      	mov	r3, r5
 800158c:	1891      	adds	r1, r2, r2
 800158e:	6239      	str	r1, [r7, #32]
 8001590:	415b      	adcs	r3, r3
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
 8001594:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001598:	4621      	mov	r1, r4
 800159a:	1851      	adds	r1, r2, r1
 800159c:	61b9      	str	r1, [r7, #24]
 800159e:	4629      	mov	r1, r5
 80015a0:	414b      	adcs	r3, r1
 80015a2:	61fb      	str	r3, [r7, #28]
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015b0:	4649      	mov	r1, r9
 80015b2:	018b      	lsls	r3, r1, #6
 80015b4:	4641      	mov	r1, r8
 80015b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015ba:	4641      	mov	r1, r8
 80015bc:	018a      	lsls	r2, r1, #6
 80015be:	4641      	mov	r1, r8
 80015c0:	1889      	adds	r1, r1, r2
 80015c2:	6139      	str	r1, [r7, #16]
 80015c4:	4649      	mov	r1, r9
 80015c6:	eb43 0101 	adc.w	r1, r3, r1
 80015ca:	6179      	str	r1, [r7, #20]
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015d8:	4649      	mov	r1, r9
 80015da:	008b      	lsls	r3, r1, #2
 80015dc:	4641      	mov	r1, r8
 80015de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015e2:	4641      	mov	r1, r8
 80015e4:	008a      	lsls	r2, r1, #2
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	4622      	mov	r2, r4
 80015ee:	189b      	adds	r3, r3, r2
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	460b      	mov	r3, r1
 80015f4:	462a      	mov	r2, r5
 80015f6:	eb42 0303 	adc.w	r3, r2, r3
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001608:	4649      	mov	r1, r9
 800160a:	008b      	lsls	r3, r1, #2
 800160c:	4641      	mov	r1, r8
 800160e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001612:	4641      	mov	r1, r8
 8001614:	008a      	lsls	r2, r1, #2
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	4603      	mov	r3, r0
 800161c:	4622      	mov	r2, r4
 800161e:	189b      	adds	r3, r3, r2
 8001620:	673b      	str	r3, [r7, #112]	; 0x70
 8001622:	462b      	mov	r3, r5
 8001624:	460a      	mov	r2, r1
 8001626:	eb42 0303 	adc.w	r3, r2, r3
 800162a:	677b      	str	r3, [r7, #116]	; 0x74
 800162c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001630:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001634:	f7ff fa68 	bl	8000b08 <__aeabi_ldivmod>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001640:	4b66      	ldr	r3, [pc, #408]	; (80017dc <BMP280_measureP+0x580>)
 8001642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001646:	b21b      	sxth	r3, r3
 8001648:	17da      	asrs	r2, r3, #31
 800164a:	66bb      	str	r3, [r7, #104]	; 0x68
 800164c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800164e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001652:	f04f 0000 	mov.w	r0, #0
 8001656:	f04f 0100 	mov.w	r1, #0
 800165a:	0b50      	lsrs	r0, r2, #13
 800165c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001660:	1359      	asrs	r1, r3, #13
 8001662:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001666:	462b      	mov	r3, r5
 8001668:	fb00 f203 	mul.w	r2, r0, r3
 800166c:	4623      	mov	r3, r4
 800166e:	fb03 f301 	mul.w	r3, r3, r1
 8001672:	4413      	add	r3, r2
 8001674:	4622      	mov	r2, r4
 8001676:	fba2 1200 	umull	r1, r2, r2, r0
 800167a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800167e:	460a      	mov	r2, r1
 8001680:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001684:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001688:	4413      	add	r3, r2
 800168a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800168e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001692:	f04f 0000 	mov.w	r0, #0
 8001696:	f04f 0100 	mov.w	r1, #0
 800169a:	0b50      	lsrs	r0, r2, #13
 800169c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80016a0:	1359      	asrs	r1, r3, #13
 80016a2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80016a6:	462b      	mov	r3, r5
 80016a8:	fb00 f203 	mul.w	r2, r0, r3
 80016ac:	4623      	mov	r3, r4
 80016ae:	fb03 f301 	mul.w	r3, r3, r1
 80016b2:	4413      	add	r3, r2
 80016b4:	4622      	mov	r2, r4
 80016b6:	fba2 1200 	umull	r1, r2, r2, r0
 80016ba:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80016be:	460a      	mov	r2, r1
 80016c0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80016c4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80016c8:	4413      	add	r3, r2
 80016ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80016da:	4621      	mov	r1, r4
 80016dc:	0e4a      	lsrs	r2, r1, #25
 80016de:	4629      	mov	r1, r5
 80016e0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016e4:	4629      	mov	r1, r5
 80016e6:	164b      	asrs	r3, r1, #25
 80016e8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80016ec:	4b3c      	ldr	r3, [pc, #240]	; (80017e0 <BMP280_measureP+0x584>)
 80016ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	17da      	asrs	r2, r3, #31
 80016f6:	663b      	str	r3, [r7, #96]	; 0x60
 80016f8:	667a      	str	r2, [r7, #100]	; 0x64
 80016fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016fe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001702:	462a      	mov	r2, r5
 8001704:	fb02 f203 	mul.w	r2, r2, r3
 8001708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800170c:	4621      	mov	r1, r4
 800170e:	fb01 f303 	mul.w	r3, r1, r3
 8001712:	4413      	add	r3, r2
 8001714:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001718:	4621      	mov	r1, r4
 800171a:	fba2 1201 	umull	r1, r2, r2, r1
 800171e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001722:	460a      	mov	r2, r1
 8001724:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001728:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800172c:	4413      	add	r3, r2
 800172e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800173e:	4621      	mov	r1, r4
 8001740:	0cca      	lsrs	r2, r1, #19
 8001742:	4629      	mov	r1, r5
 8001744:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001748:	4629      	mov	r1, r5
 800174a:	14cb      	asrs	r3, r1, #19
 800174c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001750:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001754:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001758:	1884      	adds	r4, r0, r2
 800175a:	65bc      	str	r4, [r7, #88]	; 0x58
 800175c:	eb41 0303 	adc.w	r3, r1, r3
 8001760:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001762:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001766:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800176a:	4621      	mov	r1, r4
 800176c:	1889      	adds	r1, r1, r2
 800176e:	6539      	str	r1, [r7, #80]	; 0x50
 8001770:	4629      	mov	r1, r5
 8001772:	eb43 0101 	adc.w	r1, r3, r1
 8001776:	6579      	str	r1, [r7, #84]	; 0x54
 8001778:	f04f 0000 	mov.w	r0, #0
 800177c:	f04f 0100 	mov.w	r1, #0
 8001780:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001784:	4623      	mov	r3, r4
 8001786:	0a18      	lsrs	r0, r3, #8
 8001788:	462b      	mov	r3, r5
 800178a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800178e:	462b      	mov	r3, r5
 8001790:	1219      	asrs	r1, r3, #8
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <BMP280_measureP+0x588>)
 8001794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001798:	b21b      	sxth	r3, r3
 800179a:	17da      	asrs	r2, r3, #31
 800179c:	64bb      	str	r3, [r7, #72]	; 0x48
 800179e:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80017ac:	464c      	mov	r4, r9
 80017ae:	0123      	lsls	r3, r4, #4
 80017b0:	4644      	mov	r4, r8
 80017b2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80017b6:	4644      	mov	r4, r8
 80017b8:	0122      	lsls	r2, r4, #4
 80017ba:	1884      	adds	r4, r0, r2
 80017bc:	603c      	str	r4, [r7, #0]
 80017be:	eb41 0303 	adc.w	r3, r1, r3
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017c8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 80017cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80017d6:	46bd      	mov	sp, r7
 80017d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017dc:	20000134 	.word	0x20000134
 80017e0:	20000132 	.word	0x20000132
 80017e4:	20000130 	.word	0x20000130

080017e8 <BMP280_measureH>:

int32_t BMP280_measureH(int32_t Pres, int32_t Temp){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <BMP280_measureH+0x14>
 80017f8:	2300      	movs	r3, #0
 80017fa:	e062      	b.n	80018c2 <BMP280_measureH+0xda>
	var1 = -log((((double)Pres)/100)/101325);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7fe fe41 	bl	8000484 <__aeabi_i2d>
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <BMP280_measureH+0x100>)
 8001808:	f7fe ffd0 	bl	80007ac <__aeabi_ddiv>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	a32e      	add	r3, pc, #184	; (adr r3, 80018d0 <BMP280_measureH+0xe8>)
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	f7fe ffc7 	bl	80007ac <__aeabi_ddiv>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	ec43 2b17 	vmov	d7, r2, r3
 8001826:	eeb0 0a47 	vmov.f32	s0, s14
 800182a:	eef0 0a67 	vmov.f32	s1, s15
 800182e:	f007 fadb 	bl	8008de8 <log>
 8001832:	ec53 2b10 	vmov	r2, r3, d0
 8001836:	4611      	mov	r1, r2
 8001838:	61b9      	str	r1, [r7, #24]
 800183a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800183e:	61fb      	str	r3, [r7, #28]

	if(var1 == 0) return 0;
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800184c:	f7ff f8ec 	bl	8000a28 <__aeabi_dcmpeq>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <BMP280_measureH+0x72>
 8001856:	2300      	movs	r3, #0
 8001858:	e033      	b.n	80018c2 <BMP280_measureH+0xda>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 800185a:	6838      	ldr	r0, [r7, #0]
 800185c:	f7fe fe12 	bl	8000484 <__aeabi_i2d>
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <BMP280_measureH+0x100>)
 8001866:	f7fe ffa1 	bl	80007ac <__aeabi_ddiv>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	a319      	add	r3, pc, #100	; (adr r3, 80018d8 <BMP280_measureH+0xf0>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f7fe fcb8 	bl	80001ec <__adddf3>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	a117      	add	r1, pc, #92	; (adr r1, 80018e0 <BMP280_measureH+0xf8>)
 8001882:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001886:	f7fe ff91 	bl	80007ac <__aeabi_ddiv>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	h = (var1/var2)*100;
 8001892:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001896:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800189a:	f7fe ff87 	bl	80007ac <__aeabi_ddiv>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <BMP280_measureH+0x100>)
 80018ac:	f7fe fe54 	bl	8000558 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int32_t)h;
 80018b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018bc:	f7ff f8fc 	bl	8000ab8 <__aeabi_d2iz>
 80018c0:	4603      	mov	r3, r0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	f3af 8000 	nop.w
 80018d0:	00000000 	.word	0x00000000
 80018d4:	40f8bcd0 	.word	0x40f8bcd0
 80018d8:	66666666 	.word	0x66666666
 80018dc:	40711266 	.word	0x40711266
 80018e0:	ca402a92 	.word	0xca402a92
 80018e4:	3fa17e3e 	.word	0x3fa17e3e
 80018e8:	40590000 	.word	0x40590000

080018ec <BMP280_init>:

void BMP280_init(void){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	BMP280_unselect();
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018f6:	4808      	ldr	r0, [pc, #32]	; (8001918 <BMP280_init+0x2c>)
 80018f8:	f002 fdac 	bl	8004454 <HAL_GPIO_WritePin>
	BMP280_config();
 80018fc:	f7ff fb64 	bl	8000fc8 <BMP280_config>
	BMP280_ID = BMP280_read(0x89);
 8001900:	2089      	movs	r0, #137	; 0x89
 8001902:	f7ff fb33 	bl	8000f6c <BMP280_read>
 8001906:	4603      	mov	r3, r0
 8001908:	461a      	mov	r2, r3
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <BMP280_init+0x30>)
 800190c:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 800190e:	f7ff fb67 	bl	8000fe0 <BMP280_calibrationData>
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40020000 	.word	0x40020000
 800191c:	2000011c 	.word	0x2000011c

08001920 <BMP280_calculate>:

void BMP280_calculate(void){
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	BMP280_readRawValues();
 8001924:	f7ff fc12 	bl	800114c <BMP280_readRawValues>
	Temperature.data = BMP280_measureT(T_raw);
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <BMP280_calculate+0x4c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fc51 	bl	80011d4 <BMP280_measureT>
 8001932:	4603      	mov	r3, r0
 8001934:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <BMP280_calculate+0x50>)
 8001936:	6013      	str	r3, [r2, #0]
	Presure.data     = (BMP280_measureP(P_raw)*100)/256;
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <BMP280_calculate+0x54>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fc8d 	bl	800125c <BMP280_measureP>
 8001942:	4603      	mov	r3, r0
 8001944:	2264      	movs	r2, #100	; 0x64
 8001946:	fb02 f303 	mul.w	r3, r2, r3
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	461a      	mov	r2, r3
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <BMP280_calculate+0x58>)
 8001950:	601a      	str	r2, [r3, #0]
	Altitud.data = BMP280_measureH(Presure.data, Temperature.data);
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <BMP280_calculate+0x58>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a06      	ldr	r2, [pc, #24]	; (8001970 <BMP280_calculate+0x50>)
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff43 	bl	80017e8 <BMP280_measureH>
 8001962:	4603      	mov	r3, r0
 8001964:	4a05      	ldr	r2, [pc, #20]	; (800197c <BMP280_calculate+0x5c>)
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000138 	.word	0x20000138
 8001970:	20000144 	.word	0x20000144
 8001974:	2000013c 	.word	0x2000013c
 8001978:	2000014c 	.word	0x2000014c
 800197c:	20000148 	.word	0x20000148

08001980 <NRF24_write>:

extern MPU6050_t MPU6050;

S32_t AngleX, AngleY;

void NRF24_write(uint8_t Adr, uint8_t data){
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	460a      	mov	r2, r1
 800198a:	71fb      	strb	r3, [r7, #7]
 800198c:	4613      	mov	r3, r2
 800198e:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	f043 0320 	orr.w	r3, r3, #32
 8001996:	b2db      	uxtb	r3, r3
 8001998:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 800199a:	2200      	movs	r2, #0
 800199c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <NRF24_write+0x54>)
 80019a2:	f002 fd57 	bl	8004454 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 80019a6:	1dfb      	adds	r3, r7, #7
 80019a8:	2201      	movs	r2, #1
 80019aa:	4619      	mov	r1, r3
 80019ac:	480a      	ldr	r0, [pc, #40]	; (80019d8 <NRF24_write+0x58>)
 80019ae:	f004 feed 	bl	800678c <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &data, 1);
 80019b2:	1dbb      	adds	r3, r7, #6
 80019b4:	2201      	movs	r2, #1
 80019b6:	4619      	mov	r1, r3
 80019b8:	4807      	ldr	r0, [pc, #28]	; (80019d8 <NRF24_write+0x58>)
 80019ba:	f004 fee7 	bl	800678c <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 80019be:	2201      	movs	r2, #1
 80019c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019c4:	4803      	ldr	r0, [pc, #12]	; (80019d4 <NRF24_write+0x54>)
 80019c6:	f002 fd45 	bl	8004454 <HAL_GPIO_WritePin>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40020400 	.word	0x40020400
 80019d8:	20000558 	.word	0x20000558

080019dc <NRF24_Addr_write>:

void NRF24_Addr_write(uint8_t Adr,uint8_t *ADDRESS){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
	Adr |= W_REGISTER;
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	f043 0320 	orr.w	r3, r3, #32
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[5];
	buffer[0] = ADDRESS[4];
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	791b      	ldrb	r3, [r3, #4]
 80019f6:	723b      	strb	r3, [r7, #8]
	buffer[1] = ADDRESS[3];
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	78db      	ldrb	r3, [r3, #3]
 80019fc:	727b      	strb	r3, [r7, #9]
	buffer[2] = ADDRESS[2];
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	789b      	ldrb	r3, [r3, #2]
 8001a02:	72bb      	strb	r3, [r7, #10]
	buffer[3] = ADDRESS[1];
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	785b      	ldrb	r3, [r3, #1]
 8001a08:	72fb      	strb	r3, [r7, #11]
	buffer[4] = ADDRESS[0];
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	733b      	strb	r3, [r7, #12]

	NRF24_select();
 8001a10:	2200      	movs	r2, #0
 8001a12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a16:	4812      	ldr	r0, [pc, #72]	; (8001a60 <NRF24_Addr_write+0x84>)
 8001a18:	f002 fd1c 	bl	8004454 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001a1c:	1dfb      	adds	r3, r7, #7
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4619      	mov	r1, r3
 8001a22:	4810      	ldr	r0, [pc, #64]	; (8001a64 <NRF24_Addr_write+0x88>)
 8001a24:	f004 feb2 	bl	800678c <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]
 8001a2c:	e00b      	b.n	8001a46 <NRF24_Addr_write+0x6a>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &buffer[n], 1);
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	f107 0208 	add.w	r2, r7, #8
 8001a34:	4413      	add	r3, r2
 8001a36:	2201      	movs	r2, #1
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480a      	ldr	r0, [pc, #40]	; (8001a64 <NRF24_Addr_write+0x88>)
 8001a3c:	f004 fea6 	bl	800678c <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	3301      	adds	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d9f0      	bls.n	8001a2e <NRF24_Addr_write+0x52>
	}

	NRF24_unselect();
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a52:	4803      	ldr	r0, [pc, #12]	; (8001a60 <NRF24_Addr_write+0x84>)
 8001a54:	f002 fcfe 	bl	8004454 <HAL_GPIO_WritePin>

}
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40020400 	.word	0x40020400
 8001a64:	20000558 	.word	0x20000558

08001a68 <NRF24_read>:

uint8_t NRF24_read(uint8_t Adr){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
	uint8_t Replay;
	NRF24_select();
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a78:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <NRF24_read+0x48>)
 8001a7a:	f002 fceb 	bl	8004454 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001a7e:	1dfb      	adds	r3, r7, #7
 8001a80:	2201      	movs	r2, #1
 8001a82:	4619      	mov	r1, r3
 8001a84:	480b      	ldr	r0, [pc, #44]	; (8001ab4 <NRF24_read+0x4c>)
 8001a86:	f004 fe81 	bl	800678c <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(SPI_NRF24, &Replay, 1);
 8001a8a:	f107 030f 	add.w	r3, r7, #15
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4619      	mov	r1, r3
 8001a92:	4808      	ldr	r0, [pc, #32]	; (8001ab4 <NRF24_read+0x4c>)
 8001a94:	f004 ff2c 	bl	80068f0 <HAL_SPI_Receive_DMA>
	NRF24_unselect();
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a9e:	4804      	ldr	r0, [pc, #16]	; (8001ab0 <NRF24_read+0x48>)
 8001aa0:	f002 fcd8 	bl	8004454 <HAL_GPIO_WritePin>
	return Replay;
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	20000558 	.word	0x20000558

08001ab8 <NRF24_Addr_read>:

void NRF24_Addr_read(uint8_t Adr){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[5];
	NRF24_select();
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ac8:	4836      	ldr	r0, [pc, #216]	; (8001ba4 <NRF24_Addr_read+0xec>)
 8001aca:	f002 fcc3 	bl	8004454 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001ace:	1dfb      	adds	r3, r7, #7
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4834      	ldr	r0, [pc, #208]	; (8001ba8 <NRF24_Addr_read+0xf0>)
 8001ad6:	f004 fe59 	bl	800678c <HAL_SPI_Transmit_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e00b      	b.n	8001af8 <NRF24_Addr_read+0x40>
		HAL_SPI_Receive_DMA(SPI_NRF24, &Buffer[i], 1);
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	f107 0208 	add.w	r2, r7, #8
 8001ae6:	4413      	add	r3, r2
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4619      	mov	r1, r3
 8001aec:	482e      	ldr	r0, [pc, #184]	; (8001ba8 <NRF24_Addr_read+0xf0>)
 8001aee:	f004 feff 	bl	80068f0 <HAL_SPI_Receive_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	3301      	adds	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d9f0      	bls.n	8001ae0 <NRF24_Addr_read+0x28>
	}
	NRF24_unselect();
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b04:	4827      	ldr	r0, [pc, #156]	; (8001ba4 <NRF24_Addr_read+0xec>)
 8001b06:	f002 fca5 	bl	8004454 <HAL_GPIO_WritePin>
	switch (Adr) {
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	2b10      	cmp	r3, #16
 8001b0e:	d030      	beq.n	8001b72 <NRF24_Addr_read+0xba>
 8001b10:	2b10      	cmp	r3, #16
 8001b12:	dc43      	bgt.n	8001b9c <NRF24_Addr_read+0xe4>
 8001b14:	2b0a      	cmp	r3, #10
 8001b16:	d002      	beq.n	8001b1e <NRF24_Addr_read+0x66>
 8001b18:	2b0b      	cmp	r3, #11
 8001b1a:	d015      	beq.n	8001b48 <NRF24_Addr_read+0x90>
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
			break;
	}
}
 8001b1c:	e03e      	b.n	8001b9c <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[4]=Buffer[0];
 8001b1e:	7a3a      	ldrb	r2, [r7, #8]
 8001b20:	4b22      	ldr	r3, [pc, #136]	; (8001bac <NRF24_Addr_read+0xf4>)
 8001b22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[3]=Buffer[1];
 8001b26:	7a7a      	ldrb	r2, [r7, #9]
 8001b28:	4b20      	ldr	r3, [pc, #128]	; (8001bac <NRF24_Addr_read+0xf4>)
 8001b2a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[2]=Buffer[2];
 8001b2e:	7aba      	ldrb	r2, [r7, #10]
 8001b30:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <NRF24_Addr_read+0xf4>)
 8001b32:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[1]=Buffer[3];
 8001b36:	7afa      	ldrb	r2, [r7, #11]
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <NRF24_Addr_read+0xf4>)
 8001b3a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[0]=Buffer[4];
 8001b3e:	7b3a      	ldrb	r2, [r7, #12]
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <NRF24_Addr_read+0xf4>)
 8001b42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			break;
 8001b46:	e029      	b.n	8001b9c <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[4]=Buffer[0];
 8001b48:	7a3a      	ldrb	r2, [r7, #8]
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <NRF24_Addr_read+0xf4>)
 8001b4c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[3]=Buffer[1];
 8001b50:	7a7a      	ldrb	r2, [r7, #9]
 8001b52:	4b16      	ldr	r3, [pc, #88]	; (8001bac <NRF24_Addr_read+0xf4>)
 8001b54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[2]=Buffer[2];
 8001b58:	7aba      	ldrb	r2, [r7, #10]
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <NRF24_Addr_read+0xf4>)
 8001b5c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[1]=Buffer[3];
 8001b60:	7afa      	ldrb	r2, [r7, #11]
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <NRF24_Addr_read+0xf4>)
 8001b64:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[0]=Buffer[4];
 8001b68:	7b3a      	ldrb	r2, [r7, #12]
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <NRF24_Addr_read+0xf4>)
 8001b6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
			break;
 8001b70:	e014      	b.n	8001b9c <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.TX_ADDR[4]=Buffer[0];
 8001b72:	7a3a      	ldrb	r2, [r7, #8]
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <NRF24_Addr_read+0xf4>)
 8001b76:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			NRF24_Configurations_Struct.Actual.TX_ADDR[3]=Buffer[1];
 8001b7a:	7a7a      	ldrb	r2, [r7, #9]
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <NRF24_Addr_read+0xf4>)
 8001b7e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
 8001b82:	7aba      	ldrb	r2, [r7, #10]
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <NRF24_Addr_read+0xf4>)
 8001b86:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
 8001b8a:	7afa      	ldrb	r2, [r7, #11]
 8001b8c:	4b07      	ldr	r3, [pc, #28]	; (8001bac <NRF24_Addr_read+0xf4>)
 8001b8e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
 8001b92:	7b3a      	ldrb	r2, [r7, #12]
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <NRF24_Addr_read+0xf4>)
 8001b96:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
			break;
 8001b9a:	bf00      	nop
}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	20000558 	.word	0x20000558
 8001bac:	20000150 	.word	0x20000150

08001bb0 <NRF24_FlushTxFIFO>:

void NRF24_FlushTxFIFO(void){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_TX;
 8001bb6:	23e1      	movs	r3, #225	; 0xe1
 8001bb8:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bc0:	4809      	ldr	r0, [pc, #36]	; (8001be8 <NRF24_FlushTxFIFO+0x38>)
 8001bc2:	f002 fc47 	bl	8004454 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001bc6:	1dfb      	adds	r3, r7, #7
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4807      	ldr	r0, [pc, #28]	; (8001bec <NRF24_FlushTxFIFO+0x3c>)
 8001bce:	f004 fddd 	bl	800678c <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bd8:	4803      	ldr	r0, [pc, #12]	; (8001be8 <NRF24_FlushTxFIFO+0x38>)
 8001bda:	f002 fc3b 	bl	8004454 <HAL_GPIO_WritePin>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40020400 	.word	0x40020400
 8001bec:	20000558 	.word	0x20000558

08001bf0 <NRF24_FlushRxFIFO>:

void NRF24_FlushRxFIFO(void){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_RX;
 8001bf6:	23e2      	movs	r3, #226	; 0xe2
 8001bf8:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c00:	4809      	ldr	r0, [pc, #36]	; (8001c28 <NRF24_FlushRxFIFO+0x38>)
 8001c02:	f002 fc27 	bl	8004454 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001c06:	1dfb      	adds	r3, r7, #7
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4807      	ldr	r0, [pc, #28]	; (8001c2c <NRF24_FlushRxFIFO+0x3c>)
 8001c0e:	f004 fdbd 	bl	800678c <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 8001c12:	2201      	movs	r2, #1
 8001c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c18:	4803      	ldr	r0, [pc, #12]	; (8001c28 <NRF24_FlushRxFIFO+0x38>)
 8001c1a:	f002 fc1b 	bl	8004454 <HAL_GPIO_WritePin>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	20000558 	.word	0x20000558

08001c30 <NRF24_PowerUp>:

void NRF24_PowerUp(void){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
	uint8_t Adr = 0x00;
 8001c36:	2300      	movs	r3, #0
 8001c38:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer= NRF24_read(Adr);
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff13 	bl	8001a68 <NRF24_read>
 8001c42:	4603      	mov	r3, r0
 8001c44:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	f043 0320 	orr.w	r3, r3, #32
 8001c4c:	71fb      	strb	r3, [r7, #7]
	Buffer |= 0x02;
 8001c4e:	79bb      	ldrb	r3, [r7, #6]
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	71bb      	strb	r3, [r7, #6]
	NRF24_write(Adr, Buffer);
 8001c56:	79ba      	ldrb	r2, [r7, #6]
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fe8f 	bl	8001980 <NRF24_write>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <NRF24_ActualConfiguration>:

void NRF24_ActualConfiguration(void){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
	NRF24_Configurations_Struct.Actual.CONFIG 		= NRF24_read(CONFIG);
 8001c70:	2000      	movs	r0, #0
 8001c72:	f7ff fef9 	bl	8001a68 <NRF24_read>
 8001c76:	4603      	mov	r3, r0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b5f      	ldr	r3, [pc, #380]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001c7c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	NRF24_Configurations_Struct.Actual.EN_AA  		= NRF24_read(EN_AA);
 8001c80:	2001      	movs	r0, #1
 8001c82:	f7ff fef1 	bl	8001a68 <NRF24_read>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b5b      	ldr	r3, [pc, #364]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001c8c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	NRF24_Configurations_Struct.Actual.EN_RXADDR  	= NRF24_read(EN_RXADDR);
 8001c90:	2002      	movs	r0, #2
 8001c92:	f7ff fee9 	bl	8001a68 <NRF24_read>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b57      	ldr	r3, [pc, #348]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001c9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	NRF24_Configurations_Struct.Actual.SETUP_AW  	= NRF24_read(SETUP_AW);
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	f7ff fee1 	bl	8001a68 <NRF24_read>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001cac:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	NRF24_Configurations_Struct.Actual.SETUP_RETR 	= NRF24_read(SETUP_RETR);
 8001cb0:	2004      	movs	r0, #4
 8001cb2:	f7ff fed9 	bl	8001a68 <NRF24_read>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b4f      	ldr	r3, [pc, #316]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001cbc:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	NRF24_Configurations_Struct.Actual.RF_CH  		= NRF24_read(RF_CH);
 8001cc0:	2005      	movs	r0, #5
 8001cc2:	f7ff fed1 	bl	8001a68 <NRF24_read>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b4b      	ldr	r3, [pc, #300]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001ccc:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	NRF24_Configurations_Struct.Actual.RF_SETUP  	= NRF24_read(RF_SETUP);
 8001cd0:	2006      	movs	r0, #6
 8001cd2:	f7ff fec9 	bl	8001a68 <NRF24_read>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001cdc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	NRF24_Configurations_Struct.Actual.STATUS  		= NRF24_read(STATUS);
 8001ce0:	2007      	movs	r0, #7
 8001ce2:	f7ff fec1 	bl	8001a68 <NRF24_read>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b43      	ldr	r3, [pc, #268]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001cec:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	NRF24_Configurations_Struct.Actual.OBSERVE  	= NRF24_read(OBSERVE);
 8001cf0:	2008      	movs	r0, #8
 8001cf2:	f7ff feb9 	bl	8001a68 <NRF24_read>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b3f      	ldr	r3, [pc, #252]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001cfc:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	NRF24_Configurations_Struct.Actual.CD  			= NRF24_read(CD);
 8001d00:	2009      	movs	r0, #9
 8001d02:	f7ff feb1 	bl	8001a68 <NRF24_read>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001d0c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	NRF24_Addr_read(RX_ADDR_P0);
 8001d10:	200a      	movs	r0, #10
 8001d12:	f7ff fed1 	bl	8001ab8 <NRF24_Addr_read>
	NRF24_Addr_read(RX_ADDR_P1);
 8001d16:	200b      	movs	r0, #11
 8001d18:	f7ff fece 	bl	8001ab8 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_ADDR_P2  	= NRF24_read(RX_ADDR_P2);
 8001d1c:	200c      	movs	r0, #12
 8001d1e:	f7ff fea3 	bl	8001a68 <NRF24_read>
 8001d22:	4603      	mov	r3, r0
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001d28:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	NRF24_Configurations_Struct.Actual.RX_ADDR_P3 	= NRF24_read(RX_ADDR_P3);
 8001d2c:	200d      	movs	r0, #13
 8001d2e:	f7ff fe9b 	bl	8001a68 <NRF24_read>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b30      	ldr	r3, [pc, #192]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001d38:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	NRF24_Configurations_Struct.Actual.RX_ADDR_P4  	= NRF24_read(RX_ADDR_P4);
 8001d3c:	200e      	movs	r0, #14
 8001d3e:	f7ff fe93 	bl	8001a68 <NRF24_read>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001d48:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	NRF24_Configurations_Struct.Actual.RX_ADDR_P5  	= NRF24_read(RX_ADDR_P5);
 8001d4c:	200f      	movs	r0, #15
 8001d4e:	f7ff fe8b 	bl	8001a68 <NRF24_read>
 8001d52:	4603      	mov	r3, r0
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001d58:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	NRF24_Addr_read(TX_ADDR);
 8001d5c:	2010      	movs	r0, #16
 8001d5e:	f7ff feab 	bl	8001ab8 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_PW_P0  	= NRF24_read(RX_PW_P0);
 8001d62:	2011      	movs	r0, #17
 8001d64:	f7ff fe80 	bl	8001a68 <NRF24_read>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001d6e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	NRF24_Configurations_Struct.Actual.RX_PW_P1  	= NRF24_read(RX_PW_P1);
 8001d72:	2012      	movs	r0, #18
 8001d74:	f7ff fe78 	bl	8001a68 <NRF24_read>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001d7e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	NRF24_Configurations_Struct.Actual.RX_PW_P2  	= NRF24_read(RX_PW_P2);
 8001d82:	2013      	movs	r0, #19
 8001d84:	f7ff fe70 	bl	8001a68 <NRF24_read>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001d8e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	NRF24_Configurations_Struct.Actual.RX_PW_P3  	= NRF24_read(RX_PW_P3);
 8001d92:	2014      	movs	r0, #20
 8001d94:	f7ff fe68 	bl	8001a68 <NRF24_read>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001d9e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	NRF24_Configurations_Struct.Actual.RX_PW_P4  	= NRF24_read(RX_PW_P4);
 8001da2:	2015      	movs	r0, #21
 8001da4:	f7ff fe60 	bl	8001a68 <NRF24_read>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001dae:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	NRF24_Configurations_Struct.Actual.RX_PW_P5  	= NRF24_read(RX_PW_P5);
 8001db2:	2016      	movs	r0, #22
 8001db4:	f7ff fe58 	bl	8001a68 <NRF24_read>
 8001db8:	4603      	mov	r3, r0
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001dbe:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	NRF24_Configurations_Struct.Actual.FIFO_STATUS  = NRF24_read(FIFO_STATUS);
 8001dc2:	2017      	movs	r0, #23
 8001dc4:	f7ff fe50 	bl	8001a68 <NRF24_read>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001dce:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	NRF24_Configurations_Struct.Actual.DYNPD  		= NRF24_read(DYNPD);
 8001dd2:	201c      	movs	r0, #28
 8001dd4:	f7ff fe48 	bl	8001a68 <NRF24_read>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001dde:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	NRF24_Configurations_Struct.Actual.FEATURE  	= NRF24_read(FEATURE);
 8001de2:	201d      	movs	r0, #29
 8001de4:	f7ff fe40 	bl	8001a68 <NRF24_read>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b02      	ldr	r3, [pc, #8]	; (8001df8 <NRF24_ActualConfiguration+0x18c>)
 8001dee:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000150 	.word	0x20000150

08001dfc <NRF24_config>:

void NRF24_config(NRF24_Address_Configurations_t Configuration_struct){
 8001dfc:	b084      	sub	sp, #16
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	f107 0c08 	add.w	ip, r7, #8
 8001e06:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	NRF24_write(CONFIG,	Configuration_struct.CONFIG);
 8001e0a:	7a3b      	ldrb	r3, [r7, #8]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff fdb6 	bl	8001980 <NRF24_write>
	NRF24_write(EN_AA, Configuration_struct.EN_AA);
 8001e14:	7a7b      	ldrb	r3, [r7, #9]
 8001e16:	4619      	mov	r1, r3
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f7ff fdb1 	bl	8001980 <NRF24_write>
	NRF24_write(EN_RXADDR,Configuration_struct.EN_RXADDR);
 8001e1e:	7abb      	ldrb	r3, [r7, #10]
 8001e20:	4619      	mov	r1, r3
 8001e22:	2002      	movs	r0, #2
 8001e24:	f7ff fdac 	bl	8001980 <NRF24_write>
	NRF24_write(SETUP_AW,Configuration_struct.SETUP_AW);
 8001e28:	7afb      	ldrb	r3, [r7, #11]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f7ff fda7 	bl	8001980 <NRF24_write>
	NRF24_write(SETUP_RETR,Configuration_struct.SETUP_RETR);
 8001e32:	7b3b      	ldrb	r3, [r7, #12]
 8001e34:	4619      	mov	r1, r3
 8001e36:	2004      	movs	r0, #4
 8001e38:	f7ff fda2 	bl	8001980 <NRF24_write>
	NRF24_write(RF_CH,Configuration_struct.RF_CH);
 8001e3c:	7b7b      	ldrb	r3, [r7, #13]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	2005      	movs	r0, #5
 8001e42:	f7ff fd9d 	bl	8001980 <NRF24_write>
	NRF24_write(RF_SETUP,Configuration_struct.RF_SETUP);
 8001e46:	7bbb      	ldrb	r3, [r7, #14]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	2006      	movs	r0, #6
 8001e4c:	f7ff fd98 	bl	8001980 <NRF24_write>
	NRF24_write(STATUS,Configuration_struct.STATUS);
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	4619      	mov	r1, r3
 8001e54:	2007      	movs	r0, #7
 8001e56:	f7ff fd93 	bl	8001980 <NRF24_write>
	NRF24_write(OBSERVE,Configuration_struct.OBSERVE);
 8001e5a:	7c3b      	ldrb	r3, [r7, #16]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	2008      	movs	r0, #8
 8001e60:	f7ff fd8e 	bl	8001980 <NRF24_write>
	NRF24_write(CD,Configuration_struct.CD);
 8001e64:	7c7b      	ldrb	r3, [r7, #17]
 8001e66:	4619      	mov	r1, r3
 8001e68:	2009      	movs	r0, #9
 8001e6a:	f7ff fd89 	bl	8001980 <NRF24_write>
	NRF24_Addr_write(RX_ADDR_P0, Configuration_struct.RX_ADDR_P0);
 8001e6e:	f107 0312 	add.w	r3, r7, #18
 8001e72:	4619      	mov	r1, r3
 8001e74:	200a      	movs	r0, #10
 8001e76:	f7ff fdb1 	bl	80019dc <NRF24_Addr_write>
	NRF24_Addr_write(RX_ADDR_P1, Configuration_struct.RX_ADDR_P1);
 8001e7a:	f107 0317 	add.w	r3, r7, #23
 8001e7e:	4619      	mov	r1, r3
 8001e80:	200b      	movs	r0, #11
 8001e82:	f7ff fdab 	bl	80019dc <NRF24_Addr_write>
	NRF24_write(RX_ADDR_P2,Configuration_struct.RX_ADDR_P2);
 8001e86:	7f3b      	ldrb	r3, [r7, #28]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	200c      	movs	r0, #12
 8001e8c:	f7ff fd78 	bl	8001980 <NRF24_write>
	NRF24_write(RX_ADDR_P3,Configuration_struct.RX_ADDR_P3);
 8001e90:	7f7b      	ldrb	r3, [r7, #29]
 8001e92:	4619      	mov	r1, r3
 8001e94:	200d      	movs	r0, #13
 8001e96:	f7ff fd73 	bl	8001980 <NRF24_write>
	NRF24_write(RX_ADDR_P4,Configuration_struct.RX_ADDR_P4);
 8001e9a:	7fbb      	ldrb	r3, [r7, #30]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	200e      	movs	r0, #14
 8001ea0:	f7ff fd6e 	bl	8001980 <NRF24_write>
	NRF24_write(RX_ADDR_P5,Configuration_struct.RX_ADDR_P5);
 8001ea4:	7ffb      	ldrb	r3, [r7, #31]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	200f      	movs	r0, #15
 8001eaa:	f7ff fd69 	bl	8001980 <NRF24_write>
	NRF24_Addr_write(TX_ADDR, Configuration_struct.TX_ADDR);
 8001eae:	f107 0320 	add.w	r3, r7, #32
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	2010      	movs	r0, #16
 8001eb6:	f7ff fd91 	bl	80019dc <NRF24_Addr_write>
	NRF24_write(RX_PW_P0,Configuration_struct.RX_PW_P0);
 8001eba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	2011      	movs	r0, #17
 8001ec2:	f7ff fd5d 	bl	8001980 <NRF24_write>
	NRF24_write(RX_PW_P1,Configuration_struct.RX_PW_P1);
 8001ec6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001eca:	4619      	mov	r1, r3
 8001ecc:	2012      	movs	r0, #18
 8001ece:	f7ff fd57 	bl	8001980 <NRF24_write>
	NRF24_write(RX_PW_P2,Configuration_struct.RX_PW_P2);
 8001ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	2013      	movs	r0, #19
 8001eda:	f7ff fd51 	bl	8001980 <NRF24_write>
	NRF24_write(RX_PW_P3,Configuration_struct.RX_PW_P3);
 8001ede:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	2014      	movs	r0, #20
 8001ee6:	f7ff fd4b 	bl	8001980 <NRF24_write>
	NRF24_write(RX_PW_P4,Configuration_struct.RX_PW_P4);
 8001eea:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001eee:	4619      	mov	r1, r3
 8001ef0:	2015      	movs	r0, #21
 8001ef2:	f7ff fd45 	bl	8001980 <NRF24_write>
	NRF24_write(RX_PW_P5,Configuration_struct.RX_PW_P5);
 8001ef6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001efa:	4619      	mov	r1, r3
 8001efc:	2016      	movs	r0, #22
 8001efe:	f7ff fd3f 	bl	8001980 <NRF24_write>
	NRF24_write(FIFO_STATUS,Configuration_struct.FIFO_STATUS);
 8001f02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f06:	4619      	mov	r1, r3
 8001f08:	2017      	movs	r0, #23
 8001f0a:	f7ff fd39 	bl	8001980 <NRF24_write>
	NRF24_write(DYNPD,Configuration_struct.DYNPD);
 8001f0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f12:	4619      	mov	r1, r3
 8001f14:	201c      	movs	r0, #28
 8001f16:	f7ff fd33 	bl	8001980 <NRF24_write>
	NRF24_write(FEATURE,Configuration_struct.FEATURE);
 8001f1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f1e:	4619      	mov	r1, r3
 8001f20:	201d      	movs	r0, #29
 8001f22:	f7ff fd2d 	bl	8001980 <NRF24_write>
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f2e:	b004      	add	sp, #16
 8001f30:	4770      	bx	lr
	...

08001f34 <NRF24_DefaultConfiguration>:

void NRF24_DefaultConfiguration(void){
 8001f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af06      	add	r7, sp, #24
	NRF24_FlushTxFIFO();
 8001f3a:	f7ff fe39 	bl	8001bb0 <NRF24_FlushTxFIFO>
	NRF24_FlushRxFIFO();
 8001f3e:	f7ff fe57 	bl	8001bf0 <NRF24_FlushRxFIFO>
	NRF24_Configurations_Struct.Default.CONFIG 			= 0x78;
 8001f42:	4b48      	ldr	r3, [pc, #288]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001f44:	2278      	movs	r2, #120	; 0x78
 8001f46:	701a      	strb	r2, [r3, #0]
	NRF24_Configurations_Struct.Default.EN_AA  			= 0x3F;
 8001f48:	4b46      	ldr	r3, [pc, #280]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001f4a:	223f      	movs	r2, #63	; 0x3f
 8001f4c:	705a      	strb	r2, [r3, #1]
	NRF24_Configurations_Struct.Default.EN_RXADDR  		= 0x03;
 8001f4e:	4b45      	ldr	r3, [pc, #276]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001f50:	2203      	movs	r2, #3
 8001f52:	709a      	strb	r2, [r3, #2]
	NRF24_Configurations_Struct.Default.SETUP_AW  		= 0x03;
 8001f54:	4b43      	ldr	r3, [pc, #268]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001f56:	2203      	movs	r2, #3
 8001f58:	70da      	strb	r2, [r3, #3]
	NRF24_Configurations_Struct.Default.SETUP_RETR 		= 0x03;
 8001f5a:	4b42      	ldr	r3, [pc, #264]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	711a      	strb	r2, [r3, #4]
	NRF24_Configurations_Struct.Default.RF_CH  			= 0x02;
 8001f60:	4b40      	ldr	r3, [pc, #256]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001f62:	2202      	movs	r2, #2
 8001f64:	715a      	strb	r2, [r3, #5]
	NRF24_Configurations_Struct.Default.RF_SETUP  		= 0x09;
 8001f66:	4b3f      	ldr	r3, [pc, #252]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001f68:	2209      	movs	r2, #9
 8001f6a:	719a      	strb	r2, [r3, #6]
	NRF24_Configurations_Struct.Default.STATUS  		= 0X70;
 8001f6c:	4b3d      	ldr	r3, [pc, #244]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001f6e:	2270      	movs	r2, #112	; 0x70
 8001f70:	71da      	strb	r2, [r3, #7]
	NRF24_Configurations_Struct.Default.OBSERVE  		= 0X00;
 8001f72:	4b3c      	ldr	r3, [pc, #240]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	721a      	strb	r2, [r3, #8]
	NRF24_Configurations_Struct.Default.CD  			= 0x00;
 8001f78:	4b3a      	ldr	r3, [pc, #232]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	725a      	strb	r2, [r3, #9]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[0]  	= 0xE7;
 8001f7e:	4b39      	ldr	r3, [pc, #228]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001f80:	22e7      	movs	r2, #231	; 0xe7
 8001f82:	729a      	strb	r2, [r3, #10]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[1]  	= 0xE7;
 8001f84:	4b37      	ldr	r3, [pc, #220]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001f86:	22e7      	movs	r2, #231	; 0xe7
 8001f88:	72da      	strb	r2, [r3, #11]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[2]  	= 0xE7;
 8001f8a:	4b36      	ldr	r3, [pc, #216]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001f8c:	22e7      	movs	r2, #231	; 0xe7
 8001f8e:	731a      	strb	r2, [r3, #12]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[3]  	= 0xE7;
 8001f90:	4b34      	ldr	r3, [pc, #208]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001f92:	22e7      	movs	r2, #231	; 0xe7
 8001f94:	735a      	strb	r2, [r3, #13]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[4]  	= 0xE7;
 8001f96:	4b33      	ldr	r3, [pc, #204]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001f98:	22e7      	movs	r2, #231	; 0xe7
 8001f9a:	739a      	strb	r2, [r3, #14]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[0]  	= 0xC2;
 8001f9c:	4b31      	ldr	r3, [pc, #196]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001f9e:	22c2      	movs	r2, #194	; 0xc2
 8001fa0:	73da      	strb	r2, [r3, #15]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[1]  	= 0xC2;
 8001fa2:	4b30      	ldr	r3, [pc, #192]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001fa4:	22c2      	movs	r2, #194	; 0xc2
 8001fa6:	741a      	strb	r2, [r3, #16]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[2]  	= 0xC2;
 8001fa8:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001faa:	22c2      	movs	r2, #194	; 0xc2
 8001fac:	745a      	strb	r2, [r3, #17]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[3]  	= 0xC2;
 8001fae:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001fb0:	22c2      	movs	r2, #194	; 0xc2
 8001fb2:	749a      	strb	r2, [r3, #18]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[4]  	= 0xC2;
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001fb6:	22c2      	movs	r2, #194	; 0xc2
 8001fb8:	74da      	strb	r2, [r3, #19]
	NRF24_Configurations_Struct.Default.RX_ADDR_P2  	= 0xC3;
 8001fba:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001fbc:	22c3      	movs	r2, #195	; 0xc3
 8001fbe:	751a      	strb	r2, [r3, #20]
	NRF24_Configurations_Struct.Default.RX_ADDR_P3 		= 0xC4;
 8001fc0:	4b28      	ldr	r3, [pc, #160]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001fc2:	22c4      	movs	r2, #196	; 0xc4
 8001fc4:	755a      	strb	r2, [r3, #21]
	NRF24_Configurations_Struct.Default.RX_ADDR_P4  	= 0xC5;
 8001fc6:	4b27      	ldr	r3, [pc, #156]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001fc8:	22c5      	movs	r2, #197	; 0xc5
 8001fca:	759a      	strb	r2, [r3, #22]
	NRF24_Configurations_Struct.Default.RX_ADDR_P5  	= 0xC6;
 8001fcc:	4b25      	ldr	r3, [pc, #148]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001fce:	22c6      	movs	r2, #198	; 0xc6
 8001fd0:	75da      	strb	r2, [r3, #23]
	NRF24_Configurations_Struct.Default.TX_ADDR[0]   	= 0xE7;
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001fd4:	22e7      	movs	r2, #231	; 0xe7
 8001fd6:	761a      	strb	r2, [r3, #24]
	NRF24_Configurations_Struct.Default.TX_ADDR[1]   	= 0xE7;
 8001fd8:	4b22      	ldr	r3, [pc, #136]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001fda:	22e7      	movs	r2, #231	; 0xe7
 8001fdc:	765a      	strb	r2, [r3, #25]
	NRF24_Configurations_Struct.Default.TX_ADDR[2]   	= 0xE7;
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001fe0:	22e7      	movs	r2, #231	; 0xe7
 8001fe2:	769a      	strb	r2, [r3, #26]
	NRF24_Configurations_Struct.Default.TX_ADDR[3]   	= 0xE7;
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001fe6:	22e7      	movs	r2, #231	; 0xe7
 8001fe8:	76da      	strb	r2, [r3, #27]
	NRF24_Configurations_Struct.Default.TX_ADDR[4]   	= 0xE7;
 8001fea:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001fec:	22e7      	movs	r2, #231	; 0xe7
 8001fee:	771a      	strb	r2, [r3, #28]
	NRF24_Configurations_Struct.Default.RX_PW_P0  		= 0X20;
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	775a      	strb	r2, [r3, #29]
	NRF24_Configurations_Struct.Default.RX_PW_P1  		= 0X20;
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	779a      	strb	r2, [r3, #30]
	NRF24_Configurations_Struct.Default.RX_PW_P2  		= 0X00;
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	77da      	strb	r2, [r3, #31]
	NRF24_Configurations_Struct.Default.RX_PW_P3  		= 0X00;
 8002002:	4b18      	ldr	r3, [pc, #96]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2020 	strb.w	r2, [r3, #32]
	NRF24_Configurations_Struct.Default.RX_PW_P4  		= 0X00;
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	NRF24_Configurations_Struct.Default.RX_PW_P5  		= 0X00;
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	NRF24_Configurations_Struct.Default.FIFO_STATUS  	= 0X11;
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 800201c:	2211      	movs	r2, #17
 800201e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	NRF24_Configurations_Struct.Default.DYNPD  			= 0X00;
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	NRF24_Configurations_Struct.Default.FEATURE  		= 0X00;
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	NRF24_config(NRF24_Configurations_Struct.Default);
 8002032:	4e0c      	ldr	r6, [pc, #48]	; (8002064 <NRF24_DefaultConfiguration+0x130>)
 8002034:	466c      	mov	r4, sp
 8002036:	f106 0510 	add.w	r5, r6, #16
 800203a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800203c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800203e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002042:	6020      	str	r0, [r4, #0]
 8002044:	3404      	adds	r4, #4
 8002046:	8021      	strh	r1, [r4, #0]
 8002048:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800204c:	f7ff fed6 	bl	8001dfc <NRF24_config>
	NRF24_ActualConfiguration();
 8002050:	f7ff fe0c 	bl	8001c6c <NRF24_ActualConfiguration>
	NRF24_mode = Init;
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <NRF24_DefaultConfiguration+0x134>)
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
}
 800205a:	bf00      	nop
 800205c:	3704      	adds	r7, #4
 800205e:	46bd      	mov	sp, r7
 8002060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002062:	bf00      	nop
 8002064:	20000150 	.word	0x20000150
 8002068:	200001f3 	.word	0x200001f3

0800206c <NRF24_RxConfiguration>:
	NRF24_config(NRF24_Configurations_Struct.Tx_mode);
	NRF24_ActualConfiguration();
	NRF24_mode = TxMode;
}

void NRF24_RxConfiguration(void){
 800206c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206e:	b087      	sub	sp, #28
 8002070:	af06      	add	r7, sp, #24
	NRF24_Configurations_Struct.Rx_mode.CONFIG 			= 0x79;
 8002072:	4b5b      	ldr	r3, [pc, #364]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 8002074:	2279      	movs	r2, #121	; 0x79
 8002076:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	NRF24_Configurations_Struct.Rx_mode.EN_AA  			= 0x03;
 800207a:	4b59      	ldr	r3, [pc, #356]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 800207c:	2203      	movs	r2, #3
 800207e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	NRF24_Configurations_Struct.Rx_mode.EN_RXADDR  		= 0x03;
 8002082:	4b57      	ldr	r3, [pc, #348]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 8002084:	2203      	movs	r2, #3
 8002086:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	NRF24_Configurations_Struct.Rx_mode.SETUP_AW  		= 0x03;
 800208a:	4b55      	ldr	r3, [pc, #340]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 800208c:	2203      	movs	r2, #3
 800208e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	NRF24_Configurations_Struct.Rx_mode.SETUP_RETR 		= 0x33;
 8002092:	4b53      	ldr	r3, [pc, #332]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 8002094:	2233      	movs	r2, #51	; 0x33
 8002096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	NRF24_Configurations_Struct.Rx_mode.RF_CH  			= 0x12;
 800209a:	4b51      	ldr	r3, [pc, #324]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 800209c:	2212      	movs	r2, #18
 800209e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	NRF24_Configurations_Struct.Rx_mode.RF_SETUP  		= 0x09;
 80020a2:	4b4f      	ldr	r3, [pc, #316]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 80020a4:	2209      	movs	r2, #9
 80020a6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	NRF24_Configurations_Struct.Rx_mode.STATUS  		= 0X70;
 80020aa:	4b4d      	ldr	r3, [pc, #308]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 80020ac:	2270      	movs	r2, #112	; 0x70
 80020ae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	NRF24_Configurations_Struct.Rx_mode.OBSERVE  		= 0X00;
 80020b2:	4b4b      	ldr	r3, [pc, #300]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	NRF24_Configurations_Struct.Rx_mode.CD  			= 0x00;
 80020ba:	4b49      	ldr	r3, [pc, #292]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[0]  	= 0xE7;
 80020c2:	4b47      	ldr	r3, [pc, #284]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 80020c4:	22e7      	movs	r2, #231	; 0xe7
 80020c6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[1]  	= 0xE7;
 80020ca:	4b45      	ldr	r3, [pc, #276]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 80020cc:	22e7      	movs	r2, #231	; 0xe7
 80020ce:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[2]  	= 0xE7;
 80020d2:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 80020d4:	22e7      	movs	r2, #231	; 0xe7
 80020d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[3]  	= 0xE7;
 80020da:	4b41      	ldr	r3, [pc, #260]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 80020dc:	22e7      	movs	r2, #231	; 0xe7
 80020de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[4]  	= 0xE7;
 80020e2:	4b3f      	ldr	r3, [pc, #252]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 80020e4:	22e7      	movs	r2, #231	; 0xe7
 80020e6:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[0]  	= 0xC2;
 80020ea:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 80020ec:	22c2      	movs	r2, #194	; 0xc2
 80020ee:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[1]  	= 0xC2;
 80020f2:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 80020f4:	22c2      	movs	r2, #194	; 0xc2
 80020f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[2]  	= 0xC2;
 80020fa:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 80020fc:	22c2      	movs	r2, #194	; 0xc2
 80020fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[3]  	= 0xC2;
 8002102:	4b37      	ldr	r3, [pc, #220]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 8002104:	22c2      	movs	r2, #194	; 0xc2
 8002106:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[4]  	= 0xC2;
 800210a:	4b35      	ldr	r3, [pc, #212]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 800210c:	22c2      	movs	r2, #194	; 0xc2
 800210e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P2  	= 0xC3;
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 8002114:	22c3      	movs	r2, #195	; 0xc3
 8002116:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P3 		= 0xC4;
 800211a:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 800211c:	22c4      	movs	r2, #196	; 0xc4
 800211e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P4  	= 0xC5;
 8002122:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 8002124:	22c5      	movs	r2, #197	; 0xc5
 8002126:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P5  	= 0xC6;
 800212a:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 800212c:	22c6      	movs	r2, #198	; 0xc6
 800212e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[0]   	= 0xE7;
 8002132:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 8002134:	22e7      	movs	r2, #231	; 0xe7
 8002136:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[1]   	= 0xE7;
 800213a:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 800213c:	22e7      	movs	r2, #231	; 0xe7
 800213e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[2]   	= 0xE7;
 8002142:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 8002144:	22e7      	movs	r2, #231	; 0xe7
 8002146:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[3]   	= 0xE7;
 800214a:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 800214c:	22e7      	movs	r2, #231	; 0xe7
 800214e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[4]   	= 0xE7;
 8002152:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 8002154:	22e7      	movs	r2, #231	; 0xe7
 8002156:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P0  		= 0X20;
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 800215c:	2220      	movs	r2, #32
 800215e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P1  		= 0X20;
 8002162:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 8002164:	2220      	movs	r2, #32
 8002166:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P2  		= 0X00;
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 800216c:	2200      	movs	r2, #0
 800216e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P3  		= 0X00;
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 8002174:	2200      	movs	r2, #0
 8002176:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P4  		= 0X00;
 800217a:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 800217c:	2200      	movs	r2, #0
 800217e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P5  		= 0X00;
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 8002184:	2200      	movs	r2, #0
 8002186:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	NRF24_Configurations_Struct.Rx_mode.FIFO_STATUS  	= 0X11;
 800218a:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 800218c:	2211      	movs	r2, #17
 800218e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	NRF24_Configurations_Struct.Rx_mode.DYNPD  			= 0X00;
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	NRF24_Configurations_Struct.Rx_mode.FEATURE  		= 0X00;
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	NRF24_config(NRF24_Configurations_Struct.Rx_mode);
 80021a2:	4e0f      	ldr	r6, [pc, #60]	; (80021e0 <NRF24_RxConfiguration+0x174>)
 80021a4:	466c      	mov	r4, sp
 80021a6:	f106 055c 	add.w	r5, r6, #92	; 0x5c
 80021aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021b2:	6020      	str	r0, [r4, #0]
 80021b4:	3404      	adds	r4, #4
 80021b6:	8021      	strh	r1, [r4, #0]
 80021b8:	f106 034c 	add.w	r3, r6, #76	; 0x4c
 80021bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021be:	f7ff fe1d 	bl	8001dfc <NRF24_config>
	NRF24_ActualConfiguration();
 80021c2:	f7ff fd53 	bl	8001c6c <NRF24_ActualConfiguration>
	NRF24_Enable();
 80021c6:	2201      	movs	r2, #1
 80021c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021cc:	4805      	ldr	r0, [pc, #20]	; (80021e4 <NRF24_RxConfiguration+0x178>)
 80021ce:	f002 f941 	bl	8004454 <HAL_GPIO_WritePin>
	NRF24_mode = RxMode;
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <NRF24_RxConfiguration+0x17c>)
 80021d4:	2202      	movs	r2, #2
 80021d6:	701a      	strb	r2, [r3, #0]
}
 80021d8:	bf00      	nop
 80021da:	3704      	adds	r7, #4
 80021dc:	46bd      	mov	sp, r7
 80021de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021e0:	20000150 	.word	0x20000150
 80021e4:	40020400 	.word	0x40020400
 80021e8:	200001f3 	.word	0x200001f3

080021ec <NRF24_CheckFlags>:

void NRF24_CheckFlags(void){
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
	uint8_t buffer = NRF24_read(STATUS);
 80021f2:	2007      	movs	r0, #7
 80021f4:	f7ff fc38 	bl	8001a68 <NRF24_read>
 80021f8:	4603      	mov	r3, r0
 80021fa:	71fb      	strb	r3, [r7, #7]
	TX_FULL =  buffer & 0x01;
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	b2da      	uxtb	r2, r3
 8002204:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <NRF24_CheckFlags+0xbc>)
 8002206:	701a      	strb	r2, [r3, #0]
	RX_P_NO = (buffer & 0x0E) >> 1;
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	105b      	asrs	r3, r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	b2da      	uxtb	r2, r3
 8002214:	4b25      	ldr	r3, [pc, #148]	; (80022ac <NRF24_CheckFlags+0xc0>)
 8002216:	701a      	strb	r2, [r3, #0]
	MAX_RT  = (buffer & 0x10) >> 4;
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	111b      	asrs	r3, r3, #4
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	b2da      	uxtb	r2, r3
 8002224:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <NRF24_CheckFlags+0xc4>)
 8002226:	701a      	strb	r2, [r3, #0]
	TX_DS   = (buffer & 0x20) >> 5;
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	115b      	asrs	r3, r3, #5
 800222c:	b2db      	uxtb	r3, r3
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	b2da      	uxtb	r2, r3
 8002234:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <NRF24_CheckFlags+0xc8>)
 8002236:	701a      	strb	r2, [r3, #0]
	RX_DR   = (buffer & 0x40) >> 6;
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	119b      	asrs	r3, r3, #6
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	b2da      	uxtb	r2, r3
 8002244:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <NRF24_CheckFlags+0xcc>)
 8002246:	701a      	strb	r2, [r3, #0]

	buffer   = NRF24_read(FIFO_STATUS);
 8002248:	2017      	movs	r0, #23
 800224a:	f7ff fc0d 	bl	8001a68 <NRF24_read>
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
	RX_EMPTY =  buffer & 0x01;
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <NRF24_CheckFlags+0xd0>)
 800225c:	701a      	strb	r2, [r3, #0]
	RX_FULL  = (buffer & 0x02) >> 1;
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	105b      	asrs	r3, r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <NRF24_CheckFlags+0xd4>)
 800226c:	701a      	strb	r2, [r3, #0]
	TX_EMPTY = (buffer & 0x10) >> 4;
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	111b      	asrs	r3, r3, #4
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <NRF24_CheckFlags+0xd8>)
 800227c:	701a      	strb	r2, [r3, #0]
	TX_FULL  = (buffer & 0x20) >> 5;
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	115b      	asrs	r3, r3, #5
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	b2da      	uxtb	r2, r3
 800228a:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <NRF24_CheckFlags+0xbc>)
 800228c:	701a      	strb	r2, [r3, #0]
	TX_REUSE = (buffer & 0x40) >> 6;
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	119b      	asrs	r3, r3, #6
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <NRF24_CheckFlags+0xdc>)
 800229c:	701a      	strb	r2, [r3, #0]
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200001e9 	.word	0x200001e9
 80022ac:	200001ea 	.word	0x200001ea
 80022b0:	200001eb 	.word	0x200001eb
 80022b4:	200001ec 	.word	0x200001ec
 80022b8:	200001ed 	.word	0x200001ed
 80022bc:	200001ee 	.word	0x200001ee
 80022c0:	200001ef 	.word	0x200001ef
 80022c4:	200001f0 	.word	0x200001f0
 80022c8:	200001f1 	.word	0x200001f1

080022cc <NRF24_FIFO_write>:

void NRF24_FIFO_write(uint8_t *pData, uint8_t size){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	70fb      	strb	r3, [r7, #3]
	uint8_t Adr = W_TX_PAYLOAD;
 80022d8:	23a0      	movs	r3, #160	; 0xa0
 80022da:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 80022dc:	2200      	movs	r2, #0
 80022de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022e2:	4812      	ldr	r0, [pc, #72]	; (800232c <NRF24_FIFO_write+0x60>)
 80022e4:	f002 f8b6 	bl	8004454 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 80022e8:	f107 030e 	add.w	r3, r7, #14
 80022ec:	2201      	movs	r2, #1
 80022ee:	4619      	mov	r1, r3
 80022f0:	480f      	ldr	r0, [pc, #60]	; (8002330 <NRF24_FIFO_write+0x64>)
 80022f2:	f004 fa4b 	bl	800678c <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 80022f6:	2300      	movs	r3, #0
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	e00a      	b.n	8002312 <NRF24_FIFO_write+0x46>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &pData[n], 1);
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	2201      	movs	r2, #1
 8002304:	4619      	mov	r1, r3
 8002306:	480a      	ldr	r0, [pc, #40]	; (8002330 <NRF24_FIFO_write+0x64>)
 8002308:	f004 fa40 	bl	800678c <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	3301      	adds	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	2b1f      	cmp	r3, #31
 8002316:	d9f1      	bls.n	80022fc <NRF24_FIFO_write+0x30>
	}
	NRF24_unselect();
 8002318:	2201      	movs	r2, #1
 800231a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800231e:	4803      	ldr	r0, [pc, #12]	; (800232c <NRF24_FIFO_write+0x60>)
 8002320:	f002 f898 	bl	8004454 <HAL_GPIO_WritePin>
}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40020400 	.word	0x40020400
 8002330:	20000558 	.word	0x20000558

08002334 <NRF24_FIFO_read>:

void NRF24_FIFO_read(uint8_t *pData){
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	uint8_t Adr = R_RX_PAYLOAD;
 800233c:	2361      	movs	r3, #97	; 0x61
 800233e:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 8002340:	2200      	movs	r2, #0
 8002342:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002346:	4812      	ldr	r0, [pc, #72]	; (8002390 <NRF24_FIFO_read+0x5c>)
 8002348:	f002 f884 	bl	8004454 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 800234c:	f107 030e 	add.w	r3, r7, #14
 8002350:	2201      	movs	r2, #1
 8002352:	4619      	mov	r1, r3
 8002354:	480f      	ldr	r0, [pc, #60]	; (8002394 <NRF24_FIFO_read+0x60>)
 8002356:	f004 fa19 	bl	800678c <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 800235a:	2300      	movs	r3, #0
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	e00a      	b.n	8002376 <NRF24_FIFO_read+0x42>
		HAL_SPI_Receive_DMA(SPI_NRF24, &pData[n], 1);
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	2201      	movs	r2, #1
 8002368:	4619      	mov	r1, r3
 800236a:	480a      	ldr	r0, [pc, #40]	; (8002394 <NRF24_FIFO_read+0x60>)
 800236c:	f004 fac0 	bl	80068f0 <HAL_SPI_Receive_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	3301      	adds	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	2b1f      	cmp	r3, #31
 800237a:	d9f1      	bls.n	8002360 <NRF24_FIFO_read+0x2c>
	}
	NRF24_unselect();
 800237c:	2201      	movs	r2, #1
 800237e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002382:	4803      	ldr	r0, [pc, #12]	; (8002390 <NRF24_FIFO_read+0x5c>)
 8002384:	f002 f866 	bl	8004454 <HAL_GPIO_WritePin>
}
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40020400 	.word	0x40020400
 8002394:	20000558 	.word	0x20000558

08002398 <NRF24_init>:

void NRF24_init(void){
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
	NRF24_Disable();
 800239c:	2200      	movs	r2, #0
 800239e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023a2:	4808      	ldr	r0, [pc, #32]	; (80023c4 <NRF24_init+0x2c>)
 80023a4:	f002 f856 	bl	8004454 <HAL_GPIO_WritePin>
	NRF24_unselect();
 80023a8:	2201      	movs	r2, #1
 80023aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <NRF24_init+0x2c>)
 80023b0:	f002 f850 	bl	8004454 <HAL_GPIO_WritePin>
	NRF24_DefaultConfiguration();
 80023b4:	f7ff fdbe 	bl	8001f34 <NRF24_DefaultConfiguration>
	NRF24_mode = 0;
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <NRF24_init+0x30>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40020400 	.word	0x40020400
 80023c8:	200001f3 	.word	0x200001f3

080023cc <NRF24_Transmit>:

void NRF24_Transmit(void){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	NRF24_CheckFlags();
 80023d0:	f7ff ff0c 	bl	80021ec <NRF24_CheckFlags>
	if(MAX_RT)  NRF24_write(STATUS, 0x70);
 80023d4:	4b20      	ldr	r3, [pc, #128]	; (8002458 <NRF24_Transmit+0x8c>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <NRF24_Transmit+0x18>
 80023dc:	2170      	movs	r1, #112	; 0x70
 80023de:	2007      	movs	r0, #7
 80023e0:	f7ff face 	bl	8001980 <NRF24_write>
	if(TX_FULL) NRF24_FlushTxFIFO();
 80023e4:	4b1d      	ldr	r3, [pc, #116]	; (800245c <NRF24_Transmit+0x90>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <NRF24_Transmit+0x24>
 80023ec:	f7ff fbe0 	bl	8001bb0 <NRF24_FlushTxFIFO>
	if(Cont_TX > 10){
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <NRF24_Transmit+0x94>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b0a      	cmp	r3, #10
 80023f6:	d90f      	bls.n	8002418 <NRF24_Transmit+0x4c>
		Cont_TX = 0;
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <NRF24_Transmit+0x94>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
		NRF24_FIFO_write(TxBuffer, 32);
 80023fe:	2120      	movs	r1, #32
 8002400:	4818      	ldr	r0, [pc, #96]	; (8002464 <NRF24_Transmit+0x98>)
 8002402:	f7ff ff63 	bl	80022cc <NRF24_FIFO_write>
		N_message += 1;
 8002406:	4b18      	ldr	r3, [pc, #96]	; (8002468 <NRF24_Transmit+0x9c>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	3301      	adds	r3, #1
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <NRF24_Transmit+0x9c>)
 8002410:	701a      	strb	r2, [r3, #0]
		Transmision_Flag = 0;
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <NRF24_Transmit+0xa0>)
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
	}
	switch (Transmision_Flag) {
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <NRF24_Transmit+0xa0>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <NRF24_Transmit+0x5a>
 8002420:	2b01      	cmp	r3, #1
 8002422:	d00a      	beq.n	800243a <NRF24_Transmit+0x6e>
 8002424:	e010      	b.n	8002448 <NRF24_Transmit+0x7c>
		case 0:
			NRF24_Enable();
 8002426:	2201      	movs	r2, #1
 8002428:	f44f 7180 	mov.w	r1, #256	; 0x100
 800242c:	4810      	ldr	r0, [pc, #64]	; (8002470 <NRF24_Transmit+0xa4>)
 800242e:	f002 f811 	bl	8004454 <HAL_GPIO_WritePin>
			Transmision_Flag = 1;
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <NRF24_Transmit+0xa0>)
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]
			break;
 8002438:	e006      	b.n	8002448 <NRF24_Transmit+0x7c>
		case 1:
			NRF24_Disable();
 800243a:	2200      	movs	r2, #0
 800243c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002440:	480b      	ldr	r0, [pc, #44]	; (8002470 <NRF24_Transmit+0xa4>)
 8002442:	f002 f807 	bl	8004454 <HAL_GPIO_WritePin>
			break;
 8002446:	bf00      	nop
	}
	++Cont_TX;
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <NRF24_Transmit+0x94>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <NRF24_Transmit+0x94>)
 8002452:	701a      	strb	r2, [r3, #0]
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}
 8002458:	200001eb 	.word	0x200001eb
 800245c:	200001e9 	.word	0x200001e9
 8002460:	200001f2 	.word	0x200001f2
 8002464:	200001f4 	.word	0x200001f4
 8002468:	20000234 	.word	0x20000234
 800246c:	200001e8 	.word	0x200001e8
 8002470:	40020400 	.word	0x40020400

08002474 <NRF24_Receive>:

void NRF24_Receive(void){
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
	NRF24_CheckFlags();
 8002478:	f7ff feb8 	bl	80021ec <NRF24_CheckFlags>
	if(RX_P_NO != 7){
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <NRF24_Receive+0x1c>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b07      	cmp	r3, #7
 8002482:	d002      	beq.n	800248a <NRF24_Receive+0x16>
		NRF24_FIFO_read(RxBuffer);
 8002484:	4803      	ldr	r0, [pc, #12]	; (8002494 <NRF24_Receive+0x20>)
 8002486:	f7ff ff55 	bl	8002334 <NRF24_FIFO_read>
	}
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200001ea 	.word	0x200001ea
 8002494:	20000214 	.word	0x20000214

08002498 <NRF24_TxBuffer>:

void NRF24_TxBuffer(void){
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
	AngleX.data =  (int32_t)(MPU6050.KalmanAngleX * 100);
 800249c:	4b3d      	ldr	r3, [pc, #244]	; (8002594 <NRF24_TxBuffer+0xfc>)
 800249e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <NRF24_TxBuffer+0x100>)
 80024a8:	f7fe f856 	bl	8000558 <__aeabi_dmul>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4610      	mov	r0, r2
 80024b2:	4619      	mov	r1, r3
 80024b4:	f7fe fb00 	bl	8000ab8 <__aeabi_d2iz>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4a38      	ldr	r2, [pc, #224]	; (800259c <NRF24_TxBuffer+0x104>)
 80024bc:	6013      	str	r3, [r2, #0]
	AngleY.data =  (int32_t)(MPU6050.KalmanAngleY * 100);
 80024be:	4b35      	ldr	r3, [pc, #212]	; (8002594 <NRF24_TxBuffer+0xfc>)
 80024c0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	4b33      	ldr	r3, [pc, #204]	; (8002598 <NRF24_TxBuffer+0x100>)
 80024ca:	f7fe f845 	bl	8000558 <__aeabi_dmul>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	f7fe faef 	bl	8000ab8 <__aeabi_d2iz>
 80024da:	4603      	mov	r3, r0
 80024dc:	4a30      	ldr	r2, [pc, #192]	; (80025a0 <NRF24_TxBuffer+0x108>)
 80024de:	6013      	str	r3, [r2, #0]
	TxBuffer[0] = 0x10;
 80024e0:	4b30      	ldr	r3, [pc, #192]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 80024e2:	2210      	movs	r2, #16
 80024e4:	701a      	strb	r2, [r3, #0]
	TxBuffer[1] = Temperature.bytes[0];
 80024e6:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <NRF24_TxBuffer+0x110>)
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 80024ec:	705a      	strb	r2, [r3, #1]
	TxBuffer[2] = Temperature.bytes[1];
 80024ee:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <NRF24_TxBuffer+0x110>)
 80024f0:	785a      	ldrb	r2, [r3, #1]
 80024f2:	4b2c      	ldr	r3, [pc, #176]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 80024f4:	709a      	strb	r2, [r3, #2]
	TxBuffer[3] = Temperature.bytes[2];
 80024f6:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <NRF24_TxBuffer+0x110>)
 80024f8:	789a      	ldrb	r2, [r3, #2]
 80024fa:	4b2a      	ldr	r3, [pc, #168]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 80024fc:	70da      	strb	r2, [r3, #3]
	TxBuffer[4] = Temperature.bytes[3];
 80024fe:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <NRF24_TxBuffer+0x110>)
 8002500:	78da      	ldrb	r2, [r3, #3]
 8002502:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 8002504:	711a      	strb	r2, [r3, #4]
	TxBuffer[5] = Altitud.bytes[0];
 8002506:	4b29      	ldr	r3, [pc, #164]	; (80025ac <NRF24_TxBuffer+0x114>)
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 800250c:	715a      	strb	r2, [r3, #5]
	TxBuffer[6] = Altitud.bytes[1];
 800250e:	4b27      	ldr	r3, [pc, #156]	; (80025ac <NRF24_TxBuffer+0x114>)
 8002510:	785a      	ldrb	r2, [r3, #1]
 8002512:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 8002514:	719a      	strb	r2, [r3, #6]
	TxBuffer[7] = Altitud.bytes[2];
 8002516:	4b25      	ldr	r3, [pc, #148]	; (80025ac <NRF24_TxBuffer+0x114>)
 8002518:	789a      	ldrb	r2, [r3, #2]
 800251a:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 800251c:	71da      	strb	r2, [r3, #7]
	TxBuffer[8] = Altitud.bytes[3];
 800251e:	4b23      	ldr	r3, [pc, #140]	; (80025ac <NRF24_TxBuffer+0x114>)
 8002520:	78da      	ldrb	r2, [r3, #3]
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 8002524:	721a      	strb	r2, [r3, #8]
	TxBuffer[9]  = Presure.bytes[0];
 8002526:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <NRF24_TxBuffer+0x118>)
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 800252c:	725a      	strb	r2, [r3, #9]
	TxBuffer[10] = Presure.bytes[1];
 800252e:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <NRF24_TxBuffer+0x118>)
 8002530:	785a      	ldrb	r2, [r3, #1]
 8002532:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 8002534:	729a      	strb	r2, [r3, #10]
	TxBuffer[11] = Presure.bytes[2];
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <NRF24_TxBuffer+0x118>)
 8002538:	789a      	ldrb	r2, [r3, #2]
 800253a:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 800253c:	72da      	strb	r2, [r3, #11]
	TxBuffer[12] = Presure.bytes[3];
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <NRF24_TxBuffer+0x118>)
 8002540:	78da      	ldrb	r2, [r3, #3]
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 8002544:	731a      	strb	r2, [r3, #12]
	TxBuffer[13] = AngleX.bytes  [0];
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <NRF24_TxBuffer+0x104>)
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 800254c:	735a      	strb	r2, [r3, #13]
	TxBuffer[14] = AngleX.bytes  [1];
 800254e:	4b13      	ldr	r3, [pc, #76]	; (800259c <NRF24_TxBuffer+0x104>)
 8002550:	785a      	ldrb	r2, [r3, #1]
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 8002554:	739a      	strb	r2, [r3, #14]
	TxBuffer[15] = AngleX.bytes  [2];
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <NRF24_TxBuffer+0x104>)
 8002558:	789a      	ldrb	r2, [r3, #2]
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 800255c:	73da      	strb	r2, [r3, #15]
	TxBuffer[16] = AngleX.bytes  [3];
 800255e:	4b0f      	ldr	r3, [pc, #60]	; (800259c <NRF24_TxBuffer+0x104>)
 8002560:	78da      	ldrb	r2, [r3, #3]
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 8002564:	741a      	strb	r2, [r3, #16]
	TxBuffer[17] = AngleY.bytes  [0];
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <NRF24_TxBuffer+0x108>)
 8002568:	781a      	ldrb	r2, [r3, #0]
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 800256c:	745a      	strb	r2, [r3, #17]
	TxBuffer[18] = AngleY.bytes  [1];
 800256e:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <NRF24_TxBuffer+0x108>)
 8002570:	785a      	ldrb	r2, [r3, #1]
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 8002574:	749a      	strb	r2, [r3, #18]
	TxBuffer[19] = AngleY.bytes  [2];
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <NRF24_TxBuffer+0x108>)
 8002578:	789a      	ldrb	r2, [r3, #2]
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 800257c:	74da      	strb	r2, [r3, #19]
	TxBuffer[20] = AngleY.bytes  [3];
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <NRF24_TxBuffer+0x108>)
 8002580:	78da      	ldrb	r2, [r3, #3]
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 8002584:	751a      	strb	r2, [r3, #20]
	TxBuffer[21] = N_message;
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <NRF24_TxBuffer+0x11c>)
 8002588:	781a      	ldrb	r2, [r3, #0]
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <NRF24_TxBuffer+0x10c>)
 800258c:	755a      	strb	r2, [r3, #21]

}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000248 	.word	0x20000248
 8002598:	40590000 	.word	0x40590000
 800259c:	20000238 	.word	0x20000238
 80025a0:	2000023c 	.word	0x2000023c
 80025a4:	200001f4 	.word	0x200001f4
 80025a8:	20000144 	.word	0x20000144
 80025ac:	20000148 	.word	0x20000148
 80025b0:	2000014c 	.word	0x2000014c
 80025b4:	20000234 	.word	0x20000234

080025b8 <NRF24_StateMachine>:


void NRF24_StateMachine(void){
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	switch (NRF24_mode){
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <NRF24_StateMachine+0x50>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d81a      	bhi.n	80025fa <NRF24_StateMachine+0x42>
 80025c4:	a201      	add	r2, pc, #4	; (adr r2, 80025cc <NRF24_StateMachine+0x14>)
 80025c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ca:	bf00      	nop
 80025cc:	080025dd 	.word	0x080025dd
 80025d0:	080025f1 	.word	0x080025f1
 80025d4:	080025eb 	.word	0x080025eb
 80025d8:	08002601 	.word	0x08002601
		case Init:
			NRF24_RxConfiguration();
 80025dc:	f7ff fd46 	bl	800206c <NRF24_RxConfiguration>
			NRF24_PowerUp();
 80025e0:	f7ff fb26 	bl	8001c30 <NRF24_PowerUp>
			NRF24_ActualConfiguration();
 80025e4:	f7ff fb42 	bl	8001c6c <NRF24_ActualConfiguration>
			break;
 80025e8:	e00b      	b.n	8002602 <NRF24_StateMachine+0x4a>
		case RxMode:
			NRF24_Receive();
 80025ea:	f7ff ff43 	bl	8002474 <NRF24_Receive>
			break;
 80025ee:	e008      	b.n	8002602 <NRF24_StateMachine+0x4a>
		case TxMode:
			NRF24_TxBuffer();
 80025f0:	f7ff ff52 	bl	8002498 <NRF24_TxBuffer>
			NRF24_Transmit();
 80025f4:	f7ff feea 	bl	80023cc <NRF24_Transmit>
			break;
 80025f8:	e003      	b.n	8002602 <NRF24_StateMachine+0x4a>
		case PowerSave:

			break;
		default:
			NRF24_init();
 80025fa:	f7ff fecd 	bl	8002398 <NRF24_init>
	}
}
 80025fe:	e000      	b.n	8002602 <NRF24_StateMachine+0x4a>
			break;
 8002600:	bf00      	nop
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	200001f3 	.word	0x200001f3

0800260c <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af04      	add	r7, sp, #16
 8002612:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002614:	2364      	movs	r3, #100	; 0x64
 8002616:	9302      	str	r3, [sp, #8]
 8002618:	2301      	movs	r3, #1
 800261a:	9301      	str	r3, [sp, #4]
 800261c:	f107 030f 	add.w	r3, r7, #15
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	2301      	movs	r3, #1
 8002624:	2275      	movs	r2, #117	; 0x75
 8002626:	21d0      	movs	r1, #208	; 0xd0
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f002 f96b 	bl	8004904 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b68      	cmp	r3, #104	; 0x68
 8002632:	d13d      	bne.n	80026b0 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002638:	2364      	movs	r3, #100	; 0x64
 800263a:	9302      	str	r3, [sp, #8]
 800263c:	2301      	movs	r3, #1
 800263e:	9301      	str	r3, [sp, #4]
 8002640:	f107 030e 	add.w	r3, r7, #14
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2301      	movs	r3, #1
 8002648:	226b      	movs	r2, #107	; 0x6b
 800264a:	21d0      	movs	r1, #208	; 0xd0
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f002 f85f 	bl	8004710 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002652:	2307      	movs	r3, #7
 8002654:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002656:	2364      	movs	r3, #100	; 0x64
 8002658:	9302      	str	r3, [sp, #8]
 800265a:	2301      	movs	r3, #1
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	f107 030e 	add.w	r3, r7, #14
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	2301      	movs	r3, #1
 8002666:	2219      	movs	r2, #25
 8002668:	21d0      	movs	r1, #208	; 0xd0
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f002 f850 	bl	8004710 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002670:	2300      	movs	r3, #0
 8002672:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002674:	2364      	movs	r3, #100	; 0x64
 8002676:	9302      	str	r3, [sp, #8]
 8002678:	2301      	movs	r3, #1
 800267a:	9301      	str	r3, [sp, #4]
 800267c:	f107 030e 	add.w	r3, r7, #14
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2301      	movs	r3, #1
 8002684:	221c      	movs	r2, #28
 8002686:	21d0      	movs	r1, #208	; 0xd0
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f002 f841 	bl	8004710 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800268e:	2300      	movs	r3, #0
 8002690:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002692:	2364      	movs	r3, #100	; 0x64
 8002694:	9302      	str	r3, [sp, #8]
 8002696:	2301      	movs	r3, #1
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	f107 030e 	add.w	r3, r7, #14
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	2301      	movs	r3, #1
 80026a2:	221b      	movs	r2, #27
 80026a4:	21d0      	movs	r1, #208	; 0xd0
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f002 f832 	bl	8004710 <HAL_I2C_Mem_Write>
        return 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e000      	b.n	80026b2 <MPU6050_Init+0xa6>
    }
    return 1;
 80026b0:	2301      	movs	r3, #1
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	0000      	movs	r0, r0
 80026bc:	0000      	movs	r0, r0
	...

080026c0 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80026c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c4:	b094      	sub	sp, #80	; 0x50
 80026c6:	af04      	add	r7, sp, #16
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80026cc:	2364      	movs	r3, #100	; 0x64
 80026ce:	9302      	str	r3, [sp, #8]
 80026d0:	230e      	movs	r3, #14
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	f107 0308 	add.w	r3, r7, #8
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	2301      	movs	r3, #1
 80026dc:	223b      	movs	r2, #59	; 0x3b
 80026de:	21d0      	movs	r1, #208	; 0xd0
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f002 f90f 	bl	8004904 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80026e6:	7a3b      	ldrb	r3, [r7, #8]
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	b21a      	sxth	r2, r3
 80026ec:	7a7b      	ldrb	r3, [r7, #9]
 80026ee:	b21b      	sxth	r3, r3
 80026f0:	4313      	orrs	r3, r2
 80026f2:	b21a      	sxth	r2, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80026f8:	7abb      	ldrb	r3, [r7, #10]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	b21a      	sxth	r2, r3
 80026fe:	7afb      	ldrb	r3, [r7, #11]
 8002700:	b21b      	sxth	r3, r3
 8002702:	4313      	orrs	r3, r2
 8002704:	b21a      	sxth	r2, r3
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800270a:	7b3b      	ldrb	r3, [r7, #12]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	b21a      	sxth	r2, r3
 8002710:	7b7b      	ldrb	r3, [r7, #13]
 8002712:	b21b      	sxth	r3, r3
 8002714:	4313      	orrs	r3, r2
 8002716:	b21a      	sxth	r2, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800271c:	7bbb      	ldrb	r3, [r7, #14]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	b21a      	sxth	r2, r3
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	b21b      	sxth	r3, r3
 8002726:	4313      	orrs	r3, r2
 8002728:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800272a:	7c3b      	ldrb	r3, [r7, #16]
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	b21a      	sxth	r2, r3
 8002730:	7c7b      	ldrb	r3, [r7, #17]
 8002732:	b21b      	sxth	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b21a      	sxth	r2, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800273c:	7cbb      	ldrb	r3, [r7, #18]
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	b21a      	sxth	r2, r3
 8002742:	7cfb      	ldrb	r3, [r7, #19]
 8002744:	b21b      	sxth	r3, r3
 8002746:	4313      	orrs	r3, r2
 8002748:	b21a      	sxth	r2, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800274e:	7d3b      	ldrb	r3, [r7, #20]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	b21a      	sxth	r2, r3
 8002754:	7d7b      	ldrb	r3, [r7, #21]
 8002756:	b21b      	sxth	r3, r3
 8002758:	4313      	orrs	r3, r2
 800275a:	b21a      	sxth	r2, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fd fe8c 	bl	8000484 <__aeabi_i2d>
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	4bbd      	ldr	r3, [pc, #756]	; (8002a68 <MPU6050_Read_All+0x3a8>)
 8002772:	f7fe f81b 	bl	80007ac <__aeabi_ddiv>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	6839      	ldr	r1, [r7, #0]
 800277c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd fe7c 	bl	8000484 <__aeabi_i2d>
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	4bb5      	ldr	r3, [pc, #724]	; (8002a68 <MPU6050_Read_All+0x3a8>)
 8002792:	f7fe f80b 	bl	80007ac <__aeabi_ddiv>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	6839      	ldr	r1, [r7, #0]
 800279c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fd fe6c 	bl	8000484 <__aeabi_i2d>
 80027ac:	a3a8      	add	r3, pc, #672	; (adr r3, 8002a50 <MPU6050_Read_All+0x390>)
 80027ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b2:	f7fd fffb 	bl	80007ac <__aeabi_ddiv>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	6839      	ldr	r1, [r7, #0]
 80027bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80027c0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80027c4:	ee07 3a90 	vmov	s15, r3
 80027c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027cc:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8002a6c <MPU6050_Read_All+0x3ac>
 80027d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027d4:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002a70 <MPU6050_Read_All+0x3b0>
 80027d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fe4b 	bl	8000484 <__aeabi_i2d>
 80027ee:	a39a      	add	r3, pc, #616	; (adr r3, 8002a58 <MPU6050_Read_All+0x398>)
 80027f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f4:	f7fd ffda 	bl	80007ac <__aeabi_ddiv>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	6839      	ldr	r1, [r7, #0]
 80027fe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fe3b 	bl	8000484 <__aeabi_i2d>
 800280e:	a392      	add	r3, pc, #584	; (adr r3, 8002a58 <MPU6050_Read_All+0x398>)
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	f7fd ffca 	bl	80007ac <__aeabi_ddiv>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	6839      	ldr	r1, [r7, #0]
 800281e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd fe2b 	bl	8000484 <__aeabi_i2d>
 800282e:	a38a      	add	r3, pc, #552	; (adr r3, 8002a58 <MPU6050_Read_All+0x398>)
 8002830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002834:	f7fd ffba 	bl	80007ac <__aeabi_ddiv>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	6839      	ldr	r1, [r7, #0]
 800283e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8002842:	f001 f803 	bl	800384c <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	4b8a      	ldr	r3, [pc, #552]	; (8002a74 <MPU6050_Read_All+0x3b4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fe08 	bl	8000464 <__aeabi_ui2d>
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	4b87      	ldr	r3, [pc, #540]	; (8002a78 <MPU6050_Read_All+0x3b8>)
 800285a:	f7fd ffa7 	bl	80007ac <__aeabi_ddiv>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002866:	f000 fff1 	bl	800384c <HAL_GetTick>
 800286a:	4603      	mov	r3, r0
 800286c:	4a81      	ldr	r2, [pc, #516]	; (8002a74 <MPU6050_Read_All+0x3b4>)
 800286e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002876:	461a      	mov	r2, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800287e:	fb03 f202 	mul.w	r2, r3, r2
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002888:	4619      	mov	r1, r3
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fdf4 	bl	8000484 <__aeabi_i2d>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	ec43 2b10 	vmov	d0, r2, r3
 80028a4:	f006 fade 	bl	8008e64 <sqrt>
 80028a8:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80028b8:	f7fe f8b6 	bl	8000a28 <__aeabi_dcmpeq>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d11f      	bne.n	8002902 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fd fddb 	bl	8000484 <__aeabi_i2d>
 80028ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028d2:	f7fd ff6b 	bl	80007ac <__aeabi_ddiv>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	ec43 2b17 	vmov	d7, r2, r3
 80028de:	eeb0 0a47 	vmov.f32	s0, s14
 80028e2:	eef0 0a67 	vmov.f32	s1, s15
 80028e6:	f006 faeb 	bl	8008ec0 <atan>
 80028ea:	ec51 0b10 	vmov	r0, r1, d0
 80028ee:	a35c      	add	r3, pc, #368	; (adr r3, 8002a60 <MPU6050_Read_All+0x3a0>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fd fe30 	bl	8000558 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002900:	e005      	b.n	800290e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002914:	425b      	negs	r3, r3
 8002916:	4618      	mov	r0, r3
 8002918:	f7fd fdb4 	bl	8000484 <__aeabi_i2d>
 800291c:	4682      	mov	sl, r0
 800291e:	468b      	mov	fp, r1
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fd fdac 	bl	8000484 <__aeabi_i2d>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	ec43 2b11 	vmov	d1, r2, r3
 8002934:	ec4b ab10 	vmov	d0, sl, fp
 8002938:	f006 fa52 	bl	8008de0 <atan2>
 800293c:	ec51 0b10 	vmov	r0, r1, d0
 8002940:	a347      	add	r3, pc, #284	; (adr r3, 8002a60 <MPU6050_Read_All+0x3a0>)
 8002942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002946:	f7fd fe07 	bl	8000558 <__aeabi_dmul>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	4b49      	ldr	r3, [pc, #292]	; (8002a7c <MPU6050_Read_All+0x3bc>)
 8002958:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800295c:	f7fe f86e 	bl	8000a3c <__aeabi_dcmplt>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <MPU6050_Read_All+0x2bc>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	4b43      	ldr	r3, [pc, #268]	; (8002a80 <MPU6050_Read_All+0x3c0>)
 8002972:	f7fe f881 	bl	8000a78 <__aeabi_dcmpgt>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d114      	bne.n	80029a6 <MPU6050_Read_All+0x2e6>
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	4b3f      	ldr	r3, [pc, #252]	; (8002a80 <MPU6050_Read_All+0x3c0>)
 8002982:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002986:	f7fe f877 	bl	8000a78 <__aeabi_dcmpgt>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d015      	beq.n	80029bc <MPU6050_Read_All+0x2fc>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <MPU6050_Read_All+0x3bc>)
 800299c:	f7fe f84e 	bl	8000a3c <__aeabi_dcmplt>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 80029a6:	4937      	ldr	r1, [pc, #220]	; (8002a84 <MPU6050_Read_All+0x3c4>)
 80029a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029ac:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80029b0:	6839      	ldr	r1, [r7, #0]
 80029b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029b6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80029ba:	e014      	b.n	80029e6 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80029c2:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80029c6:	eeb0 1a47 	vmov.f32	s2, s14
 80029ca:	eef0 1a67 	vmov.f32	s3, s15
 80029ce:	ed97 0b06 	vldr	d0, [r7, #24]
 80029d2:	482c      	ldr	r0, [pc, #176]	; (8002a84 <MPU6050_Read_All+0x3c4>)
 80029d4:	f000 f85a 	bl	8002a8c <Kalman_getAngle>
 80029d8:	eeb0 7a40 	vmov.f32	s14, s0
 80029dc:	eef0 7a60 	vmov.f32	s15, s1
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80029ec:	4690      	mov	r8, r2
 80029ee:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <MPU6050_Read_All+0x3c0>)
 80029f8:	4640      	mov	r0, r8
 80029fa:	4649      	mov	r1, r9
 80029fc:	f7fe f83c 	bl	8000a78 <__aeabi_dcmpgt>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002a0c:	4614      	mov	r4, r2
 8002a0e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002a1e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002a22:	eeb0 1a47 	vmov.f32	s2, s14
 8002a26:	eef0 1a67 	vmov.f32	s3, s15
 8002a2a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002a2e:	4816      	ldr	r0, [pc, #88]	; (8002a88 <MPU6050_Read_All+0x3c8>)
 8002a30:	f000 f82c 	bl	8002a8c <Kalman_getAngle>
 8002a34:	eeb0 7a40 	vmov.f32	s14, s0
 8002a38:	eef0 7a60 	vmov.f32	s15, s1
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8002a42:	bf00      	nop
 8002a44:	3740      	adds	r7, #64	; 0x40
 8002a46:	46bd      	mov	sp, r7
 8002a48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a4c:	f3af 8000 	nop.w
 8002a50:	00000000 	.word	0x00000000
 8002a54:	40cc2900 	.word	0x40cc2900
 8002a58:	00000000 	.word	0x00000000
 8002a5c:	40606000 	.word	0x40606000
 8002a60:	1a63c1f8 	.word	0x1a63c1f8
 8002a64:	404ca5dc 	.word	0x404ca5dc
 8002a68:	40d00000 	.word	0x40d00000
 8002a6c:	43aa0000 	.word	0x43aa0000
 8002a70:	42121eb8 	.word	0x42121eb8
 8002a74:	20000240 	.word	0x20000240
 8002a78:	408f4000 	.word	0x408f4000
 8002a7c:	c0568000 	.word	0xc0568000
 8002a80:	40568000 	.word	0x40568000
 8002a84:	20000048 	.word	0x20000048
 8002a88:	20000000 	.word	0x20000000

08002a8c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8002a8c:	b5b0      	push	{r4, r5, r7, lr}
 8002a8e:	b096      	sub	sp, #88	; 0x58
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	61f8      	str	r0, [r7, #28]
 8002a94:	ed87 0b04 	vstr	d0, [r7, #16]
 8002a98:	ed87 1b02 	vstr	d1, [r7, #8]
 8002a9c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002aa6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002aaa:	f7fd fb9d 	bl	80001e8 <__aeabi_dsub>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002abc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ac0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ac4:	f7fd fd48 	bl	8000558 <__aeabi_dmul>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4620      	mov	r0, r4
 8002ace:	4629      	mov	r1, r5
 8002ad0:	f7fd fb8c 	bl	80001ec <__adddf3>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	69f9      	ldr	r1, [r7, #28]
 8002ada:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aee:	f7fd fd33 	bl	8000558 <__aeabi_dmul>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002b00:	f7fd fb72 	bl	80001e8 <__aeabi_dsub>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4610      	mov	r0, r2
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002b12:	f7fd fb69 	bl	80001e8 <__aeabi_dsub>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b24:	f7fd fb62 	bl	80001ec <__adddf3>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	4619      	mov	r1, r3
 8002b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b34:	f7fd fd10 	bl	8000558 <__aeabi_dmul>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	4629      	mov	r1, r5
 8002b40:	f7fd fb54 	bl	80001ec <__adddf3>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	69f9      	ldr	r1, [r7, #28]
 8002b4a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002b5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b5e:	f7fd fcfb 	bl	8000558 <__aeabi_dmul>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4620      	mov	r0, r4
 8002b68:	4629      	mov	r1, r5
 8002b6a:	f7fd fb3d 	bl	80001e8 <__aeabi_dsub>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	69f9      	ldr	r1, [r7, #28]
 8002b74:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002b84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b88:	f7fd fce6 	bl	8000558 <__aeabi_dmul>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4620      	mov	r0, r4
 8002b92:	4629      	mov	r1, r5
 8002b94:	f7fd fb28 	bl	80001e8 <__aeabi_dsub>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	69f9      	ldr	r1, [r7, #28]
 8002b9e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bb2:	f7fd fcd1 	bl	8000558 <__aeabi_dmul>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4620      	mov	r0, r4
 8002bbc:	4629      	mov	r1, r5
 8002bbe:	f7fd fb15 	bl	80001ec <__adddf3>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	69f9      	ldr	r1, [r7, #28]
 8002bc8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002bd8:	f7fd fb08 	bl	80001ec <__adddf3>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002bea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bee:	f7fd fddd 	bl	80007ac <__aeabi_ddiv>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002c00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c04:	f7fd fdd2 	bl	80007ac <__aeabi_ddiv>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002c16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c1a:	f7fd fae5 	bl	80001e8 <__aeabi_dsub>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002c2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c34:	f7fd fc90 	bl	8000558 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	4629      	mov	r1, r5
 8002c40:	f7fd fad4 	bl	80001ec <__adddf3>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	69f9      	ldr	r1, [r7, #28]
 8002c4a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002c54:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c5c:	f7fd fc7c 	bl	8000558 <__aeabi_dmul>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4620      	mov	r0, r4
 8002c66:	4629      	mov	r1, r5
 8002c68:	f7fd fac0 	bl	80001ec <__adddf3>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	69f9      	ldr	r1, [r7, #28]
 8002c72:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002c7c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002c86:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002c90:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c98:	f7fd fc5e 	bl	8000558 <__aeabi_dmul>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	f7fd faa0 	bl	80001e8 <__aeabi_dsub>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	69f9      	ldr	r1, [r7, #28]
 8002cae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002cb8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002cbc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002cc0:	f7fd fc4a 	bl	8000558 <__aeabi_dmul>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4620      	mov	r0, r4
 8002cca:	4629      	mov	r1, r5
 8002ccc:	f7fd fa8c 	bl	80001e8 <__aeabi_dsub>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	69f9      	ldr	r1, [r7, #28]
 8002cd6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002ce0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ce4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ce8:	f7fd fc36 	bl	8000558 <__aeabi_dmul>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	f7fd fa78 	bl	80001e8 <__aeabi_dsub>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	69f9      	ldr	r1, [r7, #28]
 8002cfe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002d08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d0c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d10:	f7fd fc22 	bl	8000558 <__aeabi_dmul>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4620      	mov	r0, r4
 8002d1a:	4629      	mov	r1, r5
 8002d1c:	f7fd fa64 	bl	80001e8 <__aeabi_dsub>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	69f9      	ldr	r1, [r7, #28]
 8002d26:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002d30:	ec43 2b17 	vmov	d7, r2, r3
};
 8002d34:	eeb0 0a47 	vmov.f32	s0, s14
 8002d38:	eef0 0a67 	vmov.f32	s1, s15
 8002d3c:	3758      	adds	r7, #88	; 0x58
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002d44 <MPU6050_calculate>:

void MPU6050_calculate(void){
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
	MPU6050_Read_All(&hi2c1, &MPU6050);
 8002d48:	4902      	ldr	r1, [pc, #8]	; (8002d54 <MPU6050_calculate+0x10>)
 8002d4a:	4803      	ldr	r0, [pc, #12]	; (8002d58 <MPU6050_calculate+0x14>)
 8002d4c:	f7ff fcb8 	bl	80026c0 <MPU6050_Read_All>
}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000248 	.word	0x20000248
 8002d58:	20000504 	.word	0x20000504

08002d5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	607b      	str	r3, [r7, #4]
 8002d66:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <MX_DMA_Init+0x78>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	4a1a      	ldr	r2, [pc, #104]	; (8002dd4 <MX_DMA_Init+0x78>)
 8002d6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d70:	6313      	str	r3, [r2, #48]	; 0x30
 8002d72:	4b18      	ldr	r3, [pc, #96]	; (8002dd4 <MX_DMA_Init+0x78>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7a:	607b      	str	r3, [r7, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	603b      	str	r3, [r7, #0]
 8002d82:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <MX_DMA_Init+0x78>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a13      	ldr	r2, [pc, #76]	; (8002dd4 <MX_DMA_Init+0x78>)
 8002d88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <MX_DMA_Init+0x78>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2105      	movs	r1, #5
 8002d9e:	200e      	movs	r0, #14
 8002da0:	f000 fe18 	bl	80039d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002da4:	200e      	movs	r0, #14
 8002da6:	f000 fe31 	bl	8003a0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2105      	movs	r1, #5
 8002dae:	2038      	movs	r0, #56	; 0x38
 8002db0:	f000 fe10 	bl	80039d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002db4:	2038      	movs	r0, #56	; 0x38
 8002db6:	f000 fe29 	bl	8003a0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2105      	movs	r1, #5
 8002dbe:	203a      	movs	r0, #58	; 0x3a
 8002dc0:	f000 fe08 	bl	80039d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002dc4:	203a      	movs	r0, #58	; 0x3a
 8002dc6:	f000 fe21 	bl	8003a0c <HAL_NVIC_EnableIRQ>

}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800

08002dd8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4a07      	ldr	r2, [pc, #28]	; (8002e04 <vApplicationGetIdleTaskMemory+0x2c>)
 8002de8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4a06      	ldr	r2, [pc, #24]	; (8002e08 <vApplicationGetIdleTaskMemory+0x30>)
 8002dee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2280      	movs	r2, #128	; 0x80
 8002df4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002df6:	bf00      	nop
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	200002b0 	.word	0x200002b0
 8002e08:	20000304 	.word	0x20000304

08002e0c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002e0c:	b5b0      	push	{r4, r5, r7, lr}
 8002e0e:	b09c      	sub	sp, #112	; 0x70
 8002e10:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task10ms */
  osThreadDef(Task10ms, Task_10ms, osPriorityNormal, 0, 128);
 8002e12:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <MX_FREERTOS_Init+0xa4>)
 8002e14:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002e18:	461d      	mov	r5, r3
 8002e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task10msHandle = osThreadCreate(osThread(Task10ms), NULL);
 8002e26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f004 fd7a 	bl	8007926 <osThreadCreate>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <MX_FREERTOS_Init+0xa8>)
 8002e36:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task100ms */
  osThreadDef(Task100ms, Task_100ms, osPriorityNormal, 0, 128);
 8002e38:	4b1f      	ldr	r3, [pc, #124]	; (8002eb8 <MX_FREERTOS_Init+0xac>)
 8002e3a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002e3e:	461d      	mov	r5, r3
 8002e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task100msHandle = osThreadCreate(osThread(Task100ms), NULL);
 8002e4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e50:	2100      	movs	r1, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	f004 fd67 	bl	8007926 <osThreadCreate>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <MX_FREERTOS_Init+0xb0>)
 8002e5c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1000ms */
  osThreadDef(Task1000ms, Task_1000ms, osPriorityIdle, 0, 128);
 8002e5e:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <MX_FREERTOS_Init+0xb4>)
 8002e60:	f107 041c 	add.w	r4, r7, #28
 8002e64:	461d      	mov	r5, r3
 8002e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1000msHandle = osThreadCreate(osThread(Task1000ms), NULL);
 8002e72:	f107 031c 	add.w	r3, r7, #28
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f004 fd54 	bl	8007926 <osThreadCreate>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4a10      	ldr	r2, [pc, #64]	; (8002ec4 <MX_FREERTOS_Init+0xb8>)
 8002e82:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1ms */
  osThreadDef(Task1ms, Task_1ms, osPriorityAboveNormal, 0, 128);
 8002e84:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <MX_FREERTOS_Init+0xbc>)
 8002e86:	463c      	mov	r4, r7
 8002e88:	461d      	mov	r5, r3
 8002e8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1msHandle = osThreadCreate(osThread(Task1ms), NULL);
 8002e96:	463b      	mov	r3, r7
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f004 fd43 	bl	8007926 <osThreadCreate>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <MX_FREERTOS_Init+0xc0>)
 8002ea4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002ea6:	bf00      	nop
 8002ea8:	3770      	adds	r7, #112	; 0x70
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bdb0      	pop	{r4, r5, r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	0800990c 	.word	0x0800990c
 8002eb4:	200002a0 	.word	0x200002a0
 8002eb8:	08009934 	.word	0x08009934
 8002ebc:	200002a4 	.word	0x200002a4
 8002ec0:	0800995c 	.word	0x0800995c
 8002ec4:	200002a8 	.word	0x200002a8
 8002ec8:	08009980 	.word	0x08009980
 8002ecc:	200002ac 	.word	0x200002ac

08002ed0 <Task_10ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_10ms */
void Task_10ms(void const * argument)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_10ms */
	task_init_10ms();
 8002ed8:	f7fd fff1 	bl	8000ebe <task_init_10ms>
  /* Infinite loop */
  for(;;)
  {
	task_10ms();
 8002edc:	f7fd fff6 	bl	8000ecc <task_10ms>
    osDelay(10);
 8002ee0:	200a      	movs	r0, #10
 8002ee2:	f004 fd6c 	bl	80079be <osDelay>
	task_10ms();
 8002ee6:	e7f9      	b.n	8002edc <Task_10ms+0xc>

08002ee8 <Task_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_100ms */
void Task_100ms(void const * argument)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_100ms */
	task_init_100ms();
 8002ef0:	f7fd fff2 	bl	8000ed8 <task_init_100ms>
  /* Infinite loop */
  for(;;)
  {
	task_100ms();
 8002ef4:	f7fd fff7 	bl	8000ee6 <task_100ms>
    osDelay(100);
 8002ef8:	2064      	movs	r0, #100	; 0x64
 8002efa:	f004 fd60 	bl	80079be <osDelay>
	task_100ms();
 8002efe:	e7f9      	b.n	8002ef4 <Task_100ms+0xc>

08002f00 <Task_1000ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1000ms */
void Task_1000ms(void const * argument)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1000ms */
	task_init_1000ms();
 8002f08:	f7fd fff3 	bl	8000ef2 <task_init_1000ms>
  /* Infinite loop */
  for(;;)
  {
	task_1000ms();
 8002f0c:	f7fd fff8 	bl	8000f00 <task_1000ms>
    osDelay(1000);
 8002f10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f14:	f004 fd53 	bl	80079be <osDelay>
	task_1000ms();
 8002f18:	e7f8      	b.n	8002f0c <Task_1000ms+0xc>

08002f1a <Task_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1ms */
void Task_1ms(void const * argument)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1ms */
	task_init_1ms();
 8002f22:	f7fd ffbf 	bl	8000ea4 <task_init_1ms>
  /* Infinite loop */
  for(;;)
  {
	task_1ms();
 8002f26:	f7fd ffc4 	bl	8000eb2 <task_1ms>
    osDelay(1);
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	f004 fd47 	bl	80079be <osDelay>
	task_1ms();
 8002f30:	e7f9      	b.n	8002f26 <Task_1ms+0xc>
	...

08002f34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08a      	sub	sp, #40	; 0x28
 8002f38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3a:	f107 0314 	add.w	r3, r7, #20
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	60da      	str	r2, [r3, #12]
 8002f48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	4b32      	ldr	r3, [pc, #200]	; (8003018 <MX_GPIO_Init+0xe4>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a31      	ldr	r2, [pc, #196]	; (8003018 <MX_GPIO_Init+0xe4>)
 8002f54:	f043 0304 	orr.w	r3, r3, #4
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b2f      	ldr	r3, [pc, #188]	; (8003018 <MX_GPIO_Init+0xe4>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	4b2b      	ldr	r3, [pc, #172]	; (8003018 <MX_GPIO_Init+0xe4>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	4a2a      	ldr	r2, [pc, #168]	; (8003018 <MX_GPIO_Init+0xe4>)
 8002f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f74:	6313      	str	r3, [r2, #48]	; 0x30
 8002f76:	4b28      	ldr	r3, [pc, #160]	; (8003018 <MX_GPIO_Init+0xe4>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	4b24      	ldr	r3, [pc, #144]	; (8003018 <MX_GPIO_Init+0xe4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	4a23      	ldr	r2, [pc, #140]	; (8003018 <MX_GPIO_Init+0xe4>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6313      	str	r3, [r2, #48]	; 0x30
 8002f92:	4b21      	ldr	r3, [pc, #132]	; (8003018 <MX_GPIO_Init+0xe4>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <MX_GPIO_Init+0xe4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a1c      	ldr	r2, [pc, #112]	; (8003018 <MX_GPIO_Init+0xe4>)
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b1a      	ldr	r3, [pc, #104]	; (8003018 <MX_GPIO_Init+0xe4>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	607b      	str	r3, [r7, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP280_CSN_GPIO_Port, BMP280_CSN_Pin, GPIO_PIN_RESET);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fc0:	4816      	ldr	r0, [pc, #88]	; (800301c <MX_GPIO_Init+0xe8>)
 8002fc2:	f001 fa47 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002fcc:	4814      	ldr	r0, [pc, #80]	; (8003020 <MX_GPIO_Init+0xec>)
 8002fce:	f001 fa41 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP280_CSN_Pin;
 8002fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMP280_CSN_GPIO_Port, &GPIO_InitStruct);
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	4619      	mov	r1, r3
 8002fea:	480c      	ldr	r0, [pc, #48]	; (800301c <MX_GPIO_Init+0xe8>)
 8002fec:	f001 f8ae 	bl	800414c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 8002ff0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffe:	2300      	movs	r3, #0
 8003000:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003002:	f107 0314 	add.w	r3, r7, #20
 8003006:	4619      	mov	r1, r3
 8003008:	4805      	ldr	r0, [pc, #20]	; (8003020 <MX_GPIO_Init+0xec>)
 800300a:	f001 f89f 	bl	800414c <HAL_GPIO_Init>

}
 800300e:	bf00      	nop
 8003010:	3728      	adds	r7, #40	; 0x28
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	40020000 	.word	0x40020000
 8003020:	40020400 	.word	0x40020400

08003024 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003028:	4b12      	ldr	r3, [pc, #72]	; (8003074 <MX_I2C1_Init+0x50>)
 800302a:	4a13      	ldr	r2, [pc, #76]	; (8003078 <MX_I2C1_Init+0x54>)
 800302c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800302e:	4b11      	ldr	r3, [pc, #68]	; (8003074 <MX_I2C1_Init+0x50>)
 8003030:	4a12      	ldr	r2, [pc, #72]	; (800307c <MX_I2C1_Init+0x58>)
 8003032:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003034:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <MX_I2C1_Init+0x50>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <MX_I2C1_Init+0x50>)
 800303c:	2200      	movs	r2, #0
 800303e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <MX_I2C1_Init+0x50>)
 8003042:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003046:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003048:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <MX_I2C1_Init+0x50>)
 800304a:	2200      	movs	r2, #0
 800304c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <MX_I2C1_Init+0x50>)
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003054:	4b07      	ldr	r3, [pc, #28]	; (8003074 <MX_I2C1_Init+0x50>)
 8003056:	2200      	movs	r2, #0
 8003058:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <MX_I2C1_Init+0x50>)
 800305c:	2200      	movs	r2, #0
 800305e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003060:	4804      	ldr	r0, [pc, #16]	; (8003074 <MX_I2C1_Init+0x50>)
 8003062:	f001 fa11 	bl	8004488 <HAL_I2C_Init>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800306c:	f000 f8e8 	bl	8003240 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003070:	bf00      	nop
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20000504 	.word	0x20000504
 8003078:	40005400 	.word	0x40005400
 800307c:	00061a80 	.word	0x00061a80

08003080 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	; 0x28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	60da      	str	r2, [r3, #12]
 8003096:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a19      	ldr	r2, [pc, #100]	; (8003104 <HAL_I2C_MspInit+0x84>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d12b      	bne.n	80030fa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	4b18      	ldr	r3, [pc, #96]	; (8003108 <HAL_I2C_MspInit+0x88>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	4a17      	ldr	r2, [pc, #92]	; (8003108 <HAL_I2C_MspInit+0x88>)
 80030ac:	f043 0302 	orr.w	r3, r3, #2
 80030b0:	6313      	str	r3, [r2, #48]	; 0x30
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <HAL_I2C_MspInit+0x88>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030be:	23c0      	movs	r3, #192	; 0xc0
 80030c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030c2:	2312      	movs	r3, #18
 80030c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ca:	2303      	movs	r3, #3
 80030cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030ce:	2304      	movs	r3, #4
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d2:	f107 0314 	add.w	r3, r7, #20
 80030d6:	4619      	mov	r1, r3
 80030d8:	480c      	ldr	r0, [pc, #48]	; (800310c <HAL_I2C_MspInit+0x8c>)
 80030da:	f001 f837 	bl	800414c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <HAL_I2C_MspInit+0x88>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	4a08      	ldr	r2, [pc, #32]	; (8003108 <HAL_I2C_MspInit+0x88>)
 80030e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030ec:	6413      	str	r3, [r2, #64]	; 0x40
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_I2C_MspInit+0x88>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80030fa:	bf00      	nop
 80030fc:	3728      	adds	r7, #40	; 0x28
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40005400 	.word	0x40005400
 8003108:	40023800 	.word	0x40023800
 800310c:	40020400 	.word	0x40020400

08003110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003114:	f000 fb64 	bl	80037e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003118:	f000 f818 	bl	800314c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800311c:	f7ff ff0a 	bl	8002f34 <MX_GPIO_Init>
  MX_DMA_Init();
 8003120:	f7ff fe1c 	bl	8002d5c <MX_DMA_Init>
  MX_SPI1_Init();
 8003124:	f000 f892 	bl	800324c <MX_SPI1_Init>
  MX_SPI2_Init();
 8003128:	f000 f8c6 	bl	80032b8 <MX_SPI2_Init>
  MX_I2C1_Init();
 800312c:	f7ff ff7a 	bl	8003024 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_init();
 8003130:	f7ff f932 	bl	8002398 <NRF24_init>
  BMP280_init();
 8003134:	f7fe fbda 	bl	80018ec <BMP280_init>
  MPU6050_Init(&hi2c1);
 8003138:	4803      	ldr	r0, [pc, #12]	; (8003148 <main+0x38>)
 800313a:	f7ff fa67 	bl	800260c <MPU6050_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800313e:	f7ff fe65 	bl	8002e0c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003142:	f004 fbe9 	bl	8007918 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003146:	e7fe      	b.n	8003146 <main+0x36>
 8003148:	20000504 	.word	0x20000504

0800314c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b094      	sub	sp, #80	; 0x50
 8003150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003152:	f107 0320 	add.w	r3, r7, #32
 8003156:	2230      	movs	r2, #48	; 0x30
 8003158:	2100      	movs	r1, #0
 800315a:	4618      	mov	r0, r3
 800315c:	f005 fe0e 	bl	8008d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003160:	f107 030c 	add.w	r3, r7, #12
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003170:	2300      	movs	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	4b27      	ldr	r3, [pc, #156]	; (8003214 <SystemClock_Config+0xc8>)
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	4a26      	ldr	r2, [pc, #152]	; (8003214 <SystemClock_Config+0xc8>)
 800317a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317e:	6413      	str	r3, [r2, #64]	; 0x40
 8003180:	4b24      	ldr	r3, [pc, #144]	; (8003214 <SystemClock_Config+0xc8>)
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800318c:	2300      	movs	r3, #0
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	4b21      	ldr	r3, [pc, #132]	; (8003218 <SystemClock_Config+0xcc>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a20      	ldr	r2, [pc, #128]	; (8003218 <SystemClock_Config+0xcc>)
 8003196:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <SystemClock_Config+0xcc>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031a4:	607b      	str	r3, [r7, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031a8:	2302      	movs	r3, #2
 80031aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031ac:	2301      	movs	r3, #1
 80031ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031b0:	2310      	movs	r3, #16
 80031b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031b4:	2302      	movs	r3, #2
 80031b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031b8:	2300      	movs	r3, #0
 80031ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80031bc:	2308      	movs	r3, #8
 80031be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80031c0:	2364      	movs	r3, #100	; 0x64
 80031c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031c4:	2302      	movs	r3, #2
 80031c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80031c8:	2304      	movs	r3, #4
 80031ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031cc:	f107 0320 	add.w	r3, r7, #32
 80031d0:	4618      	mov	r0, r3
 80031d2:	f002 f97d 	bl	80054d0 <HAL_RCC_OscConfig>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80031dc:	f000 f830 	bl	8003240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031e0:	230f      	movs	r3, #15
 80031e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031e4:	2302      	movs	r3, #2
 80031e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80031f6:	f107 030c 	add.w	r3, r7, #12
 80031fa:	2103      	movs	r1, #3
 80031fc:	4618      	mov	r0, r3
 80031fe:	f002 fbdf 	bl	80059c0 <HAL_RCC_ClockConfig>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003208:	f000 f81a 	bl	8003240 <Error_Handler>
  }
}
 800320c:	bf00      	nop
 800320e:	3750      	adds	r7, #80	; 0x50
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40023800 	.word	0x40023800
 8003218:	40007000 	.word	0x40007000

0800321c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a04      	ldr	r2, [pc, #16]	; (800323c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d101      	bne.n	8003232 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800322e:	f000 faf9 	bl	8003824 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40014800 	.word	0x40014800

08003240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003244:	b672      	cpsid	i
}
 8003246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003248:	e7fe      	b.n	8003248 <Error_Handler+0x8>
	...

0800324c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003250:	4b17      	ldr	r3, [pc, #92]	; (80032b0 <MX_SPI1_Init+0x64>)
 8003252:	4a18      	ldr	r2, [pc, #96]	; (80032b4 <MX_SPI1_Init+0x68>)
 8003254:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003256:	4b16      	ldr	r3, [pc, #88]	; (80032b0 <MX_SPI1_Init+0x64>)
 8003258:	f44f 7282 	mov.w	r2, #260	; 0x104
 800325c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800325e:	4b14      	ldr	r3, [pc, #80]	; (80032b0 <MX_SPI1_Init+0x64>)
 8003260:	2200      	movs	r2, #0
 8003262:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <MX_SPI1_Init+0x64>)
 8003266:	2200      	movs	r2, #0
 8003268:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800326a:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <MX_SPI1_Init+0x64>)
 800326c:	2200      	movs	r2, #0
 800326e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003270:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <MX_SPI1_Init+0x64>)
 8003272:	2200      	movs	r2, #0
 8003274:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003276:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <MX_SPI1_Init+0x64>)
 8003278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800327e:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <MX_SPI1_Init+0x64>)
 8003280:	2218      	movs	r2, #24
 8003282:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003284:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <MX_SPI1_Init+0x64>)
 8003286:	2200      	movs	r2, #0
 8003288:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <MX_SPI1_Init+0x64>)
 800328c:	2200      	movs	r2, #0
 800328e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003290:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <MX_SPI1_Init+0x64>)
 8003292:	2200      	movs	r2, #0
 8003294:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <MX_SPI1_Init+0x64>)
 8003298:	220a      	movs	r2, #10
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800329c:	4804      	ldr	r0, [pc, #16]	; (80032b0 <MX_SPI1_Init+0x64>)
 800329e:	f002 fde1 	bl	8005e64 <HAL_SPI_Init>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80032a8:	f7ff ffca 	bl	8003240 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032ac:	bf00      	nop
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20000558 	.word	0x20000558
 80032b4:	40013000 	.word	0x40013000

080032b8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80032bc:	4b17      	ldr	r3, [pc, #92]	; (800331c <MX_SPI2_Init+0x64>)
 80032be:	4a18      	ldr	r2, [pc, #96]	; (8003320 <MX_SPI2_Init+0x68>)
 80032c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80032c2:	4b16      	ldr	r3, [pc, #88]	; (800331c <MX_SPI2_Init+0x64>)
 80032c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80032ca:	4b14      	ldr	r3, [pc, #80]	; (800331c <MX_SPI2_Init+0x64>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80032d0:	4b12      	ldr	r3, [pc, #72]	; (800331c <MX_SPI2_Init+0x64>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032d6:	4b11      	ldr	r3, [pc, #68]	; (800331c <MX_SPI2_Init+0x64>)
 80032d8:	2200      	movs	r2, #0
 80032da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032dc:	4b0f      	ldr	r3, [pc, #60]	; (800331c <MX_SPI2_Init+0x64>)
 80032de:	2200      	movs	r2, #0
 80032e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80032e2:	4b0e      	ldr	r3, [pc, #56]	; (800331c <MX_SPI2_Init+0x64>)
 80032e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80032ea:	4b0c      	ldr	r3, [pc, #48]	; (800331c <MX_SPI2_Init+0x64>)
 80032ec:	2218      	movs	r2, #24
 80032ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <MX_SPI2_Init+0x64>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <MX_SPI2_Init+0x64>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032fc:	4b07      	ldr	r3, [pc, #28]	; (800331c <MX_SPI2_Init+0x64>)
 80032fe:	2200      	movs	r2, #0
 8003300:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <MX_SPI2_Init+0x64>)
 8003304:	220a      	movs	r2, #10
 8003306:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003308:	4804      	ldr	r0, [pc, #16]	; (800331c <MX_SPI2_Init+0x64>)
 800330a:	f002 fdab 	bl	8005e64 <HAL_SPI_Init>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003314:	f7ff ff94 	bl	8003240 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003318:	bf00      	nop
 800331a:	bd80      	pop	{r7, pc}
 800331c:	200005b0 	.word	0x200005b0
 8003320:	40003800 	.word	0x40003800

08003324 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08c      	sub	sp, #48	; 0x30
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332c:	f107 031c 	add.w	r3, r7, #28
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a8a      	ldr	r2, [pc, #552]	; (800356c <HAL_SPI_MspInit+0x248>)
 8003342:	4293      	cmp	r3, r2
 8003344:	f040 8089 	bne.w	800345a <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003348:	2300      	movs	r3, #0
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	4b88      	ldr	r3, [pc, #544]	; (8003570 <HAL_SPI_MspInit+0x24c>)
 800334e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003350:	4a87      	ldr	r2, [pc, #540]	; (8003570 <HAL_SPI_MspInit+0x24c>)
 8003352:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003356:	6453      	str	r3, [r2, #68]	; 0x44
 8003358:	4b85      	ldr	r3, [pc, #532]	; (8003570 <HAL_SPI_MspInit+0x24c>)
 800335a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	4b81      	ldr	r3, [pc, #516]	; (8003570 <HAL_SPI_MspInit+0x24c>)
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	4a80      	ldr	r2, [pc, #512]	; (8003570 <HAL_SPI_MspInit+0x24c>)
 800336e:	f043 0301 	orr.w	r3, r3, #1
 8003372:	6313      	str	r3, [r2, #48]	; 0x30
 8003374:	4b7e      	ldr	r3, [pc, #504]	; (8003570 <HAL_SPI_MspInit+0x24c>)
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MISO_Pin|NRF24_MOSI_Pin;
 8003380:	23e0      	movs	r3, #224	; 0xe0
 8003382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003384:	2302      	movs	r3, #2
 8003386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	2300      	movs	r3, #0
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338c:	2303      	movs	r3, #3
 800338e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003390:	2305      	movs	r3, #5
 8003392:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003394:	f107 031c 	add.w	r3, r7, #28
 8003398:	4619      	mov	r1, r3
 800339a:	4876      	ldr	r0, [pc, #472]	; (8003574 <HAL_SPI_MspInit+0x250>)
 800339c:	f000 fed6 	bl	800414c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80033a0:	4b75      	ldr	r3, [pc, #468]	; (8003578 <HAL_SPI_MspInit+0x254>)
 80033a2:	4a76      	ldr	r2, [pc, #472]	; (800357c <HAL_SPI_MspInit+0x258>)
 80033a4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80033a6:	4b74      	ldr	r3, [pc, #464]	; (8003578 <HAL_SPI_MspInit+0x254>)
 80033a8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80033ac:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033ae:	4b72      	ldr	r3, [pc, #456]	; (8003578 <HAL_SPI_MspInit+0x254>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b4:	4b70      	ldr	r3, [pc, #448]	; (8003578 <HAL_SPI_MspInit+0x254>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033ba:	4b6f      	ldr	r3, [pc, #444]	; (8003578 <HAL_SPI_MspInit+0x254>)
 80033bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033c0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033c2:	4b6d      	ldr	r3, [pc, #436]	; (8003578 <HAL_SPI_MspInit+0x254>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033c8:	4b6b      	ldr	r3, [pc, #428]	; (8003578 <HAL_SPI_MspInit+0x254>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80033ce:	4b6a      	ldr	r3, [pc, #424]	; (8003578 <HAL_SPI_MspInit+0x254>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033d4:	4b68      	ldr	r3, [pc, #416]	; (8003578 <HAL_SPI_MspInit+0x254>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033da:	4b67      	ldr	r3, [pc, #412]	; (8003578 <HAL_SPI_MspInit+0x254>)
 80033dc:	2200      	movs	r2, #0
 80033de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80033e0:	4865      	ldr	r0, [pc, #404]	; (8003578 <HAL_SPI_MspInit+0x254>)
 80033e2:	f000 fb21 	bl	8003a28 <HAL_DMA_Init>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80033ec:	f7ff ff28 	bl	8003240 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a61      	ldr	r2, [pc, #388]	; (8003578 <HAL_SPI_MspInit+0x254>)
 80033f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80033f6:	4a60      	ldr	r2, [pc, #384]	; (8003578 <HAL_SPI_MspInit+0x254>)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80033fc:	4b60      	ldr	r3, [pc, #384]	; (8003580 <HAL_SPI_MspInit+0x25c>)
 80033fe:	4a61      	ldr	r2, [pc, #388]	; (8003584 <HAL_SPI_MspInit+0x260>)
 8003400:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8003402:	4b5f      	ldr	r3, [pc, #380]	; (8003580 <HAL_SPI_MspInit+0x25c>)
 8003404:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003408:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800340a:	4b5d      	ldr	r3, [pc, #372]	; (8003580 <HAL_SPI_MspInit+0x25c>)
 800340c:	2240      	movs	r2, #64	; 0x40
 800340e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003410:	4b5b      	ldr	r3, [pc, #364]	; (8003580 <HAL_SPI_MspInit+0x25c>)
 8003412:	2200      	movs	r2, #0
 8003414:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003416:	4b5a      	ldr	r3, [pc, #360]	; (8003580 <HAL_SPI_MspInit+0x25c>)
 8003418:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800341c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800341e:	4b58      	ldr	r3, [pc, #352]	; (8003580 <HAL_SPI_MspInit+0x25c>)
 8003420:	2200      	movs	r2, #0
 8003422:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003424:	4b56      	ldr	r3, [pc, #344]	; (8003580 <HAL_SPI_MspInit+0x25c>)
 8003426:	2200      	movs	r2, #0
 8003428:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800342a:	4b55      	ldr	r3, [pc, #340]	; (8003580 <HAL_SPI_MspInit+0x25c>)
 800342c:	2200      	movs	r2, #0
 800342e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003430:	4b53      	ldr	r3, [pc, #332]	; (8003580 <HAL_SPI_MspInit+0x25c>)
 8003432:	2200      	movs	r2, #0
 8003434:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003436:	4b52      	ldr	r3, [pc, #328]	; (8003580 <HAL_SPI_MspInit+0x25c>)
 8003438:	2200      	movs	r2, #0
 800343a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800343c:	4850      	ldr	r0, [pc, #320]	; (8003580 <HAL_SPI_MspInit+0x25c>)
 800343e:	f000 faf3 	bl	8003a28 <HAL_DMA_Init>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8003448:	f7ff fefa 	bl	8003240 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a4c      	ldr	r2, [pc, #304]	; (8003580 <HAL_SPI_MspInit+0x25c>)
 8003450:	649a      	str	r2, [r3, #72]	; 0x48
 8003452:	4a4b      	ldr	r2, [pc, #300]	; (8003580 <HAL_SPI_MspInit+0x25c>)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003458:	e084      	b.n	8003564 <HAL_SPI_MspInit+0x240>
  else if(spiHandle->Instance==SPI2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a4a      	ldr	r2, [pc, #296]	; (8003588 <HAL_SPI_MspInit+0x264>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d17f      	bne.n	8003564 <HAL_SPI_MspInit+0x240>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003464:	2300      	movs	r3, #0
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	4b41      	ldr	r3, [pc, #260]	; (8003570 <HAL_SPI_MspInit+0x24c>)
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	4a40      	ldr	r2, [pc, #256]	; (8003570 <HAL_SPI_MspInit+0x24c>)
 800346e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003472:	6413      	str	r3, [r2, #64]	; 0x40
 8003474:	4b3e      	ldr	r3, [pc, #248]	; (8003570 <HAL_SPI_MspInit+0x24c>)
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	4b3a      	ldr	r3, [pc, #232]	; (8003570 <HAL_SPI_MspInit+0x24c>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	4a39      	ldr	r2, [pc, #228]	; (8003570 <HAL_SPI_MspInit+0x24c>)
 800348a:	f043 0304 	orr.w	r3, r3, #4
 800348e:	6313      	str	r3, [r2, #48]	; 0x30
 8003490:	4b37      	ldr	r3, [pc, #220]	; (8003570 <HAL_SPI_MspInit+0x24c>)
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800349c:	2300      	movs	r3, #0
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	4b33      	ldr	r3, [pc, #204]	; (8003570 <HAL_SPI_MspInit+0x24c>)
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	4a32      	ldr	r2, [pc, #200]	; (8003570 <HAL_SPI_MspInit+0x24c>)
 80034a6:	f043 0302 	orr.w	r3, r3, #2
 80034aa:	6313      	str	r3, [r2, #48]	; 0x30
 80034ac:	4b30      	ldr	r3, [pc, #192]	; (8003570 <HAL_SPI_MspInit+0x24c>)
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP280_MISO_Pin|BMP280_MOSI_Pin;
 80034b8:	230c      	movs	r3, #12
 80034ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034bc:	2302      	movs	r3, #2
 80034be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c4:	2303      	movs	r3, #3
 80034c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034c8:	2305      	movs	r3, #5
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034cc:	f107 031c 	add.w	r3, r7, #28
 80034d0:	4619      	mov	r1, r3
 80034d2:	482e      	ldr	r0, [pc, #184]	; (800358c <HAL_SPI_MspInit+0x268>)
 80034d4:	f000 fe3a 	bl	800414c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BMP280_SCK_Pin;
 80034d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034de:	2302      	movs	r3, #2
 80034e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e6:	2303      	movs	r3, #3
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034ea:	2305      	movs	r3, #5
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BMP280_SCK_GPIO_Port, &GPIO_InitStruct);
 80034ee:	f107 031c 	add.w	r3, r7, #28
 80034f2:	4619      	mov	r1, r3
 80034f4:	4826      	ldr	r0, [pc, #152]	; (8003590 <HAL_SPI_MspInit+0x26c>)
 80034f6:	f000 fe29 	bl	800414c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80034fa:	4b26      	ldr	r3, [pc, #152]	; (8003594 <HAL_SPI_MspInit+0x270>)
 80034fc:	4a26      	ldr	r2, [pc, #152]	; (8003598 <HAL_SPI_MspInit+0x274>)
 80034fe:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003500:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_SPI_MspInit+0x270>)
 8003502:	2200      	movs	r2, #0
 8003504:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003506:	4b23      	ldr	r3, [pc, #140]	; (8003594 <HAL_SPI_MspInit+0x270>)
 8003508:	2200      	movs	r2, #0
 800350a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800350c:	4b21      	ldr	r3, [pc, #132]	; (8003594 <HAL_SPI_MspInit+0x270>)
 800350e:	2200      	movs	r2, #0
 8003510:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003512:	4b20      	ldr	r3, [pc, #128]	; (8003594 <HAL_SPI_MspInit+0x270>)
 8003514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003518:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800351a:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <HAL_SPI_MspInit+0x270>)
 800351c:	2200      	movs	r2, #0
 800351e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003520:	4b1c      	ldr	r3, [pc, #112]	; (8003594 <HAL_SPI_MspInit+0x270>)
 8003522:	2200      	movs	r2, #0
 8003524:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003526:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <HAL_SPI_MspInit+0x270>)
 8003528:	2200      	movs	r2, #0
 800352a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800352c:	4b19      	ldr	r3, [pc, #100]	; (8003594 <HAL_SPI_MspInit+0x270>)
 800352e:	2200      	movs	r2, #0
 8003530:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003532:	4b18      	ldr	r3, [pc, #96]	; (8003594 <HAL_SPI_MspInit+0x270>)
 8003534:	2200      	movs	r2, #0
 8003536:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003538:	4816      	ldr	r0, [pc, #88]	; (8003594 <HAL_SPI_MspInit+0x270>)
 800353a:	f000 fa75 	bl	8003a28 <HAL_DMA_Init>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_SPI_MspInit+0x224>
      Error_Handler();
 8003544:	f7ff fe7c 	bl	8003240 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a12      	ldr	r2, [pc, #72]	; (8003594 <HAL_SPI_MspInit+0x270>)
 800354c:	64da      	str	r2, [r3, #76]	; 0x4c
 800354e:	4a11      	ldr	r2, [pc, #68]	; (8003594 <HAL_SPI_MspInit+0x270>)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8003554:	2200      	movs	r2, #0
 8003556:	2105      	movs	r1, #5
 8003558:	2024      	movs	r0, #36	; 0x24
 800355a:	f000 fa3b 	bl	80039d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800355e:	2024      	movs	r0, #36	; 0x24
 8003560:	f000 fa54 	bl	8003a0c <HAL_NVIC_EnableIRQ>
}
 8003564:	bf00      	nop
 8003566:	3730      	adds	r7, #48	; 0x30
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40013000 	.word	0x40013000
 8003570:	40023800 	.word	0x40023800
 8003574:	40020000 	.word	0x40020000
 8003578:	20000608 	.word	0x20000608
 800357c:	40026410 	.word	0x40026410
 8003580:	20000668 	.word	0x20000668
 8003584:	40026440 	.word	0x40026440
 8003588:	40003800 	.word	0x40003800
 800358c:	40020800 	.word	0x40020800
 8003590:	40020400 	.word	0x40020400
 8003594:	200006c8 	.word	0x200006c8
 8003598:	40026058 	.word	0x40026058

0800359c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_MspInit+0x54>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	4a11      	ldr	r2, [pc, #68]	; (80035f0 <HAL_MspInit+0x54>)
 80035ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b0:	6453      	str	r3, [r2, #68]	; 0x44
 80035b2:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_MspInit+0x54>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <HAL_MspInit+0x54>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	4a0a      	ldr	r2, [pc, #40]	; (80035f0 <HAL_MspInit+0x54>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035cc:	6413      	str	r3, [r2, #64]	; 0x40
 80035ce:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <HAL_MspInit+0x54>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035da:	2200      	movs	r2, #0
 80035dc:	210f      	movs	r1, #15
 80035de:	f06f 0001 	mvn.w	r0, #1
 80035e2:	f000 f9f7 	bl	80039d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800

080035f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08c      	sub	sp, #48	; 0x30
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8003604:	2300      	movs	r3, #0
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	4b2e      	ldr	r3, [pc, #184]	; (80036c4 <HAL_InitTick+0xd0>)
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	4a2d      	ldr	r2, [pc, #180]	; (80036c4 <HAL_InitTick+0xd0>)
 800360e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003612:	6453      	str	r3, [r2, #68]	; 0x44
 8003614:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <HAL_InitTick+0xd0>)
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003620:	f107 020c 	add.w	r2, r7, #12
 8003624:	f107 0310 	add.w	r3, r7, #16
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f002 fbe8 	bl	8005e00 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003630:	f002 fbd2 	bl	8005dd8 <HAL_RCC_GetPCLK2Freq>
 8003634:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	4a23      	ldr	r2, [pc, #140]	; (80036c8 <HAL_InitTick+0xd4>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0c9b      	lsrs	r3, r3, #18
 8003640:	3b01      	subs	r3, #1
 8003642:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8003644:	4b21      	ldr	r3, [pc, #132]	; (80036cc <HAL_InitTick+0xd8>)
 8003646:	4a22      	ldr	r2, [pc, #136]	; (80036d0 <HAL_InitTick+0xdc>)
 8003648:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800364a:	4b20      	ldr	r3, [pc, #128]	; (80036cc <HAL_InitTick+0xd8>)
 800364c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003650:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8003652:	4a1e      	ldr	r2, [pc, #120]	; (80036cc <HAL_InitTick+0xd8>)
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8003658:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <HAL_InitTick+0xd8>)
 800365a:	2200      	movs	r2, #0
 800365c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800365e:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <HAL_InitTick+0xd8>)
 8003660:	2200      	movs	r2, #0
 8003662:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <HAL_InitTick+0xd8>)
 8003666:	2200      	movs	r2, #0
 8003668:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800366a:	4818      	ldr	r0, [pc, #96]	; (80036cc <HAL_InitTick+0xd8>)
 800366c:	f003 fec8 	bl	8007400 <HAL_TIM_Base_Init>
 8003670:	4603      	mov	r3, r0
 8003672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003676:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800367a:	2b00      	cmp	r3, #0
 800367c:	d11b      	bne.n	80036b6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 800367e:	4813      	ldr	r0, [pc, #76]	; (80036cc <HAL_InitTick+0xd8>)
 8003680:	f003 ff18 	bl	80074b4 <HAL_TIM_Base_Start_IT>
 8003684:	4603      	mov	r3, r0
 8003686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800368a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800368e:	2b00      	cmp	r3, #0
 8003690:	d111      	bne.n	80036b6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003692:	201a      	movs	r0, #26
 8003694:	f000 f9ba 	bl	8003a0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b0f      	cmp	r3, #15
 800369c:	d808      	bhi.n	80036b0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 800369e:	2200      	movs	r2, #0
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	201a      	movs	r0, #26
 80036a4:	f000 f996 	bl	80039d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036a8:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <HAL_InitTick+0xe0>)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	e002      	b.n	80036b6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80036b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3730      	adds	r7, #48	; 0x30
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800
 80036c8:	431bde83 	.word	0x431bde83
 80036cc:	20000728 	.word	0x20000728
 80036d0:	40014800 	.word	0x40014800
 80036d4:	20000094 	.word	0x20000094

080036d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036dc:	e7fe      	b.n	80036dc <NMI_Handler+0x4>

080036de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036de:	b480      	push	{r7}
 80036e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036e2:	e7fe      	b.n	80036e2 <HardFault_Handler+0x4>

080036e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036e8:	e7fe      	b.n	80036e8 <MemManage_Handler+0x4>

080036ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036ea:	b480      	push	{r7}
 80036ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036ee:	e7fe      	b.n	80036ee <BusFault_Handler+0x4>

080036f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036f4:	e7fe      	b.n	80036f4 <UsageFault_Handler+0x4>

080036f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036f6:	b480      	push	{r7}
 80036f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036fa:	bf00      	nop
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003708:	4802      	ldr	r0, [pc, #8]	; (8003714 <DMA1_Stream3_IRQHandler+0x10>)
 800370a:	f000 fab5 	bl	8003c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	200006c8 	.word	0x200006c8

08003718 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800371c:	4802      	ldr	r0, [pc, #8]	; (8003728 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800371e:	f003 ff2b 	bl	8007578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000728 	.word	0x20000728

0800372c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003730:	4802      	ldr	r0, [pc, #8]	; (800373c <SPI2_IRQHandler+0x10>)
 8003732:	f003 fa9b 	bl	8006c6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003736:	bf00      	nop
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	200005b0 	.word	0x200005b0

08003740 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003744:	4802      	ldr	r0, [pc, #8]	; (8003750 <DMA2_Stream0_IRQHandler+0x10>)
 8003746:	f000 fa97 	bl	8003c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000608 	.word	0x20000608

08003754 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003758:	4802      	ldr	r0, [pc, #8]	; (8003764 <DMA2_Stream2_IRQHandler+0x10>)
 800375a:	f000 fa8d 	bl	8003c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000668 	.word	0x20000668

08003768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <SystemInit+0x20>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	4a05      	ldr	r2, [pc, #20]	; (8003788 <SystemInit+0x20>)
 8003774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800378c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003790:	f7ff ffea 	bl	8003768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003794:	480c      	ldr	r0, [pc, #48]	; (80037c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003796:	490d      	ldr	r1, [pc, #52]	; (80037cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003798:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800379a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800379c:	e002      	b.n	80037a4 <LoopCopyDataInit>

0800379e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800379e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037a2:	3304      	adds	r3, #4

080037a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037a8:	d3f9      	bcc.n	800379e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037aa:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037ac:	4c0a      	ldr	r4, [pc, #40]	; (80037d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80037ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037b0:	e001      	b.n	80037b6 <LoopFillZerobss>

080037b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037b4:	3204      	adds	r2, #4

080037b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037b8:	d3fb      	bcc.n	80037b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037ba:	f005 faed 	bl	8008d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037be:	f7ff fca7 	bl	8003110 <main>
  bx  lr    
 80037c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80037c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037cc:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80037d0:	08009a48 	.word	0x08009a48
  ldr r2, =_sbss
 80037d4:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80037d8:	20004600 	.word	0x20004600

080037dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037dc:	e7fe      	b.n	80037dc <ADC_IRQHandler>
	...

080037e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037e4:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <HAL_Init+0x40>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a0d      	ldr	r2, [pc, #52]	; (8003820 <HAL_Init+0x40>)
 80037ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <HAL_Init+0x40>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <HAL_Init+0x40>)
 80037f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <HAL_Init+0x40>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a07      	ldr	r2, [pc, #28]	; (8003820 <HAL_Init+0x40>)
 8003802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003808:	2003      	movs	r0, #3
 800380a:	f000 f8d8 	bl	80039be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800380e:	200f      	movs	r0, #15
 8003810:	f7ff fef0 	bl	80035f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003814:	f7ff fec2 	bl	800359c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40023c00 	.word	0x40023c00

08003824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_IncTick+0x20>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	461a      	mov	r2, r3
 800382e:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_IncTick+0x24>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4413      	add	r3, r2
 8003834:	4a04      	ldr	r2, [pc, #16]	; (8003848 <HAL_IncTick+0x24>)
 8003836:	6013      	str	r3, [r2, #0]
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000098 	.word	0x20000098
 8003848:	20000770 	.word	0x20000770

0800384c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return uwTick;
 8003850:	4b03      	ldr	r3, [pc, #12]	; (8003860 <HAL_GetTick+0x14>)
 8003852:	681b      	ldr	r3, [r3, #0]
}
 8003854:	4618      	mov	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000770 	.word	0x20000770

08003864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003880:	4013      	ands	r3, r2
 8003882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800388c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003896:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	60d3      	str	r3, [r2, #12]
}
 800389c:	bf00      	nop
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038b0:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <__NVIC_GetPriorityGrouping+0x18>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	0a1b      	lsrs	r3, r3, #8
 80038b6:	f003 0307 	and.w	r3, r3, #7
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	db0b      	blt.n	80038f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	f003 021f 	and.w	r2, r3, #31
 80038e0:	4907      	ldr	r1, [pc, #28]	; (8003900 <__NVIC_EnableIRQ+0x38>)
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	2001      	movs	r0, #1
 80038ea:	fa00 f202 	lsl.w	r2, r0, r2
 80038ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	e000e100 	.word	0xe000e100

08003904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	6039      	str	r1, [r7, #0]
 800390e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003914:	2b00      	cmp	r3, #0
 8003916:	db0a      	blt.n	800392e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	b2da      	uxtb	r2, r3
 800391c:	490c      	ldr	r1, [pc, #48]	; (8003950 <__NVIC_SetPriority+0x4c>)
 800391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003922:	0112      	lsls	r2, r2, #4
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	440b      	add	r3, r1
 8003928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800392c:	e00a      	b.n	8003944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4908      	ldr	r1, [pc, #32]	; (8003954 <__NVIC_SetPriority+0x50>)
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	3b04      	subs	r3, #4
 800393c:	0112      	lsls	r2, r2, #4
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	440b      	add	r3, r1
 8003942:	761a      	strb	r2, [r3, #24]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	e000e100 	.word	0xe000e100
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003958:	b480      	push	{r7}
 800395a:	b089      	sub	sp, #36	; 0x24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f1c3 0307 	rsb	r3, r3, #7
 8003972:	2b04      	cmp	r3, #4
 8003974:	bf28      	it	cs
 8003976:	2304      	movcs	r3, #4
 8003978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	3304      	adds	r3, #4
 800397e:	2b06      	cmp	r3, #6
 8003980:	d902      	bls.n	8003988 <NVIC_EncodePriority+0x30>
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3b03      	subs	r3, #3
 8003986:	e000      	b.n	800398a <NVIC_EncodePriority+0x32>
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800398c:	f04f 32ff 	mov.w	r2, #4294967295
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43da      	mvns	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	401a      	ands	r2, r3
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a0:	f04f 31ff 	mov.w	r1, #4294967295
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	fa01 f303 	lsl.w	r3, r1, r3
 80039aa:	43d9      	mvns	r1, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b0:	4313      	orrs	r3, r2
         );
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3724      	adds	r7, #36	; 0x24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7ff ff4c 	bl	8003864 <__NVIC_SetPriorityGrouping>
}
 80039cc:	bf00      	nop
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039e6:	f7ff ff61 	bl	80038ac <__NVIC_GetPriorityGrouping>
 80039ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	6978      	ldr	r0, [r7, #20]
 80039f2:	f7ff ffb1 	bl	8003958 <NVIC_EncodePriority>
 80039f6:	4602      	mov	r2, r0
 80039f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff ff80 	bl	8003904 <__NVIC_SetPriority>
}
 8003a04:	bf00      	nop
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff ff54 	bl	80038c8 <__NVIC_EnableIRQ>
}
 8003a20:	bf00      	nop
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a34:	f7ff ff0a 	bl	800384c <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e099      	b.n	8003b78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a64:	e00f      	b.n	8003a86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a66:	f7ff fef1 	bl	800384c <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b05      	cmp	r3, #5
 8003a72:	d908      	bls.n	8003a86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e078      	b.n	8003b78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e8      	bne.n	8003a66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4b38      	ldr	r3, [pc, #224]	; (8003b80 <HAL_DMA_Init+0x158>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ab2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d107      	bne.n	8003af0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f023 0307 	bic.w	r3, r3, #7
 8003b06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d117      	bne.n	8003b4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00e      	beq.n	8003b4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fa91 	bl	8004054 <DMA_CheckFifoParam>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2240      	movs	r2, #64	; 0x40
 8003b3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b46:	2301      	movs	r3, #1
 8003b48:	e016      	b.n	8003b78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fa48 	bl	8003fe8 <DMA_CalcBaseAndBitshift>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b60:	223f      	movs	r2, #63	; 0x3f
 8003b62:	409a      	lsls	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	f010803f 	.word	0xf010803f

08003b84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_DMA_Start_IT+0x26>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e040      	b.n	8003c2c <HAL_DMA_Start_IT+0xa8>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d12f      	bne.n	8003c1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f9da 	bl	8003f8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bdc:	223f      	movs	r2, #63	; 0x3f
 8003bde:	409a      	lsls	r2, r3
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0216 	orr.w	r2, r2, #22
 8003bf2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d007      	beq.n	8003c0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0208 	orr.w	r2, r2, #8
 8003c0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	e005      	b.n	8003c2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c26:	2302      	movs	r3, #2
 8003c28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d004      	beq.n	8003c52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2280      	movs	r2, #128	; 0x80
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e00c      	b.n	8003c6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2205      	movs	r2, #5
 8003c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c84:	4b8e      	ldr	r3, [pc, #568]	; (8003ec0 <HAL_DMA_IRQHandler+0x248>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a8e      	ldr	r2, [pc, #568]	; (8003ec4 <HAL_DMA_IRQHandler+0x24c>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	0a9b      	lsrs	r3, r3, #10
 8003c90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca2:	2208      	movs	r2, #8
 8003ca4:	409a      	lsls	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01a      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d013      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0204 	bic.w	r2, r2, #4
 8003cca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd0:	2208      	movs	r2, #8
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cdc:	f043 0201 	orr.w	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce8:	2201      	movs	r2, #1
 8003cea:	409a      	lsls	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d012      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00b      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d06:	2201      	movs	r2, #1
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d12:	f043 0202 	orr.w	r2, r3, #2
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1e:	2204      	movs	r2, #4
 8003d20:	409a      	lsls	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d012      	beq.n	8003d50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00b      	beq.n	8003d50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d48:	f043 0204 	orr.w	r2, r3, #4
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d54:	2210      	movs	r2, #16
 8003d56:	409a      	lsls	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d043      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d03c      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d72:	2210      	movs	r2, #16
 8003d74:	409a      	lsls	r2, r3
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d018      	beq.n	8003dba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d108      	bne.n	8003da8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d024      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	4798      	blx	r3
 8003da6:	e01f      	b.n	8003de8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01b      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4798      	blx	r3
 8003db8:	e016      	b.n	8003de8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d107      	bne.n	8003dd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0208 	bic.w	r2, r2, #8
 8003dd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dec:	2220      	movs	r2, #32
 8003dee:	409a      	lsls	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 808f 	beq.w	8003f18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 8087 	beq.w	8003f18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0e:	2220      	movs	r2, #32
 8003e10:	409a      	lsls	r2, r3
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b05      	cmp	r3, #5
 8003e20:	d136      	bne.n	8003e90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0216 	bic.w	r2, r2, #22
 8003e30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d103      	bne.n	8003e52 <HAL_DMA_IRQHandler+0x1da>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d007      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0208 	bic.w	r2, r2, #8
 8003e60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e66:	223f      	movs	r2, #63	; 0x3f
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d07e      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4798      	blx	r3
        }
        return;
 8003e8e:	e079      	b.n	8003f84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01d      	beq.n	8003eda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10d      	bne.n	8003ec8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d031      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
 8003ebc:	e02c      	b.n	8003f18 <HAL_DMA_IRQHandler+0x2a0>
 8003ebe:	bf00      	nop
 8003ec0:	20000090 	.word	0x20000090
 8003ec4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d023      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	4798      	blx	r3
 8003ed8:	e01e      	b.n	8003f18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10f      	bne.n	8003f08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0210 	bic.w	r2, r2, #16
 8003ef6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d032      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d022      	beq.n	8003f72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2205      	movs	r2, #5
 8003f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0201 	bic.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	3301      	adds	r3, #1
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d307      	bcc.n	8003f60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f2      	bne.n	8003f44 <HAL_DMA_IRQHandler+0x2cc>
 8003f5e:	e000      	b.n	8003f62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4798      	blx	r3
 8003f82:	e000      	b.n	8003f86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f84:	bf00      	nop
    }
  }
}
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fa8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b40      	cmp	r3, #64	; 0x40
 8003fb8:	d108      	bne.n	8003fcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003fca:	e007      	b.n	8003fdc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	60da      	str	r2, [r3, #12]
}
 8003fdc:	bf00      	nop
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	3b10      	subs	r3, #16
 8003ff8:	4a14      	ldr	r2, [pc, #80]	; (800404c <DMA_CalcBaseAndBitshift+0x64>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004002:	4a13      	ldr	r2, [pc, #76]	; (8004050 <DMA_CalcBaseAndBitshift+0x68>)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b03      	cmp	r3, #3
 8004014:	d909      	bls.n	800402a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	1d1a      	adds	r2, r3, #4
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	659a      	str	r2, [r3, #88]	; 0x58
 8004028:	e007      	b.n	800403a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	aaaaaaab 	.word	0xaaaaaaab
 8004050:	080099bc 	.word	0x080099bc

08004054 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d11f      	bne.n	80040ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b03      	cmp	r3, #3
 8004072:	d856      	bhi.n	8004122 <DMA_CheckFifoParam+0xce>
 8004074:	a201      	add	r2, pc, #4	; (adr r2, 800407c <DMA_CheckFifoParam+0x28>)
 8004076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407a:	bf00      	nop
 800407c:	0800408d 	.word	0x0800408d
 8004080:	0800409f 	.word	0x0800409f
 8004084:	0800408d 	.word	0x0800408d
 8004088:	08004123 	.word	0x08004123
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d046      	beq.n	8004126 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800409c:	e043      	b.n	8004126 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040a6:	d140      	bne.n	800412a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ac:	e03d      	b.n	800412a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b6:	d121      	bne.n	80040fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d837      	bhi.n	800412e <DMA_CheckFifoParam+0xda>
 80040be:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <DMA_CheckFifoParam+0x70>)
 80040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c4:	080040d5 	.word	0x080040d5
 80040c8:	080040db 	.word	0x080040db
 80040cc:	080040d5 	.word	0x080040d5
 80040d0:	080040ed 	.word	0x080040ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      break;
 80040d8:	e030      	b.n	800413c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d025      	beq.n	8004132 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ea:	e022      	b.n	8004132 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040f4:	d11f      	bne.n	8004136 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040fa:	e01c      	b.n	8004136 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d903      	bls.n	800410a <DMA_CheckFifoParam+0xb6>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d003      	beq.n	8004110 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004108:	e018      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	73fb      	strb	r3, [r7, #15]
      break;
 800410e:	e015      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00e      	beq.n	800413a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      break;
 8004120:	e00b      	b.n	800413a <DMA_CheckFifoParam+0xe6>
      break;
 8004122:	bf00      	nop
 8004124:	e00a      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 8004126:	bf00      	nop
 8004128:	e008      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 800412a:	bf00      	nop
 800412c:	e006      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 800412e:	bf00      	nop
 8004130:	e004      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 8004132:	bf00      	nop
 8004134:	e002      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;   
 8004136:	bf00      	nop
 8004138:	e000      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 800413a:	bf00      	nop
    }
  } 
  
  return status; 
 800413c:	7bfb      	ldrb	r3, [r7, #15]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop

0800414c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800414c:	b480      	push	{r7}
 800414e:	b089      	sub	sp, #36	; 0x24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800415a:	2300      	movs	r3, #0
 800415c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800415e:	2300      	movs	r3, #0
 8004160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
 8004166:	e159      	b.n	800441c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004168:	2201      	movs	r2, #1
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4013      	ands	r3, r2
 800417a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	429a      	cmp	r2, r3
 8004182:	f040 8148 	bne.w	8004416 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	2b01      	cmp	r3, #1
 8004190:	d005      	beq.n	800419e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800419a:	2b02      	cmp	r3, #2
 800419c:	d130      	bne.n	8004200 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	2203      	movs	r2, #3
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	43db      	mvns	r3, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4013      	ands	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041d4:	2201      	movs	r2, #1
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 0201 	and.w	r2, r3, #1
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	2b03      	cmp	r3, #3
 800420a:	d017      	beq.n	800423c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	2203      	movs	r2, #3
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4313      	orrs	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d123      	bne.n	8004290 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	08da      	lsrs	r2, r3, #3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3208      	adds	r2, #8
 8004250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	220f      	movs	r2, #15
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	08da      	lsrs	r2, r3, #3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3208      	adds	r2, #8
 800428a:	69b9      	ldr	r1, [r7, #24]
 800428c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	2203      	movs	r2, #3
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	43db      	mvns	r3, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4013      	ands	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f003 0203 	and.w	r2, r3, #3
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80a2 	beq.w	8004416 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	4b57      	ldr	r3, [pc, #348]	; (8004434 <HAL_GPIO_Init+0x2e8>)
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	4a56      	ldr	r2, [pc, #344]	; (8004434 <HAL_GPIO_Init+0x2e8>)
 80042dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042e0:	6453      	str	r3, [r2, #68]	; 0x44
 80042e2:	4b54      	ldr	r3, [pc, #336]	; (8004434 <HAL_GPIO_Init+0x2e8>)
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042ee:	4a52      	ldr	r2, [pc, #328]	; (8004438 <HAL_GPIO_Init+0x2ec>)
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	089b      	lsrs	r3, r3, #2
 80042f4:	3302      	adds	r3, #2
 80042f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	220f      	movs	r2, #15
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	43db      	mvns	r3, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	4013      	ands	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a49      	ldr	r2, [pc, #292]	; (800443c <HAL_GPIO_Init+0x2f0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d019      	beq.n	800434e <HAL_GPIO_Init+0x202>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a48      	ldr	r2, [pc, #288]	; (8004440 <HAL_GPIO_Init+0x2f4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d013      	beq.n	800434a <HAL_GPIO_Init+0x1fe>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a47      	ldr	r2, [pc, #284]	; (8004444 <HAL_GPIO_Init+0x2f8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00d      	beq.n	8004346 <HAL_GPIO_Init+0x1fa>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a46      	ldr	r2, [pc, #280]	; (8004448 <HAL_GPIO_Init+0x2fc>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d007      	beq.n	8004342 <HAL_GPIO_Init+0x1f6>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a45      	ldr	r2, [pc, #276]	; (800444c <HAL_GPIO_Init+0x300>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d101      	bne.n	800433e <HAL_GPIO_Init+0x1f2>
 800433a:	2304      	movs	r3, #4
 800433c:	e008      	b.n	8004350 <HAL_GPIO_Init+0x204>
 800433e:	2307      	movs	r3, #7
 8004340:	e006      	b.n	8004350 <HAL_GPIO_Init+0x204>
 8004342:	2303      	movs	r3, #3
 8004344:	e004      	b.n	8004350 <HAL_GPIO_Init+0x204>
 8004346:	2302      	movs	r3, #2
 8004348:	e002      	b.n	8004350 <HAL_GPIO_Init+0x204>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <HAL_GPIO_Init+0x204>
 800434e:	2300      	movs	r3, #0
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	f002 0203 	and.w	r2, r2, #3
 8004356:	0092      	lsls	r2, r2, #2
 8004358:	4093      	lsls	r3, r2
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4313      	orrs	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004360:	4935      	ldr	r1, [pc, #212]	; (8004438 <HAL_GPIO_Init+0x2ec>)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	089b      	lsrs	r3, r3, #2
 8004366:	3302      	adds	r3, #2
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800436e:	4b38      	ldr	r3, [pc, #224]	; (8004450 <HAL_GPIO_Init+0x304>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	43db      	mvns	r3, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4013      	ands	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004392:	4a2f      	ldr	r2, [pc, #188]	; (8004450 <HAL_GPIO_Init+0x304>)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004398:	4b2d      	ldr	r3, [pc, #180]	; (8004450 <HAL_GPIO_Init+0x304>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	43db      	mvns	r3, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4013      	ands	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043bc:	4a24      	ldr	r2, [pc, #144]	; (8004450 <HAL_GPIO_Init+0x304>)
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043c2:	4b23      	ldr	r3, [pc, #140]	; (8004450 <HAL_GPIO_Init+0x304>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	43db      	mvns	r3, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4013      	ands	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043e6:	4a1a      	ldr	r2, [pc, #104]	; (8004450 <HAL_GPIO_Init+0x304>)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043ec:	4b18      	ldr	r3, [pc, #96]	; (8004450 <HAL_GPIO_Init+0x304>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	43db      	mvns	r3, r3
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4013      	ands	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004410:	4a0f      	ldr	r2, [pc, #60]	; (8004450 <HAL_GPIO_Init+0x304>)
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	3301      	adds	r3, #1
 800441a:	61fb      	str	r3, [r7, #28]
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	2b0f      	cmp	r3, #15
 8004420:	f67f aea2 	bls.w	8004168 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	3724      	adds	r7, #36	; 0x24
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40023800 	.word	0x40023800
 8004438:	40013800 	.word	0x40013800
 800443c:	40020000 	.word	0x40020000
 8004440:	40020400 	.word	0x40020400
 8004444:	40020800 	.word	0x40020800
 8004448:	40020c00 	.word	0x40020c00
 800444c:	40021000 	.word	0x40021000
 8004450:	40013c00 	.word	0x40013c00

08004454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	807b      	strh	r3, [r7, #2]
 8004460:	4613      	mov	r3, r2
 8004462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004464:	787b      	ldrb	r3, [r7, #1]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800446a:	887a      	ldrh	r2, [r7, #2]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004470:	e003      	b.n	800447a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004472:	887b      	ldrh	r3, [r7, #2]
 8004474:	041a      	lsls	r2, r3, #16
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	619a      	str	r2, [r3, #24]
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
	...

08004488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e12b      	b.n	80046f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fe fde6 	bl	8003080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2224      	movs	r2, #36	; 0x24
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0201 	bic.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044ec:	f001 fc60 	bl	8005db0 <HAL_RCC_GetPCLK1Freq>
 80044f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	4a81      	ldr	r2, [pc, #516]	; (80046fc <HAL_I2C_Init+0x274>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d807      	bhi.n	800450c <HAL_I2C_Init+0x84>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4a80      	ldr	r2, [pc, #512]	; (8004700 <HAL_I2C_Init+0x278>)
 8004500:	4293      	cmp	r3, r2
 8004502:	bf94      	ite	ls
 8004504:	2301      	movls	r3, #1
 8004506:	2300      	movhi	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	e006      	b.n	800451a <HAL_I2C_Init+0x92>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4a7d      	ldr	r2, [pc, #500]	; (8004704 <HAL_I2C_Init+0x27c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	bf94      	ite	ls
 8004514:	2301      	movls	r3, #1
 8004516:	2300      	movhi	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e0e7      	b.n	80046f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4a78      	ldr	r2, [pc, #480]	; (8004708 <HAL_I2C_Init+0x280>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	0c9b      	lsrs	r3, r3, #18
 800452c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	4a6a      	ldr	r2, [pc, #424]	; (80046fc <HAL_I2C_Init+0x274>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d802      	bhi.n	800455c <HAL_I2C_Init+0xd4>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	3301      	adds	r3, #1
 800455a:	e009      	b.n	8004570 <HAL_I2C_Init+0xe8>
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004562:	fb02 f303 	mul.w	r3, r2, r3
 8004566:	4a69      	ldr	r2, [pc, #420]	; (800470c <HAL_I2C_Init+0x284>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	099b      	lsrs	r3, r3, #6
 800456e:	3301      	adds	r3, #1
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6812      	ldr	r2, [r2, #0]
 8004574:	430b      	orrs	r3, r1
 8004576:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004582:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	495c      	ldr	r1, [pc, #368]	; (80046fc <HAL_I2C_Init+0x274>)
 800458c:	428b      	cmp	r3, r1
 800458e:	d819      	bhi.n	80045c4 <HAL_I2C_Init+0x13c>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1e59      	subs	r1, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	fbb1 f3f3 	udiv	r3, r1, r3
 800459e:	1c59      	adds	r1, r3, #1
 80045a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045a4:	400b      	ands	r3, r1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <HAL_I2C_Init+0x138>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1e59      	subs	r1, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80045b8:	3301      	adds	r3, #1
 80045ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045be:	e051      	b.n	8004664 <HAL_I2C_Init+0x1dc>
 80045c0:	2304      	movs	r3, #4
 80045c2:	e04f      	b.n	8004664 <HAL_I2C_Init+0x1dc>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d111      	bne.n	80045f0 <HAL_I2C_Init+0x168>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	1e58      	subs	r0, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6859      	ldr	r1, [r3, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	440b      	add	r3, r1
 80045da:	fbb0 f3f3 	udiv	r3, r0, r3
 80045de:	3301      	adds	r3, #1
 80045e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	e012      	b.n	8004616 <HAL_I2C_Init+0x18e>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1e58      	subs	r0, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6859      	ldr	r1, [r3, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	0099      	lsls	r1, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	fbb0 f3f3 	udiv	r3, r0, r3
 8004606:	3301      	adds	r3, #1
 8004608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460c:	2b00      	cmp	r3, #0
 800460e:	bf0c      	ite	eq
 8004610:	2301      	moveq	r3, #1
 8004612:	2300      	movne	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_I2C_Init+0x196>
 800461a:	2301      	movs	r3, #1
 800461c:	e022      	b.n	8004664 <HAL_I2C_Init+0x1dc>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10e      	bne.n	8004644 <HAL_I2C_Init+0x1bc>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1e58      	subs	r0, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6859      	ldr	r1, [r3, #4]
 800462e:	460b      	mov	r3, r1
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	440b      	add	r3, r1
 8004634:	fbb0 f3f3 	udiv	r3, r0, r3
 8004638:	3301      	adds	r3, #1
 800463a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004642:	e00f      	b.n	8004664 <HAL_I2C_Init+0x1dc>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1e58      	subs	r0, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6859      	ldr	r1, [r3, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	0099      	lsls	r1, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	fbb0 f3f3 	udiv	r3, r0, r3
 800465a:	3301      	adds	r3, #1
 800465c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	6809      	ldr	r1, [r1, #0]
 8004668:	4313      	orrs	r3, r2
 800466a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004692:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6911      	ldr	r1, [r2, #16]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	68d2      	ldr	r2, [r2, #12]
 800469e:	4311      	orrs	r1, r2
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6812      	ldr	r2, [r2, #0]
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	000186a0 	.word	0x000186a0
 8004700:	001e847f 	.word	0x001e847f
 8004704:	003d08ff 	.word	0x003d08ff
 8004708:	431bde83 	.word	0x431bde83
 800470c:	10624dd3 	.word	0x10624dd3

08004710 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	4608      	mov	r0, r1
 800471a:	4611      	mov	r1, r2
 800471c:	461a      	mov	r2, r3
 800471e:	4603      	mov	r3, r0
 8004720:	817b      	strh	r3, [r7, #10]
 8004722:	460b      	mov	r3, r1
 8004724:	813b      	strh	r3, [r7, #8]
 8004726:	4613      	mov	r3, r2
 8004728:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800472a:	f7ff f88f 	bl	800384c <HAL_GetTick>
 800472e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b20      	cmp	r3, #32
 800473a:	f040 80d9 	bne.w	80048f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	2319      	movs	r3, #25
 8004744:	2201      	movs	r2, #1
 8004746:	496d      	ldr	r1, [pc, #436]	; (80048fc <HAL_I2C_Mem_Write+0x1ec>)
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 fc8b 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004754:	2302      	movs	r3, #2
 8004756:	e0cc      	b.n	80048f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <HAL_I2C_Mem_Write+0x56>
 8004762:	2302      	movs	r3, #2
 8004764:	e0c5      	b.n	80048f2 <HAL_I2C_Mem_Write+0x1e2>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b01      	cmp	r3, #1
 800477a:	d007      	beq.n	800478c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800479a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2221      	movs	r2, #33	; 0x21
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2240      	movs	r2, #64	; 0x40
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a3a      	ldr	r2, [r7, #32]
 80047b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4a4d      	ldr	r2, [pc, #308]	; (8004900 <HAL_I2C_Mem_Write+0x1f0>)
 80047cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047ce:	88f8      	ldrh	r0, [r7, #6]
 80047d0:	893a      	ldrh	r2, [r7, #8]
 80047d2:	8979      	ldrh	r1, [r7, #10]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	4603      	mov	r3, r0
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fac2 	bl	8004d68 <I2C_RequestMemoryWrite>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d052      	beq.n	8004890 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e081      	b.n	80048f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fd50 	bl	8005298 <I2C_WaitOnTXEFlagUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00d      	beq.n	800481a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	2b04      	cmp	r3, #4
 8004804:	d107      	bne.n	8004816 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004814:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e06b      	b.n	80048f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	781a      	ldrb	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b04      	cmp	r3, #4
 8004856:	d11b      	bne.n	8004890 <HAL_I2C_Mem_Write+0x180>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485c:	2b00      	cmp	r3, #0
 800485e:	d017      	beq.n	8004890 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	781a      	ldrb	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1aa      	bne.n	80047ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fd43 	bl	8005328 <I2C_WaitOnBTFFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00d      	beq.n	80048c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d107      	bne.n	80048c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e016      	b.n	80048f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	e000      	b.n	80048f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80048f0:	2302      	movs	r3, #2
  }
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	00100002 	.word	0x00100002
 8004900:	ffff0000 	.word	0xffff0000

08004904 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08c      	sub	sp, #48	; 0x30
 8004908:	af02      	add	r7, sp, #8
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	4608      	mov	r0, r1
 800490e:	4611      	mov	r1, r2
 8004910:	461a      	mov	r2, r3
 8004912:	4603      	mov	r3, r0
 8004914:	817b      	strh	r3, [r7, #10]
 8004916:	460b      	mov	r3, r1
 8004918:	813b      	strh	r3, [r7, #8]
 800491a:	4613      	mov	r3, r2
 800491c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800491e:	f7fe ff95 	bl	800384c <HAL_GetTick>
 8004922:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b20      	cmp	r3, #32
 800492e:	f040 8214 	bne.w	8004d5a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	2319      	movs	r3, #25
 8004938:	2201      	movs	r2, #1
 800493a:	497b      	ldr	r1, [pc, #492]	; (8004b28 <HAL_I2C_Mem_Read+0x224>)
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fb91 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004948:	2302      	movs	r3, #2
 800494a:	e207      	b.n	8004d5c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_I2C_Mem_Read+0x56>
 8004956:	2302      	movs	r3, #2
 8004958:	e200      	b.n	8004d5c <HAL_I2C_Mem_Read+0x458>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b01      	cmp	r3, #1
 800496e:	d007      	beq.n	8004980 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800498e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2222      	movs	r2, #34	; 0x22
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2240      	movs	r2, #64	; 0x40
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80049b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4a5b      	ldr	r2, [pc, #364]	; (8004b2c <HAL_I2C_Mem_Read+0x228>)
 80049c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049c2:	88f8      	ldrh	r0, [r7, #6]
 80049c4:	893a      	ldrh	r2, [r7, #8]
 80049c6:	8979      	ldrh	r1, [r7, #10]
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	9301      	str	r3, [sp, #4]
 80049cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	4603      	mov	r3, r0
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 fa5e 	bl	8004e94 <I2C_RequestMemoryRead>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e1bc      	b.n	8004d5c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d113      	bne.n	8004a12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ea:	2300      	movs	r3, #0
 80049ec:	623b      	str	r3, [r7, #32]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	623b      	str	r3, [r7, #32]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	623b      	str	r3, [r7, #32]
 80049fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	e190      	b.n	8004d34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d11b      	bne.n	8004a52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	61fb      	str	r3, [r7, #28]
 8004a3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	e170      	b.n	8004d34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d11b      	bne.n	8004a92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61bb      	str	r3, [r7, #24]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	61bb      	str	r3, [r7, #24]
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	e150      	b.n	8004d34 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a92:	2300      	movs	r3, #0
 8004a94:	617b      	str	r3, [r7, #20]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004aa8:	e144      	b.n	8004d34 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	f200 80f1 	bhi.w	8004c96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d123      	bne.n	8004b04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fc79 	bl	80053b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e145      	b.n	8004d5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691a      	ldr	r2, [r3, #16]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b02:	e117      	b.n	8004d34 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d14e      	bne.n	8004baa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	2200      	movs	r2, #0
 8004b14:	4906      	ldr	r1, [pc, #24]	; (8004b30 <HAL_I2C_Mem_Read+0x22c>)
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 faa4 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d008      	beq.n	8004b34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e11a      	b.n	8004d5c <HAL_I2C_Mem_Read+0x458>
 8004b26:	bf00      	nop
 8004b28:	00100002 	.word	0x00100002
 8004b2c:	ffff0000 	.word	0xffff0000
 8004b30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ba8:	e0c4      	b.n	8004d34 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	496c      	ldr	r1, [pc, #432]	; (8004d64 <HAL_I2C_Mem_Read+0x460>)
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 fa55 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0cb      	b.n	8004d5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691a      	ldr	r2, [r3, #16]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	4955      	ldr	r1, [pc, #340]	; (8004d64 <HAL_I2C_Mem_Read+0x460>)
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fa27 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e09d      	b.n	8004d5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	691a      	ldr	r2, [r3, #16]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c94:	e04e      	b.n	8004d34 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 fb8c 	bl	80053b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e058      	b.n	8004d5c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	f003 0304 	and.w	r3, r3, #4
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d124      	bne.n	8004d34 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d107      	bne.n	8004d02 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d00:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f47f aeb6 	bne.w	8004aaa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	e000      	b.n	8004d5c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004d5a:	2302      	movs	r3, #2
  }
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3728      	adds	r7, #40	; 0x28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	00010004 	.word	0x00010004

08004d68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	4608      	mov	r0, r1
 8004d72:	4611      	mov	r1, r2
 8004d74:	461a      	mov	r2, r3
 8004d76:	4603      	mov	r3, r0
 8004d78:	817b      	strh	r3, [r7, #10]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	813b      	strh	r3, [r7, #8]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f960 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00d      	beq.n	8004dc6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db8:	d103      	bne.n	8004dc2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e05f      	b.n	8004e86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dc6:	897b      	ldrh	r3, [r7, #10]
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	6a3a      	ldr	r2, [r7, #32]
 8004dda:	492d      	ldr	r1, [pc, #180]	; (8004e90 <I2C_RequestMemoryWrite+0x128>)
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f9bb 	bl	8005158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e04c      	b.n	8004e86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e04:	6a39      	ldr	r1, [r7, #32]
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 fa46 	bl	8005298 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00d      	beq.n	8004e2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d107      	bne.n	8004e2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e02b      	b.n	8004e86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e2e:	88fb      	ldrh	r3, [r7, #6]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d105      	bne.n	8004e40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e34:	893b      	ldrh	r3, [r7, #8]
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	611a      	str	r2, [r3, #16]
 8004e3e:	e021      	b.n	8004e84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e40:	893b      	ldrh	r3, [r7, #8]
 8004e42:	0a1b      	lsrs	r3, r3, #8
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e50:	6a39      	ldr	r1, [r7, #32]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 fa20 	bl	8005298 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00d      	beq.n	8004e7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d107      	bne.n	8004e76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e005      	b.n	8004e86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e7a:	893b      	ldrh	r3, [r7, #8]
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	00010002 	.word	0x00010002

08004e94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	4608      	mov	r0, r1
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	817b      	strh	r3, [r7, #10]
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	813b      	strh	r3, [r7, #8]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ebc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ecc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 f8c2 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00d      	beq.n	8004f02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef4:	d103      	bne.n	8004efe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004efc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e0aa      	b.n	8005058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f02:	897b      	ldrh	r3, [r7, #10]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	461a      	mov	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	6a3a      	ldr	r2, [r7, #32]
 8004f16:	4952      	ldr	r1, [pc, #328]	; (8005060 <I2C_RequestMemoryRead+0x1cc>)
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f91d 	bl	8005158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e097      	b.n	8005058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f28:	2300      	movs	r3, #0
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f40:	6a39      	ldr	r1, [r7, #32]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f9a8 	bl	8005298 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00d      	beq.n	8004f6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d107      	bne.n	8004f66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e076      	b.n	8005058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d105      	bne.n	8004f7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f70:	893b      	ldrh	r3, [r7, #8]
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	611a      	str	r2, [r3, #16]
 8004f7a:	e021      	b.n	8004fc0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f7c:	893b      	ldrh	r3, [r7, #8]
 8004f7e:	0a1b      	lsrs	r3, r3, #8
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8c:	6a39      	ldr	r1, [r7, #32]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f982 	bl	8005298 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00d      	beq.n	8004fb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d107      	bne.n	8004fb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e050      	b.n	8005058 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fb6:	893b      	ldrh	r3, [r7, #8]
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc2:	6a39      	ldr	r1, [r7, #32]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f967 	bl	8005298 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00d      	beq.n	8004fec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d107      	bne.n	8004fe8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e035      	b.n	8005058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ffa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	2200      	movs	r2, #0
 8005004:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f82b 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00d      	beq.n	8005030 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005022:	d103      	bne.n	800502c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800502a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e013      	b.n	8005058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005030:	897b      	ldrh	r3, [r7, #10]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	b2da      	uxtb	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	6a3a      	ldr	r2, [r7, #32]
 8005044:	4906      	ldr	r1, [pc, #24]	; (8005060 <I2C_RequestMemoryRead+0x1cc>)
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f886 	bl	8005158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	00010002 	.word	0x00010002

08005064 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	4613      	mov	r3, r2
 8005072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005074:	e048      	b.n	8005108 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507c:	d044      	beq.n	8005108 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507e:	f7fe fbe5 	bl	800384c <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d302      	bcc.n	8005094 <I2C_WaitOnFlagUntilTimeout+0x30>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d139      	bne.n	8005108 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	0c1b      	lsrs	r3, r3, #16
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	d10d      	bne.n	80050ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	43da      	mvns	r2, r3
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	4013      	ands	r3, r2
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	bf0c      	ite	eq
 80050b0:	2301      	moveq	r3, #1
 80050b2:	2300      	movne	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	461a      	mov	r2, r3
 80050b8:	e00c      	b.n	80050d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	43da      	mvns	r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	4013      	ands	r3, r2
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bf0c      	ite	eq
 80050cc:	2301      	moveq	r3, #1
 80050ce:	2300      	movne	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	461a      	mov	r2, r3
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d116      	bne.n	8005108 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e023      	b.n	8005150 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	0c1b      	lsrs	r3, r3, #16
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b01      	cmp	r3, #1
 8005110:	d10d      	bne.n	800512e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	43da      	mvns	r2, r3
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	4013      	ands	r3, r2
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	bf0c      	ite	eq
 8005124:	2301      	moveq	r3, #1
 8005126:	2300      	movne	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	461a      	mov	r2, r3
 800512c:	e00c      	b.n	8005148 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	43da      	mvns	r2, r3
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	4013      	ands	r3, r2
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	bf0c      	ite	eq
 8005140:	2301      	moveq	r3, #1
 8005142:	2300      	movne	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	461a      	mov	r2, r3
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	429a      	cmp	r2, r3
 800514c:	d093      	beq.n	8005076 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005166:	e071      	b.n	800524c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005176:	d123      	bne.n	80051c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005186:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005190:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	f043 0204 	orr.w	r2, r3, #4
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e067      	b.n	8005290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d041      	beq.n	800524c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c8:	f7fe fb40 	bl	800384c <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d302      	bcc.n	80051de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d136      	bne.n	800524c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d10c      	bne.n	8005202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	43da      	mvns	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4013      	ands	r3, r2
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	bf14      	ite	ne
 80051fa:	2301      	movne	r3, #1
 80051fc:	2300      	moveq	r3, #0
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	e00b      	b.n	800521a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	43da      	mvns	r2, r3
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	4013      	ands	r3, r2
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	bf14      	ite	ne
 8005214:	2301      	movne	r3, #1
 8005216:	2300      	moveq	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d016      	beq.n	800524c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005238:	f043 0220 	orr.w	r2, r3, #32
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e021      	b.n	8005290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	0c1b      	lsrs	r3, r3, #16
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b01      	cmp	r3, #1
 8005254:	d10c      	bne.n	8005270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	43da      	mvns	r2, r3
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	4013      	ands	r3, r2
 8005262:	b29b      	uxth	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	bf14      	ite	ne
 8005268:	2301      	movne	r3, #1
 800526a:	2300      	moveq	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	e00b      	b.n	8005288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	43da      	mvns	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4013      	ands	r3, r2
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	bf14      	ite	ne
 8005282:	2301      	movne	r3, #1
 8005284:	2300      	moveq	r3, #0
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	f47f af6d 	bne.w	8005168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052a4:	e034      	b.n	8005310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 f8e3 	bl	8005472 <I2C_IsAcknowledgeFailed>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e034      	b.n	8005320 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d028      	beq.n	8005310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052be:	f7fe fac5 	bl	800384c <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d302      	bcc.n	80052d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d11d      	bne.n	8005310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052de:	2b80      	cmp	r3, #128	; 0x80
 80052e0:	d016      	beq.n	8005310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	f043 0220 	orr.w	r2, r3, #32
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e007      	b.n	8005320 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531a:	2b80      	cmp	r3, #128	; 0x80
 800531c:	d1c3      	bne.n	80052a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005334:	e034      	b.n	80053a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 f89b 	bl	8005472 <I2C_IsAcknowledgeFailed>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e034      	b.n	80053b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534c:	d028      	beq.n	80053a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534e:	f7fe fa7d 	bl	800384c <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	d302      	bcc.n	8005364 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d11d      	bne.n	80053a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b04      	cmp	r3, #4
 8005370:	d016      	beq.n	80053a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	f043 0220 	orr.w	r2, r3, #32
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e007      	b.n	80053b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d1c3      	bne.n	8005336 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053c4:	e049      	b.n	800545a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d119      	bne.n	8005408 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0210 	mvn.w	r2, #16
 80053dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e030      	b.n	800546a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005408:	f7fe fa20 	bl	800384c <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	429a      	cmp	r2, r3
 8005416:	d302      	bcc.n	800541e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d11d      	bne.n	800545a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005428:	2b40      	cmp	r3, #64	; 0x40
 800542a:	d016      	beq.n	800545a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f043 0220 	orr.w	r2, r3, #32
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e007      	b.n	800546a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005464:	2b40      	cmp	r3, #64	; 0x40
 8005466:	d1ae      	bne.n	80053c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005488:	d11b      	bne.n	80054c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005492:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	f043 0204 	orr.w	r2, r3, #4
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e267      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d075      	beq.n	80055da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054ee:	4b88      	ldr	r3, [pc, #544]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 030c 	and.w	r3, r3, #12
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d00c      	beq.n	8005514 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054fa:	4b85      	ldr	r3, [pc, #532]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005502:	2b08      	cmp	r3, #8
 8005504:	d112      	bne.n	800552c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005506:	4b82      	ldr	r3, [pc, #520]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800550e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005512:	d10b      	bne.n	800552c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005514:	4b7e      	ldr	r3, [pc, #504]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d05b      	beq.n	80055d8 <HAL_RCC_OscConfig+0x108>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d157      	bne.n	80055d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e242      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005534:	d106      	bne.n	8005544 <HAL_RCC_OscConfig+0x74>
 8005536:	4b76      	ldr	r3, [pc, #472]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a75      	ldr	r2, [pc, #468]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 800553c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	e01d      	b.n	8005580 <HAL_RCC_OscConfig+0xb0>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800554c:	d10c      	bne.n	8005568 <HAL_RCC_OscConfig+0x98>
 800554e:	4b70      	ldr	r3, [pc, #448]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a6f      	ldr	r2, [pc, #444]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 8005554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	4b6d      	ldr	r3, [pc, #436]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a6c      	ldr	r2, [pc, #432]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 8005560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	e00b      	b.n	8005580 <HAL_RCC_OscConfig+0xb0>
 8005568:	4b69      	ldr	r3, [pc, #420]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a68      	ldr	r2, [pc, #416]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 800556e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	4b66      	ldr	r3, [pc, #408]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a65      	ldr	r2, [pc, #404]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 800557a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800557e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d013      	beq.n	80055b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005588:	f7fe f960 	bl	800384c <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005590:	f7fe f95c 	bl	800384c <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b64      	cmp	r3, #100	; 0x64
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e207      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a2:	4b5b      	ldr	r3, [pc, #364]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0f0      	beq.n	8005590 <HAL_RCC_OscConfig+0xc0>
 80055ae:	e014      	b.n	80055da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b0:	f7fe f94c 	bl	800384c <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055b8:	f7fe f948 	bl	800384c <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b64      	cmp	r3, #100	; 0x64
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e1f3      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ca:	4b51      	ldr	r3, [pc, #324]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1f0      	bne.n	80055b8 <HAL_RCC_OscConfig+0xe8>
 80055d6:	e000      	b.n	80055da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d063      	beq.n	80056ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055e6:	4b4a      	ldr	r3, [pc, #296]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 030c 	and.w	r3, r3, #12
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00b      	beq.n	800560a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055f2:	4b47      	ldr	r3, [pc, #284]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d11c      	bne.n	8005638 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055fe:	4b44      	ldr	r3, [pc, #272]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d116      	bne.n	8005638 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800560a:	4b41      	ldr	r3, [pc, #260]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d005      	beq.n	8005622 <HAL_RCC_OscConfig+0x152>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d001      	beq.n	8005622 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e1c7      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005622:	4b3b      	ldr	r3, [pc, #236]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	4937      	ldr	r1, [pc, #220]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 8005632:	4313      	orrs	r3, r2
 8005634:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005636:	e03a      	b.n	80056ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d020      	beq.n	8005682 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005640:	4b34      	ldr	r3, [pc, #208]	; (8005714 <HAL_RCC_OscConfig+0x244>)
 8005642:	2201      	movs	r2, #1
 8005644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005646:	f7fe f901 	bl	800384c <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800564e:	f7fe f8fd 	bl	800384c <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e1a8      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005660:	4b2b      	ldr	r3, [pc, #172]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800566c:	4b28      	ldr	r3, [pc, #160]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	4925      	ldr	r1, [pc, #148]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 800567c:	4313      	orrs	r3, r2
 800567e:	600b      	str	r3, [r1, #0]
 8005680:	e015      	b.n	80056ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005682:	4b24      	ldr	r3, [pc, #144]	; (8005714 <HAL_RCC_OscConfig+0x244>)
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7fe f8e0 	bl	800384c <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005690:	f7fe f8dc 	bl	800384c <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e187      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056a2:	4b1b      	ldr	r3, [pc, #108]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f0      	bne.n	8005690 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d036      	beq.n	8005728 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d016      	beq.n	80056f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056c2:	4b15      	ldr	r3, [pc, #84]	; (8005718 <HAL_RCC_OscConfig+0x248>)
 80056c4:	2201      	movs	r2, #1
 80056c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c8:	f7fe f8c0 	bl	800384c <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056d0:	f7fe f8bc 	bl	800384c <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e167      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056e2:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <HAL_RCC_OscConfig+0x240>)
 80056e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0f0      	beq.n	80056d0 <HAL_RCC_OscConfig+0x200>
 80056ee:	e01b      	b.n	8005728 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056f0:	4b09      	ldr	r3, [pc, #36]	; (8005718 <HAL_RCC_OscConfig+0x248>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f6:	f7fe f8a9 	bl	800384c <HAL_GetTick>
 80056fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056fc:	e00e      	b.n	800571c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056fe:	f7fe f8a5 	bl	800384c <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d907      	bls.n	800571c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e150      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
 8005710:	40023800 	.word	0x40023800
 8005714:	42470000 	.word	0x42470000
 8005718:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800571c:	4b88      	ldr	r3, [pc, #544]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 800571e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1ea      	bne.n	80056fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8097 	beq.w	8005864 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005736:	2300      	movs	r3, #0
 8005738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800573a:	4b81      	ldr	r3, [pc, #516]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10f      	bne.n	8005766 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005746:	2300      	movs	r3, #0
 8005748:	60bb      	str	r3, [r7, #8]
 800574a:	4b7d      	ldr	r3, [pc, #500]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	4a7c      	ldr	r2, [pc, #496]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 8005750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005754:	6413      	str	r3, [r2, #64]	; 0x40
 8005756:	4b7a      	ldr	r3, [pc, #488]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800575e:	60bb      	str	r3, [r7, #8]
 8005760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005762:	2301      	movs	r3, #1
 8005764:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005766:	4b77      	ldr	r3, [pc, #476]	; (8005944 <HAL_RCC_OscConfig+0x474>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576e:	2b00      	cmp	r3, #0
 8005770:	d118      	bne.n	80057a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005772:	4b74      	ldr	r3, [pc, #464]	; (8005944 <HAL_RCC_OscConfig+0x474>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a73      	ldr	r2, [pc, #460]	; (8005944 <HAL_RCC_OscConfig+0x474>)
 8005778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800577c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800577e:	f7fe f865 	bl	800384c <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005786:	f7fe f861 	bl	800384c <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e10c      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005798:	4b6a      	ldr	r3, [pc, #424]	; (8005944 <HAL_RCC_OscConfig+0x474>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0f0      	beq.n	8005786 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d106      	bne.n	80057ba <HAL_RCC_OscConfig+0x2ea>
 80057ac:	4b64      	ldr	r3, [pc, #400]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 80057ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b0:	4a63      	ldr	r2, [pc, #396]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 80057b2:	f043 0301 	orr.w	r3, r3, #1
 80057b6:	6713      	str	r3, [r2, #112]	; 0x70
 80057b8:	e01c      	b.n	80057f4 <HAL_RCC_OscConfig+0x324>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	2b05      	cmp	r3, #5
 80057c0:	d10c      	bne.n	80057dc <HAL_RCC_OscConfig+0x30c>
 80057c2:	4b5f      	ldr	r3, [pc, #380]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 80057c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c6:	4a5e      	ldr	r2, [pc, #376]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 80057c8:	f043 0304 	orr.w	r3, r3, #4
 80057cc:	6713      	str	r3, [r2, #112]	; 0x70
 80057ce:	4b5c      	ldr	r3, [pc, #368]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 80057d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d2:	4a5b      	ldr	r2, [pc, #364]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 80057d4:	f043 0301 	orr.w	r3, r3, #1
 80057d8:	6713      	str	r3, [r2, #112]	; 0x70
 80057da:	e00b      	b.n	80057f4 <HAL_RCC_OscConfig+0x324>
 80057dc:	4b58      	ldr	r3, [pc, #352]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 80057de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e0:	4a57      	ldr	r2, [pc, #348]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 80057e2:	f023 0301 	bic.w	r3, r3, #1
 80057e6:	6713      	str	r3, [r2, #112]	; 0x70
 80057e8:	4b55      	ldr	r3, [pc, #340]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 80057ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ec:	4a54      	ldr	r2, [pc, #336]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 80057ee:	f023 0304 	bic.w	r3, r3, #4
 80057f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d015      	beq.n	8005828 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fc:	f7fe f826 	bl	800384c <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005802:	e00a      	b.n	800581a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005804:	f7fe f822 	bl	800384c <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005812:	4293      	cmp	r3, r2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e0cb      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800581a:	4b49      	ldr	r3, [pc, #292]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 800581c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0ee      	beq.n	8005804 <HAL_RCC_OscConfig+0x334>
 8005826:	e014      	b.n	8005852 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005828:	f7fe f810 	bl	800384c <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800582e:	e00a      	b.n	8005846 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005830:	f7fe f80c 	bl	800384c <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	f241 3288 	movw	r2, #5000	; 0x1388
 800583e:	4293      	cmp	r3, r2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e0b5      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005846:	4b3e      	ldr	r3, [pc, #248]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 8005848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1ee      	bne.n	8005830 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005852:	7dfb      	ldrb	r3, [r7, #23]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d105      	bne.n	8005864 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005858:	4b39      	ldr	r3, [pc, #228]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 800585a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585c:	4a38      	ldr	r2, [pc, #224]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 800585e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005862:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 80a1 	beq.w	80059b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800586e:	4b34      	ldr	r3, [pc, #208]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 030c 	and.w	r3, r3, #12
 8005876:	2b08      	cmp	r3, #8
 8005878:	d05c      	beq.n	8005934 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d141      	bne.n	8005906 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005882:	4b31      	ldr	r3, [pc, #196]	; (8005948 <HAL_RCC_OscConfig+0x478>)
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005888:	f7fd ffe0 	bl	800384c <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005890:	f7fd ffdc 	bl	800384c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e087      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a2:	4b27      	ldr	r3, [pc, #156]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69da      	ldr	r2, [r3, #28]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	019b      	lsls	r3, r3, #6
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	085b      	lsrs	r3, r3, #1
 80058c6:	3b01      	subs	r3, #1
 80058c8:	041b      	lsls	r3, r3, #16
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	061b      	lsls	r3, r3, #24
 80058d2:	491b      	ldr	r1, [pc, #108]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058d8:	4b1b      	ldr	r3, [pc, #108]	; (8005948 <HAL_RCC_OscConfig+0x478>)
 80058da:	2201      	movs	r2, #1
 80058dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058de:	f7fd ffb5 	bl	800384c <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058e6:	f7fd ffb1 	bl	800384c <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e05c      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f8:	4b11      	ldr	r3, [pc, #68]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0f0      	beq.n	80058e6 <HAL_RCC_OscConfig+0x416>
 8005904:	e054      	b.n	80059b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005906:	4b10      	ldr	r3, [pc, #64]	; (8005948 <HAL_RCC_OscConfig+0x478>)
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800590c:	f7fd ff9e 	bl	800384c <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005914:	f7fd ff9a 	bl	800384c <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e045      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005926:	4b06      	ldr	r3, [pc, #24]	; (8005940 <HAL_RCC_OscConfig+0x470>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1f0      	bne.n	8005914 <HAL_RCC_OscConfig+0x444>
 8005932:	e03d      	b.n	80059b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d107      	bne.n	800594c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e038      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
 8005940:	40023800 	.word	0x40023800
 8005944:	40007000 	.word	0x40007000
 8005948:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800594c:	4b1b      	ldr	r3, [pc, #108]	; (80059bc <HAL_RCC_OscConfig+0x4ec>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d028      	beq.n	80059ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005964:	429a      	cmp	r2, r3
 8005966:	d121      	bne.n	80059ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005972:	429a      	cmp	r2, r3
 8005974:	d11a      	bne.n	80059ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800597c:	4013      	ands	r3, r2
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005982:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005984:	4293      	cmp	r3, r2
 8005986:	d111      	bne.n	80059ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005992:	085b      	lsrs	r3, r3, #1
 8005994:	3b01      	subs	r3, #1
 8005996:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005998:	429a      	cmp	r2, r3
 800599a:	d107      	bne.n	80059ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d001      	beq.n	80059b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40023800 	.word	0x40023800

080059c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e0cc      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059d4:	4b68      	ldr	r3, [pc, #416]	; (8005b78 <HAL_RCC_ClockConfig+0x1b8>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d90c      	bls.n	80059fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059e2:	4b65      	ldr	r3, [pc, #404]	; (8005b78 <HAL_RCC_ClockConfig+0x1b8>)
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ea:	4b63      	ldr	r3, [pc, #396]	; (8005b78 <HAL_RCC_ClockConfig+0x1b8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d001      	beq.n	80059fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e0b8      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d020      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a14:	4b59      	ldr	r3, [pc, #356]	; (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	4a58      	ldr	r2, [pc, #352]	; (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a2c:	4b53      	ldr	r3, [pc, #332]	; (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	4a52      	ldr	r2, [pc, #328]	; (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a38:	4b50      	ldr	r3, [pc, #320]	; (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	494d      	ldr	r1, [pc, #308]	; (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d044      	beq.n	8005ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d107      	bne.n	8005a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a5e:	4b47      	ldr	r3, [pc, #284]	; (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d119      	bne.n	8005a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e07f      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d003      	beq.n	8005a7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d107      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a7e:	4b3f      	ldr	r3, [pc, #252]	; (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d109      	bne.n	8005a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e06f      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a8e:	4b3b      	ldr	r3, [pc, #236]	; (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e067      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a9e:	4b37      	ldr	r3, [pc, #220]	; (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f023 0203 	bic.w	r2, r3, #3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	4934      	ldr	r1, [pc, #208]	; (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ab0:	f7fd fecc 	bl	800384c <HAL_GetTick>
 8005ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab6:	e00a      	b.n	8005ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab8:	f7fd fec8 	bl	800384c <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e04f      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ace:	4b2b      	ldr	r3, [pc, #172]	; (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f003 020c 	and.w	r2, r3, #12
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d1eb      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ae0:	4b25      	ldr	r3, [pc, #148]	; (8005b78 <HAL_RCC_ClockConfig+0x1b8>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0307 	and.w	r3, r3, #7
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d20c      	bcs.n	8005b08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aee:	4b22      	ldr	r3, [pc, #136]	; (8005b78 <HAL_RCC_ClockConfig+0x1b8>)
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005af6:	4b20      	ldr	r3, [pc, #128]	; (8005b78 <HAL_RCC_ClockConfig+0x1b8>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d001      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e032      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b14:	4b19      	ldr	r3, [pc, #100]	; (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	4916      	ldr	r1, [pc, #88]	; (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d009      	beq.n	8005b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b32:	4b12      	ldr	r3, [pc, #72]	; (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	490e      	ldr	r1, [pc, #56]	; (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b46:	f000 f821 	bl	8005b8c <HAL_RCC_GetSysClockFreq>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	091b      	lsrs	r3, r3, #4
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	490a      	ldr	r1, [pc, #40]	; (8005b80 <HAL_RCC_ClockConfig+0x1c0>)
 8005b58:	5ccb      	ldrb	r3, [r1, r3]
 8005b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5e:	4a09      	ldr	r2, [pc, #36]	; (8005b84 <HAL_RCC_ClockConfig+0x1c4>)
 8005b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b62:	4b09      	ldr	r3, [pc, #36]	; (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fd fd44 	bl	80035f4 <HAL_InitTick>

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40023c00 	.word	0x40023c00
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	080099a4 	.word	0x080099a4
 8005b84:	20000090 	.word	0x20000090
 8005b88:	20000094 	.word	0x20000094

08005b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b90:	b094      	sub	sp, #80	; 0x50
 8005b92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	647b      	str	r3, [r7, #68]	; 0x44
 8005b98:	2300      	movs	r3, #0
 8005b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ba4:	4b79      	ldr	r3, [pc, #484]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 030c 	and.w	r3, r3, #12
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d00d      	beq.n	8005bcc <HAL_RCC_GetSysClockFreq+0x40>
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	f200 80e1 	bhi.w	8005d78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d003      	beq.n	8005bc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005bbe:	e0db      	b.n	8005d78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bc0:	4b73      	ldr	r3, [pc, #460]	; (8005d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bc2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005bc4:	e0db      	b.n	8005d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bc6:	4b73      	ldr	r3, [pc, #460]	; (8005d94 <HAL_RCC_GetSysClockFreq+0x208>)
 8005bc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bca:	e0d8      	b.n	8005d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bcc:	4b6f      	ldr	r3, [pc, #444]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bd4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bd6:	4b6d      	ldr	r3, [pc, #436]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d063      	beq.n	8005caa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005be2:	4b6a      	ldr	r3, [pc, #424]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	099b      	lsrs	r3, r3, #6
 8005be8:	2200      	movs	r2, #0
 8005bea:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8005bfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005bfe:	4622      	mov	r2, r4
 8005c00:	462b      	mov	r3, r5
 8005c02:	f04f 0000 	mov.w	r0, #0
 8005c06:	f04f 0100 	mov.w	r1, #0
 8005c0a:	0159      	lsls	r1, r3, #5
 8005c0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c10:	0150      	lsls	r0, r2, #5
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	4621      	mov	r1, r4
 8005c18:	1a51      	subs	r1, r2, r1
 8005c1a:	6139      	str	r1, [r7, #16]
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	eb63 0301 	sbc.w	r3, r3, r1
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c30:	4659      	mov	r1, fp
 8005c32:	018b      	lsls	r3, r1, #6
 8005c34:	4651      	mov	r1, sl
 8005c36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c3a:	4651      	mov	r1, sl
 8005c3c:	018a      	lsls	r2, r1, #6
 8005c3e:	4651      	mov	r1, sl
 8005c40:	ebb2 0801 	subs.w	r8, r2, r1
 8005c44:	4659      	mov	r1, fp
 8005c46:	eb63 0901 	sbc.w	r9, r3, r1
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	f04f 0300 	mov.w	r3, #0
 8005c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c5e:	4690      	mov	r8, r2
 8005c60:	4699      	mov	r9, r3
 8005c62:	4623      	mov	r3, r4
 8005c64:	eb18 0303 	adds.w	r3, r8, r3
 8005c68:	60bb      	str	r3, [r7, #8]
 8005c6a:	462b      	mov	r3, r5
 8005c6c:	eb49 0303 	adc.w	r3, r9, r3
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	f04f 0300 	mov.w	r3, #0
 8005c7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c7e:	4629      	mov	r1, r5
 8005c80:	024b      	lsls	r3, r1, #9
 8005c82:	4621      	mov	r1, r4
 8005c84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c88:	4621      	mov	r1, r4
 8005c8a:	024a      	lsls	r2, r1, #9
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c92:	2200      	movs	r2, #0
 8005c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c9c:	f7fa ff84 	bl	8000ba8 <__aeabi_uldivmod>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca8:	e058      	b.n	8005d5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005caa:	4b38      	ldr	r3, [pc, #224]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	099b      	lsrs	r3, r3, #6
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005cba:	623b      	str	r3, [r7, #32]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005cc4:	4642      	mov	r2, r8
 8005cc6:	464b      	mov	r3, r9
 8005cc8:	f04f 0000 	mov.w	r0, #0
 8005ccc:	f04f 0100 	mov.w	r1, #0
 8005cd0:	0159      	lsls	r1, r3, #5
 8005cd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cd6:	0150      	lsls	r0, r2, #5
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4641      	mov	r1, r8
 8005cde:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ce2:	4649      	mov	r1, r9
 8005ce4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ce8:	f04f 0200 	mov.w	r2, #0
 8005cec:	f04f 0300 	mov.w	r3, #0
 8005cf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005cf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005cf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005cfc:	ebb2 040a 	subs.w	r4, r2, sl
 8005d00:	eb63 050b 	sbc.w	r5, r3, fp
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	f04f 0300 	mov.w	r3, #0
 8005d0c:	00eb      	lsls	r3, r5, #3
 8005d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d12:	00e2      	lsls	r2, r4, #3
 8005d14:	4614      	mov	r4, r2
 8005d16:	461d      	mov	r5, r3
 8005d18:	4643      	mov	r3, r8
 8005d1a:	18e3      	adds	r3, r4, r3
 8005d1c:	603b      	str	r3, [r7, #0]
 8005d1e:	464b      	mov	r3, r9
 8005d20:	eb45 0303 	adc.w	r3, r5, r3
 8005d24:	607b      	str	r3, [r7, #4]
 8005d26:	f04f 0200 	mov.w	r2, #0
 8005d2a:	f04f 0300 	mov.w	r3, #0
 8005d2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d32:	4629      	mov	r1, r5
 8005d34:	028b      	lsls	r3, r1, #10
 8005d36:	4621      	mov	r1, r4
 8005d38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	028a      	lsls	r2, r1, #10
 8005d40:	4610      	mov	r0, r2
 8005d42:	4619      	mov	r1, r3
 8005d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d46:	2200      	movs	r2, #0
 8005d48:	61bb      	str	r3, [r7, #24]
 8005d4a:	61fa      	str	r2, [r7, #28]
 8005d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d50:	f7fa ff2a 	bl	8000ba8 <__aeabi_uldivmod>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4613      	mov	r3, r2
 8005d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d5c:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	0c1b      	lsrs	r3, r3, #16
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	3301      	adds	r3, #1
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005d6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d76:	e002      	b.n	8005d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d78:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3750      	adds	r7, #80	; 0x50
 8005d84:	46bd      	mov	sp, r7
 8005d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	00f42400 	.word	0x00f42400
 8005d94:	007a1200 	.word	0x007a1200

08005d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d9c:	4b03      	ldr	r3, [pc, #12]	; (8005dac <HAL_RCC_GetHCLKFreq+0x14>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	20000090 	.word	0x20000090

08005db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005db4:	f7ff fff0 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 8005db8:	4602      	mov	r2, r0
 8005dba:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	0a9b      	lsrs	r3, r3, #10
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	4903      	ldr	r1, [pc, #12]	; (8005dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dc6:	5ccb      	ldrb	r3, [r1, r3]
 8005dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40023800 	.word	0x40023800
 8005dd4:	080099b4 	.word	0x080099b4

08005dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ddc:	f7ff ffdc 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 8005de0:	4602      	mov	r2, r0
 8005de2:	4b05      	ldr	r3, [pc, #20]	; (8005df8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	0b5b      	lsrs	r3, r3, #13
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	4903      	ldr	r1, [pc, #12]	; (8005dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dee:	5ccb      	ldrb	r3, [r1, r3]
 8005df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	080099b4 	.word	0x080099b4

08005e00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	220f      	movs	r2, #15
 8005e0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e10:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <HAL_RCC_GetClockConfig+0x5c>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f003 0203 	and.w	r2, r3, #3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e1c:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <HAL_RCC_GetClockConfig+0x5c>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e28:	4b0c      	ldr	r3, [pc, #48]	; (8005e5c <HAL_RCC_GetClockConfig+0x5c>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e34:	4b09      	ldr	r3, [pc, #36]	; (8005e5c <HAL_RCC_GetClockConfig+0x5c>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	08db      	lsrs	r3, r3, #3
 8005e3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e42:	4b07      	ldr	r3, [pc, #28]	; (8005e60 <HAL_RCC_GetClockConfig+0x60>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0207 	and.w	r2, r3, #7
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	601a      	str	r2, [r3, #0]
}
 8005e4e:	bf00      	nop
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	40023800 	.word	0x40023800
 8005e60:	40023c00 	.word	0x40023c00

08005e64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e07b      	b.n	8005f6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d108      	bne.n	8005e90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e86:	d009      	beq.n	8005e9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	61da      	str	r2, [r3, #28]
 8005e8e:	e005      	b.n	8005e9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d106      	bne.n	8005ebc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7fd fa34 	bl	8003324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f20:	ea42 0103 	orr.w	r1, r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	0c1b      	lsrs	r3, r3, #16
 8005f3a:	f003 0104 	and.w	r1, r3, #4
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	f003 0210 	and.w	r2, r3, #16
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69da      	ldr	r2, [r3, #28]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b088      	sub	sp, #32
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	603b      	str	r3, [r7, #0]
 8005f82:	4613      	mov	r3, r2
 8005f84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d101      	bne.n	8005f98 <HAL_SPI_Transmit+0x22>
 8005f94:	2302      	movs	r3, #2
 8005f96:	e12d      	b.n	80061f4 <HAL_SPI_Transmit+0x27e>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fa0:	f7fd fc54 	bl	800384c <HAL_GetTick>
 8005fa4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d002      	beq.n	8005fbc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fba:	e116      	b.n	80061ea <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <HAL_SPI_Transmit+0x52>
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d102      	bne.n	8005fce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fcc:	e10d      	b.n	80061ea <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2203      	movs	r2, #3
 8005fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	88fa      	ldrh	r2, [r7, #6]
 8005fe6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	88fa      	ldrh	r2, [r7, #6]
 8005fec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006014:	d10f      	bne.n	8006036 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006024:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006034:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006040:	2b40      	cmp	r3, #64	; 0x40
 8006042:	d007      	beq.n	8006054 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006052:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800605c:	d14f      	bne.n	80060fe <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <HAL_SPI_Transmit+0xf6>
 8006066:	8afb      	ldrh	r3, [r7, #22]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d142      	bne.n	80060f2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006070:	881a      	ldrh	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	1c9a      	adds	r2, r3, #2
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006086:	b29b      	uxth	r3, r3
 8006088:	3b01      	subs	r3, #1
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006090:	e02f      	b.n	80060f2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b02      	cmp	r3, #2
 800609e:	d112      	bne.n	80060c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a4:	881a      	ldrh	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	1c9a      	adds	r2, r3, #2
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80060c4:	e015      	b.n	80060f2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060c6:	f7fd fbc1 	bl	800384c <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d803      	bhi.n	80060de <HAL_SPI_Transmit+0x168>
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060dc:	d102      	bne.n	80060e4 <HAL_SPI_Transmit+0x16e>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d106      	bne.n	80060f2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80060f0:	e07b      	b.n	80061ea <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1ca      	bne.n	8006092 <HAL_SPI_Transmit+0x11c>
 80060fc:	e050      	b.n	80061a0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <HAL_SPI_Transmit+0x196>
 8006106:	8afb      	ldrh	r3, [r7, #22]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d144      	bne.n	8006196 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	330c      	adds	r3, #12
 8006116:	7812      	ldrb	r2, [r2, #0]
 8006118:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006128:	b29b      	uxth	r3, r3
 800612a:	3b01      	subs	r3, #1
 800612c:	b29a      	uxth	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006132:	e030      	b.n	8006196 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b02      	cmp	r3, #2
 8006140:	d113      	bne.n	800616a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	330c      	adds	r3, #12
 800614c:	7812      	ldrb	r2, [r2, #0]
 800614e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800615e:	b29b      	uxth	r3, r3
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	86da      	strh	r2, [r3, #54]	; 0x36
 8006168:	e015      	b.n	8006196 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800616a:	f7fd fb6f 	bl	800384c <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	429a      	cmp	r2, r3
 8006178:	d803      	bhi.n	8006182 <HAL_SPI_Transmit+0x20c>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006180:	d102      	bne.n	8006188 <HAL_SPI_Transmit+0x212>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d106      	bne.n	8006196 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006194:	e029      	b.n	80061ea <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1c9      	bne.n	8006134 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	6839      	ldr	r1, [r7, #0]
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f001 f8d7 	bl	8007358 <SPI_EndRxTxTransaction>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2220      	movs	r2, #32
 80061b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10a      	bne.n	80061d4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061be:	2300      	movs	r3, #0
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	77fb      	strb	r3, [r7, #31]
 80061e0:	e003      	b.n	80061ea <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3720      	adds	r7, #32
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b088      	sub	sp, #32
 8006200:	af02      	add	r7, sp, #8
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	603b      	str	r3, [r7, #0]
 8006208:	4613      	mov	r3, r2
 800620a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b01      	cmp	r3, #1
 800621a:	d002      	beq.n	8006222 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800621c:	2302      	movs	r3, #2
 800621e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006220:	e0fb      	b.n	800641a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800622a:	d112      	bne.n	8006252 <HAL_SPI_Receive+0x56>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10e      	bne.n	8006252 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2204      	movs	r2, #4
 8006238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800623c:	88fa      	ldrh	r2, [r7, #6]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	4613      	mov	r3, r2
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	68b9      	ldr	r1, [r7, #8]
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 f8ef 	bl	800642c <HAL_SPI_TransmitReceive>
 800624e:	4603      	mov	r3, r0
 8006250:	e0e8      	b.n	8006424 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_SPI_Receive+0x64>
 800625c:	2302      	movs	r3, #2
 800625e:	e0e1      	b.n	8006424 <HAL_SPI_Receive+0x228>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006268:	f7fd faf0 	bl	800384c <HAL_GetTick>
 800626c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <HAL_SPI_Receive+0x7e>
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800627e:	e0cc      	b.n	800641a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2204      	movs	r2, #4
 8006284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	88fa      	ldrh	r2, [r7, #6]
 8006298:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	88fa      	ldrh	r2, [r7, #6]
 800629e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c6:	d10f      	bne.n	80062e8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062e6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f2:	2b40      	cmp	r3, #64	; 0x40
 80062f4:	d007      	beq.n	8006306 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006304:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d16a      	bne.n	80063e4 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800630e:	e032      	b.n	8006376 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b01      	cmp	r3, #1
 800631c:	d115      	bne.n	800634a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f103 020c 	add.w	r2, r3, #12
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632a:	7812      	ldrb	r2, [r2, #0]
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006348:	e015      	b.n	8006376 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800634a:	f7fd fa7f 	bl	800384c <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	429a      	cmp	r2, r3
 8006358:	d803      	bhi.n	8006362 <HAL_SPI_Receive+0x166>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006360:	d102      	bne.n	8006368 <HAL_SPI_Receive+0x16c>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d106      	bne.n	8006376 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006374:	e051      	b.n	800641a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1c7      	bne.n	8006310 <HAL_SPI_Receive+0x114>
 8006380:	e035      	b.n	80063ee <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b01      	cmp	r3, #1
 800638e:	d113      	bne.n	80063b8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	b292      	uxth	r2, r2
 800639c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	1c9a      	adds	r2, r3, #2
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063b6:	e015      	b.n	80063e4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063b8:	f7fd fa48 	bl	800384c <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d803      	bhi.n	80063d0 <HAL_SPI_Receive+0x1d4>
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ce:	d102      	bne.n	80063d6 <HAL_SPI_Receive+0x1da>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80063e2:	e01a      	b.n	800641a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1c9      	bne.n	8006382 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 ff4a 	bl	800728c <SPI_EndRxTransaction>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2220      	movs	r2, #32
 8006402:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	75fb      	strb	r3, [r7, #23]
 8006410:	e003      	b.n	800641a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006422:	7dfb      	ldrb	r3, [r7, #23]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b08c      	sub	sp, #48	; 0x30
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800643a:	2301      	movs	r3, #1
 800643c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800644a:	2b01      	cmp	r3, #1
 800644c:	d101      	bne.n	8006452 <HAL_SPI_TransmitReceive+0x26>
 800644e:	2302      	movs	r3, #2
 8006450:	e198      	b.n	8006784 <HAL_SPI_TransmitReceive+0x358>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800645a:	f7fd f9f7 	bl	800384c <HAL_GetTick>
 800645e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006470:	887b      	ldrh	r3, [r7, #2]
 8006472:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006474:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006478:	2b01      	cmp	r3, #1
 800647a:	d00f      	beq.n	800649c <HAL_SPI_TransmitReceive+0x70>
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006482:	d107      	bne.n	8006494 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d103      	bne.n	8006494 <HAL_SPI_TransmitReceive+0x68>
 800648c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006490:	2b04      	cmp	r3, #4
 8006492:	d003      	beq.n	800649c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006494:	2302      	movs	r3, #2
 8006496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800649a:	e16d      	b.n	8006778 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d005      	beq.n	80064ae <HAL_SPI_TransmitReceive+0x82>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <HAL_SPI_TransmitReceive+0x82>
 80064a8:	887b      	ldrh	r3, [r7, #2]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d103      	bne.n	80064b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80064b4:	e160      	b.n	8006778 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d003      	beq.n	80064ca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2205      	movs	r2, #5
 80064c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	887a      	ldrh	r2, [r7, #2]
 80064da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	887a      	ldrh	r2, [r7, #2]
 80064e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	887a      	ldrh	r2, [r7, #2]
 80064ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	887a      	ldrh	r2, [r7, #2]
 80064f2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650a:	2b40      	cmp	r3, #64	; 0x40
 800650c:	d007      	beq.n	800651e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800651c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006526:	d17c      	bne.n	8006622 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <HAL_SPI_TransmitReceive+0x10a>
 8006530:	8b7b      	ldrh	r3, [r7, #26]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d16a      	bne.n	800660c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653a:	881a      	ldrh	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006546:	1c9a      	adds	r2, r3, #2
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800655a:	e057      	b.n	800660c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b02      	cmp	r3, #2
 8006568:	d11b      	bne.n	80065a2 <HAL_SPI_TransmitReceive+0x176>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800656e:	b29b      	uxth	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d016      	beq.n	80065a2 <HAL_SPI_TransmitReceive+0x176>
 8006574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006576:	2b01      	cmp	r3, #1
 8006578:	d113      	bne.n	80065a2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657e:	881a      	ldrh	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658a:	1c9a      	adds	r2, r3, #2
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d119      	bne.n	80065e4 <HAL_SPI_TransmitReceive+0x1b8>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d014      	beq.n	80065e4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c4:	b292      	uxth	r2, r2
 80065c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	1c9a      	adds	r2, r3, #2
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	3b01      	subs	r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065e0:	2301      	movs	r3, #1
 80065e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065e4:	f7fd f932 	bl	800384c <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d80b      	bhi.n	800660c <HAL_SPI_TransmitReceive+0x1e0>
 80065f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fa:	d007      	beq.n	800660c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800660a:	e0b5      	b.n	8006778 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1a2      	bne.n	800655c <HAL_SPI_TransmitReceive+0x130>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800661a:	b29b      	uxth	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d19d      	bne.n	800655c <HAL_SPI_TransmitReceive+0x130>
 8006620:	e080      	b.n	8006724 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_SPI_TransmitReceive+0x204>
 800662a:	8b7b      	ldrh	r3, [r7, #26]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d16f      	bne.n	8006710 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	330c      	adds	r3, #12
 800663a:	7812      	ldrb	r2, [r2, #0]
 800663c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006656:	e05b      	b.n	8006710 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b02      	cmp	r3, #2
 8006664:	d11c      	bne.n	80066a0 <HAL_SPI_TransmitReceive+0x274>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d017      	beq.n	80066a0 <HAL_SPI_TransmitReceive+0x274>
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	2b01      	cmp	r3, #1
 8006674:	d114      	bne.n	80066a0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	330c      	adds	r3, #12
 8006680:	7812      	ldrb	r2, [r2, #0]
 8006682:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d119      	bne.n	80066e2 <HAL_SPI_TransmitReceive+0x2b6>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d014      	beq.n	80066e2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066de:	2301      	movs	r3, #1
 80066e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066e2:	f7fd f8b3 	bl	800384c <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d803      	bhi.n	80066fa <HAL_SPI_TransmitReceive+0x2ce>
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f8:	d102      	bne.n	8006700 <HAL_SPI_TransmitReceive+0x2d4>
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d107      	bne.n	8006710 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800670e:	e033      	b.n	8006778 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006714:	b29b      	uxth	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d19e      	bne.n	8006658 <HAL_SPI_TransmitReceive+0x22c>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800671e:	b29b      	uxth	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d199      	bne.n	8006658 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006726:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 fe15 	bl	8007358 <SPI_EndRxTxTransaction>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d006      	beq.n	8006742 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2220      	movs	r2, #32
 800673e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006740:	e01a      	b.n	8006778 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10a      	bne.n	8006760 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800674a:	2300      	movs	r3, #0
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800676e:	e003      	b.n	8006778 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006780:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006784:	4618      	mov	r0, r3
 8006786:	3730      	adds	r7, #48	; 0x30
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	4613      	mov	r3, r2
 8006798:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_SPI_Transmit_DMA+0x20>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e097      	b.n	80068dc <HAL_SPI_Transmit_DMA+0x150>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d002      	beq.n	80067c6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80067c0:	2302      	movs	r3, #2
 80067c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067c4:	e085      	b.n	80068d2 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <HAL_SPI_Transmit_DMA+0x46>
 80067cc:	88fb      	ldrh	r3, [r7, #6]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d102      	bne.n	80067d8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067d6:	e07c      	b.n	80068d2 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2203      	movs	r2, #3
 80067dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	88fa      	ldrh	r2, [r7, #6]
 80067f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	88fa      	ldrh	r2, [r7, #6]
 80067f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800681e:	d10f      	bne.n	8006840 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800682e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800683e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006844:	4a27      	ldr	r2, [pc, #156]	; (80068e4 <HAL_SPI_Transmit_DMA+0x158>)
 8006846:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800684c:	4a26      	ldr	r2, [pc, #152]	; (80068e8 <HAL_SPI_Transmit_DMA+0x15c>)
 800684e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006854:	4a25      	ldr	r2, [pc, #148]	; (80068ec <HAL_SPI_Transmit_DMA+0x160>)
 8006856:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800685c:	2200      	movs	r2, #0
 800685e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	4619      	mov	r1, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	330c      	adds	r3, #12
 8006870:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006876:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006878:	f7fd f984 	bl	8003b84 <HAL_DMA_Start_IT>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d008      	beq.n	8006894 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006886:	f043 0210 	orr.w	r2, r3, #16
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006892:	e01e      	b.n	80068d2 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689e:	2b40      	cmp	r3, #64	; 0x40
 80068a0:	d007      	beq.n	80068b2 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068b0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f042 0220 	orr.w	r2, r2, #32
 80068c0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f042 0202 	orr.w	r2, r2, #2
 80068d0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068da:	7dfb      	ldrb	r3, [r7, #23]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	080070c1 	.word	0x080070c1
 80068e8:	08006ee1 	.word	0x08006ee1
 80068ec:	08007115 	.word	0x08007115

080068f0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	4613      	mov	r3, r2
 80068fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b01      	cmp	r3, #1
 800690c:	d002      	beq.n	8006914 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800690e:	2302      	movs	r3, #2
 8006910:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006912:	e0a2      	b.n	8006a5a <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d110      	bne.n	800693e <HAL_SPI_Receive_DMA+0x4e>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006924:	d10b      	bne.n	800693e <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2204      	movs	r2, #4
 800692a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800692e:	88fb      	ldrh	r3, [r7, #6]
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	68b9      	ldr	r1, [r7, #8]
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 f89f 	bl	8006a78 <HAL_SPI_TransmitReceive_DMA>
 800693a:	4603      	mov	r3, r0
 800693c:	e092      	b.n	8006a64 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006944:	2b01      	cmp	r3, #1
 8006946:	d101      	bne.n	800694c <HAL_SPI_Receive_DMA+0x5c>
 8006948:	2302      	movs	r3, #2
 800694a:	e08b      	b.n	8006a64 <HAL_SPI_Receive_DMA+0x174>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <HAL_SPI_Receive_DMA+0x70>
 800695a:	88fb      	ldrh	r3, [r7, #6]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d102      	bne.n	8006966 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006964:	e079      	b.n	8006a5a <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2204      	movs	r2, #4
 800696a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	88fa      	ldrh	r2, [r7, #6]
 800697e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	88fa      	ldrh	r2, [r7, #6]
 8006984:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a6:	d10f      	bne.n	80069c8 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069cc:	4a27      	ldr	r2, [pc, #156]	; (8006a6c <HAL_SPI_Receive_DMA+0x17c>)
 80069ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d4:	4a26      	ldr	r2, [pc, #152]	; (8006a70 <HAL_SPI_Receive_DMA+0x180>)
 80069d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069dc:	4a25      	ldr	r2, [pc, #148]	; (8006a74 <HAL_SPI_Receive_DMA+0x184>)
 80069de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e4:	2200      	movs	r2, #0
 80069e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	330c      	adds	r3, #12
 80069f2:	4619      	mov	r1, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006a00:	f7fd f8c0 	bl	8003b84 <HAL_DMA_Start_IT>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d008      	beq.n	8006a1c <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0e:	f043 0210 	orr.w	r2, r3, #16
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006a1a:	e01e      	b.n	8006a5a <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a26:	2b40      	cmp	r3, #64	; 0x40
 8006a28:	d007      	beq.n	8006a3a <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a38:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f042 0220 	orr.w	r2, r2, #32
 8006a48:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f042 0201 	orr.w	r2, r2, #1
 8006a58:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3718      	adds	r7, #24
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	080070dd 	.word	0x080070dd
 8006a70:	08006f89 	.word	0x08006f89
 8006a74:	08007115 	.word	0x08007115

08006a78 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
 8006a84:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d101      	bne.n	8006a98 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006a94:	2302      	movs	r3, #2
 8006a96:	e0db      	b.n	8006c50 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006aa6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006aae:	7dbb      	ldrb	r3, [r7, #22]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d00d      	beq.n	8006ad0 <HAL_SPI_TransmitReceive_DMA+0x58>
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aba:	d106      	bne.n	8006aca <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d102      	bne.n	8006aca <HAL_SPI_TransmitReceive_DMA+0x52>
 8006ac4:	7dbb      	ldrb	r3, [r7, #22]
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d002      	beq.n	8006ad0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006aca:	2302      	movs	r3, #2
 8006acc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ace:	e0ba      	b.n	8006c46 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d005      	beq.n	8006ae2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d002      	beq.n	8006ae2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006adc:	887b      	ldrh	r3, [r7, #2]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d102      	bne.n	8006ae8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ae6:	e0ae      	b.n	8006c46 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b04      	cmp	r3, #4
 8006af2:	d003      	beq.n	8006afc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2205      	movs	r2, #5
 8006af8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	887a      	ldrh	r2, [r7, #2]
 8006b0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	887a      	ldrh	r2, [r7, #2]
 8006b12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	887a      	ldrh	r2, [r7, #2]
 8006b1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	887a      	ldrh	r2, [r7, #2]
 8006b24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d108      	bne.n	8006b50 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b42:	4a45      	ldr	r2, [pc, #276]	; (8006c58 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8006b44:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4a:	4a44      	ldr	r2, [pc, #272]	; (8006c5c <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8006b4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8006b4e:	e007      	b.n	8006b60 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b54:	4a42      	ldr	r2, [pc, #264]	; (8006c60 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8006b56:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b5c:	4a41      	ldr	r2, [pc, #260]	; (8006c64 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8006b5e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b64:	4a40      	ldr	r2, [pc, #256]	; (8006c68 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8006b66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	330c      	adds	r3, #12
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b86:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006b88:	f7fc fffc 	bl	8003b84 <HAL_DMA_Start_IT>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d008      	beq.n	8006ba4 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b96:	f043 0210 	orr.w	r2, r3, #16
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006ba2:	e050      	b.n	8006c46 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 0201 	orr.w	r2, r2, #1
 8006bb2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb8:	2200      	movs	r2, #0
 8006bba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc8:	2200      	movs	r2, #0
 8006bca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bdc:	4619      	mov	r1, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	330c      	adds	r3, #12
 8006be4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006bec:	f7fc ffca 	bl	8003b84 <HAL_DMA_Start_IT>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d008      	beq.n	8006c08 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bfa:	f043 0210 	orr.w	r2, r3, #16
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006c06:	e01e      	b.n	8006c46 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c12:	2b40      	cmp	r3, #64	; 0x40
 8006c14:	d007      	beq.n	8006c26 <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c24:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f042 0220 	orr.w	r2, r2, #32
 8006c34:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f042 0202 	orr.w	r2, r2, #2
 8006c44:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	080070dd 	.word	0x080070dd
 8006c5c:	08006f89 	.word	0x08006f89
 8006c60:	080070f9 	.word	0x080070f9
 8006c64:	08007031 	.word	0x08007031
 8006c68:	08007115 	.word	0x08007115

08006c6c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10e      	bne.n	8006cac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d009      	beq.n	8006cac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d004      	beq.n	8006cac <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	4798      	blx	r3
    return;
 8006caa:	e0ce      	b.n	8006e4a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d009      	beq.n	8006cca <HAL_SPI_IRQHandler+0x5e>
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d004      	beq.n	8006cca <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	4798      	blx	r3
    return;
 8006cc8:	e0bf      	b.n	8006e4a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10a      	bne.n	8006cea <HAL_SPI_IRQHandler+0x7e>
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d105      	bne.n	8006cea <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 80b0 	beq.w	8006e4a <HAL_SPI_IRQHandler+0x1de>
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	f003 0320 	and.w	r3, r3, #32
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 80aa 	beq.w	8006e4a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d023      	beq.n	8006d48 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b03      	cmp	r3, #3
 8006d0a:	d011      	beq.n	8006d30 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d10:	f043 0204 	orr.w	r2, r3, #4
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d18:	2300      	movs	r3, #0
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	e00b      	b.n	8006d48 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d30:	2300      	movs	r3, #0
 8006d32:	613b      	str	r3, [r7, #16]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	613b      	str	r3, [r7, #16]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	613b      	str	r3, [r7, #16]
 8006d44:	693b      	ldr	r3, [r7, #16]
        return;
 8006d46:	e080      	b.n	8006e4a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d014      	beq.n	8006d7c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d56:	f043 0201 	orr.w	r2, r3, #1
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60fb      	str	r3, [r7, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	60fb      	str	r3, [r7, #12]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00c      	beq.n	8006da0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8a:	f043 0208 	orr.w	r2, r3, #8
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d92:	2300      	movs	r3, #0
 8006d94:	60bb      	str	r3, [r7, #8]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	60bb      	str	r3, [r7, #8]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d04f      	beq.n	8006e48 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006db6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d104      	bne.n	8006dd4 <HAL_SPI_IRQHandler+0x168>
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d034      	beq.n	8006e3e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0203 	bic.w	r2, r2, #3
 8006de2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d011      	beq.n	8006e10 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df0:	4a17      	ldr	r2, [pc, #92]	; (8006e50 <HAL_SPI_IRQHandler+0x1e4>)
 8006df2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fc ff1b 	bl	8003c34 <HAL_DMA_Abort_IT>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d005      	beq.n	8006e10 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d016      	beq.n	8006e46 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e1c:	4a0c      	ldr	r2, [pc, #48]	; (8006e50 <HAL_SPI_IRQHandler+0x1e4>)
 8006e1e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fc ff05 	bl	8003c34 <HAL_DMA_Abort_IT>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00a      	beq.n	8006e46 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006e3c:	e003      	b.n	8006e46 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f844 	bl	8006ecc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006e44:	e000      	b.n	8006e48 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006e46:	bf00      	nop
    return;
 8006e48:	bf00      	nop
  }
}
 8006e4a:	3720      	adds	r7, #32
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	08007155 	.word	0x08007155

08006e54 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006eee:	f7fc fcad 	bl	800384c <HAL_GetTick>
 8006ef2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f02:	d03b      	beq.n	8006f7c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0220 	bic.w	r2, r2, #32
 8006f12:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0202 	bic.w	r2, r2, #2
 8006f22:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	2164      	movs	r1, #100	; 0x64
 8006f28:	6978      	ldr	r0, [r7, #20]
 8006f2a:	f000 fa15 	bl	8007358 <SPI_EndRxTxTransaction>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f38:	f043 0220 	orr.w	r2, r3, #32
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2200      	movs	r2, #0
 8006f62:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006f74:	6978      	ldr	r0, [r7, #20]
 8006f76:	f7ff ffa9 	bl	8006ecc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006f7a:	e002      	b.n	8006f82 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006f7c:	6978      	ldr	r0, [r7, #20]
 8006f7e:	f7ff ff69 	bl	8006e54 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f94:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f96:	f7fc fc59 	bl	800384c <HAL_GetTick>
 8006f9a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006faa:	d03b      	beq.n	8007024 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0220 	bic.w	r2, r2, #32
 8006fba:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10d      	bne.n	8006fe0 <SPI_DMAReceiveCplt+0x58>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fcc:	d108      	bne.n	8006fe0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 0203 	bic.w	r2, r2, #3
 8006fdc:	605a      	str	r2, [r3, #4]
 8006fde:	e007      	b.n	8006ff0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685a      	ldr	r2, [r3, #4]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 0201 	bic.w	r2, r2, #1
 8006fee:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	2164      	movs	r1, #100	; 0x64
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 f949 	bl	800728c <SPI_EndRxTransaction>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2220      	movs	r2, #32
 8007004:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f7ff ff55 	bl	8006ecc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007022:	e002      	b.n	800702a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff ff1f 	bl	8006e68 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800703e:	f7fc fc05 	bl	800384c <HAL_GetTick>
 8007042:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007052:	d02f      	beq.n	80070b4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0220 	bic.w	r2, r2, #32
 8007062:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	2164      	movs	r1, #100	; 0x64
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f975 	bl	8007358 <SPI_EndRxTxTransaction>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d005      	beq.n	8007080 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007078:	f043 0220 	orr.w	r2, r3, #32
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0203 	bic.w	r2, r2, #3
 800708e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f7ff ff0d 	bl	8006ecc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80070b2:	e002      	b.n	80070ba <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f7ff fee1 	bl	8006e7c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f7ff fede 	bl	8006e90 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80070d4:	bf00      	nop
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f7ff feda 	bl	8006ea4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80070f0:	bf00      	nop
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007104:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f7ff fed6 	bl	8006eb8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800710c:	bf00      	nop
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007120:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 0203 	bic.w	r2, r2, #3
 8007130:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007136:	f043 0210 	orr.w	r2, r3, #16
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f7ff fec0 	bl	8006ecc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800714c:	bf00      	nop
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007160:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f7ff feac 	bl	8006ecc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007174:	bf00      	nop
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	603b      	str	r3, [r7, #0]
 8007188:	4613      	mov	r3, r2
 800718a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800718c:	f7fc fb5e 	bl	800384c <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	1a9b      	subs	r3, r3, r2
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	4413      	add	r3, r2
 800719a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800719c:	f7fc fb56 	bl	800384c <HAL_GetTick>
 80071a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071a2:	4b39      	ldr	r3, [pc, #228]	; (8007288 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	015b      	lsls	r3, r3, #5
 80071a8:	0d1b      	lsrs	r3, r3, #20
 80071aa:	69fa      	ldr	r2, [r7, #28]
 80071ac:	fb02 f303 	mul.w	r3, r2, r3
 80071b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071b2:	e054      	b.n	800725e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ba:	d050      	beq.n	800725e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071bc:	f7fc fb46 	bl	800384c <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	69fa      	ldr	r2, [r7, #28]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d902      	bls.n	80071d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d13d      	bne.n	800724e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071ea:	d111      	bne.n	8007210 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071f4:	d004      	beq.n	8007200 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071fe:	d107      	bne.n	8007210 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800720e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007218:	d10f      	bne.n	800723a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007238:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e017      	b.n	800727e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d101      	bne.n	8007258 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	3b01      	subs	r3, #1
 800725c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	689a      	ldr	r2, [r3, #8]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	4013      	ands	r3, r2
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	429a      	cmp	r2, r3
 800726c:	bf0c      	ite	eq
 800726e:	2301      	moveq	r3, #1
 8007270:	2300      	movne	r3, #0
 8007272:	b2db      	uxtb	r3, r3
 8007274:	461a      	mov	r2, r3
 8007276:	79fb      	ldrb	r3, [r7, #7]
 8007278:	429a      	cmp	r2, r3
 800727a:	d19b      	bne.n	80071b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3720      	adds	r7, #32
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20000090 	.word	0x20000090

0800728c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af02      	add	r7, sp, #8
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072a0:	d111      	bne.n	80072c6 <SPI_EndRxTransaction+0x3a>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072aa:	d004      	beq.n	80072b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072b4:	d107      	bne.n	80072c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072ce:	d12a      	bne.n	8007326 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072d8:	d012      	beq.n	8007300 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	2200      	movs	r2, #0
 80072e2:	2180      	movs	r1, #128	; 0x80
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f7ff ff49 	bl	800717c <SPI_WaitFlagStateUntilTimeout>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d02d      	beq.n	800734c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f4:	f043 0220 	orr.w	r2, r3, #32
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e026      	b.n	800734e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2200      	movs	r2, #0
 8007308:	2101      	movs	r1, #1
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f7ff ff36 	bl	800717c <SPI_WaitFlagStateUntilTimeout>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d01a      	beq.n	800734c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731a:	f043 0220 	orr.w	r2, r3, #32
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e013      	b.n	800734e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2200      	movs	r2, #0
 800732e:	2101      	movs	r1, #1
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f7ff ff23 	bl	800717c <SPI_WaitFlagStateUntilTimeout>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d007      	beq.n	800734c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007340:	f043 0220 	orr.w	r2, r3, #32
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e000      	b.n	800734e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af02      	add	r7, sp, #8
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2201      	movs	r2, #1
 800736c:	2102      	movs	r1, #2
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f7ff ff04 	bl	800717c <SPI_WaitFlagStateUntilTimeout>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d007      	beq.n	800738a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800737e:	f043 0220 	orr.w	r2, r3, #32
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e032      	b.n	80073f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800738a:	4b1b      	ldr	r3, [pc, #108]	; (80073f8 <SPI_EndRxTxTransaction+0xa0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a1b      	ldr	r2, [pc, #108]	; (80073fc <SPI_EndRxTxTransaction+0xa4>)
 8007390:	fba2 2303 	umull	r2, r3, r2, r3
 8007394:	0d5b      	lsrs	r3, r3, #21
 8007396:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800739a:	fb02 f303 	mul.w	r3, r2, r3
 800739e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073a8:	d112      	bne.n	80073d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	2200      	movs	r2, #0
 80073b2:	2180      	movs	r1, #128	; 0x80
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f7ff fee1 	bl	800717c <SPI_WaitFlagStateUntilTimeout>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d016      	beq.n	80073ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c4:	f043 0220 	orr.w	r2, r3, #32
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e00f      	b.n	80073f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	3b01      	subs	r3, #1
 80073da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e6:	2b80      	cmp	r3, #128	; 0x80
 80073e8:	d0f2      	beq.n	80073d0 <SPI_EndRxTxTransaction+0x78>
 80073ea:	e000      	b.n	80073ee <SPI_EndRxTxTransaction+0x96>
        break;
 80073ec:	bf00      	nop
  }

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	20000090 	.word	0x20000090
 80073fc:	165e9f81 	.word	0x165e9f81

08007400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e041      	b.n	8007496 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d106      	bne.n	800742c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f839 	bl	800749e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3304      	adds	r3, #4
 800743c:	4619      	mov	r1, r3
 800743e:	4610      	mov	r0, r2
 8007440:	f000 f9b2 	bl	80077a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800749e:	b480      	push	{r7}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80074a6:	bf00      	nop
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
	...

080074b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d001      	beq.n	80074cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e044      	b.n	8007556 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2202      	movs	r2, #2
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f042 0201 	orr.w	r2, r2, #1
 80074e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a1e      	ldr	r2, [pc, #120]	; (8007564 <HAL_TIM_Base_Start_IT+0xb0>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d018      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0x6c>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f6:	d013      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0x6c>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a1a      	ldr	r2, [pc, #104]	; (8007568 <HAL_TIM_Base_Start_IT+0xb4>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d00e      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0x6c>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a19      	ldr	r2, [pc, #100]	; (800756c <HAL_TIM_Base_Start_IT+0xb8>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d009      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0x6c>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a17      	ldr	r2, [pc, #92]	; (8007570 <HAL_TIM_Base_Start_IT+0xbc>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d004      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0x6c>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a16      	ldr	r2, [pc, #88]	; (8007574 <HAL_TIM_Base_Start_IT+0xc0>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d111      	bne.n	8007544 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f003 0307 	and.w	r3, r3, #7
 800752a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b06      	cmp	r3, #6
 8007530:	d010      	beq.n	8007554 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f042 0201 	orr.w	r2, r2, #1
 8007540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007542:	e007      	b.n	8007554 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0201 	orr.w	r2, r2, #1
 8007552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	40010000 	.word	0x40010000
 8007568:	40000400 	.word	0x40000400
 800756c:	40000800 	.word	0x40000800
 8007570:	40000c00 	.word	0x40000c00
 8007574:	40014000 	.word	0x40014000

08007578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b00      	cmp	r3, #0
 8007598:	d020      	beq.n	80075dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d01b      	beq.n	80075dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f06f 0202 	mvn.w	r2, #2
 80075ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f8d2 	bl	800776c <HAL_TIM_IC_CaptureCallback>
 80075c8:	e005      	b.n	80075d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f8c4 	bl	8007758 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f8d5 	bl	8007780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f003 0304 	and.w	r3, r3, #4
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d020      	beq.n	8007628 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f003 0304 	and.w	r3, r3, #4
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01b      	beq.n	8007628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f06f 0204 	mvn.w	r2, #4
 80075f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2202      	movs	r2, #2
 80075fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f8ac 	bl	800776c <HAL_TIM_IC_CaptureCallback>
 8007614:	e005      	b.n	8007622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f89e 	bl	8007758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f8af 	bl	8007780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f003 0308 	and.w	r3, r3, #8
 800762e:	2b00      	cmp	r3, #0
 8007630:	d020      	beq.n	8007674 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f003 0308 	and.w	r3, r3, #8
 8007638:	2b00      	cmp	r3, #0
 800763a:	d01b      	beq.n	8007674 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f06f 0208 	mvn.w	r2, #8
 8007644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2204      	movs	r2, #4
 800764a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f886 	bl	800776c <HAL_TIM_IC_CaptureCallback>
 8007660:	e005      	b.n	800766e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f878 	bl	8007758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f889 	bl	8007780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f003 0310 	and.w	r3, r3, #16
 800767a:	2b00      	cmp	r3, #0
 800767c:	d020      	beq.n	80076c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f003 0310 	and.w	r3, r3, #16
 8007684:	2b00      	cmp	r3, #0
 8007686:	d01b      	beq.n	80076c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f06f 0210 	mvn.w	r2, #16
 8007690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2208      	movs	r2, #8
 8007696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f860 	bl	800776c <HAL_TIM_IC_CaptureCallback>
 80076ac:	e005      	b.n	80076ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f852 	bl	8007758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f863 	bl	8007780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00c      	beq.n	80076e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d007      	beq.n	80076e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f06f 0201 	mvn.w	r2, #1
 80076dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7fb fd9c 	bl	800321c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00c      	beq.n	8007708 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d007      	beq.n	8007708 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f8e6 	bl	80078d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00c      	beq.n	800772c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007718:	2b00      	cmp	r3, #0
 800771a:	d007      	beq.n	800772c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f834 	bl	8007794 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	f003 0320 	and.w	r3, r3, #32
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00c      	beq.n	8007750 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f003 0320 	and.w	r3, r3, #32
 800773c:	2b00      	cmp	r3, #0
 800773e:	d007      	beq.n	8007750 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f06f 0220 	mvn.w	r2, #32
 8007748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f8b8 	bl	80078c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007750:	bf00      	nop
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a3a      	ldr	r2, [pc, #232]	; (80078a4 <TIM_Base_SetConfig+0xfc>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d00f      	beq.n	80077e0 <TIM_Base_SetConfig+0x38>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c6:	d00b      	beq.n	80077e0 <TIM_Base_SetConfig+0x38>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a37      	ldr	r2, [pc, #220]	; (80078a8 <TIM_Base_SetConfig+0x100>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d007      	beq.n	80077e0 <TIM_Base_SetConfig+0x38>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a36      	ldr	r2, [pc, #216]	; (80078ac <TIM_Base_SetConfig+0x104>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d003      	beq.n	80077e0 <TIM_Base_SetConfig+0x38>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a35      	ldr	r2, [pc, #212]	; (80078b0 <TIM_Base_SetConfig+0x108>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d108      	bne.n	80077f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a2b      	ldr	r2, [pc, #172]	; (80078a4 <TIM_Base_SetConfig+0xfc>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d01b      	beq.n	8007832 <TIM_Base_SetConfig+0x8a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007800:	d017      	beq.n	8007832 <TIM_Base_SetConfig+0x8a>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a28      	ldr	r2, [pc, #160]	; (80078a8 <TIM_Base_SetConfig+0x100>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d013      	beq.n	8007832 <TIM_Base_SetConfig+0x8a>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a27      	ldr	r2, [pc, #156]	; (80078ac <TIM_Base_SetConfig+0x104>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00f      	beq.n	8007832 <TIM_Base_SetConfig+0x8a>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a26      	ldr	r2, [pc, #152]	; (80078b0 <TIM_Base_SetConfig+0x108>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d00b      	beq.n	8007832 <TIM_Base_SetConfig+0x8a>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a25      	ldr	r2, [pc, #148]	; (80078b4 <TIM_Base_SetConfig+0x10c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d007      	beq.n	8007832 <TIM_Base_SetConfig+0x8a>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a24      	ldr	r2, [pc, #144]	; (80078b8 <TIM_Base_SetConfig+0x110>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d003      	beq.n	8007832 <TIM_Base_SetConfig+0x8a>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a23      	ldr	r2, [pc, #140]	; (80078bc <TIM_Base_SetConfig+0x114>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d108      	bne.n	8007844 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	4313      	orrs	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a0e      	ldr	r2, [pc, #56]	; (80078a4 <TIM_Base_SetConfig+0xfc>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d103      	bne.n	8007878 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	691a      	ldr	r2, [r3, #16]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	2b01      	cmp	r3, #1
 8007888:	d105      	bne.n	8007896 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	f023 0201 	bic.w	r2, r3, #1
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	611a      	str	r2, [r3, #16]
  }
}
 8007896:	bf00      	nop
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	40010000 	.word	0x40010000
 80078a8:	40000400 	.word	0x40000400
 80078ac:	40000800 	.word	0x40000800
 80078b0:	40000c00 	.word	0x40000c00
 80078b4:	40014000 	.word	0x40014000
 80078b8:	40014400 	.word	0x40014400
 80078bc:	40014800 	.word	0x40014800

080078c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	4603      	mov	r3, r0
 80078f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80078f2:	2300      	movs	r3, #0
 80078f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80078f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078fa:	2b84      	cmp	r3, #132	; 0x84
 80078fc:	d005      	beq.n	800790a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80078fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4413      	add	r3, r2
 8007906:	3303      	adds	r3, #3
 8007908:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800790a:	68fb      	ldr	r3, [r7, #12]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800791c:	f000 fade 	bl	8007edc <vTaskStartScheduler>
  
  return osOK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	bd80      	pop	{r7, pc}

08007926 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007926:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007928:	b089      	sub	sp, #36	; 0x24
 800792a:	af04      	add	r7, sp, #16
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d020      	beq.n	800797a <osThreadCreate+0x54>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01c      	beq.n	800797a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685c      	ldr	r4, [r3, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	691e      	ldr	r6, [r3, #16]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007952:	4618      	mov	r0, r3
 8007954:	f7ff ffc8 	bl	80078e8 <makeFreeRtosPriority>
 8007958:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007962:	9202      	str	r2, [sp, #8]
 8007964:	9301      	str	r3, [sp, #4]
 8007966:	9100      	str	r1, [sp, #0]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	4632      	mov	r2, r6
 800796c:	4629      	mov	r1, r5
 800796e:	4620      	mov	r0, r4
 8007970:	f000 f8ed 	bl	8007b4e <xTaskCreateStatic>
 8007974:	4603      	mov	r3, r0
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	e01c      	b.n	80079b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685c      	ldr	r4, [r3, #4]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007986:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800798e:	4618      	mov	r0, r3
 8007990:	f7ff ffaa 	bl	80078e8 <makeFreeRtosPriority>
 8007994:	4602      	mov	r2, r0
 8007996:	f107 030c 	add.w	r3, r7, #12
 800799a:	9301      	str	r3, [sp, #4]
 800799c:	9200      	str	r2, [sp, #0]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	4632      	mov	r2, r6
 80079a2:	4629      	mov	r1, r5
 80079a4:	4620      	mov	r0, r4
 80079a6:	f000 f92f 	bl	8007c08 <xTaskCreate>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d001      	beq.n	80079b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80079b0:	2300      	movs	r3, #0
 80079b2:	e000      	b.n	80079b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80079b4:	68fb      	ldr	r3, [r7, #12]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b084      	sub	sp, #16
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <osDelay+0x16>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	e000      	b.n	80079d6 <osDelay+0x18>
 80079d4:	2301      	movs	r3, #1
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 fa4c 	bl	8007e74 <vTaskDelay>
  
  return osOK;
 80079dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f103 0208 	add.w	r2, r3, #8
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f04f 32ff 	mov.w	r2, #4294967295
 80079fe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f103 0208 	add.w	r2, r3, #8
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f103 0208 	add.w	r2, r3, #8
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a1a:	bf00      	nop
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689a      	ldr	r2, [r3, #8]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	601a      	str	r2, [r3, #0]
}
 8007a7c:	bf00      	nop
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9e:	d103      	bne.n	8007aa8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	60fb      	str	r3, [r7, #12]
 8007aa6:	e00c      	b.n	8007ac2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3308      	adds	r3, #8
 8007aac:	60fb      	str	r3, [r7, #12]
 8007aae:	e002      	b.n	8007ab6 <vListInsert+0x2e>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d2f6      	bcs.n	8007ab0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	601a      	str	r2, [r3, #0]
}
 8007aee:	bf00      	nop
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007afa:	b480      	push	{r7}
 8007afc:	b085      	sub	sp, #20
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	6892      	ldr	r2, [r2, #8]
 8007b10:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	6852      	ldr	r2, [r2, #4]
 8007b1a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d103      	bne.n	8007b2e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	689a      	ldr	r2, [r3, #8]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	1e5a      	subs	r2, r3, #1
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b08e      	sub	sp, #56	; 0x38
 8007b52:	af04      	add	r7, sp, #16
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	607a      	str	r2, [r7, #4]
 8007b5a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10a      	bne.n	8007b78 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b74:	bf00      	nop
 8007b76:	e7fe      	b.n	8007b76 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10a      	bne.n	8007b94 <xTaskCreateStatic+0x46>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	61fb      	str	r3, [r7, #28]
}
 8007b90:	bf00      	nop
 8007b92:	e7fe      	b.n	8007b92 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b94:	2354      	movs	r3, #84	; 0x54
 8007b96:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	2b54      	cmp	r3, #84	; 0x54
 8007b9c:	d00a      	beq.n	8007bb4 <xTaskCreateStatic+0x66>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	61bb      	str	r3, [r7, #24]
}
 8007bb0:	bf00      	nop
 8007bb2:	e7fe      	b.n	8007bb2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007bb4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d01e      	beq.n	8007bfa <xTaskCreateStatic+0xac>
 8007bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d01b      	beq.n	8007bfa <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	2202      	movs	r2, #2
 8007bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9303      	str	r3, [sp, #12]
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	9302      	str	r3, [sp, #8]
 8007bdc:	f107 0314 	add.w	r3, r7, #20
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	68b9      	ldr	r1, [r7, #8]
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 f850 	bl	8007c92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bf4:	f000 f8d4 	bl	8007da0 <prvAddNewTaskToReadyList>
 8007bf8:	e001      	b.n	8007bfe <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007bfe:	697b      	ldr	r3, [r7, #20]
	}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3728      	adds	r7, #40	; 0x28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08c      	sub	sp, #48	; 0x30
 8007c0c:	af04      	add	r7, sp, #16
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	603b      	str	r3, [r7, #0]
 8007c14:	4613      	mov	r3, r2
 8007c16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c18:	88fb      	ldrh	r3, [r7, #6]
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 fec3 	bl	80089a8 <pvPortMalloc>
 8007c22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00e      	beq.n	8007c48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c2a:	2054      	movs	r0, #84	; 0x54
 8007c2c:	f000 febc 	bl	80089a8 <pvPortMalloc>
 8007c30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d003      	beq.n	8007c40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	631a      	str	r2, [r3, #48]	; 0x30
 8007c3e:	e005      	b.n	8007c4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c40:	6978      	ldr	r0, [r7, #20]
 8007c42:	f000 ff7d 	bl	8008b40 <vPortFree>
 8007c46:	e001      	b.n	8007c4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d017      	beq.n	8007c82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c5a:	88fa      	ldrh	r2, [r7, #6]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	9303      	str	r3, [sp, #12]
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	9302      	str	r3, [sp, #8]
 8007c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c66:	9301      	str	r3, [sp, #4]
 8007c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	68b9      	ldr	r1, [r7, #8]
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 f80e 	bl	8007c92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c76:	69f8      	ldr	r0, [r7, #28]
 8007c78:	f000 f892 	bl	8007da0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	61bb      	str	r3, [r7, #24]
 8007c80:	e002      	b.n	8007c88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c82:	f04f 33ff 	mov.w	r3, #4294967295
 8007c86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c88:	69bb      	ldr	r3, [r7, #24]
	}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3720      	adds	r7, #32
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b088      	sub	sp, #32
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
 8007c9e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007caa:	3b01      	subs	r3, #1
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	f023 0307 	bic.w	r3, r3, #7
 8007cb8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	f003 0307 	and.w	r3, r3, #7
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00a      	beq.n	8007cda <prvInitialiseNewTask+0x48>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	617b      	str	r3, [r7, #20]
}
 8007cd6:	bf00      	nop
 8007cd8:	e7fe      	b.n	8007cd8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d01f      	beq.n	8007d20 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	61fb      	str	r3, [r7, #28]
 8007ce4:	e012      	b.n	8007d0c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	4413      	add	r3, r2
 8007cec:	7819      	ldrb	r1, [r3, #0]
 8007cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	3334      	adds	r3, #52	; 0x34
 8007cf6:	460a      	mov	r2, r1
 8007cf8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	4413      	add	r3, r2
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d006      	beq.n	8007d14 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	61fb      	str	r3, [r7, #28]
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	2b0f      	cmp	r3, #15
 8007d10:	d9e9      	bls.n	8007ce6 <prvInitialiseNewTask+0x54>
 8007d12:	e000      	b.n	8007d16 <prvInitialiseNewTask+0x84>
			{
				break;
 8007d14:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d1e:	e003      	b.n	8007d28 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	2b06      	cmp	r3, #6
 8007d2c:	d901      	bls.n	8007d32 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d2e:	2306      	movs	r3, #6
 8007d30:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d36:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d3c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	2200      	movs	r2, #0
 8007d42:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d46:	3304      	adds	r3, #4
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff fe6c 	bl	8007a26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	3318      	adds	r3, #24
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff fe67 	bl	8007a26 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d60:	f1c3 0207 	rsb	r2, r3, #7
 8007d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d6c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	2200      	movs	r2, #0
 8007d72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	68f9      	ldr	r1, [r7, #12]
 8007d80:	69b8      	ldr	r0, [r7, #24]
 8007d82:	f000 fc05 	bl	8008590 <pxPortInitialiseStack>
 8007d86:	4602      	mov	r2, r0
 8007d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d98:	bf00      	nop
 8007d9a:	3720      	adds	r7, #32
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007da8:	f000 fd1c 	bl	80087e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007dac:	4b2a      	ldr	r3, [pc, #168]	; (8007e58 <prvAddNewTaskToReadyList+0xb8>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3301      	adds	r3, #1
 8007db2:	4a29      	ldr	r2, [pc, #164]	; (8007e58 <prvAddNewTaskToReadyList+0xb8>)
 8007db4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007db6:	4b29      	ldr	r3, [pc, #164]	; (8007e5c <prvAddNewTaskToReadyList+0xbc>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d109      	bne.n	8007dd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007dbe:	4a27      	ldr	r2, [pc, #156]	; (8007e5c <prvAddNewTaskToReadyList+0xbc>)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007dc4:	4b24      	ldr	r3, [pc, #144]	; (8007e58 <prvAddNewTaskToReadyList+0xb8>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d110      	bne.n	8007dee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007dcc:	f000 fabc 	bl	8008348 <prvInitialiseTaskLists>
 8007dd0:	e00d      	b.n	8007dee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007dd2:	4b23      	ldr	r3, [pc, #140]	; (8007e60 <prvAddNewTaskToReadyList+0xc0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d109      	bne.n	8007dee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007dda:	4b20      	ldr	r3, [pc, #128]	; (8007e5c <prvAddNewTaskToReadyList+0xbc>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d802      	bhi.n	8007dee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007de8:	4a1c      	ldr	r2, [pc, #112]	; (8007e5c <prvAddNewTaskToReadyList+0xbc>)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007dee:	4b1d      	ldr	r3, [pc, #116]	; (8007e64 <prvAddNewTaskToReadyList+0xc4>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3301      	adds	r3, #1
 8007df4:	4a1b      	ldr	r2, [pc, #108]	; (8007e64 <prvAddNewTaskToReadyList+0xc4>)
 8007df6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	409a      	lsls	r2, r3
 8007e00:	4b19      	ldr	r3, [pc, #100]	; (8007e68 <prvAddNewTaskToReadyList+0xc8>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	4a18      	ldr	r2, [pc, #96]	; (8007e68 <prvAddNewTaskToReadyList+0xc8>)
 8007e08:	6013      	str	r3, [r2, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e0e:	4613      	mov	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4a15      	ldr	r2, [pc, #84]	; (8007e6c <prvAddNewTaskToReadyList+0xcc>)
 8007e18:	441a      	add	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	4619      	mov	r1, r3
 8007e20:	4610      	mov	r0, r2
 8007e22:	f7ff fe0d 	bl	8007a40 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e26:	f000 fd0d 	bl	8008844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e2a:	4b0d      	ldr	r3, [pc, #52]	; (8007e60 <prvAddNewTaskToReadyList+0xc0>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00e      	beq.n	8007e50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e32:	4b0a      	ldr	r3, [pc, #40]	; (8007e5c <prvAddNewTaskToReadyList+0xbc>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d207      	bcs.n	8007e50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e40:	4b0b      	ldr	r3, [pc, #44]	; (8007e70 <prvAddNewTaskToReadyList+0xd0>)
 8007e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e46:	601a      	str	r2, [r3, #0]
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e50:	bf00      	nop
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	20000874 	.word	0x20000874
 8007e5c:	20000774 	.word	0x20000774
 8007e60:	20000880 	.word	0x20000880
 8007e64:	20000890 	.word	0x20000890
 8007e68:	2000087c 	.word	0x2000087c
 8007e6c:	20000778 	.word	0x20000778
 8007e70:	e000ed04 	.word	0xe000ed04

08007e74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d017      	beq.n	8007eb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e86:	4b13      	ldr	r3, [pc, #76]	; (8007ed4 <vTaskDelay+0x60>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00a      	beq.n	8007ea4 <vTaskDelay+0x30>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	60bb      	str	r3, [r7, #8]
}
 8007ea0:	bf00      	nop
 8007ea2:	e7fe      	b.n	8007ea2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007ea4:	f000 f87a 	bl	8007f9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fb0a 	bl	80084c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007eb0:	f000 f882 	bl	8007fb8 <xTaskResumeAll>
 8007eb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d107      	bne.n	8007ecc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007ebc:	4b06      	ldr	r3, [pc, #24]	; (8007ed8 <vTaskDelay+0x64>)
 8007ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	2000089c 	.word	0x2000089c
 8007ed8:	e000ed04 	.word	0xe000ed04

08007edc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b08a      	sub	sp, #40	; 0x28
 8007ee0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007eea:	463a      	mov	r2, r7
 8007eec:	1d39      	adds	r1, r7, #4
 8007eee:	f107 0308 	add.w	r3, r7, #8
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fa ff70 	bl	8002dd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	9202      	str	r2, [sp, #8]
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	2300      	movs	r3, #0
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	2300      	movs	r3, #0
 8007f08:	460a      	mov	r2, r1
 8007f0a:	491e      	ldr	r1, [pc, #120]	; (8007f84 <vTaskStartScheduler+0xa8>)
 8007f0c:	481e      	ldr	r0, [pc, #120]	; (8007f88 <vTaskStartScheduler+0xac>)
 8007f0e:	f7ff fe1e 	bl	8007b4e <xTaskCreateStatic>
 8007f12:	4603      	mov	r3, r0
 8007f14:	4a1d      	ldr	r2, [pc, #116]	; (8007f8c <vTaskStartScheduler+0xb0>)
 8007f16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f18:	4b1c      	ldr	r3, [pc, #112]	; (8007f8c <vTaskStartScheduler+0xb0>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f20:	2301      	movs	r3, #1
 8007f22:	617b      	str	r3, [r7, #20]
 8007f24:	e001      	b.n	8007f2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f26:	2300      	movs	r3, #0
 8007f28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d116      	bne.n	8007f5e <vTaskStartScheduler+0x82>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	613b      	str	r3, [r7, #16]
}
 8007f42:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f44:	4b12      	ldr	r3, [pc, #72]	; (8007f90 <vTaskStartScheduler+0xb4>)
 8007f46:	f04f 32ff 	mov.w	r2, #4294967295
 8007f4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f4c:	4b11      	ldr	r3, [pc, #68]	; (8007f94 <vTaskStartScheduler+0xb8>)
 8007f4e:	2201      	movs	r2, #1
 8007f50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f52:	4b11      	ldr	r3, [pc, #68]	; (8007f98 <vTaskStartScheduler+0xbc>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f58:	f000 fba2 	bl	80086a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f5c:	e00e      	b.n	8007f7c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f64:	d10a      	bne.n	8007f7c <vTaskStartScheduler+0xa0>
	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	60fb      	str	r3, [r7, #12]
}
 8007f78:	bf00      	nop
 8007f7a:	e7fe      	b.n	8007f7a <vTaskStartScheduler+0x9e>
}
 8007f7c:	bf00      	nop
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	0800999c 	.word	0x0800999c
 8007f88:	08008319 	.word	0x08008319
 8007f8c:	20000898 	.word	0x20000898
 8007f90:	20000894 	.word	0x20000894
 8007f94:	20000880 	.word	0x20000880
 8007f98:	20000878 	.word	0x20000878

08007f9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007fa0:	4b04      	ldr	r3, [pc, #16]	; (8007fb4 <vTaskSuspendAll+0x18>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	4a03      	ldr	r2, [pc, #12]	; (8007fb4 <vTaskSuspendAll+0x18>)
 8007fa8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007faa:	bf00      	nop
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	2000089c 	.word	0x2000089c

08007fb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007fc6:	4b41      	ldr	r3, [pc, #260]	; (80080cc <xTaskResumeAll+0x114>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10a      	bne.n	8007fe4 <xTaskResumeAll+0x2c>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	603b      	str	r3, [r7, #0]
}
 8007fe0:	bf00      	nop
 8007fe2:	e7fe      	b.n	8007fe2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fe4:	f000 fbfe 	bl	80087e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007fe8:	4b38      	ldr	r3, [pc, #224]	; (80080cc <xTaskResumeAll+0x114>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3b01      	subs	r3, #1
 8007fee:	4a37      	ldr	r2, [pc, #220]	; (80080cc <xTaskResumeAll+0x114>)
 8007ff0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ff2:	4b36      	ldr	r3, [pc, #216]	; (80080cc <xTaskResumeAll+0x114>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d161      	bne.n	80080be <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ffa:	4b35      	ldr	r3, [pc, #212]	; (80080d0 <xTaskResumeAll+0x118>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d05d      	beq.n	80080be <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008002:	e02e      	b.n	8008062 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008004:	4b33      	ldr	r3, [pc, #204]	; (80080d4 <xTaskResumeAll+0x11c>)
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	3318      	adds	r3, #24
 8008010:	4618      	mov	r0, r3
 8008012:	f7ff fd72 	bl	8007afa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3304      	adds	r3, #4
 800801a:	4618      	mov	r0, r3
 800801c:	f7ff fd6d 	bl	8007afa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008024:	2201      	movs	r2, #1
 8008026:	409a      	lsls	r2, r3
 8008028:	4b2b      	ldr	r3, [pc, #172]	; (80080d8 <xTaskResumeAll+0x120>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4313      	orrs	r3, r2
 800802e:	4a2a      	ldr	r2, [pc, #168]	; (80080d8 <xTaskResumeAll+0x120>)
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008036:	4613      	mov	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4413      	add	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4a27      	ldr	r2, [pc, #156]	; (80080dc <xTaskResumeAll+0x124>)
 8008040:	441a      	add	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	3304      	adds	r3, #4
 8008046:	4619      	mov	r1, r3
 8008048:	4610      	mov	r0, r2
 800804a:	f7ff fcf9 	bl	8007a40 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008052:	4b23      	ldr	r3, [pc, #140]	; (80080e0 <xTaskResumeAll+0x128>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008058:	429a      	cmp	r2, r3
 800805a:	d302      	bcc.n	8008062 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800805c:	4b21      	ldr	r3, [pc, #132]	; (80080e4 <xTaskResumeAll+0x12c>)
 800805e:	2201      	movs	r2, #1
 8008060:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008062:	4b1c      	ldr	r3, [pc, #112]	; (80080d4 <xTaskResumeAll+0x11c>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1cc      	bne.n	8008004 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008070:	f000 fa08 	bl	8008484 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008074:	4b1c      	ldr	r3, [pc, #112]	; (80080e8 <xTaskResumeAll+0x130>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d010      	beq.n	80080a2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008080:	f000 f836 	bl	80080f0 <xTaskIncrementTick>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d002      	beq.n	8008090 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800808a:	4b16      	ldr	r3, [pc, #88]	; (80080e4 <xTaskResumeAll+0x12c>)
 800808c:	2201      	movs	r2, #1
 800808e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3b01      	subs	r3, #1
 8008094:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1f1      	bne.n	8008080 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800809c:	4b12      	ldr	r3, [pc, #72]	; (80080e8 <xTaskResumeAll+0x130>)
 800809e:	2200      	movs	r2, #0
 80080a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80080a2:	4b10      	ldr	r3, [pc, #64]	; (80080e4 <xTaskResumeAll+0x12c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d009      	beq.n	80080be <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80080aa:	2301      	movs	r3, #1
 80080ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80080ae:	4b0f      	ldr	r3, [pc, #60]	; (80080ec <xTaskResumeAll+0x134>)
 80080b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080be:	f000 fbc1 	bl	8008844 <vPortExitCritical>

	return xAlreadyYielded;
 80080c2:	68bb      	ldr	r3, [r7, #8]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	2000089c 	.word	0x2000089c
 80080d0:	20000874 	.word	0x20000874
 80080d4:	20000834 	.word	0x20000834
 80080d8:	2000087c 	.word	0x2000087c
 80080dc:	20000778 	.word	0x20000778
 80080e0:	20000774 	.word	0x20000774
 80080e4:	20000888 	.word	0x20000888
 80080e8:	20000884 	.word	0x20000884
 80080ec:	e000ed04 	.word	0xe000ed04

080080f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80080f6:	2300      	movs	r3, #0
 80080f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080fa:	4b4e      	ldr	r3, [pc, #312]	; (8008234 <xTaskIncrementTick+0x144>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f040 808e 	bne.w	8008220 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008104:	4b4c      	ldr	r3, [pc, #304]	; (8008238 <xTaskIncrementTick+0x148>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3301      	adds	r3, #1
 800810a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800810c:	4a4a      	ldr	r2, [pc, #296]	; (8008238 <xTaskIncrementTick+0x148>)
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d120      	bne.n	800815a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008118:	4b48      	ldr	r3, [pc, #288]	; (800823c <xTaskIncrementTick+0x14c>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <xTaskIncrementTick+0x48>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	603b      	str	r3, [r7, #0]
}
 8008134:	bf00      	nop
 8008136:	e7fe      	b.n	8008136 <xTaskIncrementTick+0x46>
 8008138:	4b40      	ldr	r3, [pc, #256]	; (800823c <xTaskIncrementTick+0x14c>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	60fb      	str	r3, [r7, #12]
 800813e:	4b40      	ldr	r3, [pc, #256]	; (8008240 <xTaskIncrementTick+0x150>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a3e      	ldr	r2, [pc, #248]	; (800823c <xTaskIncrementTick+0x14c>)
 8008144:	6013      	str	r3, [r2, #0]
 8008146:	4a3e      	ldr	r2, [pc, #248]	; (8008240 <xTaskIncrementTick+0x150>)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	4b3d      	ldr	r3, [pc, #244]	; (8008244 <xTaskIncrementTick+0x154>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3301      	adds	r3, #1
 8008152:	4a3c      	ldr	r2, [pc, #240]	; (8008244 <xTaskIncrementTick+0x154>)
 8008154:	6013      	str	r3, [r2, #0]
 8008156:	f000 f995 	bl	8008484 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800815a:	4b3b      	ldr	r3, [pc, #236]	; (8008248 <xTaskIncrementTick+0x158>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	429a      	cmp	r2, r3
 8008162:	d348      	bcc.n	80081f6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008164:	4b35      	ldr	r3, [pc, #212]	; (800823c <xTaskIncrementTick+0x14c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d104      	bne.n	8008178 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800816e:	4b36      	ldr	r3, [pc, #216]	; (8008248 <xTaskIncrementTick+0x158>)
 8008170:	f04f 32ff 	mov.w	r2, #4294967295
 8008174:	601a      	str	r2, [r3, #0]
					break;
 8008176:	e03e      	b.n	80081f6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008178:	4b30      	ldr	r3, [pc, #192]	; (800823c <xTaskIncrementTick+0x14c>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	429a      	cmp	r2, r3
 800818e:	d203      	bcs.n	8008198 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008190:	4a2d      	ldr	r2, [pc, #180]	; (8008248 <xTaskIncrementTick+0x158>)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008196:	e02e      	b.n	80081f6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	3304      	adds	r3, #4
 800819c:	4618      	mov	r0, r3
 800819e:	f7ff fcac 	bl	8007afa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d004      	beq.n	80081b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	3318      	adds	r3, #24
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7ff fca3 	bl	8007afa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b8:	2201      	movs	r2, #1
 80081ba:	409a      	lsls	r2, r3
 80081bc:	4b23      	ldr	r3, [pc, #140]	; (800824c <xTaskIncrementTick+0x15c>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	4a22      	ldr	r2, [pc, #136]	; (800824c <xTaskIncrementTick+0x15c>)
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ca:	4613      	mov	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4a1f      	ldr	r2, [pc, #124]	; (8008250 <xTaskIncrementTick+0x160>)
 80081d4:	441a      	add	r2, r3
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	3304      	adds	r3, #4
 80081da:	4619      	mov	r1, r3
 80081dc:	4610      	mov	r0, r2
 80081de:	f7ff fc2f 	bl	8007a40 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e6:	4b1b      	ldr	r3, [pc, #108]	; (8008254 <xTaskIncrementTick+0x164>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d3b9      	bcc.n	8008164 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80081f0:	2301      	movs	r3, #1
 80081f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081f4:	e7b6      	b.n	8008164 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081f6:	4b17      	ldr	r3, [pc, #92]	; (8008254 <xTaskIncrementTick+0x164>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fc:	4914      	ldr	r1, [pc, #80]	; (8008250 <xTaskIncrementTick+0x160>)
 80081fe:	4613      	mov	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	440b      	add	r3, r1
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d901      	bls.n	8008212 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800820e:	2301      	movs	r3, #1
 8008210:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008212:	4b11      	ldr	r3, [pc, #68]	; (8008258 <xTaskIncrementTick+0x168>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d007      	beq.n	800822a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800821a:	2301      	movs	r3, #1
 800821c:	617b      	str	r3, [r7, #20]
 800821e:	e004      	b.n	800822a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008220:	4b0e      	ldr	r3, [pc, #56]	; (800825c <xTaskIncrementTick+0x16c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3301      	adds	r3, #1
 8008226:	4a0d      	ldr	r2, [pc, #52]	; (800825c <xTaskIncrementTick+0x16c>)
 8008228:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800822a:	697b      	ldr	r3, [r7, #20]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	2000089c 	.word	0x2000089c
 8008238:	20000878 	.word	0x20000878
 800823c:	2000082c 	.word	0x2000082c
 8008240:	20000830 	.word	0x20000830
 8008244:	2000088c 	.word	0x2000088c
 8008248:	20000894 	.word	0x20000894
 800824c:	2000087c 	.word	0x2000087c
 8008250:	20000778 	.word	0x20000778
 8008254:	20000774 	.word	0x20000774
 8008258:	20000888 	.word	0x20000888
 800825c:	20000884 	.word	0x20000884

08008260 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008260:	b480      	push	{r7}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008266:	4b27      	ldr	r3, [pc, #156]	; (8008304 <vTaskSwitchContext+0xa4>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800826e:	4b26      	ldr	r3, [pc, #152]	; (8008308 <vTaskSwitchContext+0xa8>)
 8008270:	2201      	movs	r2, #1
 8008272:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008274:	e03f      	b.n	80082f6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008276:	4b24      	ldr	r3, [pc, #144]	; (8008308 <vTaskSwitchContext+0xa8>)
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800827c:	4b23      	ldr	r3, [pc, #140]	; (800830c <vTaskSwitchContext+0xac>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	fab3 f383 	clz	r3, r3
 8008288:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800828a:	7afb      	ldrb	r3, [r7, #11]
 800828c:	f1c3 031f 	rsb	r3, r3, #31
 8008290:	617b      	str	r3, [r7, #20]
 8008292:	491f      	ldr	r1, [pc, #124]	; (8008310 <vTaskSwitchContext+0xb0>)
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	4613      	mov	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	440b      	add	r3, r1
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10a      	bne.n	80082bc <vTaskSwitchContext+0x5c>
	__asm volatile
 80082a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082aa:	f383 8811 	msr	BASEPRI, r3
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	607b      	str	r3, [r7, #4]
}
 80082b8:	bf00      	nop
 80082ba:	e7fe      	b.n	80082ba <vTaskSwitchContext+0x5a>
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	4613      	mov	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4a12      	ldr	r2, [pc, #72]	; (8008310 <vTaskSwitchContext+0xb0>)
 80082c8:	4413      	add	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	685a      	ldr	r2, [r3, #4]
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	605a      	str	r2, [r3, #4]
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	3308      	adds	r3, #8
 80082de:	429a      	cmp	r2, r3
 80082e0:	d104      	bne.n	80082ec <vTaskSwitchContext+0x8c>
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	605a      	str	r2, [r3, #4]
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	4a08      	ldr	r2, [pc, #32]	; (8008314 <vTaskSwitchContext+0xb4>)
 80082f4:	6013      	str	r3, [r2, #0]
}
 80082f6:	bf00      	nop
 80082f8:	371c      	adds	r7, #28
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	2000089c 	.word	0x2000089c
 8008308:	20000888 	.word	0x20000888
 800830c:	2000087c 	.word	0x2000087c
 8008310:	20000778 	.word	0x20000778
 8008314:	20000774 	.word	0x20000774

08008318 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008320:	f000 f852 	bl	80083c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008324:	4b06      	ldr	r3, [pc, #24]	; (8008340 <prvIdleTask+0x28>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d9f9      	bls.n	8008320 <prvIdleTask+0x8>
			{
				taskYIELD();
 800832c:	4b05      	ldr	r3, [pc, #20]	; (8008344 <prvIdleTask+0x2c>)
 800832e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800833c:	e7f0      	b.n	8008320 <prvIdleTask+0x8>
 800833e:	bf00      	nop
 8008340:	20000778 	.word	0x20000778
 8008344:	e000ed04 	.word	0xe000ed04

08008348 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800834e:	2300      	movs	r3, #0
 8008350:	607b      	str	r3, [r7, #4]
 8008352:	e00c      	b.n	800836e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	4613      	mov	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4a12      	ldr	r2, [pc, #72]	; (80083a8 <prvInitialiseTaskLists+0x60>)
 8008360:	4413      	add	r3, r2
 8008362:	4618      	mov	r0, r3
 8008364:	f7ff fb3f 	bl	80079e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	3301      	adds	r3, #1
 800836c:	607b      	str	r3, [r7, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b06      	cmp	r3, #6
 8008372:	d9ef      	bls.n	8008354 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008374:	480d      	ldr	r0, [pc, #52]	; (80083ac <prvInitialiseTaskLists+0x64>)
 8008376:	f7ff fb36 	bl	80079e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800837a:	480d      	ldr	r0, [pc, #52]	; (80083b0 <prvInitialiseTaskLists+0x68>)
 800837c:	f7ff fb33 	bl	80079e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008380:	480c      	ldr	r0, [pc, #48]	; (80083b4 <prvInitialiseTaskLists+0x6c>)
 8008382:	f7ff fb30 	bl	80079e6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008386:	480c      	ldr	r0, [pc, #48]	; (80083b8 <prvInitialiseTaskLists+0x70>)
 8008388:	f7ff fb2d 	bl	80079e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800838c:	480b      	ldr	r0, [pc, #44]	; (80083bc <prvInitialiseTaskLists+0x74>)
 800838e:	f7ff fb2a 	bl	80079e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008392:	4b0b      	ldr	r3, [pc, #44]	; (80083c0 <prvInitialiseTaskLists+0x78>)
 8008394:	4a05      	ldr	r2, [pc, #20]	; (80083ac <prvInitialiseTaskLists+0x64>)
 8008396:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008398:	4b0a      	ldr	r3, [pc, #40]	; (80083c4 <prvInitialiseTaskLists+0x7c>)
 800839a:	4a05      	ldr	r2, [pc, #20]	; (80083b0 <prvInitialiseTaskLists+0x68>)
 800839c:	601a      	str	r2, [r3, #0]
}
 800839e:	bf00      	nop
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20000778 	.word	0x20000778
 80083ac:	20000804 	.word	0x20000804
 80083b0:	20000818 	.word	0x20000818
 80083b4:	20000834 	.word	0x20000834
 80083b8:	20000848 	.word	0x20000848
 80083bc:	20000860 	.word	0x20000860
 80083c0:	2000082c 	.word	0x2000082c
 80083c4:	20000830 	.word	0x20000830

080083c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083ce:	e019      	b.n	8008404 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80083d0:	f000 fa08 	bl	80087e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083d4:	4b10      	ldr	r3, [pc, #64]	; (8008418 <prvCheckTasksWaitingTermination+0x50>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3304      	adds	r3, #4
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7ff fb8a 	bl	8007afa <uxListRemove>
				--uxCurrentNumberOfTasks;
 80083e6:	4b0d      	ldr	r3, [pc, #52]	; (800841c <prvCheckTasksWaitingTermination+0x54>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3b01      	subs	r3, #1
 80083ec:	4a0b      	ldr	r2, [pc, #44]	; (800841c <prvCheckTasksWaitingTermination+0x54>)
 80083ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083f0:	4b0b      	ldr	r3, [pc, #44]	; (8008420 <prvCheckTasksWaitingTermination+0x58>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3b01      	subs	r3, #1
 80083f6:	4a0a      	ldr	r2, [pc, #40]	; (8008420 <prvCheckTasksWaitingTermination+0x58>)
 80083f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80083fa:	f000 fa23 	bl	8008844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f810 	bl	8008424 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008404:	4b06      	ldr	r3, [pc, #24]	; (8008420 <prvCheckTasksWaitingTermination+0x58>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1e1      	bne.n	80083d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800840c:	bf00      	nop
 800840e:	bf00      	nop
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20000848 	.word	0x20000848
 800841c:	20000874 	.word	0x20000874
 8008420:	2000085c 	.word	0x2000085c

08008424 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008432:	2b00      	cmp	r3, #0
 8008434:	d108      	bne.n	8008448 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843a:	4618      	mov	r0, r3
 800843c:	f000 fb80 	bl	8008b40 <vPortFree>
				vPortFree( pxTCB );
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fb7d 	bl	8008b40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008446:	e018      	b.n	800847a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800844e:	2b01      	cmp	r3, #1
 8008450:	d103      	bne.n	800845a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fb74 	bl	8008b40 <vPortFree>
	}
 8008458:	e00f      	b.n	800847a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008460:	2b02      	cmp	r3, #2
 8008462:	d00a      	beq.n	800847a <prvDeleteTCB+0x56>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	60fb      	str	r3, [r7, #12]
}
 8008476:	bf00      	nop
 8008478:	e7fe      	b.n	8008478 <prvDeleteTCB+0x54>
	}
 800847a:	bf00      	nop
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
	...

08008484 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800848a:	4b0c      	ldr	r3, [pc, #48]	; (80084bc <prvResetNextTaskUnblockTime+0x38>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d104      	bne.n	800849e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008494:	4b0a      	ldr	r3, [pc, #40]	; (80084c0 <prvResetNextTaskUnblockTime+0x3c>)
 8008496:	f04f 32ff 	mov.w	r2, #4294967295
 800849a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800849c:	e008      	b.n	80084b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800849e:	4b07      	ldr	r3, [pc, #28]	; (80084bc <prvResetNextTaskUnblockTime+0x38>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	4a04      	ldr	r2, [pc, #16]	; (80084c0 <prvResetNextTaskUnblockTime+0x3c>)
 80084ae:	6013      	str	r3, [r2, #0]
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	2000082c 	.word	0x2000082c
 80084c0:	20000894 	.word	0x20000894

080084c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084ce:	4b29      	ldr	r3, [pc, #164]	; (8008574 <prvAddCurrentTaskToDelayedList+0xb0>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084d4:	4b28      	ldr	r3, [pc, #160]	; (8008578 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3304      	adds	r3, #4
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff fb0d 	bl	8007afa <uxListRemove>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10b      	bne.n	80084fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80084e6:	4b24      	ldr	r3, [pc, #144]	; (8008578 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	2201      	movs	r2, #1
 80084ee:	fa02 f303 	lsl.w	r3, r2, r3
 80084f2:	43da      	mvns	r2, r3
 80084f4:	4b21      	ldr	r3, [pc, #132]	; (800857c <prvAddCurrentTaskToDelayedList+0xb8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4013      	ands	r3, r2
 80084fa:	4a20      	ldr	r2, [pc, #128]	; (800857c <prvAddCurrentTaskToDelayedList+0xb8>)
 80084fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008504:	d10a      	bne.n	800851c <prvAddCurrentTaskToDelayedList+0x58>
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d007      	beq.n	800851c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800850c:	4b1a      	ldr	r3, [pc, #104]	; (8008578 <prvAddCurrentTaskToDelayedList+0xb4>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3304      	adds	r3, #4
 8008512:	4619      	mov	r1, r3
 8008514:	481a      	ldr	r0, [pc, #104]	; (8008580 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008516:	f7ff fa93 	bl	8007a40 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800851a:	e026      	b.n	800856a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4413      	add	r3, r2
 8008522:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008524:	4b14      	ldr	r3, [pc, #80]	; (8008578 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	429a      	cmp	r2, r3
 8008532:	d209      	bcs.n	8008548 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008534:	4b13      	ldr	r3, [pc, #76]	; (8008584 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	4b0f      	ldr	r3, [pc, #60]	; (8008578 <prvAddCurrentTaskToDelayedList+0xb4>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3304      	adds	r3, #4
 800853e:	4619      	mov	r1, r3
 8008540:	4610      	mov	r0, r2
 8008542:	f7ff faa1 	bl	8007a88 <vListInsert>
}
 8008546:	e010      	b.n	800856a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008548:	4b0f      	ldr	r3, [pc, #60]	; (8008588 <prvAddCurrentTaskToDelayedList+0xc4>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <prvAddCurrentTaskToDelayedList+0xb4>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3304      	adds	r3, #4
 8008552:	4619      	mov	r1, r3
 8008554:	4610      	mov	r0, r2
 8008556:	f7ff fa97 	bl	8007a88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800855a:	4b0c      	ldr	r3, [pc, #48]	; (800858c <prvAddCurrentTaskToDelayedList+0xc8>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	429a      	cmp	r2, r3
 8008562:	d202      	bcs.n	800856a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008564:	4a09      	ldr	r2, [pc, #36]	; (800858c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	6013      	str	r3, [r2, #0]
}
 800856a:	bf00      	nop
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	20000878 	.word	0x20000878
 8008578:	20000774 	.word	0x20000774
 800857c:	2000087c 	.word	0x2000087c
 8008580:	20000860 	.word	0x20000860
 8008584:	20000830 	.word	0x20000830
 8008588:	2000082c 	.word	0x2000082c
 800858c:	20000894 	.word	0x20000894

08008590 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	3b04      	subs	r3, #4
 80085a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3b04      	subs	r3, #4
 80085ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f023 0201 	bic.w	r2, r3, #1
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	3b04      	subs	r3, #4
 80085be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085c0:	4a0c      	ldr	r2, [pc, #48]	; (80085f4 <pxPortInitialiseStack+0x64>)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3b14      	subs	r3, #20
 80085ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3b04      	subs	r3, #4
 80085d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f06f 0202 	mvn.w	r2, #2
 80085de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	3b20      	subs	r3, #32
 80085e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085e6:	68fb      	ldr	r3, [r7, #12]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	080085f9 	.word	0x080085f9

080085f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085fe:	2300      	movs	r3, #0
 8008600:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008602:	4b12      	ldr	r3, [pc, #72]	; (800864c <prvTaskExitError+0x54>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800860a:	d00a      	beq.n	8008622 <prvTaskExitError+0x2a>
	__asm volatile
 800860c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008610:	f383 8811 	msr	BASEPRI, r3
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	60fb      	str	r3, [r7, #12]
}
 800861e:	bf00      	nop
 8008620:	e7fe      	b.n	8008620 <prvTaskExitError+0x28>
	__asm volatile
 8008622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	60bb      	str	r3, [r7, #8]
}
 8008634:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008636:	bf00      	nop
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d0fc      	beq.n	8008638 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800863e:	bf00      	nop
 8008640:	bf00      	nop
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	2000009c 	.word	0x2000009c

08008650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008650:	4b07      	ldr	r3, [pc, #28]	; (8008670 <pxCurrentTCBConst2>)
 8008652:	6819      	ldr	r1, [r3, #0]
 8008654:	6808      	ldr	r0, [r1, #0]
 8008656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865a:	f380 8809 	msr	PSP, r0
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f04f 0000 	mov.w	r0, #0
 8008666:	f380 8811 	msr	BASEPRI, r0
 800866a:	4770      	bx	lr
 800866c:	f3af 8000 	nop.w

08008670 <pxCurrentTCBConst2>:
 8008670:	20000774 	.word	0x20000774
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop

08008678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008678:	4808      	ldr	r0, [pc, #32]	; (800869c <prvPortStartFirstTask+0x24>)
 800867a:	6800      	ldr	r0, [r0, #0]
 800867c:	6800      	ldr	r0, [r0, #0]
 800867e:	f380 8808 	msr	MSP, r0
 8008682:	f04f 0000 	mov.w	r0, #0
 8008686:	f380 8814 	msr	CONTROL, r0
 800868a:	b662      	cpsie	i
 800868c:	b661      	cpsie	f
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	df00      	svc	0
 8008698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800869a:	bf00      	nop
 800869c:	e000ed08 	.word	0xe000ed08

080086a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80086a6:	4b46      	ldr	r3, [pc, #280]	; (80087c0 <xPortStartScheduler+0x120>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a46      	ldr	r2, [pc, #280]	; (80087c4 <xPortStartScheduler+0x124>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d10a      	bne.n	80086c6 <xPortStartScheduler+0x26>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	613b      	str	r3, [r7, #16]
}
 80086c2:	bf00      	nop
 80086c4:	e7fe      	b.n	80086c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80086c6:	4b3e      	ldr	r3, [pc, #248]	; (80087c0 <xPortStartScheduler+0x120>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a3f      	ldr	r2, [pc, #252]	; (80087c8 <xPortStartScheduler+0x128>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d10a      	bne.n	80086e6 <xPortStartScheduler+0x46>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	60fb      	str	r3, [r7, #12]
}
 80086e2:	bf00      	nop
 80086e4:	e7fe      	b.n	80086e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086e6:	4b39      	ldr	r3, [pc, #228]	; (80087cc <xPortStartScheduler+0x12c>)
 80086e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	22ff      	movs	r2, #255	; 0xff
 80086f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	b2db      	uxtb	r3, r3
 8008704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008708:	b2da      	uxtb	r2, r3
 800870a:	4b31      	ldr	r3, [pc, #196]	; (80087d0 <xPortStartScheduler+0x130>)
 800870c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800870e:	4b31      	ldr	r3, [pc, #196]	; (80087d4 <xPortStartScheduler+0x134>)
 8008710:	2207      	movs	r2, #7
 8008712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008714:	e009      	b.n	800872a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008716:	4b2f      	ldr	r3, [pc, #188]	; (80087d4 <xPortStartScheduler+0x134>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3b01      	subs	r3, #1
 800871c:	4a2d      	ldr	r2, [pc, #180]	; (80087d4 <xPortStartScheduler+0x134>)
 800871e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	b2db      	uxtb	r3, r3
 8008724:	005b      	lsls	r3, r3, #1
 8008726:	b2db      	uxtb	r3, r3
 8008728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800872a:	78fb      	ldrb	r3, [r7, #3]
 800872c:	b2db      	uxtb	r3, r3
 800872e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008732:	2b80      	cmp	r3, #128	; 0x80
 8008734:	d0ef      	beq.n	8008716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008736:	4b27      	ldr	r3, [pc, #156]	; (80087d4 <xPortStartScheduler+0x134>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f1c3 0307 	rsb	r3, r3, #7
 800873e:	2b04      	cmp	r3, #4
 8008740:	d00a      	beq.n	8008758 <xPortStartScheduler+0xb8>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	60bb      	str	r3, [r7, #8]
}
 8008754:	bf00      	nop
 8008756:	e7fe      	b.n	8008756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008758:	4b1e      	ldr	r3, [pc, #120]	; (80087d4 <xPortStartScheduler+0x134>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	021b      	lsls	r3, r3, #8
 800875e:	4a1d      	ldr	r2, [pc, #116]	; (80087d4 <xPortStartScheduler+0x134>)
 8008760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008762:	4b1c      	ldr	r3, [pc, #112]	; (80087d4 <xPortStartScheduler+0x134>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800876a:	4a1a      	ldr	r2, [pc, #104]	; (80087d4 <xPortStartScheduler+0x134>)
 800876c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	b2da      	uxtb	r2, r3
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008776:	4b18      	ldr	r3, [pc, #96]	; (80087d8 <xPortStartScheduler+0x138>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a17      	ldr	r2, [pc, #92]	; (80087d8 <xPortStartScheduler+0x138>)
 800877c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008782:	4b15      	ldr	r3, [pc, #84]	; (80087d8 <xPortStartScheduler+0x138>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a14      	ldr	r2, [pc, #80]	; (80087d8 <xPortStartScheduler+0x138>)
 8008788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800878c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800878e:	f000 f8dd 	bl	800894c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008792:	4b12      	ldr	r3, [pc, #72]	; (80087dc <xPortStartScheduler+0x13c>)
 8008794:	2200      	movs	r2, #0
 8008796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008798:	f000 f8fc 	bl	8008994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800879c:	4b10      	ldr	r3, [pc, #64]	; (80087e0 <xPortStartScheduler+0x140>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a0f      	ldr	r2, [pc, #60]	; (80087e0 <xPortStartScheduler+0x140>)
 80087a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80087a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087a8:	f7ff ff66 	bl	8008678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087ac:	f7ff fd58 	bl	8008260 <vTaskSwitchContext>
	prvTaskExitError();
 80087b0:	f7ff ff22 	bl	80085f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	e000ed00 	.word	0xe000ed00
 80087c4:	410fc271 	.word	0x410fc271
 80087c8:	410fc270 	.word	0x410fc270
 80087cc:	e000e400 	.word	0xe000e400
 80087d0:	200008a0 	.word	0x200008a0
 80087d4:	200008a4 	.word	0x200008a4
 80087d8:	e000ed20 	.word	0xe000ed20
 80087dc:	2000009c 	.word	0x2000009c
 80087e0:	e000ef34 	.word	0xe000ef34

080087e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	607b      	str	r3, [r7, #4]
}
 80087fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087fe:	4b0f      	ldr	r3, [pc, #60]	; (800883c <vPortEnterCritical+0x58>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3301      	adds	r3, #1
 8008804:	4a0d      	ldr	r2, [pc, #52]	; (800883c <vPortEnterCritical+0x58>)
 8008806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008808:	4b0c      	ldr	r3, [pc, #48]	; (800883c <vPortEnterCritical+0x58>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d10f      	bne.n	8008830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008810:	4b0b      	ldr	r3, [pc, #44]	; (8008840 <vPortEnterCritical+0x5c>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00a      	beq.n	8008830 <vPortEnterCritical+0x4c>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	603b      	str	r3, [r7, #0]
}
 800882c:	bf00      	nop
 800882e:	e7fe      	b.n	800882e <vPortEnterCritical+0x4a>
	}
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr
 800883c:	2000009c 	.word	0x2000009c
 8008840:	e000ed04 	.word	0xe000ed04

08008844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800884a:	4b12      	ldr	r3, [pc, #72]	; (8008894 <vPortExitCritical+0x50>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10a      	bne.n	8008868 <vPortExitCritical+0x24>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	607b      	str	r3, [r7, #4]
}
 8008864:	bf00      	nop
 8008866:	e7fe      	b.n	8008866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008868:	4b0a      	ldr	r3, [pc, #40]	; (8008894 <vPortExitCritical+0x50>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3b01      	subs	r3, #1
 800886e:	4a09      	ldr	r2, [pc, #36]	; (8008894 <vPortExitCritical+0x50>)
 8008870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008872:	4b08      	ldr	r3, [pc, #32]	; (8008894 <vPortExitCritical+0x50>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d105      	bne.n	8008886 <vPortExitCritical+0x42>
 800887a:	2300      	movs	r3, #0
 800887c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008886:	bf00      	nop
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	2000009c 	.word	0x2000009c
	...

080088a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088a0:	f3ef 8009 	mrs	r0, PSP
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	4b15      	ldr	r3, [pc, #84]	; (8008900 <pxCurrentTCBConst>)
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	f01e 0f10 	tst.w	lr, #16
 80088b0:	bf08      	it	eq
 80088b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ba:	6010      	str	r0, [r2, #0]
 80088bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80088c4:	f380 8811 	msr	BASEPRI, r0
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f7ff fcc6 	bl	8008260 <vTaskSwitchContext>
 80088d4:	f04f 0000 	mov.w	r0, #0
 80088d8:	f380 8811 	msr	BASEPRI, r0
 80088dc:	bc09      	pop	{r0, r3}
 80088de:	6819      	ldr	r1, [r3, #0]
 80088e0:	6808      	ldr	r0, [r1, #0]
 80088e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e6:	f01e 0f10 	tst.w	lr, #16
 80088ea:	bf08      	it	eq
 80088ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088f0:	f380 8809 	msr	PSP, r0
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	f3af 8000 	nop.w

08008900 <pxCurrentTCBConst>:
 8008900:	20000774 	.word	0x20000774
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop

08008908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
	__asm volatile
 800890e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	607b      	str	r3, [r7, #4]
}
 8008920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008922:	f7ff fbe5 	bl	80080f0 <xTaskIncrementTick>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d003      	beq.n	8008934 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800892c:	4b06      	ldr	r3, [pc, #24]	; (8008948 <SysTick_Handler+0x40>)
 800892e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	2300      	movs	r3, #0
 8008936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	f383 8811 	msr	BASEPRI, r3
}
 800893e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	e000ed04 	.word	0xe000ed04

0800894c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800894c:	b480      	push	{r7}
 800894e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008950:	4b0b      	ldr	r3, [pc, #44]	; (8008980 <vPortSetupTimerInterrupt+0x34>)
 8008952:	2200      	movs	r2, #0
 8008954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008956:	4b0b      	ldr	r3, [pc, #44]	; (8008984 <vPortSetupTimerInterrupt+0x38>)
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800895c:	4b0a      	ldr	r3, [pc, #40]	; (8008988 <vPortSetupTimerInterrupt+0x3c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a0a      	ldr	r2, [pc, #40]	; (800898c <vPortSetupTimerInterrupt+0x40>)
 8008962:	fba2 2303 	umull	r2, r3, r2, r3
 8008966:	099b      	lsrs	r3, r3, #6
 8008968:	4a09      	ldr	r2, [pc, #36]	; (8008990 <vPortSetupTimerInterrupt+0x44>)
 800896a:	3b01      	subs	r3, #1
 800896c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800896e:	4b04      	ldr	r3, [pc, #16]	; (8008980 <vPortSetupTimerInterrupt+0x34>)
 8008970:	2207      	movs	r2, #7
 8008972:	601a      	str	r2, [r3, #0]
}
 8008974:	bf00      	nop
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	e000e010 	.word	0xe000e010
 8008984:	e000e018 	.word	0xe000e018
 8008988:	20000090 	.word	0x20000090
 800898c:	10624dd3 	.word	0x10624dd3
 8008990:	e000e014 	.word	0xe000e014

08008994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80089a4 <vPortEnableVFP+0x10>
 8008998:	6801      	ldr	r1, [r0, #0]
 800899a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800899e:	6001      	str	r1, [r0, #0]
 80089a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80089a2:	bf00      	nop
 80089a4:	e000ed88 	.word	0xe000ed88

080089a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08a      	sub	sp, #40	; 0x28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80089b0:	2300      	movs	r3, #0
 80089b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80089b4:	f7ff faf2 	bl	8007f9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80089b8:	4b5b      	ldr	r3, [pc, #364]	; (8008b28 <pvPortMalloc+0x180>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80089c0:	f000 f920 	bl	8008c04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80089c4:	4b59      	ldr	r3, [pc, #356]	; (8008b2c <pvPortMalloc+0x184>)
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4013      	ands	r3, r2
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f040 8093 	bne.w	8008af8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d01d      	beq.n	8008a14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80089d8:	2208      	movs	r2, #8
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4413      	add	r3, r2
 80089de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f003 0307 	and.w	r3, r3, #7
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d014      	beq.n	8008a14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f023 0307 	bic.w	r3, r3, #7
 80089f0:	3308      	adds	r3, #8
 80089f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f003 0307 	and.w	r3, r3, #7
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00a      	beq.n	8008a14 <pvPortMalloc+0x6c>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	617b      	str	r3, [r7, #20]
}
 8008a10:	bf00      	nop
 8008a12:	e7fe      	b.n	8008a12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d06e      	beq.n	8008af8 <pvPortMalloc+0x150>
 8008a1a:	4b45      	ldr	r3, [pc, #276]	; (8008b30 <pvPortMalloc+0x188>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d869      	bhi.n	8008af8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a24:	4b43      	ldr	r3, [pc, #268]	; (8008b34 <pvPortMalloc+0x18c>)
 8008a26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a28:	4b42      	ldr	r3, [pc, #264]	; (8008b34 <pvPortMalloc+0x18c>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a2e:	e004      	b.n	8008a3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d903      	bls.n	8008a4c <pvPortMalloc+0xa4>
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1f1      	bne.n	8008a30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a4c:	4b36      	ldr	r3, [pc, #216]	; (8008b28 <pvPortMalloc+0x180>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d050      	beq.n	8008af8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2208      	movs	r2, #8
 8008a5c:	4413      	add	r3, r2
 8008a5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	6a3b      	ldr	r3, [r7, #32]
 8008a66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	1ad2      	subs	r2, r2, r3
 8008a70:	2308      	movs	r3, #8
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d91f      	bls.n	8008ab8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	f003 0307 	and.w	r3, r3, #7
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00a      	beq.n	8008aa0 <pvPortMalloc+0xf8>
	__asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	613b      	str	r3, [r7, #16]
}
 8008a9c:	bf00      	nop
 8008a9e:	e7fe      	b.n	8008a9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	1ad2      	subs	r2, r2, r3
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ab2:	69b8      	ldr	r0, [r7, #24]
 8008ab4:	f000 f908 	bl	8008cc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ab8:	4b1d      	ldr	r3, [pc, #116]	; (8008b30 <pvPortMalloc+0x188>)
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	4a1b      	ldr	r2, [pc, #108]	; (8008b30 <pvPortMalloc+0x188>)
 8008ac4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ac6:	4b1a      	ldr	r3, [pc, #104]	; (8008b30 <pvPortMalloc+0x188>)
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	4b1b      	ldr	r3, [pc, #108]	; (8008b38 <pvPortMalloc+0x190>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d203      	bcs.n	8008ada <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ad2:	4b17      	ldr	r3, [pc, #92]	; (8008b30 <pvPortMalloc+0x188>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a18      	ldr	r2, [pc, #96]	; (8008b38 <pvPortMalloc+0x190>)
 8008ad8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	4b13      	ldr	r3, [pc, #76]	; (8008b2c <pvPortMalloc+0x184>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	2200      	movs	r2, #0
 8008aec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008aee:	4b13      	ldr	r3, [pc, #76]	; (8008b3c <pvPortMalloc+0x194>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3301      	adds	r3, #1
 8008af4:	4a11      	ldr	r2, [pc, #68]	; (8008b3c <pvPortMalloc+0x194>)
 8008af6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008af8:	f7ff fa5e 	bl	8007fb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	f003 0307 	and.w	r3, r3, #7
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00a      	beq.n	8008b1c <pvPortMalloc+0x174>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	60fb      	str	r3, [r7, #12]
}
 8008b18:	bf00      	nop
 8008b1a:	e7fe      	b.n	8008b1a <pvPortMalloc+0x172>
	return pvReturn;
 8008b1c:	69fb      	ldr	r3, [r7, #28]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3728      	adds	r7, #40	; 0x28
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	200044b0 	.word	0x200044b0
 8008b2c:	200044c4 	.word	0x200044c4
 8008b30:	200044b4 	.word	0x200044b4
 8008b34:	200044a8 	.word	0x200044a8
 8008b38:	200044b8 	.word	0x200044b8
 8008b3c:	200044bc 	.word	0x200044bc

08008b40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d04d      	beq.n	8008bee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b52:	2308      	movs	r3, #8
 8008b54:	425b      	negs	r3, r3
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	4413      	add	r3, r2
 8008b5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	685a      	ldr	r2, [r3, #4]
 8008b64:	4b24      	ldr	r3, [pc, #144]	; (8008bf8 <vPortFree+0xb8>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4013      	ands	r3, r2
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10a      	bne.n	8008b84 <vPortFree+0x44>
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	60fb      	str	r3, [r7, #12]
}
 8008b80:	bf00      	nop
 8008b82:	e7fe      	b.n	8008b82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00a      	beq.n	8008ba2 <vPortFree+0x62>
	__asm volatile
 8008b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b90:	f383 8811 	msr	BASEPRI, r3
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	60bb      	str	r3, [r7, #8]
}
 8008b9e:	bf00      	nop
 8008ba0:	e7fe      	b.n	8008ba0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	4b14      	ldr	r3, [pc, #80]	; (8008bf8 <vPortFree+0xb8>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4013      	ands	r3, r2
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d01e      	beq.n	8008bee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d11a      	bne.n	8008bee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	4b0e      	ldr	r3, [pc, #56]	; (8008bf8 <vPortFree+0xb8>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	43db      	mvns	r3, r3
 8008bc2:	401a      	ands	r2, r3
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008bc8:	f7ff f9e8 	bl	8007f9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	4b0a      	ldr	r3, [pc, #40]	; (8008bfc <vPortFree+0xbc>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	4a09      	ldr	r2, [pc, #36]	; (8008bfc <vPortFree+0xbc>)
 8008bd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008bda:	6938      	ldr	r0, [r7, #16]
 8008bdc:	f000 f874 	bl	8008cc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008be0:	4b07      	ldr	r3, [pc, #28]	; (8008c00 <vPortFree+0xc0>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3301      	adds	r3, #1
 8008be6:	4a06      	ldr	r2, [pc, #24]	; (8008c00 <vPortFree+0xc0>)
 8008be8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008bea:	f7ff f9e5 	bl	8007fb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008bee:	bf00      	nop
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	200044c4 	.word	0x200044c4
 8008bfc:	200044b4 	.word	0x200044b4
 8008c00:	200044c0 	.word	0x200044c0

08008c04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c10:	4b27      	ldr	r3, [pc, #156]	; (8008cb0 <prvHeapInit+0xac>)
 8008c12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f003 0307 	and.w	r3, r3, #7
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00c      	beq.n	8008c38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	3307      	adds	r3, #7
 8008c22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f023 0307 	bic.w	r3, r3, #7
 8008c2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	4a1f      	ldr	r2, [pc, #124]	; (8008cb0 <prvHeapInit+0xac>)
 8008c34:	4413      	add	r3, r2
 8008c36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c3c:	4a1d      	ldr	r2, [pc, #116]	; (8008cb4 <prvHeapInit+0xb0>)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c42:	4b1c      	ldr	r3, [pc, #112]	; (8008cb4 <prvHeapInit+0xb0>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c50:	2208      	movs	r2, #8
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	1a9b      	subs	r3, r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f023 0307 	bic.w	r3, r3, #7
 8008c5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4a15      	ldr	r2, [pc, #84]	; (8008cb8 <prvHeapInit+0xb4>)
 8008c64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c66:	4b14      	ldr	r3, [pc, #80]	; (8008cb8 <prvHeapInit+0xb4>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c6e:	4b12      	ldr	r3, [pc, #72]	; (8008cb8 <prvHeapInit+0xb4>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2200      	movs	r2, #0
 8008c74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	1ad2      	subs	r2, r2, r3
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c84:	4b0c      	ldr	r3, [pc, #48]	; (8008cb8 <prvHeapInit+0xb4>)
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	4a0a      	ldr	r2, [pc, #40]	; (8008cbc <prvHeapInit+0xb8>)
 8008c92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	4a09      	ldr	r2, [pc, #36]	; (8008cc0 <prvHeapInit+0xbc>)
 8008c9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c9c:	4b09      	ldr	r3, [pc, #36]	; (8008cc4 <prvHeapInit+0xc0>)
 8008c9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ca2:	601a      	str	r2, [r3, #0]
}
 8008ca4:	bf00      	nop
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	200008a8 	.word	0x200008a8
 8008cb4:	200044a8 	.word	0x200044a8
 8008cb8:	200044b0 	.word	0x200044b0
 8008cbc:	200044b8 	.word	0x200044b8
 8008cc0:	200044b4 	.word	0x200044b4
 8008cc4:	200044c4 	.word	0x200044c4

08008cc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008cd0:	4b28      	ldr	r3, [pc, #160]	; (8008d74 <prvInsertBlockIntoFreeList+0xac>)
 8008cd2:	60fb      	str	r3, [r7, #12]
 8008cd4:	e002      	b.n	8008cdc <prvInsertBlockIntoFreeList+0x14>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	60fb      	str	r3, [r7, #12]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d8f7      	bhi.n	8008cd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d108      	bne.n	8008d0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	441a      	add	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	441a      	add	r2, r3
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d118      	bne.n	8008d50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	4b15      	ldr	r3, [pc, #84]	; (8008d78 <prvInsertBlockIntoFreeList+0xb0>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d00d      	beq.n	8008d46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685a      	ldr	r2, [r3, #4]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	441a      	add	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	e008      	b.n	8008d58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d46:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <prvInsertBlockIntoFreeList+0xb0>)
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	601a      	str	r2, [r3, #0]
 8008d4e:	e003      	b.n	8008d58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d002      	beq.n	8008d66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d66:	bf00      	nop
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	200044a8 	.word	0x200044a8
 8008d78:	200044b0 	.word	0x200044b0

08008d7c <memset>:
 8008d7c:	4402      	add	r2, r0
 8008d7e:	4603      	mov	r3, r0
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d100      	bne.n	8008d86 <memset+0xa>
 8008d84:	4770      	bx	lr
 8008d86:	f803 1b01 	strb.w	r1, [r3], #1
 8008d8a:	e7f9      	b.n	8008d80 <memset+0x4>

08008d8c <__errno>:
 8008d8c:	4b01      	ldr	r3, [pc, #4]	; (8008d94 <__errno+0x8>)
 8008d8e:	6818      	ldr	r0, [r3, #0]
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	200000ec 	.word	0x200000ec

08008d98 <__libc_init_array>:
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	4d0d      	ldr	r5, [pc, #52]	; (8008dd0 <__libc_init_array+0x38>)
 8008d9c:	4c0d      	ldr	r4, [pc, #52]	; (8008dd4 <__libc_init_array+0x3c>)
 8008d9e:	1b64      	subs	r4, r4, r5
 8008da0:	10a4      	asrs	r4, r4, #2
 8008da2:	2600      	movs	r6, #0
 8008da4:	42a6      	cmp	r6, r4
 8008da6:	d109      	bne.n	8008dbc <__libc_init_array+0x24>
 8008da8:	4d0b      	ldr	r5, [pc, #44]	; (8008dd8 <__libc_init_array+0x40>)
 8008daa:	4c0c      	ldr	r4, [pc, #48]	; (8008ddc <__libc_init_array+0x44>)
 8008dac:	f000 fd9a 	bl	80098e4 <_init>
 8008db0:	1b64      	subs	r4, r4, r5
 8008db2:	10a4      	asrs	r4, r4, #2
 8008db4:	2600      	movs	r6, #0
 8008db6:	42a6      	cmp	r6, r4
 8008db8:	d105      	bne.n	8008dc6 <__libc_init_array+0x2e>
 8008dba:	bd70      	pop	{r4, r5, r6, pc}
 8008dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc0:	4798      	blx	r3
 8008dc2:	3601      	adds	r6, #1
 8008dc4:	e7ee      	b.n	8008da4 <__libc_init_array+0xc>
 8008dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dca:	4798      	blx	r3
 8008dcc:	3601      	adds	r6, #1
 8008dce:	e7f2      	b.n	8008db6 <__libc_init_array+0x1e>
 8008dd0:	08009a40 	.word	0x08009a40
 8008dd4:	08009a40 	.word	0x08009a40
 8008dd8:	08009a40 	.word	0x08009a40
 8008ddc:	08009a44 	.word	0x08009a44

08008de0 <atan2>:
 8008de0:	f000 bafe 	b.w	80093e0 <__ieee754_atan2>
 8008de4:	0000      	movs	r0, r0
	...

08008de8 <log>:
 8008de8:	b538      	push	{r3, r4, r5, lr}
 8008dea:	ed2d 8b02 	vpush	{d8}
 8008dee:	ec55 4b10 	vmov	r4, r5, d0
 8008df2:	f000 fbbd 	bl	8009570 <__ieee754_log>
 8008df6:	4622      	mov	r2, r4
 8008df8:	462b      	mov	r3, r5
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	eeb0 8a40 	vmov.f32	s16, s0
 8008e02:	eef0 8a60 	vmov.f32	s17, s1
 8008e06:	f7f7 fe41 	bl	8000a8c <__aeabi_dcmpun>
 8008e0a:	b998      	cbnz	r0, 8008e34 <log+0x4c>
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	2300      	movs	r3, #0
 8008e10:	4620      	mov	r0, r4
 8008e12:	4629      	mov	r1, r5
 8008e14:	f7f7 fe30 	bl	8000a78 <__aeabi_dcmpgt>
 8008e18:	b960      	cbnz	r0, 8008e34 <log+0x4c>
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	4620      	mov	r0, r4
 8008e20:	4629      	mov	r1, r5
 8008e22:	f7f7 fe01 	bl	8000a28 <__aeabi_dcmpeq>
 8008e26:	b160      	cbz	r0, 8008e42 <log+0x5a>
 8008e28:	f7ff ffb0 	bl	8008d8c <__errno>
 8008e2c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8008e58 <log+0x70>
 8008e30:	2322      	movs	r3, #34	; 0x22
 8008e32:	6003      	str	r3, [r0, #0]
 8008e34:	eeb0 0a48 	vmov.f32	s0, s16
 8008e38:	eef0 0a68 	vmov.f32	s1, s17
 8008e3c:	ecbd 8b02 	vpop	{d8}
 8008e40:	bd38      	pop	{r3, r4, r5, pc}
 8008e42:	f7ff ffa3 	bl	8008d8c <__errno>
 8008e46:	ecbd 8b02 	vpop	{d8}
 8008e4a:	2321      	movs	r3, #33	; 0x21
 8008e4c:	6003      	str	r3, [r0, #0]
 8008e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e52:	4803      	ldr	r0, [pc, #12]	; (8008e60 <log+0x78>)
 8008e54:	f000 b9e0 	b.w	8009218 <nan>
 8008e58:	00000000 	.word	0x00000000
 8008e5c:	fff00000 	.word	0xfff00000
 8008e60:	080099c4 	.word	0x080099c4

08008e64 <sqrt>:
 8008e64:	b538      	push	{r3, r4, r5, lr}
 8008e66:	ed2d 8b02 	vpush	{d8}
 8008e6a:	ec55 4b10 	vmov	r4, r5, d0
 8008e6e:	f000 f9db 	bl	8009228 <__ieee754_sqrt>
 8008e72:	4622      	mov	r2, r4
 8008e74:	462b      	mov	r3, r5
 8008e76:	4620      	mov	r0, r4
 8008e78:	4629      	mov	r1, r5
 8008e7a:	eeb0 8a40 	vmov.f32	s16, s0
 8008e7e:	eef0 8a60 	vmov.f32	s17, s1
 8008e82:	f7f7 fe03 	bl	8000a8c <__aeabi_dcmpun>
 8008e86:	b990      	cbnz	r0, 8008eae <sqrt+0x4a>
 8008e88:	2200      	movs	r2, #0
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	4629      	mov	r1, r5
 8008e90:	f7f7 fdd4 	bl	8000a3c <__aeabi_dcmplt>
 8008e94:	b158      	cbz	r0, 8008eae <sqrt+0x4a>
 8008e96:	f7ff ff79 	bl	8008d8c <__errno>
 8008e9a:	2321      	movs	r3, #33	; 0x21
 8008e9c:	6003      	str	r3, [r0, #0]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	4610      	mov	r0, r2
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	f7f7 fc81 	bl	80007ac <__aeabi_ddiv>
 8008eaa:	ec41 0b18 	vmov	d8, r0, r1
 8008eae:	eeb0 0a48 	vmov.f32	s0, s16
 8008eb2:	eef0 0a68 	vmov.f32	s1, s17
 8008eb6:	ecbd 8b02 	vpop	{d8}
 8008eba:	bd38      	pop	{r3, r4, r5, pc}
 8008ebc:	0000      	movs	r0, r0
	...

08008ec0 <atan>:
 8008ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec4:	ec55 4b10 	vmov	r4, r5, d0
 8008ec8:	4bc3      	ldr	r3, [pc, #780]	; (80091d8 <atan+0x318>)
 8008eca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008ece:	429e      	cmp	r6, r3
 8008ed0:	46ab      	mov	fp, r5
 8008ed2:	dd18      	ble.n	8008f06 <atan+0x46>
 8008ed4:	4bc1      	ldr	r3, [pc, #772]	; (80091dc <atan+0x31c>)
 8008ed6:	429e      	cmp	r6, r3
 8008ed8:	dc01      	bgt.n	8008ede <atan+0x1e>
 8008eda:	d109      	bne.n	8008ef0 <atan+0x30>
 8008edc:	b144      	cbz	r4, 8008ef0 <atan+0x30>
 8008ede:	4622      	mov	r2, r4
 8008ee0:	462b      	mov	r3, r5
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	f7f7 f981 	bl	80001ec <__adddf3>
 8008eea:	4604      	mov	r4, r0
 8008eec:	460d      	mov	r5, r1
 8008eee:	e006      	b.n	8008efe <atan+0x3e>
 8008ef0:	f1bb 0f00 	cmp.w	fp, #0
 8008ef4:	f300 8131 	bgt.w	800915a <atan+0x29a>
 8008ef8:	a59b      	add	r5, pc, #620	; (adr r5, 8009168 <atan+0x2a8>)
 8008efa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008efe:	ec45 4b10 	vmov	d0, r4, r5
 8008f02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f06:	4bb6      	ldr	r3, [pc, #728]	; (80091e0 <atan+0x320>)
 8008f08:	429e      	cmp	r6, r3
 8008f0a:	dc14      	bgt.n	8008f36 <atan+0x76>
 8008f0c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008f10:	429e      	cmp	r6, r3
 8008f12:	dc0d      	bgt.n	8008f30 <atan+0x70>
 8008f14:	a396      	add	r3, pc, #600	; (adr r3, 8009170 <atan+0x2b0>)
 8008f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1a:	ee10 0a10 	vmov	r0, s0
 8008f1e:	4629      	mov	r1, r5
 8008f20:	f7f7 f964 	bl	80001ec <__adddf3>
 8008f24:	4baf      	ldr	r3, [pc, #700]	; (80091e4 <atan+0x324>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	f7f7 fda6 	bl	8000a78 <__aeabi_dcmpgt>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d1e6      	bne.n	8008efe <atan+0x3e>
 8008f30:	f04f 3aff 	mov.w	sl, #4294967295
 8008f34:	e02b      	b.n	8008f8e <atan+0xce>
 8008f36:	f000 f963 	bl	8009200 <fabs>
 8008f3a:	4bab      	ldr	r3, [pc, #684]	; (80091e8 <atan+0x328>)
 8008f3c:	429e      	cmp	r6, r3
 8008f3e:	ec55 4b10 	vmov	r4, r5, d0
 8008f42:	f300 80bf 	bgt.w	80090c4 <atan+0x204>
 8008f46:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008f4a:	429e      	cmp	r6, r3
 8008f4c:	f300 80a0 	bgt.w	8009090 <atan+0x1d0>
 8008f50:	ee10 2a10 	vmov	r2, s0
 8008f54:	ee10 0a10 	vmov	r0, s0
 8008f58:	462b      	mov	r3, r5
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	f7f7 f946 	bl	80001ec <__adddf3>
 8008f60:	4ba0      	ldr	r3, [pc, #640]	; (80091e4 <atan+0x324>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	f7f7 f940 	bl	80001e8 <__aeabi_dsub>
 8008f68:	2200      	movs	r2, #0
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	460f      	mov	r7, r1
 8008f6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f72:	4620      	mov	r0, r4
 8008f74:	4629      	mov	r1, r5
 8008f76:	f7f7 f939 	bl	80001ec <__adddf3>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	4630      	mov	r0, r6
 8008f80:	4639      	mov	r1, r7
 8008f82:	f7f7 fc13 	bl	80007ac <__aeabi_ddiv>
 8008f86:	f04f 0a00 	mov.w	sl, #0
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	460d      	mov	r5, r1
 8008f8e:	4622      	mov	r2, r4
 8008f90:	462b      	mov	r3, r5
 8008f92:	4620      	mov	r0, r4
 8008f94:	4629      	mov	r1, r5
 8008f96:	f7f7 fadf 	bl	8000558 <__aeabi_dmul>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4680      	mov	r8, r0
 8008fa0:	4689      	mov	r9, r1
 8008fa2:	f7f7 fad9 	bl	8000558 <__aeabi_dmul>
 8008fa6:	a374      	add	r3, pc, #464	; (adr r3, 8009178 <atan+0x2b8>)
 8008fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fac:	4606      	mov	r6, r0
 8008fae:	460f      	mov	r7, r1
 8008fb0:	f7f7 fad2 	bl	8000558 <__aeabi_dmul>
 8008fb4:	a372      	add	r3, pc, #456	; (adr r3, 8009180 <atan+0x2c0>)
 8008fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fba:	f7f7 f917 	bl	80001ec <__adddf3>
 8008fbe:	4632      	mov	r2, r6
 8008fc0:	463b      	mov	r3, r7
 8008fc2:	f7f7 fac9 	bl	8000558 <__aeabi_dmul>
 8008fc6:	a370      	add	r3, pc, #448	; (adr r3, 8009188 <atan+0x2c8>)
 8008fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fcc:	f7f7 f90e 	bl	80001ec <__adddf3>
 8008fd0:	4632      	mov	r2, r6
 8008fd2:	463b      	mov	r3, r7
 8008fd4:	f7f7 fac0 	bl	8000558 <__aeabi_dmul>
 8008fd8:	a36d      	add	r3, pc, #436	; (adr r3, 8009190 <atan+0x2d0>)
 8008fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fde:	f7f7 f905 	bl	80001ec <__adddf3>
 8008fe2:	4632      	mov	r2, r6
 8008fe4:	463b      	mov	r3, r7
 8008fe6:	f7f7 fab7 	bl	8000558 <__aeabi_dmul>
 8008fea:	a36b      	add	r3, pc, #428	; (adr r3, 8009198 <atan+0x2d8>)
 8008fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff0:	f7f7 f8fc 	bl	80001ec <__adddf3>
 8008ff4:	4632      	mov	r2, r6
 8008ff6:	463b      	mov	r3, r7
 8008ff8:	f7f7 faae 	bl	8000558 <__aeabi_dmul>
 8008ffc:	a368      	add	r3, pc, #416	; (adr r3, 80091a0 <atan+0x2e0>)
 8008ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009002:	f7f7 f8f3 	bl	80001ec <__adddf3>
 8009006:	4642      	mov	r2, r8
 8009008:	464b      	mov	r3, r9
 800900a:	f7f7 faa5 	bl	8000558 <__aeabi_dmul>
 800900e:	a366      	add	r3, pc, #408	; (adr r3, 80091a8 <atan+0x2e8>)
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	4680      	mov	r8, r0
 8009016:	4689      	mov	r9, r1
 8009018:	4630      	mov	r0, r6
 800901a:	4639      	mov	r1, r7
 800901c:	f7f7 fa9c 	bl	8000558 <__aeabi_dmul>
 8009020:	a363      	add	r3, pc, #396	; (adr r3, 80091b0 <atan+0x2f0>)
 8009022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009026:	f7f7 f8df 	bl	80001e8 <__aeabi_dsub>
 800902a:	4632      	mov	r2, r6
 800902c:	463b      	mov	r3, r7
 800902e:	f7f7 fa93 	bl	8000558 <__aeabi_dmul>
 8009032:	a361      	add	r3, pc, #388	; (adr r3, 80091b8 <atan+0x2f8>)
 8009034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009038:	f7f7 f8d6 	bl	80001e8 <__aeabi_dsub>
 800903c:	4632      	mov	r2, r6
 800903e:	463b      	mov	r3, r7
 8009040:	f7f7 fa8a 	bl	8000558 <__aeabi_dmul>
 8009044:	a35e      	add	r3, pc, #376	; (adr r3, 80091c0 <atan+0x300>)
 8009046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904a:	f7f7 f8cd 	bl	80001e8 <__aeabi_dsub>
 800904e:	4632      	mov	r2, r6
 8009050:	463b      	mov	r3, r7
 8009052:	f7f7 fa81 	bl	8000558 <__aeabi_dmul>
 8009056:	a35c      	add	r3, pc, #368	; (adr r3, 80091c8 <atan+0x308>)
 8009058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905c:	f7f7 f8c4 	bl	80001e8 <__aeabi_dsub>
 8009060:	4632      	mov	r2, r6
 8009062:	463b      	mov	r3, r7
 8009064:	f7f7 fa78 	bl	8000558 <__aeabi_dmul>
 8009068:	4602      	mov	r2, r0
 800906a:	460b      	mov	r3, r1
 800906c:	4640      	mov	r0, r8
 800906e:	4649      	mov	r1, r9
 8009070:	f7f7 f8bc 	bl	80001ec <__adddf3>
 8009074:	4622      	mov	r2, r4
 8009076:	462b      	mov	r3, r5
 8009078:	f7f7 fa6e 	bl	8000558 <__aeabi_dmul>
 800907c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	d14b      	bne.n	800911e <atan+0x25e>
 8009086:	4620      	mov	r0, r4
 8009088:	4629      	mov	r1, r5
 800908a:	f7f7 f8ad 	bl	80001e8 <__aeabi_dsub>
 800908e:	e72c      	b.n	8008eea <atan+0x2a>
 8009090:	ee10 0a10 	vmov	r0, s0
 8009094:	4b53      	ldr	r3, [pc, #332]	; (80091e4 <atan+0x324>)
 8009096:	2200      	movs	r2, #0
 8009098:	4629      	mov	r1, r5
 800909a:	f7f7 f8a5 	bl	80001e8 <__aeabi_dsub>
 800909e:	4b51      	ldr	r3, [pc, #324]	; (80091e4 <atan+0x324>)
 80090a0:	4606      	mov	r6, r0
 80090a2:	460f      	mov	r7, r1
 80090a4:	2200      	movs	r2, #0
 80090a6:	4620      	mov	r0, r4
 80090a8:	4629      	mov	r1, r5
 80090aa:	f7f7 f89f 	bl	80001ec <__adddf3>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	4630      	mov	r0, r6
 80090b4:	4639      	mov	r1, r7
 80090b6:	f7f7 fb79 	bl	80007ac <__aeabi_ddiv>
 80090ba:	f04f 0a01 	mov.w	sl, #1
 80090be:	4604      	mov	r4, r0
 80090c0:	460d      	mov	r5, r1
 80090c2:	e764      	b.n	8008f8e <atan+0xce>
 80090c4:	4b49      	ldr	r3, [pc, #292]	; (80091ec <atan+0x32c>)
 80090c6:	429e      	cmp	r6, r3
 80090c8:	da1d      	bge.n	8009106 <atan+0x246>
 80090ca:	ee10 0a10 	vmov	r0, s0
 80090ce:	4b48      	ldr	r3, [pc, #288]	; (80091f0 <atan+0x330>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	4629      	mov	r1, r5
 80090d4:	f7f7 f888 	bl	80001e8 <__aeabi_dsub>
 80090d8:	4b45      	ldr	r3, [pc, #276]	; (80091f0 <atan+0x330>)
 80090da:	4606      	mov	r6, r0
 80090dc:	460f      	mov	r7, r1
 80090de:	2200      	movs	r2, #0
 80090e0:	4620      	mov	r0, r4
 80090e2:	4629      	mov	r1, r5
 80090e4:	f7f7 fa38 	bl	8000558 <__aeabi_dmul>
 80090e8:	4b3e      	ldr	r3, [pc, #248]	; (80091e4 <atan+0x324>)
 80090ea:	2200      	movs	r2, #0
 80090ec:	f7f7 f87e 	bl	80001ec <__adddf3>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4630      	mov	r0, r6
 80090f6:	4639      	mov	r1, r7
 80090f8:	f7f7 fb58 	bl	80007ac <__aeabi_ddiv>
 80090fc:	f04f 0a02 	mov.w	sl, #2
 8009100:	4604      	mov	r4, r0
 8009102:	460d      	mov	r5, r1
 8009104:	e743      	b.n	8008f8e <atan+0xce>
 8009106:	462b      	mov	r3, r5
 8009108:	ee10 2a10 	vmov	r2, s0
 800910c:	4939      	ldr	r1, [pc, #228]	; (80091f4 <atan+0x334>)
 800910e:	2000      	movs	r0, #0
 8009110:	f7f7 fb4c 	bl	80007ac <__aeabi_ddiv>
 8009114:	f04f 0a03 	mov.w	sl, #3
 8009118:	4604      	mov	r4, r0
 800911a:	460d      	mov	r5, r1
 800911c:	e737      	b.n	8008f8e <atan+0xce>
 800911e:	4b36      	ldr	r3, [pc, #216]	; (80091f8 <atan+0x338>)
 8009120:	4e36      	ldr	r6, [pc, #216]	; (80091fc <atan+0x33c>)
 8009122:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912a:	f7f7 f85d 	bl	80001e8 <__aeabi_dsub>
 800912e:	4622      	mov	r2, r4
 8009130:	462b      	mov	r3, r5
 8009132:	f7f7 f859 	bl	80001e8 <__aeabi_dsub>
 8009136:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800913a:	4602      	mov	r2, r0
 800913c:	460b      	mov	r3, r1
 800913e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009142:	f7f7 f851 	bl	80001e8 <__aeabi_dsub>
 8009146:	f1bb 0f00 	cmp.w	fp, #0
 800914a:	4604      	mov	r4, r0
 800914c:	460d      	mov	r5, r1
 800914e:	f6bf aed6 	bge.w	8008efe <atan+0x3e>
 8009152:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009156:	461d      	mov	r5, r3
 8009158:	e6d1      	b.n	8008efe <atan+0x3e>
 800915a:	a51d      	add	r5, pc, #116	; (adr r5, 80091d0 <atan+0x310>)
 800915c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009160:	e6cd      	b.n	8008efe <atan+0x3e>
 8009162:	bf00      	nop
 8009164:	f3af 8000 	nop.w
 8009168:	54442d18 	.word	0x54442d18
 800916c:	bff921fb 	.word	0xbff921fb
 8009170:	8800759c 	.word	0x8800759c
 8009174:	7e37e43c 	.word	0x7e37e43c
 8009178:	e322da11 	.word	0xe322da11
 800917c:	3f90ad3a 	.word	0x3f90ad3a
 8009180:	24760deb 	.word	0x24760deb
 8009184:	3fa97b4b 	.word	0x3fa97b4b
 8009188:	a0d03d51 	.word	0xa0d03d51
 800918c:	3fb10d66 	.word	0x3fb10d66
 8009190:	c54c206e 	.word	0xc54c206e
 8009194:	3fb745cd 	.word	0x3fb745cd
 8009198:	920083ff 	.word	0x920083ff
 800919c:	3fc24924 	.word	0x3fc24924
 80091a0:	5555550d 	.word	0x5555550d
 80091a4:	3fd55555 	.word	0x3fd55555
 80091a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80091ac:	bfa2b444 	.word	0xbfa2b444
 80091b0:	52defd9a 	.word	0x52defd9a
 80091b4:	3fadde2d 	.word	0x3fadde2d
 80091b8:	af749a6d 	.word	0xaf749a6d
 80091bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80091c0:	fe231671 	.word	0xfe231671
 80091c4:	3fbc71c6 	.word	0x3fbc71c6
 80091c8:	9998ebc4 	.word	0x9998ebc4
 80091cc:	3fc99999 	.word	0x3fc99999
 80091d0:	54442d18 	.word	0x54442d18
 80091d4:	3ff921fb 	.word	0x3ff921fb
 80091d8:	440fffff 	.word	0x440fffff
 80091dc:	7ff00000 	.word	0x7ff00000
 80091e0:	3fdbffff 	.word	0x3fdbffff
 80091e4:	3ff00000 	.word	0x3ff00000
 80091e8:	3ff2ffff 	.word	0x3ff2ffff
 80091ec:	40038000 	.word	0x40038000
 80091f0:	3ff80000 	.word	0x3ff80000
 80091f4:	bff00000 	.word	0xbff00000
 80091f8:	080099e8 	.word	0x080099e8
 80091fc:	080099c8 	.word	0x080099c8

08009200 <fabs>:
 8009200:	ec51 0b10 	vmov	r0, r1, d0
 8009204:	ee10 2a10 	vmov	r2, s0
 8009208:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800920c:	ec43 2b10 	vmov	d0, r2, r3
 8009210:	4770      	bx	lr
 8009212:	0000      	movs	r0, r0
 8009214:	0000      	movs	r0, r0
	...

08009218 <nan>:
 8009218:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009220 <nan+0x8>
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	00000000 	.word	0x00000000
 8009224:	7ff80000 	.word	0x7ff80000

08009228 <__ieee754_sqrt>:
 8009228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	ec55 4b10 	vmov	r4, r5, d0
 8009230:	4e67      	ldr	r6, [pc, #412]	; (80093d0 <__ieee754_sqrt+0x1a8>)
 8009232:	43ae      	bics	r6, r5
 8009234:	ee10 0a10 	vmov	r0, s0
 8009238:	ee10 2a10 	vmov	r2, s0
 800923c:	4629      	mov	r1, r5
 800923e:	462b      	mov	r3, r5
 8009240:	d10d      	bne.n	800925e <__ieee754_sqrt+0x36>
 8009242:	f7f7 f989 	bl	8000558 <__aeabi_dmul>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4620      	mov	r0, r4
 800924c:	4629      	mov	r1, r5
 800924e:	f7f6 ffcd 	bl	80001ec <__adddf3>
 8009252:	4604      	mov	r4, r0
 8009254:	460d      	mov	r5, r1
 8009256:	ec45 4b10 	vmov	d0, r4, r5
 800925a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800925e:	2d00      	cmp	r5, #0
 8009260:	dc0b      	bgt.n	800927a <__ieee754_sqrt+0x52>
 8009262:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009266:	4326      	orrs	r6, r4
 8009268:	d0f5      	beq.n	8009256 <__ieee754_sqrt+0x2e>
 800926a:	b135      	cbz	r5, 800927a <__ieee754_sqrt+0x52>
 800926c:	f7f6 ffbc 	bl	80001e8 <__aeabi_dsub>
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	f7f7 fa9a 	bl	80007ac <__aeabi_ddiv>
 8009278:	e7eb      	b.n	8009252 <__ieee754_sqrt+0x2a>
 800927a:	1509      	asrs	r1, r1, #20
 800927c:	f000 808d 	beq.w	800939a <__ieee754_sqrt+0x172>
 8009280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009284:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800928c:	07c9      	lsls	r1, r1, #31
 800928e:	bf5c      	itt	pl
 8009290:	005b      	lslpl	r3, r3, #1
 8009292:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8009296:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800929a:	bf58      	it	pl
 800929c:	0052      	lslpl	r2, r2, #1
 800929e:	2500      	movs	r5, #0
 80092a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80092a4:	1076      	asrs	r6, r6, #1
 80092a6:	0052      	lsls	r2, r2, #1
 80092a8:	f04f 0e16 	mov.w	lr, #22
 80092ac:	46ac      	mov	ip, r5
 80092ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092b2:	eb0c 0001 	add.w	r0, ip, r1
 80092b6:	4298      	cmp	r0, r3
 80092b8:	bfde      	ittt	le
 80092ba:	1a1b      	suble	r3, r3, r0
 80092bc:	eb00 0c01 	addle.w	ip, r0, r1
 80092c0:	186d      	addle	r5, r5, r1
 80092c2:	005b      	lsls	r3, r3, #1
 80092c4:	f1be 0e01 	subs.w	lr, lr, #1
 80092c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80092cc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80092d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80092d4:	d1ed      	bne.n	80092b2 <__ieee754_sqrt+0x8a>
 80092d6:	4674      	mov	r4, lr
 80092d8:	2720      	movs	r7, #32
 80092da:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80092de:	4563      	cmp	r3, ip
 80092e0:	eb01 000e 	add.w	r0, r1, lr
 80092e4:	dc02      	bgt.n	80092ec <__ieee754_sqrt+0xc4>
 80092e6:	d113      	bne.n	8009310 <__ieee754_sqrt+0xe8>
 80092e8:	4290      	cmp	r0, r2
 80092ea:	d811      	bhi.n	8009310 <__ieee754_sqrt+0xe8>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	eb00 0e01 	add.w	lr, r0, r1
 80092f2:	da57      	bge.n	80093a4 <__ieee754_sqrt+0x17c>
 80092f4:	f1be 0f00 	cmp.w	lr, #0
 80092f8:	db54      	blt.n	80093a4 <__ieee754_sqrt+0x17c>
 80092fa:	f10c 0801 	add.w	r8, ip, #1
 80092fe:	eba3 030c 	sub.w	r3, r3, ip
 8009302:	4290      	cmp	r0, r2
 8009304:	bf88      	it	hi
 8009306:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800930a:	1a12      	subs	r2, r2, r0
 800930c:	440c      	add	r4, r1
 800930e:	46c4      	mov	ip, r8
 8009310:	005b      	lsls	r3, r3, #1
 8009312:	3f01      	subs	r7, #1
 8009314:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009318:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800931c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009320:	d1dd      	bne.n	80092de <__ieee754_sqrt+0xb6>
 8009322:	4313      	orrs	r3, r2
 8009324:	d01b      	beq.n	800935e <__ieee754_sqrt+0x136>
 8009326:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80093d4 <__ieee754_sqrt+0x1ac>
 800932a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80093d8 <__ieee754_sqrt+0x1b0>
 800932e:	e9da 0100 	ldrd	r0, r1, [sl]
 8009332:	e9db 2300 	ldrd	r2, r3, [fp]
 8009336:	f7f6 ff57 	bl	80001e8 <__aeabi_dsub>
 800933a:	e9da 8900 	ldrd	r8, r9, [sl]
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	4640      	mov	r0, r8
 8009344:	4649      	mov	r1, r9
 8009346:	f7f7 fb83 	bl	8000a50 <__aeabi_dcmple>
 800934a:	b140      	cbz	r0, 800935e <__ieee754_sqrt+0x136>
 800934c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009350:	e9da 0100 	ldrd	r0, r1, [sl]
 8009354:	e9db 2300 	ldrd	r2, r3, [fp]
 8009358:	d126      	bne.n	80093a8 <__ieee754_sqrt+0x180>
 800935a:	3501      	adds	r5, #1
 800935c:	463c      	mov	r4, r7
 800935e:	106a      	asrs	r2, r5, #1
 8009360:	0863      	lsrs	r3, r4, #1
 8009362:	07e9      	lsls	r1, r5, #31
 8009364:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009368:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800936c:	bf48      	it	mi
 800936e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009372:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8009376:	461c      	mov	r4, r3
 8009378:	e76d      	b.n	8009256 <__ieee754_sqrt+0x2e>
 800937a:	0ad3      	lsrs	r3, r2, #11
 800937c:	3815      	subs	r0, #21
 800937e:	0552      	lsls	r2, r2, #21
 8009380:	2b00      	cmp	r3, #0
 8009382:	d0fa      	beq.n	800937a <__ieee754_sqrt+0x152>
 8009384:	02dc      	lsls	r4, r3, #11
 8009386:	d50a      	bpl.n	800939e <__ieee754_sqrt+0x176>
 8009388:	f1c1 0420 	rsb	r4, r1, #32
 800938c:	fa22 f404 	lsr.w	r4, r2, r4
 8009390:	1e4d      	subs	r5, r1, #1
 8009392:	408a      	lsls	r2, r1
 8009394:	4323      	orrs	r3, r4
 8009396:	1b41      	subs	r1, r0, r5
 8009398:	e772      	b.n	8009280 <__ieee754_sqrt+0x58>
 800939a:	4608      	mov	r0, r1
 800939c:	e7f0      	b.n	8009380 <__ieee754_sqrt+0x158>
 800939e:	005b      	lsls	r3, r3, #1
 80093a0:	3101      	adds	r1, #1
 80093a2:	e7ef      	b.n	8009384 <__ieee754_sqrt+0x15c>
 80093a4:	46e0      	mov	r8, ip
 80093a6:	e7aa      	b.n	80092fe <__ieee754_sqrt+0xd6>
 80093a8:	f7f6 ff20 	bl	80001ec <__adddf3>
 80093ac:	e9da 8900 	ldrd	r8, r9, [sl]
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	4640      	mov	r0, r8
 80093b6:	4649      	mov	r1, r9
 80093b8:	f7f7 fb40 	bl	8000a3c <__aeabi_dcmplt>
 80093bc:	b120      	cbz	r0, 80093c8 <__ieee754_sqrt+0x1a0>
 80093be:	1ca0      	adds	r0, r4, #2
 80093c0:	bf08      	it	eq
 80093c2:	3501      	addeq	r5, #1
 80093c4:	3402      	adds	r4, #2
 80093c6:	e7ca      	b.n	800935e <__ieee754_sqrt+0x136>
 80093c8:	3401      	adds	r4, #1
 80093ca:	f024 0401 	bic.w	r4, r4, #1
 80093ce:	e7c6      	b.n	800935e <__ieee754_sqrt+0x136>
 80093d0:	7ff00000 	.word	0x7ff00000
 80093d4:	200000f0 	.word	0x200000f0
 80093d8:	200000f8 	.word	0x200000f8
 80093dc:	00000000 	.word	0x00000000

080093e0 <__ieee754_atan2>:
 80093e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e4:	ec57 6b11 	vmov	r6, r7, d1
 80093e8:	4273      	negs	r3, r6
 80093ea:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009568 <__ieee754_atan2+0x188>
 80093ee:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80093f2:	4333      	orrs	r3, r6
 80093f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80093f8:	4543      	cmp	r3, r8
 80093fa:	ec51 0b10 	vmov	r0, r1, d0
 80093fe:	ee11 5a10 	vmov	r5, s2
 8009402:	d80a      	bhi.n	800941a <__ieee754_atan2+0x3a>
 8009404:	4244      	negs	r4, r0
 8009406:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800940a:	4304      	orrs	r4, r0
 800940c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009410:	4544      	cmp	r4, r8
 8009412:	ee10 9a10 	vmov	r9, s0
 8009416:	468e      	mov	lr, r1
 8009418:	d907      	bls.n	800942a <__ieee754_atan2+0x4a>
 800941a:	4632      	mov	r2, r6
 800941c:	463b      	mov	r3, r7
 800941e:	f7f6 fee5 	bl	80001ec <__adddf3>
 8009422:	ec41 0b10 	vmov	d0, r0, r1
 8009426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800942a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800942e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009432:	4334      	orrs	r4, r6
 8009434:	d103      	bne.n	800943e <__ieee754_atan2+0x5e>
 8009436:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800943a:	f7ff bd41 	b.w	8008ec0 <atan>
 800943e:	17bc      	asrs	r4, r7, #30
 8009440:	f004 0402 	and.w	r4, r4, #2
 8009444:	ea53 0909 	orrs.w	r9, r3, r9
 8009448:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800944c:	d107      	bne.n	800945e <__ieee754_atan2+0x7e>
 800944e:	2c02      	cmp	r4, #2
 8009450:	d05f      	beq.n	8009512 <__ieee754_atan2+0x132>
 8009452:	2c03      	cmp	r4, #3
 8009454:	d1e5      	bne.n	8009422 <__ieee754_atan2+0x42>
 8009456:	a140      	add	r1, pc, #256	; (adr r1, 8009558 <__ieee754_atan2+0x178>)
 8009458:	e9d1 0100 	ldrd	r0, r1, [r1]
 800945c:	e7e1      	b.n	8009422 <__ieee754_atan2+0x42>
 800945e:	4315      	orrs	r5, r2
 8009460:	d106      	bne.n	8009470 <__ieee754_atan2+0x90>
 8009462:	f1be 0f00 	cmp.w	lr, #0
 8009466:	da5f      	bge.n	8009528 <__ieee754_atan2+0x148>
 8009468:	a13d      	add	r1, pc, #244	; (adr r1, 8009560 <__ieee754_atan2+0x180>)
 800946a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800946e:	e7d8      	b.n	8009422 <__ieee754_atan2+0x42>
 8009470:	4542      	cmp	r2, r8
 8009472:	d10f      	bne.n	8009494 <__ieee754_atan2+0xb4>
 8009474:	4293      	cmp	r3, r2
 8009476:	f104 34ff 	add.w	r4, r4, #4294967295
 800947a:	d107      	bne.n	800948c <__ieee754_atan2+0xac>
 800947c:	2c02      	cmp	r4, #2
 800947e:	d84c      	bhi.n	800951a <__ieee754_atan2+0x13a>
 8009480:	4b33      	ldr	r3, [pc, #204]	; (8009550 <__ieee754_atan2+0x170>)
 8009482:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009486:	e9d3 0100 	ldrd	r0, r1, [r3]
 800948a:	e7ca      	b.n	8009422 <__ieee754_atan2+0x42>
 800948c:	2c02      	cmp	r4, #2
 800948e:	d848      	bhi.n	8009522 <__ieee754_atan2+0x142>
 8009490:	4b30      	ldr	r3, [pc, #192]	; (8009554 <__ieee754_atan2+0x174>)
 8009492:	e7f6      	b.n	8009482 <__ieee754_atan2+0xa2>
 8009494:	4543      	cmp	r3, r8
 8009496:	d0e4      	beq.n	8009462 <__ieee754_atan2+0x82>
 8009498:	1a9b      	subs	r3, r3, r2
 800949a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800949e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80094a2:	da1e      	bge.n	80094e2 <__ieee754_atan2+0x102>
 80094a4:	2f00      	cmp	r7, #0
 80094a6:	da01      	bge.n	80094ac <__ieee754_atan2+0xcc>
 80094a8:	323c      	adds	r2, #60	; 0x3c
 80094aa:	db1e      	blt.n	80094ea <__ieee754_atan2+0x10a>
 80094ac:	4632      	mov	r2, r6
 80094ae:	463b      	mov	r3, r7
 80094b0:	f7f7 f97c 	bl	80007ac <__aeabi_ddiv>
 80094b4:	ec41 0b10 	vmov	d0, r0, r1
 80094b8:	f7ff fea2 	bl	8009200 <fabs>
 80094bc:	f7ff fd00 	bl	8008ec0 <atan>
 80094c0:	ec51 0b10 	vmov	r0, r1, d0
 80094c4:	2c01      	cmp	r4, #1
 80094c6:	d013      	beq.n	80094f0 <__ieee754_atan2+0x110>
 80094c8:	2c02      	cmp	r4, #2
 80094ca:	d015      	beq.n	80094f8 <__ieee754_atan2+0x118>
 80094cc:	2c00      	cmp	r4, #0
 80094ce:	d0a8      	beq.n	8009422 <__ieee754_atan2+0x42>
 80094d0:	a317      	add	r3, pc, #92	; (adr r3, 8009530 <__ieee754_atan2+0x150>)
 80094d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d6:	f7f6 fe87 	bl	80001e8 <__aeabi_dsub>
 80094da:	a317      	add	r3, pc, #92	; (adr r3, 8009538 <__ieee754_atan2+0x158>)
 80094dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e0:	e014      	b.n	800950c <__ieee754_atan2+0x12c>
 80094e2:	a117      	add	r1, pc, #92	; (adr r1, 8009540 <__ieee754_atan2+0x160>)
 80094e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094e8:	e7ec      	b.n	80094c4 <__ieee754_atan2+0xe4>
 80094ea:	2000      	movs	r0, #0
 80094ec:	2100      	movs	r1, #0
 80094ee:	e7e9      	b.n	80094c4 <__ieee754_atan2+0xe4>
 80094f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094f4:	4619      	mov	r1, r3
 80094f6:	e794      	b.n	8009422 <__ieee754_atan2+0x42>
 80094f8:	a30d      	add	r3, pc, #52	; (adr r3, 8009530 <__ieee754_atan2+0x150>)
 80094fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fe:	f7f6 fe73 	bl	80001e8 <__aeabi_dsub>
 8009502:	4602      	mov	r2, r0
 8009504:	460b      	mov	r3, r1
 8009506:	a10c      	add	r1, pc, #48	; (adr r1, 8009538 <__ieee754_atan2+0x158>)
 8009508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800950c:	f7f6 fe6c 	bl	80001e8 <__aeabi_dsub>
 8009510:	e787      	b.n	8009422 <__ieee754_atan2+0x42>
 8009512:	a109      	add	r1, pc, #36	; (adr r1, 8009538 <__ieee754_atan2+0x158>)
 8009514:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009518:	e783      	b.n	8009422 <__ieee754_atan2+0x42>
 800951a:	a10b      	add	r1, pc, #44	; (adr r1, 8009548 <__ieee754_atan2+0x168>)
 800951c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009520:	e77f      	b.n	8009422 <__ieee754_atan2+0x42>
 8009522:	2000      	movs	r0, #0
 8009524:	2100      	movs	r1, #0
 8009526:	e77c      	b.n	8009422 <__ieee754_atan2+0x42>
 8009528:	a105      	add	r1, pc, #20	; (adr r1, 8009540 <__ieee754_atan2+0x160>)
 800952a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800952e:	e778      	b.n	8009422 <__ieee754_atan2+0x42>
 8009530:	33145c07 	.word	0x33145c07
 8009534:	3ca1a626 	.word	0x3ca1a626
 8009538:	54442d18 	.word	0x54442d18
 800953c:	400921fb 	.word	0x400921fb
 8009540:	54442d18 	.word	0x54442d18
 8009544:	3ff921fb 	.word	0x3ff921fb
 8009548:	54442d18 	.word	0x54442d18
 800954c:	3fe921fb 	.word	0x3fe921fb
 8009550:	08009a08 	.word	0x08009a08
 8009554:	08009a20 	.word	0x08009a20
 8009558:	54442d18 	.word	0x54442d18
 800955c:	c00921fb 	.word	0xc00921fb
 8009560:	54442d18 	.word	0x54442d18
 8009564:	bff921fb 	.word	0xbff921fb
 8009568:	7ff00000 	.word	0x7ff00000
 800956c:	00000000 	.word	0x00000000

08009570 <__ieee754_log>:
 8009570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	ec51 0b10 	vmov	r0, r1, d0
 8009578:	ed2d 8b04 	vpush	{d8-d9}
 800957c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009580:	b083      	sub	sp, #12
 8009582:	460d      	mov	r5, r1
 8009584:	da29      	bge.n	80095da <__ieee754_log+0x6a>
 8009586:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800958a:	4303      	orrs	r3, r0
 800958c:	ee10 2a10 	vmov	r2, s0
 8009590:	d10c      	bne.n	80095ac <__ieee754_log+0x3c>
 8009592:	49cf      	ldr	r1, [pc, #828]	; (80098d0 <__ieee754_log+0x360>)
 8009594:	2200      	movs	r2, #0
 8009596:	2300      	movs	r3, #0
 8009598:	2000      	movs	r0, #0
 800959a:	f7f7 f907 	bl	80007ac <__aeabi_ddiv>
 800959e:	ec41 0b10 	vmov	d0, r0, r1
 80095a2:	b003      	add	sp, #12
 80095a4:	ecbd 8b04 	vpop	{d8-d9}
 80095a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ac:	2900      	cmp	r1, #0
 80095ae:	da05      	bge.n	80095bc <__ieee754_log+0x4c>
 80095b0:	460b      	mov	r3, r1
 80095b2:	f7f6 fe19 	bl	80001e8 <__aeabi_dsub>
 80095b6:	2200      	movs	r2, #0
 80095b8:	2300      	movs	r3, #0
 80095ba:	e7ee      	b.n	800959a <__ieee754_log+0x2a>
 80095bc:	4bc5      	ldr	r3, [pc, #788]	; (80098d4 <__ieee754_log+0x364>)
 80095be:	2200      	movs	r2, #0
 80095c0:	f7f6 ffca 	bl	8000558 <__aeabi_dmul>
 80095c4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80095c8:	460d      	mov	r5, r1
 80095ca:	4ac3      	ldr	r2, [pc, #780]	; (80098d8 <__ieee754_log+0x368>)
 80095cc:	4295      	cmp	r5, r2
 80095ce:	dd06      	ble.n	80095de <__ieee754_log+0x6e>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	f7f6 fe0a 	bl	80001ec <__adddf3>
 80095d8:	e7e1      	b.n	800959e <__ieee754_log+0x2e>
 80095da:	2300      	movs	r3, #0
 80095dc:	e7f5      	b.n	80095ca <__ieee754_log+0x5a>
 80095de:	152c      	asrs	r4, r5, #20
 80095e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80095e4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80095e8:	441c      	add	r4, r3
 80095ea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80095ee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80095f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095f6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80095fa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80095fe:	ea42 0105 	orr.w	r1, r2, r5
 8009602:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009606:	2200      	movs	r2, #0
 8009608:	4bb4      	ldr	r3, [pc, #720]	; (80098dc <__ieee754_log+0x36c>)
 800960a:	f7f6 fded 	bl	80001e8 <__aeabi_dsub>
 800960e:	1cab      	adds	r3, r5, #2
 8009610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009614:	2b02      	cmp	r3, #2
 8009616:	4682      	mov	sl, r0
 8009618:	468b      	mov	fp, r1
 800961a:	f04f 0200 	mov.w	r2, #0
 800961e:	dc53      	bgt.n	80096c8 <__ieee754_log+0x158>
 8009620:	2300      	movs	r3, #0
 8009622:	f7f7 fa01 	bl	8000a28 <__aeabi_dcmpeq>
 8009626:	b1d0      	cbz	r0, 800965e <__ieee754_log+0xee>
 8009628:	2c00      	cmp	r4, #0
 800962a:	f000 8122 	beq.w	8009872 <__ieee754_log+0x302>
 800962e:	4620      	mov	r0, r4
 8009630:	f7f6 ff28 	bl	8000484 <__aeabi_i2d>
 8009634:	a390      	add	r3, pc, #576	; (adr r3, 8009878 <__ieee754_log+0x308>)
 8009636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963a:	4606      	mov	r6, r0
 800963c:	460f      	mov	r7, r1
 800963e:	f7f6 ff8b 	bl	8000558 <__aeabi_dmul>
 8009642:	a38f      	add	r3, pc, #572	; (adr r3, 8009880 <__ieee754_log+0x310>)
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	4604      	mov	r4, r0
 800964a:	460d      	mov	r5, r1
 800964c:	4630      	mov	r0, r6
 800964e:	4639      	mov	r1, r7
 8009650:	f7f6 ff82 	bl	8000558 <__aeabi_dmul>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4620      	mov	r0, r4
 800965a:	4629      	mov	r1, r5
 800965c:	e7ba      	b.n	80095d4 <__ieee754_log+0x64>
 800965e:	a38a      	add	r3, pc, #552	; (adr r3, 8009888 <__ieee754_log+0x318>)
 8009660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009664:	4650      	mov	r0, sl
 8009666:	4659      	mov	r1, fp
 8009668:	f7f6 ff76 	bl	8000558 <__aeabi_dmul>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	2000      	movs	r0, #0
 8009672:	499b      	ldr	r1, [pc, #620]	; (80098e0 <__ieee754_log+0x370>)
 8009674:	f7f6 fdb8 	bl	80001e8 <__aeabi_dsub>
 8009678:	4652      	mov	r2, sl
 800967a:	4606      	mov	r6, r0
 800967c:	460f      	mov	r7, r1
 800967e:	465b      	mov	r3, fp
 8009680:	4650      	mov	r0, sl
 8009682:	4659      	mov	r1, fp
 8009684:	f7f6 ff68 	bl	8000558 <__aeabi_dmul>
 8009688:	4602      	mov	r2, r0
 800968a:	460b      	mov	r3, r1
 800968c:	4630      	mov	r0, r6
 800968e:	4639      	mov	r1, r7
 8009690:	f7f6 ff62 	bl	8000558 <__aeabi_dmul>
 8009694:	4606      	mov	r6, r0
 8009696:	460f      	mov	r7, r1
 8009698:	b914      	cbnz	r4, 80096a0 <__ieee754_log+0x130>
 800969a:	4632      	mov	r2, r6
 800969c:	463b      	mov	r3, r7
 800969e:	e0a2      	b.n	80097e6 <__ieee754_log+0x276>
 80096a0:	4620      	mov	r0, r4
 80096a2:	f7f6 feef 	bl	8000484 <__aeabi_i2d>
 80096a6:	a374      	add	r3, pc, #464	; (adr r3, 8009878 <__ieee754_log+0x308>)
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	4680      	mov	r8, r0
 80096ae:	4689      	mov	r9, r1
 80096b0:	f7f6 ff52 	bl	8000558 <__aeabi_dmul>
 80096b4:	a372      	add	r3, pc, #456	; (adr r3, 8009880 <__ieee754_log+0x310>)
 80096b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ba:	4604      	mov	r4, r0
 80096bc:	460d      	mov	r5, r1
 80096be:	4640      	mov	r0, r8
 80096c0:	4649      	mov	r1, r9
 80096c2:	f7f6 ff49 	bl	8000558 <__aeabi_dmul>
 80096c6:	e0a7      	b.n	8009818 <__ieee754_log+0x2a8>
 80096c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096cc:	f7f6 fd8e 	bl	80001ec <__adddf3>
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	4650      	mov	r0, sl
 80096d6:	4659      	mov	r1, fp
 80096d8:	f7f7 f868 	bl	80007ac <__aeabi_ddiv>
 80096dc:	ec41 0b18 	vmov	d8, r0, r1
 80096e0:	4620      	mov	r0, r4
 80096e2:	f7f6 fecf 	bl	8000484 <__aeabi_i2d>
 80096e6:	ec53 2b18 	vmov	r2, r3, d8
 80096ea:	ec41 0b19 	vmov	d9, r0, r1
 80096ee:	ec51 0b18 	vmov	r0, r1, d8
 80096f2:	f7f6 ff31 	bl	8000558 <__aeabi_dmul>
 80096f6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80096fa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80096fe:	9301      	str	r3, [sp, #4]
 8009700:	4602      	mov	r2, r0
 8009702:	460b      	mov	r3, r1
 8009704:	4680      	mov	r8, r0
 8009706:	4689      	mov	r9, r1
 8009708:	f7f6 ff26 	bl	8000558 <__aeabi_dmul>
 800970c:	a360      	add	r3, pc, #384	; (adr r3, 8009890 <__ieee754_log+0x320>)
 800970e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009712:	4606      	mov	r6, r0
 8009714:	460f      	mov	r7, r1
 8009716:	f7f6 ff1f 	bl	8000558 <__aeabi_dmul>
 800971a:	a35f      	add	r3, pc, #380	; (adr r3, 8009898 <__ieee754_log+0x328>)
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	f7f6 fd64 	bl	80001ec <__adddf3>
 8009724:	4632      	mov	r2, r6
 8009726:	463b      	mov	r3, r7
 8009728:	f7f6 ff16 	bl	8000558 <__aeabi_dmul>
 800972c:	a35c      	add	r3, pc, #368	; (adr r3, 80098a0 <__ieee754_log+0x330>)
 800972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009732:	f7f6 fd5b 	bl	80001ec <__adddf3>
 8009736:	4632      	mov	r2, r6
 8009738:	463b      	mov	r3, r7
 800973a:	f7f6 ff0d 	bl	8000558 <__aeabi_dmul>
 800973e:	a35a      	add	r3, pc, #360	; (adr r3, 80098a8 <__ieee754_log+0x338>)
 8009740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009744:	f7f6 fd52 	bl	80001ec <__adddf3>
 8009748:	4642      	mov	r2, r8
 800974a:	464b      	mov	r3, r9
 800974c:	f7f6 ff04 	bl	8000558 <__aeabi_dmul>
 8009750:	a357      	add	r3, pc, #348	; (adr r3, 80098b0 <__ieee754_log+0x340>)
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	4680      	mov	r8, r0
 8009758:	4689      	mov	r9, r1
 800975a:	4630      	mov	r0, r6
 800975c:	4639      	mov	r1, r7
 800975e:	f7f6 fefb 	bl	8000558 <__aeabi_dmul>
 8009762:	a355      	add	r3, pc, #340	; (adr r3, 80098b8 <__ieee754_log+0x348>)
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	f7f6 fd40 	bl	80001ec <__adddf3>
 800976c:	4632      	mov	r2, r6
 800976e:	463b      	mov	r3, r7
 8009770:	f7f6 fef2 	bl	8000558 <__aeabi_dmul>
 8009774:	a352      	add	r3, pc, #328	; (adr r3, 80098c0 <__ieee754_log+0x350>)
 8009776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977a:	f7f6 fd37 	bl	80001ec <__adddf3>
 800977e:	4632      	mov	r2, r6
 8009780:	463b      	mov	r3, r7
 8009782:	f7f6 fee9 	bl	8000558 <__aeabi_dmul>
 8009786:	460b      	mov	r3, r1
 8009788:	4602      	mov	r2, r0
 800978a:	4649      	mov	r1, r9
 800978c:	4640      	mov	r0, r8
 800978e:	f7f6 fd2d 	bl	80001ec <__adddf3>
 8009792:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8009796:	9b01      	ldr	r3, [sp, #4]
 8009798:	3551      	adds	r5, #81	; 0x51
 800979a:	431d      	orrs	r5, r3
 800979c:	2d00      	cmp	r5, #0
 800979e:	4680      	mov	r8, r0
 80097a0:	4689      	mov	r9, r1
 80097a2:	dd48      	ble.n	8009836 <__ieee754_log+0x2c6>
 80097a4:	4b4e      	ldr	r3, [pc, #312]	; (80098e0 <__ieee754_log+0x370>)
 80097a6:	2200      	movs	r2, #0
 80097a8:	4650      	mov	r0, sl
 80097aa:	4659      	mov	r1, fp
 80097ac:	f7f6 fed4 	bl	8000558 <__aeabi_dmul>
 80097b0:	4652      	mov	r2, sl
 80097b2:	465b      	mov	r3, fp
 80097b4:	f7f6 fed0 	bl	8000558 <__aeabi_dmul>
 80097b8:	4602      	mov	r2, r0
 80097ba:	460b      	mov	r3, r1
 80097bc:	4606      	mov	r6, r0
 80097be:	460f      	mov	r7, r1
 80097c0:	4640      	mov	r0, r8
 80097c2:	4649      	mov	r1, r9
 80097c4:	f7f6 fd12 	bl	80001ec <__adddf3>
 80097c8:	ec53 2b18 	vmov	r2, r3, d8
 80097cc:	f7f6 fec4 	bl	8000558 <__aeabi_dmul>
 80097d0:	4680      	mov	r8, r0
 80097d2:	4689      	mov	r9, r1
 80097d4:	b964      	cbnz	r4, 80097f0 <__ieee754_log+0x280>
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	4630      	mov	r0, r6
 80097dc:	4639      	mov	r1, r7
 80097de:	f7f6 fd03 	bl	80001e8 <__aeabi_dsub>
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	4650      	mov	r0, sl
 80097e8:	4659      	mov	r1, fp
 80097ea:	f7f6 fcfd 	bl	80001e8 <__aeabi_dsub>
 80097ee:	e6d6      	b.n	800959e <__ieee754_log+0x2e>
 80097f0:	a321      	add	r3, pc, #132	; (adr r3, 8009878 <__ieee754_log+0x308>)
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	ec51 0b19 	vmov	r0, r1, d9
 80097fa:	f7f6 fead 	bl	8000558 <__aeabi_dmul>
 80097fe:	a320      	add	r3, pc, #128	; (adr r3, 8009880 <__ieee754_log+0x310>)
 8009800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009804:	4604      	mov	r4, r0
 8009806:	460d      	mov	r5, r1
 8009808:	ec51 0b19 	vmov	r0, r1, d9
 800980c:	f7f6 fea4 	bl	8000558 <__aeabi_dmul>
 8009810:	4642      	mov	r2, r8
 8009812:	464b      	mov	r3, r9
 8009814:	f7f6 fcea 	bl	80001ec <__adddf3>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	4630      	mov	r0, r6
 800981e:	4639      	mov	r1, r7
 8009820:	f7f6 fce2 	bl	80001e8 <__aeabi_dsub>
 8009824:	4652      	mov	r2, sl
 8009826:	465b      	mov	r3, fp
 8009828:	f7f6 fcde 	bl	80001e8 <__aeabi_dsub>
 800982c:	4602      	mov	r2, r0
 800982e:	460b      	mov	r3, r1
 8009830:	4620      	mov	r0, r4
 8009832:	4629      	mov	r1, r5
 8009834:	e7d9      	b.n	80097ea <__ieee754_log+0x27a>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	4650      	mov	r0, sl
 800983c:	4659      	mov	r1, fp
 800983e:	f7f6 fcd3 	bl	80001e8 <__aeabi_dsub>
 8009842:	ec53 2b18 	vmov	r2, r3, d8
 8009846:	f7f6 fe87 	bl	8000558 <__aeabi_dmul>
 800984a:	4606      	mov	r6, r0
 800984c:	460f      	mov	r7, r1
 800984e:	2c00      	cmp	r4, #0
 8009850:	f43f af23 	beq.w	800969a <__ieee754_log+0x12a>
 8009854:	a308      	add	r3, pc, #32	; (adr r3, 8009878 <__ieee754_log+0x308>)
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	ec51 0b19 	vmov	r0, r1, d9
 800985e:	f7f6 fe7b 	bl	8000558 <__aeabi_dmul>
 8009862:	a307      	add	r3, pc, #28	; (adr r3, 8009880 <__ieee754_log+0x310>)
 8009864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009868:	4604      	mov	r4, r0
 800986a:	460d      	mov	r5, r1
 800986c:	ec51 0b19 	vmov	r0, r1, d9
 8009870:	e727      	b.n	80096c2 <__ieee754_log+0x152>
 8009872:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80098c8 <__ieee754_log+0x358>
 8009876:	e694      	b.n	80095a2 <__ieee754_log+0x32>
 8009878:	fee00000 	.word	0xfee00000
 800987c:	3fe62e42 	.word	0x3fe62e42
 8009880:	35793c76 	.word	0x35793c76
 8009884:	3dea39ef 	.word	0x3dea39ef
 8009888:	55555555 	.word	0x55555555
 800988c:	3fd55555 	.word	0x3fd55555
 8009890:	df3e5244 	.word	0xdf3e5244
 8009894:	3fc2f112 	.word	0x3fc2f112
 8009898:	96cb03de 	.word	0x96cb03de
 800989c:	3fc74664 	.word	0x3fc74664
 80098a0:	94229359 	.word	0x94229359
 80098a4:	3fd24924 	.word	0x3fd24924
 80098a8:	55555593 	.word	0x55555593
 80098ac:	3fe55555 	.word	0x3fe55555
 80098b0:	d078c69f 	.word	0xd078c69f
 80098b4:	3fc39a09 	.word	0x3fc39a09
 80098b8:	1d8e78af 	.word	0x1d8e78af
 80098bc:	3fcc71c5 	.word	0x3fcc71c5
 80098c0:	9997fa04 	.word	0x9997fa04
 80098c4:	3fd99999 	.word	0x3fd99999
	...
 80098d0:	c3500000 	.word	0xc3500000
 80098d4:	43500000 	.word	0x43500000
 80098d8:	7fefffff 	.word	0x7fefffff
 80098dc:	3ff00000 	.word	0x3ff00000
 80098e0:	3fe00000 	.word	0x3fe00000

080098e4 <_init>:
 80098e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e6:	bf00      	nop
 80098e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ea:	bc08      	pop	{r3}
 80098ec:	469e      	mov	lr, r3
 80098ee:	4770      	bx	lr

080098f0 <_fini>:
 80098f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f2:	bf00      	nop
 80098f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098f6:	bc08      	pop	{r3}
 80098f8:	469e      	mov	lr, r3
 80098fa:	4770      	bx	lr
