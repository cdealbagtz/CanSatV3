
CanSat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004f3c  08004f3c  00014f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fdc  08004fdc  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  08004fdc  08004fdc  00014fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fe4  08004fe4  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fe8  08004fe8  00014fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08004fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041cc  20000038  08005024  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004204  08005024  00024204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011567  00000000  00000000  000200ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031e9  00000000  00000000  00031612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  00034800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc4  00000000  00000000  00035a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ece  00000000  00000000  000367c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014f60  00000000  00000000  0004e692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009601c  00000000  00000000  000635f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004914  00000000  00000000  000f9610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000fdf24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000038 	.word	0x20000038
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f24 	.word	0x08004f24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000003c 	.word	0x2000003c
 80001dc:	08004f24 	.word	0x08004f24

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <task_init_10ms>:

/**
  * @fn  	task_init_10ms
  * @brief  Inicializaciones para tarea de 10 milisegundos
  */
void task_init_10ms(void){
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <task_10ms>:

/**
  * @fn  	task_10ms
  * @brief  Ejecucion de tareas de 10 milisegundos
  */
void task_10ms(void){
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
	//NRF24_PackageAvailable();
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <task_init_100ms>:

/**
  * @fn  	task_init_100ms
  * @brief  Inicializaciones para tarea de 100 milisegundos
  */
void task_init_100ms(void){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	//NRF24_RxMode(PIPE0_Addres, NRF24_Cannel);
	NRF24_TxMode(PIPE0_Addres, NRF24_Cannel);
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <task_init_100ms+0x18>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	4619      	mov	r1, r3
 8000502:	4804      	ldr	r0, [pc, #16]	; (8000514 <task_init_100ms+0x1c>)
 8000504:	f000 fb7e 	bl	8000c04 <NRF24_TxMode>
	NRF24_ActualConfiguration();
 8000508:	f000 f936 	bl	8000778 <NRF24_ActualConfiguration>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000025 	.word	0x20000025
 8000514:	20000020 	.word	0x20000020

08000518 <task_100ms>:

/**
  * @fn  	task_100ms
  * @brief  Ejecucion de tareas de 100 milisegundos
  */
void task_100ms(void){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	NRF24_Transmit(test);
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <task_100ms+0x10>)
 800051e:	f000 fba5 	bl	8000c6c <NRF24_Transmit>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000000 	.word	0x20000000

0800052c <task_init_1000ms>:

/**
  * @fn  	task_init_1000ms
  * @brief  Inicializaciones para tarea de 1000 milisegundos
  */
void task_init_1000ms(void){
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <task_1000ms>:

/**
  * @fn  	task_1000ms
  * @brief  Ejecucion de tareas de 1000 milisegundos
  */
void task_1000ms(void){
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <NRF24_write>:

uint8_t PIPE0_Addres[5] = {0xC5,0xC5,0xC5,0xC5,0xC5};
uint8_t NRF24_Cannel    = 0x56;


void NRF24_write(uint8_t Adr, uint8_t data){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	460a      	mov	r2, r1
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	4613      	mov	r3, r2
 8000556:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	f043 0320 	orr.w	r3, r3, #32
 800055e:	b2db      	uxtb	r3, r3
 8000560:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <NRF24_write+0x54>)
 800056a:	f001 fd65 	bl	8002038 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	2201      	movs	r2, #1
 8000572:	4619      	mov	r1, r3
 8000574:	480a      	ldr	r0, [pc, #40]	; (80005a0 <NRF24_write+0x58>)
 8000576:	f002 fab9 	bl	8002aec <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &data, 1);
 800057a:	1dbb      	adds	r3, r7, #6
 800057c:	2201      	movs	r2, #1
 800057e:	4619      	mov	r1, r3
 8000580:	4807      	ldr	r0, [pc, #28]	; (80005a0 <NRF24_write+0x58>)
 8000582:	f002 fab3 	bl	8002aec <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <NRF24_write+0x54>)
 800058e:	f001 fd53 	bl	8002038 <HAL_GPIO_WritePin>
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40020400 	.word	0x40020400
 80005a0:	2000034c 	.word	0x2000034c

080005a4 <NRF24_Addr_write>:

void NRF24_Addr_write(uint8_t Adr,uint8_t *ADDRESS){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	6039      	str	r1, [r7, #0]
 80005ae:	71fb      	strb	r3, [r7, #7]
	Adr |= W_REGISTER;
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	f043 0320 	orr.w	r3, r3, #32
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[5];
	buffer[0] = ADDRESS[4];
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	791b      	ldrb	r3, [r3, #4]
 80005be:	723b      	strb	r3, [r7, #8]
	buffer[1] = ADDRESS[3];
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	78db      	ldrb	r3, [r3, #3]
 80005c4:	727b      	strb	r3, [r7, #9]
	buffer[2] = ADDRESS[2];
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	789b      	ldrb	r3, [r3, #2]
 80005ca:	72bb      	strb	r3, [r7, #10]
	buffer[3] = ADDRESS[1];
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	785b      	ldrb	r3, [r3, #1]
 80005d0:	72fb      	strb	r3, [r7, #11]
	buffer[4] = ADDRESS[0];
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	733b      	strb	r3, [r7, #12]

	NRF24_select();
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005de:	4812      	ldr	r0, [pc, #72]	; (8000628 <NRF24_Addr_write+0x84>)
 80005e0:	f001 fd2a 	bl	8002038 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 80005e4:	1dfb      	adds	r3, r7, #7
 80005e6:	2201      	movs	r2, #1
 80005e8:	4619      	mov	r1, r3
 80005ea:	4810      	ldr	r0, [pc, #64]	; (800062c <NRF24_Addr_write+0x88>)
 80005ec:	f002 fa7e 	bl	8002aec <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
 80005f4:	e00b      	b.n	800060e <NRF24_Addr_write+0x6a>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &buffer[n], 1);
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	f107 0208 	add.w	r2, r7, #8
 80005fc:	4413      	add	r3, r2
 80005fe:	2201      	movs	r2, #1
 8000600:	4619      	mov	r1, r3
 8000602:	480a      	ldr	r0, [pc, #40]	; (800062c <NRF24_Addr_write+0x88>)
 8000604:	f002 fa72 	bl	8002aec <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	3301      	adds	r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	2b04      	cmp	r3, #4
 8000612:	d9f0      	bls.n	80005f6 <NRF24_Addr_write+0x52>
	}

	NRF24_unselect();
 8000614:	2201      	movs	r2, #1
 8000616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <NRF24_Addr_write+0x84>)
 800061c:	f001 fd0c 	bl	8002038 <HAL_GPIO_WritePin>

}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40020400 	.word	0x40020400
 800062c:	2000034c 	.word	0x2000034c

08000630 <NRF24_read>:

uint8_t NRF24_read(uint8_t Adr){
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
	uint8_t Replay;
	NRF24_select();
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <NRF24_read+0x48>)
 8000642:	f001 fcf9 	bl	8002038 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	2201      	movs	r2, #1
 800064a:	4619      	mov	r1, r3
 800064c:	480b      	ldr	r0, [pc, #44]	; (800067c <NRF24_read+0x4c>)
 800064e:	f002 fa4d 	bl	8002aec <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(SPI_NRF24, &Replay, 1);
 8000652:	f107 030f 	add.w	r3, r7, #15
 8000656:	2201      	movs	r2, #1
 8000658:	4619      	mov	r1, r3
 800065a:	4808      	ldr	r0, [pc, #32]	; (800067c <NRF24_read+0x4c>)
 800065c:	f002 faf8 	bl	8002c50 <HAL_SPI_Receive_DMA>
	NRF24_unselect();
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000666:	4804      	ldr	r0, [pc, #16]	; (8000678 <NRF24_read+0x48>)
 8000668:	f001 fce6 	bl	8002038 <HAL_GPIO_WritePin>
	return Replay;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40020400 	.word	0x40020400
 800067c:	2000034c 	.word	0x2000034c

08000680 <NRF24_Addr_read>:

void NRF24_Addr_read(uint8_t Adr){
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[5];
	NRF24_select();
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000690:	4836      	ldr	r0, [pc, #216]	; (800076c <NRF24_Addr_read+0xec>)
 8000692:	f001 fcd1 	bl	8002038 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	2201      	movs	r2, #1
 800069a:	4619      	mov	r1, r3
 800069c:	4834      	ldr	r0, [pc, #208]	; (8000770 <NRF24_Addr_read+0xf0>)
 800069e:	f002 fa25 	bl	8002aec <HAL_SPI_Transmit_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]
 80006a6:	e00b      	b.n	80006c0 <NRF24_Addr_read+0x40>
		HAL_SPI_Receive_DMA(SPI_NRF24, &Buffer[i], 1);
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	f107 0208 	add.w	r2, r7, #8
 80006ae:	4413      	add	r3, r2
 80006b0:	2201      	movs	r2, #1
 80006b2:	4619      	mov	r1, r3
 80006b4:	482e      	ldr	r0, [pc, #184]	; (8000770 <NRF24_Addr_read+0xf0>)
 80006b6:	f002 facb 	bl	8002c50 <HAL_SPI_Receive_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	3301      	adds	r3, #1
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	d9f0      	bls.n	80006a8 <NRF24_Addr_read+0x28>
	}
	NRF24_unselect();
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006cc:	4827      	ldr	r0, [pc, #156]	; (800076c <NRF24_Addr_read+0xec>)
 80006ce:	f001 fcb3 	bl	8002038 <HAL_GPIO_WritePin>
	switch (Adr) {
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b10      	cmp	r3, #16
 80006d6:	d030      	beq.n	800073a <NRF24_Addr_read+0xba>
 80006d8:	2b10      	cmp	r3, #16
 80006da:	dc43      	bgt.n	8000764 <NRF24_Addr_read+0xe4>
 80006dc:	2b0a      	cmp	r3, #10
 80006de:	d002      	beq.n	80006e6 <NRF24_Addr_read+0x66>
 80006e0:	2b0b      	cmp	r3, #11
 80006e2:	d015      	beq.n	8000710 <NRF24_Addr_read+0x90>
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
			break;
	}
}
 80006e4:	e03e      	b.n	8000764 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[4]=Buffer[0];
 80006e6:	7a3a      	ldrb	r2, [r7, #8]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <NRF24_Addr_read+0xf4>)
 80006ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[3]=Buffer[1];
 80006ee:	7a7a      	ldrb	r2, [r7, #9]
 80006f0:	4b20      	ldr	r3, [pc, #128]	; (8000774 <NRF24_Addr_read+0xf4>)
 80006f2:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[2]=Buffer[2];
 80006f6:	7aba      	ldrb	r2, [r7, #10]
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <NRF24_Addr_read+0xf4>)
 80006fa:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[1]=Buffer[3];
 80006fe:	7afa      	ldrb	r2, [r7, #11]
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <NRF24_Addr_read+0xf4>)
 8000702:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[0]=Buffer[4];
 8000706:	7b3a      	ldrb	r2, [r7, #12]
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <NRF24_Addr_read+0xf4>)
 800070a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			break;
 800070e:	e029      	b.n	8000764 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[4]=Buffer[0];
 8000710:	7a3a      	ldrb	r2, [r7, #8]
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <NRF24_Addr_read+0xf4>)
 8000714:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[3]=Buffer[1];
 8000718:	7a7a      	ldrb	r2, [r7, #9]
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <NRF24_Addr_read+0xf4>)
 800071c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[2]=Buffer[2];
 8000720:	7aba      	ldrb	r2, [r7, #10]
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <NRF24_Addr_read+0xf4>)
 8000724:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[1]=Buffer[3];
 8000728:	7afa      	ldrb	r2, [r7, #11]
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <NRF24_Addr_read+0xf4>)
 800072c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[0]=Buffer[4];
 8000730:	7b3a      	ldrb	r2, [r7, #12]
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <NRF24_Addr_read+0xf4>)
 8000734:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
			break;
 8000738:	e014      	b.n	8000764 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.TX_ADDR[4]=Buffer[0];
 800073a:	7a3a      	ldrb	r2, [r7, #8]
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <NRF24_Addr_read+0xf4>)
 800073e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			NRF24_Configurations_Struct.Actual.TX_ADDR[3]=Buffer[1];
 8000742:	7a7a      	ldrb	r2, [r7, #9]
 8000744:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <NRF24_Addr_read+0xf4>)
 8000746:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
 800074a:	7aba      	ldrb	r2, [r7, #10]
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <NRF24_Addr_read+0xf4>)
 800074e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
 8000752:	7afa      	ldrb	r2, [r7, #11]
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <NRF24_Addr_read+0xf4>)
 8000756:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
 800075a:	7b3a      	ldrb	r2, [r7, #12]
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <NRF24_Addr_read+0xf4>)
 800075e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
			break;
 8000762:	bf00      	nop
}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40020400 	.word	0x40020400
 8000770:	2000034c 	.word	0x2000034c
 8000774:	20000054 	.word	0x20000054

08000778 <NRF24_ActualConfiguration>:

void NRF24_ActualConfiguration(void){
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	NRF24_Configurations_Struct.Actual.CONFIG 		= NRF24_read(CONFIG);
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff ff57 	bl	8000630 <NRF24_read>
 8000782:	4603      	mov	r3, r0
 8000784:	461a      	mov	r2, r3
 8000786:	4b5f      	ldr	r3, [pc, #380]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 8000788:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	NRF24_Configurations_Struct.Actual.EN_AA  		= NRF24_read(EN_AA);
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff ff4f 	bl	8000630 <NRF24_read>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	4b5b      	ldr	r3, [pc, #364]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 8000798:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	NRF24_Configurations_Struct.Actual.EN_RXADDR  	= NRF24_read(EN_RXADDR);
 800079c:	2002      	movs	r0, #2
 800079e:	f7ff ff47 	bl	8000630 <NRF24_read>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b57      	ldr	r3, [pc, #348]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 80007a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	NRF24_Configurations_Struct.Actual.SETUP_AW  	= NRF24_read(SETUP_AW);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f7ff ff3f 	bl	8000630 <NRF24_read>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b53      	ldr	r3, [pc, #332]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 80007b8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	NRF24_Configurations_Struct.Actual.SETUP_RETR 	= NRF24_read(SETUP_RETR);
 80007bc:	2004      	movs	r0, #4
 80007be:	f7ff ff37 	bl	8000630 <NRF24_read>
 80007c2:	4603      	mov	r3, r0
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b4f      	ldr	r3, [pc, #316]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 80007c8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	NRF24_Configurations_Struct.Actual.RF_CH  		= NRF24_read(RF_CH);
 80007cc:	2005      	movs	r0, #5
 80007ce:	f7ff ff2f 	bl	8000630 <NRF24_read>
 80007d2:	4603      	mov	r3, r0
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b4b      	ldr	r3, [pc, #300]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 80007d8:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	NRF24_Configurations_Struct.Actual.RF_SETUP  	= NRF24_read(RF_SETUP);
 80007dc:	2006      	movs	r0, #6
 80007de:	f7ff ff27 	bl	8000630 <NRF24_read>
 80007e2:	4603      	mov	r3, r0
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b47      	ldr	r3, [pc, #284]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 80007e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	NRF24_Configurations_Struct.Actual.STATUS  		= NRF24_read(STATUS);
 80007ec:	2007      	movs	r0, #7
 80007ee:	f7ff ff1f 	bl	8000630 <NRF24_read>
 80007f2:	4603      	mov	r3, r0
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b43      	ldr	r3, [pc, #268]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 80007f8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	NRF24_Configurations_Struct.Actual.OBSERVE  	= NRF24_read(OBSERVE);
 80007fc:	2008      	movs	r0, #8
 80007fe:	f7ff ff17 	bl	8000630 <NRF24_read>
 8000802:	4603      	mov	r3, r0
 8000804:	461a      	mov	r2, r3
 8000806:	4b3f      	ldr	r3, [pc, #252]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 8000808:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	NRF24_Configurations_Struct.Actual.CD  			= NRF24_read(CD);
 800080c:	2009      	movs	r0, #9
 800080e:	f7ff ff0f 	bl	8000630 <NRF24_read>
 8000812:	4603      	mov	r3, r0
 8000814:	461a      	mov	r2, r3
 8000816:	4b3b      	ldr	r3, [pc, #236]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 8000818:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	NRF24_Addr_read(RX_ADDR_P0);
 800081c:	200a      	movs	r0, #10
 800081e:	f7ff ff2f 	bl	8000680 <NRF24_Addr_read>
	NRF24_Addr_read(RX_ADDR_P1);
 8000822:	200b      	movs	r0, #11
 8000824:	f7ff ff2c 	bl	8000680 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_ADDR_P2  	= NRF24_read(RX_ADDR_P2);
 8000828:	200c      	movs	r0, #12
 800082a:	f7ff ff01 	bl	8000630 <NRF24_read>
 800082e:	4603      	mov	r3, r0
 8000830:	461a      	mov	r2, r3
 8000832:	4b34      	ldr	r3, [pc, #208]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 8000834:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	NRF24_Configurations_Struct.Actual.RX_ADDR_P3 	= NRF24_read(RX_ADDR_P3);
 8000838:	200d      	movs	r0, #13
 800083a:	f7ff fef9 	bl	8000630 <NRF24_read>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	4b30      	ldr	r3, [pc, #192]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 8000844:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	NRF24_Configurations_Struct.Actual.RX_ADDR_P4  	= NRF24_read(RX_ADDR_P4);
 8000848:	200e      	movs	r0, #14
 800084a:	f7ff fef1 	bl	8000630 <NRF24_read>
 800084e:	4603      	mov	r3, r0
 8000850:	461a      	mov	r2, r3
 8000852:	4b2c      	ldr	r3, [pc, #176]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 8000854:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	NRF24_Configurations_Struct.Actual.RX_ADDR_P5  	= NRF24_read(RX_ADDR_P5);
 8000858:	200f      	movs	r0, #15
 800085a:	f7ff fee9 	bl	8000630 <NRF24_read>
 800085e:	4603      	mov	r3, r0
 8000860:	461a      	mov	r2, r3
 8000862:	4b28      	ldr	r3, [pc, #160]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 8000864:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	NRF24_Addr_read(TX_ADDR);
 8000868:	2010      	movs	r0, #16
 800086a:	f7ff ff09 	bl	8000680 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_PW_P0  	= NRF24_read(RX_PW_P0);
 800086e:	2011      	movs	r0, #17
 8000870:	f7ff fede 	bl	8000630 <NRF24_read>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 800087a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	NRF24_Configurations_Struct.Actual.RX_PW_P1  	= NRF24_read(RX_PW_P1);
 800087e:	2012      	movs	r0, #18
 8000880:	f7ff fed6 	bl	8000630 <NRF24_read>
 8000884:	4603      	mov	r3, r0
 8000886:	461a      	mov	r2, r3
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 800088a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	NRF24_Configurations_Struct.Actual.RX_PW_P2  	= NRF24_read(RX_PW_P2);
 800088e:	2013      	movs	r0, #19
 8000890:	f7ff fece 	bl	8000630 <NRF24_read>
 8000894:	4603      	mov	r3, r0
 8000896:	461a      	mov	r2, r3
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 800089a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	NRF24_Configurations_Struct.Actual.RX_PW_P3  	= NRF24_read(RX_PW_P3);
 800089e:	2014      	movs	r0, #20
 80008a0:	f7ff fec6 	bl	8000630 <NRF24_read>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 80008aa:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	NRF24_Configurations_Struct.Actual.RX_PW_P4  	= NRF24_read(RX_PW_P4);
 80008ae:	2015      	movs	r0, #21
 80008b0:	f7ff febe 	bl	8000630 <NRF24_read>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 80008ba:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	NRF24_Configurations_Struct.Actual.RX_PW_P5  	= NRF24_read(RX_PW_P5);
 80008be:	2016      	movs	r0, #22
 80008c0:	f7ff feb6 	bl	8000630 <NRF24_read>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 80008ca:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	NRF24_Configurations_Struct.Actual.FIFO_STATUS  = NRF24_read(FIFO_STATUS);
 80008ce:	2017      	movs	r0, #23
 80008d0:	f7ff feae 	bl	8000630 <NRF24_read>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 80008da:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	NRF24_Configurations_Struct.Actual.DYNPD  		= NRF24_read(DYNPD);
 80008de:	201c      	movs	r0, #28
 80008e0:	f7ff fea6 	bl	8000630 <NRF24_read>
 80008e4:	4603      	mov	r3, r0
 80008e6:	461a      	mov	r2, r3
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 80008ea:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	NRF24_Configurations_Struct.Actual.FEATURE  	= NRF24_read(FEATURE);
 80008ee:	201d      	movs	r0, #29
 80008f0:	f7ff fe9e 	bl	8000630 <NRF24_read>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b02      	ldr	r3, [pc, #8]	; (8000904 <NRF24_ActualConfiguration+0x18c>)
 80008fa:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000054 	.word	0x20000054

08000908 <NRF24_config>:

void NRF24_config(NRF24_Address_Configurations_t Configuration_struct){
 8000908:	b084      	sub	sp, #16
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
 800090e:	f107 0c08 	add.w	ip, r7, #8
 8000912:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	NRF24_write(CONFIG,	Configuration_struct.CONFIG);
 8000916:	7a3b      	ldrb	r3, [r7, #8]
 8000918:	4619      	mov	r1, r3
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff fe14 	bl	8000548 <NRF24_write>
	NRF24_write(EN_AA, Configuration_struct.EN_AA);
 8000920:	7a7b      	ldrb	r3, [r7, #9]
 8000922:	4619      	mov	r1, r3
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff fe0f 	bl	8000548 <NRF24_write>
	NRF24_write(EN_RXADDR,Configuration_struct.EN_RXADDR);
 800092a:	7abb      	ldrb	r3, [r7, #10]
 800092c:	4619      	mov	r1, r3
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff fe0a 	bl	8000548 <NRF24_write>
	NRF24_write(SETUP_AW,Configuration_struct.SETUP_AW);
 8000934:	7afb      	ldrb	r3, [r7, #11]
 8000936:	4619      	mov	r1, r3
 8000938:	2003      	movs	r0, #3
 800093a:	f7ff fe05 	bl	8000548 <NRF24_write>
	NRF24_write(SETUP_RETR,Configuration_struct.SETUP_RETR);
 800093e:	7b3b      	ldrb	r3, [r7, #12]
 8000940:	4619      	mov	r1, r3
 8000942:	2004      	movs	r0, #4
 8000944:	f7ff fe00 	bl	8000548 <NRF24_write>
	NRF24_write(RF_CH,Configuration_struct.RF_CH);
 8000948:	7b7b      	ldrb	r3, [r7, #13]
 800094a:	4619      	mov	r1, r3
 800094c:	2005      	movs	r0, #5
 800094e:	f7ff fdfb 	bl	8000548 <NRF24_write>
	NRF24_write(RF_SETUP,Configuration_struct.RF_SETUP);
 8000952:	7bbb      	ldrb	r3, [r7, #14]
 8000954:	4619      	mov	r1, r3
 8000956:	2006      	movs	r0, #6
 8000958:	f7ff fdf6 	bl	8000548 <NRF24_write>
	NRF24_write(STATUS,Configuration_struct.STATUS);
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	4619      	mov	r1, r3
 8000960:	2007      	movs	r0, #7
 8000962:	f7ff fdf1 	bl	8000548 <NRF24_write>
	NRF24_write(OBSERVE,Configuration_struct.OBSERVE);
 8000966:	7c3b      	ldrb	r3, [r7, #16]
 8000968:	4619      	mov	r1, r3
 800096a:	2008      	movs	r0, #8
 800096c:	f7ff fdec 	bl	8000548 <NRF24_write>
	NRF24_write(CD,Configuration_struct.CD);
 8000970:	7c7b      	ldrb	r3, [r7, #17]
 8000972:	4619      	mov	r1, r3
 8000974:	2009      	movs	r0, #9
 8000976:	f7ff fde7 	bl	8000548 <NRF24_write>
	NRF24_Addr_write(RX_ADDR_P0, Configuration_struct.RX_ADDR_P0);
 800097a:	f107 0312 	add.w	r3, r7, #18
 800097e:	4619      	mov	r1, r3
 8000980:	200a      	movs	r0, #10
 8000982:	f7ff fe0f 	bl	80005a4 <NRF24_Addr_write>
	NRF24_Addr_write(RX_ADDR_P1, Configuration_struct.RX_ADDR_P1);
 8000986:	f107 0317 	add.w	r3, r7, #23
 800098a:	4619      	mov	r1, r3
 800098c:	200b      	movs	r0, #11
 800098e:	f7ff fe09 	bl	80005a4 <NRF24_Addr_write>
	NRF24_write(RX_ADDR_P2,Configuration_struct.RX_ADDR_P2);
 8000992:	7f3b      	ldrb	r3, [r7, #28]
 8000994:	4619      	mov	r1, r3
 8000996:	200c      	movs	r0, #12
 8000998:	f7ff fdd6 	bl	8000548 <NRF24_write>
	NRF24_write(RX_ADDR_P3,Configuration_struct.RX_ADDR_P3);
 800099c:	7f7b      	ldrb	r3, [r7, #29]
 800099e:	4619      	mov	r1, r3
 80009a0:	200d      	movs	r0, #13
 80009a2:	f7ff fdd1 	bl	8000548 <NRF24_write>
	NRF24_write(RX_ADDR_P4,Configuration_struct.RX_ADDR_P4);
 80009a6:	7fbb      	ldrb	r3, [r7, #30]
 80009a8:	4619      	mov	r1, r3
 80009aa:	200e      	movs	r0, #14
 80009ac:	f7ff fdcc 	bl	8000548 <NRF24_write>
	NRF24_write(RX_ADDR_P5,Configuration_struct.RX_ADDR_P5);
 80009b0:	7ffb      	ldrb	r3, [r7, #31]
 80009b2:	4619      	mov	r1, r3
 80009b4:	200f      	movs	r0, #15
 80009b6:	f7ff fdc7 	bl	8000548 <NRF24_write>
	NRF24_Addr_write(TX_ADDR, Configuration_struct.TX_ADDR);
 80009ba:	f107 0320 	add.w	r3, r7, #32
 80009be:	4619      	mov	r1, r3
 80009c0:	2010      	movs	r0, #16
 80009c2:	f7ff fdef 	bl	80005a4 <NRF24_Addr_write>
	NRF24_write(RX_PW_P0,Configuration_struct.RX_PW_P0);
 80009c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80009ca:	4619      	mov	r1, r3
 80009cc:	2011      	movs	r0, #17
 80009ce:	f7ff fdbb 	bl	8000548 <NRF24_write>
	NRF24_write(RX_PW_P1,Configuration_struct.RX_PW_P1);
 80009d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009d6:	4619      	mov	r1, r3
 80009d8:	2012      	movs	r0, #18
 80009da:	f7ff fdb5 	bl	8000548 <NRF24_write>
	NRF24_write(RX_PW_P2,Configuration_struct.RX_PW_P2);
 80009de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009e2:	4619      	mov	r1, r3
 80009e4:	2013      	movs	r0, #19
 80009e6:	f7ff fdaf 	bl	8000548 <NRF24_write>
	NRF24_write(RX_PW_P3,Configuration_struct.RX_PW_P3);
 80009ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80009ee:	4619      	mov	r1, r3
 80009f0:	2014      	movs	r0, #20
 80009f2:	f7ff fda9 	bl	8000548 <NRF24_write>
	NRF24_write(RX_PW_P4,Configuration_struct.RX_PW_P4);
 80009f6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80009fa:	4619      	mov	r1, r3
 80009fc:	2015      	movs	r0, #21
 80009fe:	f7ff fda3 	bl	8000548 <NRF24_write>
	NRF24_write(RX_PW_P5,Configuration_struct.RX_PW_P5);
 8000a02:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000a06:	4619      	mov	r1, r3
 8000a08:	2016      	movs	r0, #22
 8000a0a:	f7ff fd9d 	bl	8000548 <NRF24_write>
	NRF24_write(FIFO_STATUS,Configuration_struct.FIFO_STATUS);
 8000a0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a12:	4619      	mov	r1, r3
 8000a14:	2017      	movs	r0, #23
 8000a16:	f7ff fd97 	bl	8000548 <NRF24_write>
	NRF24_write(DYNPD,Configuration_struct.DYNPD);
 8000a1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000a1e:	4619      	mov	r1, r3
 8000a20:	201c      	movs	r0, #28
 8000a22:	f7ff fd91 	bl	8000548 <NRF24_write>
	NRF24_write(FEATURE,Configuration_struct.FEATURE);
 8000a26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	201d      	movs	r0, #29
 8000a2e:	f7ff fd8b 	bl	8000548 <NRF24_write>
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a3a:	b004      	add	sp, #16
 8000a3c:	4770      	bx	lr
	...

08000a40 <NRF24_DefaultConfiguration>:

void NRF24_DefaultConfiguration(void){
 8000a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a42:	b087      	sub	sp, #28
 8000a44:	af06      	add	r7, sp, #24
	NRF24_Configurations_Struct.Default.CONFIG 			= 0x08;
 8000a46:	4b45      	ldr	r3, [pc, #276]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000a48:	2208      	movs	r2, #8
 8000a4a:	701a      	strb	r2, [r3, #0]
	NRF24_Configurations_Struct.Default.EN_AA  			= 0x3F;
 8000a4c:	4b43      	ldr	r3, [pc, #268]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000a4e:	223f      	movs	r2, #63	; 0x3f
 8000a50:	705a      	strb	r2, [r3, #1]
	NRF24_Configurations_Struct.Default.EN_RXADDR  		= 0x03;
 8000a52:	4b42      	ldr	r3, [pc, #264]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000a54:	2203      	movs	r2, #3
 8000a56:	709a      	strb	r2, [r3, #2]
	NRF24_Configurations_Struct.Default.SETUP_AW  		= 0x03;
 8000a58:	4b40      	ldr	r3, [pc, #256]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	70da      	strb	r2, [r3, #3]
	NRF24_Configurations_Struct.Default.SETUP_RETR 		= 0x03;
 8000a5e:	4b3f      	ldr	r3, [pc, #252]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000a60:	2203      	movs	r2, #3
 8000a62:	711a      	strb	r2, [r3, #4]
	NRF24_Configurations_Struct.Default.RF_CH  			= 0x02;
 8000a64:	4b3d      	ldr	r3, [pc, #244]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000a66:	2202      	movs	r2, #2
 8000a68:	715a      	strb	r2, [r3, #5]
	NRF24_Configurations_Struct.Default.RF_SETUP  		= 0x0F;
 8000a6a:	4b3c      	ldr	r3, [pc, #240]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000a6c:	220f      	movs	r2, #15
 8000a6e:	719a      	strb	r2, [r3, #6]
	NRF24_Configurations_Struct.Default.STATUS  		= 0X0E;
 8000a70:	4b3a      	ldr	r3, [pc, #232]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000a72:	220e      	movs	r2, #14
 8000a74:	71da      	strb	r2, [r3, #7]
	NRF24_Configurations_Struct.Default.OBSERVE  		= 0X00;
 8000a76:	4b39      	ldr	r3, [pc, #228]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	721a      	strb	r2, [r3, #8]
	NRF24_Configurations_Struct.Default.CD  			= 0x00;
 8000a7c:	4b37      	ldr	r3, [pc, #220]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	725a      	strb	r2, [r3, #9]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[0]  	= 0xE7;
 8000a82:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000a84:	22e7      	movs	r2, #231	; 0xe7
 8000a86:	729a      	strb	r2, [r3, #10]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[1]  	= 0xE7;
 8000a88:	4b34      	ldr	r3, [pc, #208]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000a8a:	22e7      	movs	r2, #231	; 0xe7
 8000a8c:	72da      	strb	r2, [r3, #11]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[2]  	= 0xE7;
 8000a8e:	4b33      	ldr	r3, [pc, #204]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000a90:	22e7      	movs	r2, #231	; 0xe7
 8000a92:	731a      	strb	r2, [r3, #12]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[3]  	= 0xE7;
 8000a94:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000a96:	22e7      	movs	r2, #231	; 0xe7
 8000a98:	735a      	strb	r2, [r3, #13]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[4]  	= 0xE7;
 8000a9a:	4b30      	ldr	r3, [pc, #192]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000a9c:	22e7      	movs	r2, #231	; 0xe7
 8000a9e:	739a      	strb	r2, [r3, #14]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[0]  	= 0xC2;
 8000aa0:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000aa2:	22c2      	movs	r2, #194	; 0xc2
 8000aa4:	73da      	strb	r2, [r3, #15]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[1]  	= 0xC2;
 8000aa6:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000aa8:	22c2      	movs	r2, #194	; 0xc2
 8000aaa:	741a      	strb	r2, [r3, #16]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[2]  	= 0xC2;
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000aae:	22c2      	movs	r2, #194	; 0xc2
 8000ab0:	745a      	strb	r2, [r3, #17]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[3]  	= 0xC2;
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000ab4:	22c2      	movs	r2, #194	; 0xc2
 8000ab6:	749a      	strb	r2, [r3, #18]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[4]  	= 0xC2;
 8000ab8:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000aba:	22c2      	movs	r2, #194	; 0xc2
 8000abc:	74da      	strb	r2, [r3, #19]
	NRF24_Configurations_Struct.Default.RX_ADDR_P2  	= 0xC3;
 8000abe:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000ac0:	22c3      	movs	r2, #195	; 0xc3
 8000ac2:	751a      	strb	r2, [r3, #20]
	NRF24_Configurations_Struct.Default.RX_ADDR_P3 		= 0xC4;
 8000ac4:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000ac6:	22c4      	movs	r2, #196	; 0xc4
 8000ac8:	755a      	strb	r2, [r3, #21]
	NRF24_Configurations_Struct.Default.RX_ADDR_P4  	= 0xC5;
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000acc:	22c5      	movs	r2, #197	; 0xc5
 8000ace:	759a      	strb	r2, [r3, #22]
	NRF24_Configurations_Struct.Default.RX_ADDR_P5  	= 0xC6;
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000ad2:	22c6      	movs	r2, #198	; 0xc6
 8000ad4:	75da      	strb	r2, [r3, #23]
	NRF24_Configurations_Struct.Default.TX_ADDR[0]   	= 0xE7;
 8000ad6:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000ad8:	22e7      	movs	r2, #231	; 0xe7
 8000ada:	761a      	strb	r2, [r3, #24]
	NRF24_Configurations_Struct.Default.TX_ADDR[1]   	= 0xE7;
 8000adc:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000ade:	22e7      	movs	r2, #231	; 0xe7
 8000ae0:	765a      	strb	r2, [r3, #25]
	NRF24_Configurations_Struct.Default.TX_ADDR[2]   	= 0xE7;
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000ae4:	22e7      	movs	r2, #231	; 0xe7
 8000ae6:	769a      	strb	r2, [r3, #26]
	NRF24_Configurations_Struct.Default.TX_ADDR[3]   	= 0xE7;
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000aea:	22e7      	movs	r2, #231	; 0xe7
 8000aec:	76da      	strb	r2, [r3, #27]
	NRF24_Configurations_Struct.Default.TX_ADDR[4]   	= 0xE7;
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000af0:	22e7      	movs	r2, #231	; 0xe7
 8000af2:	771a      	strb	r2, [r3, #28]
	NRF24_Configurations_Struct.Default.RX_PW_P0  		= 0X00;
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	775a      	strb	r2, [r3, #29]
	NRF24_Configurations_Struct.Default.RX_PW_P1  		= 0X00;
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	779a      	strb	r2, [r3, #30]
	NRF24_Configurations_Struct.Default.RX_PW_P2  		= 0X00;
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	77da      	strb	r2, [r3, #31]
	NRF24_Configurations_Struct.Default.RX_PW_P3  		= 0X00;
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2020 	strb.w	r2, [r3, #32]
	NRF24_Configurations_Struct.Default.RX_PW_P4  		= 0X00;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	NRF24_Configurations_Struct.Default.RX_PW_P5  		= 0X00;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	NRF24_Configurations_Struct.Default.FIFO_STATUS  	= 0X11;
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000b20:	2211      	movs	r2, #17
 8000b22:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	NRF24_Configurations_Struct.Default.DYNPD  			= 0X00;
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	NRF24_Configurations_Struct.Default.FEATURE  		= 0X00;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	NRF24_config(NRF24_Configurations_Struct.Default);
 8000b36:	4e09      	ldr	r6, [pc, #36]	; (8000b5c <NRF24_DefaultConfiguration+0x11c>)
 8000b38:	466c      	mov	r4, sp
 8000b3a:	f106 0510 	add.w	r5, r6, #16
 8000b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b46:	6020      	str	r0, [r4, #0]
 8000b48:	3404      	adds	r4, #4
 8000b4a:	8021      	strh	r1, [r4, #0]
 8000b4c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b50:	f7ff feda 	bl	8000908 <NRF24_config>
}
 8000b54:	bf00      	nop
 8000b56:	3704      	adds	r7, #4
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b5c:	20000054 	.word	0x20000054

08000b60 <NRF24_FIFO_write>:
	Adr |= W_REGISTER;
	Buffer |= 0x02;
	NRF24_write(Adr, Buffer);
}

void NRF24_FIFO_write(uint8_t *pData){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	uint8_t Adr = W_TX_PAYLOAD;
 8000b68:	23a0      	movs	r3, #160	; 0xa0
 8000b6a:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b72:	4812      	ldr	r0, [pc, #72]	; (8000bbc <NRF24_FIFO_write+0x5c>)
 8000b74:	f001 fa60 	bl	8002038 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000b78:	f107 030e 	add.w	r3, r7, #14
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480f      	ldr	r0, [pc, #60]	; (8000bc0 <NRF24_FIFO_write+0x60>)
 8000b82:	f001 ffb3 	bl	8002aec <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8000b86:	2300      	movs	r3, #0
 8000b88:	73fb      	strb	r3, [r7, #15]
 8000b8a:	e00a      	b.n	8000ba2 <NRF24_FIFO_write+0x42>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &pData[n], 1);
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	2201      	movs	r2, #1
 8000b94:	4619      	mov	r1, r3
 8000b96:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <NRF24_FIFO_write+0x60>)
 8000b98:	f001 ffa8 	bl	8002aec <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	73fb      	strb	r3, [r7, #15]
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	2b1f      	cmp	r3, #31
 8000ba6:	d9f1      	bls.n	8000b8c <NRF24_FIFO_write+0x2c>
	}
	NRF24_unselect();
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bae:	4803      	ldr	r0, [pc, #12]	; (8000bbc <NRF24_FIFO_write+0x5c>)
 8000bb0:	f001 fa42 	bl	8002038 <HAL_GPIO_WritePin>
}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	2000034c 	.word	0x2000034c

08000bc4 <NRF24_FlushTxFIFO>:
		HAL_SPI_Receive_DMA(SPI_NRF24, &pData[n], 1);
	}
	NRF24_unselect();
}

void NRF24_FlushTxFIFO(void){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_TX;
 8000bca:	23e1      	movs	r3, #225	; 0xe1
 8000bcc:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd4:	4809      	ldr	r0, [pc, #36]	; (8000bfc <NRF24_FlushTxFIFO+0x38>)
 8000bd6:	f001 fa2f 	bl	8002038 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4619      	mov	r1, r3
 8000be0:	4807      	ldr	r0, [pc, #28]	; (8000c00 <NRF24_FlushTxFIFO+0x3c>)
 8000be2:	f001 ff83 	bl	8002aec <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 8000be6:	2201      	movs	r2, #1
 8000be8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <NRF24_FlushTxFIFO+0x38>)
 8000bee:	f001 fa23 	bl	8002038 <HAL_GPIO_WritePin>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40020400 	.word	0x40020400
 8000c00:	2000034c 	.word	0x2000034c

08000c04 <NRF24_TxMode>:
	NRF24_select();
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
	NRF24_unselect();
}

void NRF24_TxMode(uint8_t *ID, uint8_t Channel){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	70fb      	strb	r3, [r7, #3]
	NRF24_Disable();
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c16:	4814      	ldr	r0, [pc, #80]	; (8000c68 <NRF24_TxMode+0x64>)
 8000c18:	f001 fa0e 	bl	8002038 <HAL_GPIO_WritePin>
	NRF24_FlushTxFIFO();
 8000c1c:	f7ff ffd2 	bl	8000bc4 <NRF24_FlushTxFIFO>

	NRF24_write(RF_CH, Channel);
 8000c20:	78fb      	ldrb	r3, [r7, #3]
 8000c22:	4619      	mov	r1, r3
 8000c24:	2005      	movs	r0, #5
 8000c26:	f7ff fc8f 	bl	8000548 <NRF24_write>
	NRF24_write(EN_AA, 0x00);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f7ff fc8b 	bl	8000548 <NRF24_write>
	NRF24_write(SETUP_RETR, 0x00);
 8000c32:	2100      	movs	r1, #0
 8000c34:	2004      	movs	r0, #4
 8000c36:	f7ff fc87 	bl	8000548 <NRF24_write>
	NRF24_write(RF_SETUP, 0x08);
 8000c3a:	2108      	movs	r1, #8
 8000c3c:	2006      	movs	r0, #6
 8000c3e:	f7ff fc83 	bl	8000548 <NRF24_write>
	NRF24_Addr_write(TX_ADDR, ID);
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	2010      	movs	r0, #16
 8000c46:	f7ff fcad 	bl	80005a4 <NRF24_Addr_write>
	NRF24_write(CONFIG, 0x0A);
 8000c4a:	210a      	movs	r1, #10
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff fc7b 	bl	8000548 <NRF24_write>
	NRF24_Enable();
 8000c52:	2201      	movs	r2, #1
 8000c54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c58:	4803      	ldr	r0, [pc, #12]	; (8000c68 <NRF24_TxMode+0x64>)
 8000c5a:	f001 f9ed 	bl	8002038 <HAL_GPIO_WritePin>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40020400 	.word	0x40020400

08000c6c <NRF24_Transmit>:
	NRF24_write(RX_PW_P1, 32);
	NRF24_write(CONFIG, 0x0B);
	NRF24_Enable();
}

void NRF24_Transmit(uint8_t *pData){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	NRF24_FIFO_write(pData);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff73 	bl	8000b60 <NRF24_FIFO_write>
	uint8_t TxDataFIFO = NRF24_read(FIFO_STATUS);
 8000c7a:	2017      	movs	r0, #23
 8000c7c:	f7ff fcd8 	bl	8000630 <NRF24_read>
 8000c80:	4603      	mov	r3, r0
 8000c82:	73fb      	strb	r3, [r7, #15]
	test[15]+=1;                    //Variable para purebas, eliminar despues
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <NRF24_Transmit+0x38>)
 8000c86:	7bdb      	ldrb	r3, [r3, #15]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <NRF24_Transmit+0x38>)
 8000c8e:	73da      	strb	r2, [r3, #15]
	NRF24_Enable();
 8000c90:	2201      	movs	r2, #1
 8000c92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c96:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <NRF24_Transmit+0x3c>)
 8000c98:	f001 f9ce 	bl	8002038 <HAL_GPIO_WritePin>
}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	40020400 	.word	0x40020400

08000cac <NRF24_init>:
void NRF24_Receive(uint8_t *pData){
	NRF24_FIFO_read(pData);
	uint8_t RxDataFIFO = NRF24_read(FIFO_STATUS);
}

void NRF24_init(void){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	NRF24_Disable();
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb6:	4808      	ldr	r0, [pc, #32]	; (8000cd8 <NRF24_init+0x2c>)
 8000cb8:	f001 f9be 	bl	8002038 <HAL_GPIO_WritePin>
	NRF24_unselect();
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <NRF24_init+0x2c>)
 8000cc4:	f001 f9b8 	bl	8002038 <HAL_GPIO_WritePin>
	NRF24_DefaultConfiguration();
 8000cc8:	f7ff feba 	bl	8000a40 <NRF24_DefaultConfiguration>
	NRF24_FlushTxFIFO();
 8000ccc:	f7ff ff7a 	bl	8000bc4 <NRF24_FlushTxFIFO>
	NRF24_ActualConfiguration();
 8000cd0:	f7ff fd52 	bl	8000778 <NRF24_ActualConfiguration>

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40020400 	.word	0x40020400

08000cdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <MX_DMA_Init+0x4c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <MX_DMA_Init+0x4c>)
 8000cec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <MX_DMA_Init+0x4c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2105      	movs	r1, #5
 8000d02:	2038      	movs	r0, #56	; 0x38
 8000d04:	f000 fc7a 	bl	80015fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d08:	2038      	movs	r0, #56	; 0x38
 8000d0a:	f000 fc93 	bl	8001634 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2105      	movs	r1, #5
 8000d12:	203a      	movs	r0, #58	; 0x3a
 8000d14:	f000 fc72 	bl	80015fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d18:	203a      	movs	r0, #58	; 0x3a
 8000d1a:	f000 fc8b 	bl	8001634 <HAL_NVIC_EnableIRQ>

}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	4a06      	ldr	r2, [pc, #24]	; (8000d5c <vApplicationGetIdleTaskMemory+0x30>)
 8000d42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	200000f8 	.word	0x200000f8
 8000d5c:	2000014c 	.word	0x2000014c

08000d60 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d60:	b5b0      	push	{r4, r5, r7, lr}
 8000d62:	b096      	sub	sp, #88	; 0x58
 8000d64:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task10ms */
  osThreadDef(Task10ms, Task_10ms, osPriorityNormal, 0, 128);
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <MX_FREERTOS_Init+0x7c>)
 8000d68:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000d6c:	461d      	mov	r5, r3
 8000d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task10msHandle = osThreadCreate(osThread(Task10ms), NULL);
 8000d7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f002 fe78 	bl	8003a76 <osThreadCreate>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <MX_FREERTOS_Init+0x80>)
 8000d8a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task100ms */
  osThreadDef(Task100ms, Task_100ms, osPriorityNormal, 0, 128);
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <MX_FREERTOS_Init+0x84>)
 8000d8e:	f107 0420 	add.w	r4, r7, #32
 8000d92:	461d      	mov	r5, r3
 8000d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task100msHandle = osThreadCreate(osThread(Task100ms), NULL);
 8000da0:	f107 0320 	add.w	r3, r7, #32
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f002 fe65 	bl	8003a76 <osThreadCreate>
 8000dac:	4603      	mov	r3, r0
 8000dae:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <MX_FREERTOS_Init+0x88>)
 8000db0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1000ms */
  osThreadDef(Task1000ms, Task_1000ms, osPriorityIdle, 0, 128);
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_FREERTOS_Init+0x8c>)
 8000db4:	1d3c      	adds	r4, r7, #4
 8000db6:	461d      	mov	r5, r3
 8000db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1000msHandle = osThreadCreate(osThread(Task1000ms), NULL);
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f002 fe54 	bl	8003a76 <osThreadCreate>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <MX_FREERTOS_Init+0x90>)
 8000dd2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000dd4:	bf00      	nop
 8000dd6:	3758      	adds	r7, #88	; 0x58
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bdb0      	pop	{r4, r5, r7, pc}
 8000ddc:	08004f48 	.word	0x08004f48
 8000de0:	200000ec 	.word	0x200000ec
 8000de4:	08004f70 	.word	0x08004f70
 8000de8:	200000f0 	.word	0x200000f0
 8000dec:	08004f98 	.word	0x08004f98
 8000df0:	200000f4 	.word	0x200000f4

08000df4 <Task_10ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_10ms */
void Task_10ms(void const * argument)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_10ms */
	task_init_10ms();
 8000dfc:	f7ff fb6e 	bl	80004dc <task_init_10ms>
  /* Infinite loop */
  for(;;)
  {
	task_10ms();
 8000e00:	f7ff fb73 	bl	80004ea <task_10ms>
    osDelay(10);
 8000e04:	200a      	movs	r0, #10
 8000e06:	f002 fe82 	bl	8003b0e <osDelay>
	task_10ms();
 8000e0a:	e7f9      	b.n	8000e00 <Task_10ms+0xc>

08000e0c <Task_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_100ms */
void Task_100ms(void const * argument)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_100ms */
	task_init_100ms();
 8000e14:	f7ff fb70 	bl	80004f8 <task_init_100ms>
  /* Infinite loop */
  for(;;)
  {
	task_100ms();
 8000e18:	f7ff fb7e 	bl	8000518 <task_100ms>
    osDelay(100);
 8000e1c:	2064      	movs	r0, #100	; 0x64
 8000e1e:	f002 fe76 	bl	8003b0e <osDelay>
	task_100ms();
 8000e22:	e7f9      	b.n	8000e18 <Task_100ms+0xc>

08000e24 <Task_1000ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1000ms */
void Task_1000ms(void const * argument)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1000ms */
	task_init_1000ms();
 8000e2c:	f7ff fb7e 	bl	800052c <task_init_1000ms>
  /* Infinite loop */
  for(;;)
  {
	task_1000ms();
 8000e30:	f7ff fb83 	bl	800053a <task_1000ms>
    osDelay(1000);
 8000e34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e38:	f002 fe69 	bl	8003b0e <osDelay>
	task_1000ms();
 8000e3c:	e7f8      	b.n	8000e30 <Task_1000ms+0xc>
	...

08000e40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <MX_GPIO_Init+0xb8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a26      	ldr	r2, [pc, #152]	; (8000ef8 <MX_GPIO_Init+0xb8>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <MX_GPIO_Init+0xb8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <MX_GPIO_Init+0xb8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a1f      	ldr	r2, [pc, #124]	; (8000ef8 <MX_GPIO_Init+0xb8>)
 8000e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <MX_GPIO_Init+0xb8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <MX_GPIO_Init+0xb8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a18      	ldr	r2, [pc, #96]	; (8000ef8 <MX_GPIO_Init+0xb8>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <MX_GPIO_Init+0xb8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <MX_GPIO_Init+0xb8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <MX_GPIO_Init+0xb8>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_GPIO_Init+0xb8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <MX_GPIO_Init+0xbc>)
 8000ece:	f001 f8b3 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 8000ed2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4804      	ldr	r0, [pc, #16]	; (8000efc <MX_GPIO_Init+0xbc>)
 8000eec:	f000 ff20 	bl	8001d30 <HAL_GPIO_Init>

}
 8000ef0:	bf00      	nop
 8000ef2:	3728      	adds	r7, #40	; 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020400 	.word	0x40020400

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f000 fa80 	bl	8001408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f80e 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f7ff ff98 	bl	8000e40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f10:	f7ff fee4 	bl	8000cdc <MX_DMA_Init>
  MX_SPI1_Init();
 8000f14:	f000 f888 	bl	8001028 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_init();
 8000f18:	f7ff fec8 	bl	8000cac <NRF24_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000f1c:	f7ff ff20 	bl	8000d60 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f20:	f002 fda2 	bl	8003a68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <main+0x24>
	...

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b094      	sub	sp, #80	; 0x50
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0320 	add.w	r3, r7, #32
 8000f32:	2230      	movs	r2, #48	; 0x30
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 ffc8 	bl	8004ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <SystemClock_Config+0xc8>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a26      	ldr	r2, [pc, #152]	; (8000ff0 <SystemClock_Config+0xc8>)
 8000f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b24      	ldr	r3, [pc, #144]	; (8000ff0 <SystemClock_Config+0xc8>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f68:	2300      	movs	r3, #0
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <SystemClock_Config+0xcc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a20      	ldr	r2, [pc, #128]	; (8000ff4 <SystemClock_Config+0xcc>)
 8000f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <SystemClock_Config+0xcc>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f84:	2302      	movs	r3, #2
 8000f86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f90:	2302      	movs	r3, #2
 8000f92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f94:	2300      	movs	r3, #0
 8000f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000f9c:	2364      	movs	r3, #100	; 0x64
 8000f9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa8:	f107 0320 	add.w	r3, r7, #32
 8000fac:	4618      	mov	r0, r3
 8000fae:	f001 f85d 	bl	800206c <HAL_RCC_OscConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fb8:	f000 f830 	bl	800101c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	2103      	movs	r1, #3
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 fabf 	bl	800255c <HAL_RCC_ClockConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fe4:	f000 f81a 	bl	800101c <Error_Handler>
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3750      	adds	r7, #80	; 0x50
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40007000 	.word	0x40007000

08000ff8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800100a:	f000 fa1f 	bl	800144c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40014800 	.word	0x40014800

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
}
 8001022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	e7fe      	b.n	8001024 <Error_Handler+0x8>
	...

08001028 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_SPI1_Init+0x64>)
 800102e:	4a18      	ldr	r2, [pc, #96]	; (8001090 <MX_SPI1_Init+0x68>)
 8001030:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <MX_SPI1_Init+0x64>)
 8001034:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001038:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_SPI1_Init+0x64>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_SPI1_Init+0x64>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_SPI1_Init+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_SPI1_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <MX_SPI1_Init+0x64>)
 8001054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001058:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_SPI1_Init+0x64>)
 800105c:	2218      	movs	r2, #24
 800105e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <MX_SPI1_Init+0x64>)
 8001062:	2200      	movs	r2, #0
 8001064:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_SPI1_Init+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <MX_SPI1_Init+0x64>)
 800106e:	2200      	movs	r2, #0
 8001070:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_SPI1_Init+0x64>)
 8001074:	220a      	movs	r2, #10
 8001076:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <MX_SPI1_Init+0x64>)
 800107a:	f001 fcad 	bl	80029d8 <HAL_SPI_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001084:	f7ff ffca 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	2000034c 	.word	0x2000034c
 8001090:	40013000 	.word	0x40013000

08001094 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a47      	ldr	r2, [pc, #284]	; (80011d0 <HAL_SPI_MspInit+0x13c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	f040 8088 	bne.w	80011c8 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	4b45      	ldr	r3, [pc, #276]	; (80011d4 <HAL_SPI_MspInit+0x140>)
 80010be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c0:	4a44      	ldr	r2, [pc, #272]	; (80011d4 <HAL_SPI_MspInit+0x140>)
 80010c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010c6:	6453      	str	r3, [r2, #68]	; 0x44
 80010c8:	4b42      	ldr	r3, [pc, #264]	; (80011d4 <HAL_SPI_MspInit+0x140>)
 80010ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	4b3e      	ldr	r3, [pc, #248]	; (80011d4 <HAL_SPI_MspInit+0x140>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	4a3d      	ldr	r2, [pc, #244]	; (80011d4 <HAL_SPI_MspInit+0x140>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6313      	str	r3, [r2, #48]	; 0x30
 80010e4:	4b3b      	ldr	r3, [pc, #236]	; (80011d4 <HAL_SPI_MspInit+0x140>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010f0:	23e0      	movs	r3, #224	; 0xe0
 80010f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001100:	2305      	movs	r3, #5
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4619      	mov	r1, r3
 800110a:	4833      	ldr	r0, [pc, #204]	; (80011d8 <HAL_SPI_MspInit+0x144>)
 800110c:	f000 fe10 	bl	8001d30 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001110:	4b32      	ldr	r3, [pc, #200]	; (80011dc <HAL_SPI_MspInit+0x148>)
 8001112:	4a33      	ldr	r2, [pc, #204]	; (80011e0 <HAL_SPI_MspInit+0x14c>)
 8001114:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001116:	4b31      	ldr	r3, [pc, #196]	; (80011dc <HAL_SPI_MspInit+0x148>)
 8001118:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800111c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111e:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <HAL_SPI_MspInit+0x148>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001124:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <HAL_SPI_MspInit+0x148>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <HAL_SPI_MspInit+0x148>)
 800112c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001130:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <HAL_SPI_MspInit+0x148>)
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <HAL_SPI_MspInit+0x148>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <HAL_SPI_MspInit+0x148>)
 8001140:	2200      	movs	r2, #0
 8001142:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001144:	4b25      	ldr	r3, [pc, #148]	; (80011dc <HAL_SPI_MspInit+0x148>)
 8001146:	2200      	movs	r2, #0
 8001148:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114a:	4b24      	ldr	r3, [pc, #144]	; (80011dc <HAL_SPI_MspInit+0x148>)
 800114c:	2200      	movs	r2, #0
 800114e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001150:	4822      	ldr	r0, [pc, #136]	; (80011dc <HAL_SPI_MspInit+0x148>)
 8001152:	f000 fa7d 	bl	8001650 <HAL_DMA_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 800115c:	f7ff ff5e 	bl	800101c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a1e      	ldr	r2, [pc, #120]	; (80011dc <HAL_SPI_MspInit+0x148>)
 8001164:	64da      	str	r2, [r3, #76]	; 0x4c
 8001166:	4a1d      	ldr	r2, [pc, #116]	; (80011dc <HAL_SPI_MspInit+0x148>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <HAL_SPI_MspInit+0x150>)
 800116e:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <HAL_SPI_MspInit+0x154>)
 8001170:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <HAL_SPI_MspInit+0x150>)
 8001174:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001178:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <HAL_SPI_MspInit+0x150>)
 800117c:	2240      	movs	r2, #64	; 0x40
 800117e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_SPI_MspInit+0x150>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <HAL_SPI_MspInit+0x150>)
 8001188:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800118c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_SPI_MspInit+0x150>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <HAL_SPI_MspInit+0x150>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_SPI_MspInit+0x150>)
 800119c:	2200      	movs	r2, #0
 800119e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <HAL_SPI_MspInit+0x150>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_SPI_MspInit+0x150>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <HAL_SPI_MspInit+0x150>)
 80011ae:	f000 fa4f 	bl	8001650 <HAL_DMA_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80011b8:	f7ff ff30 	bl	800101c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <HAL_SPI_MspInit+0x150>)
 80011c0:	649a      	str	r2, [r3, #72]	; 0x48
 80011c2:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <HAL_SPI_MspInit+0x150>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40013000 	.word	0x40013000
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000
 80011dc:	200003a4 	.word	0x200003a4
 80011e0:	40026410 	.word	0x40026410
 80011e4:	20000404 	.word	0x20000404
 80011e8:	40026440 	.word	0x40026440

080011ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_MspInit+0x54>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a11      	ldr	r2, [pc, #68]	; (8001240 <HAL_MspInit+0x54>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_MspInit+0x54>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HAL_MspInit+0x54>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <HAL_MspInit+0x54>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_MspInit+0x54>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	210f      	movs	r1, #15
 800122e:	f06f 0001 	mvn.w	r0, #1
 8001232:	f000 f9e3 	bl	80015fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08c      	sub	sp, #48	; 0x30
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <HAL_InitTick+0xd0>)
 800125a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125c:	4a2d      	ldr	r2, [pc, #180]	; (8001314 <HAL_InitTick+0xd0>)
 800125e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001262:	6453      	str	r3, [r2, #68]	; 0x44
 8001264:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <HAL_InitTick+0xd0>)
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001270:	f107 020c 	add.w	r2, r7, #12
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4611      	mov	r1, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f001 fb7a 	bl	8002974 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001280:	f001 fb64 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8001284:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001288:	4a23      	ldr	r2, [pc, #140]	; (8001318 <HAL_InitTick+0xd4>)
 800128a:	fba2 2303 	umull	r2, r3, r2, r3
 800128e:	0c9b      	lsrs	r3, r3, #18
 8001290:	3b01      	subs	r3, #1
 8001292:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001294:	4b21      	ldr	r3, [pc, #132]	; (800131c <HAL_InitTick+0xd8>)
 8001296:	4a22      	ldr	r2, [pc, #136]	; (8001320 <HAL_InitTick+0xdc>)
 8001298:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800129a:	4b20      	ldr	r3, [pc, #128]	; (800131c <HAL_InitTick+0xd8>)
 800129c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012a0:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <HAL_InitTick+0xd8>)
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80012a8:	4b1c      	ldr	r3, [pc, #112]	; (800131c <HAL_InitTick+0xd8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b1b      	ldr	r3, [pc, #108]	; (800131c <HAL_InitTick+0xd8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b4:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_InitTick+0xd8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 80012ba:	4818      	ldr	r0, [pc, #96]	; (800131c <HAL_InitTick+0xd8>)
 80012bc:	f002 f948 	bl	8003550 <HAL_TIM_Base_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80012c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d11b      	bne.n	8001306 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 80012ce:	4813      	ldr	r0, [pc, #76]	; (800131c <HAL_InitTick+0xd8>)
 80012d0:	f002 f998 	bl	8003604 <HAL_TIM_Base_Start_IT>
 80012d4:	4603      	mov	r3, r0
 80012d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80012da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d111      	bne.n	8001306 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80012e2:	201a      	movs	r0, #26
 80012e4:	f000 f9a6 	bl	8001634 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b0f      	cmp	r3, #15
 80012ec:	d808      	bhi.n	8001300 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80012ee:	2200      	movs	r2, #0
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	201a      	movs	r0, #26
 80012f4:	f000 f982 	bl	80015fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012f8:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <HAL_InitTick+0xe0>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e002      	b.n	8001306 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001306:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800130a:	4618      	mov	r0, r3
 800130c:	3730      	adds	r7, #48	; 0x30
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	431bde83 	.word	0x431bde83
 800131c:	20000464 	.word	0x20000464
 8001320:	40014800 	.word	0x40014800
 8001324:	2000002c 	.word	0x2000002c

08001328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800132c:	e7fe      	b.n	800132c <NMI_Handler+0x4>

0800132e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <MemManage_Handler+0x4>

0800133a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <UsageFault_Handler+0x4>

08001346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800135a:	f002 f9b5 	bl	80036c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000464 	.word	0x20000464

08001368 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <DMA2_Stream0_IRQHandler+0x10>)
 800136e:	f000 fa75 	bl	800185c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200003a4 	.word	0x200003a4

0800137c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <DMA2_Stream2_IRQHandler+0x10>)
 8001382:	f000 fa6b 	bl	800185c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000404 	.word	0x20000404

08001390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <SystemInit+0x20>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <SystemInit+0x20>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013b8:	f7ff ffea 	bl	8001390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013be:	490d      	ldr	r1, [pc, #52]	; (80013f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c0:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c4:	e002      	b.n	80013cc <LoopCopyDataInit>

080013c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ca:	3304      	adds	r3, #4

080013cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d0:	d3f9      	bcc.n	80013c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d4:	4c0a      	ldr	r4, [pc, #40]	; (8001400 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d8:	e001      	b.n	80013de <LoopFillZerobss>

080013da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013dc:	3204      	adds	r2, #4

080013de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e0:	d3fb      	bcc.n	80013da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e2:	f003 fd7b 	bl	8004edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e6:	f7ff fd8b 	bl	8000f00 <main>
  bx  lr    
 80013ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f4:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 80013f8:	08004fec 	.word	0x08004fec
  ldr r2, =_sbss
 80013fc:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001400:	20004204 	.word	0x20004204

08001404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC_IRQHandler>
	...

08001408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <HAL_Init+0x40>)
 8001412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001416:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_Init+0x40>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <HAL_Init+0x40>)
 800141e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001422:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_Init+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_Init+0x40>)
 800142a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 f8d8 	bl	80015e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001436:	200f      	movs	r0, #15
 8001438:	f7ff ff04 	bl	8001244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143c:	f7ff fed6 	bl	80011ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023c00 	.word	0x40023c00

0800144c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x20>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_IncTick+0x24>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4413      	add	r3, r2
 800145c:	4a04      	ldr	r2, [pc, #16]	; (8001470 <HAL_IncTick+0x24>)
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000030 	.word	0x20000030
 8001470:	200004ac 	.word	0x200004ac

08001474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return uwTick;
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <HAL_GetTick+0x14>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	200004ac 	.word	0x200004ac

0800148c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a8:	4013      	ands	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <__NVIC_GetPriorityGrouping+0x18>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	f003 0307 	and.w	r3, r3, #7
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	db0b      	blt.n	800151a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	f003 021f 	and.w	r2, r3, #31
 8001508:	4907      	ldr	r1, [pc, #28]	; (8001528 <__NVIC_EnableIRQ+0x38>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	2001      	movs	r0, #1
 8001512:	fa00 f202 	lsl.w	r2, r0, r2
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000e100 	.word	0xe000e100

0800152c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	db0a      	blt.n	8001556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	490c      	ldr	r1, [pc, #48]	; (8001578 <__NVIC_SetPriority+0x4c>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	440b      	add	r3, r1
 8001550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001554:	e00a      	b.n	800156c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4908      	ldr	r1, [pc, #32]	; (800157c <__NVIC_SetPriority+0x50>)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	3b04      	subs	r3, #4
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	440b      	add	r3, r1
 800156a:	761a      	strb	r2, [r3, #24]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000e100 	.word	0xe000e100
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f1c3 0307 	rsb	r3, r3, #7
 800159a:	2b04      	cmp	r3, #4
 800159c:	bf28      	it	cs
 800159e:	2304      	movcs	r3, #4
 80015a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3304      	adds	r3, #4
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d902      	bls.n	80015b0 <NVIC_EncodePriority+0x30>
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3b03      	subs	r3, #3
 80015ae:	e000      	b.n	80015b2 <NVIC_EncodePriority+0x32>
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	401a      	ands	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43d9      	mvns	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	4313      	orrs	r3, r2
         );
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3724      	adds	r7, #36	; 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ff4c 	bl	800148c <__NVIC_SetPriorityGrouping>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800160e:	f7ff ff61 	bl	80014d4 <__NVIC_GetPriorityGrouping>
 8001612:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	6978      	ldr	r0, [r7, #20]
 800161a:	f7ff ffb1 	bl	8001580 <NVIC_EncodePriority>
 800161e:	4602      	mov	r2, r0
 8001620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001624:	4611      	mov	r1, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff80 	bl	800152c <__NVIC_SetPriority>
}
 800162c:	bf00      	nop
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff54 	bl	80014f0 <__NVIC_EnableIRQ>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800165c:	f7ff ff0a 	bl	8001474 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e099      	b.n	80017a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2202      	movs	r2, #2
 8001670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0201 	bic.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800168c:	e00f      	b.n	80016ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800168e:	f7ff fef1 	bl	8001474 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b05      	cmp	r3, #5
 800169a:	d908      	bls.n	80016ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2220      	movs	r2, #32
 80016a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2203      	movs	r2, #3
 80016a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e078      	b.n	80017a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1e8      	bne.n	800168e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	4b38      	ldr	r3, [pc, #224]	; (80017a8 <HAL_DMA_Init+0x158>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	2b04      	cmp	r3, #4
 8001706:	d107      	bne.n	8001718 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	4313      	orrs	r3, r2
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	4313      	orrs	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f023 0307 	bic.w	r3, r3, #7
 800172e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	4313      	orrs	r3, r2
 8001738:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	2b04      	cmp	r3, #4
 8001740:	d117      	bne.n	8001772 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4313      	orrs	r3, r2
 800174a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00e      	beq.n	8001772 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 fa6f 	bl	8001c38 <DMA_CheckFifoParam>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2240      	movs	r2, #64	; 0x40
 8001764:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800176e:	2301      	movs	r3, #1
 8001770:	e016      	b.n	80017a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 fa26 	bl	8001bcc <DMA_CalcBaseAndBitshift>
 8001780:	4603      	mov	r3, r0
 8001782:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001788:	223f      	movs	r2, #63	; 0x3f
 800178a:	409a      	lsls	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	f010803f 	.word	0xf010803f

080017ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_DMA_Start_IT+0x26>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e040      	b.n	8001854 <HAL_DMA_Start_IT+0xa8>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d12f      	bne.n	8001846 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2202      	movs	r2, #2
 80017ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 f9b8 	bl	8001b70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001804:	223f      	movs	r2, #63	; 0x3f
 8001806:	409a      	lsls	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0216 	orr.w	r2, r2, #22
 800181a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	2b00      	cmp	r3, #0
 8001822:	d007      	beq.n	8001834 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f042 0208 	orr.w	r2, r2, #8
 8001832:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0201 	orr.w	r2, r2, #1
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	e005      	b.n	8001852 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800184e:	2302      	movs	r3, #2
 8001850:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001852:	7dfb      	ldrb	r3, [r7, #23]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001868:	4b8e      	ldr	r3, [pc, #568]	; (8001aa4 <HAL_DMA_IRQHandler+0x248>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a8e      	ldr	r2, [pc, #568]	; (8001aa8 <HAL_DMA_IRQHandler+0x24c>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	0a9b      	lsrs	r3, r3, #10
 8001874:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001886:	2208      	movs	r2, #8
 8001888:	409a      	lsls	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4013      	ands	r3, r2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d01a      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d013      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0204 	bic.w	r2, r2, #4
 80018ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b4:	2208      	movs	r2, #8
 80018b6:	409a      	lsls	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c0:	f043 0201 	orr.w	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018cc:	2201      	movs	r2, #1
 80018ce:	409a      	lsls	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d012      	beq.n	80018fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00b      	beq.n	80018fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ea:	2201      	movs	r2, #1
 80018ec:	409a      	lsls	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f6:	f043 0202 	orr.w	r2, r3, #2
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	2204      	movs	r2, #4
 8001904:	409a      	lsls	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4013      	ands	r3, r2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d012      	beq.n	8001934 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00b      	beq.n	8001934 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001920:	2204      	movs	r2, #4
 8001922:	409a      	lsls	r2, r3
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192c:	f043 0204 	orr.w	r2, r3, #4
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001938:	2210      	movs	r2, #16
 800193a:	409a      	lsls	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4013      	ands	r3, r2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d043      	beq.n	80019cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d03c      	beq.n	80019cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001956:	2210      	movs	r2, #16
 8001958:	409a      	lsls	r2, r3
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d018      	beq.n	800199e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d108      	bne.n	800198c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	2b00      	cmp	r3, #0
 8001980:	d024      	beq.n	80019cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	4798      	blx	r3
 800198a:	e01f      	b.n	80019cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01b      	beq.n	80019cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
 800199c:	e016      	b.n	80019cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d107      	bne.n	80019bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0208 	bic.w	r2, r2, #8
 80019ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	2220      	movs	r2, #32
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 808f 	beq.w	8001afc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 8087 	beq.w	8001afc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	2220      	movs	r2, #32
 80019f4:	409a      	lsls	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b05      	cmp	r3, #5
 8001a04:	d136      	bne.n	8001a74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0216 	bic.w	r2, r2, #22
 8001a14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d103      	bne.n	8001a36 <HAL_DMA_IRQHandler+0x1da>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d007      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0208 	bic.w	r2, r2, #8
 8001a44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4a:	223f      	movs	r2, #63	; 0x3f
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d07e      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	4798      	blx	r3
        }
        return;
 8001a72:	e079      	b.n	8001b68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d01d      	beq.n	8001abe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10d      	bne.n	8001aac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d031      	beq.n	8001afc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	4798      	blx	r3
 8001aa0:	e02c      	b.n	8001afc <HAL_DMA_IRQHandler+0x2a0>
 8001aa2:	bf00      	nop
 8001aa4:	20000028 	.word	0x20000028
 8001aa8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d023      	beq.n	8001afc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	4798      	blx	r3
 8001abc:	e01e      	b.n	8001afc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10f      	bne.n	8001aec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0210 	bic.w	r2, r2, #16
 8001ada:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d032      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d022      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2205      	movs	r2, #5
 8001b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d307      	bcc.n	8001b44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f2      	bne.n	8001b28 <HAL_DMA_IRQHandler+0x2cc>
 8001b42:	e000      	b.n	8001b46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d005      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	4798      	blx	r3
 8001b66:	e000      	b.n	8001b6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b68:	bf00      	nop
    }
  }
}
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b40      	cmp	r3, #64	; 0x40
 8001b9c:	d108      	bne.n	8001bb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bae:	e007      	b.n	8001bc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	60da      	str	r2, [r3, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	3b10      	subs	r3, #16
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <DMA_CalcBaseAndBitshift+0x64>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001be6:	4a13      	ldr	r2, [pc, #76]	; (8001c34 <DMA_CalcBaseAndBitshift+0x68>)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d909      	bls.n	8001c0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c02:	f023 0303 	bic.w	r3, r3, #3
 8001c06:	1d1a      	adds	r2, r3, #4
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	659a      	str	r2, [r3, #88]	; 0x58
 8001c0c:	e007      	b.n	8001c1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c16:	f023 0303 	bic.w	r3, r3, #3
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	aaaaaaab 	.word	0xaaaaaaab
 8001c34:	08004fd4 	.word	0x08004fd4

08001c38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d11f      	bne.n	8001c92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d856      	bhi.n	8001d06 <DMA_CheckFifoParam+0xce>
 8001c58:	a201      	add	r2, pc, #4	; (adr r2, 8001c60 <DMA_CheckFifoParam+0x28>)
 8001c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5e:	bf00      	nop
 8001c60:	08001c71 	.word	0x08001c71
 8001c64:	08001c83 	.word	0x08001c83
 8001c68:	08001c71 	.word	0x08001c71
 8001c6c:	08001d07 	.word	0x08001d07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d046      	beq.n	8001d0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c80:	e043      	b.n	8001d0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c8a:	d140      	bne.n	8001d0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c90:	e03d      	b.n	8001d0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c9a:	d121      	bne.n	8001ce0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d837      	bhi.n	8001d12 <DMA_CheckFifoParam+0xda>
 8001ca2:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <DMA_CheckFifoParam+0x70>)
 8001ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca8:	08001cb9 	.word	0x08001cb9
 8001cac:	08001cbf 	.word	0x08001cbf
 8001cb0:	08001cb9 	.word	0x08001cb9
 8001cb4:	08001cd1 	.word	0x08001cd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
      break;
 8001cbc:	e030      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d025      	beq.n	8001d16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cce:	e022      	b.n	8001d16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cd8:	d11f      	bne.n	8001d1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cde:	e01c      	b.n	8001d1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d903      	bls.n	8001cee <DMA_CheckFifoParam+0xb6>
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d003      	beq.n	8001cf4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cec:	e018      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8001cf2:	e015      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00e      	beq.n	8001d1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
      break;
 8001d04:	e00b      	b.n	8001d1e <DMA_CheckFifoParam+0xe6>
      break;
 8001d06:	bf00      	nop
 8001d08:	e00a      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      break;
 8001d0a:	bf00      	nop
 8001d0c:	e008      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      break;
 8001d0e:	bf00      	nop
 8001d10:	e006      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      break;
 8001d12:	bf00      	nop
 8001d14:	e004      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      break;
 8001d16:	bf00      	nop
 8001d18:	e002      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d1a:	bf00      	nop
 8001d1c:	e000      	b.n	8001d20 <DMA_CheckFifoParam+0xe8>
      break;
 8001d1e:	bf00      	nop
    }
  } 
  
  return status; 
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	e159      	b.n	8002000 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	f040 8148 	bne.w	8001ffa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d005      	beq.n	8001d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d130      	bne.n	8001de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db8:	2201      	movs	r2, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 0201 	and.w	r2, r3, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d017      	beq.n	8001e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d123      	bne.n	8001e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	08da      	lsrs	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3208      	adds	r2, #8
 8001e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	220f      	movs	r2, #15
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	69b9      	ldr	r1, [r7, #24]
 8001e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0203 	and.w	r2, r3, #3
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 80a2 	beq.w	8001ffa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b57      	ldr	r3, [pc, #348]	; (8002018 <HAL_GPIO_Init+0x2e8>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a56      	ldr	r2, [pc, #344]	; (8002018 <HAL_GPIO_Init+0x2e8>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	4b54      	ldr	r3, [pc, #336]	; (8002018 <HAL_GPIO_Init+0x2e8>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ed2:	4a52      	ldr	r2, [pc, #328]	; (800201c <HAL_GPIO_Init+0x2ec>)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	089b      	lsrs	r3, r3, #2
 8001ed8:	3302      	adds	r3, #2
 8001eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	220f      	movs	r2, #15
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a49      	ldr	r2, [pc, #292]	; (8002020 <HAL_GPIO_Init+0x2f0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_Init+0x202>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a48      	ldr	r2, [pc, #288]	; (8002024 <HAL_GPIO_Init+0x2f4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0x1fe>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a47      	ldr	r2, [pc, #284]	; (8002028 <HAL_GPIO_Init+0x2f8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_Init+0x1fa>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a46      	ldr	r2, [pc, #280]	; (800202c <HAL_GPIO_Init+0x2fc>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x1f6>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a45      	ldr	r2, [pc, #276]	; (8002030 <HAL_GPIO_Init+0x300>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_Init+0x1f2>
 8001f1e:	2304      	movs	r3, #4
 8001f20:	e008      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f22:	2307      	movs	r3, #7
 8001f24:	e006      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f26:	2303      	movs	r3, #3
 8001f28:	e004      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e002      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_GPIO_Init+0x204>
 8001f32:	2300      	movs	r3, #0
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	f002 0203 	and.w	r2, r2, #3
 8001f3a:	0092      	lsls	r2, r2, #2
 8001f3c:	4093      	lsls	r3, r2
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f44:	4935      	ldr	r1, [pc, #212]	; (800201c <HAL_GPIO_Init+0x2ec>)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f52:	4b38      	ldr	r3, [pc, #224]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f76:	4a2f      	ldr	r2, [pc, #188]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fa0:	4a24      	ldr	r2, [pc, #144]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fa6:	4b23      	ldr	r3, [pc, #140]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fca:	4a1a      	ldr	r2, [pc, #104]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ff4:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	61fb      	str	r3, [r7, #28]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	2b0f      	cmp	r3, #15
 8002004:	f67f aea2 	bls.w	8001d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	40013800 	.word	0x40013800
 8002020:	40020000 	.word	0x40020000
 8002024:	40020400 	.word	0x40020400
 8002028:	40020800 	.word	0x40020800
 800202c:	40020c00 	.word	0x40020c00
 8002030:	40021000 	.word	0x40021000
 8002034:	40013c00 	.word	0x40013c00

08002038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
 8002044:	4613      	mov	r3, r2
 8002046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002048:	787b      	ldrb	r3, [r7, #1]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204e:	887a      	ldrh	r2, [r7, #2]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002054:	e003      	b.n	800205e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	041a      	lsls	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	619a      	str	r2, [r3, #24]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e267      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d075      	beq.n	8002176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800208a:	4b88      	ldr	r3, [pc, #544]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b04      	cmp	r3, #4
 8002094:	d00c      	beq.n	80020b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002096:	4b85      	ldr	r3, [pc, #532]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d112      	bne.n	80020c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020a2:	4b82      	ldr	r3, [pc, #520]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ae:	d10b      	bne.n	80020c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b0:	4b7e      	ldr	r3, [pc, #504]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d05b      	beq.n	8002174 <HAL_RCC_OscConfig+0x108>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d157      	bne.n	8002174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e242      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d0:	d106      	bne.n	80020e0 <HAL_RCC_OscConfig+0x74>
 80020d2:	4b76      	ldr	r3, [pc, #472]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a75      	ldr	r2, [pc, #468]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80020d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	e01d      	b.n	800211c <HAL_RCC_OscConfig+0xb0>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0x98>
 80020ea:	4b70      	ldr	r3, [pc, #448]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a6f      	ldr	r2, [pc, #444]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80020f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	4b6d      	ldr	r3, [pc, #436]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a6c      	ldr	r2, [pc, #432]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e00b      	b.n	800211c <HAL_RCC_OscConfig+0xb0>
 8002104:	4b69      	ldr	r3, [pc, #420]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a68      	ldr	r2, [pc, #416]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 800210a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	4b66      	ldr	r3, [pc, #408]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a65      	ldr	r2, [pc, #404]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d013      	beq.n	800214c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7ff f9a6 	bl	8001474 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800212c:	f7ff f9a2 	bl	8001474 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	; 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e207      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	4b5b      	ldr	r3, [pc, #364]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0xc0>
 800214a:	e014      	b.n	8002176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff f992 	bl	8001474 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002154:	f7ff f98e 	bl	8001474 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	; 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e1f3      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002166:	4b51      	ldr	r3, [pc, #324]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0xe8>
 8002172:	e000      	b.n	8002176 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d063      	beq.n	800224a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002182:	4b4a      	ldr	r3, [pc, #296]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00b      	beq.n	80021a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800218e:	4b47      	ldr	r3, [pc, #284]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002196:	2b08      	cmp	r3, #8
 8002198:	d11c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800219a:	4b44      	ldr	r3, [pc, #272]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d116      	bne.n	80021d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a6:	4b41      	ldr	r3, [pc, #260]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d005      	beq.n	80021be <HAL_RCC_OscConfig+0x152>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d001      	beq.n	80021be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e1c7      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021be:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4937      	ldr	r1, [pc, #220]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d2:	e03a      	b.n	800224a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d020      	beq.n	800221e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021dc:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <HAL_RCC_OscConfig+0x244>)
 80021de:	2201      	movs	r2, #1
 80021e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e2:	f7ff f947 	bl	8001474 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ea:	f7ff f943 	bl	8001474 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e1a8      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002208:	4b28      	ldr	r3, [pc, #160]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4925      	ldr	r1, [pc, #148]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002218:	4313      	orrs	r3, r2
 800221a:	600b      	str	r3, [r1, #0]
 800221c:	e015      	b.n	800224a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800221e:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <HAL_RCC_OscConfig+0x244>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7ff f926 	bl	8001474 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222c:	f7ff f922 	bl	8001474 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e187      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223e:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d036      	beq.n	80022c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d016      	beq.n	800228c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_RCC_OscConfig+0x248>)
 8002260:	2201      	movs	r2, #1
 8002262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7ff f906 	bl	8001474 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800226c:	f7ff f902 	bl	8001474 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e167      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x200>
 800228a:	e01b      	b.n	80022c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800228c:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_RCC_OscConfig+0x248>)
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002292:	f7ff f8ef 	bl	8001474 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002298:	e00e      	b.n	80022b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800229a:	f7ff f8eb 	bl	8001474 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d907      	bls.n	80022b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e150      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
 80022ac:	40023800 	.word	0x40023800
 80022b0:	42470000 	.word	0x42470000
 80022b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b8:	4b88      	ldr	r3, [pc, #544]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80022ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1ea      	bne.n	800229a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 8097 	beq.w	8002400 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d2:	2300      	movs	r3, #0
 80022d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d6:	4b81      	ldr	r3, [pc, #516]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10f      	bne.n	8002302 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	4b7d      	ldr	r3, [pc, #500]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	4a7c      	ldr	r2, [pc, #496]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80022ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f0:	6413      	str	r3, [r2, #64]	; 0x40
 80022f2:	4b7a      	ldr	r3, [pc, #488]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022fe:	2301      	movs	r3, #1
 8002300:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002302:	4b77      	ldr	r3, [pc, #476]	; (80024e0 <HAL_RCC_OscConfig+0x474>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230a:	2b00      	cmp	r3, #0
 800230c:	d118      	bne.n	8002340 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800230e:	4b74      	ldr	r3, [pc, #464]	; (80024e0 <HAL_RCC_OscConfig+0x474>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a73      	ldr	r2, [pc, #460]	; (80024e0 <HAL_RCC_OscConfig+0x474>)
 8002314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231a:	f7ff f8ab 	bl	8001474 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002322:	f7ff f8a7 	bl	8001474 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e10c      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	4b6a      	ldr	r3, [pc, #424]	; (80024e0 <HAL_RCC_OscConfig+0x474>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d106      	bne.n	8002356 <HAL_RCC_OscConfig+0x2ea>
 8002348:	4b64      	ldr	r3, [pc, #400]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 800234a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234c:	4a63      	ldr	r2, [pc, #396]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6713      	str	r3, [r2, #112]	; 0x70
 8002354:	e01c      	b.n	8002390 <HAL_RCC_OscConfig+0x324>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b05      	cmp	r3, #5
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x30c>
 800235e:	4b5f      	ldr	r3, [pc, #380]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002362:	4a5e      	ldr	r2, [pc, #376]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	6713      	str	r3, [r2, #112]	; 0x70
 800236a:	4b5c      	ldr	r3, [pc, #368]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236e:	4a5b      	ldr	r2, [pc, #364]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6713      	str	r3, [r2, #112]	; 0x70
 8002376:	e00b      	b.n	8002390 <HAL_RCC_OscConfig+0x324>
 8002378:	4b58      	ldr	r3, [pc, #352]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	4a57      	ldr	r2, [pc, #348]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	6713      	str	r3, [r2, #112]	; 0x70
 8002384:	4b55      	ldr	r3, [pc, #340]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	4a54      	ldr	r2, [pc, #336]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 800238a:	f023 0304 	bic.w	r3, r3, #4
 800238e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d015      	beq.n	80023c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002398:	f7ff f86c 	bl	8001474 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239e:	e00a      	b.n	80023b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023a0:	f7ff f868 	bl	8001474 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e0cb      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b6:	4b49      	ldr	r3, [pc, #292]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0ee      	beq.n	80023a0 <HAL_RCC_OscConfig+0x334>
 80023c2:	e014      	b.n	80023ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c4:	f7ff f856 	bl	8001474 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023cc:	f7ff f852 	bl	8001474 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e0b5      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e2:	4b3e      	ldr	r3, [pc, #248]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1ee      	bne.n	80023cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ee:	7dfb      	ldrb	r3, [r7, #23]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f4:	4b39      	ldr	r3, [pc, #228]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	4a38      	ldr	r2, [pc, #224]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80023fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80a1 	beq.w	800254c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800240a:	4b34      	ldr	r3, [pc, #208]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b08      	cmp	r3, #8
 8002414:	d05c      	beq.n	80024d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d141      	bne.n	80024a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241e:	4b31      	ldr	r3, [pc, #196]	; (80024e4 <HAL_RCC_OscConfig+0x478>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7ff f826 	bl	8001474 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242c:	f7ff f822 	bl	8001474 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e087      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243e:	4b27      	ldr	r3, [pc, #156]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69da      	ldr	r2, [r3, #28]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	019b      	lsls	r3, r3, #6
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	085b      	lsrs	r3, r3, #1
 8002462:	3b01      	subs	r3, #1
 8002464:	041b      	lsls	r3, r3, #16
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	061b      	lsls	r3, r3, #24
 800246e:	491b      	ldr	r1, [pc, #108]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002474:	4b1b      	ldr	r3, [pc, #108]	; (80024e4 <HAL_RCC_OscConfig+0x478>)
 8002476:	2201      	movs	r2, #1
 8002478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247a:	f7fe fffb 	bl	8001474 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002482:	f7fe fff7 	bl	8001474 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e05c      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x416>
 80024a0:	e054      	b.n	800254c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <HAL_RCC_OscConfig+0x478>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a8:	f7fe ffe4 	bl	8001474 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe ffe0 	bl	8001474 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e045      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x444>
 80024ce:	e03d      	b.n	800254c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e038      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40007000 	.word	0x40007000
 80024e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024e8:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_RCC_OscConfig+0x4ec>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d028      	beq.n	8002548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d121      	bne.n	8002548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d11a      	bne.n	8002548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002518:	4013      	ands	r3, r2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800251e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002520:	4293      	cmp	r3, r2
 8002522:	d111      	bne.n	8002548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252e:	085b      	lsrs	r3, r3, #1
 8002530:	3b01      	subs	r3, #1
 8002532:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002534:	429a      	cmp	r2, r3
 8002536:	d107      	bne.n	8002548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800

0800255c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0cc      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002570:	4b68      	ldr	r3, [pc, #416]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d90c      	bls.n	8002598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b65      	ldr	r3, [pc, #404]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b63      	ldr	r3, [pc, #396]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0b8      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b0:	4b59      	ldr	r3, [pc, #356]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a58      	ldr	r2, [pc, #352]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c8:	4b53      	ldr	r3, [pc, #332]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4a52      	ldr	r2, [pc, #328]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	4b50      	ldr	r3, [pc, #320]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	494d      	ldr	r1, [pc, #308]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d044      	beq.n	800267c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	4b47      	ldr	r3, [pc, #284]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d119      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e07f      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d003      	beq.n	800261a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002616:	2b03      	cmp	r3, #3
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261a:	4b3f      	ldr	r3, [pc, #252]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e06f      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	4b3b      	ldr	r3, [pc, #236]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e067      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263a:	4b37      	ldr	r3, [pc, #220]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f023 0203 	bic.w	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4934      	ldr	r1, [pc, #208]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	4313      	orrs	r3, r2
 800264a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800264c:	f7fe ff12 	bl	8001474 <HAL_GetTick>
 8002650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	e00a      	b.n	800266a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002654:	f7fe ff0e 	bl	8001474 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e04f      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 020c 	and.w	r2, r3, #12
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	429a      	cmp	r2, r3
 800267a:	d1eb      	bne.n	8002654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800267c:	4b25      	ldr	r3, [pc, #148]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d20c      	bcs.n	80026a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b22      	ldr	r3, [pc, #136]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e032      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b0:	4b19      	ldr	r3, [pc, #100]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4916      	ldr	r1, [pc, #88]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	490e      	ldr	r1, [pc, #56]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026e2:	f000 f821 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 80026e6:	4602      	mov	r2, r0
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	490a      	ldr	r1, [pc, #40]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	5ccb      	ldrb	r3, [r1, r3]
 80026f6:	fa22 f303 	lsr.w	r3, r2, r3
 80026fa:	4a09      	ldr	r2, [pc, #36]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe fd9e 	bl	8001244 <HAL_InitTick>

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40023c00 	.word	0x40023c00
 8002718:	40023800 	.word	0x40023800
 800271c:	08004fbc 	.word	0x08004fbc
 8002720:	20000028 	.word	0x20000028
 8002724:	2000002c 	.word	0x2000002c

08002728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800272c:	b094      	sub	sp, #80	; 0x50
 800272e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	647b      	str	r3, [r7, #68]	; 0x44
 8002734:	2300      	movs	r3, #0
 8002736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002738:	2300      	movs	r3, #0
 800273a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002740:	4b79      	ldr	r3, [pc, #484]	; (8002928 <HAL_RCC_GetSysClockFreq+0x200>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 030c 	and.w	r3, r3, #12
 8002748:	2b08      	cmp	r3, #8
 800274a:	d00d      	beq.n	8002768 <HAL_RCC_GetSysClockFreq+0x40>
 800274c:	2b08      	cmp	r3, #8
 800274e:	f200 80e1 	bhi.w	8002914 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0x34>
 8002756:	2b04      	cmp	r3, #4
 8002758:	d003      	beq.n	8002762 <HAL_RCC_GetSysClockFreq+0x3a>
 800275a:	e0db      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800275c:	4b73      	ldr	r3, [pc, #460]	; (800292c <HAL_RCC_GetSysClockFreq+0x204>)
 800275e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002760:	e0db      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002762:	4b73      	ldr	r3, [pc, #460]	; (8002930 <HAL_RCC_GetSysClockFreq+0x208>)
 8002764:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002766:	e0d8      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002768:	4b6f      	ldr	r3, [pc, #444]	; (8002928 <HAL_RCC_GetSysClockFreq+0x200>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002770:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002772:	4b6d      	ldr	r3, [pc, #436]	; (8002928 <HAL_RCC_GetSysClockFreq+0x200>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d063      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277e:	4b6a      	ldr	r3, [pc, #424]	; (8002928 <HAL_RCC_GetSysClockFreq+0x200>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	099b      	lsrs	r3, r3, #6
 8002784:	2200      	movs	r2, #0
 8002786:	63bb      	str	r3, [r7, #56]	; 0x38
 8002788:	63fa      	str	r2, [r7, #60]	; 0x3c
 800278a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002790:	633b      	str	r3, [r7, #48]	; 0x30
 8002792:	2300      	movs	r3, #0
 8002794:	637b      	str	r3, [r7, #52]	; 0x34
 8002796:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800279a:	4622      	mov	r2, r4
 800279c:	462b      	mov	r3, r5
 800279e:	f04f 0000 	mov.w	r0, #0
 80027a2:	f04f 0100 	mov.w	r1, #0
 80027a6:	0159      	lsls	r1, r3, #5
 80027a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ac:	0150      	lsls	r0, r2, #5
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4621      	mov	r1, r4
 80027b4:	1a51      	subs	r1, r2, r1
 80027b6:	6139      	str	r1, [r7, #16]
 80027b8:	4629      	mov	r1, r5
 80027ba:	eb63 0301 	sbc.w	r3, r3, r1
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027cc:	4659      	mov	r1, fp
 80027ce:	018b      	lsls	r3, r1, #6
 80027d0:	4651      	mov	r1, sl
 80027d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027d6:	4651      	mov	r1, sl
 80027d8:	018a      	lsls	r2, r1, #6
 80027da:	4651      	mov	r1, sl
 80027dc:	ebb2 0801 	subs.w	r8, r2, r1
 80027e0:	4659      	mov	r1, fp
 80027e2:	eb63 0901 	sbc.w	r9, r3, r1
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027fa:	4690      	mov	r8, r2
 80027fc:	4699      	mov	r9, r3
 80027fe:	4623      	mov	r3, r4
 8002800:	eb18 0303 	adds.w	r3, r8, r3
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	462b      	mov	r3, r5
 8002808:	eb49 0303 	adc.w	r3, r9, r3
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800281a:	4629      	mov	r1, r5
 800281c:	024b      	lsls	r3, r1, #9
 800281e:	4621      	mov	r1, r4
 8002820:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002824:	4621      	mov	r1, r4
 8002826:	024a      	lsls	r2, r1, #9
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800282e:	2200      	movs	r2, #0
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28
 8002832:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002834:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002838:	f7fd fcd2 	bl	80001e0 <__aeabi_uldivmod>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4613      	mov	r3, r2
 8002842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002844:	e058      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002846:	4b38      	ldr	r3, [pc, #224]	; (8002928 <HAL_RCC_GetSysClockFreq+0x200>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	099b      	lsrs	r3, r3, #6
 800284c:	2200      	movs	r2, #0
 800284e:	4618      	mov	r0, r3
 8002850:	4611      	mov	r1, r2
 8002852:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002856:	623b      	str	r3, [r7, #32]
 8002858:	2300      	movs	r3, #0
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
 800285c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002860:	4642      	mov	r2, r8
 8002862:	464b      	mov	r3, r9
 8002864:	f04f 0000 	mov.w	r0, #0
 8002868:	f04f 0100 	mov.w	r1, #0
 800286c:	0159      	lsls	r1, r3, #5
 800286e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002872:	0150      	lsls	r0, r2, #5
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4641      	mov	r1, r8
 800287a:	ebb2 0a01 	subs.w	sl, r2, r1
 800287e:	4649      	mov	r1, r9
 8002880:	eb63 0b01 	sbc.w	fp, r3, r1
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002890:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002894:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002898:	ebb2 040a 	subs.w	r4, r2, sl
 800289c:	eb63 050b 	sbc.w	r5, r3, fp
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	00eb      	lsls	r3, r5, #3
 80028aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ae:	00e2      	lsls	r2, r4, #3
 80028b0:	4614      	mov	r4, r2
 80028b2:	461d      	mov	r5, r3
 80028b4:	4643      	mov	r3, r8
 80028b6:	18e3      	adds	r3, r4, r3
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	464b      	mov	r3, r9
 80028bc:	eb45 0303 	adc.w	r3, r5, r3
 80028c0:	607b      	str	r3, [r7, #4]
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ce:	4629      	mov	r1, r5
 80028d0:	028b      	lsls	r3, r1, #10
 80028d2:	4621      	mov	r1, r4
 80028d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028d8:	4621      	mov	r1, r4
 80028da:	028a      	lsls	r2, r1, #10
 80028dc:	4610      	mov	r0, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e2:	2200      	movs	r2, #0
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	61fa      	str	r2, [r7, #28]
 80028e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028ec:	f7fd fc78 	bl	80001e0 <__aeabi_uldivmod>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4613      	mov	r3, r2
 80028f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_RCC_GetSysClockFreq+0x200>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	0c1b      	lsrs	r3, r3, #16
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	3301      	adds	r3, #1
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002908:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800290a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800290c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002910:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002912:	e002      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <HAL_RCC_GetSysClockFreq+0x204>)
 8002916:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800291a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800291c:	4618      	mov	r0, r3
 800291e:	3750      	adds	r7, #80	; 0x50
 8002920:	46bd      	mov	sp, r7
 8002922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800
 800292c:	00f42400 	.word	0x00f42400
 8002930:	007a1200 	.word	0x007a1200

08002934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002938:	4b03      	ldr	r3, [pc, #12]	; (8002948 <HAL_RCC_GetHCLKFreq+0x14>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000028 	.word	0x20000028

0800294c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002950:	f7ff fff0 	bl	8002934 <HAL_RCC_GetHCLKFreq>
 8002954:	4602      	mov	r2, r0
 8002956:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	0b5b      	lsrs	r3, r3, #13
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	4903      	ldr	r1, [pc, #12]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002962:	5ccb      	ldrb	r3, [r1, r3]
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002968:	4618      	mov	r0, r3
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40023800 	.word	0x40023800
 8002970:	08004fcc 	.word	0x08004fcc

08002974 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	220f      	movs	r2, #15
 8002982:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0203 	and.w	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029b6:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <HAL_RCC_GetClockConfig+0x60>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0207 	and.w	r2, r3, #7
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	601a      	str	r2, [r3, #0]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40023c00 	.word	0x40023c00

080029d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e07b      	b.n	8002ae2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d108      	bne.n	8002a04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029fa:	d009      	beq.n	8002a10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	61da      	str	r2, [r3, #28]
 8002a02:	e005      	b.n	8002a10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe fb32 	bl	8001094 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a94:	ea42 0103 	orr.w	r1, r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	0c1b      	lsrs	r3, r3, #16
 8002aae:	f003 0104 	and.w	r1, r3, #4
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	f003 0210 	and.w	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69da      	ldr	r2, [r3, #28]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	4613      	mov	r3, r2
 8002af8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_SPI_Transmit_DMA+0x20>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e097      	b.n	8002c3c <HAL_SPI_Transmit_DMA+0x150>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d002      	beq.n	8002b26 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
 8002b22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b24:	e085      	b.n	8002c32 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <HAL_SPI_Transmit_DMA+0x46>
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b36:	e07c      	b.n	8002c32 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	88fa      	ldrh	r2, [r7, #6]
 8002b50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	88fa      	ldrh	r2, [r7, #6]
 8002b56:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b7e:	d10f      	bne.n	8002ba0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba4:	4a27      	ldr	r2, [pc, #156]	; (8002c44 <HAL_SPI_Transmit_DMA+0x158>)
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bac:	4a26      	ldr	r2, [pc, #152]	; (8002c48 <HAL_SPI_Transmit_DMA+0x15c>)
 8002bae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb4:	4a25      	ldr	r2, [pc, #148]	; (8002c4c <HAL_SPI_Transmit_DMA+0x160>)
 8002bb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	4619      	mov	r1, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bd6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002bd8:	f7fe fde8 	bl	80017ac <HAL_DMA_Start_IT>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f043 0210 	orr.w	r2, r3, #16
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002bf2:	e01e      	b.n	8002c32 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d007      	beq.n	8002c12 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c10:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0220 	orr.w	r2, r2, #32
 8002c20:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0202 	orr.w	r2, r2, #2
 8002c30:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	08003239 	.word	0x08003239
 8002c48:	08003059 	.word	0x08003059
 8002c4c:	0800328d 	.word	0x0800328d

08002c50 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d002      	beq.n	8002c74 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c72:	e0a2      	b.n	8002dba <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d110      	bne.n	8002c9e <HAL_SPI_Receive_DMA+0x4e>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c84:	d10b      	bne.n	8002c9e <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2204      	movs	r2, #4
 8002c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002c8e:	88fb      	ldrh	r3, [r7, #6]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	68b9      	ldr	r1, [r7, #8]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f89f 	bl	8002dd8 <HAL_SPI_TransmitReceive_DMA>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	e092      	b.n	8002dc4 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_SPI_Receive_DMA+0x5c>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e08b      	b.n	8002dc4 <HAL_SPI_Receive_DMA+0x174>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <HAL_SPI_Receive_DMA+0x70>
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d102      	bne.n	8002cc6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002cc4:	e079      	b.n	8002dba <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2204      	movs	r2, #4
 8002cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	88fa      	ldrh	r2, [r7, #6]
 8002cde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	88fa      	ldrh	r2, [r7, #6]
 8002ce4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d06:	d10f      	bne.n	8002d28 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d26:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2c:	4a27      	ldr	r2, [pc, #156]	; (8002dcc <HAL_SPI_Receive_DMA+0x17c>)
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d34:	4a26      	ldr	r2, [pc, #152]	; (8002dd0 <HAL_SPI_Receive_DMA+0x180>)
 8002d36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3c:	4a25      	ldr	r2, [pc, #148]	; (8002dd4 <HAL_SPI_Receive_DMA+0x184>)
 8002d3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d44:	2200      	movs	r2, #0
 8002d46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	330c      	adds	r3, #12
 8002d52:	4619      	mov	r1, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d5e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002d60:	f7fe fd24 	bl	80017ac <HAL_DMA_Start_IT>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	f043 0210 	orr.w	r2, r3, #16
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002d7a:	e01e      	b.n	8002dba <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d86:	2b40      	cmp	r3, #64	; 0x40
 8002d88:	d007      	beq.n	8002d9a <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d98:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 0220 	orr.w	r2, r2, #32
 8002da8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0201 	orr.w	r2, r2, #1
 8002db8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	08003255 	.word	0x08003255
 8002dd0:	08003101 	.word	0x08003101
 8002dd4:	0800328d 	.word	0x0800328d

08002dd8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_SPI_TransmitReceive_DMA+0x20>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e0db      	b.n	8002fb0 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e06:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002e0e:	7dbb      	ldrb	r3, [r7, #22]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d00d      	beq.n	8002e30 <HAL_SPI_TransmitReceive_DMA+0x58>
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e1a:	d106      	bne.n	8002e2a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d102      	bne.n	8002e2a <HAL_SPI_TransmitReceive_DMA+0x52>
 8002e24:	7dbb      	ldrb	r3, [r7, #22]
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d002      	beq.n	8002e30 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e2e:	e0ba      	b.n	8002fa6 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002e3c:	887b      	ldrh	r3, [r7, #2]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d102      	bne.n	8002e48 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e46:	e0ae      	b.n	8002fa6 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d003      	beq.n	8002e5c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2205      	movs	r2, #5
 8002e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	887a      	ldrh	r2, [r7, #2]
 8002e6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	887a      	ldrh	r2, [r7, #2]
 8002e72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	887a      	ldrh	r2, [r7, #2]
 8002e7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	887a      	ldrh	r2, [r7, #2]
 8002e84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d108      	bne.n	8002eb0 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea2:	4a45      	ldr	r2, [pc, #276]	; (8002fb8 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eaa:	4a44      	ldr	r2, [pc, #272]	; (8002fbc <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8002eac:	63da      	str	r2, [r3, #60]	; 0x3c
 8002eae:	e007      	b.n	8002ec0 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb4:	4a42      	ldr	r2, [pc, #264]	; (8002fc0 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebc:	4a41      	ldr	r2, [pc, #260]	; (8002fc4 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8002ebe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec4:	4a40      	ldr	r2, [pc, #256]	; (8002fc8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002ec6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ecc:	2200      	movs	r2, #0
 8002ece:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	330c      	adds	r3, #12
 8002eda:	4619      	mov	r1, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002ee8:	f7fe fc60 	bl	80017ac <HAL_DMA_Start_IT>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d008      	beq.n	8002f04 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef6:	f043 0210 	orr.w	r2, r3, #16
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002f02:	e050      	b.n	8002fa6 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f18:	2200      	movs	r2, #0
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f20:	2200      	movs	r2, #0
 8002f22:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f28:	2200      	movs	r2, #0
 8002f2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f30:	2200      	movs	r2, #0
 8002f32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	330c      	adds	r3, #12
 8002f44:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f4a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002f4c:	f7fe fc2e 	bl	80017ac <HAL_DMA_Start_IT>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5a:	f043 0210 	orr.w	r2, r3, #16
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002f66:	e01e      	b.n	8002fa6 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f72:	2b40      	cmp	r3, #64	; 0x40
 8002f74:	d007      	beq.n	8002f86 <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f84:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0220 	orr.w	r2, r2, #32
 8002f94:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0202 	orr.w	r2, r2, #2
 8002fa4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	08003255 	.word	0x08003255
 8002fbc:	08003101 	.word	0x08003101
 8002fc0:	08003271 	.word	0x08003271
 8002fc4:	080031a9 	.word	0x080031a9
 8002fc8:	0800328d 	.word	0x0800328d

08002fcc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003066:	f7fe fa05 	bl	8001474 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307a:	d03b      	beq.n	80030f4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0220 	bic.w	r2, r2, #32
 800308a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0202 	bic.w	r2, r2, #2
 800309a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	2164      	movs	r1, #100	; 0x64
 80030a0:	6978      	ldr	r0, [r7, #20]
 80030a2:	f000 fa01 	bl	80034a8 <SPI_EndRxTxTransaction>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b0:	f043 0220 	orr.w	r2, r3, #32
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2200      	movs	r2, #0
 80030da:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80030ec:	6978      	ldr	r0, [r7, #20]
 80030ee:	f7ff ffa9 	bl	8003044 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80030f2:	e002      	b.n	80030fa <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80030f4:	6978      	ldr	r0, [r7, #20]
 80030f6:	f7ff ff69 	bl	8002fcc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800310e:	f7fe f9b1 	bl	8001474 <HAL_GetTick>
 8003112:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003122:	d03b      	beq.n	800319c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0220 	bic.w	r2, r2, #32
 8003132:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10d      	bne.n	8003158 <SPI_DMAReceiveCplt+0x58>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003144:	d108      	bne.n	8003158 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0203 	bic.w	r2, r2, #3
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	e007      	b.n	8003168 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0201 	bic.w	r2, r2, #1
 8003166:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	2164      	movs	r1, #100	; 0x64
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f935 	bl	80033dc <SPI_EndRxTransaction>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7ff ff55 	bl	8003044 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800319a:	e002      	b.n	80031a2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f7ff ff1f 	bl	8002fe0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031b6:	f7fe f95d 	bl	8001474 <HAL_GetTick>
 80031ba:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ca:	d02f      	beq.n	800322c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0220 	bic.w	r2, r2, #32
 80031da:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	2164      	movs	r1, #100	; 0x64
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f961 	bl	80034a8 <SPI_EndRxTxTransaction>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0203 	bic.w	r2, r2, #3
 8003206:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f7ff ff0d 	bl	8003044 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800322a:	e002      	b.n	8003232 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f7ff fee1 	bl	8002ff4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f7ff fede 	bl	8003008 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003260:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f7ff feda 	bl	800301c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003268:	bf00      	nop
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f7ff fed6 	bl	8003030 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0203 	bic.w	r2, r2, #3
 80032a8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	f043 0210 	orr.w	r2, r3, #16
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f7ff fec0 	bl	8003044 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032dc:	f7fe f8ca 	bl	8001474 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	4413      	add	r3, r2
 80032ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032ec:	f7fe f8c2 	bl	8001474 <HAL_GetTick>
 80032f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032f2:	4b39      	ldr	r3, [pc, #228]	; (80033d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	015b      	lsls	r3, r3, #5
 80032f8:	0d1b      	lsrs	r3, r3, #20
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	fb02 f303 	mul.w	r3, r2, r3
 8003300:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003302:	e054      	b.n	80033ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330a:	d050      	beq.n	80033ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800330c:	f7fe f8b2 	bl	8001474 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	429a      	cmp	r2, r3
 800331a:	d902      	bls.n	8003322 <SPI_WaitFlagStateUntilTimeout+0x56>
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d13d      	bne.n	800339e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003330:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800333a:	d111      	bne.n	8003360 <SPI_WaitFlagStateUntilTimeout+0x94>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003344:	d004      	beq.n	8003350 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334e:	d107      	bne.n	8003360 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800335e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003368:	d10f      	bne.n	800338a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003388:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e017      	b.n	80033ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4013      	ands	r3, r2
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d19b      	bne.n	8003304 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000028 	.word	0x20000028

080033dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033f0:	d111      	bne.n	8003416 <SPI_EndRxTransaction+0x3a>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033fa:	d004      	beq.n	8003406 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003404:	d107      	bne.n	8003416 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341e:	d12a      	bne.n	8003476 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003428:	d012      	beq.n	8003450 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2200      	movs	r2, #0
 8003432:	2180      	movs	r1, #128	; 0x80
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7ff ff49 	bl	80032cc <SPI_WaitFlagStateUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d02d      	beq.n	800349c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e026      	b.n	800349e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2200      	movs	r2, #0
 8003458:	2101      	movs	r1, #1
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f7ff ff36 	bl	80032cc <SPI_WaitFlagStateUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d01a      	beq.n	800349c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346a:	f043 0220 	orr.w	r2, r3, #32
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e013      	b.n	800349e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2200      	movs	r2, #0
 800347e:	2101      	movs	r1, #1
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff ff23 	bl	80032cc <SPI_WaitFlagStateUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e000      	b.n	800349e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2201      	movs	r2, #1
 80034bc:	2102      	movs	r1, #2
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff ff04 	bl	80032cc <SPI_WaitFlagStateUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d007      	beq.n	80034da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	f043 0220 	orr.w	r2, r3, #32
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e032      	b.n	8003540 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <SPI_EndRxTxTransaction+0xa0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1b      	ldr	r2, [pc, #108]	; (800354c <SPI_EndRxTxTransaction+0xa4>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	0d5b      	lsrs	r3, r3, #21
 80034e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034f8:	d112      	bne.n	8003520 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2200      	movs	r2, #0
 8003502:	2180      	movs	r1, #128	; 0x80
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7ff fee1 	bl	80032cc <SPI_WaitFlagStateUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d016      	beq.n	800353e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e00f      	b.n	8003540 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	3b01      	subs	r3, #1
 800352a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003536:	2b80      	cmp	r3, #128	; 0x80
 8003538:	d0f2      	beq.n	8003520 <SPI_EndRxTxTransaction+0x78>
 800353a:	e000      	b.n	800353e <SPI_EndRxTxTransaction+0x96>
        break;
 800353c:	bf00      	nop
  }

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000028 	.word	0x20000028
 800354c:	165e9f81 	.word	0x165e9f81

08003550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e041      	b.n	80035e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f839 	bl	80035ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3304      	adds	r3, #4
 800358c:	4619      	mov	r1, r3
 800358e:	4610      	mov	r0, r2
 8003590:	f000 f9b2 	bl	80038f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
	...

08003604 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	d001      	beq.n	800361c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e044      	b.n	80036a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a1e      	ldr	r2, [pc, #120]	; (80036b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d018      	beq.n	8003670 <HAL_TIM_Base_Start_IT+0x6c>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003646:	d013      	beq.n	8003670 <HAL_TIM_Base_Start_IT+0x6c>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a1a      	ldr	r2, [pc, #104]	; (80036b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00e      	beq.n	8003670 <HAL_TIM_Base_Start_IT+0x6c>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a19      	ldr	r2, [pc, #100]	; (80036bc <HAL_TIM_Base_Start_IT+0xb8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d009      	beq.n	8003670 <HAL_TIM_Base_Start_IT+0x6c>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a17      	ldr	r2, [pc, #92]	; (80036c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d004      	beq.n	8003670 <HAL_TIM_Base_Start_IT+0x6c>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a16      	ldr	r2, [pc, #88]	; (80036c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d111      	bne.n	8003694 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b06      	cmp	r3, #6
 8003680:	d010      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003692:	e007      	b.n	80036a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40010000 	.word	0x40010000
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40000800 	.word	0x40000800
 80036c0:	40000c00 	.word	0x40000c00
 80036c4:	40014000 	.word	0x40014000

080036c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d020      	beq.n	800372c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01b      	beq.n	800372c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0202 	mvn.w	r2, #2
 80036fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f8d2 	bl	80038bc <HAL_TIM_IC_CaptureCallback>
 8003718:	e005      	b.n	8003726 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f8c4 	bl	80038a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f8d5 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b00      	cmp	r3, #0
 8003734:	d020      	beq.n	8003778 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01b      	beq.n	8003778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0204 	mvn.w	r2, #4
 8003748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2202      	movs	r2, #2
 800374e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8ac 	bl	80038bc <HAL_TIM_IC_CaptureCallback>
 8003764:	e005      	b.n	8003772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f89e 	bl	80038a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f8af 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d020      	beq.n	80037c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01b      	beq.n	80037c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0208 	mvn.w	r2, #8
 8003794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2204      	movs	r2, #4
 800379a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f886 	bl	80038bc <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f878 	bl	80038a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f889 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d020      	beq.n	8003810 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01b      	beq.n	8003810 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0210 	mvn.w	r2, #16
 80037e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2208      	movs	r2, #8
 80037e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f860 	bl	80038bc <HAL_TIM_IC_CaptureCallback>
 80037fc:	e005      	b.n	800380a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f852 	bl	80038a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f863 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00c      	beq.n	8003834 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0201 	mvn.w	r2, #1
 800382c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fd fbe2 	bl	8000ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00c      	beq.n	8003858 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f8e6 	bl	8003a24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00c      	beq.n	800387c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f834 	bl	80038e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00c      	beq.n	80038a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0220 	mvn.w	r2, #32
 8003898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f8b8 	bl	8003a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3a      	ldr	r2, [pc, #232]	; (80039f4 <TIM_Base_SetConfig+0xfc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00f      	beq.n	8003930 <TIM_Base_SetConfig+0x38>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003916:	d00b      	beq.n	8003930 <TIM_Base_SetConfig+0x38>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a37      	ldr	r2, [pc, #220]	; (80039f8 <TIM_Base_SetConfig+0x100>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d007      	beq.n	8003930 <TIM_Base_SetConfig+0x38>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a36      	ldr	r2, [pc, #216]	; (80039fc <TIM_Base_SetConfig+0x104>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d003      	beq.n	8003930 <TIM_Base_SetConfig+0x38>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a35      	ldr	r2, [pc, #212]	; (8003a00 <TIM_Base_SetConfig+0x108>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d108      	bne.n	8003942 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a2b      	ldr	r2, [pc, #172]	; (80039f4 <TIM_Base_SetConfig+0xfc>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d01b      	beq.n	8003982 <TIM_Base_SetConfig+0x8a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003950:	d017      	beq.n	8003982 <TIM_Base_SetConfig+0x8a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a28      	ldr	r2, [pc, #160]	; (80039f8 <TIM_Base_SetConfig+0x100>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <TIM_Base_SetConfig+0x8a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a27      	ldr	r2, [pc, #156]	; (80039fc <TIM_Base_SetConfig+0x104>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00f      	beq.n	8003982 <TIM_Base_SetConfig+0x8a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a26      	ldr	r2, [pc, #152]	; (8003a00 <TIM_Base_SetConfig+0x108>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00b      	beq.n	8003982 <TIM_Base_SetConfig+0x8a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a25      	ldr	r2, [pc, #148]	; (8003a04 <TIM_Base_SetConfig+0x10c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d007      	beq.n	8003982 <TIM_Base_SetConfig+0x8a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a24      	ldr	r2, [pc, #144]	; (8003a08 <TIM_Base_SetConfig+0x110>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d003      	beq.n	8003982 <TIM_Base_SetConfig+0x8a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a23      	ldr	r2, [pc, #140]	; (8003a0c <TIM_Base_SetConfig+0x114>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d108      	bne.n	8003994 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a0e      	ldr	r2, [pc, #56]	; (80039f4 <TIM_Base_SetConfig+0xfc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d103      	bne.n	80039c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d105      	bne.n	80039e6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f023 0201 	bic.w	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	611a      	str	r2, [r3, #16]
  }
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40010000 	.word	0x40010000
 80039f8:	40000400 	.word	0x40000400
 80039fc:	40000800 	.word	0x40000800
 8003a00:	40000c00 	.word	0x40000c00
 8003a04:	40014000 	.word	0x40014000
 8003a08:	40014400 	.word	0x40014400
 8003a0c:	40014800 	.word	0x40014800

08003a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a4a:	2b84      	cmp	r3, #132	; 0x84
 8003a4c:	d005      	beq.n	8003a5a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4413      	add	r3, r2
 8003a56:	3303      	adds	r3, #3
 8003a58:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a6c:	f000 fade 	bl	800402c <vTaskStartScheduler>
  
  return osOK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a78:	b089      	sub	sp, #36	; 0x24
 8003a7a:	af04      	add	r7, sp, #16
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <osThreadCreate+0x54>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01c      	beq.n	8003aca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685c      	ldr	r4, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691e      	ldr	r6, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff ffc8 	bl	8003a38 <makeFreeRtosPriority>
 8003aa8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ab2:	9202      	str	r2, [sp, #8]
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	9100      	str	r1, [sp, #0]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	4632      	mov	r2, r6
 8003abc:	4629      	mov	r1, r5
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f000 f8ed 	bl	8003c9e <xTaskCreateStatic>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	e01c      	b.n	8003b04 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685c      	ldr	r4, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ad6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff ffaa 	bl	8003a38 <makeFreeRtosPriority>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	f107 030c 	add.w	r3, r7, #12
 8003aea:	9301      	str	r3, [sp, #4]
 8003aec:	9200      	str	r2, [sp, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	4632      	mov	r2, r6
 8003af2:	4629      	mov	r1, r5
 8003af4:	4620      	mov	r0, r4
 8003af6:	f000 f92f 	bl	8003d58 <xTaskCreate>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d001      	beq.n	8003b04 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	e000      	b.n	8003b06 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b04:	68fb      	ldr	r3, [r7, #12]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b0e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <osDelay+0x16>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	e000      	b.n	8003b26 <osDelay+0x18>
 8003b24:	2301      	movs	r3, #1
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 fa4c 	bl	8003fc4 <vTaskDelay>
  
  return osOK;
 8003b2c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f103 0208 	add.w	r2, r3, #8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b4e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f103 0208 	add.w	r2, r3, #8
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f103 0208 	add.w	r2, r3, #8
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	601a      	str	r2, [r3, #0]
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d103      	bne.n	8003bf8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	e00c      	b.n	8003c12 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	e002      	b.n	8003c06 <vListInsert+0x2e>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d2f6      	bcs.n	8003c00 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	601a      	str	r2, [r3, #0]
}
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b085      	sub	sp, #20
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6892      	ldr	r2, [r2, #8]
 8003c60:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6852      	ldr	r2, [r2, #4]
 8003c6a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d103      	bne.n	8003c7e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	1e5a      	subs	r2, r3, #1
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b08e      	sub	sp, #56	; 0x38
 8003ca2:	af04      	add	r7, sp, #16
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	607a      	str	r2, [r7, #4]
 8003caa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10a      	bne.n	8003cc8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003cc4:	bf00      	nop
 8003cc6:	e7fe      	b.n	8003cc6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <xTaskCreateStatic+0x46>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	61fb      	str	r3, [r7, #28]
}
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ce4:	2354      	movs	r3, #84	; 0x54
 8003ce6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	2b54      	cmp	r3, #84	; 0x54
 8003cec:	d00a      	beq.n	8003d04 <xTaskCreateStatic+0x66>
	__asm volatile
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	61bb      	str	r3, [r7, #24]
}
 8003d00:	bf00      	nop
 8003d02:	e7fe      	b.n	8003d02 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003d04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01e      	beq.n	8003d4a <xTaskCreateStatic+0xac>
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d01b      	beq.n	8003d4a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d24:	2300      	movs	r3, #0
 8003d26:	9303      	str	r3, [sp, #12]
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	9302      	str	r3, [sp, #8]
 8003d2c:	f107 0314 	add.w	r3, r7, #20
 8003d30:	9301      	str	r3, [sp, #4]
 8003d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 f850 	bl	8003de2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d44:	f000 f8d4 	bl	8003ef0 <prvAddNewTaskToReadyList>
 8003d48:	e001      	b.n	8003d4e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d4e:	697b      	ldr	r3, [r7, #20]
	}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3728      	adds	r7, #40	; 0x28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08c      	sub	sp, #48	; 0x30
 8003d5c:	af04      	add	r7, sp, #16
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d68:	88fb      	ldrh	r3, [r7, #6]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fec3 	bl	8004af8 <pvPortMalloc>
 8003d72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00e      	beq.n	8003d98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d7a:	2054      	movs	r0, #84	; 0x54
 8003d7c:	f000 febc 	bl	8004af8 <pvPortMalloc>
 8003d80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d8e:	e005      	b.n	8003d9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d90:	6978      	ldr	r0, [r7, #20]
 8003d92:	f000 ff7d 	bl	8004c90 <vPortFree>
 8003d96:	e001      	b.n	8003d9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d017      	beq.n	8003dd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003daa:	88fa      	ldrh	r2, [r7, #6]
 8003dac:	2300      	movs	r3, #0
 8003dae:	9303      	str	r3, [sp, #12]
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	9302      	str	r3, [sp, #8]
 8003db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db6:	9301      	str	r3, [sp, #4]
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f80e 	bl	8003de2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dc6:	69f8      	ldr	r0, [r7, #28]
 8003dc8:	f000 f892 	bl	8003ef0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	e002      	b.n	8003dd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003dd8:	69bb      	ldr	r3, [r7, #24]
	}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3720      	adds	r7, #32
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b088      	sub	sp, #32
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	f023 0307 	bic.w	r3, r3, #7
 8003e08:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <prvInitialiseNewTask+0x48>
	__asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	617b      	str	r3, [r7, #20]
}
 8003e26:	bf00      	nop
 8003e28:	e7fe      	b.n	8003e28 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01f      	beq.n	8003e70 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e30:	2300      	movs	r3, #0
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	e012      	b.n	8003e5c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	7819      	ldrb	r1, [r3, #0]
 8003e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	4413      	add	r3, r2
 8003e44:	3334      	adds	r3, #52	; 0x34
 8003e46:	460a      	mov	r2, r1
 8003e48:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	4413      	add	r3, r2
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d006      	beq.n	8003e64 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	61fb      	str	r3, [r7, #28]
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b0f      	cmp	r3, #15
 8003e60:	d9e9      	bls.n	8003e36 <prvInitialiseNewTask+0x54>
 8003e62:	e000      	b.n	8003e66 <prvInitialiseNewTask+0x84>
			{
				break;
 8003e64:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e6e:	e003      	b.n	8003e78 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	2b06      	cmp	r3, #6
 8003e7c:	d901      	bls.n	8003e82 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e7e:	2306      	movs	r3, #6
 8003e80:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e86:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e8c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	2200      	movs	r2, #0
 8003e92:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	3304      	adds	r3, #4
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff fe6c 	bl	8003b76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea0:	3318      	adds	r3, #24
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff fe67 	bl	8003b76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	f1c3 0207 	rsb	r2, r3, #7
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	68f9      	ldr	r1, [r7, #12]
 8003ed0:	69b8      	ldr	r0, [r7, #24]
 8003ed2:	f000 fc05 	bl	80046e0 <pxPortInitialiseStack>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ee8:	bf00      	nop
 8003eea:	3720      	adds	r7, #32
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ef8:	f000 fd1c 	bl	8004934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003efc:	4b2a      	ldr	r3, [pc, #168]	; (8003fa8 <prvAddNewTaskToReadyList+0xb8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3301      	adds	r3, #1
 8003f02:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <prvAddNewTaskToReadyList+0xb8>)
 8003f04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f06:	4b29      	ldr	r3, [pc, #164]	; (8003fac <prvAddNewTaskToReadyList+0xbc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f0e:	4a27      	ldr	r2, [pc, #156]	; (8003fac <prvAddNewTaskToReadyList+0xbc>)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f14:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <prvAddNewTaskToReadyList+0xb8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d110      	bne.n	8003f3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f1c:	f000 fabc 	bl	8004498 <prvInitialiseTaskLists>
 8003f20:	e00d      	b.n	8003f3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f22:	4b23      	ldr	r3, [pc, #140]	; (8003fb0 <prvAddNewTaskToReadyList+0xc0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f2a:	4b20      	ldr	r3, [pc, #128]	; (8003fac <prvAddNewTaskToReadyList+0xbc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d802      	bhi.n	8003f3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f38:	4a1c      	ldr	r2, [pc, #112]	; (8003fac <prvAddNewTaskToReadyList+0xbc>)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f3e:	4b1d      	ldr	r3, [pc, #116]	; (8003fb4 <prvAddNewTaskToReadyList+0xc4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3301      	adds	r3, #1
 8003f44:	4a1b      	ldr	r2, [pc, #108]	; (8003fb4 <prvAddNewTaskToReadyList+0xc4>)
 8003f46:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	4b19      	ldr	r3, [pc, #100]	; (8003fb8 <prvAddNewTaskToReadyList+0xc8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	4a18      	ldr	r2, [pc, #96]	; (8003fb8 <prvAddNewTaskToReadyList+0xc8>)
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <prvAddNewTaskToReadyList+0xcc>)
 8003f68:	441a      	add	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4610      	mov	r0, r2
 8003f72:	f7ff fe0d 	bl	8003b90 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f76:	f000 fd0d 	bl	8004994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <prvAddNewTaskToReadyList+0xc0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00e      	beq.n	8003fa0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f82:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <prvAddNewTaskToReadyList+0xbc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d207      	bcs.n	8003fa0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <prvAddNewTaskToReadyList+0xd0>)
 8003f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fa0:	bf00      	nop
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	200005b0 	.word	0x200005b0
 8003fac:	200004b0 	.word	0x200004b0
 8003fb0:	200005bc 	.word	0x200005bc
 8003fb4:	200005cc 	.word	0x200005cc
 8003fb8:	200005b8 	.word	0x200005b8
 8003fbc:	200004b4 	.word	0x200004b4
 8003fc0:	e000ed04 	.word	0xe000ed04

08003fc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d017      	beq.n	8004006 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003fd6:	4b13      	ldr	r3, [pc, #76]	; (8004024 <vTaskDelay+0x60>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <vTaskDelay+0x30>
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	60bb      	str	r3, [r7, #8]
}
 8003ff0:	bf00      	nop
 8003ff2:	e7fe      	b.n	8003ff2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ff4:	f000 f87a 	bl	80040ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fb0a 	bl	8004614 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004000:	f000 f882 	bl	8004108 <xTaskResumeAll>
 8004004:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d107      	bne.n	800401c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <vTaskDelay+0x64>)
 800400e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800401c:	bf00      	nop
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	200005d8 	.word	0x200005d8
 8004028:	e000ed04 	.word	0xe000ed04

0800402c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08a      	sub	sp, #40	; 0x28
 8004030:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004032:	2300      	movs	r3, #0
 8004034:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004036:	2300      	movs	r3, #0
 8004038:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800403a:	463a      	mov	r2, r7
 800403c:	1d39      	adds	r1, r7, #4
 800403e:	f107 0308 	add.w	r3, r7, #8
 8004042:	4618      	mov	r0, r3
 8004044:	f7fc fe72 	bl	8000d2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004048:	6839      	ldr	r1, [r7, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	9202      	str	r2, [sp, #8]
 8004050:	9301      	str	r3, [sp, #4]
 8004052:	2300      	movs	r3, #0
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	2300      	movs	r3, #0
 8004058:	460a      	mov	r2, r1
 800405a:	491e      	ldr	r1, [pc, #120]	; (80040d4 <vTaskStartScheduler+0xa8>)
 800405c:	481e      	ldr	r0, [pc, #120]	; (80040d8 <vTaskStartScheduler+0xac>)
 800405e:	f7ff fe1e 	bl	8003c9e <xTaskCreateStatic>
 8004062:	4603      	mov	r3, r0
 8004064:	4a1d      	ldr	r2, [pc, #116]	; (80040dc <vTaskStartScheduler+0xb0>)
 8004066:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004068:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <vTaskStartScheduler+0xb0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004070:	2301      	movs	r3, #1
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	e001      	b.n	800407a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004076:	2300      	movs	r3, #0
 8004078:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d116      	bne.n	80040ae <vTaskStartScheduler+0x82>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	613b      	str	r3, [r7, #16]
}
 8004092:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004094:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <vTaskStartScheduler+0xb4>)
 8004096:	f04f 32ff 	mov.w	r2, #4294967295
 800409a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800409c:	4b11      	ldr	r3, [pc, #68]	; (80040e4 <vTaskStartScheduler+0xb8>)
 800409e:	2201      	movs	r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040a2:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <vTaskStartScheduler+0xbc>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040a8:	f000 fba2 	bl	80047f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040ac:	e00e      	b.n	80040cc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b4:	d10a      	bne.n	80040cc <vTaskStartScheduler+0xa0>
	__asm volatile
 80040b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ba:	f383 8811 	msr	BASEPRI, r3
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	60fb      	str	r3, [r7, #12]
}
 80040c8:	bf00      	nop
 80040ca:	e7fe      	b.n	80040ca <vTaskStartScheduler+0x9e>
}
 80040cc:	bf00      	nop
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	08004fb4 	.word	0x08004fb4
 80040d8:	08004469 	.word	0x08004469
 80040dc:	200005d4 	.word	0x200005d4
 80040e0:	200005d0 	.word	0x200005d0
 80040e4:	200005bc 	.word	0x200005bc
 80040e8:	200005b4 	.word	0x200005b4

080040ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <vTaskSuspendAll+0x18>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3301      	adds	r3, #1
 80040f6:	4a03      	ldr	r2, [pc, #12]	; (8004104 <vTaskSuspendAll+0x18>)
 80040f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80040fa:	bf00      	nop
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	200005d8 	.word	0x200005d8

08004108 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004116:	4b41      	ldr	r3, [pc, #260]	; (800421c <xTaskResumeAll+0x114>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10a      	bne.n	8004134 <xTaskResumeAll+0x2c>
	__asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	603b      	str	r3, [r7, #0]
}
 8004130:	bf00      	nop
 8004132:	e7fe      	b.n	8004132 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004134:	f000 fbfe 	bl	8004934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004138:	4b38      	ldr	r3, [pc, #224]	; (800421c <xTaskResumeAll+0x114>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3b01      	subs	r3, #1
 800413e:	4a37      	ldr	r2, [pc, #220]	; (800421c <xTaskResumeAll+0x114>)
 8004140:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004142:	4b36      	ldr	r3, [pc, #216]	; (800421c <xTaskResumeAll+0x114>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d161      	bne.n	800420e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800414a:	4b35      	ldr	r3, [pc, #212]	; (8004220 <xTaskResumeAll+0x118>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d05d      	beq.n	800420e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004152:	e02e      	b.n	80041b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004154:	4b33      	ldr	r3, [pc, #204]	; (8004224 <xTaskResumeAll+0x11c>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3318      	adds	r3, #24
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff fd72 	bl	8003c4a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	3304      	adds	r3, #4
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff fd6d 	bl	8003c4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	2201      	movs	r2, #1
 8004176:	409a      	lsls	r2, r3
 8004178:	4b2b      	ldr	r3, [pc, #172]	; (8004228 <xTaskResumeAll+0x120>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4313      	orrs	r3, r2
 800417e:	4a2a      	ldr	r2, [pc, #168]	; (8004228 <xTaskResumeAll+0x120>)
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4a27      	ldr	r2, [pc, #156]	; (800422c <xTaskResumeAll+0x124>)
 8004190:	441a      	add	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3304      	adds	r3, #4
 8004196:	4619      	mov	r1, r3
 8004198:	4610      	mov	r0, r2
 800419a:	f7ff fcf9 	bl	8003b90 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a2:	4b23      	ldr	r3, [pc, #140]	; (8004230 <xTaskResumeAll+0x128>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d302      	bcc.n	80041b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80041ac:	4b21      	ldr	r3, [pc, #132]	; (8004234 <xTaskResumeAll+0x12c>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041b2:	4b1c      	ldr	r3, [pc, #112]	; (8004224 <xTaskResumeAll+0x11c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1cc      	bne.n	8004154 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041c0:	f000 fa08 	bl	80045d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80041c4:	4b1c      	ldr	r3, [pc, #112]	; (8004238 <xTaskResumeAll+0x130>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d010      	beq.n	80041f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041d0:	f000 f836 	bl	8004240 <xTaskIncrementTick>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80041da:	4b16      	ldr	r3, [pc, #88]	; (8004234 <xTaskResumeAll+0x12c>)
 80041dc:	2201      	movs	r2, #1
 80041de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f1      	bne.n	80041d0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80041ec:	4b12      	ldr	r3, [pc, #72]	; (8004238 <xTaskResumeAll+0x130>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041f2:	4b10      	ldr	r3, [pc, #64]	; (8004234 <xTaskResumeAll+0x12c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d009      	beq.n	800420e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041fa:	2301      	movs	r3, #1
 80041fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041fe:	4b0f      	ldr	r3, [pc, #60]	; (800423c <xTaskResumeAll+0x134>)
 8004200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800420e:	f000 fbc1 	bl	8004994 <vPortExitCritical>

	return xAlreadyYielded;
 8004212:	68bb      	ldr	r3, [r7, #8]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	200005d8 	.word	0x200005d8
 8004220:	200005b0 	.word	0x200005b0
 8004224:	20000570 	.word	0x20000570
 8004228:	200005b8 	.word	0x200005b8
 800422c:	200004b4 	.word	0x200004b4
 8004230:	200004b0 	.word	0x200004b0
 8004234:	200005c4 	.word	0x200005c4
 8004238:	200005c0 	.word	0x200005c0
 800423c:	e000ed04 	.word	0xe000ed04

08004240 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800424a:	4b4e      	ldr	r3, [pc, #312]	; (8004384 <xTaskIncrementTick+0x144>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	f040 808e 	bne.w	8004370 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004254:	4b4c      	ldr	r3, [pc, #304]	; (8004388 <xTaskIncrementTick+0x148>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3301      	adds	r3, #1
 800425a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800425c:	4a4a      	ldr	r2, [pc, #296]	; (8004388 <xTaskIncrementTick+0x148>)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d120      	bne.n	80042aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004268:	4b48      	ldr	r3, [pc, #288]	; (800438c <xTaskIncrementTick+0x14c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <xTaskIncrementTick+0x48>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	603b      	str	r3, [r7, #0]
}
 8004284:	bf00      	nop
 8004286:	e7fe      	b.n	8004286 <xTaskIncrementTick+0x46>
 8004288:	4b40      	ldr	r3, [pc, #256]	; (800438c <xTaskIncrementTick+0x14c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	4b40      	ldr	r3, [pc, #256]	; (8004390 <xTaskIncrementTick+0x150>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a3e      	ldr	r2, [pc, #248]	; (800438c <xTaskIncrementTick+0x14c>)
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	4a3e      	ldr	r2, [pc, #248]	; (8004390 <xTaskIncrementTick+0x150>)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	4b3d      	ldr	r3, [pc, #244]	; (8004394 <xTaskIncrementTick+0x154>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3301      	adds	r3, #1
 80042a2:	4a3c      	ldr	r2, [pc, #240]	; (8004394 <xTaskIncrementTick+0x154>)
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	f000 f995 	bl	80045d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042aa:	4b3b      	ldr	r3, [pc, #236]	; (8004398 <xTaskIncrementTick+0x158>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d348      	bcc.n	8004346 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042b4:	4b35      	ldr	r3, [pc, #212]	; (800438c <xTaskIncrementTick+0x14c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d104      	bne.n	80042c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042be:	4b36      	ldr	r3, [pc, #216]	; (8004398 <xTaskIncrementTick+0x158>)
 80042c0:	f04f 32ff 	mov.w	r2, #4294967295
 80042c4:	601a      	str	r2, [r3, #0]
					break;
 80042c6:	e03e      	b.n	8004346 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042c8:	4b30      	ldr	r3, [pc, #192]	; (800438c <xTaskIncrementTick+0x14c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d203      	bcs.n	80042e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042e0:	4a2d      	ldr	r2, [pc, #180]	; (8004398 <xTaskIncrementTick+0x158>)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80042e6:	e02e      	b.n	8004346 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	3304      	adds	r3, #4
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fcac 	bl	8003c4a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d004      	beq.n	8004304 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	3318      	adds	r3, #24
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fca3 	bl	8003c4a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	2201      	movs	r2, #1
 800430a:	409a      	lsls	r2, r3
 800430c:	4b23      	ldr	r3, [pc, #140]	; (800439c <xTaskIncrementTick+0x15c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4313      	orrs	r3, r2
 8004312:	4a22      	ldr	r2, [pc, #136]	; (800439c <xTaskIncrementTick+0x15c>)
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4a1f      	ldr	r2, [pc, #124]	; (80043a0 <xTaskIncrementTick+0x160>)
 8004324:	441a      	add	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	3304      	adds	r3, #4
 800432a:	4619      	mov	r1, r3
 800432c:	4610      	mov	r0, r2
 800432e:	f7ff fc2f 	bl	8003b90 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004336:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <xTaskIncrementTick+0x164>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	429a      	cmp	r2, r3
 800433e:	d3b9      	bcc.n	80042b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004340:	2301      	movs	r3, #1
 8004342:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004344:	e7b6      	b.n	80042b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004346:	4b17      	ldr	r3, [pc, #92]	; (80043a4 <xTaskIncrementTick+0x164>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	4914      	ldr	r1, [pc, #80]	; (80043a0 <xTaskIncrementTick+0x160>)
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d901      	bls.n	8004362 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800435e:	2301      	movs	r3, #1
 8004360:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004362:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <xTaskIncrementTick+0x168>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d007      	beq.n	800437a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800436a:	2301      	movs	r3, #1
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	e004      	b.n	800437a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004370:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <xTaskIncrementTick+0x16c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3301      	adds	r3, #1
 8004376:	4a0d      	ldr	r2, [pc, #52]	; (80043ac <xTaskIncrementTick+0x16c>)
 8004378:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800437a:	697b      	ldr	r3, [r7, #20]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	200005d8 	.word	0x200005d8
 8004388:	200005b4 	.word	0x200005b4
 800438c:	20000568 	.word	0x20000568
 8004390:	2000056c 	.word	0x2000056c
 8004394:	200005c8 	.word	0x200005c8
 8004398:	200005d0 	.word	0x200005d0
 800439c:	200005b8 	.word	0x200005b8
 80043a0:	200004b4 	.word	0x200004b4
 80043a4:	200004b0 	.word	0x200004b0
 80043a8:	200005c4 	.word	0x200005c4
 80043ac:	200005c0 	.word	0x200005c0

080043b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043b6:	4b27      	ldr	r3, [pc, #156]	; (8004454 <vTaskSwitchContext+0xa4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043be:	4b26      	ldr	r3, [pc, #152]	; (8004458 <vTaskSwitchContext+0xa8>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043c4:	e03f      	b.n	8004446 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80043c6:	4b24      	ldr	r3, [pc, #144]	; (8004458 <vTaskSwitchContext+0xa8>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043cc:	4b23      	ldr	r3, [pc, #140]	; (800445c <vTaskSwitchContext+0xac>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	fab3 f383 	clz	r3, r3
 80043d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80043da:	7afb      	ldrb	r3, [r7, #11]
 80043dc:	f1c3 031f 	rsb	r3, r3, #31
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	491f      	ldr	r1, [pc, #124]	; (8004460 <vTaskSwitchContext+0xb0>)
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4613      	mov	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <vTaskSwitchContext+0x5c>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	607b      	str	r3, [r7, #4]
}
 8004408:	bf00      	nop
 800440a:	e7fe      	b.n	800440a <vTaskSwitchContext+0x5a>
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4a12      	ldr	r2, [pc, #72]	; (8004460 <vTaskSwitchContext+0xb0>)
 8004418:	4413      	add	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	3308      	adds	r3, #8
 800442e:	429a      	cmp	r2, r3
 8004430:	d104      	bne.n	800443c <vTaskSwitchContext+0x8c>
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	605a      	str	r2, [r3, #4]
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	4a08      	ldr	r2, [pc, #32]	; (8004464 <vTaskSwitchContext+0xb4>)
 8004444:	6013      	str	r3, [r2, #0]
}
 8004446:	bf00      	nop
 8004448:	371c      	adds	r7, #28
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	200005d8 	.word	0x200005d8
 8004458:	200005c4 	.word	0x200005c4
 800445c:	200005b8 	.word	0x200005b8
 8004460:	200004b4 	.word	0x200004b4
 8004464:	200004b0 	.word	0x200004b0

08004468 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004470:	f000 f852 	bl	8004518 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004474:	4b06      	ldr	r3, [pc, #24]	; (8004490 <prvIdleTask+0x28>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d9f9      	bls.n	8004470 <prvIdleTask+0x8>
			{
				taskYIELD();
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <prvIdleTask+0x2c>)
 800447e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800448c:	e7f0      	b.n	8004470 <prvIdleTask+0x8>
 800448e:	bf00      	nop
 8004490:	200004b4 	.word	0x200004b4
 8004494:	e000ed04 	.word	0xe000ed04

08004498 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800449e:	2300      	movs	r3, #0
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	e00c      	b.n	80044be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4a12      	ldr	r2, [pc, #72]	; (80044f8 <prvInitialiseTaskLists+0x60>)
 80044b0:	4413      	add	r3, r2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff fb3f 	bl	8003b36 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3301      	adds	r3, #1
 80044bc:	607b      	str	r3, [r7, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b06      	cmp	r3, #6
 80044c2:	d9ef      	bls.n	80044a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044c4:	480d      	ldr	r0, [pc, #52]	; (80044fc <prvInitialiseTaskLists+0x64>)
 80044c6:	f7ff fb36 	bl	8003b36 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044ca:	480d      	ldr	r0, [pc, #52]	; (8004500 <prvInitialiseTaskLists+0x68>)
 80044cc:	f7ff fb33 	bl	8003b36 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044d0:	480c      	ldr	r0, [pc, #48]	; (8004504 <prvInitialiseTaskLists+0x6c>)
 80044d2:	f7ff fb30 	bl	8003b36 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044d6:	480c      	ldr	r0, [pc, #48]	; (8004508 <prvInitialiseTaskLists+0x70>)
 80044d8:	f7ff fb2d 	bl	8003b36 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044dc:	480b      	ldr	r0, [pc, #44]	; (800450c <prvInitialiseTaskLists+0x74>)
 80044de:	f7ff fb2a 	bl	8003b36 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <prvInitialiseTaskLists+0x78>)
 80044e4:	4a05      	ldr	r2, [pc, #20]	; (80044fc <prvInitialiseTaskLists+0x64>)
 80044e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044e8:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <prvInitialiseTaskLists+0x7c>)
 80044ea:	4a05      	ldr	r2, [pc, #20]	; (8004500 <prvInitialiseTaskLists+0x68>)
 80044ec:	601a      	str	r2, [r3, #0]
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	200004b4 	.word	0x200004b4
 80044fc:	20000540 	.word	0x20000540
 8004500:	20000554 	.word	0x20000554
 8004504:	20000570 	.word	0x20000570
 8004508:	20000584 	.word	0x20000584
 800450c:	2000059c 	.word	0x2000059c
 8004510:	20000568 	.word	0x20000568
 8004514:	2000056c 	.word	0x2000056c

08004518 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800451e:	e019      	b.n	8004554 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004520:	f000 fa08 	bl	8004934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004524:	4b10      	ldr	r3, [pc, #64]	; (8004568 <prvCheckTasksWaitingTermination+0x50>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3304      	adds	r3, #4
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff fb8a 	bl	8003c4a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004536:	4b0d      	ldr	r3, [pc, #52]	; (800456c <prvCheckTasksWaitingTermination+0x54>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3b01      	subs	r3, #1
 800453c:	4a0b      	ldr	r2, [pc, #44]	; (800456c <prvCheckTasksWaitingTermination+0x54>)
 800453e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <prvCheckTasksWaitingTermination+0x58>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3b01      	subs	r3, #1
 8004546:	4a0a      	ldr	r2, [pc, #40]	; (8004570 <prvCheckTasksWaitingTermination+0x58>)
 8004548:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800454a:	f000 fa23 	bl	8004994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f810 	bl	8004574 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004554:	4b06      	ldr	r3, [pc, #24]	; (8004570 <prvCheckTasksWaitingTermination+0x58>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e1      	bne.n	8004520 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800455c:	bf00      	nop
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000584 	.word	0x20000584
 800456c:	200005b0 	.word	0x200005b0
 8004570:	20000598 	.word	0x20000598

08004574 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004582:	2b00      	cmp	r3, #0
 8004584:	d108      	bne.n	8004598 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fb80 	bl	8004c90 <vPortFree>
				vPortFree( pxTCB );
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fb7d 	bl	8004c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004596:	e018      	b.n	80045ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d103      	bne.n	80045aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fb74 	bl	8004c90 <vPortFree>
	}
 80045a8:	e00f      	b.n	80045ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d00a      	beq.n	80045ca <prvDeleteTCB+0x56>
	__asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	60fb      	str	r3, [r7, #12]
}
 80045c6:	bf00      	nop
 80045c8:	e7fe      	b.n	80045c8 <prvDeleteTCB+0x54>
	}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045da:	4b0c      	ldr	r3, [pc, #48]	; (800460c <prvResetNextTaskUnblockTime+0x38>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d104      	bne.n	80045ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045e4:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <prvResetNextTaskUnblockTime+0x3c>)
 80045e6:	f04f 32ff 	mov.w	r2, #4294967295
 80045ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045ec:	e008      	b.n	8004600 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045ee:	4b07      	ldr	r3, [pc, #28]	; (800460c <prvResetNextTaskUnblockTime+0x38>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4a04      	ldr	r2, [pc, #16]	; (8004610 <prvResetNextTaskUnblockTime+0x3c>)
 80045fe:	6013      	str	r3, [r2, #0]
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	20000568 	.word	0x20000568
 8004610:	200005d0 	.word	0x200005d0

08004614 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800461e:	4b29      	ldr	r3, [pc, #164]	; (80046c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004624:	4b28      	ldr	r3, [pc, #160]	; (80046c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3304      	adds	r3, #4
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff fb0d 	bl	8003c4a <uxListRemove>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10b      	bne.n	800464e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004636:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	2201      	movs	r2, #1
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43da      	mvns	r2, r3
 8004644:	4b21      	ldr	r3, [pc, #132]	; (80046cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4013      	ands	r3, r2
 800464a:	4a20      	ldr	r2, [pc, #128]	; (80046cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800464c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004654:	d10a      	bne.n	800466c <prvAddCurrentTaskToDelayedList+0x58>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d007      	beq.n	800466c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800465c:	4b1a      	ldr	r3, [pc, #104]	; (80046c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3304      	adds	r3, #4
 8004662:	4619      	mov	r1, r3
 8004664:	481a      	ldr	r0, [pc, #104]	; (80046d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004666:	f7ff fa93 	bl	8003b90 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800466a:	e026      	b.n	80046ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4413      	add	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004674:	4b14      	ldr	r3, [pc, #80]	; (80046c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	429a      	cmp	r2, r3
 8004682:	d209      	bcs.n	8004698 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004684:	4b13      	ldr	r3, [pc, #76]	; (80046d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3304      	adds	r3, #4
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f7ff faa1 	bl	8003bd8 <vListInsert>
}
 8004696:	e010      	b.n	80046ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004698:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3304      	adds	r3, #4
 80046a2:	4619      	mov	r1, r3
 80046a4:	4610      	mov	r0, r2
 80046a6:	f7ff fa97 	bl	8003bd8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046aa:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d202      	bcs.n	80046ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80046b4:	4a09      	ldr	r2, [pc, #36]	; (80046dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	6013      	str	r3, [r2, #0]
}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	200005b4 	.word	0x200005b4
 80046c8:	200004b0 	.word	0x200004b0
 80046cc:	200005b8 	.word	0x200005b8
 80046d0:	2000059c 	.word	0x2000059c
 80046d4:	2000056c 	.word	0x2000056c
 80046d8:	20000568 	.word	0x20000568
 80046dc:	200005d0 	.word	0x200005d0

080046e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3b04      	subs	r3, #4
 80046f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3b04      	subs	r3, #4
 80046fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f023 0201 	bic.w	r2, r3, #1
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3b04      	subs	r3, #4
 800470e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004710:	4a0c      	ldr	r2, [pc, #48]	; (8004744 <pxPortInitialiseStack+0x64>)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3b14      	subs	r3, #20
 800471a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3b04      	subs	r3, #4
 8004726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f06f 0202 	mvn.w	r2, #2
 800472e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3b20      	subs	r3, #32
 8004734:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004736:	68fb      	ldr	r3, [r7, #12]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	08004749 	.word	0x08004749

08004748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800474e:	2300      	movs	r3, #0
 8004750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <prvTaskExitError+0x54>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475a:	d00a      	beq.n	8004772 <prvTaskExitError+0x2a>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	60fb      	str	r3, [r7, #12]
}
 800476e:	bf00      	nop
 8004770:	e7fe      	b.n	8004770 <prvTaskExitError+0x28>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	60bb      	str	r3, [r7, #8]
}
 8004784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004786:	bf00      	nop
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0fc      	beq.n	8004788 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800478e:	bf00      	nop
 8004790:	bf00      	nop
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	20000034 	.word	0x20000034

080047a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <pxCurrentTCBConst2>)
 80047a2:	6819      	ldr	r1, [r3, #0]
 80047a4:	6808      	ldr	r0, [r1, #0]
 80047a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047aa:	f380 8809 	msr	PSP, r0
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f04f 0000 	mov.w	r0, #0
 80047b6:	f380 8811 	msr	BASEPRI, r0
 80047ba:	4770      	bx	lr
 80047bc:	f3af 8000 	nop.w

080047c0 <pxCurrentTCBConst2>:
 80047c0:	200004b0 	.word	0x200004b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop

080047c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80047c8:	4808      	ldr	r0, [pc, #32]	; (80047ec <prvPortStartFirstTask+0x24>)
 80047ca:	6800      	ldr	r0, [r0, #0]
 80047cc:	6800      	ldr	r0, [r0, #0]
 80047ce:	f380 8808 	msr	MSP, r0
 80047d2:	f04f 0000 	mov.w	r0, #0
 80047d6:	f380 8814 	msr	CONTROL, r0
 80047da:	b662      	cpsie	i
 80047dc:	b661      	cpsie	f
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	df00      	svc	0
 80047e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80047ea:	bf00      	nop
 80047ec:	e000ed08 	.word	0xe000ed08

080047f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047f6:	4b46      	ldr	r3, [pc, #280]	; (8004910 <xPortStartScheduler+0x120>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a46      	ldr	r2, [pc, #280]	; (8004914 <xPortStartScheduler+0x124>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d10a      	bne.n	8004816 <xPortStartScheduler+0x26>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	613b      	str	r3, [r7, #16]
}
 8004812:	bf00      	nop
 8004814:	e7fe      	b.n	8004814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004816:	4b3e      	ldr	r3, [pc, #248]	; (8004910 <xPortStartScheduler+0x120>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a3f      	ldr	r2, [pc, #252]	; (8004918 <xPortStartScheduler+0x128>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d10a      	bne.n	8004836 <xPortStartScheduler+0x46>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	60fb      	str	r3, [r7, #12]
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004836:	4b39      	ldr	r3, [pc, #228]	; (800491c <xPortStartScheduler+0x12c>)
 8004838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	22ff      	movs	r2, #255	; 0xff
 8004846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	b2db      	uxtb	r3, r3
 800484e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004858:	b2da      	uxtb	r2, r3
 800485a:	4b31      	ldr	r3, [pc, #196]	; (8004920 <xPortStartScheduler+0x130>)
 800485c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800485e:	4b31      	ldr	r3, [pc, #196]	; (8004924 <xPortStartScheduler+0x134>)
 8004860:	2207      	movs	r2, #7
 8004862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004864:	e009      	b.n	800487a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004866:	4b2f      	ldr	r3, [pc, #188]	; (8004924 <xPortStartScheduler+0x134>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3b01      	subs	r3, #1
 800486c:	4a2d      	ldr	r2, [pc, #180]	; (8004924 <xPortStartScheduler+0x134>)
 800486e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	b2db      	uxtb	r3, r3
 8004878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800487a:	78fb      	ldrb	r3, [r7, #3]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004882:	2b80      	cmp	r3, #128	; 0x80
 8004884:	d0ef      	beq.n	8004866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004886:	4b27      	ldr	r3, [pc, #156]	; (8004924 <xPortStartScheduler+0x134>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f1c3 0307 	rsb	r3, r3, #7
 800488e:	2b04      	cmp	r3, #4
 8004890:	d00a      	beq.n	80048a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	60bb      	str	r3, [r7, #8]
}
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048a8:	4b1e      	ldr	r3, [pc, #120]	; (8004924 <xPortStartScheduler+0x134>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	4a1d      	ldr	r2, [pc, #116]	; (8004924 <xPortStartScheduler+0x134>)
 80048b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048b2:	4b1c      	ldr	r3, [pc, #112]	; (8004924 <xPortStartScheduler+0x134>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048ba:	4a1a      	ldr	r2, [pc, #104]	; (8004924 <xPortStartScheduler+0x134>)
 80048bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048c6:	4b18      	ldr	r3, [pc, #96]	; (8004928 <xPortStartScheduler+0x138>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a17      	ldr	r2, [pc, #92]	; (8004928 <xPortStartScheduler+0x138>)
 80048cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <xPortStartScheduler+0x138>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a14      	ldr	r2, [pc, #80]	; (8004928 <xPortStartScheduler+0x138>)
 80048d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80048dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048de:	f000 f8dd 	bl	8004a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <xPortStartScheduler+0x13c>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80048e8:	f000 f8fc 	bl	8004ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80048ec:	4b10      	ldr	r3, [pc, #64]	; (8004930 <xPortStartScheduler+0x140>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a0f      	ldr	r2, [pc, #60]	; (8004930 <xPortStartScheduler+0x140>)
 80048f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80048f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048f8:	f7ff ff66 	bl	80047c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048fc:	f7ff fd58 	bl	80043b0 <vTaskSwitchContext>
	prvTaskExitError();
 8004900:	f7ff ff22 	bl	8004748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	e000ed00 	.word	0xe000ed00
 8004914:	410fc271 	.word	0x410fc271
 8004918:	410fc270 	.word	0x410fc270
 800491c:	e000e400 	.word	0xe000e400
 8004920:	200005dc 	.word	0x200005dc
 8004924:	200005e0 	.word	0x200005e0
 8004928:	e000ed20 	.word	0xe000ed20
 800492c:	20000034 	.word	0x20000034
 8004930:	e000ef34 	.word	0xe000ef34

08004934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	607b      	str	r3, [r7, #4]
}
 800494c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800494e:	4b0f      	ldr	r3, [pc, #60]	; (800498c <vPortEnterCritical+0x58>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3301      	adds	r3, #1
 8004954:	4a0d      	ldr	r2, [pc, #52]	; (800498c <vPortEnterCritical+0x58>)
 8004956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <vPortEnterCritical+0x58>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d10f      	bne.n	8004980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <vPortEnterCritical+0x5c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <vPortEnterCritical+0x4c>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	603b      	str	r3, [r7, #0]
}
 800497c:	bf00      	nop
 800497e:	e7fe      	b.n	800497e <vPortEnterCritical+0x4a>
	}
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	20000034 	.word	0x20000034
 8004990:	e000ed04 	.word	0xe000ed04

08004994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800499a:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <vPortExitCritical+0x50>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <vPortExitCritical+0x24>
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	607b      	str	r3, [r7, #4]
}
 80049b4:	bf00      	nop
 80049b6:	e7fe      	b.n	80049b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049b8:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <vPortExitCritical+0x50>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3b01      	subs	r3, #1
 80049be:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <vPortExitCritical+0x50>)
 80049c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049c2:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <vPortExitCritical+0x50>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d105      	bne.n	80049d6 <vPortExitCritical+0x42>
 80049ca:	2300      	movs	r3, #0
 80049cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20000034 	.word	0x20000034
	...

080049f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049f0:	f3ef 8009 	mrs	r0, PSP
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <pxCurrentTCBConst>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	f01e 0f10 	tst.w	lr, #16
 8004a00:	bf08      	it	eq
 8004a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0a:	6010      	str	r0, [r2, #0]
 8004a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a14:	f380 8811 	msr	BASEPRI, r0
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f7ff fcc6 	bl	80043b0 <vTaskSwitchContext>
 8004a24:	f04f 0000 	mov.w	r0, #0
 8004a28:	f380 8811 	msr	BASEPRI, r0
 8004a2c:	bc09      	pop	{r0, r3}
 8004a2e:	6819      	ldr	r1, [r3, #0]
 8004a30:	6808      	ldr	r0, [r1, #0]
 8004a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a36:	f01e 0f10 	tst.w	lr, #16
 8004a3a:	bf08      	it	eq
 8004a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a40:	f380 8809 	msr	PSP, r0
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	f3af 8000 	nop.w

08004a50 <pxCurrentTCBConst>:
 8004a50:	200004b0 	.word	0x200004b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop

08004a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	607b      	str	r3, [r7, #4]
}
 8004a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a72:	f7ff fbe5 	bl	8004240 <xTaskIncrementTick>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <SysTick_Handler+0x40>)
 8004a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	2300      	movs	r3, #0
 8004a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	f383 8811 	msr	BASEPRI, r3
}
 8004a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	e000ed04 	.word	0xe000ed04

08004a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <vPortSetupTimerInterrupt+0x34>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <vPortSetupTimerInterrupt+0x38>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <vPortSetupTimerInterrupt+0x3c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a0a      	ldr	r2, [pc, #40]	; (8004adc <vPortSetupTimerInterrupt+0x40>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	099b      	lsrs	r3, r3, #6
 8004ab8:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <vPortSetupTimerInterrupt+0x44>)
 8004aba:	3b01      	subs	r3, #1
 8004abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004abe:	4b04      	ldr	r3, [pc, #16]	; (8004ad0 <vPortSetupTimerInterrupt+0x34>)
 8004ac0:	2207      	movs	r2, #7
 8004ac2:	601a      	str	r2, [r3, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	e000e010 	.word	0xe000e010
 8004ad4:	e000e018 	.word	0xe000e018
 8004ad8:	20000028 	.word	0x20000028
 8004adc:	10624dd3 	.word	0x10624dd3
 8004ae0:	e000e014 	.word	0xe000e014

08004ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004af4 <vPortEnableVFP+0x10>
 8004ae8:	6801      	ldr	r1, [r0, #0]
 8004aea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004aee:	6001      	str	r1, [r0, #0]
 8004af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004af2:	bf00      	nop
 8004af4:	e000ed88 	.word	0xe000ed88

08004af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08a      	sub	sp, #40	; 0x28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b04:	f7ff faf2 	bl	80040ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b08:	4b5b      	ldr	r3, [pc, #364]	; (8004c78 <pvPortMalloc+0x180>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b10:	f000 f920 	bl	8004d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b14:	4b59      	ldr	r3, [pc, #356]	; (8004c7c <pvPortMalloc+0x184>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f040 8093 	bne.w	8004c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01d      	beq.n	8004b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004b28:	2208      	movs	r2, #8
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d014      	beq.n	8004b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f023 0307 	bic.w	r3, r3, #7
 8004b40:	3308      	adds	r3, #8
 8004b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <pvPortMalloc+0x6c>
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	617b      	str	r3, [r7, #20]
}
 8004b60:	bf00      	nop
 8004b62:	e7fe      	b.n	8004b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d06e      	beq.n	8004c48 <pvPortMalloc+0x150>
 8004b6a:	4b45      	ldr	r3, [pc, #276]	; (8004c80 <pvPortMalloc+0x188>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d869      	bhi.n	8004c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b74:	4b43      	ldr	r3, [pc, #268]	; (8004c84 <pvPortMalloc+0x18c>)
 8004b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b78:	4b42      	ldr	r3, [pc, #264]	; (8004c84 <pvPortMalloc+0x18c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b7e:	e004      	b.n	8004b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d903      	bls.n	8004b9c <pvPortMalloc+0xa4>
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1f1      	bne.n	8004b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b9c:	4b36      	ldr	r3, [pc, #216]	; (8004c78 <pvPortMalloc+0x180>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d050      	beq.n	8004c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2208      	movs	r2, #8
 8004bac:	4413      	add	r3, r2
 8004bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	1ad2      	subs	r2, r2, r3
 8004bc0:	2308      	movs	r3, #8
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d91f      	bls.n	8004c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4413      	add	r3, r2
 8004bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	613b      	str	r3, [r7, #16]
}
 8004bec:	bf00      	nop
 8004bee:	e7fe      	b.n	8004bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	1ad2      	subs	r2, r2, r3
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c02:	69b8      	ldr	r0, [r7, #24]
 8004c04:	f000 f908 	bl	8004e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c08:	4b1d      	ldr	r3, [pc, #116]	; (8004c80 <pvPortMalloc+0x188>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	4a1b      	ldr	r2, [pc, #108]	; (8004c80 <pvPortMalloc+0x188>)
 8004c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c16:	4b1a      	ldr	r3, [pc, #104]	; (8004c80 <pvPortMalloc+0x188>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <pvPortMalloc+0x190>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d203      	bcs.n	8004c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c22:	4b17      	ldr	r3, [pc, #92]	; (8004c80 <pvPortMalloc+0x188>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a18      	ldr	r2, [pc, #96]	; (8004c88 <pvPortMalloc+0x190>)
 8004c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <pvPortMalloc+0x184>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c3e:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <pvPortMalloc+0x194>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3301      	adds	r3, #1
 8004c44:	4a11      	ldr	r2, [pc, #68]	; (8004c8c <pvPortMalloc+0x194>)
 8004c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c48:	f7ff fa5e 	bl	8004108 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <pvPortMalloc+0x174>
	__asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	60fb      	str	r3, [r7, #12]
}
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <pvPortMalloc+0x172>
	return pvReturn;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3728      	adds	r7, #40	; 0x28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	200041ec 	.word	0x200041ec
 8004c7c:	20004200 	.word	0x20004200
 8004c80:	200041f0 	.word	0x200041f0
 8004c84:	200041e4 	.word	0x200041e4
 8004c88:	200041f4 	.word	0x200041f4
 8004c8c:	200041f8 	.word	0x200041f8

08004c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d04d      	beq.n	8004d3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ca2:	2308      	movs	r3, #8
 8004ca4:	425b      	negs	r3, r3
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4413      	add	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <vPortFree+0xb8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <vPortFree+0x44>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	60fb      	str	r3, [r7, #12]
}
 8004cd0:	bf00      	nop
 8004cd2:	e7fe      	b.n	8004cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <vPortFree+0x62>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	60bb      	str	r3, [r7, #8]
}
 8004cee:	bf00      	nop
 8004cf0:	e7fe      	b.n	8004cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <vPortFree+0xb8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01e      	beq.n	8004d3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d11a      	bne.n	8004d3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	4b0e      	ldr	r3, [pc, #56]	; (8004d48 <vPortFree+0xb8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	401a      	ands	r2, r3
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d18:	f7ff f9e8 	bl	80040ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <vPortFree+0xbc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4413      	add	r3, r2
 8004d26:	4a09      	ldr	r2, [pc, #36]	; (8004d4c <vPortFree+0xbc>)
 8004d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d2a:	6938      	ldr	r0, [r7, #16]
 8004d2c:	f000 f874 	bl	8004e18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <vPortFree+0xc0>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3301      	adds	r3, #1
 8004d36:	4a06      	ldr	r2, [pc, #24]	; (8004d50 <vPortFree+0xc0>)
 8004d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d3a:	f7ff f9e5 	bl	8004108 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d3e:	bf00      	nop
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20004200 	.word	0x20004200
 8004d4c:	200041f0 	.word	0x200041f0
 8004d50:	200041fc 	.word	0x200041fc

08004d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d60:	4b27      	ldr	r3, [pc, #156]	; (8004e00 <prvHeapInit+0xac>)
 8004d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00c      	beq.n	8004d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3307      	adds	r3, #7
 8004d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0307 	bic.w	r3, r3, #7
 8004d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	4a1f      	ldr	r2, [pc, #124]	; (8004e00 <prvHeapInit+0xac>)
 8004d84:	4413      	add	r3, r2
 8004d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d8c:	4a1d      	ldr	r2, [pc, #116]	; (8004e04 <prvHeapInit+0xb0>)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d92:	4b1c      	ldr	r3, [pc, #112]	; (8004e04 <prvHeapInit+0xb0>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004da0:	2208      	movs	r2, #8
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0307 	bic.w	r3, r3, #7
 8004dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4a15      	ldr	r2, [pc, #84]	; (8004e08 <prvHeapInit+0xb4>)
 8004db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004db6:	4b14      	ldr	r3, [pc, #80]	; (8004e08 <prvHeapInit+0xb4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004dbe:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <prvHeapInit+0xb4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	1ad2      	subs	r2, r2, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <prvHeapInit+0xb4>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4a0a      	ldr	r2, [pc, #40]	; (8004e0c <prvHeapInit+0xb8>)
 8004de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	4a09      	ldr	r2, [pc, #36]	; (8004e10 <prvHeapInit+0xbc>)
 8004dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004dec:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <prvHeapInit+0xc0>)
 8004dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004df2:	601a      	str	r2, [r3, #0]
}
 8004df4:	bf00      	nop
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	200005e4 	.word	0x200005e4
 8004e04:	200041e4 	.word	0x200041e4
 8004e08:	200041ec 	.word	0x200041ec
 8004e0c:	200041f4 	.word	0x200041f4
 8004e10:	200041f0 	.word	0x200041f0
 8004e14:	20004200 	.word	0x20004200

08004e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e20:	4b28      	ldr	r3, [pc, #160]	; (8004ec4 <prvInsertBlockIntoFreeList+0xac>)
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	e002      	b.n	8004e2c <prvInsertBlockIntoFreeList+0x14>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d8f7      	bhi.n	8004e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	4413      	add	r3, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d108      	bne.n	8004e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	441a      	add	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	441a      	add	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d118      	bne.n	8004ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	4b15      	ldr	r3, [pc, #84]	; (8004ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d00d      	beq.n	8004e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	441a      	add	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	e008      	b.n	8004ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e96:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	e003      	b.n	8004ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d002      	beq.n	8004eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eb6:	bf00      	nop
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	200041e4 	.word	0x200041e4
 8004ec8:	200041ec 	.word	0x200041ec

08004ecc <memset>:
 8004ecc:	4402      	add	r2, r0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d100      	bne.n	8004ed6 <memset+0xa>
 8004ed4:	4770      	bx	lr
 8004ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eda:	e7f9      	b.n	8004ed0 <memset+0x4>

08004edc <__libc_init_array>:
 8004edc:	b570      	push	{r4, r5, r6, lr}
 8004ede:	4d0d      	ldr	r5, [pc, #52]	; (8004f14 <__libc_init_array+0x38>)
 8004ee0:	4c0d      	ldr	r4, [pc, #52]	; (8004f18 <__libc_init_array+0x3c>)
 8004ee2:	1b64      	subs	r4, r4, r5
 8004ee4:	10a4      	asrs	r4, r4, #2
 8004ee6:	2600      	movs	r6, #0
 8004ee8:	42a6      	cmp	r6, r4
 8004eea:	d109      	bne.n	8004f00 <__libc_init_array+0x24>
 8004eec:	4d0b      	ldr	r5, [pc, #44]	; (8004f1c <__libc_init_array+0x40>)
 8004eee:	4c0c      	ldr	r4, [pc, #48]	; (8004f20 <__libc_init_array+0x44>)
 8004ef0:	f000 f818 	bl	8004f24 <_init>
 8004ef4:	1b64      	subs	r4, r4, r5
 8004ef6:	10a4      	asrs	r4, r4, #2
 8004ef8:	2600      	movs	r6, #0
 8004efa:	42a6      	cmp	r6, r4
 8004efc:	d105      	bne.n	8004f0a <__libc_init_array+0x2e>
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
 8004f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f04:	4798      	blx	r3
 8004f06:	3601      	adds	r6, #1
 8004f08:	e7ee      	b.n	8004ee8 <__libc_init_array+0xc>
 8004f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f0e:	4798      	blx	r3
 8004f10:	3601      	adds	r6, #1
 8004f12:	e7f2      	b.n	8004efa <__libc_init_array+0x1e>
 8004f14:	08004fe4 	.word	0x08004fe4
 8004f18:	08004fe4 	.word	0x08004fe4
 8004f1c:	08004fe4 	.word	0x08004fe4
 8004f20:	08004fe8 	.word	0x08004fe8

08004f24 <_init>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	bf00      	nop
 8004f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2a:	bc08      	pop	{r3}
 8004f2c:	469e      	mov	lr, r3
 8004f2e:	4770      	bx	lr

08004f30 <_fini>:
 8004f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f32:	bf00      	nop
 8004f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f36:	bc08      	pop	{r3}
 8004f38:	469e      	mov	lr, r3
 8004f3a:	4770      	bx	lr
