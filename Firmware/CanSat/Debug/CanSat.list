
CanSat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d94  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004f34  08004f34  00005f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff8  08004ff8  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08004ff8  08004ff8  00005ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005000  08005000  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005000  08005000  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005004  08005004  00006004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005008  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041d0  20000010  08005018  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041e0  08005018  000071e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114d1  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003180  00000000  00000000  00018511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  0001b698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dcb  00000000  00000000  0001c8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017eef  00000000  00000000  0001d66b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015065  00000000  00000000  0003555a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000960c4  00000000  00000000  0004a5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0683  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004940  00000000  00000000  000e06c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e5008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f1c 	.word	0x08004f1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004f1c 	.word	0x08004f1c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <task_init_1ms>:

/**
  * @fn  	task_init_1ms
  * @brief  Inicializaciones para tarea de 1 milisegundo
  */
void task_init_1ms(void){
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <task_1ms>:

/**
  * @fn  	task_1ms
  * @brief  Ejecucion de tareas de 1 milisegundo
  */
void task_1ms(void){
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <task_init_10ms>:

/**
  * @fn  	task_init_10ms
  * @brief  Inicializaciones para tarea de 10 milisegundos
  */
void task_init_10ms(void){
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <task_10ms>:

/**
  * @fn  	task_10ms
  * @brief  Ejecucion de tareas de 10 milisegundos
  */
void task_10ms(void){
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <task_init_100ms>:

/**
  * @fn  	task_init_100ms
  * @brief  Inicializaciones para tarea de 100 milisegundos
  */
void task_init_100ms(void){
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0

}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <task_100ms>:

/**
  * @fn  	task_100ms
  * @brief  Ejecucion de tareas de 100 milisegundos
  */
void task_100ms(void){
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <task_init_1000ms>:

/**
  * @fn  	task_init_1000ms
  * @brief  Inicializaciones para tarea de 1000 milisegundos
  */
void task_init_1000ms(void){
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <task_1000ms>:

/**
  * @fn  	task_1000ms
  * @brief  Ejecucion de tareas de 1000 milisegundos
  */
void task_1000ms(void){
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <NRF24_write>:

uint8_t PIPE0_Addres[5] = {0xC5,0xC5,0xC5,0xC5,0xC5};
uint8_t NRF24_Cannel    = 0x56;


void NRF24_write(uint8_t Adr, uint8_t data){
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	460a      	mov	r2, r1
 800054a:	71fb      	strb	r3, [r7, #7]
 800054c:	4613      	mov	r3, r2
 800054e:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	f043 0320 	orr.w	r3, r3, #32
 8000556:	b2db      	uxtb	r3, r3
 8000558:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000560:	480c      	ldr	r0, [pc, #48]	@ (8000594 <NRF24_write+0x54>)
 8000562:	f001 fd4f 	bl	8002004 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000566:	1dfb      	adds	r3, r7, #7
 8000568:	2201      	movs	r2, #1
 800056a:	4619      	mov	r1, r3
 800056c:	480a      	ldr	r0, [pc, #40]	@ (8000598 <NRF24_write+0x58>)
 800056e:	f002 faa3 	bl	8002ab8 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &data, 1);
 8000572:	1dbb      	adds	r3, r7, #6
 8000574:	2201      	movs	r2, #1
 8000576:	4619      	mov	r1, r3
 8000578:	4807      	ldr	r0, [pc, #28]	@ (8000598 <NRF24_write+0x58>)
 800057a:	f002 fa9d 	bl	8002ab8 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000584:	4803      	ldr	r0, [pc, #12]	@ (8000594 <NRF24_write+0x54>)
 8000586:	f001 fd3d 	bl	8002004 <HAL_GPIO_WritePin>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40020400 	.word	0x40020400
 8000598:	20000328 	.word	0x20000328

0800059c <NRF24_Addr_write>:

void NRF24_Addr_write(uint8_t Adr,uint8_t *ADDRESS){
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	6039      	str	r1, [r7, #0]
 80005a6:	71fb      	strb	r3, [r7, #7]
	Adr |= W_REGISTER;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	f043 0320 	orr.w	r3, r3, #32
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[5];
	buffer[0] = ADDRESS[4];
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	723b      	strb	r3, [r7, #8]
	buffer[1] = ADDRESS[3];
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	78db      	ldrb	r3, [r3, #3]
 80005bc:	727b      	strb	r3, [r7, #9]
	buffer[2] = ADDRESS[2];
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	789b      	ldrb	r3, [r3, #2]
 80005c2:	72bb      	strb	r3, [r7, #10]
	buffer[3] = ADDRESS[1];
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	785b      	ldrb	r3, [r3, #1]
 80005c8:	72fb      	strb	r3, [r7, #11]
	buffer[4] = ADDRESS[0];
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	733b      	strb	r3, [r7, #12]

	NRF24_select();
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005d6:	4812      	ldr	r0, [pc, #72]	@ (8000620 <NRF24_Addr_write+0x84>)
 80005d8:	f001 fd14 	bl	8002004 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 80005dc:	1dfb      	adds	r3, r7, #7
 80005de:	2201      	movs	r2, #1
 80005e0:	4619      	mov	r1, r3
 80005e2:	4810      	ldr	r0, [pc, #64]	@ (8000624 <NRF24_Addr_write+0x88>)
 80005e4:	f002 fa68 	bl	8002ab8 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 80005e8:	2300      	movs	r3, #0
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	e00b      	b.n	8000606 <NRF24_Addr_write+0x6a>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &buffer[n], 1);
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	f107 0208 	add.w	r2, r7, #8
 80005f4:	4413      	add	r3, r2
 80005f6:	2201      	movs	r2, #1
 80005f8:	4619      	mov	r1, r3
 80005fa:	480a      	ldr	r0, [pc, #40]	@ (8000624 <NRF24_Addr_write+0x88>)
 80005fc:	f002 fa5c 	bl	8002ab8 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	3301      	adds	r3, #1
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2b04      	cmp	r3, #4
 800060a:	d9f0      	bls.n	80005ee <NRF24_Addr_write+0x52>
	}

	NRF24_unselect();
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000612:	4803      	ldr	r0, [pc, #12]	@ (8000620 <NRF24_Addr_write+0x84>)
 8000614:	f001 fcf6 	bl	8002004 <HAL_GPIO_WritePin>

}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40020400 	.word	0x40020400
 8000624:	20000328 	.word	0x20000328

08000628 <NRF24_read>:

uint8_t NRF24_read(uint8_t Adr){
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	uint8_t Replay;
	NRF24_select();
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000638:	480d      	ldr	r0, [pc, #52]	@ (8000670 <NRF24_read+0x48>)
 800063a:	f001 fce3 	bl	8002004 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	2201      	movs	r2, #1
 8000642:	4619      	mov	r1, r3
 8000644:	480b      	ldr	r0, [pc, #44]	@ (8000674 <NRF24_read+0x4c>)
 8000646:	f002 fa37 	bl	8002ab8 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(SPI_NRF24, &Replay, 1);
 800064a:	f107 030f 	add.w	r3, r7, #15
 800064e:	2201      	movs	r2, #1
 8000650:	4619      	mov	r1, r3
 8000652:	4808      	ldr	r0, [pc, #32]	@ (8000674 <NRF24_read+0x4c>)
 8000654:	f002 fae2 	bl	8002c1c <HAL_SPI_Receive_DMA>
	NRF24_unselect();
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800065e:	4804      	ldr	r0, [pc, #16]	@ (8000670 <NRF24_read+0x48>)
 8000660:	f001 fcd0 	bl	8002004 <HAL_GPIO_WritePin>
	return Replay;
 8000664:	7bfb      	ldrb	r3, [r7, #15]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40020400 	.word	0x40020400
 8000674:	20000328 	.word	0x20000328

08000678 <NRF24_Addr_read>:

void NRF24_Addr_read(uint8_t Adr){
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[5];
	NRF24_select();
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000688:	4836      	ldr	r0, [pc, #216]	@ (8000764 <NRF24_Addr_read+0xec>)
 800068a:	f001 fcbb 	bl	8002004 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	2201      	movs	r2, #1
 8000692:	4619      	mov	r1, r3
 8000694:	4834      	ldr	r0, [pc, #208]	@ (8000768 <NRF24_Addr_read+0xf0>)
 8000696:	f002 fa0f 	bl	8002ab8 <HAL_SPI_Transmit_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 800069a:	2300      	movs	r3, #0
 800069c:	73fb      	strb	r3, [r7, #15]
 800069e:	e00b      	b.n	80006b8 <NRF24_Addr_read+0x40>
		HAL_SPI_Receive_DMA(SPI_NRF24, &Buffer[i], 1);
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	f107 0208 	add.w	r2, r7, #8
 80006a6:	4413      	add	r3, r2
 80006a8:	2201      	movs	r2, #1
 80006aa:	4619      	mov	r1, r3
 80006ac:	482e      	ldr	r0, [pc, #184]	@ (8000768 <NRF24_Addr_read+0xf0>)
 80006ae:	f002 fab5 	bl	8002c1c <HAL_SPI_Receive_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	3301      	adds	r3, #1
 80006b6:	73fb      	strb	r3, [r7, #15]
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	d9f0      	bls.n	80006a0 <NRF24_Addr_read+0x28>
	}
	NRF24_unselect();
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006c4:	4827      	ldr	r0, [pc, #156]	@ (8000764 <NRF24_Addr_read+0xec>)
 80006c6:	f001 fc9d 	bl	8002004 <HAL_GPIO_WritePin>
	switch (Adr) {
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b10      	cmp	r3, #16
 80006ce:	d030      	beq.n	8000732 <NRF24_Addr_read+0xba>
 80006d0:	2b10      	cmp	r3, #16
 80006d2:	dc43      	bgt.n	800075c <NRF24_Addr_read+0xe4>
 80006d4:	2b0a      	cmp	r3, #10
 80006d6:	d002      	beq.n	80006de <NRF24_Addr_read+0x66>
 80006d8:	2b0b      	cmp	r3, #11
 80006da:	d015      	beq.n	8000708 <NRF24_Addr_read+0x90>
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
			break;
	}
}
 80006dc:	e03e      	b.n	800075c <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[4]=Buffer[0];
 80006de:	7a3a      	ldrb	r2, [r7, #8]
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <NRF24_Addr_read+0xf4>)
 80006e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[3]=Buffer[1];
 80006e6:	7a7a      	ldrb	r2, [r7, #9]
 80006e8:	4b20      	ldr	r3, [pc, #128]	@ (800076c <NRF24_Addr_read+0xf4>)
 80006ea:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[2]=Buffer[2];
 80006ee:	7aba      	ldrb	r2, [r7, #10]
 80006f0:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <NRF24_Addr_read+0xf4>)
 80006f2:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[1]=Buffer[3];
 80006f6:	7afa      	ldrb	r2, [r7, #11]
 80006f8:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <NRF24_Addr_read+0xf4>)
 80006fa:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[0]=Buffer[4];
 80006fe:	7b3a      	ldrb	r2, [r7, #12]
 8000700:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <NRF24_Addr_read+0xf4>)
 8000702:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
			break;
 8000706:	e029      	b.n	800075c <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[4]=Buffer[0];
 8000708:	7a3a      	ldrb	r2, [r7, #8]
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <NRF24_Addr_read+0xf4>)
 800070c:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[3]=Buffer[1];
 8000710:	7a7a      	ldrb	r2, [r7, #9]
 8000712:	4b16      	ldr	r3, [pc, #88]	@ (800076c <NRF24_Addr_read+0xf4>)
 8000714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[2]=Buffer[2];
 8000718:	7aba      	ldrb	r2, [r7, #10]
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <NRF24_Addr_read+0xf4>)
 800071c:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[1]=Buffer[3];
 8000720:	7afa      	ldrb	r2, [r7, #11]
 8000722:	4b12      	ldr	r3, [pc, #72]	@ (800076c <NRF24_Addr_read+0xf4>)
 8000724:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[0]=Buffer[4];
 8000728:	7b3a      	ldrb	r2, [r7, #12]
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <NRF24_Addr_read+0xf4>)
 800072c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			break;
 8000730:	e014      	b.n	800075c <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.TX_ADDR[4]=Buffer[0];
 8000732:	7a3a      	ldrb	r2, [r7, #8]
 8000734:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <NRF24_Addr_read+0xf4>)
 8000736:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
			NRF24_Configurations_Struct.Actual.TX_ADDR[3]=Buffer[1];
 800073a:	7a7a      	ldrb	r2, [r7, #9]
 800073c:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <NRF24_Addr_read+0xf4>)
 800073e:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
 8000742:	7aba      	ldrb	r2, [r7, #10]
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <NRF24_Addr_read+0xf4>)
 8000746:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
 800074a:	7afa      	ldrb	r2, [r7, #11]
 800074c:	4b07      	ldr	r3, [pc, #28]	@ (800076c <NRF24_Addr_read+0xf4>)
 800074e:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
 8000752:	7b3a      	ldrb	r2, [r7, #12]
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <NRF24_Addr_read+0xf4>)
 8000756:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
			break;
 800075a:	bf00      	nop
}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40020400 	.word	0x40020400
 8000768:	20000328 	.word	0x20000328
 800076c:	2000002c 	.word	0x2000002c

08000770 <NRF24_FlushTxFIFO>:

void NRF24_FlushTxFIFO(void){
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_TX;
 8000776:	23e1      	movs	r3, #225	@ 0xe1
 8000778:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000780:	4809      	ldr	r0, [pc, #36]	@ (80007a8 <NRF24_FlushTxFIFO+0x38>)
 8000782:	f001 fc3f 	bl	8002004 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	2201      	movs	r2, #1
 800078a:	4619      	mov	r1, r3
 800078c:	4807      	ldr	r0, [pc, #28]	@ (80007ac <NRF24_FlushTxFIFO+0x3c>)
 800078e:	f002 f993 	bl	8002ab8 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000798:	4803      	ldr	r0, [pc, #12]	@ (80007a8 <NRF24_FlushTxFIFO+0x38>)
 800079a:	f001 fc33 	bl	8002004 <HAL_GPIO_WritePin>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40020400 	.word	0x40020400
 80007ac:	20000328 	.word	0x20000328

080007b0 <NRF24_FlushRxFIFO>:

void NRF24_FlushRxFIFO(void){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_RX;
 80007b6:	23e2      	movs	r3, #226	@ 0xe2
 80007b8:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007c0:	4809      	ldr	r0, [pc, #36]	@ (80007e8 <NRF24_FlushRxFIFO+0x38>)
 80007c2:	f001 fc1f 	bl	8002004 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	2201      	movs	r2, #1
 80007ca:	4619      	mov	r1, r3
 80007cc:	4807      	ldr	r0, [pc, #28]	@ (80007ec <NRF24_FlushRxFIFO+0x3c>)
 80007ce:	f002 f973 	bl	8002ab8 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007d8:	4803      	ldr	r0, [pc, #12]	@ (80007e8 <NRF24_FlushRxFIFO+0x38>)
 80007da:	f001 fc13 	bl	8002004 <HAL_GPIO_WritePin>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40020400 	.word	0x40020400
 80007ec:	20000328 	.word	0x20000328

080007f0 <NRF24_PowerUp>:

void NRF24_PowerUp(void){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
	uint8_t Adr = 0x00;
 80007f6:	2300      	movs	r3, #0
 80007f8:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer= NRF24_read(Adr);
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff13 	bl	8000628 <NRF24_read>
 8000802:	4603      	mov	r3, r0
 8000804:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	f043 0320 	orr.w	r3, r3, #32
 800080c:	71fb      	strb	r3, [r7, #7]
	Buffer |= 0x02;
 800080e:	79bb      	ldrb	r3, [r7, #6]
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	71bb      	strb	r3, [r7, #6]
	NRF24_write(Adr, Buffer);
 8000816:	79ba      	ldrb	r2, [r7, #6]
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fe8f 	bl	8000540 <NRF24_write>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <NRF24_ActualConfiguration>:

void NRF24_ActualConfiguration(void){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	NRF24_Configurations_Struct.Actual.CONFIG 		= NRF24_read(CONFIG);
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff fef9 	bl	8000628 <NRF24_read>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	4b5f      	ldr	r3, [pc, #380]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800083c:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	NRF24_Configurations_Struct.Actual.EN_AA  		= NRF24_read(EN_AA);
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff fef1 	bl	8000628 <NRF24_read>
 8000846:	4603      	mov	r3, r0
 8000848:	461a      	mov	r2, r3
 800084a:	4b5b      	ldr	r3, [pc, #364]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800084c:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	NRF24_Configurations_Struct.Actual.EN_RXADDR  	= NRF24_read(EN_RXADDR);
 8000850:	2002      	movs	r0, #2
 8000852:	f7ff fee9 	bl	8000628 <NRF24_read>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	4b57      	ldr	r3, [pc, #348]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800085c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	NRF24_Configurations_Struct.Actual.SETUP_AW  	= NRF24_read(SETUP_AW);
 8000860:	2003      	movs	r0, #3
 8000862:	f7ff fee1 	bl	8000628 <NRF24_read>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	4b53      	ldr	r3, [pc, #332]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800086c:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	NRF24_Configurations_Struct.Actual.SETUP_RETR 	= NRF24_read(SETUP_RETR);
 8000870:	2004      	movs	r0, #4
 8000872:	f7ff fed9 	bl	8000628 <NRF24_read>
 8000876:	4603      	mov	r3, r0
 8000878:	461a      	mov	r2, r3
 800087a:	4b4f      	ldr	r3, [pc, #316]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800087c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	NRF24_Configurations_Struct.Actual.RF_CH  		= NRF24_read(RF_CH);
 8000880:	2005      	movs	r0, #5
 8000882:	f7ff fed1 	bl	8000628 <NRF24_read>
 8000886:	4603      	mov	r3, r0
 8000888:	461a      	mov	r2, r3
 800088a:	4b4b      	ldr	r3, [pc, #300]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800088c:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
	NRF24_Configurations_Struct.Actual.RF_SETUP  	= NRF24_read(RF_SETUP);
 8000890:	2006      	movs	r0, #6
 8000892:	f7ff fec9 	bl	8000628 <NRF24_read>
 8000896:	4603      	mov	r3, r0
 8000898:	461a      	mov	r2, r3
 800089a:	4b47      	ldr	r3, [pc, #284]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800089c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	NRF24_Configurations_Struct.Actual.STATUS  		= NRF24_read(STATUS);
 80008a0:	2007      	movs	r0, #7
 80008a2:	f7ff fec1 	bl	8000628 <NRF24_read>
 80008a6:	4603      	mov	r3, r0
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b43      	ldr	r3, [pc, #268]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 80008ac:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	NRF24_Configurations_Struct.Actual.OBSERVE  	= NRF24_read(OBSERVE);
 80008b0:	2008      	movs	r0, #8
 80008b2:	f7ff feb9 	bl	8000628 <NRF24_read>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b3f      	ldr	r3, [pc, #252]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 80008bc:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	NRF24_Configurations_Struct.Actual.CD  			= NRF24_read(CD);
 80008c0:	2009      	movs	r0, #9
 80008c2:	f7ff feb1 	bl	8000628 <NRF24_read>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b3b      	ldr	r3, [pc, #236]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 80008cc:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
	NRF24_Addr_read(RX_ADDR_P0);
 80008d0:	200a      	movs	r0, #10
 80008d2:	f7ff fed1 	bl	8000678 <NRF24_Addr_read>
	NRF24_Addr_read(RX_ADDR_P1);
 80008d6:	200b      	movs	r0, #11
 80008d8:	f7ff fece 	bl	8000678 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_ADDR_P2  	= NRF24_read(RX_ADDR_P2);
 80008dc:	200c      	movs	r0, #12
 80008de:	f7ff fea3 	bl	8000628 <NRF24_read>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b34      	ldr	r3, [pc, #208]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 80008e8:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	NRF24_Configurations_Struct.Actual.RX_ADDR_P3 	= NRF24_read(RX_ADDR_P3);
 80008ec:	200d      	movs	r0, #13
 80008ee:	f7ff fe9b 	bl	8000628 <NRF24_read>
 80008f2:	4603      	mov	r3, r0
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b30      	ldr	r3, [pc, #192]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 80008f8:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	NRF24_Configurations_Struct.Actual.RX_ADDR_P4  	= NRF24_read(RX_ADDR_P4);
 80008fc:	200e      	movs	r0, #14
 80008fe:	f7ff fe93 	bl	8000628 <NRF24_read>
 8000902:	4603      	mov	r3, r0
 8000904:	461a      	mov	r2, r3
 8000906:	4b2c      	ldr	r3, [pc, #176]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 8000908:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	NRF24_Configurations_Struct.Actual.RX_ADDR_P5  	= NRF24_read(RX_ADDR_P5);
 800090c:	200f      	movs	r0, #15
 800090e:	f7ff fe8b 	bl	8000628 <NRF24_read>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	4b28      	ldr	r3, [pc, #160]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 8000918:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	NRF24_Addr_read(TX_ADDR);
 800091c:	2010      	movs	r0, #16
 800091e:	f7ff feab 	bl	8000678 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_PW_P0  	= NRF24_read(RX_PW_P0);
 8000922:	2011      	movs	r0, #17
 8000924:	f7ff fe80 	bl	8000628 <NRF24_read>
 8000928:	4603      	mov	r3, r0
 800092a:	461a      	mov	r2, r3
 800092c:	4b22      	ldr	r3, [pc, #136]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800092e:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
	NRF24_Configurations_Struct.Actual.RX_PW_P1  	= NRF24_read(RX_PW_P1);
 8000932:	2012      	movs	r0, #18
 8000934:	f7ff fe78 	bl	8000628 <NRF24_read>
 8000938:	4603      	mov	r3, r0
 800093a:	461a      	mov	r2, r3
 800093c:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800093e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	NRF24_Configurations_Struct.Actual.RX_PW_P2  	= NRF24_read(RX_PW_P2);
 8000942:	2013      	movs	r0, #19
 8000944:	f7ff fe70 	bl	8000628 <NRF24_read>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800094e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
	NRF24_Configurations_Struct.Actual.RX_PW_P3  	= NRF24_read(RX_PW_P3);
 8000952:	2014      	movs	r0, #20
 8000954:	f7ff fe68 	bl	8000628 <NRF24_read>
 8000958:	4603      	mov	r3, r0
 800095a:	461a      	mov	r2, r3
 800095c:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800095e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	NRF24_Configurations_Struct.Actual.RX_PW_P4  	= NRF24_read(RX_PW_P4);
 8000962:	2015      	movs	r0, #21
 8000964:	f7ff fe60 	bl	8000628 <NRF24_read>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800096e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	NRF24_Configurations_Struct.Actual.RX_PW_P5  	= NRF24_read(RX_PW_P5);
 8000972:	2016      	movs	r0, #22
 8000974:	f7ff fe58 	bl	8000628 <NRF24_read>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800097e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	NRF24_Configurations_Struct.Actual.FIFO_STATUS  = NRF24_read(FIFO_STATUS);
 8000982:	2017      	movs	r0, #23
 8000984:	f7ff fe50 	bl	8000628 <NRF24_read>
 8000988:	4603      	mov	r3, r0
 800098a:	461a      	mov	r2, r3
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800098e:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
	NRF24_Configurations_Struct.Actual.DYNPD  		= NRF24_read(DYNPD);
 8000992:	201c      	movs	r0, #28
 8000994:	f7ff fe48 	bl	8000628 <NRF24_read>
 8000998:	4603      	mov	r3, r0
 800099a:	461a      	mov	r2, r3
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 800099e:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
	NRF24_Configurations_Struct.Actual.FEATURE  	= NRF24_read(FEATURE);
 80009a2:	201d      	movs	r0, #29
 80009a4:	f7ff fe40 	bl	8000628 <NRF24_read>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b02      	ldr	r3, [pc, #8]	@ (80009b8 <NRF24_ActualConfiguration+0x18c>)
 80009ae:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000002c 	.word	0x2000002c

080009bc <NRF24_config>:

void NRF24_config(NRF24_Address_Configurations_t Configuration_struct){
 80009bc:	b084      	sub	sp, #16
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	f107 0c08 	add.w	ip, r7, #8
 80009c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	NRF24_write(CONFIG,	Configuration_struct.CONFIG);
 80009ca:	7a3b      	ldrb	r3, [r7, #8]
 80009cc:	4619      	mov	r1, r3
 80009ce:	2000      	movs	r0, #0
 80009d0:	f7ff fdb6 	bl	8000540 <NRF24_write>
	NRF24_write(EN_AA, Configuration_struct.EN_AA);
 80009d4:	7a7b      	ldrb	r3, [r7, #9]
 80009d6:	4619      	mov	r1, r3
 80009d8:	2001      	movs	r0, #1
 80009da:	f7ff fdb1 	bl	8000540 <NRF24_write>
	NRF24_write(EN_RXADDR,Configuration_struct.EN_RXADDR);
 80009de:	7abb      	ldrb	r3, [r7, #10]
 80009e0:	4619      	mov	r1, r3
 80009e2:	2002      	movs	r0, #2
 80009e4:	f7ff fdac 	bl	8000540 <NRF24_write>
	NRF24_write(SETUP_AW,Configuration_struct.SETUP_AW);
 80009e8:	7afb      	ldrb	r3, [r7, #11]
 80009ea:	4619      	mov	r1, r3
 80009ec:	2003      	movs	r0, #3
 80009ee:	f7ff fda7 	bl	8000540 <NRF24_write>
	NRF24_write(SETUP_RETR,Configuration_struct.SETUP_RETR);
 80009f2:	7b3b      	ldrb	r3, [r7, #12]
 80009f4:	4619      	mov	r1, r3
 80009f6:	2004      	movs	r0, #4
 80009f8:	f7ff fda2 	bl	8000540 <NRF24_write>
	NRF24_write(RF_CH,Configuration_struct.RF_CH);
 80009fc:	7b7b      	ldrb	r3, [r7, #13]
 80009fe:	4619      	mov	r1, r3
 8000a00:	2005      	movs	r0, #5
 8000a02:	f7ff fd9d 	bl	8000540 <NRF24_write>
	NRF24_write(RF_SETUP,Configuration_struct.RF_SETUP);
 8000a06:	7bbb      	ldrb	r3, [r7, #14]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	2006      	movs	r0, #6
 8000a0c:	f7ff fd98 	bl	8000540 <NRF24_write>
	NRF24_write(STATUS,Configuration_struct.STATUS);
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	4619      	mov	r1, r3
 8000a14:	2007      	movs	r0, #7
 8000a16:	f7ff fd93 	bl	8000540 <NRF24_write>
	NRF24_write(OBSERVE,Configuration_struct.OBSERVE);
 8000a1a:	7c3b      	ldrb	r3, [r7, #16]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	2008      	movs	r0, #8
 8000a20:	f7ff fd8e 	bl	8000540 <NRF24_write>
	NRF24_write(CD,Configuration_struct.CD);
 8000a24:	7c7b      	ldrb	r3, [r7, #17]
 8000a26:	4619      	mov	r1, r3
 8000a28:	2009      	movs	r0, #9
 8000a2a:	f7ff fd89 	bl	8000540 <NRF24_write>
	NRF24_Addr_write(RX_ADDR_P0, Configuration_struct.RX_ADDR_P0);
 8000a2e:	f107 0312 	add.w	r3, r7, #18
 8000a32:	4619      	mov	r1, r3
 8000a34:	200a      	movs	r0, #10
 8000a36:	f7ff fdb1 	bl	800059c <NRF24_Addr_write>
	NRF24_Addr_write(RX_ADDR_P1, Configuration_struct.RX_ADDR_P1);
 8000a3a:	f107 0317 	add.w	r3, r7, #23
 8000a3e:	4619      	mov	r1, r3
 8000a40:	200b      	movs	r0, #11
 8000a42:	f7ff fdab 	bl	800059c <NRF24_Addr_write>
	NRF24_write(RX_ADDR_P2,Configuration_struct.RX_ADDR_P2);
 8000a46:	7f3b      	ldrb	r3, [r7, #28]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	200c      	movs	r0, #12
 8000a4c:	f7ff fd78 	bl	8000540 <NRF24_write>
	NRF24_write(RX_ADDR_P3,Configuration_struct.RX_ADDR_P3);
 8000a50:	7f7b      	ldrb	r3, [r7, #29]
 8000a52:	4619      	mov	r1, r3
 8000a54:	200d      	movs	r0, #13
 8000a56:	f7ff fd73 	bl	8000540 <NRF24_write>
	NRF24_write(RX_ADDR_P4,Configuration_struct.RX_ADDR_P4);
 8000a5a:	7fbb      	ldrb	r3, [r7, #30]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	200e      	movs	r0, #14
 8000a60:	f7ff fd6e 	bl	8000540 <NRF24_write>
	NRF24_write(RX_ADDR_P5,Configuration_struct.RX_ADDR_P5);
 8000a64:	7ffb      	ldrb	r3, [r7, #31]
 8000a66:	4619      	mov	r1, r3
 8000a68:	200f      	movs	r0, #15
 8000a6a:	f7ff fd69 	bl	8000540 <NRF24_write>
	NRF24_Addr_write(TX_ADDR, Configuration_struct.TX_ADDR);
 8000a6e:	f107 0320 	add.w	r3, r7, #32
 8000a72:	4619      	mov	r1, r3
 8000a74:	2010      	movs	r0, #16
 8000a76:	f7ff fd91 	bl	800059c <NRF24_Addr_write>
	NRF24_write(RX_PW_P0,Configuration_struct.RX_PW_P0);
 8000a7a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000a7e:	4619      	mov	r1, r3
 8000a80:	2011      	movs	r0, #17
 8000a82:	f7ff fd5d 	bl	8000540 <NRF24_write>
	NRF24_write(RX_PW_P1,Configuration_struct.RX_PW_P1);
 8000a86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	2012      	movs	r0, #18
 8000a8e:	f7ff fd57 	bl	8000540 <NRF24_write>
	NRF24_write(RX_PW_P2,Configuration_struct.RX_PW_P2);
 8000a92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a96:	4619      	mov	r1, r3
 8000a98:	2013      	movs	r0, #19
 8000a9a:	f7ff fd51 	bl	8000540 <NRF24_write>
	NRF24_write(RX_PW_P3,Configuration_struct.RX_PW_P3);
 8000a9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	2014      	movs	r0, #20
 8000aa6:	f7ff fd4b 	bl	8000540 <NRF24_write>
	NRF24_write(RX_PW_P4,Configuration_struct.RX_PW_P4);
 8000aaa:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000aae:	4619      	mov	r1, r3
 8000ab0:	2015      	movs	r0, #21
 8000ab2:	f7ff fd45 	bl	8000540 <NRF24_write>
	NRF24_write(RX_PW_P5,Configuration_struct.RX_PW_P5);
 8000ab6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000aba:	4619      	mov	r1, r3
 8000abc:	2016      	movs	r0, #22
 8000abe:	f7ff fd3f 	bl	8000540 <NRF24_write>
	NRF24_write(FIFO_STATUS,Configuration_struct.FIFO_STATUS);
 8000ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	2017      	movs	r0, #23
 8000aca:	f7ff fd39 	bl	8000540 <NRF24_write>
	NRF24_write(DYNPD,Configuration_struct.DYNPD);
 8000ace:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	201c      	movs	r0, #28
 8000ad6:	f7ff fd33 	bl	8000540 <NRF24_write>
	NRF24_write(FEATURE,Configuration_struct.FEATURE);
 8000ada:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000ade:	4619      	mov	r1, r3
 8000ae0:	201d      	movs	r0, #29
 8000ae2:	f7ff fd2d 	bl	8000540 <NRF24_write>
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aee:	b004      	add	sp, #16
 8000af0:	4770      	bx	lr
	...

08000af4 <NRF24_DefaultConfiguration>:

void NRF24_DefaultConfiguration(void){
 8000af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af06      	add	r7, sp, #24
	NRF24_FlushTxFIFO();
 8000afa:	f7ff fe39 	bl	8000770 <NRF24_FlushTxFIFO>
	NRF24_FlushRxFIFO();
 8000afe:	f7ff fe57 	bl	80007b0 <NRF24_FlushRxFIFO>
	NRF24_Configurations_Struct.Default.CONFIG 			= 0x08;
 8000b02:	4b46      	ldr	r3, [pc, #280]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b04:	2208      	movs	r2, #8
 8000b06:	701a      	strb	r2, [r3, #0]
	NRF24_Configurations_Struct.Default.EN_AA  			= 0x3F;
 8000b08:	4b44      	ldr	r3, [pc, #272]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b0a:	223f      	movs	r2, #63	@ 0x3f
 8000b0c:	705a      	strb	r2, [r3, #1]
	NRF24_Configurations_Struct.Default.EN_RXADDR  		= 0x03;
 8000b0e:	4b43      	ldr	r3, [pc, #268]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b10:	2203      	movs	r2, #3
 8000b12:	709a      	strb	r2, [r3, #2]
	NRF24_Configurations_Struct.Default.SETUP_AW  		= 0x03;
 8000b14:	4b41      	ldr	r3, [pc, #260]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b16:	2203      	movs	r2, #3
 8000b18:	70da      	strb	r2, [r3, #3]
	NRF24_Configurations_Struct.Default.SETUP_RETR 		= 0x03;
 8000b1a:	4b40      	ldr	r3, [pc, #256]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	711a      	strb	r2, [r3, #4]
	NRF24_Configurations_Struct.Default.RF_CH  			= 0x02;
 8000b20:	4b3e      	ldr	r3, [pc, #248]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b22:	2202      	movs	r2, #2
 8000b24:	715a      	strb	r2, [r3, #5]
	NRF24_Configurations_Struct.Default.RF_SETUP  		= 0x0F;
 8000b26:	4b3d      	ldr	r3, [pc, #244]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b28:	220f      	movs	r2, #15
 8000b2a:	719a      	strb	r2, [r3, #6]
	NRF24_Configurations_Struct.Default.STATUS  		= 0X70;
 8000b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b2e:	2270      	movs	r2, #112	@ 0x70
 8000b30:	71da      	strb	r2, [r3, #7]
	NRF24_Configurations_Struct.Default.OBSERVE  		= 0X00;
 8000b32:	4b3a      	ldr	r3, [pc, #232]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	721a      	strb	r2, [r3, #8]
	NRF24_Configurations_Struct.Default.CD  			= 0x00;
 8000b38:	4b38      	ldr	r3, [pc, #224]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	725a      	strb	r2, [r3, #9]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[0]  	= 0xE7;
 8000b3e:	4b37      	ldr	r3, [pc, #220]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b40:	22e7      	movs	r2, #231	@ 0xe7
 8000b42:	729a      	strb	r2, [r3, #10]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[1]  	= 0xE7;
 8000b44:	4b35      	ldr	r3, [pc, #212]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b46:	22e7      	movs	r2, #231	@ 0xe7
 8000b48:	72da      	strb	r2, [r3, #11]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[2]  	= 0xE7;
 8000b4a:	4b34      	ldr	r3, [pc, #208]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b4c:	22e7      	movs	r2, #231	@ 0xe7
 8000b4e:	731a      	strb	r2, [r3, #12]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[3]  	= 0xE7;
 8000b50:	4b32      	ldr	r3, [pc, #200]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b52:	22e7      	movs	r2, #231	@ 0xe7
 8000b54:	735a      	strb	r2, [r3, #13]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[4]  	= 0xE7;
 8000b56:	4b31      	ldr	r3, [pc, #196]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b58:	22e7      	movs	r2, #231	@ 0xe7
 8000b5a:	739a      	strb	r2, [r3, #14]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[0]  	= 0xC2;
 8000b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b5e:	22c2      	movs	r2, #194	@ 0xc2
 8000b60:	73da      	strb	r2, [r3, #15]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[1]  	= 0xC2;
 8000b62:	4b2e      	ldr	r3, [pc, #184]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b64:	22c2      	movs	r2, #194	@ 0xc2
 8000b66:	741a      	strb	r2, [r3, #16]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[2]  	= 0xC2;
 8000b68:	4b2c      	ldr	r3, [pc, #176]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b6a:	22c2      	movs	r2, #194	@ 0xc2
 8000b6c:	745a      	strb	r2, [r3, #17]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[3]  	= 0xC2;
 8000b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b70:	22c2      	movs	r2, #194	@ 0xc2
 8000b72:	749a      	strb	r2, [r3, #18]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[4]  	= 0xC2;
 8000b74:	4b29      	ldr	r3, [pc, #164]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b76:	22c2      	movs	r2, #194	@ 0xc2
 8000b78:	74da      	strb	r2, [r3, #19]
	NRF24_Configurations_Struct.Default.RX_ADDR_P2  	= 0xC3;
 8000b7a:	4b28      	ldr	r3, [pc, #160]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b7c:	22c3      	movs	r2, #195	@ 0xc3
 8000b7e:	751a      	strb	r2, [r3, #20]
	NRF24_Configurations_Struct.Default.RX_ADDR_P3 		= 0xC4;
 8000b80:	4b26      	ldr	r3, [pc, #152]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b82:	22c4      	movs	r2, #196	@ 0xc4
 8000b84:	755a      	strb	r2, [r3, #21]
	NRF24_Configurations_Struct.Default.RX_ADDR_P4  	= 0xC5;
 8000b86:	4b25      	ldr	r3, [pc, #148]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b88:	22c5      	movs	r2, #197	@ 0xc5
 8000b8a:	759a      	strb	r2, [r3, #22]
	NRF24_Configurations_Struct.Default.RX_ADDR_P5  	= 0xC6;
 8000b8c:	4b23      	ldr	r3, [pc, #140]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b8e:	22c6      	movs	r2, #198	@ 0xc6
 8000b90:	75da      	strb	r2, [r3, #23]
	NRF24_Configurations_Struct.Default.TX_ADDR[0]   	= 0xE7;
 8000b92:	4b22      	ldr	r3, [pc, #136]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b94:	22e7      	movs	r2, #231	@ 0xe7
 8000b96:	761a      	strb	r2, [r3, #24]
	NRF24_Configurations_Struct.Default.TX_ADDR[1]   	= 0xE7;
 8000b98:	4b20      	ldr	r3, [pc, #128]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000b9a:	22e7      	movs	r2, #231	@ 0xe7
 8000b9c:	765a      	strb	r2, [r3, #25]
	NRF24_Configurations_Struct.Default.TX_ADDR[2]   	= 0xE7;
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000ba0:	22e7      	movs	r2, #231	@ 0xe7
 8000ba2:	769a      	strb	r2, [r3, #26]
	NRF24_Configurations_Struct.Default.TX_ADDR[3]   	= 0xE7;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000ba6:	22e7      	movs	r2, #231	@ 0xe7
 8000ba8:	76da      	strb	r2, [r3, #27]
	NRF24_Configurations_Struct.Default.TX_ADDR[4]   	= 0xE7;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bac:	22e7      	movs	r2, #231	@ 0xe7
 8000bae:	771a      	strb	r2, [r3, #28]
	NRF24_Configurations_Struct.Default.RX_PW_P0  		= 0X00;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	775a      	strb	r2, [r3, #29]
	NRF24_Configurations_Struct.Default.RX_PW_P1  		= 0X00;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	779a      	strb	r2, [r3, #30]
	NRF24_Configurations_Struct.Default.RX_PW_P2  		= 0X00;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	77da      	strb	r2, [r3, #31]
	NRF24_Configurations_Struct.Default.RX_PW_P3  		= 0X00;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2020 	strb.w	r2, [r3, #32]
	NRF24_Configurations_Struct.Default.RX_PW_P4  		= 0X00;
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	NRF24_Configurations_Struct.Default.RX_PW_P5  		= 0X00;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	NRF24_Configurations_Struct.Default.FIFO_STATUS  	= 0X11;
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bdc:	2211      	movs	r2, #17
 8000bde:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	NRF24_Configurations_Struct.Default.DYNPD  			= 0X00;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	NRF24_Configurations_Struct.Default.FEATURE  		= 0X00;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	NRF24_config(NRF24_Configurations_Struct.Default);
 8000bf2:	4e0a      	ldr	r6, [pc, #40]	@ (8000c1c <NRF24_DefaultConfiguration+0x128>)
 8000bf4:	466c      	mov	r4, sp
 8000bf6:	f106 0510 	add.w	r5, r6, #16
 8000bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c02:	6020      	str	r0, [r4, #0]
 8000c04:	3404      	adds	r4, #4
 8000c06:	8021      	strh	r1, [r4, #0]
 8000c08:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c0c:	f7ff fed6 	bl	80009bc <NRF24_config>
	NRF24_ActualConfiguration();
 8000c10:	f7ff fe0c 	bl	800082c <NRF24_ActualConfiguration>
}
 8000c14:	bf00      	nop
 8000c16:	3704      	adds	r7, #4
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c1c:	2000002c 	.word	0x2000002c

08000c20 <NRF24_init>:
			Transmision_Flag = 0;
			break;
	}
}

void NRF24_init(void){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	NRF24_Disable();
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c2a:	4807      	ldr	r0, [pc, #28]	@ (8000c48 <NRF24_init+0x28>)
 8000c2c:	f001 f9ea 	bl	8002004 <HAL_GPIO_WritePin>
	NRF24_unselect();
 8000c30:	2201      	movs	r2, #1
 8000c32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c36:	4804      	ldr	r0, [pc, #16]	@ (8000c48 <NRF24_init+0x28>)
 8000c38:	f001 f9e4 	bl	8002004 <HAL_GPIO_WritePin>
	NRF24_DefaultConfiguration();
 8000c3c:	f7ff ff5a 	bl	8000af4 <NRF24_DefaultConfiguration>
	NRF24_PowerUp();
 8000c40:	f7ff fdd6 	bl	80007f0 <NRF24_PowerUp>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40020400 	.word	0x40020400

08000c4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <MX_DMA_Init+0x4c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c98 <MX_DMA_Init+0x4c>)
 8000c5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <MX_DMA_Init+0x4c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2105      	movs	r1, #5
 8000c72:	2038      	movs	r0, #56	@ 0x38
 8000c74:	f000 fca8 	bl	80015c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c78:	2038      	movs	r0, #56	@ 0x38
 8000c7a:	f000 fcc1 	bl	8001600 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2105      	movs	r1, #5
 8000c82:	203a      	movs	r0, #58	@ 0x3a
 8000c84:	f000 fca0 	bl	80015c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000c88:	203a      	movs	r0, #58	@ 0x3a
 8000c8a:	f000 fcb9 	bl	8001600 <HAL_NVIC_EnableIRQ>

}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4a07      	ldr	r2, [pc, #28]	@ (8000cc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000cac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ccc <vApplicationGetIdleTaskMemory+0x30>)
 8000cb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2280      	movs	r2, #128	@ 0x80
 8000cb8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	200000d4 	.word	0x200000d4
 8000ccc:	20000128 	.word	0x20000128

08000cd0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b09c      	sub	sp, #112	@ 0x70
 8000cd4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task10ms */
  osThreadDef(Task10ms, Task_10ms, osPriorityNormal, 0, 128);
 8000cd6:	4b27      	ldr	r3, [pc, #156]	@ (8000d74 <MX_FREERTOS_Init+0xa4>)
 8000cd8:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000cdc:	461d      	mov	r5, r3
 8000cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task10msHandle = osThreadCreate(osThread(Task10ms), NULL);
 8000cea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f002 fea6 	bl	8003a42 <osThreadCreate>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8000d78 <MX_FREERTOS_Init+0xa8>)
 8000cfa:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task100ms */
  osThreadDef(Task100ms, Task_100ms, osPriorityNormal, 0, 128);
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <MX_FREERTOS_Init+0xac>)
 8000cfe:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000d02:	461d      	mov	r5, r3
 8000d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task100msHandle = osThreadCreate(osThread(Task100ms), NULL);
 8000d10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f002 fe93 	bl	8003a42 <osThreadCreate>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4a18      	ldr	r2, [pc, #96]	@ (8000d80 <MX_FREERTOS_Init+0xb0>)
 8000d20:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1000ms */
  osThreadDef(Task1000ms, Task_1000ms, osPriorityIdle, 0, 128);
 8000d22:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <MX_FREERTOS_Init+0xb4>)
 8000d24:	f107 041c 	add.w	r4, r7, #28
 8000d28:	461d      	mov	r5, r3
 8000d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1000msHandle = osThreadCreate(osThread(Task1000ms), NULL);
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f002 fe80 	bl	8003a42 <osThreadCreate>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a10      	ldr	r2, [pc, #64]	@ (8000d88 <MX_FREERTOS_Init+0xb8>)
 8000d46:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1ms */
  osThreadDef(Task1ms, Task_1ms, osPriorityAboveNormal, 0, 128);
 8000d48:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <MX_FREERTOS_Init+0xbc>)
 8000d4a:	463c      	mov	r4, r7
 8000d4c:	461d      	mov	r5, r3
 8000d4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1msHandle = osThreadCreate(osThread(Task1ms), NULL);
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 fe6f 	bl	8003a42 <osThreadCreate>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <MX_FREERTOS_Init+0xc0>)
 8000d68:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000d6a:	bf00      	nop
 8000d6c:	3770      	adds	r7, #112	@ 0x70
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bdb0      	pop	{r4, r5, r7, pc}
 8000d72:	bf00      	nop
 8000d74:	08004f40 	.word	0x08004f40
 8000d78:	200000c4 	.word	0x200000c4
 8000d7c:	08004f68 	.word	0x08004f68
 8000d80:	200000c8 	.word	0x200000c8
 8000d84:	08004f90 	.word	0x08004f90
 8000d88:	200000cc 	.word	0x200000cc
 8000d8c:	08004fb4 	.word	0x08004fb4
 8000d90:	200000d0 	.word	0x200000d0

08000d94 <Task_10ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_10ms */
void Task_10ms(void const * argument)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_10ms */
	task_init_10ms();
 8000d9c:	f7ff fba6 	bl	80004ec <task_init_10ms>
  /* Infinite loop */
  for(;;)
  {
	task_10ms();
 8000da0:	f7ff fbab 	bl	80004fa <task_10ms>
    osDelay(10);
 8000da4:	200a      	movs	r0, #10
 8000da6:	f002 fe98 	bl	8003ada <osDelay>
	task_10ms();
 8000daa:	bf00      	nop
 8000dac:	e7f8      	b.n	8000da0 <Task_10ms+0xc>

08000dae <Task_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_100ms */
void Task_100ms(void const * argument)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_100ms */
	task_init_100ms();
 8000db6:	f7ff fba7 	bl	8000508 <task_init_100ms>
  /* Infinite loop */
  for(;;)
  {
	task_100ms();
 8000dba:	f7ff fbac 	bl	8000516 <task_100ms>
    osDelay(100);
 8000dbe:	2064      	movs	r0, #100	@ 0x64
 8000dc0:	f002 fe8b 	bl	8003ada <osDelay>
	task_100ms();
 8000dc4:	bf00      	nop
 8000dc6:	e7f8      	b.n	8000dba <Task_100ms+0xc>

08000dc8 <Task_1000ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1000ms */
void Task_1000ms(void const * argument)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1000ms */
	task_init_1000ms();
 8000dd0:	f7ff fba8 	bl	8000524 <task_init_1000ms>
  /* Infinite loop */
  for(;;)
  {
	task_1000ms();
 8000dd4:	f7ff fbad 	bl	8000532 <task_1000ms>
    osDelay(1000);
 8000dd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ddc:	f002 fe7d 	bl	8003ada <osDelay>
	task_1000ms();
 8000de0:	bf00      	nop
 8000de2:	e7f7      	b.n	8000dd4 <Task_1000ms+0xc>

08000de4 <Task_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1ms */
void Task_1ms(void const * argument)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1ms */
	task_init_1ms();
 8000dec:	f7ff fb70 	bl	80004d0 <task_init_1ms>
  /* Infinite loop */
  for(;;)
  {
	task_1ms();
 8000df0:	f7ff fb75 	bl	80004de <task_1ms>
    osDelay(1);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f002 fe70 	bl	8003ada <osDelay>
	task_1ms();
 8000dfa:	bf00      	nop
 8000dfc:	e7f8      	b.n	8000df0 <Task_1ms+0xc>
	...

08000e00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	@ 0x28
 8000e04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b27      	ldr	r3, [pc, #156]	@ (8000eb8 <MX_GPIO_Init+0xb8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a26      	ldr	r2, [pc, #152]	@ (8000eb8 <MX_GPIO_Init+0xb8>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b24      	ldr	r3, [pc, #144]	@ (8000eb8 <MX_GPIO_Init+0xb8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <MX_GPIO_Init+0xb8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000eb8 <MX_GPIO_Init+0xb8>)
 8000e3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_GPIO_Init+0xb8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <MX_GPIO_Init+0xb8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a18      	ldr	r2, [pc, #96]	@ (8000eb8 <MX_GPIO_Init+0xb8>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <MX_GPIO_Init+0xb8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_GPIO_Init+0xb8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a11      	ldr	r2, [pc, #68]	@ (8000eb8 <MX_GPIO_Init+0xb8>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_GPIO_Init+0xb8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000e8c:	480b      	ldr	r0, [pc, #44]	@ (8000ebc <MX_GPIO_Init+0xbc>)
 8000e8e:	f001 f8b9 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 8000e92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4804      	ldr	r0, [pc, #16]	@ (8000ebc <MX_GPIO_Init+0xbc>)
 8000eac:	f000 ff26 	bl	8001cfc <HAL_GPIO_Init>

}
 8000eb0:	bf00      	nop
 8000eb2:	3728      	adds	r7, #40	@ 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020400 	.word	0x40020400

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec4:	f000 fa86 	bl	80013d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec8:	f000 f80e 	bl	8000ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ecc:	f7ff ff98 	bl	8000e00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ed0:	f7ff febc 	bl	8000c4c <MX_DMA_Init>
  MX_SPI1_Init();
 8000ed4:	f000 f888 	bl	8000fe8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_init();
 8000ed8:	f7ff fea2 	bl	8000c20 <NRF24_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000edc:	f7ff fef8 	bl	8000cd0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ee0:	f002 fda8 	bl	8003a34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <main+0x24>

08000ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b094      	sub	sp, #80	@ 0x50
 8000eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eee:	f107 0320 	add.w	r3, r7, #32
 8000ef2:	2230      	movs	r2, #48	@ 0x30
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f003 ffe4 	bl	8004ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	4b27      	ldr	r3, [pc, #156]	@ (8000fb0 <SystemClock_Config+0xc8>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f14:	4a26      	ldr	r2, [pc, #152]	@ (8000fb0 <SystemClock_Config+0xc8>)
 8000f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1c:	4b24      	ldr	r3, [pc, #144]	@ (8000fb0 <SystemClock_Config+0xc8>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f28:	2300      	movs	r3, #0
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	4b21      	ldr	r3, [pc, #132]	@ (8000fb4 <SystemClock_Config+0xcc>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a20      	ldr	r2, [pc, #128]	@ (8000fb4 <SystemClock_Config+0xcc>)
 8000f32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <SystemClock_Config+0xcc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f44:	2302      	movs	r3, #2
 8000f46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f50:	2302      	movs	r3, #2
 8000f52:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f54:	2300      	movs	r3, #0
 8000f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000f5c:	2364      	movs	r3, #100	@ 0x64
 8000f5e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f60:	2302      	movs	r3, #2
 8000f62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f64:	2304      	movs	r3, #4
 8000f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f68:	f107 0320 	add.w	r3, r7, #32
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 f863 	bl	8002038 <HAL_RCC_OscConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f78:	f000 f830 	bl	8000fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f80:	2302      	movs	r3, #2
 8000f82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	2103      	movs	r1, #3
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 fac5 	bl	8002528 <HAL_RCC_ClockConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fa4:	f000 f81a 	bl	8000fdc <Error_Handler>
  }
}
 8000fa8:	bf00      	nop
 8000faa:	3750      	adds	r7, #80	@ 0x50
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40007000 	.word	0x40007000

08000fb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d101      	bne.n	8000fce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fca:	f000 fa25 	bl	8001418 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40014800 	.word	0x40014800

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
}
 8000fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <Error_Handler+0x8>

08000fe8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fec:	4b17      	ldr	r3, [pc, #92]	@ (800104c <MX_SPI1_Init+0x64>)
 8000fee:	4a18      	ldr	r2, [pc, #96]	@ (8001050 <MX_SPI1_Init+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ff2:	4b16      	ldr	r3, [pc, #88]	@ (800104c <MX_SPI1_Init+0x64>)
 8000ff4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ff8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	@ (800104c <MX_SPI1_Init+0x64>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <MX_SPI1_Init+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001006:	4b11      	ldr	r3, [pc, #68]	@ (800104c <MX_SPI1_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <MX_SPI1_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001012:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <MX_SPI1_Init+0x64>)
 8001014:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001018:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <MX_SPI1_Init+0x64>)
 800101c:	2218      	movs	r2, #24
 800101e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001020:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <MX_SPI1_Init+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <MX_SPI1_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800102c:	4b07      	ldr	r3, [pc, #28]	@ (800104c <MX_SPI1_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <MX_SPI1_Init+0x64>)
 8001034:	220a      	movs	r2, #10
 8001036:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001038:	4804      	ldr	r0, [pc, #16]	@ (800104c <MX_SPI1_Init+0x64>)
 800103a:	f001 fcb3 	bl	80029a4 <HAL_SPI_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001044:	f7ff ffca 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000328 	.word	0x20000328
 8001050:	40013000 	.word	0x40013000

08001054 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	@ 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a47      	ldr	r2, [pc, #284]	@ (8001190 <HAL_SPI_MspInit+0x13c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	f040 8088 	bne.w	8001188 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	4b45      	ldr	r3, [pc, #276]	@ (8001194 <HAL_SPI_MspInit+0x140>)
 800107e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001080:	4a44      	ldr	r2, [pc, #272]	@ (8001194 <HAL_SPI_MspInit+0x140>)
 8001082:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001086:	6453      	str	r3, [r2, #68]	@ 0x44
 8001088:	4b42      	ldr	r3, [pc, #264]	@ (8001194 <HAL_SPI_MspInit+0x140>)
 800108a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	4b3e      	ldr	r3, [pc, #248]	@ (8001194 <HAL_SPI_MspInit+0x140>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109c:	4a3d      	ldr	r2, [pc, #244]	@ (8001194 <HAL_SPI_MspInit+0x140>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001194 <HAL_SPI_MspInit+0x140>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010b0:	23e0      	movs	r3, #224	@ 0xe0
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010c0:	2305      	movs	r3, #5
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	4833      	ldr	r0, [pc, #204]	@ (8001198 <HAL_SPI_MspInit+0x144>)
 80010cc:	f000 fe16 	bl	8001cfc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80010d0:	4b32      	ldr	r3, [pc, #200]	@ (800119c <HAL_SPI_MspInit+0x148>)
 80010d2:	4a33      	ldr	r2, [pc, #204]	@ (80011a0 <HAL_SPI_MspInit+0x14c>)
 80010d4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80010d6:	4b31      	ldr	r3, [pc, #196]	@ (800119c <HAL_SPI_MspInit+0x148>)
 80010d8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80010dc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010de:	4b2f      	ldr	r3, [pc, #188]	@ (800119c <HAL_SPI_MspInit+0x148>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e4:	4b2d      	ldr	r3, [pc, #180]	@ (800119c <HAL_SPI_MspInit+0x148>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010ea:	4b2c      	ldr	r3, [pc, #176]	@ (800119c <HAL_SPI_MspInit+0x148>)
 80010ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f2:	4b2a      	ldr	r3, [pc, #168]	@ (800119c <HAL_SPI_MspInit+0x148>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010f8:	4b28      	ldr	r3, [pc, #160]	@ (800119c <HAL_SPI_MspInit+0x148>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80010fe:	4b27      	ldr	r3, [pc, #156]	@ (800119c <HAL_SPI_MspInit+0x148>)
 8001100:	2200      	movs	r2, #0
 8001102:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001104:	4b25      	ldr	r3, [pc, #148]	@ (800119c <HAL_SPI_MspInit+0x148>)
 8001106:	2200      	movs	r2, #0
 8001108:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800110a:	4b24      	ldr	r3, [pc, #144]	@ (800119c <HAL_SPI_MspInit+0x148>)
 800110c:	2200      	movs	r2, #0
 800110e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001110:	4822      	ldr	r0, [pc, #136]	@ (800119c <HAL_SPI_MspInit+0x148>)
 8001112:	f000 fa83 	bl	800161c <HAL_DMA_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 800111c:	f7ff ff5e 	bl	8000fdc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a1e      	ldr	r2, [pc, #120]	@ (800119c <HAL_SPI_MspInit+0x148>)
 8001124:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001126:	4a1d      	ldr	r2, [pc, #116]	@ (800119c <HAL_SPI_MspInit+0x148>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 800112c:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <HAL_SPI_MspInit+0x150>)
 800112e:	4a1e      	ldr	r2, [pc, #120]	@ (80011a8 <HAL_SPI_MspInit+0x154>)
 8001130:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8001132:	4b1c      	ldr	r3, [pc, #112]	@ (80011a4 <HAL_SPI_MspInit+0x150>)
 8001134:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001138:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800113a:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <HAL_SPI_MspInit+0x150>)
 800113c:	2240      	movs	r2, #64	@ 0x40
 800113e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001140:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <HAL_SPI_MspInit+0x150>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001146:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <HAL_SPI_MspInit+0x150>)
 8001148:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800114c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <HAL_SPI_MspInit+0x150>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001154:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <HAL_SPI_MspInit+0x150>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800115a:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <HAL_SPI_MspInit+0x150>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001160:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <HAL_SPI_MspInit+0x150>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <HAL_SPI_MspInit+0x150>)
 8001168:	2200      	movs	r2, #0
 800116a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800116c:	480d      	ldr	r0, [pc, #52]	@ (80011a4 <HAL_SPI_MspInit+0x150>)
 800116e:	f000 fa55 	bl	800161c <HAL_DMA_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001178:	f7ff ff30 	bl	8000fdc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a09      	ldr	r2, [pc, #36]	@ (80011a4 <HAL_SPI_MspInit+0x150>)
 8001180:	649a      	str	r2, [r3, #72]	@ 0x48
 8001182:	4a08      	ldr	r2, [pc, #32]	@ (80011a4 <HAL_SPI_MspInit+0x150>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	@ 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40013000 	.word	0x40013000
 8001194:	40023800 	.word	0x40023800
 8001198:	40020000 	.word	0x40020000
 800119c:	20000380 	.word	0x20000380
 80011a0:	40026410 	.word	0x40026410
 80011a4:	200003e0 	.word	0x200003e0
 80011a8:	40026440 	.word	0x40026440

080011ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <HAL_MspInit+0x54>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ba:	4a11      	ldr	r2, [pc, #68]	@ (8001200 <HAL_MspInit+0x54>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <HAL_MspInit+0x54>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <HAL_MspInit+0x54>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <HAL_MspInit+0x54>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011de:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <HAL_MspInit+0x54>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	210f      	movs	r1, #15
 80011ee:	f06f 0001 	mvn.w	r0, #1
 80011f2:	f000 f9e9 	bl	80015c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800

08001204 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	@ 0x30
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800120c:	2300      	movs	r3, #0
 800120e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	4b2e      	ldr	r3, [pc, #184]	@ (80012d4 <HAL_InitTick+0xd0>)
 800121a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121c:	4a2d      	ldr	r2, [pc, #180]	@ (80012d4 <HAL_InitTick+0xd0>)
 800121e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001222:	6453      	str	r3, [r2, #68]	@ 0x44
 8001224:	4b2b      	ldr	r3, [pc, #172]	@ (80012d4 <HAL_InitTick+0xd0>)
 8001226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001228:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001230:	f107 020c 	add.w	r2, r7, #12
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f001 fb80 	bl	8002940 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001240:	f001 fb6a 	bl	8002918 <HAL_RCC_GetPCLK2Freq>
 8001244:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001248:	4a23      	ldr	r2, [pc, #140]	@ (80012d8 <HAL_InitTick+0xd4>)
 800124a:	fba2 2303 	umull	r2, r3, r2, r3
 800124e:	0c9b      	lsrs	r3, r3, #18
 8001250:	3b01      	subs	r3, #1
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001254:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <HAL_InitTick+0xd8>)
 8001256:	4a22      	ldr	r2, [pc, #136]	@ (80012e0 <HAL_InitTick+0xdc>)
 8001258:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800125a:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <HAL_InitTick+0xd8>)
 800125c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001260:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001262:	4a1e      	ldr	r2, [pc, #120]	@ (80012dc <HAL_InitTick+0xd8>)
 8001264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001266:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001268:	4b1c      	ldr	r3, [pc, #112]	@ (80012dc <HAL_InitTick+0xd8>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <HAL_InitTick+0xd8>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b19      	ldr	r3, [pc, #100]	@ (80012dc <HAL_InitTick+0xd8>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800127a:	4818      	ldr	r0, [pc, #96]	@ (80012dc <HAL_InitTick+0xd8>)
 800127c:	f002 f94e 	bl	800351c <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001286:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800128a:	2b00      	cmp	r3, #0
 800128c:	d11b      	bne.n	80012c6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 800128e:	4813      	ldr	r0, [pc, #76]	@ (80012dc <HAL_InitTick+0xd8>)
 8001290:	f002 f99e 	bl	80035d0 <HAL_TIM_Base_Start_IT>
 8001294:	4603      	mov	r3, r0
 8001296:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800129a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d111      	bne.n	80012c6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80012a2:	201a      	movs	r0, #26
 80012a4:	f000 f9ac 	bl	8001600 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b0f      	cmp	r3, #15
 80012ac:	d808      	bhi.n	80012c0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80012ae:	2200      	movs	r2, #0
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	201a      	movs	r0, #26
 80012b4:	f000 f988 	bl	80015c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012b8:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <HAL_InitTick+0xe0>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e002      	b.n	80012c6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3730      	adds	r7, #48	@ 0x30
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	431bde83 	.word	0x431bde83
 80012dc:	20000440 	.word	0x20000440
 80012e0:	40014800 	.word	0x40014800
 80012e4:	20000004 	.word	0x20000004

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <NMI_Handler+0x4>

080012f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <MemManage_Handler+0x4>

08001300 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <UsageFault_Handler+0x4>

08001310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001324:	4802      	ldr	r0, [pc, #8]	@ (8001330 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001326:	f002 f9b5 	bl	8003694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000440 	.word	0x20000440

08001334 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001338:	4802      	ldr	r0, [pc, #8]	@ (8001344 <DMA2_Stream0_IRQHandler+0x10>)
 800133a:	f000 fa75 	bl	8001828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000380 	.word	0x20000380

08001348 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800134c:	4802      	ldr	r0, [pc, #8]	@ (8001358 <DMA2_Stream2_IRQHandler+0x10>)
 800134e:	f000 fa6b 	bl	8001828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200003e0 	.word	0x200003e0

0800135c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001360:	4b06      	ldr	r3, [pc, #24]	@ (800137c <SystemInit+0x20>)
 8001362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001366:	4a05      	ldr	r2, [pc, #20]	@ (800137c <SystemInit+0x20>)
 8001368:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800136c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001380:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001384:	f7ff ffea 	bl	800135c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001388:	480c      	ldr	r0, [pc, #48]	@ (80013bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800138a:	490d      	ldr	r1, [pc, #52]	@ (80013c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800138c:	4a0d      	ldr	r2, [pc, #52]	@ (80013c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001390:	e002      	b.n	8001398 <LoopCopyDataInit>

08001392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001396:	3304      	adds	r3, #4

08001398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800139c:	d3f9      	bcc.n	8001392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139e:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013a0:	4c0a      	ldr	r4, [pc, #40]	@ (80013cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a4:	e001      	b.n	80013aa <LoopFillZerobss>

080013a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a8:	3204      	adds	r2, #4

080013aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ac:	d3fb      	bcc.n	80013a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ae:	f003 fd91 	bl	8004ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b2:	f7ff fd85 	bl	8000ec0 <main>
  bx  lr    
 80013b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80013c4:	08005008 	.word	0x08005008
  ldr r2, =_sbss
 80013c8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80013cc:	200041e0 	.word	0x200041e0

080013d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC_IRQHandler>
	...

080013d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <HAL_Init+0x40>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001414 <HAL_Init+0x40>)
 80013de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <HAL_Init+0x40>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <HAL_Init+0x40>)
 80013ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <HAL_Init+0x40>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a07      	ldr	r2, [pc, #28]	@ (8001414 <HAL_Init+0x40>)
 80013f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 f8d8 	bl	80015b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001402:	200f      	movs	r0, #15
 8001404:	f7ff fefe 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001408:	f7ff fed0 	bl	80011ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023c00 	.word	0x40023c00

08001418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_IncTick+0x20>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <HAL_IncTick+0x24>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4a04      	ldr	r2, [pc, #16]	@ (800143c <HAL_IncTick+0x24>)
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000008 	.word	0x20000008
 800143c:	20000488 	.word	0x20000488

08001440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b03      	ldr	r3, [pc, #12]	@ (8001454 <HAL_GetTick+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000488 	.word	0x20000488

08001458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001474:	4013      	ands	r3, r2
 8001476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001480:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148a:	4a04      	ldr	r2, [pc, #16]	@ (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	60d3      	str	r3, [r2, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a4:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <__NVIC_GetPriorityGrouping+0x18>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	f003 0307 	and.w	r3, r3, #7
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	db0b      	blt.n	80014e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	f003 021f 	and.w	r2, r3, #31
 80014d4:	4907      	ldr	r1, [pc, #28]	@ (80014f4 <__NVIC_EnableIRQ+0x38>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	2001      	movs	r0, #1
 80014de:	fa00 f202 	lsl.w	r2, r0, r2
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000e100 	.word	0xe000e100

080014f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	2b00      	cmp	r3, #0
 800150a:	db0a      	blt.n	8001522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	490c      	ldr	r1, [pc, #48]	@ (8001544 <__NVIC_SetPriority+0x4c>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	0112      	lsls	r2, r2, #4
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	440b      	add	r3, r1
 800151c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001520:	e00a      	b.n	8001538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4908      	ldr	r1, [pc, #32]	@ (8001548 <__NVIC_SetPriority+0x50>)
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	3b04      	subs	r3, #4
 8001530:	0112      	lsls	r2, r2, #4
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	440b      	add	r3, r1
 8001536:	761a      	strb	r2, [r3, #24]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000e100 	.word	0xe000e100
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	@ 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f1c3 0307 	rsb	r3, r3, #7
 8001566:	2b04      	cmp	r3, #4
 8001568:	bf28      	it	cs
 800156a:	2304      	movcs	r3, #4
 800156c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3304      	adds	r3, #4
 8001572:	2b06      	cmp	r3, #6
 8001574:	d902      	bls.n	800157c <NVIC_EncodePriority+0x30>
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3b03      	subs	r3, #3
 800157a:	e000      	b.n	800157e <NVIC_EncodePriority+0x32>
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	f04f 32ff 	mov.w	r2, #4294967295
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	401a      	ands	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001594:	f04f 31ff 	mov.w	r1, #4294967295
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	43d9      	mvns	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	4313      	orrs	r3, r2
         );
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3724      	adds	r7, #36	@ 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ff4c 	bl	8001458 <__NVIC_SetPriorityGrouping>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015da:	f7ff ff61 	bl	80014a0 <__NVIC_GetPriorityGrouping>
 80015de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	68b9      	ldr	r1, [r7, #8]
 80015e4:	6978      	ldr	r0, [r7, #20]
 80015e6:	f7ff ffb1 	bl	800154c <NVIC_EncodePriority>
 80015ea:	4602      	mov	r2, r0
 80015ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff80 	bl	80014f8 <__NVIC_SetPriority>
}
 80015f8:	bf00      	nop
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ff54 	bl	80014bc <__NVIC_EnableIRQ>
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff ff0a 	bl	8001440 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e099      	b.n	800176c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2202      	movs	r2, #2
 800163c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0201 	bic.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001658:	e00f      	b.n	800167a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800165a:	f7ff fef1 	bl	8001440 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b05      	cmp	r3, #5
 8001666:	d908      	bls.n	800167a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2220      	movs	r2, #32
 800166c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2203      	movs	r2, #3
 8001672:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e078      	b.n	800176c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1e8      	bne.n	800165a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	4b38      	ldr	r3, [pc, #224]	@ (8001774 <HAL_DMA_Init+0x158>)
 8001694:	4013      	ands	r3, r2
 8001696:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d107      	bne.n	80016e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016dc:	4313      	orrs	r3, r2
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f023 0307 	bic.w	r3, r3, #7
 80016fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	4313      	orrs	r3, r2
 8001704:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170a:	2b04      	cmp	r3, #4
 800170c:	d117      	bne.n	800173e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	4313      	orrs	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00e      	beq.n	800173e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 fa6f 	bl	8001c04 <DMA_CheckFifoParam>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2240      	movs	r2, #64	@ 0x40
 8001730:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800173a:	2301      	movs	r3, #1
 800173c:	e016      	b.n	800176c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fa26 	bl	8001b98 <DMA_CalcBaseAndBitshift>
 800174c:	4603      	mov	r3, r0
 800174e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001754:	223f      	movs	r2, #63	@ 0x3f
 8001756:	409a      	lsls	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	f010803f 	.word	0xf010803f

08001778 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_DMA_Start_IT+0x26>
 800179a:	2302      	movs	r3, #2
 800179c:	e040      	b.n	8001820 <HAL_DMA_Start_IT+0xa8>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d12f      	bne.n	8001812 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2202      	movs	r2, #2
 80017b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f9b8 	bl	8001b3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d0:	223f      	movs	r2, #63	@ 0x3f
 80017d2:	409a      	lsls	r2, r3
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0216 	orr.w	r2, r2, #22
 80017e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d007      	beq.n	8001800 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0208 	orr.w	r2, r2, #8
 80017fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	e005      	b.n	800181e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800181a:	2302      	movs	r3, #2
 800181c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800181e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001834:	4b8e      	ldr	r3, [pc, #568]	@ (8001a70 <HAL_DMA_IRQHandler+0x248>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a8e      	ldr	r2, [pc, #568]	@ (8001a74 <HAL_DMA_IRQHandler+0x24c>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	0a9b      	lsrs	r3, r3, #10
 8001840:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001846:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001852:	2208      	movs	r2, #8
 8001854:	409a      	lsls	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d01a      	beq.n	8001894 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d013      	beq.n	8001894 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0204 	bic.w	r2, r2, #4
 800187a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001880:	2208      	movs	r2, #8
 8001882:	409a      	lsls	r2, r3
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800188c:	f043 0201 	orr.w	r2, r3, #1
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001898:	2201      	movs	r2, #1
 800189a:	409a      	lsls	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d012      	beq.n	80018ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00b      	beq.n	80018ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b6:	2201      	movs	r2, #1
 80018b8:	409a      	lsls	r2, r3
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c2:	f043 0202 	orr.w	r2, r3, #2
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ce:	2204      	movs	r2, #4
 80018d0:	409a      	lsls	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d012      	beq.n	8001900 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00b      	beq.n	8001900 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ec:	2204      	movs	r2, #4
 80018ee:	409a      	lsls	r2, r3
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f8:	f043 0204 	orr.w	r2, r3, #4
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001904:	2210      	movs	r2, #16
 8001906:	409a      	lsls	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d043      	beq.n	8001998 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d03c      	beq.n	8001998 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001922:	2210      	movs	r2, #16
 8001924:	409a      	lsls	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d018      	beq.n	800196a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d108      	bne.n	8001958 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	2b00      	cmp	r3, #0
 800194c:	d024      	beq.n	8001998 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	4798      	blx	r3
 8001956:	e01f      	b.n	8001998 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800195c:	2b00      	cmp	r3, #0
 800195e:	d01b      	beq.n	8001998 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	4798      	blx	r3
 8001968:	e016      	b.n	8001998 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d107      	bne.n	8001988 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0208 	bic.w	r2, r2, #8
 8001986:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800199c:	2220      	movs	r2, #32
 800199e:	409a      	lsls	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 808f 	beq.w	8001ac8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 8087 	beq.w	8001ac8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019be:	2220      	movs	r2, #32
 80019c0:	409a      	lsls	r2, r3
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b05      	cmp	r3, #5
 80019d0:	d136      	bne.n	8001a40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0216 	bic.w	r2, r2, #22
 80019e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	695a      	ldr	r2, [r3, #20]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d103      	bne.n	8001a02 <HAL_DMA_IRQHandler+0x1da>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d007      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0208 	bic.w	r2, r2, #8
 8001a10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a16:	223f      	movs	r2, #63	@ 0x3f
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d07e      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	4798      	blx	r3
        }
        return;
 8001a3e:	e079      	b.n	8001b34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d01d      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10d      	bne.n	8001a78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d031      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	4798      	blx	r3
 8001a6c:	e02c      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x2a0>
 8001a6e:	bf00      	nop
 8001a70:	20000000 	.word	0x20000000
 8001a74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d023      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	4798      	blx	r3
 8001a88:	e01e      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10f      	bne.n	8001ab8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0210 	bic.w	r2, r2, #16
 8001aa6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d032      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d022      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2205      	movs	r2, #5
 8001ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0201 	bic.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	3301      	adds	r3, #1
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d307      	bcc.n	8001b10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f2      	bne.n	8001af4 <HAL_DMA_IRQHandler+0x2cc>
 8001b0e:	e000      	b.n	8001b12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	4798      	blx	r3
 8001b32:	e000      	b.n	8001b36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b34:	bf00      	nop
    }
  }
}
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001b58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b40      	cmp	r3, #64	@ 0x40
 8001b68:	d108      	bne.n	8001b7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b7a:	e007      	b.n	8001b8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	3b10      	subs	r3, #16
 8001ba8:	4a14      	ldr	r2, [pc, #80]	@ (8001bfc <DMA_CalcBaseAndBitshift+0x64>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bb2:	4a13      	ldr	r2, [pc, #76]	@ (8001c00 <DMA_CalcBaseAndBitshift+0x68>)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d909      	bls.n	8001bda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001bce:	f023 0303 	bic.w	r3, r3, #3
 8001bd2:	1d1a      	adds	r2, r3, #4
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bd8:	e007      	b.n	8001bea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001be2:	f023 0303 	bic.w	r3, r3, #3
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	aaaaaaab 	.word	0xaaaaaaab
 8001c00:	08004ff0 	.word	0x08004ff0

08001c04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d11f      	bne.n	8001c5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d856      	bhi.n	8001cd2 <DMA_CheckFifoParam+0xce>
 8001c24:	a201      	add	r2, pc, #4	@ (adr r2, 8001c2c <DMA_CheckFifoParam+0x28>)
 8001c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2a:	bf00      	nop
 8001c2c:	08001c3d 	.word	0x08001c3d
 8001c30:	08001c4f 	.word	0x08001c4f
 8001c34:	08001c3d 	.word	0x08001c3d
 8001c38:	08001cd3 	.word	0x08001cd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d046      	beq.n	8001cd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c4c:	e043      	b.n	8001cd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c56:	d140      	bne.n	8001cda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c5c:	e03d      	b.n	8001cda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c66:	d121      	bne.n	8001cac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d837      	bhi.n	8001cde <DMA_CheckFifoParam+0xda>
 8001c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c74 <DMA_CheckFifoParam+0x70>)
 8001c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c74:	08001c85 	.word	0x08001c85
 8001c78:	08001c8b 	.word	0x08001c8b
 8001c7c:	08001c85 	.word	0x08001c85
 8001c80:	08001c9d 	.word	0x08001c9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
      break;
 8001c88:	e030      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d025      	beq.n	8001ce2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c9a:	e022      	b.n	8001ce2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ca4:	d11f      	bne.n	8001ce6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001caa:	e01c      	b.n	8001ce6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d903      	bls.n	8001cba <DMA_CheckFifoParam+0xb6>
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d003      	beq.n	8001cc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cb8:	e018      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8001cbe:	e015      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00e      	beq.n	8001cea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
      break;
 8001cd0:	e00b      	b.n	8001cea <DMA_CheckFifoParam+0xe6>
      break;
 8001cd2:	bf00      	nop
 8001cd4:	e00a      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      break;
 8001cd6:	bf00      	nop
 8001cd8:	e008      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      break;
 8001cda:	bf00      	nop
 8001cdc:	e006      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      break;
 8001cde:	bf00      	nop
 8001ce0:	e004      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      break;
 8001ce2:	bf00      	nop
 8001ce4:	e002      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      break;   
 8001ce6:	bf00      	nop
 8001ce8:	e000      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      break;
 8001cea:	bf00      	nop
    }
  } 
  
  return status; 
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	@ 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e159      	b.n	8001fcc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d18:	2201      	movs	r2, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	f040 8148 	bne.w	8001fc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d005      	beq.n	8001d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d130      	bne.n	8001db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d84:	2201      	movs	r2, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 0201 	and.w	r2, r3, #1
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d017      	beq.n	8001dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d123      	bne.n	8001e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	08da      	lsrs	r2, r3, #3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3208      	adds	r2, #8
 8001e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	08da      	lsrs	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3208      	adds	r2, #8
 8001e3a:	69b9      	ldr	r1, [r7, #24]
 8001e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0203 	and.w	r2, r3, #3
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80a2 	beq.w	8001fc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b57      	ldr	r3, [pc, #348]	@ (8001fe4 <HAL_GPIO_Init+0x2e8>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8a:	4a56      	ldr	r2, [pc, #344]	@ (8001fe4 <HAL_GPIO_Init+0x2e8>)
 8001e8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e92:	4b54      	ldr	r3, [pc, #336]	@ (8001fe4 <HAL_GPIO_Init+0x2e8>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e9e:	4a52      	ldr	r2, [pc, #328]	@ (8001fe8 <HAL_GPIO_Init+0x2ec>)
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a49      	ldr	r2, [pc, #292]	@ (8001fec <HAL_GPIO_Init+0x2f0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d019      	beq.n	8001efe <HAL_GPIO_Init+0x202>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a48      	ldr	r2, [pc, #288]	@ (8001ff0 <HAL_GPIO_Init+0x2f4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <HAL_GPIO_Init+0x1fe>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a47      	ldr	r2, [pc, #284]	@ (8001ff4 <HAL_GPIO_Init+0x2f8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00d      	beq.n	8001ef6 <HAL_GPIO_Init+0x1fa>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a46      	ldr	r2, [pc, #280]	@ (8001ff8 <HAL_GPIO_Init+0x2fc>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d007      	beq.n	8001ef2 <HAL_GPIO_Init+0x1f6>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a45      	ldr	r2, [pc, #276]	@ (8001ffc <HAL_GPIO_Init+0x300>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d101      	bne.n	8001eee <HAL_GPIO_Init+0x1f2>
 8001eea:	2304      	movs	r3, #4
 8001eec:	e008      	b.n	8001f00 <HAL_GPIO_Init+0x204>
 8001eee:	2307      	movs	r3, #7
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x204>
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e004      	b.n	8001f00 <HAL_GPIO_Init+0x204>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e002      	b.n	8001f00 <HAL_GPIO_Init+0x204>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_GPIO_Init+0x204>
 8001efe:	2300      	movs	r3, #0
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	f002 0203 	and.w	r2, r2, #3
 8001f06:	0092      	lsls	r2, r2, #2
 8001f08:	4093      	lsls	r3, r2
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f10:	4935      	ldr	r1, [pc, #212]	@ (8001fe8 <HAL_GPIO_Init+0x2ec>)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	3302      	adds	r3, #2
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f1e:	4b38      	ldr	r3, [pc, #224]	@ (8002000 <HAL_GPIO_Init+0x304>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f42:	4a2f      	ldr	r2, [pc, #188]	@ (8002000 <HAL_GPIO_Init+0x304>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f48:	4b2d      	ldr	r3, [pc, #180]	@ (8002000 <HAL_GPIO_Init+0x304>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f6c:	4a24      	ldr	r2, [pc, #144]	@ (8002000 <HAL_GPIO_Init+0x304>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f72:	4b23      	ldr	r3, [pc, #140]	@ (8002000 <HAL_GPIO_Init+0x304>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f96:	4a1a      	ldr	r2, [pc, #104]	@ (8002000 <HAL_GPIO_Init+0x304>)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f9c:	4b18      	ldr	r3, [pc, #96]	@ (8002000 <HAL_GPIO_Init+0x304>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc0:	4a0f      	ldr	r2, [pc, #60]	@ (8002000 <HAL_GPIO_Init+0x304>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2b0f      	cmp	r3, #15
 8001fd0:	f67f aea2 	bls.w	8001d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3724      	adds	r7, #36	@ 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40013800 	.word	0x40013800
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020c00 	.word	0x40020c00
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40013c00 	.word	0x40013c00

08002004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
 8002010:	4613      	mov	r3, r2
 8002012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002020:	e003      	b.n	800202a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002022:	887b      	ldrh	r3, [r7, #2]
 8002024:	041a      	lsls	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e267      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d075      	beq.n	8002142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002056:	4b88      	ldr	r3, [pc, #544]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	2b04      	cmp	r3, #4
 8002060:	d00c      	beq.n	800207c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002062:	4b85      	ldr	r3, [pc, #532]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800206a:	2b08      	cmp	r3, #8
 800206c:	d112      	bne.n	8002094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206e:	4b82      	ldr	r3, [pc, #520]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002076:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800207a:	d10b      	bne.n	8002094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	4b7e      	ldr	r3, [pc, #504]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d05b      	beq.n	8002140 <HAL_RCC_OscConfig+0x108>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d157      	bne.n	8002140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e242      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800209c:	d106      	bne.n	80020ac <HAL_RCC_OscConfig+0x74>
 800209e:	4b76      	ldr	r3, [pc, #472]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a75      	ldr	r2, [pc, #468]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 80020a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e01d      	b.n	80020e8 <HAL_RCC_OscConfig+0xb0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x98>
 80020b6:	4b70      	ldr	r3, [pc, #448]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6f      	ldr	r2, [pc, #444]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 80020bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a6c      	ldr	r2, [pc, #432]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_OscConfig+0xb0>
 80020d0:	4b69      	ldr	r3, [pc, #420]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a68      	ldr	r2, [pc, #416]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 80020d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	4b66      	ldr	r3, [pc, #408]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a65      	ldr	r2, [pc, #404]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 80020e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d013      	beq.n	8002118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff f9a6 	bl	8001440 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f8:	f7ff f9a2 	bl	8001440 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	@ 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e207      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	4b5b      	ldr	r3, [pc, #364]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0xc0>
 8002116:	e014      	b.n	8002142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff f992 	bl	8001440 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002120:	f7ff f98e 	bl	8001440 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	@ 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e1f3      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	4b51      	ldr	r3, [pc, #324]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0xe8>
 800213e:	e000      	b.n	8002142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d063      	beq.n	8002216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800214e:	4b4a      	ldr	r3, [pc, #296]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00b      	beq.n	8002172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800215a:	4b47      	ldr	r3, [pc, #284]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002162:	2b08      	cmp	r3, #8
 8002164:	d11c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002166:	4b44      	ldr	r3, [pc, #272]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d116      	bne.n	80021a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	4b41      	ldr	r3, [pc, #260]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_RCC_OscConfig+0x152>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d001      	beq.n	800218a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e1c7      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218a:	4b3b      	ldr	r3, [pc, #236]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4937      	ldr	r1, [pc, #220]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	e03a      	b.n	8002216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d020      	beq.n	80021ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a8:	4b34      	ldr	r3, [pc, #208]	@ (800227c <HAL_RCC_OscConfig+0x244>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ae:	f7ff f947 	bl	8001440 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b6:	f7ff f943 	bl	8001440 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e1a8      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d4:	4b28      	ldr	r3, [pc, #160]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4925      	ldr	r1, [pc, #148]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]
 80021e8:	e015      	b.n	8002216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ea:	4b24      	ldr	r3, [pc, #144]	@ (800227c <HAL_RCC_OscConfig+0x244>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7ff f926 	bl	8001440 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f8:	f7ff f922 	bl	8001440 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e187      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	4b1b      	ldr	r3, [pc, #108]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d036      	beq.n	8002290 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d016      	beq.n	8002258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222a:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <HAL_RCC_OscConfig+0x248>)
 800222c:	2201      	movs	r2, #1
 800222e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002230:	f7ff f906 	bl	8001440 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002238:	f7ff f902 	bl	8001440 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e167      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <HAL_RCC_OscConfig+0x240>)
 800224c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0x200>
 8002256:	e01b      	b.n	8002290 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002258:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <HAL_RCC_OscConfig+0x248>)
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225e:	f7ff f8ef 	bl	8001440 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002264:	e00e      	b.n	8002284 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002266:	f7ff f8eb 	bl	8001440 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d907      	bls.n	8002284 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e150      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
 8002278:	40023800 	.word	0x40023800
 800227c:	42470000 	.word	0x42470000
 8002280:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002284:	4b88      	ldr	r3, [pc, #544]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002286:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1ea      	bne.n	8002266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 8097 	beq.w	80023cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a2:	4b81      	ldr	r3, [pc, #516]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	4b7d      	ldr	r3, [pc, #500]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	4a7c      	ldr	r2, [pc, #496]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022be:	4b7a      	ldr	r3, [pc, #488]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ca:	2301      	movs	r3, #1
 80022cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ce:	4b77      	ldr	r3, [pc, #476]	@ (80024ac <HAL_RCC_OscConfig+0x474>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d118      	bne.n	800230c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022da:	4b74      	ldr	r3, [pc, #464]	@ (80024ac <HAL_RCC_OscConfig+0x474>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a73      	ldr	r2, [pc, #460]	@ (80024ac <HAL_RCC_OscConfig+0x474>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e6:	f7ff f8ab 	bl	8001440 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ee:	f7ff f8a7 	bl	8001440 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e10c      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	4b6a      	ldr	r3, [pc, #424]	@ (80024ac <HAL_RCC_OscConfig+0x474>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d106      	bne.n	8002322 <HAL_RCC_OscConfig+0x2ea>
 8002314:	4b64      	ldr	r3, [pc, #400]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002318:	4a63      	ldr	r2, [pc, #396]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002320:	e01c      	b.n	800235c <HAL_RCC_OscConfig+0x324>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b05      	cmp	r3, #5
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0x30c>
 800232a:	4b5f      	ldr	r3, [pc, #380]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 800232c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232e:	4a5e      	ldr	r2, [pc, #376]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6713      	str	r3, [r2, #112]	@ 0x70
 8002336:	4b5c      	ldr	r3, [pc, #368]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233a:	4a5b      	ldr	r2, [pc, #364]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6713      	str	r3, [r2, #112]	@ 0x70
 8002342:	e00b      	b.n	800235c <HAL_RCC_OscConfig+0x324>
 8002344:	4b58      	ldr	r3, [pc, #352]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002348:	4a57      	ldr	r2, [pc, #348]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 800234a:	f023 0301 	bic.w	r3, r3, #1
 800234e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002350:	4b55      	ldr	r3, [pc, #340]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002354:	4a54      	ldr	r2, [pc, #336]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002356:	f023 0304 	bic.w	r3, r3, #4
 800235a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d015      	beq.n	8002390 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002364:	f7ff f86c 	bl	8001440 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236a:	e00a      	b.n	8002382 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	f7ff f868 	bl	8001440 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e0cb      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002382:	4b49      	ldr	r3, [pc, #292]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0ee      	beq.n	800236c <HAL_RCC_OscConfig+0x334>
 800238e:	e014      	b.n	80023ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002390:	f7ff f856 	bl	8001440 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002396:	e00a      	b.n	80023ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002398:	f7ff f852 	bl	8001440 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e0b5      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ae:	4b3e      	ldr	r3, [pc, #248]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1ee      	bne.n	8002398 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d105      	bne.n	80023cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c0:	4b39      	ldr	r3, [pc, #228]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	4a38      	ldr	r2, [pc, #224]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 80023c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80a1 	beq.w	8002518 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023d6:	4b34      	ldr	r3, [pc, #208]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d05c      	beq.n	800249c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d141      	bne.n	800246e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ea:	4b31      	ldr	r3, [pc, #196]	@ (80024b0 <HAL_RCC_OscConfig+0x478>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7ff f826 	bl	8001440 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f8:	f7ff f822 	bl	8001440 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e087      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240a:	4b27      	ldr	r3, [pc, #156]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69da      	ldr	r2, [r3, #28]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002424:	019b      	lsls	r3, r3, #6
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242c:	085b      	lsrs	r3, r3, #1
 800242e:	3b01      	subs	r3, #1
 8002430:	041b      	lsls	r3, r3, #16
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002438:	061b      	lsls	r3, r3, #24
 800243a:	491b      	ldr	r1, [pc, #108]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002440:	4b1b      	ldr	r3, [pc, #108]	@ (80024b0 <HAL_RCC_OscConfig+0x478>)
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002446:	f7fe fffb 	bl	8001440 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244e:	f7fe fff7 	bl	8001440 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e05c      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002460:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x416>
 800246c:	e054      	b.n	8002518 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246e:	4b10      	ldr	r3, [pc, #64]	@ (80024b0 <HAL_RCC_OscConfig+0x478>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7fe ffe4 	bl	8001440 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe ffe0 	bl	8001440 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e045      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x444>
 800249a:	e03d      	b.n	8002518 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e038      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40007000 	.word	0x40007000
 80024b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <HAL_RCC_OscConfig+0x4ec>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d028      	beq.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d121      	bne.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d11a      	bne.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024e4:	4013      	ands	r3, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d111      	bne.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fa:	085b      	lsrs	r3, r3, #1
 80024fc:	3b01      	subs	r3, #1
 80024fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d107      	bne.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800

08002528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0cc      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800253c:	4b68      	ldr	r3, [pc, #416]	@ (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d90c      	bls.n	8002564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b65      	ldr	r3, [pc, #404]	@ (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002552:	4b63      	ldr	r3, [pc, #396]	@ (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0b8      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d020      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800257c:	4b59      	ldr	r3, [pc, #356]	@ (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4a58      	ldr	r2, [pc, #352]	@ (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002594:	4b53      	ldr	r3, [pc, #332]	@ (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4a52      	ldr	r2, [pc, #328]	@ (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800259e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a0:	4b50      	ldr	r3, [pc, #320]	@ (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	494d      	ldr	r1, [pc, #308]	@ (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d044      	beq.n	8002648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	4b47      	ldr	r3, [pc, #284]	@ (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d119      	bne.n	8002606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e07f      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d003      	beq.n	80025e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e6:	4b3f      	ldr	r3, [pc, #252]	@ (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e06f      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f6:	4b3b      	ldr	r3, [pc, #236]	@ (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e067      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002606:	4b37      	ldr	r3, [pc, #220]	@ (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f023 0203 	bic.w	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4934      	ldr	r1, [pc, #208]	@ (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002618:	f7fe ff12 	bl	8001440 <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261e:	e00a      	b.n	8002636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002620:	f7fe ff0e 	bl	8001440 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e04f      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	4b2b      	ldr	r3, [pc, #172]	@ (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 020c 	and.w	r2, r3, #12
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	429a      	cmp	r2, r3
 8002646:	d1eb      	bne.n	8002620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002648:	4b25      	ldr	r3, [pc, #148]	@ (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d20c      	bcs.n	8002670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b22      	ldr	r3, [pc, #136]	@ (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b20      	ldr	r3, [pc, #128]	@ (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e032      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800267c:	4b19      	ldr	r3, [pc, #100]	@ (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4916      	ldr	r1, [pc, #88]	@ (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800269a:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	490e      	ldr	r1, [pc, #56]	@ (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026ae:	f000 f821 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 80026b2:	4602      	mov	r2, r0
 80026b4:	4b0b      	ldr	r3, [pc, #44]	@ (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	490a      	ldr	r1, [pc, #40]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 80026c0:	5ccb      	ldrb	r3, [r1, r3]
 80026c2:	fa22 f303 	lsr.w	r3, r2, r3
 80026c6:	4a09      	ldr	r2, [pc, #36]	@ (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ca:	4b09      	ldr	r3, [pc, #36]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fd98 	bl	8001204 <HAL_InitTick>

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023c00 	.word	0x40023c00
 80026e4:	40023800 	.word	0x40023800
 80026e8:	08004fd8 	.word	0x08004fd8
 80026ec:	20000000 	.word	0x20000000
 80026f0:	20000004 	.word	0x20000004

080026f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f8:	b094      	sub	sp, #80	@ 0x50
 80026fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002700:	2300      	movs	r3, #0
 8002702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002704:	2300      	movs	r3, #0
 8002706:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800270c:	4b79      	ldr	r3, [pc, #484]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d00d      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x40>
 8002718:	2b08      	cmp	r3, #8
 800271a:	f200 80e1 	bhi.w	80028e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x34>
 8002722:	2b04      	cmp	r3, #4
 8002724:	d003      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0x3a>
 8002726:	e0db      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002728:	4b73      	ldr	r3, [pc, #460]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800272a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800272c:	e0db      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800272e:	4b73      	ldr	r3, [pc, #460]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x208>)
 8002730:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002732:	e0d8      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002734:	4b6f      	ldr	r3, [pc, #444]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800273c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800273e:	4b6d      	ldr	r3, [pc, #436]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d063      	beq.n	8002812 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274a:	4b6a      	ldr	r3, [pc, #424]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	099b      	lsrs	r3, r3, #6
 8002750:	2200      	movs	r2, #0
 8002752:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002754:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800275c:	633b      	str	r3, [r7, #48]	@ 0x30
 800275e:	2300      	movs	r3, #0
 8002760:	637b      	str	r3, [r7, #52]	@ 0x34
 8002762:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002766:	4622      	mov	r2, r4
 8002768:	462b      	mov	r3, r5
 800276a:	f04f 0000 	mov.w	r0, #0
 800276e:	f04f 0100 	mov.w	r1, #0
 8002772:	0159      	lsls	r1, r3, #5
 8002774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002778:	0150      	lsls	r0, r2, #5
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4621      	mov	r1, r4
 8002780:	1a51      	subs	r1, r2, r1
 8002782:	6139      	str	r1, [r7, #16]
 8002784:	4629      	mov	r1, r5
 8002786:	eb63 0301 	sbc.w	r3, r3, r1
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002798:	4659      	mov	r1, fp
 800279a:	018b      	lsls	r3, r1, #6
 800279c:	4651      	mov	r1, sl
 800279e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027a2:	4651      	mov	r1, sl
 80027a4:	018a      	lsls	r2, r1, #6
 80027a6:	4651      	mov	r1, sl
 80027a8:	ebb2 0801 	subs.w	r8, r2, r1
 80027ac:	4659      	mov	r1, fp
 80027ae:	eb63 0901 	sbc.w	r9, r3, r1
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027c6:	4690      	mov	r8, r2
 80027c8:	4699      	mov	r9, r3
 80027ca:	4623      	mov	r3, r4
 80027cc:	eb18 0303 	adds.w	r3, r8, r3
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	462b      	mov	r3, r5
 80027d4:	eb49 0303 	adc.w	r3, r9, r3
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027e6:	4629      	mov	r1, r5
 80027e8:	024b      	lsls	r3, r1, #9
 80027ea:	4621      	mov	r1, r4
 80027ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027f0:	4621      	mov	r1, r4
 80027f2:	024a      	lsls	r2, r1, #9
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027fa:	2200      	movs	r2, #0
 80027fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002800:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002804:	f7fd fcec 	bl	80001e0 <__aeabi_uldivmod>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4613      	mov	r3, r2
 800280e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002810:	e058      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002812:	4b38      	ldr	r3, [pc, #224]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	099b      	lsrs	r3, r3, #6
 8002818:	2200      	movs	r2, #0
 800281a:	4618      	mov	r0, r3
 800281c:	4611      	mov	r1, r2
 800281e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002822:	623b      	str	r3, [r7, #32]
 8002824:	2300      	movs	r3, #0
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
 8002828:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800282c:	4642      	mov	r2, r8
 800282e:	464b      	mov	r3, r9
 8002830:	f04f 0000 	mov.w	r0, #0
 8002834:	f04f 0100 	mov.w	r1, #0
 8002838:	0159      	lsls	r1, r3, #5
 800283a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800283e:	0150      	lsls	r0, r2, #5
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4641      	mov	r1, r8
 8002846:	ebb2 0a01 	subs.w	sl, r2, r1
 800284a:	4649      	mov	r1, r9
 800284c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800285c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002860:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002864:	ebb2 040a 	subs.w	r4, r2, sl
 8002868:	eb63 050b 	sbc.w	r5, r3, fp
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	00eb      	lsls	r3, r5, #3
 8002876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800287a:	00e2      	lsls	r2, r4, #3
 800287c:	4614      	mov	r4, r2
 800287e:	461d      	mov	r5, r3
 8002880:	4643      	mov	r3, r8
 8002882:	18e3      	adds	r3, r4, r3
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	464b      	mov	r3, r9
 8002888:	eb45 0303 	adc.w	r3, r5, r3
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	e9d7 4500 	ldrd	r4, r5, [r7]
 800289a:	4629      	mov	r1, r5
 800289c:	028b      	lsls	r3, r1, #10
 800289e:	4621      	mov	r1, r4
 80028a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028a4:	4621      	mov	r1, r4
 80028a6:	028a      	lsls	r2, r1, #10
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ae:	2200      	movs	r2, #0
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	61fa      	str	r2, [r7, #28]
 80028b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028b8:	f7fd fc92 	bl	80001e0 <__aeabi_uldivmod>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4613      	mov	r3, r2
 80028c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028c4:	4b0b      	ldr	r3, [pc, #44]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	3301      	adds	r3, #1
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80028d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028de:	e002      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028e0:	4b05      	ldr	r3, [pc, #20]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80028e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3750      	adds	r7, #80	@ 0x50
 80028ec:	46bd      	mov	sp, r7
 80028ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800
 80028f8:	00f42400 	.word	0x00f42400
 80028fc:	007a1200 	.word	0x007a1200

08002900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002904:	4b03      	ldr	r3, [pc, #12]	@ (8002914 <HAL_RCC_GetHCLKFreq+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000000 	.word	0x20000000

08002918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800291c:	f7ff fff0 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002920:	4602      	mov	r2, r0
 8002922:	4b05      	ldr	r3, [pc, #20]	@ (8002938 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	0b5b      	lsrs	r3, r3, #13
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	4903      	ldr	r1, [pc, #12]	@ (800293c <HAL_RCC_GetPCLK2Freq+0x24>)
 800292e:	5ccb      	ldrb	r3, [r1, r3]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40023800 	.word	0x40023800
 800293c:	08004fe8 	.word	0x08004fe8

08002940 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	220f      	movs	r2, #15
 800294e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002950:	4b12      	ldr	r3, [pc, #72]	@ (800299c <HAL_RCC_GetClockConfig+0x5c>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0203 	and.w	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800295c:	4b0f      	ldr	r3, [pc, #60]	@ (800299c <HAL_RCC_GetClockConfig+0x5c>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002968:	4b0c      	ldr	r3, [pc, #48]	@ (800299c <HAL_RCC_GetClockConfig+0x5c>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002974:	4b09      	ldr	r3, [pc, #36]	@ (800299c <HAL_RCC_GetClockConfig+0x5c>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	08db      	lsrs	r3, r3, #3
 800297a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002982:	4b07      	ldr	r3, [pc, #28]	@ (80029a0 <HAL_RCC_GetClockConfig+0x60>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0207 	and.w	r2, r3, #7
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	601a      	str	r2, [r3, #0]
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	40023c00 	.word	0x40023c00

080029a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e07b      	b.n	8002aae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d108      	bne.n	80029d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029c6:	d009      	beq.n	80029dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	61da      	str	r2, [r3, #28]
 80029ce:	e005      	b.n	80029dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe fb2c 	bl	8001054 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a60:	ea42 0103 	orr.w	r1, r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a68:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	f003 0104 	and.w	r1, r3, #4
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	f003 0210 	and.w	r2, r3, #16
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69da      	ldr	r2, [r3, #28]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_SPI_Transmit_DMA+0x20>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e097      	b.n	8002c08 <HAL_SPI_Transmit_DMA+0x150>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d002      	beq.n	8002af2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
 8002aee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002af0:	e085      	b.n	8002bfe <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_SPI_Transmit_DMA+0x46>
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b02:	e07c      	b.n	8002bfe <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2203      	movs	r2, #3
 8002b08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	88fa      	ldrh	r2, [r7, #6]
 8002b1c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	88fa      	ldrh	r2, [r7, #6]
 8002b22:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b4a:	d10f      	bne.n	8002b6c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b70:	4a27      	ldr	r2, [pc, #156]	@ (8002c10 <HAL_SPI_Transmit_DMA+0x158>)
 8002b72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b78:	4a26      	ldr	r2, [pc, #152]	@ (8002c14 <HAL_SPI_Transmit_DMA+0x15c>)
 8002b7a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b80:	4a25      	ldr	r2, [pc, #148]	@ (8002c18 <HAL_SPI_Transmit_DMA+0x160>)
 8002b82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b88:	2200      	movs	r2, #0
 8002b8a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b94:	4619      	mov	r1, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	330c      	adds	r3, #12
 8002b9c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ba2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002ba4:	f7fe fde8 	bl	8001778 <HAL_DMA_Start_IT>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d008      	beq.n	8002bc0 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb2:	f043 0210 	orr.w	r2, r3, #16
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002bbe:	e01e      	b.n	8002bfe <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bca:	2b40      	cmp	r3, #64	@ 0x40
 8002bcc:	d007      	beq.n	8002bde <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0220 	orr.w	r2, r2, #32
 8002bec:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0202 	orr.w	r2, r2, #2
 8002bfc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	08003205 	.word	0x08003205
 8002c14:	08003025 	.word	0x08003025
 8002c18:	08003259 	.word	0x08003259

08002c1c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	4613      	mov	r3, r2
 8002c28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d002      	beq.n	8002c40 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c3e:	e0a2      	b.n	8002d86 <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d110      	bne.n	8002c6a <HAL_SPI_Receive_DMA+0x4e>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c50:	d10b      	bne.n	8002c6a <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2204      	movs	r2, #4
 8002c56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f89f 	bl	8002da4 <HAL_SPI_TransmitReceive_DMA>
 8002c66:	4603      	mov	r3, r0
 8002c68:	e092      	b.n	8002d90 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_SPI_Receive_DMA+0x5c>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e08b      	b.n	8002d90 <HAL_SPI_Receive_DMA+0x174>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if ((pData == NULL) || (Size == 0U))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_SPI_Receive_DMA+0x70>
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d102      	bne.n	8002c92 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c90:	e079      	b.n	8002d86 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2204      	movs	r2, #4
 8002c96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	88fa      	ldrh	r2, [r7, #6]
 8002caa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	88fa      	ldrh	r2, [r7, #6]
 8002cb0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cd2:	d10f      	bne.n	8002cf4 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ce2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002cf2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf8:	4a27      	ldr	r2, [pc, #156]	@ (8002d98 <HAL_SPI_Receive_DMA+0x17c>)
 8002cfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d00:	4a26      	ldr	r2, [pc, #152]	@ (8002d9c <HAL_SPI_Receive_DMA+0x180>)
 8002d02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d08:	4a25      	ldr	r2, [pc, #148]	@ (8002da0 <HAL_SPI_Receive_DMA+0x184>)
 8002d0a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d10:	2200      	movs	r2, #0
 8002d12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	330c      	adds	r3, #12
 8002d1e:	4619      	mov	r1, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d24:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d2a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002d2c:	f7fe fd24 	bl	8001778 <HAL_DMA_Start_IT>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d008      	beq.n	8002d48 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3a:	f043 0210 	orr.w	r2, r3, #16
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002d46:	e01e      	b.n	8002d86 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d52:	2b40      	cmp	r3, #64	@ 0x40
 8002d54:	d007      	beq.n	8002d66 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d64:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 0220 	orr.w	r2, r2, #32
 8002d74:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0201 	orr.w	r2, r2, #1
 8002d84:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	08003221 	.word	0x08003221
 8002d9c:	080030cd 	.word	0x080030cd
 8002da0:	08003259 	.word	0x08003259

08002da4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_SPI_TransmitReceive_DMA+0x20>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e0db      	b.n	8002f7c <HAL_SPI_TransmitReceive_DMA+0x1d8>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dd2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002dda:	7dbb      	ldrb	r3, [r7, #22]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d00d      	beq.n	8002dfc <HAL_SPI_TransmitReceive_DMA+0x58>
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002de6:	d106      	bne.n	8002df6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <HAL_SPI_TransmitReceive_DMA+0x52>
 8002df0:	7dbb      	ldrb	r3, [r7, #22]
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d002      	beq.n	8002dfc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002df6:	2302      	movs	r3, #2
 8002df8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dfa:	e0ba      	b.n	8002f72 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002e08:	887b      	ldrh	r3, [r7, #2]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e12:	e0ae      	b.n	8002f72 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d003      	beq.n	8002e28 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2205      	movs	r2, #5
 8002e24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	887a      	ldrh	r2, [r7, #2]
 8002e38:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	887a      	ldrh	r2, [r7, #2]
 8002e3e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	887a      	ldrh	r2, [r7, #2]
 8002e4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d108      	bne.n	8002e7c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e6e:	4a45      	ldr	r2, [pc, #276]	@ (8002f84 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8002e70:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e76:	4a44      	ldr	r2, [pc, #272]	@ (8002f88 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8002e78:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e7a:	e007      	b.n	8002e8c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e80:	4a42      	ldr	r2, [pc, #264]	@ (8002f8c <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e88:	4a41      	ldr	r2, [pc, #260]	@ (8002f90 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8002e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e90:	4a40      	ldr	r2, [pc, #256]	@ (8002f94 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002e92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e98:	2200      	movs	r2, #0
 8002e9a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	330c      	adds	r3, #12
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eac:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eb2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002eb4:	f7fe fc60 	bl	8001778 <HAL_DMA_Start_IT>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec2:	f043 0210 	orr.w	r2, r3, #16
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002ece:	e050      	b.n	8002f72 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0201 	orr.w	r2, r2, #1
 8002ede:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eec:	2200      	movs	r2, #0
 8002eee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002efc:	2200      	movs	r2, #0
 8002efe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f08:	4619      	mov	r1, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	330c      	adds	r3, #12
 8002f10:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f16:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002f18:	f7fe fc2e 	bl	8001778 <HAL_DMA_Start_IT>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f26:	f043 0210 	orr.w	r2, r3, #16
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002f32:	e01e      	b.n	8002f72 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3e:	2b40      	cmp	r3, #64	@ 0x40
 8002f40:	d007      	beq.n	8002f52 <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f50:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f042 0220 	orr.w	r2, r2, #32
 8002f60:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0202 	orr.w	r2, r2, #2
 8002f70:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	08003221 	.word	0x08003221
 8002f88:	080030cd 	.word	0x080030cd
 8002f8c:	0800323d 	.word	0x0800323d
 8002f90:	08003175 	.word	0x08003175
 8002f94:	08003259 	.word	0x08003259

08002f98 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003030:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003032:	f7fe fa05 	bl	8001440 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003046:	d03b      	beq.n	80030c0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0220 	bic.w	r2, r2, #32
 8003056:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0202 	bic.w	r2, r2, #2
 8003066:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	2164      	movs	r1, #100	@ 0x64
 800306c:	6978      	ldr	r0, [r7, #20]
 800306e:	f000 fa01 	bl	8003474 <SPI_EndRxTxTransaction>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307c:	f043 0220 	orr.w	r2, r3, #32
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10a      	bne.n	80030a2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2200      	movs	r2, #0
 80030a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80030b8:	6978      	ldr	r0, [r7, #20]
 80030ba:	f7ff ffa9 	bl	8003010 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80030be:	e002      	b.n	80030c6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80030c0:	6978      	ldr	r0, [r7, #20]
 80030c2:	f7ff ff69 	bl	8002f98 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030da:	f7fe f9b1 	bl	8001440 <HAL_GetTick>
 80030de:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ee:	d03b      	beq.n	8003168 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0220 	bic.w	r2, r2, #32
 80030fe:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10d      	bne.n	8003124 <SPI_DMAReceiveCplt+0x58>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003110:	d108      	bne.n	8003124 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0203 	bic.w	r2, r2, #3
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	e007      	b.n	8003134 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0201 	bic.w	r2, r2, #1
 8003132:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	2164      	movs	r1, #100	@ 0x64
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f935 	bl	80033a8 <SPI_EndRxTransaction>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7ff ff55 	bl	8003010 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003166:	e002      	b.n	800316e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7ff ff1f 	bl	8002fac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003180:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003182:	f7fe f95d 	bl	8001440 <HAL_GetTick>
 8003186:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003196:	d02f      	beq.n	80031f8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0220 	bic.w	r2, r2, #32
 80031a6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	2164      	movs	r1, #100	@ 0x64
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f961 	bl	8003474 <SPI_EndRxTxTransaction>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031bc:	f043 0220 	orr.w	r2, r3, #32
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0203 	bic.w	r2, r2, #3
 80031d2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff ff0d 	bl	8003010 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80031f6:	e002      	b.n	80031fe <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f7ff fee1 	bl	8002fc0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003210:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f7ff fede 	bl	8002fd4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003218:	bf00      	nop
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f7ff feda 	bl	8002fe8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003234:	bf00      	nop
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003248:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f7ff fed6 	bl	8002ffc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003250:	bf00      	nop
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003264:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0203 	bic.w	r2, r2, #3
 8003274:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327a:	f043 0210 	orr.w	r2, r3, #16
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f7ff fec0 	bl	8003010 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032a8:	f7fe f8ca 	bl	8001440 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b0:	1a9b      	subs	r3, r3, r2
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	4413      	add	r3, r2
 80032b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032b8:	f7fe f8c2 	bl	8001440 <HAL_GetTick>
 80032bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032be:	4b39      	ldr	r3, [pc, #228]	@ (80033a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	015b      	lsls	r3, r3, #5
 80032c4:	0d1b      	lsrs	r3, r3, #20
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	fb02 f303 	mul.w	r3, r2, r3
 80032cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032ce:	e054      	b.n	800337a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	d050      	beq.n	800337a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032d8:	f7fe f8b2 	bl	8001440 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d902      	bls.n	80032ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d13d      	bne.n	800336a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80032fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003306:	d111      	bne.n	800332c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003310:	d004      	beq.n	800331c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800331a:	d107      	bne.n	800332c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800332a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003334:	d10f      	bne.n	8003356 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003354:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e017      	b.n	800339a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	3b01      	subs	r3, #1
 8003378:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	4013      	ands	r3, r2
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	429a      	cmp	r2, r3
 8003388:	bf0c      	ite	eq
 800338a:	2301      	moveq	r3, #1
 800338c:	2300      	movne	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	461a      	mov	r2, r3
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	429a      	cmp	r2, r3
 8003396:	d19b      	bne.n	80032d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3720      	adds	r7, #32
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000000 	.word	0x20000000

080033a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033bc:	d111      	bne.n	80033e2 <SPI_EndRxTransaction+0x3a>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033c6:	d004      	beq.n	80033d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033d0:	d107      	bne.n	80033e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033e0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033ea:	d12a      	bne.n	8003442 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033f4:	d012      	beq.n	800341c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2200      	movs	r2, #0
 80033fe:	2180      	movs	r1, #128	@ 0x80
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f7ff ff49 	bl	8003298 <SPI_WaitFlagStateUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d02d      	beq.n	8003468 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003410:	f043 0220 	orr.w	r2, r3, #32
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e026      	b.n	800346a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2200      	movs	r2, #0
 8003424:	2101      	movs	r1, #1
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f7ff ff36 	bl	8003298 <SPI_WaitFlagStateUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01a      	beq.n	8003468 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003436:	f043 0220 	orr.w	r2, r3, #32
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e013      	b.n	800346a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2200      	movs	r2, #0
 800344a:	2101      	movs	r1, #1
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f7ff ff23 	bl	8003298 <SPI_WaitFlagStateUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345c:	f043 0220 	orr.w	r2, r3, #32
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e000      	b.n	800346a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2201      	movs	r2, #1
 8003488:	2102      	movs	r1, #2
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff ff04 	bl	8003298 <SPI_WaitFlagStateUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349a:	f043 0220 	orr.w	r2, r3, #32
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e032      	b.n	800350c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003514 <SPI_EndRxTxTransaction+0xa0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003518 <SPI_EndRxTxTransaction+0xa4>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	0d5b      	lsrs	r3, r3, #21
 80034b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034c4:	d112      	bne.n	80034ec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2200      	movs	r2, #0
 80034ce:	2180      	movs	r1, #128	@ 0x80
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f7ff fee1 	bl	8003298 <SPI_WaitFlagStateUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d016      	beq.n	800350a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e0:	f043 0220 	orr.w	r2, r3, #32
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e00f      	b.n	800350c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003502:	2b80      	cmp	r3, #128	@ 0x80
 8003504:	d0f2      	beq.n	80034ec <SPI_EndRxTxTransaction+0x78>
 8003506:	e000      	b.n	800350a <SPI_EndRxTxTransaction+0x96>
        break;
 8003508:	bf00      	nop
  }

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20000000 	.word	0x20000000
 8003518:	165e9f81 	.word	0x165e9f81

0800351c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e041      	b.n	80035b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f839 	bl	80035ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3304      	adds	r3, #4
 8003558:	4619      	mov	r1, r3
 800355a:	4610      	mov	r0, r2
 800355c:	f000 f9b2 	bl	80038c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d001      	beq.n	80035e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e044      	b.n	8003672 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1e      	ldr	r2, [pc, #120]	@ (8003680 <HAL_TIM_Base_Start_IT+0xb0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d018      	beq.n	800363c <HAL_TIM_Base_Start_IT+0x6c>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003612:	d013      	beq.n	800363c <HAL_TIM_Base_Start_IT+0x6c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1a      	ldr	r2, [pc, #104]	@ (8003684 <HAL_TIM_Base_Start_IT+0xb4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00e      	beq.n	800363c <HAL_TIM_Base_Start_IT+0x6c>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a19      	ldr	r2, [pc, #100]	@ (8003688 <HAL_TIM_Base_Start_IT+0xb8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d009      	beq.n	800363c <HAL_TIM_Base_Start_IT+0x6c>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a17      	ldr	r2, [pc, #92]	@ (800368c <HAL_TIM_Base_Start_IT+0xbc>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_TIM_Base_Start_IT+0x6c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a16      	ldr	r2, [pc, #88]	@ (8003690 <HAL_TIM_Base_Start_IT+0xc0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d111      	bne.n	8003660 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b06      	cmp	r3, #6
 800364c:	d010      	beq.n	8003670 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0201 	orr.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365e:	e007      	b.n	8003670 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40010000 	.word	0x40010000
 8003684:	40000400 	.word	0x40000400
 8003688:	40000800 	.word	0x40000800
 800368c:	40000c00 	.word	0x40000c00
 8003690:	40014000 	.word	0x40014000

08003694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d020      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01b      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0202 	mvn.w	r2, #2
 80036c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f8d2 	bl	8003888 <HAL_TIM_IC_CaptureCallback>
 80036e4:	e005      	b.n	80036f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f8c4 	bl	8003874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f8d5 	bl	800389c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d020      	beq.n	8003744 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01b      	beq.n	8003744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0204 	mvn.w	r2, #4
 8003714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f8ac 	bl	8003888 <HAL_TIM_IC_CaptureCallback>
 8003730:	e005      	b.n	800373e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f89e 	bl	8003874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f8af 	bl	800389c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d020      	beq.n	8003790 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01b      	beq.n	8003790 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0208 	mvn.w	r2, #8
 8003760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2204      	movs	r2, #4
 8003766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f886 	bl	8003888 <HAL_TIM_IC_CaptureCallback>
 800377c:	e005      	b.n	800378a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f878 	bl	8003874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f889 	bl	800389c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2b00      	cmp	r3, #0
 8003798:	d020      	beq.n	80037dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01b      	beq.n	80037dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0210 	mvn.w	r2, #16
 80037ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2208      	movs	r2, #8
 80037b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f860 	bl	8003888 <HAL_TIM_IC_CaptureCallback>
 80037c8:	e005      	b.n	80037d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f852 	bl	8003874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f863 	bl	800389c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00c      	beq.n	8003800 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d007      	beq.n	8003800 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0201 	mvn.w	r2, #1
 80037f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fd fbdc 	bl	8000fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00c      	beq.n	8003824 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003810:	2b00      	cmp	r3, #0
 8003812:	d007      	beq.n	8003824 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800381c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f8e6 	bl	80039f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00c      	beq.n	8003848 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003834:	2b00      	cmp	r3, #0
 8003836:	d007      	beq.n	8003848 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f834 	bl	80038b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00c      	beq.n	800386c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0220 	mvn.w	r2, #32
 8003864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f8b8 	bl	80039dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a3a      	ldr	r2, [pc, #232]	@ (80039c0 <TIM_Base_SetConfig+0xfc>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00f      	beq.n	80038fc <TIM_Base_SetConfig+0x38>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e2:	d00b      	beq.n	80038fc <TIM_Base_SetConfig+0x38>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a37      	ldr	r2, [pc, #220]	@ (80039c4 <TIM_Base_SetConfig+0x100>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d007      	beq.n	80038fc <TIM_Base_SetConfig+0x38>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a36      	ldr	r2, [pc, #216]	@ (80039c8 <TIM_Base_SetConfig+0x104>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_Base_SetConfig+0x38>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a35      	ldr	r2, [pc, #212]	@ (80039cc <TIM_Base_SetConfig+0x108>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d108      	bne.n	800390e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a2b      	ldr	r2, [pc, #172]	@ (80039c0 <TIM_Base_SetConfig+0xfc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d01b      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800391c:	d017      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a28      	ldr	r2, [pc, #160]	@ (80039c4 <TIM_Base_SetConfig+0x100>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d013      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a27      	ldr	r2, [pc, #156]	@ (80039c8 <TIM_Base_SetConfig+0x104>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00f      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a26      	ldr	r2, [pc, #152]	@ (80039cc <TIM_Base_SetConfig+0x108>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00b      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a25      	ldr	r2, [pc, #148]	@ (80039d0 <TIM_Base_SetConfig+0x10c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a24      	ldr	r2, [pc, #144]	@ (80039d4 <TIM_Base_SetConfig+0x110>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a23      	ldr	r2, [pc, #140]	@ (80039d8 <TIM_Base_SetConfig+0x114>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d108      	bne.n	8003960 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a0e      	ldr	r2, [pc, #56]	@ (80039c0 <TIM_Base_SetConfig+0xfc>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d103      	bne.n	8003994 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d105      	bne.n	80039b2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f023 0201 	bic.w	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	611a      	str	r2, [r3, #16]
  }
}
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40010000 	.word	0x40010000
 80039c4:	40000400 	.word	0x40000400
 80039c8:	40000800 	.word	0x40000800
 80039cc:	40000c00 	.word	0x40000c00
 80039d0:	40014000 	.word	0x40014000
 80039d4:	40014400 	.word	0x40014400
 80039d8:	40014800 	.word	0x40014800

080039dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a16:	2b84      	cmp	r3, #132	@ 0x84
 8003a18:	d005      	beq.n	8003a26 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4413      	add	r3, r2
 8003a22:	3303      	adds	r3, #3
 8003a24:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a26:	68fb      	ldr	r3, [r7, #12]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a38:	f000 fae4 	bl	8004004 <vTaskStartScheduler>
  
  return osOK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a44:	b089      	sub	sp, #36	@ 0x24
 8003a46:	af04      	add	r7, sp, #16
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d020      	beq.n	8003a96 <osThreadCreate+0x54>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01c      	beq.n	8003a96 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685c      	ldr	r4, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691e      	ldr	r6, [r3, #16]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff ffc8 	bl	8003a04 <makeFreeRtosPriority>
 8003a74:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a7e:	9202      	str	r2, [sp, #8]
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	9100      	str	r1, [sp, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	4632      	mov	r2, r6
 8003a88:	4629      	mov	r1, r5
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f000 f8ed 	bl	8003c6a <xTaskCreateStatic>
 8003a90:	4603      	mov	r3, r0
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	e01c      	b.n	8003ad0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685c      	ldr	r4, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aa2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff ffaa 	bl	8003a04 <makeFreeRtosPriority>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	f107 030c 	add.w	r3, r7, #12
 8003ab6:	9301      	str	r3, [sp, #4]
 8003ab8:	9200      	str	r2, [sp, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	4632      	mov	r2, r6
 8003abe:	4629      	mov	r1, r5
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f000 f932 	bl	8003d2a <xTaskCreate>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d001      	beq.n	8003ad0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	e000      	b.n	8003ad2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ada <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <osDelay+0x16>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	e000      	b.n	8003af2 <osDelay+0x18>
 8003af0:	2301      	movs	r3, #1
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fa50 	bl	8003f98 <vTaskDelay>
  
  return osOK;
 8003af8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f103 0208 	add.w	r2, r3, #8
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f04f 32ff 	mov.w	r2, #4294967295
 8003b1a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f103 0208 	add.w	r2, r3, #8
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f103 0208 	add.w	r2, r3, #8
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	601a      	str	r2, [r3, #0]
}
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	d103      	bne.n	8003bc4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	e00c      	b.n	8003bde <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3308      	adds	r3, #8
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	e002      	b.n	8003bd2 <vListInsert+0x2e>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d2f6      	bcs.n	8003bcc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	601a      	str	r2, [r3, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c16:	b480      	push	{r7}
 8003c18:	b085      	sub	sp, #20
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6892      	ldr	r2, [r2, #8]
 8003c2c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6852      	ldr	r2, [r2, #4]
 8003c36:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d103      	bne.n	8003c4a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	1e5a      	subs	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b08e      	sub	sp, #56	@ 0x38
 8003c6e:	af04      	add	r7, sp, #16
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]
 8003c76:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c90:	bf00      	nop
 8003c92:	bf00      	nop
 8003c94:	e7fd      	b.n	8003c92 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10b      	bne.n	8003cb4 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	61fb      	str	r3, [r7, #28]
}
 8003cae:	bf00      	nop
 8003cb0:	bf00      	nop
 8003cb2:	e7fd      	b.n	8003cb0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003cb4:	2354      	movs	r3, #84	@ 0x54
 8003cb6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b54      	cmp	r3, #84	@ 0x54
 8003cbc:	d00b      	beq.n	8003cd6 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	61bb      	str	r3, [r7, #24]
}
 8003cd0:	bf00      	nop
 8003cd2:	bf00      	nop
 8003cd4:	e7fd      	b.n	8003cd2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003cd6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01e      	beq.n	8003d1c <xTaskCreateStatic+0xb2>
 8003cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01b      	beq.n	8003d1c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cec:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	9303      	str	r3, [sp, #12]
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	9302      	str	r3, [sp, #8]
 8003cfe:	f107 0314 	add.w	r3, r7, #20
 8003d02:	9301      	str	r3, [sp, #4]
 8003d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f850 	bl	8003db4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d16:	f000 f8d5 	bl	8003ec4 <prvAddNewTaskToReadyList>
 8003d1a:	e001      	b.n	8003d20 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d20:	697b      	ldr	r3, [r7, #20]
	}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3728      	adds	r7, #40	@ 0x28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b08c      	sub	sp, #48	@ 0x30
 8003d2e:	af04      	add	r7, sp, #16
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	603b      	str	r3, [r7, #0]
 8003d36:	4613      	mov	r3, r2
 8003d38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d3a:	88fb      	ldrh	r3, [r7, #6]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fed2 	bl	8004ae8 <pvPortMalloc>
 8003d44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00e      	beq.n	8003d6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d4c:	2054      	movs	r0, #84	@ 0x54
 8003d4e:	f000 fecb 	bl	8004ae8 <pvPortMalloc>
 8003d52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d60:	e005      	b.n	8003d6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d62:	6978      	ldr	r0, [r7, #20]
 8003d64:	f000 ff8e 	bl	8004c84 <vPortFree>
 8003d68:	e001      	b.n	8003d6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d017      	beq.n	8003da4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d7c:	88fa      	ldrh	r2, [r7, #6]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	9303      	str	r3, [sp, #12]
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	9302      	str	r3, [sp, #8]
 8003d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d88:	9301      	str	r3, [sp, #4]
 8003d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f80e 	bl	8003db4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d98:	69f8      	ldr	r0, [r7, #28]
 8003d9a:	f000 f893 	bl	8003ec4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	61bb      	str	r3, [r7, #24]
 8003da2:	e002      	b.n	8003daa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003da4:	f04f 33ff 	mov.w	r3, #4294967295
 8003da8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003daa:	69bb      	ldr	r3, [r7, #24]
	}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3720      	adds	r7, #32
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
 8003dc0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	f023 0307 	bic.w	r3, r3, #7
 8003dda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	617b      	str	r3, [r7, #20]
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	e7fd      	b.n	8003dfa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01f      	beq.n	8003e44 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e04:	2300      	movs	r3, #0
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	e012      	b.n	8003e30 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	4413      	add	r3, r2
 8003e10:	7819      	ldrb	r1, [r3, #0]
 8003e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	4413      	add	r3, r2
 8003e18:	3334      	adds	r3, #52	@ 0x34
 8003e1a:	460a      	mov	r2, r1
 8003e1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	4413      	add	r3, r2
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d006      	beq.n	8003e38 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	61fb      	str	r3, [r7, #28]
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b0f      	cmp	r3, #15
 8003e34:	d9e9      	bls.n	8003e0a <prvInitialiseNewTask+0x56>
 8003e36:	e000      	b.n	8003e3a <prvInitialiseNewTask+0x86>
			{
				break;
 8003e38:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e42:	e003      	b.n	8003e4c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d901      	bls.n	8003e56 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e52:	2306      	movs	r3, #6
 8003e54:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e60:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e64:	2200      	movs	r2, #0
 8003e66:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff fe68 	bl	8003b42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e74:	3318      	adds	r3, #24
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff fe63 	bl	8003b42 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e84:	f1c3 0207 	rsb	r2, r3, #7
 8003e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e90:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e94:	2200      	movs	r2, #0
 8003e96:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	68f9      	ldr	r1, [r7, #12]
 8003ea4:	69b8      	ldr	r0, [r7, #24]
 8003ea6:	f000 fc0d 	bl	80046c4 <pxPortInitialiseStack>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ebc:	bf00      	nop
 8003ebe:	3720      	adds	r7, #32
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ecc:	f000 fd2c 	bl	8004928 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f7c <prvAddNewTaskToReadyList+0xb8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	4a29      	ldr	r2, [pc, #164]	@ (8003f7c <prvAddNewTaskToReadyList+0xb8>)
 8003ed8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003eda:	4b29      	ldr	r3, [pc, #164]	@ (8003f80 <prvAddNewTaskToReadyList+0xbc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ee2:	4a27      	ldr	r2, [pc, #156]	@ (8003f80 <prvAddNewTaskToReadyList+0xbc>)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ee8:	4b24      	ldr	r3, [pc, #144]	@ (8003f7c <prvAddNewTaskToReadyList+0xb8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d110      	bne.n	8003f12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ef0:	f000 fac4 	bl	800447c <prvInitialiseTaskLists>
 8003ef4:	e00d      	b.n	8003f12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ef6:	4b23      	ldr	r3, [pc, #140]	@ (8003f84 <prvAddNewTaskToReadyList+0xc0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d109      	bne.n	8003f12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003efe:	4b20      	ldr	r3, [pc, #128]	@ (8003f80 <prvAddNewTaskToReadyList+0xbc>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d802      	bhi.n	8003f12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8003f80 <prvAddNewTaskToReadyList+0xbc>)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f12:	4b1d      	ldr	r3, [pc, #116]	@ (8003f88 <prvAddNewTaskToReadyList+0xc4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3301      	adds	r3, #1
 8003f18:	4a1b      	ldr	r2, [pc, #108]	@ (8003f88 <prvAddNewTaskToReadyList+0xc4>)
 8003f1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f20:	2201      	movs	r2, #1
 8003f22:	409a      	lsls	r2, r3
 8003f24:	4b19      	ldr	r3, [pc, #100]	@ (8003f8c <prvAddNewTaskToReadyList+0xc8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	4a18      	ldr	r2, [pc, #96]	@ (8003f8c <prvAddNewTaskToReadyList+0xc8>)
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4a15      	ldr	r2, [pc, #84]	@ (8003f90 <prvAddNewTaskToReadyList+0xcc>)
 8003f3c:	441a      	add	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4619      	mov	r1, r3
 8003f44:	4610      	mov	r0, r2
 8003f46:	f7ff fe09 	bl	8003b5c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f4a:	f000 fd1f 	bl	800498c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <prvAddNewTaskToReadyList+0xc0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00e      	beq.n	8003f74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f56:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <prvAddNewTaskToReadyList+0xbc>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d207      	bcs.n	8003f74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f64:	4b0b      	ldr	r3, [pc, #44]	@ (8003f94 <prvAddNewTaskToReadyList+0xd0>)
 8003f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f74:	bf00      	nop
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	2000058c 	.word	0x2000058c
 8003f80:	2000048c 	.word	0x2000048c
 8003f84:	20000598 	.word	0x20000598
 8003f88:	200005a8 	.word	0x200005a8
 8003f8c:	20000594 	.word	0x20000594
 8003f90:	20000490 	.word	0x20000490
 8003f94:	e000ed04 	.word	0xe000ed04

08003f98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d018      	beq.n	8003fdc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003faa:	4b14      	ldr	r3, [pc, #80]	@ (8003ffc <vTaskDelay+0x64>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00b      	beq.n	8003fca <vTaskDelay+0x32>
	__asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	60bb      	str	r3, [r7, #8]
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	e7fd      	b.n	8003fc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003fca:	f000 f87d 	bl	80040c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fce:	2100      	movs	r1, #0
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fb11 	bl	80045f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fd6:	f000 f885 	bl	80040e4 <xTaskResumeAll>
 8003fda:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d107      	bne.n	8003ff2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003fe2:	4b07      	ldr	r3, [pc, #28]	@ (8004000 <vTaskDelay+0x68>)
 8003fe4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	200005b4 	.word	0x200005b4
 8004000:	e000ed04 	.word	0xe000ed04

08004004 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	@ 0x28
 8004008:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800400e:	2300      	movs	r3, #0
 8004010:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004012:	463a      	mov	r2, r7
 8004014:	1d39      	adds	r1, r7, #4
 8004016:	f107 0308 	add.w	r3, r7, #8
 800401a:	4618      	mov	r0, r3
 800401c:	f7fc fe3e 	bl	8000c9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004020:	6839      	ldr	r1, [r7, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	9202      	str	r2, [sp, #8]
 8004028:	9301      	str	r3, [sp, #4]
 800402a:	2300      	movs	r3, #0
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	2300      	movs	r3, #0
 8004030:	460a      	mov	r2, r1
 8004032:	491f      	ldr	r1, [pc, #124]	@ (80040b0 <vTaskStartScheduler+0xac>)
 8004034:	481f      	ldr	r0, [pc, #124]	@ (80040b4 <vTaskStartScheduler+0xb0>)
 8004036:	f7ff fe18 	bl	8003c6a <xTaskCreateStatic>
 800403a:	4603      	mov	r3, r0
 800403c:	4a1e      	ldr	r2, [pc, #120]	@ (80040b8 <vTaskStartScheduler+0xb4>)
 800403e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004040:	4b1d      	ldr	r3, [pc, #116]	@ (80040b8 <vTaskStartScheduler+0xb4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004048:	2301      	movs	r3, #1
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	e001      	b.n	8004052 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d116      	bne.n	8004086 <vTaskStartScheduler+0x82>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	613b      	str	r3, [r7, #16]
}
 800406a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800406c:	4b13      	ldr	r3, [pc, #76]	@ (80040bc <vTaskStartScheduler+0xb8>)
 800406e:	f04f 32ff 	mov.w	r2, #4294967295
 8004072:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004074:	4b12      	ldr	r3, [pc, #72]	@ (80040c0 <vTaskStartScheduler+0xbc>)
 8004076:	2201      	movs	r2, #1
 8004078:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800407a:	4b12      	ldr	r3, [pc, #72]	@ (80040c4 <vTaskStartScheduler+0xc0>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004080:	f000 fbae 	bl	80047e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004084:	e00f      	b.n	80040a6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408c:	d10b      	bne.n	80040a6 <vTaskStartScheduler+0xa2>
	__asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	60fb      	str	r3, [r7, #12]
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	e7fd      	b.n	80040a2 <vTaskStartScheduler+0x9e>
}
 80040a6:	bf00      	nop
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	08004fd0 	.word	0x08004fd0
 80040b4:	0800444d 	.word	0x0800444d
 80040b8:	200005b0 	.word	0x200005b0
 80040bc:	200005ac 	.word	0x200005ac
 80040c0:	20000598 	.word	0x20000598
 80040c4:	20000590 	.word	0x20000590

080040c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80040cc:	4b04      	ldr	r3, [pc, #16]	@ (80040e0 <vTaskSuspendAll+0x18>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3301      	adds	r3, #1
 80040d2:	4a03      	ldr	r2, [pc, #12]	@ (80040e0 <vTaskSuspendAll+0x18>)
 80040d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80040d6:	bf00      	nop
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	200005b4 	.word	0x200005b4

080040e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040f2:	4b42      	ldr	r3, [pc, #264]	@ (80041fc <xTaskResumeAll+0x118>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <xTaskResumeAll+0x2e>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	603b      	str	r3, [r7, #0]
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	e7fd      	b.n	800410e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004112:	f000 fc09 	bl	8004928 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004116:	4b39      	ldr	r3, [pc, #228]	@ (80041fc <xTaskResumeAll+0x118>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3b01      	subs	r3, #1
 800411c:	4a37      	ldr	r2, [pc, #220]	@ (80041fc <xTaskResumeAll+0x118>)
 800411e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004120:	4b36      	ldr	r3, [pc, #216]	@ (80041fc <xTaskResumeAll+0x118>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d161      	bne.n	80041ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004128:	4b35      	ldr	r3, [pc, #212]	@ (8004200 <xTaskResumeAll+0x11c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d05d      	beq.n	80041ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004130:	e02e      	b.n	8004190 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004132:	4b34      	ldr	r3, [pc, #208]	@ (8004204 <xTaskResumeAll+0x120>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3318      	adds	r3, #24
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fd69 	bl	8003c16 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3304      	adds	r3, #4
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff fd64 	bl	8003c16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004152:	2201      	movs	r2, #1
 8004154:	409a      	lsls	r2, r3
 8004156:	4b2c      	ldr	r3, [pc, #176]	@ (8004208 <xTaskResumeAll+0x124>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4313      	orrs	r3, r2
 800415c:	4a2a      	ldr	r2, [pc, #168]	@ (8004208 <xTaskResumeAll+0x124>)
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4a27      	ldr	r2, [pc, #156]	@ (800420c <xTaskResumeAll+0x128>)
 800416e:	441a      	add	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3304      	adds	r3, #4
 8004174:	4619      	mov	r1, r3
 8004176:	4610      	mov	r0, r2
 8004178:	f7ff fcf0 	bl	8003b5c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004180:	4b23      	ldr	r3, [pc, #140]	@ (8004210 <xTaskResumeAll+0x12c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004186:	429a      	cmp	r2, r3
 8004188:	d302      	bcc.n	8004190 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800418a:	4b22      	ldr	r3, [pc, #136]	@ (8004214 <xTaskResumeAll+0x130>)
 800418c:	2201      	movs	r2, #1
 800418e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004190:	4b1c      	ldr	r3, [pc, #112]	@ (8004204 <xTaskResumeAll+0x120>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1cc      	bne.n	8004132 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800419e:	f000 fa0b 	bl	80045b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80041a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004218 <xTaskResumeAll+0x134>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d010      	beq.n	80041d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041ae:	f000 f837 	bl	8004220 <xTaskIncrementTick>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80041b8:	4b16      	ldr	r3, [pc, #88]	@ (8004214 <xTaskResumeAll+0x130>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f1      	bne.n	80041ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80041ca:	4b13      	ldr	r3, [pc, #76]	@ (8004218 <xTaskResumeAll+0x134>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041d0:	4b10      	ldr	r3, [pc, #64]	@ (8004214 <xTaskResumeAll+0x130>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d009      	beq.n	80041ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041d8:	2301      	movs	r3, #1
 80041da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041dc:	4b0f      	ldr	r3, [pc, #60]	@ (800421c <xTaskResumeAll+0x138>)
 80041de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041ec:	f000 fbce 	bl	800498c <vPortExitCritical>

	return xAlreadyYielded;
 80041f0:	68bb      	ldr	r3, [r7, #8]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	200005b4 	.word	0x200005b4
 8004200:	2000058c 	.word	0x2000058c
 8004204:	2000054c 	.word	0x2000054c
 8004208:	20000594 	.word	0x20000594
 800420c:	20000490 	.word	0x20000490
 8004210:	2000048c 	.word	0x2000048c
 8004214:	200005a0 	.word	0x200005a0
 8004218:	2000059c 	.word	0x2000059c
 800421c:	e000ed04 	.word	0xe000ed04

08004220 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800422a:	4b4f      	ldr	r3, [pc, #316]	@ (8004368 <xTaskIncrementTick+0x148>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	f040 808f 	bne.w	8004352 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004234:	4b4d      	ldr	r3, [pc, #308]	@ (800436c <xTaskIncrementTick+0x14c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3301      	adds	r3, #1
 800423a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800423c:	4a4b      	ldr	r2, [pc, #300]	@ (800436c <xTaskIncrementTick+0x14c>)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d121      	bne.n	800428c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004248:	4b49      	ldr	r3, [pc, #292]	@ (8004370 <xTaskIncrementTick+0x150>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	603b      	str	r3, [r7, #0]
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop
 8004268:	e7fd      	b.n	8004266 <xTaskIncrementTick+0x46>
 800426a:	4b41      	ldr	r3, [pc, #260]	@ (8004370 <xTaskIncrementTick+0x150>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	4b40      	ldr	r3, [pc, #256]	@ (8004374 <xTaskIncrementTick+0x154>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a3e      	ldr	r2, [pc, #248]	@ (8004370 <xTaskIncrementTick+0x150>)
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	4a3e      	ldr	r2, [pc, #248]	@ (8004374 <xTaskIncrementTick+0x154>)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	4b3e      	ldr	r3, [pc, #248]	@ (8004378 <xTaskIncrementTick+0x158>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3301      	adds	r3, #1
 8004284:	4a3c      	ldr	r2, [pc, #240]	@ (8004378 <xTaskIncrementTick+0x158>)
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	f000 f996 	bl	80045b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800428c:	4b3b      	ldr	r3, [pc, #236]	@ (800437c <xTaskIncrementTick+0x15c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	429a      	cmp	r2, r3
 8004294:	d348      	bcc.n	8004328 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004296:	4b36      	ldr	r3, [pc, #216]	@ (8004370 <xTaskIncrementTick+0x150>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d104      	bne.n	80042aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042a0:	4b36      	ldr	r3, [pc, #216]	@ (800437c <xTaskIncrementTick+0x15c>)
 80042a2:	f04f 32ff 	mov.w	r2, #4294967295
 80042a6:	601a      	str	r2, [r3, #0]
					break;
 80042a8:	e03e      	b.n	8004328 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042aa:	4b31      	ldr	r3, [pc, #196]	@ (8004370 <xTaskIncrementTick+0x150>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d203      	bcs.n	80042ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042c2:	4a2e      	ldr	r2, [pc, #184]	@ (800437c <xTaskIncrementTick+0x15c>)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80042c8:	e02e      	b.n	8004328 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	3304      	adds	r3, #4
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff fca1 	bl	8003c16 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d004      	beq.n	80042e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	3318      	adds	r3, #24
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fc98 	bl	8003c16 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ea:	2201      	movs	r2, #1
 80042ec:	409a      	lsls	r2, r3
 80042ee:	4b24      	ldr	r3, [pc, #144]	@ (8004380 <xTaskIncrementTick+0x160>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	4a22      	ldr	r2, [pc, #136]	@ (8004380 <xTaskIncrementTick+0x160>)
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4a1f      	ldr	r2, [pc, #124]	@ (8004384 <xTaskIncrementTick+0x164>)
 8004306:	441a      	add	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	3304      	adds	r3, #4
 800430c:	4619      	mov	r1, r3
 800430e:	4610      	mov	r0, r2
 8004310:	f7ff fc24 	bl	8003b5c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004318:	4b1b      	ldr	r3, [pc, #108]	@ (8004388 <xTaskIncrementTick+0x168>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431e:	429a      	cmp	r2, r3
 8004320:	d3b9      	bcc.n	8004296 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004322:	2301      	movs	r3, #1
 8004324:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004326:	e7b6      	b.n	8004296 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004328:	4b17      	ldr	r3, [pc, #92]	@ (8004388 <xTaskIncrementTick+0x168>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800432e:	4915      	ldr	r1, [pc, #84]	@ (8004384 <xTaskIncrementTick+0x164>)
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d901      	bls.n	8004344 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004340:	2301      	movs	r3, #1
 8004342:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004344:	4b11      	ldr	r3, [pc, #68]	@ (800438c <xTaskIncrementTick+0x16c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d007      	beq.n	800435c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800434c:	2301      	movs	r3, #1
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	e004      	b.n	800435c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004352:	4b0f      	ldr	r3, [pc, #60]	@ (8004390 <xTaskIncrementTick+0x170>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3301      	adds	r3, #1
 8004358:	4a0d      	ldr	r2, [pc, #52]	@ (8004390 <xTaskIncrementTick+0x170>)
 800435a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800435c:	697b      	ldr	r3, [r7, #20]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3718      	adds	r7, #24
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	200005b4 	.word	0x200005b4
 800436c:	20000590 	.word	0x20000590
 8004370:	20000544 	.word	0x20000544
 8004374:	20000548 	.word	0x20000548
 8004378:	200005a4 	.word	0x200005a4
 800437c:	200005ac 	.word	0x200005ac
 8004380:	20000594 	.word	0x20000594
 8004384:	20000490 	.word	0x20000490
 8004388:	2000048c 	.word	0x2000048c
 800438c:	200005a0 	.word	0x200005a0
 8004390:	2000059c 	.word	0x2000059c

08004394 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800439a:	4b27      	ldr	r3, [pc, #156]	@ (8004438 <vTaskSwitchContext+0xa4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043a2:	4b26      	ldr	r3, [pc, #152]	@ (800443c <vTaskSwitchContext+0xa8>)
 80043a4:	2201      	movs	r2, #1
 80043a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043a8:	e040      	b.n	800442c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80043aa:	4b24      	ldr	r3, [pc, #144]	@ (800443c <vTaskSwitchContext+0xa8>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b0:	4b23      	ldr	r3, [pc, #140]	@ (8004440 <vTaskSwitchContext+0xac>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	fab3 f383 	clz	r3, r3
 80043bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80043be:	7afb      	ldrb	r3, [r7, #11]
 80043c0:	f1c3 031f 	rsb	r3, r3, #31
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	491f      	ldr	r1, [pc, #124]	@ (8004444 <vTaskSwitchContext+0xb0>)
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10b      	bne.n	80043f2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	607b      	str	r3, [r7, #4]
}
 80043ec:	bf00      	nop
 80043ee:	bf00      	nop
 80043f0:	e7fd      	b.n	80043ee <vTaskSwitchContext+0x5a>
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4a11      	ldr	r2, [pc, #68]	@ (8004444 <vTaskSwitchContext+0xb0>)
 80043fe:	4413      	add	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	605a      	str	r2, [r3, #4]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	3308      	adds	r3, #8
 8004414:	429a      	cmp	r2, r3
 8004416:	d104      	bne.n	8004422 <vTaskSwitchContext+0x8e>
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	4a07      	ldr	r2, [pc, #28]	@ (8004448 <vTaskSwitchContext+0xb4>)
 800442a:	6013      	str	r3, [r2, #0]
}
 800442c:	bf00      	nop
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	200005b4 	.word	0x200005b4
 800443c:	200005a0 	.word	0x200005a0
 8004440:	20000594 	.word	0x20000594
 8004444:	20000490 	.word	0x20000490
 8004448:	2000048c 	.word	0x2000048c

0800444c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004454:	f000 f852 	bl	80044fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004458:	4b06      	ldr	r3, [pc, #24]	@ (8004474 <prvIdleTask+0x28>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d9f9      	bls.n	8004454 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004460:	4b05      	ldr	r3, [pc, #20]	@ (8004478 <prvIdleTask+0x2c>)
 8004462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004470:	e7f0      	b.n	8004454 <prvIdleTask+0x8>
 8004472:	bf00      	nop
 8004474:	20000490 	.word	0x20000490
 8004478:	e000ed04 	.word	0xe000ed04

0800447c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	e00c      	b.n	80044a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4a12      	ldr	r2, [pc, #72]	@ (80044dc <prvInitialiseTaskLists+0x60>)
 8004494:	4413      	add	r3, r2
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff fb33 	bl	8003b02 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3301      	adds	r3, #1
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b06      	cmp	r3, #6
 80044a6:	d9ef      	bls.n	8004488 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044a8:	480d      	ldr	r0, [pc, #52]	@ (80044e0 <prvInitialiseTaskLists+0x64>)
 80044aa:	f7ff fb2a 	bl	8003b02 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044ae:	480d      	ldr	r0, [pc, #52]	@ (80044e4 <prvInitialiseTaskLists+0x68>)
 80044b0:	f7ff fb27 	bl	8003b02 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044b4:	480c      	ldr	r0, [pc, #48]	@ (80044e8 <prvInitialiseTaskLists+0x6c>)
 80044b6:	f7ff fb24 	bl	8003b02 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044ba:	480c      	ldr	r0, [pc, #48]	@ (80044ec <prvInitialiseTaskLists+0x70>)
 80044bc:	f7ff fb21 	bl	8003b02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044c0:	480b      	ldr	r0, [pc, #44]	@ (80044f0 <prvInitialiseTaskLists+0x74>)
 80044c2:	f7ff fb1e 	bl	8003b02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044c6:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <prvInitialiseTaskLists+0x78>)
 80044c8:	4a05      	ldr	r2, [pc, #20]	@ (80044e0 <prvInitialiseTaskLists+0x64>)
 80044ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044cc:	4b0a      	ldr	r3, [pc, #40]	@ (80044f8 <prvInitialiseTaskLists+0x7c>)
 80044ce:	4a05      	ldr	r2, [pc, #20]	@ (80044e4 <prvInitialiseTaskLists+0x68>)
 80044d0:	601a      	str	r2, [r3, #0]
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000490 	.word	0x20000490
 80044e0:	2000051c 	.word	0x2000051c
 80044e4:	20000530 	.word	0x20000530
 80044e8:	2000054c 	.word	0x2000054c
 80044ec:	20000560 	.word	0x20000560
 80044f0:	20000578 	.word	0x20000578
 80044f4:	20000544 	.word	0x20000544
 80044f8:	20000548 	.word	0x20000548

080044fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004502:	e019      	b.n	8004538 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004504:	f000 fa10 	bl	8004928 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004508:	4b10      	ldr	r3, [pc, #64]	@ (800454c <prvCheckTasksWaitingTermination+0x50>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3304      	adds	r3, #4
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff fb7e 	bl	8003c16 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800451a:	4b0d      	ldr	r3, [pc, #52]	@ (8004550 <prvCheckTasksWaitingTermination+0x54>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3b01      	subs	r3, #1
 8004520:	4a0b      	ldr	r2, [pc, #44]	@ (8004550 <prvCheckTasksWaitingTermination+0x54>)
 8004522:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004524:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <prvCheckTasksWaitingTermination+0x58>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3b01      	subs	r3, #1
 800452a:	4a0a      	ldr	r2, [pc, #40]	@ (8004554 <prvCheckTasksWaitingTermination+0x58>)
 800452c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800452e:	f000 fa2d 	bl	800498c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f810 	bl	8004558 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004538:	4b06      	ldr	r3, [pc, #24]	@ (8004554 <prvCheckTasksWaitingTermination+0x58>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e1      	bne.n	8004504 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000560 	.word	0x20000560
 8004550:	2000058c 	.word	0x2000058c
 8004554:	20000574 	.word	0x20000574

08004558 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004566:	2b00      	cmp	r3, #0
 8004568:	d108      	bne.n	800457c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fb88 	bl	8004c84 <vPortFree>
				vPortFree( pxTCB );
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 fb85 	bl	8004c84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800457a:	e019      	b.n	80045b0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004582:	2b01      	cmp	r3, #1
 8004584:	d103      	bne.n	800458e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fb7c 	bl	8004c84 <vPortFree>
	}
 800458c:	e010      	b.n	80045b0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004594:	2b02      	cmp	r3, #2
 8004596:	d00b      	beq.n	80045b0 <prvDeleteTCB+0x58>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	60fb      	str	r3, [r7, #12]
}
 80045aa:	bf00      	nop
 80045ac:	bf00      	nop
 80045ae:	e7fd      	b.n	80045ac <prvDeleteTCB+0x54>
	}
 80045b0:	bf00      	nop
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045be:	4b0c      	ldr	r3, [pc, #48]	@ (80045f0 <prvResetNextTaskUnblockTime+0x38>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d104      	bne.n	80045d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045c8:	4b0a      	ldr	r3, [pc, #40]	@ (80045f4 <prvResetNextTaskUnblockTime+0x3c>)
 80045ca:	f04f 32ff 	mov.w	r2, #4294967295
 80045ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045d0:	e008      	b.n	80045e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d2:	4b07      	ldr	r3, [pc, #28]	@ (80045f0 <prvResetNextTaskUnblockTime+0x38>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4a04      	ldr	r2, [pc, #16]	@ (80045f4 <prvResetNextTaskUnblockTime+0x3c>)
 80045e2:	6013      	str	r3, [r2, #0]
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	20000544 	.word	0x20000544
 80045f4:	200005ac 	.word	0x200005ac

080045f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004602:	4b29      	ldr	r3, [pc, #164]	@ (80046a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004608:	4b28      	ldr	r3, [pc, #160]	@ (80046ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3304      	adds	r3, #4
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fb01 	bl	8003c16 <uxListRemove>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10b      	bne.n	8004632 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800461a:	4b24      	ldr	r3, [pc, #144]	@ (80046ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004620:	2201      	movs	r2, #1
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43da      	mvns	r2, r3
 8004628:	4b21      	ldr	r3, [pc, #132]	@ (80046b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4013      	ands	r3, r2
 800462e:	4a20      	ldr	r2, [pc, #128]	@ (80046b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004630:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004638:	d10a      	bne.n	8004650 <prvAddCurrentTaskToDelayedList+0x58>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004640:	4b1a      	ldr	r3, [pc, #104]	@ (80046ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3304      	adds	r3, #4
 8004646:	4619      	mov	r1, r3
 8004648:	481a      	ldr	r0, [pc, #104]	@ (80046b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800464a:	f7ff fa87 	bl	8003b5c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800464e:	e026      	b.n	800469e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004658:	4b14      	ldr	r3, [pc, #80]	@ (80046ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	429a      	cmp	r2, r3
 8004666:	d209      	bcs.n	800467c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004668:	4b13      	ldr	r3, [pc, #76]	@ (80046b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	4b0f      	ldr	r3, [pc, #60]	@ (80046ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3304      	adds	r3, #4
 8004672:	4619      	mov	r1, r3
 8004674:	4610      	mov	r0, r2
 8004676:	f7ff fa95 	bl	8003ba4 <vListInsert>
}
 800467a:	e010      	b.n	800469e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800467c:	4b0f      	ldr	r3, [pc, #60]	@ (80046bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	4b0a      	ldr	r3, [pc, #40]	@ (80046ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3304      	adds	r3, #4
 8004686:	4619      	mov	r1, r3
 8004688:	4610      	mov	r0, r2
 800468a:	f7ff fa8b 	bl	8003ba4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800468e:	4b0c      	ldr	r3, [pc, #48]	@ (80046c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	429a      	cmp	r2, r3
 8004696:	d202      	bcs.n	800469e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004698:	4a09      	ldr	r2, [pc, #36]	@ (80046c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	6013      	str	r3, [r2, #0]
}
 800469e:	bf00      	nop
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000590 	.word	0x20000590
 80046ac:	2000048c 	.word	0x2000048c
 80046b0:	20000594 	.word	0x20000594
 80046b4:	20000578 	.word	0x20000578
 80046b8:	20000548 	.word	0x20000548
 80046bc:	20000544 	.word	0x20000544
 80046c0:	200005ac 	.word	0x200005ac

080046c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3b04      	subs	r3, #4
 80046d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3b04      	subs	r3, #4
 80046e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f023 0201 	bic.w	r2, r3, #1
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3b04      	subs	r3, #4
 80046f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004728 <pxPortInitialiseStack+0x64>)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3b14      	subs	r3, #20
 80046fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3b04      	subs	r3, #4
 800470a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f06f 0202 	mvn.w	r2, #2
 8004712:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3b20      	subs	r3, #32
 8004718:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800471a:	68fb      	ldr	r3, [r7, #12]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	0800472d 	.word	0x0800472d

0800472c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004736:	4b13      	ldr	r3, [pc, #76]	@ (8004784 <prvTaskExitError+0x58>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473e:	d00b      	beq.n	8004758 <prvTaskExitError+0x2c>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	60fb      	str	r3, [r7, #12]
}
 8004752:	bf00      	nop
 8004754:	bf00      	nop
 8004756:	e7fd      	b.n	8004754 <prvTaskExitError+0x28>
	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	60bb      	str	r3, [r7, #8]
}
 800476a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800476c:	bf00      	nop
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0fc      	beq.n	800476e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	2000000c 	.word	0x2000000c
	...

08004790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004790:	4b07      	ldr	r3, [pc, #28]	@ (80047b0 <pxCurrentTCBConst2>)
 8004792:	6819      	ldr	r1, [r3, #0]
 8004794:	6808      	ldr	r0, [r1, #0]
 8004796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479a:	f380 8809 	msr	PSP, r0
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f04f 0000 	mov.w	r0, #0
 80047a6:	f380 8811 	msr	BASEPRI, r0
 80047aa:	4770      	bx	lr
 80047ac:	f3af 8000 	nop.w

080047b0 <pxCurrentTCBConst2>:
 80047b0:	2000048c 	.word	0x2000048c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop

080047b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80047b8:	4808      	ldr	r0, [pc, #32]	@ (80047dc <prvPortStartFirstTask+0x24>)
 80047ba:	6800      	ldr	r0, [r0, #0]
 80047bc:	6800      	ldr	r0, [r0, #0]
 80047be:	f380 8808 	msr	MSP, r0
 80047c2:	f04f 0000 	mov.w	r0, #0
 80047c6:	f380 8814 	msr	CONTROL, r0
 80047ca:	b662      	cpsie	i
 80047cc:	b661      	cpsie	f
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	df00      	svc	0
 80047d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80047da:	bf00      	nop
 80047dc:	e000ed08 	.word	0xe000ed08

080047e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047e6:	4b47      	ldr	r3, [pc, #284]	@ (8004904 <xPortStartScheduler+0x124>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a47      	ldr	r2, [pc, #284]	@ (8004908 <xPortStartScheduler+0x128>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d10b      	bne.n	8004808 <xPortStartScheduler+0x28>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	613b      	str	r3, [r7, #16]
}
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	e7fd      	b.n	8004804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004808:	4b3e      	ldr	r3, [pc, #248]	@ (8004904 <xPortStartScheduler+0x124>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a3f      	ldr	r2, [pc, #252]	@ (800490c <xPortStartScheduler+0x12c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d10b      	bne.n	800482a <xPortStartScheduler+0x4a>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	60fb      	str	r3, [r7, #12]
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	e7fd      	b.n	8004826 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800482a:	4b39      	ldr	r3, [pc, #228]	@ (8004910 <xPortStartScheduler+0x130>)
 800482c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	22ff      	movs	r2, #255	@ 0xff
 800483a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	b2db      	uxtb	r3, r3
 8004848:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800484c:	b2da      	uxtb	r2, r3
 800484e:	4b31      	ldr	r3, [pc, #196]	@ (8004914 <xPortStartScheduler+0x134>)
 8004850:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004852:	4b31      	ldr	r3, [pc, #196]	@ (8004918 <xPortStartScheduler+0x138>)
 8004854:	2207      	movs	r2, #7
 8004856:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004858:	e009      	b.n	800486e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800485a:	4b2f      	ldr	r3, [pc, #188]	@ (8004918 <xPortStartScheduler+0x138>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3b01      	subs	r3, #1
 8004860:	4a2d      	ldr	r2, [pc, #180]	@ (8004918 <xPortStartScheduler+0x138>)
 8004862:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	b2db      	uxtb	r3, r3
 800486c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800486e:	78fb      	ldrb	r3, [r7, #3]
 8004870:	b2db      	uxtb	r3, r3
 8004872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004876:	2b80      	cmp	r3, #128	@ 0x80
 8004878:	d0ef      	beq.n	800485a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800487a:	4b27      	ldr	r3, [pc, #156]	@ (8004918 <xPortStartScheduler+0x138>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f1c3 0307 	rsb	r3, r3, #7
 8004882:	2b04      	cmp	r3, #4
 8004884:	d00b      	beq.n	800489e <xPortStartScheduler+0xbe>
	__asm volatile
 8004886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	60bb      	str	r3, [r7, #8]
}
 8004898:	bf00      	nop
 800489a:	bf00      	nop
 800489c:	e7fd      	b.n	800489a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800489e:	4b1e      	ldr	r3, [pc, #120]	@ (8004918 <xPortStartScheduler+0x138>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004918 <xPortStartScheduler+0x138>)
 80048a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004918 <xPortStartScheduler+0x138>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80048b0:	4a19      	ldr	r2, [pc, #100]	@ (8004918 <xPortStartScheduler+0x138>)
 80048b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048bc:	4b17      	ldr	r3, [pc, #92]	@ (800491c <xPortStartScheduler+0x13c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a16      	ldr	r2, [pc, #88]	@ (800491c <xPortStartScheduler+0x13c>)
 80048c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80048c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048c8:	4b14      	ldr	r3, [pc, #80]	@ (800491c <xPortStartScheduler+0x13c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a13      	ldr	r2, [pc, #76]	@ (800491c <xPortStartScheduler+0x13c>)
 80048ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80048d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048d4:	f000 f8da 	bl	8004a8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048d8:	4b11      	ldr	r3, [pc, #68]	@ (8004920 <xPortStartScheduler+0x140>)
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80048de:	f000 f8f9 	bl	8004ad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80048e2:	4b10      	ldr	r3, [pc, #64]	@ (8004924 <xPortStartScheduler+0x144>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a0f      	ldr	r2, [pc, #60]	@ (8004924 <xPortStartScheduler+0x144>)
 80048e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80048ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048ee:	f7ff ff63 	bl	80047b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048f2:	f7ff fd4f 	bl	8004394 <vTaskSwitchContext>
	prvTaskExitError();
 80048f6:	f7ff ff19 	bl	800472c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	e000ed00 	.word	0xe000ed00
 8004908:	410fc271 	.word	0x410fc271
 800490c:	410fc270 	.word	0x410fc270
 8004910:	e000e400 	.word	0xe000e400
 8004914:	200005b8 	.word	0x200005b8
 8004918:	200005bc 	.word	0x200005bc
 800491c:	e000ed20 	.word	0xe000ed20
 8004920:	2000000c 	.word	0x2000000c
 8004924:	e000ef34 	.word	0xe000ef34

08004928 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	607b      	str	r3, [r7, #4]
}
 8004940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004942:	4b10      	ldr	r3, [pc, #64]	@ (8004984 <vPortEnterCritical+0x5c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3301      	adds	r3, #1
 8004948:	4a0e      	ldr	r2, [pc, #56]	@ (8004984 <vPortEnterCritical+0x5c>)
 800494a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800494c:	4b0d      	ldr	r3, [pc, #52]	@ (8004984 <vPortEnterCritical+0x5c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d110      	bne.n	8004976 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004954:	4b0c      	ldr	r3, [pc, #48]	@ (8004988 <vPortEnterCritical+0x60>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <vPortEnterCritical+0x4e>
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	603b      	str	r3, [r7, #0]
}
 8004970:	bf00      	nop
 8004972:	bf00      	nop
 8004974:	e7fd      	b.n	8004972 <vPortEnterCritical+0x4a>
	}
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	2000000c 	.word	0x2000000c
 8004988:	e000ed04 	.word	0xe000ed04

0800498c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004992:	4b12      	ldr	r3, [pc, #72]	@ (80049dc <vPortExitCritical+0x50>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10b      	bne.n	80049b2 <vPortExitCritical+0x26>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	607b      	str	r3, [r7, #4]
}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	e7fd      	b.n	80049ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049b2:	4b0a      	ldr	r3, [pc, #40]	@ (80049dc <vPortExitCritical+0x50>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	4a08      	ldr	r2, [pc, #32]	@ (80049dc <vPortExitCritical+0x50>)
 80049ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049bc:	4b07      	ldr	r3, [pc, #28]	@ (80049dc <vPortExitCritical+0x50>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <vPortExitCritical+0x44>
 80049c4:	2300      	movs	r3, #0
 80049c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	2000000c 	.word	0x2000000c

080049e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049e0:	f3ef 8009 	mrs	r0, PSP
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	4b15      	ldr	r3, [pc, #84]	@ (8004a40 <pxCurrentTCBConst>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	f01e 0f10 	tst.w	lr, #16
 80049f0:	bf08      	it	eq
 80049f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80049f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fa:	6010      	str	r0, [r2, #0]
 80049fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004a04:	f380 8811 	msr	BASEPRI, r0
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f7ff fcc0 	bl	8004394 <vTaskSwitchContext>
 8004a14:	f04f 0000 	mov.w	r0, #0
 8004a18:	f380 8811 	msr	BASEPRI, r0
 8004a1c:	bc09      	pop	{r0, r3}
 8004a1e:	6819      	ldr	r1, [r3, #0]
 8004a20:	6808      	ldr	r0, [r1, #0]
 8004a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a26:	f01e 0f10 	tst.w	lr, #16
 8004a2a:	bf08      	it	eq
 8004a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a30:	f380 8809 	msr	PSP, r0
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	f3af 8000 	nop.w

08004a40 <pxCurrentTCBConst>:
 8004a40:	2000048c 	.word	0x2000048c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop

08004a48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	607b      	str	r3, [r7, #4]
}
 8004a60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a62:	f7ff fbdd 	bl	8004220 <xTaskIncrementTick>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a6c:	4b06      	ldr	r3, [pc, #24]	@ (8004a88 <SysTick_Handler+0x40>)
 8004a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	2300      	movs	r3, #0
 8004a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	f383 8811 	msr	BASEPRI, r3
}
 8004a7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	e000ed04 	.word	0xe000ed04

08004a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac0 <vPortSetupTimerInterrupt+0x34>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a96:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <vPortSetupTimerInterrupt+0x38>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac8 <vPortSetupTimerInterrupt+0x3c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8004acc <vPortSetupTimerInterrupt+0x40>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	099b      	lsrs	r3, r3, #6
 8004aa8:	4a09      	ldr	r2, [pc, #36]	@ (8004ad0 <vPortSetupTimerInterrupt+0x44>)
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004aae:	4b04      	ldr	r3, [pc, #16]	@ (8004ac0 <vPortSetupTimerInterrupt+0x34>)
 8004ab0:	2207      	movs	r2, #7
 8004ab2:	601a      	str	r2, [r3, #0]
}
 8004ab4:	bf00      	nop
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	e000e010 	.word	0xe000e010
 8004ac4:	e000e018 	.word	0xe000e018
 8004ac8:	20000000 	.word	0x20000000
 8004acc:	10624dd3 	.word	0x10624dd3
 8004ad0:	e000e014 	.word	0xe000e014

08004ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004ae4 <vPortEnableVFP+0x10>
 8004ad8:	6801      	ldr	r1, [r0, #0]
 8004ada:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004ade:	6001      	str	r1, [r0, #0]
 8004ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ae2:	bf00      	nop
 8004ae4:	e000ed88 	.word	0xe000ed88

08004ae8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	@ 0x28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004af4:	f7ff fae8 	bl	80040c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004af8:	4b5c      	ldr	r3, [pc, #368]	@ (8004c6c <pvPortMalloc+0x184>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b00:	f000 f924 	bl	8004d4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b04:	4b5a      	ldr	r3, [pc, #360]	@ (8004c70 <pvPortMalloc+0x188>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f040 8095 	bne.w	8004c3c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01e      	beq.n	8004b56 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004b18:	2208      	movs	r2, #8
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d015      	beq.n	8004b56 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f023 0307 	bic.w	r3, r3, #7
 8004b30:	3308      	adds	r3, #8
 8004b32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00b      	beq.n	8004b56 <pvPortMalloc+0x6e>
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	617b      	str	r3, [r7, #20]
}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	e7fd      	b.n	8004b52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d06f      	beq.n	8004c3c <pvPortMalloc+0x154>
 8004b5c:	4b45      	ldr	r3, [pc, #276]	@ (8004c74 <pvPortMalloc+0x18c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d86a      	bhi.n	8004c3c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b66:	4b44      	ldr	r3, [pc, #272]	@ (8004c78 <pvPortMalloc+0x190>)
 8004b68:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b6a:	4b43      	ldr	r3, [pc, #268]	@ (8004c78 <pvPortMalloc+0x190>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b70:	e004      	b.n	8004b7c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b74:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d903      	bls.n	8004b8e <pvPortMalloc+0xa6>
 8004b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f1      	bne.n	8004b72 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b8e:	4b37      	ldr	r3, [pc, #220]	@ (8004c6c <pvPortMalloc+0x184>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d051      	beq.n	8004c3c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2208      	movs	r2, #8
 8004b9e:	4413      	add	r3, r2
 8004ba0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	1ad2      	subs	r2, r2, r3
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d920      	bls.n	8004bfc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00b      	beq.n	8004be4 <pvPortMalloc+0xfc>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	613b      	str	r3, [r7, #16]
}
 8004bde:	bf00      	nop
 8004be0:	bf00      	nop
 8004be2:	e7fd      	b.n	8004be0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	1ad2      	subs	r2, r2, r3
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bf6:	69b8      	ldr	r0, [r7, #24]
 8004bf8:	f000 f90a 	bl	8004e10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8004c74 <pvPortMalloc+0x18c>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	4a1b      	ldr	r2, [pc, #108]	@ (8004c74 <pvPortMalloc+0x18c>)
 8004c08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8004c74 <pvPortMalloc+0x18c>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004c7c <pvPortMalloc+0x194>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d203      	bcs.n	8004c1e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c16:	4b17      	ldr	r3, [pc, #92]	@ (8004c74 <pvPortMalloc+0x18c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a18      	ldr	r2, [pc, #96]	@ (8004c7c <pvPortMalloc+0x194>)
 8004c1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	4b13      	ldr	r3, [pc, #76]	@ (8004c70 <pvPortMalloc+0x188>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c32:	4b13      	ldr	r3, [pc, #76]	@ (8004c80 <pvPortMalloc+0x198>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3301      	adds	r3, #1
 8004c38:	4a11      	ldr	r2, [pc, #68]	@ (8004c80 <pvPortMalloc+0x198>)
 8004c3a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c3c:	f7ff fa52 	bl	80040e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <pvPortMalloc+0x17a>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	60fb      	str	r3, [r7, #12]
}
 8004c5c:	bf00      	nop
 8004c5e:	bf00      	nop
 8004c60:	e7fd      	b.n	8004c5e <pvPortMalloc+0x176>
	return pvReturn;
 8004c62:	69fb      	ldr	r3, [r7, #28]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3728      	adds	r7, #40	@ 0x28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	200041c8 	.word	0x200041c8
 8004c70:	200041dc 	.word	0x200041dc
 8004c74:	200041cc 	.word	0x200041cc
 8004c78:	200041c0 	.word	0x200041c0
 8004c7c:	200041d0 	.word	0x200041d0
 8004c80:	200041d4 	.word	0x200041d4

08004c84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d04f      	beq.n	8004d36 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c96:	2308      	movs	r3, #8
 8004c98:	425b      	negs	r3, r3
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	4b25      	ldr	r3, [pc, #148]	@ (8004d40 <vPortFree+0xbc>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4013      	ands	r3, r2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10b      	bne.n	8004cca <vPortFree+0x46>
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	60fb      	str	r3, [r7, #12]
}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop
 8004cc8:	e7fd      	b.n	8004cc6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <vPortFree+0x66>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	60bb      	str	r3, [r7, #8]
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop
 8004ce8:	e7fd      	b.n	8004ce6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	4b14      	ldr	r3, [pc, #80]	@ (8004d40 <vPortFree+0xbc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01e      	beq.n	8004d36 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d11a      	bne.n	8004d36 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	4b0e      	ldr	r3, [pc, #56]	@ (8004d40 <vPortFree+0xbc>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	401a      	ands	r2, r3
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d10:	f7ff f9da 	bl	80040c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	4b0a      	ldr	r3, [pc, #40]	@ (8004d44 <vPortFree+0xc0>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	4a09      	ldr	r2, [pc, #36]	@ (8004d44 <vPortFree+0xc0>)
 8004d20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d22:	6938      	ldr	r0, [r7, #16]
 8004d24:	f000 f874 	bl	8004e10 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d28:	4b07      	ldr	r3, [pc, #28]	@ (8004d48 <vPortFree+0xc4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	4a06      	ldr	r2, [pc, #24]	@ (8004d48 <vPortFree+0xc4>)
 8004d30:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d32:	f7ff f9d7 	bl	80040e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d36:	bf00      	nop
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	200041dc 	.word	0x200041dc
 8004d44:	200041cc 	.word	0x200041cc
 8004d48:	200041d8 	.word	0x200041d8

08004d4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d52:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004d56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d58:	4b27      	ldr	r3, [pc, #156]	@ (8004df8 <prvHeapInit+0xac>)
 8004d5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00c      	beq.n	8004d80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3307      	adds	r3, #7
 8004d6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0307 	bic.w	r3, r3, #7
 8004d72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8004df8 <prvHeapInit+0xac>)
 8004d7c:	4413      	add	r3, r2
 8004d7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d84:	4a1d      	ldr	r2, [pc, #116]	@ (8004dfc <prvHeapInit+0xb0>)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8004dfc <prvHeapInit+0xb0>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	4413      	add	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d98:	2208      	movs	r2, #8
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	1a9b      	subs	r3, r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0307 	bic.w	r3, r3, #7
 8004da6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4a15      	ldr	r2, [pc, #84]	@ (8004e00 <prvHeapInit+0xb4>)
 8004dac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004dae:	4b14      	ldr	r3, [pc, #80]	@ (8004e00 <prvHeapInit+0xb4>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2200      	movs	r2, #0
 8004db4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004db6:	4b12      	ldr	r3, [pc, #72]	@ (8004e00 <prvHeapInit+0xb4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	1ad2      	subs	r2, r2, r3
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8004e00 <prvHeapInit+0xb4>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8004e04 <prvHeapInit+0xb8>)
 8004dda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4a09      	ldr	r2, [pc, #36]	@ (8004e08 <prvHeapInit+0xbc>)
 8004de2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004de4:	4b09      	ldr	r3, [pc, #36]	@ (8004e0c <prvHeapInit+0xc0>)
 8004de6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004dea:	601a      	str	r2, [r3, #0]
}
 8004dec:	bf00      	nop
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	200005c0 	.word	0x200005c0
 8004dfc:	200041c0 	.word	0x200041c0
 8004e00:	200041c8 	.word	0x200041c8
 8004e04:	200041d0 	.word	0x200041d0
 8004e08:	200041cc 	.word	0x200041cc
 8004e0c:	200041dc 	.word	0x200041dc

08004e10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e18:	4b28      	ldr	r3, [pc, #160]	@ (8004ebc <prvInsertBlockIntoFreeList+0xac>)
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	e002      	b.n	8004e24 <prvInsertBlockIntoFreeList+0x14>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d8f7      	bhi.n	8004e1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	4413      	add	r3, r2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d108      	bne.n	8004e52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	441a      	add	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	441a      	add	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d118      	bne.n	8004e98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4b15      	ldr	r3, [pc, #84]	@ (8004ec0 <prvInsertBlockIntoFreeList+0xb0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d00d      	beq.n	8004e8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	441a      	add	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	e008      	b.n	8004ea0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec0 <prvInsertBlockIntoFreeList+0xb0>)
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	e003      	b.n	8004ea0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d002      	beq.n	8004eae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eae:	bf00      	nop
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	200041c0 	.word	0x200041c0
 8004ec0:	200041c8 	.word	0x200041c8

08004ec4 <memset>:
 8004ec4:	4402      	add	r2, r0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d100      	bne.n	8004ece <memset+0xa>
 8004ecc:	4770      	bx	lr
 8004ece:	f803 1b01 	strb.w	r1, [r3], #1
 8004ed2:	e7f9      	b.n	8004ec8 <memset+0x4>

08004ed4 <__libc_init_array>:
 8004ed4:	b570      	push	{r4, r5, r6, lr}
 8004ed6:	4d0d      	ldr	r5, [pc, #52]	@ (8004f0c <__libc_init_array+0x38>)
 8004ed8:	4c0d      	ldr	r4, [pc, #52]	@ (8004f10 <__libc_init_array+0x3c>)
 8004eda:	1b64      	subs	r4, r4, r5
 8004edc:	10a4      	asrs	r4, r4, #2
 8004ede:	2600      	movs	r6, #0
 8004ee0:	42a6      	cmp	r6, r4
 8004ee2:	d109      	bne.n	8004ef8 <__libc_init_array+0x24>
 8004ee4:	4d0b      	ldr	r5, [pc, #44]	@ (8004f14 <__libc_init_array+0x40>)
 8004ee6:	4c0c      	ldr	r4, [pc, #48]	@ (8004f18 <__libc_init_array+0x44>)
 8004ee8:	f000 f818 	bl	8004f1c <_init>
 8004eec:	1b64      	subs	r4, r4, r5
 8004eee:	10a4      	asrs	r4, r4, #2
 8004ef0:	2600      	movs	r6, #0
 8004ef2:	42a6      	cmp	r6, r4
 8004ef4:	d105      	bne.n	8004f02 <__libc_init_array+0x2e>
 8004ef6:	bd70      	pop	{r4, r5, r6, pc}
 8004ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004efc:	4798      	blx	r3
 8004efe:	3601      	adds	r6, #1
 8004f00:	e7ee      	b.n	8004ee0 <__libc_init_array+0xc>
 8004f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f06:	4798      	blx	r3
 8004f08:	3601      	adds	r6, #1
 8004f0a:	e7f2      	b.n	8004ef2 <__libc_init_array+0x1e>
 8004f0c:	08005000 	.word	0x08005000
 8004f10:	08005000 	.word	0x08005000
 8004f14:	08005000 	.word	0x08005000
 8004f18:	08005004 	.word	0x08005004

08004f1c <_init>:
 8004f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1e:	bf00      	nop
 8004f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f22:	bc08      	pop	{r3}
 8004f24:	469e      	mov	lr, r3
 8004f26:	4770      	bx	lr

08004f28 <_fini>:
 8004f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2a:	bf00      	nop
 8004f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2e:	bc08      	pop	{r3}
 8004f30:	469e      	mov	lr, r3
 8004f32:	4770      	bx	lr
