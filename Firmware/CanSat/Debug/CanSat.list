
CanSat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fd4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08006174  08006174  00007174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006238  08006238  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006238  08006238  00007238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006240  08006240  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006240  08006240  00007240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006244  08006244  00007244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006248  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042d8  20000010  08006258  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200042e8  08006258  000082e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123a9  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000340a  00000000  00000000  0001a3e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  0001d7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e30  00000000  00000000  0001ea88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181e0  00000000  00000000  0001f8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b2d  00000000  00000000  00037a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000964ca  00000000  00000000  0004d5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3a8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b0c  00000000  00000000  000e3ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e85e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800615c 	.word	0x0800615c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800615c 	.word	0x0800615c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <task_init_1ms>:

/**
  * @fn  	task_init_1ms
  * @brief  Inicializaciones para tarea de 1 milisegundo
  */
void task_init_1ms(void){
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <task_1ms>:

/**
  * @fn  	task_1ms
  * @brief  Ejecucion de tareas de 1 milisegundo
  */
void task_1ms(void){
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0
	NRF24_StateMachine();
 80004e2:	f000 fe67 	bl	80011b4 <NRF24_StateMachine>
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}

080004ea <task_init_10ms>:

/**
  * @fn  	task_init_10ms
  * @brief  Inicializaciones para tarea de 10 milisegundos
  */
void task_init_10ms(void){
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <task_10ms>:

/**
  * @fn  	task_10ms
  * @brief  Ejecucion de tareas de 10 milisegundos
  */
void task_10ms(void){
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <task_init_100ms>:

/**
  * @fn  	task_init_100ms
  * @brief  Inicializaciones para tarea de 100 milisegundos
  */
void task_init_100ms(void){
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <task_100ms>:

/**
  * @fn  	task_100ms
  * @brief  Ejecucion de tareas de 100 milisegundos
  */
void task_100ms(void){
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <task_init_1000ms>:

/**
  * @fn  	task_init_1000ms
  * @brief  Inicializaciones para tarea de 1000 milisegundos
  */
void task_init_1000ms(void){
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0

}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <task_1000ms>:

/**
  * @fn  	task_1000ms
  * @brief  Ejecucion de tareas de 1000 milisegundos
  */
void task_1000ms(void){
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
	...

08000540 <BMP280_write>:

uint8_t BMP280_ID;
uint8_t BMP280_measuring;
uint8_t BMP280_im_update;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	460a      	mov	r2, r1
 800054a:	71fb      	strb	r3, [r7, #7]
 800054c:	4613      	mov	r3, r2
 800054e:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000556:	480f      	ldr	r0, [pc, #60]	@ (8000594 <BMP280_write+0x54>)
 8000558:	f002 f960 	bl	800281c <HAL_GPIO_WritePin>
	Address &= 0x7F;
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000562:	b2db      	uxtb	r3, r3
 8000564:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000566:	1df9      	adds	r1, r7, #7
 8000568:	2364      	movs	r3, #100	@ 0x64
 800056a:	2201      	movs	r2, #1
 800056c:	480a      	ldr	r0, [pc, #40]	@ (8000598 <BMP280_write+0x58>)
 800056e:	f002 feae 	bl	80032ce <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8000572:	1db9      	adds	r1, r7, #6
 8000574:	2364      	movs	r3, #100	@ 0x64
 8000576:	2201      	movs	r2, #1
 8000578:	4807      	ldr	r0, [pc, #28]	@ (8000598 <BMP280_write+0x58>)
 800057a:	f002 fea8 	bl	80032ce <HAL_SPI_Transmit>

	BMP280_unselect();
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000584:	4803      	ldr	r0, [pc, #12]	@ (8000594 <BMP280_write+0x54>)
 8000586:	f002 f949 	bl	800281c <HAL_GPIO_WritePin>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40020000 	.word	0x40020000
 8000598:	200003d0 	.word	0x200003d0

0800059c <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005b6:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <BMP280_read+0x54>)
 80005b8:	f002 f930 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 80005bc:	f107 010f 	add.w	r1, r7, #15
 80005c0:	2364      	movs	r3, #100	@ 0x64
 80005c2:	2201      	movs	r2, #1
 80005c4:	480b      	ldr	r0, [pc, #44]	@ (80005f4 <BMP280_read+0x58>)
 80005c6:	f002 fe82 	bl	80032ce <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 80005ca:	f107 010f 	add.w	r1, r7, #15
 80005ce:	2364      	movs	r3, #100	@ 0x64
 80005d0:	2201      	movs	r2, #1
 80005d2:	4808      	ldr	r0, [pc, #32]	@ (80005f4 <BMP280_read+0x58>)
 80005d4:	f002 ffbe 	bl	8003554 <HAL_SPI_Receive>
	BMP280_unselect();
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005de:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <BMP280_read+0x54>)
 80005e0:	f002 f91c 	bl	800281c <HAL_GPIO_WritePin>

	return Buffer;
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40020000 	.word	0x40020000
 80005f4:	200003d0 	.word	0x200003d0

080005f8 <BMP280_config>:

void BMP280_config(void){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 80005fc:	2157      	movs	r1, #87	@ 0x57
 80005fe:	20f4      	movs	r0, #244	@ 0xf4
 8000600:	f7ff ff9e 	bl	8000540 <BMP280_write>
	BMP280_write(config, 0x10);
 8000604:	2110      	movs	r1, #16
 8000606:	20f5      	movs	r0, #245	@ 0xf5
 8000608:	f7ff ff9a 	bl	8000540 <BMP280_write>
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}

08000610 <BMP280_init>:
	uint8_t Buffer   = BMP280_read(status);
	BMP280_im_update = (Buffer&0x01);
	BMP280_measuring = (Buffer&0x08)>>3;
}

void BMP280_init(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8000614:	2201      	movs	r2, #1
 8000616:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800061a:	480a      	ldr	r0, [pc, #40]	@ (8000644 <BMP280_init+0x34>)
 800061c:	f002 f8fe 	bl	800281c <HAL_GPIO_WritePin>
	BMP280_config();
 8000620:	f7ff ffea 	bl	80005f8 <BMP280_config>
	BMP280_ID = BMP280_read(ctrl_meas);
 8000624:	20f4      	movs	r0, #244	@ 0xf4
 8000626:	f7ff ffb9 	bl	800059c <BMP280_read>
 800062a:	4603      	mov	r3, r0
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <BMP280_init+0x38>)
 8000630:	701a      	strb	r2, [r3, #0]
	BMP280_ID = BMP280_read(config);
 8000632:	20f5      	movs	r0, #245	@ 0xf5
 8000634:	f7ff ffb2 	bl	800059c <BMP280_read>
 8000638:	4603      	mov	r3, r0
 800063a:	461a      	mov	r2, r3
 800063c:	4b02      	ldr	r3, [pc, #8]	@ (8000648 <BMP280_init+0x38>)
 800063e:	701a      	strb	r2, [r3, #0]
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40020000 	.word	0x40020000
 8000648:	2000002c 	.word	0x2000002c

0800064c <NRF24_write>:
uint8_t NRF24_mode;

uint8_t TxBuffer[32];
uint8_t RxBuffer[32];

void NRF24_write(uint8_t Adr, uint8_t data){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	460a      	mov	r2, r1
 8000656:	71fb      	strb	r3, [r7, #7]
 8000658:	4613      	mov	r3, r2
 800065a:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f043 0320 	orr.w	r3, r3, #32
 8000662:	b2db      	uxtb	r3, r3
 8000664:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800066c:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <NRF24_write+0x54>)
 800066e:	f002 f8d5 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000672:	1dfb      	adds	r3, r7, #7
 8000674:	2201      	movs	r2, #1
 8000676:	4619      	mov	r1, r3
 8000678:	480a      	ldr	r0, [pc, #40]	@ (80006a4 <NRF24_write+0x58>)
 800067a:	f003 fa33 	bl	8003ae4 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &data, 1);
 800067e:	1dbb      	adds	r3, r7, #6
 8000680:	2201      	movs	r2, #1
 8000682:	4619      	mov	r1, r3
 8000684:	4807      	ldr	r0, [pc, #28]	@ (80006a4 <NRF24_write+0x58>)
 8000686:	f003 fa2d 	bl	8003ae4 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000690:	4803      	ldr	r0, [pc, #12]	@ (80006a0 <NRF24_write+0x54>)
 8000692:	f002 f8c3 	bl	800281c <HAL_GPIO_WritePin>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40020400 	.word	0x40020400
 80006a4:	20000378 	.word	0x20000378

080006a8 <NRF24_Addr_write>:

void NRF24_Addr_write(uint8_t Adr,uint8_t *ADDRESS){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
	Adr |= W_REGISTER;
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	f043 0320 	orr.w	r3, r3, #32
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[5];
	buffer[0] = ADDRESS[4];
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	791b      	ldrb	r3, [r3, #4]
 80006c2:	723b      	strb	r3, [r7, #8]
	buffer[1] = ADDRESS[3];
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	78db      	ldrb	r3, [r3, #3]
 80006c8:	727b      	strb	r3, [r7, #9]
	buffer[2] = ADDRESS[2];
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	789b      	ldrb	r3, [r3, #2]
 80006ce:	72bb      	strb	r3, [r7, #10]
	buffer[3] = ADDRESS[1];
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	785b      	ldrb	r3, [r3, #1]
 80006d4:	72fb      	strb	r3, [r7, #11]
	buffer[4] = ADDRESS[0];
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	733b      	strb	r3, [r7, #12]

	NRF24_select();
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006e2:	4812      	ldr	r0, [pc, #72]	@ (800072c <NRF24_Addr_write+0x84>)
 80006e4:	f002 f89a 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 80006e8:	1dfb      	adds	r3, r7, #7
 80006ea:	2201      	movs	r2, #1
 80006ec:	4619      	mov	r1, r3
 80006ee:	4810      	ldr	r0, [pc, #64]	@ (8000730 <NRF24_Addr_write+0x88>)
 80006f0:	f003 f9f8 	bl	8003ae4 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e00b      	b.n	8000712 <NRF24_Addr_write+0x6a>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &buffer[n], 1);
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	f107 0208 	add.w	r2, r7, #8
 8000700:	4413      	add	r3, r2
 8000702:	2201      	movs	r2, #1
 8000704:	4619      	mov	r1, r3
 8000706:	480a      	ldr	r0, [pc, #40]	@ (8000730 <NRF24_Addr_write+0x88>)
 8000708:	f003 f9ec 	bl	8003ae4 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	3301      	adds	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	2b04      	cmp	r3, #4
 8000716:	d9f0      	bls.n	80006fa <NRF24_Addr_write+0x52>
	}

	NRF24_unselect();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800071e:	4803      	ldr	r0, [pc, #12]	@ (800072c <NRF24_Addr_write+0x84>)
 8000720:	f002 f87c 	bl	800281c <HAL_GPIO_WritePin>

}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40020400 	.word	0x40020400
 8000730:	20000378 	.word	0x20000378

08000734 <NRF24_read>:

uint8_t NRF24_read(uint8_t Adr){
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	uint8_t Replay;
	NRF24_select();
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000744:	480d      	ldr	r0, [pc, #52]	@ (800077c <NRF24_read+0x48>)
 8000746:	f002 f869 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	2201      	movs	r2, #1
 800074e:	4619      	mov	r1, r3
 8000750:	480b      	ldr	r0, [pc, #44]	@ (8000780 <NRF24_read+0x4c>)
 8000752:	f003 f9c7 	bl	8003ae4 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(SPI_NRF24, &Replay, 1);
 8000756:	f107 030f 	add.w	r3, r7, #15
 800075a:	2201      	movs	r2, #1
 800075c:	4619      	mov	r1, r3
 800075e:	4808      	ldr	r0, [pc, #32]	@ (8000780 <NRF24_read+0x4c>)
 8000760:	f003 fa72 	bl	8003c48 <HAL_SPI_Receive_DMA>
	NRF24_unselect();
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800076a:	4804      	ldr	r0, [pc, #16]	@ (800077c <NRF24_read+0x48>)
 800076c:	f002 f856 	bl	800281c <HAL_GPIO_WritePin>
	return Replay;
 8000770:	7bfb      	ldrb	r3, [r7, #15]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40020400 	.word	0x40020400
 8000780:	20000378 	.word	0x20000378

08000784 <NRF24_Addr_read>:

void NRF24_Addr_read(uint8_t Adr){
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[5];
	NRF24_select();
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000794:	4836      	ldr	r0, [pc, #216]	@ (8000870 <NRF24_Addr_read+0xec>)
 8000796:	f002 f841 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	2201      	movs	r2, #1
 800079e:	4619      	mov	r1, r3
 80007a0:	4834      	ldr	r0, [pc, #208]	@ (8000874 <NRF24_Addr_read+0xf0>)
 80007a2:	f003 f99f 	bl	8003ae4 <HAL_SPI_Transmit_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	73fb      	strb	r3, [r7, #15]
 80007aa:	e00b      	b.n	80007c4 <NRF24_Addr_read+0x40>
		HAL_SPI_Receive_DMA(SPI_NRF24, &Buffer[i], 1);
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	f107 0208 	add.w	r2, r7, #8
 80007b2:	4413      	add	r3, r2
 80007b4:	2201      	movs	r2, #1
 80007b6:	4619      	mov	r1, r3
 80007b8:	482e      	ldr	r0, [pc, #184]	@ (8000874 <NRF24_Addr_read+0xf0>)
 80007ba:	f003 fa45 	bl	8003c48 <HAL_SPI_Receive_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	3301      	adds	r3, #1
 80007c2:	73fb      	strb	r3, [r7, #15]
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	d9f0      	bls.n	80007ac <NRF24_Addr_read+0x28>
	}
	NRF24_unselect();
 80007ca:	2201      	movs	r2, #1
 80007cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007d0:	4827      	ldr	r0, [pc, #156]	@ (8000870 <NRF24_Addr_read+0xec>)
 80007d2:	f002 f823 	bl	800281c <HAL_GPIO_WritePin>
	switch (Adr) {
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b10      	cmp	r3, #16
 80007da:	d030      	beq.n	800083e <NRF24_Addr_read+0xba>
 80007dc:	2b10      	cmp	r3, #16
 80007de:	dc43      	bgt.n	8000868 <NRF24_Addr_read+0xe4>
 80007e0:	2b0a      	cmp	r3, #10
 80007e2:	d002      	beq.n	80007ea <NRF24_Addr_read+0x66>
 80007e4:	2b0b      	cmp	r3, #11
 80007e6:	d015      	beq.n	8000814 <NRF24_Addr_read+0x90>
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
			break;
	}
}
 80007e8:	e03e      	b.n	8000868 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[4]=Buffer[0];
 80007ea:	7a3a      	ldrb	r2, [r7, #8]
 80007ec:	4b22      	ldr	r3, [pc, #136]	@ (8000878 <NRF24_Addr_read+0xf4>)
 80007ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[3]=Buffer[1];
 80007f2:	7a7a      	ldrb	r2, [r7, #9]
 80007f4:	4b20      	ldr	r3, [pc, #128]	@ (8000878 <NRF24_Addr_read+0xf4>)
 80007f6:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[2]=Buffer[2];
 80007fa:	7aba      	ldrb	r2, [r7, #10]
 80007fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <NRF24_Addr_read+0xf4>)
 80007fe:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[1]=Buffer[3];
 8000802:	7afa      	ldrb	r2, [r7, #11]
 8000804:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <NRF24_Addr_read+0xf4>)
 8000806:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[0]=Buffer[4];
 800080a:	7b3a      	ldrb	r2, [r7, #12]
 800080c:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <NRF24_Addr_read+0xf4>)
 800080e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
			break;
 8000812:	e029      	b.n	8000868 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[4]=Buffer[0];
 8000814:	7a3a      	ldrb	r2, [r7, #8]
 8000816:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <NRF24_Addr_read+0xf4>)
 8000818:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[3]=Buffer[1];
 800081c:	7a7a      	ldrb	r2, [r7, #9]
 800081e:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <NRF24_Addr_read+0xf4>)
 8000820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[2]=Buffer[2];
 8000824:	7aba      	ldrb	r2, [r7, #10]
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <NRF24_Addr_read+0xf4>)
 8000828:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[1]=Buffer[3];
 800082c:	7afa      	ldrb	r2, [r7, #11]
 800082e:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <NRF24_Addr_read+0xf4>)
 8000830:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[0]=Buffer[4];
 8000834:	7b3a      	ldrb	r2, [r7, #12]
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <NRF24_Addr_read+0xf4>)
 8000838:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			break;
 800083c:	e014      	b.n	8000868 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.TX_ADDR[4]=Buffer[0];
 800083e:	7a3a      	ldrb	r2, [r7, #8]
 8000840:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <NRF24_Addr_read+0xf4>)
 8000842:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
			NRF24_Configurations_Struct.Actual.TX_ADDR[3]=Buffer[1];
 8000846:	7a7a      	ldrb	r2, [r7, #9]
 8000848:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <NRF24_Addr_read+0xf4>)
 800084a:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
 800084e:	7aba      	ldrb	r2, [r7, #10]
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <NRF24_Addr_read+0xf4>)
 8000852:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
 8000856:	7afa      	ldrb	r2, [r7, #11]
 8000858:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <NRF24_Addr_read+0xf4>)
 800085a:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
 800085e:	7b3a      	ldrb	r2, [r7, #12]
 8000860:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <NRF24_Addr_read+0xf4>)
 8000862:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
			break;
 8000866:	bf00      	nop
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40020400 	.word	0x40020400
 8000874:	20000378 	.word	0x20000378
 8000878:	20000030 	.word	0x20000030

0800087c <NRF24_FlushTxFIFO>:

void NRF24_FlushTxFIFO(void){
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_TX;
 8000882:	23e1      	movs	r3, #225	@ 0xe1
 8000884:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800088c:	4809      	ldr	r0, [pc, #36]	@ (80008b4 <NRF24_FlushTxFIFO+0x38>)
 800088e:	f001 ffc5 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	2201      	movs	r2, #1
 8000896:	4619      	mov	r1, r3
 8000898:	4807      	ldr	r0, [pc, #28]	@ (80008b8 <NRF24_FlushTxFIFO+0x3c>)
 800089a:	f003 f923 	bl	8003ae4 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008a4:	4803      	ldr	r0, [pc, #12]	@ (80008b4 <NRF24_FlushTxFIFO+0x38>)
 80008a6:	f001 ffb9 	bl	800281c <HAL_GPIO_WritePin>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40020400 	.word	0x40020400
 80008b8:	20000378 	.word	0x20000378

080008bc <NRF24_FlushRxFIFO>:

void NRF24_FlushRxFIFO(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_RX;
 80008c2:	23e2      	movs	r3, #226	@ 0xe2
 80008c4:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008cc:	4809      	ldr	r0, [pc, #36]	@ (80008f4 <NRF24_FlushRxFIFO+0x38>)
 80008ce:	f001 ffa5 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	2201      	movs	r2, #1
 80008d6:	4619      	mov	r1, r3
 80008d8:	4807      	ldr	r0, [pc, #28]	@ (80008f8 <NRF24_FlushRxFIFO+0x3c>)
 80008da:	f003 f903 	bl	8003ae4 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008e4:	4803      	ldr	r0, [pc, #12]	@ (80008f4 <NRF24_FlushRxFIFO+0x38>)
 80008e6:	f001 ff99 	bl	800281c <HAL_GPIO_WritePin>
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40020400 	.word	0x40020400
 80008f8:	20000378 	.word	0x20000378

080008fc <NRF24_PowerUp>:

void NRF24_PowerUp(void){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
	uint8_t Adr = 0x00;
 8000902:	2300      	movs	r3, #0
 8000904:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer= NRF24_read(Adr);
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff13 	bl	8000734 <NRF24_read>
 800090e:	4603      	mov	r3, r0
 8000910:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	f043 0320 	orr.w	r3, r3, #32
 8000918:	71fb      	strb	r3, [r7, #7]
	Buffer |= 0x02;
 800091a:	79bb      	ldrb	r3, [r7, #6]
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	71bb      	strb	r3, [r7, #6]
	NRF24_write(Adr, Buffer);
 8000922:	79ba      	ldrb	r2, [r7, #6]
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	4611      	mov	r1, r2
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fe8f 	bl	800064c <NRF24_write>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <NRF24_ActualConfiguration>:

void NRF24_ActualConfiguration(void){
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	NRF24_Configurations_Struct.Actual.CONFIG 		= NRF24_read(CONFIG);
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fef9 	bl	8000734 <NRF24_read>
 8000942:	4603      	mov	r3, r0
 8000944:	461a      	mov	r2, r3
 8000946:	4b5f      	ldr	r3, [pc, #380]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 8000948:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	NRF24_Configurations_Struct.Actual.EN_AA  		= NRF24_read(EN_AA);
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff fef1 	bl	8000734 <NRF24_read>
 8000952:	4603      	mov	r3, r0
 8000954:	461a      	mov	r2, r3
 8000956:	4b5b      	ldr	r3, [pc, #364]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 8000958:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	NRF24_Configurations_Struct.Actual.EN_RXADDR  	= NRF24_read(EN_RXADDR);
 800095c:	2002      	movs	r0, #2
 800095e:	f7ff fee9 	bl	8000734 <NRF24_read>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	4b57      	ldr	r3, [pc, #348]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 8000968:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	NRF24_Configurations_Struct.Actual.SETUP_AW  	= NRF24_read(SETUP_AW);
 800096c:	2003      	movs	r0, #3
 800096e:	f7ff fee1 	bl	8000734 <NRF24_read>
 8000972:	4603      	mov	r3, r0
 8000974:	461a      	mov	r2, r3
 8000976:	4b53      	ldr	r3, [pc, #332]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 8000978:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	NRF24_Configurations_Struct.Actual.SETUP_RETR 	= NRF24_read(SETUP_RETR);
 800097c:	2004      	movs	r0, #4
 800097e:	f7ff fed9 	bl	8000734 <NRF24_read>
 8000982:	4603      	mov	r3, r0
 8000984:	461a      	mov	r2, r3
 8000986:	4b4f      	ldr	r3, [pc, #316]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 8000988:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	NRF24_Configurations_Struct.Actual.RF_CH  		= NRF24_read(RF_CH);
 800098c:	2005      	movs	r0, #5
 800098e:	f7ff fed1 	bl	8000734 <NRF24_read>
 8000992:	4603      	mov	r3, r0
 8000994:	461a      	mov	r2, r3
 8000996:	4b4b      	ldr	r3, [pc, #300]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 8000998:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
	NRF24_Configurations_Struct.Actual.RF_SETUP  	= NRF24_read(RF_SETUP);
 800099c:	2006      	movs	r0, #6
 800099e:	f7ff fec9 	bl	8000734 <NRF24_read>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b47      	ldr	r3, [pc, #284]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 80009a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	NRF24_Configurations_Struct.Actual.STATUS  		= NRF24_read(STATUS);
 80009ac:	2007      	movs	r0, #7
 80009ae:	f7ff fec1 	bl	8000734 <NRF24_read>
 80009b2:	4603      	mov	r3, r0
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b43      	ldr	r3, [pc, #268]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 80009b8:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	NRF24_Configurations_Struct.Actual.OBSERVE  	= NRF24_read(OBSERVE);
 80009bc:	2008      	movs	r0, #8
 80009be:	f7ff feb9 	bl	8000734 <NRF24_read>
 80009c2:	4603      	mov	r3, r0
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 80009c8:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	NRF24_Configurations_Struct.Actual.CD  			= NRF24_read(CD);
 80009cc:	2009      	movs	r0, #9
 80009ce:	f7ff feb1 	bl	8000734 <NRF24_read>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 80009d8:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
	NRF24_Addr_read(RX_ADDR_P0);
 80009dc:	200a      	movs	r0, #10
 80009de:	f7ff fed1 	bl	8000784 <NRF24_Addr_read>
	NRF24_Addr_read(RX_ADDR_P1);
 80009e2:	200b      	movs	r0, #11
 80009e4:	f7ff fece 	bl	8000784 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_ADDR_P2  	= NRF24_read(RX_ADDR_P2);
 80009e8:	200c      	movs	r0, #12
 80009ea:	f7ff fea3 	bl	8000734 <NRF24_read>
 80009ee:	4603      	mov	r3, r0
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b34      	ldr	r3, [pc, #208]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 80009f4:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	NRF24_Configurations_Struct.Actual.RX_ADDR_P3 	= NRF24_read(RX_ADDR_P3);
 80009f8:	200d      	movs	r0, #13
 80009fa:	f7ff fe9b 	bl	8000734 <NRF24_read>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b30      	ldr	r3, [pc, #192]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 8000a04:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	NRF24_Configurations_Struct.Actual.RX_ADDR_P4  	= NRF24_read(RX_ADDR_P4);
 8000a08:	200e      	movs	r0, #14
 8000a0a:	f7ff fe93 	bl	8000734 <NRF24_read>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 8000a14:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	NRF24_Configurations_Struct.Actual.RX_ADDR_P5  	= NRF24_read(RX_ADDR_P5);
 8000a18:	200f      	movs	r0, #15
 8000a1a:	f7ff fe8b 	bl	8000734 <NRF24_read>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b28      	ldr	r3, [pc, #160]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 8000a24:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	NRF24_Addr_read(TX_ADDR);
 8000a28:	2010      	movs	r0, #16
 8000a2a:	f7ff feab 	bl	8000784 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_PW_P0  	= NRF24_read(RX_PW_P0);
 8000a2e:	2011      	movs	r0, #17
 8000a30:	f7ff fe80 	bl	8000734 <NRF24_read>
 8000a34:	4603      	mov	r3, r0
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b22      	ldr	r3, [pc, #136]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 8000a3a:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
	NRF24_Configurations_Struct.Actual.RX_PW_P1  	= NRF24_read(RX_PW_P1);
 8000a3e:	2012      	movs	r0, #18
 8000a40:	f7ff fe78 	bl	8000734 <NRF24_read>
 8000a44:	4603      	mov	r3, r0
 8000a46:	461a      	mov	r2, r3
 8000a48:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 8000a4a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	NRF24_Configurations_Struct.Actual.RX_PW_P2  	= NRF24_read(RX_PW_P2);
 8000a4e:	2013      	movs	r0, #19
 8000a50:	f7ff fe70 	bl	8000734 <NRF24_read>
 8000a54:	4603      	mov	r3, r0
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 8000a5a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
	NRF24_Configurations_Struct.Actual.RX_PW_P3  	= NRF24_read(RX_PW_P3);
 8000a5e:	2014      	movs	r0, #20
 8000a60:	f7ff fe68 	bl	8000734 <NRF24_read>
 8000a64:	4603      	mov	r3, r0
 8000a66:	461a      	mov	r2, r3
 8000a68:	4b16      	ldr	r3, [pc, #88]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 8000a6a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	NRF24_Configurations_Struct.Actual.RX_PW_P4  	= NRF24_read(RX_PW_P4);
 8000a6e:	2015      	movs	r0, #21
 8000a70:	f7ff fe60 	bl	8000734 <NRF24_read>
 8000a74:	4603      	mov	r3, r0
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 8000a7a:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	NRF24_Configurations_Struct.Actual.RX_PW_P5  	= NRF24_read(RX_PW_P5);
 8000a7e:	2016      	movs	r0, #22
 8000a80:	f7ff fe58 	bl	8000734 <NRF24_read>
 8000a84:	4603      	mov	r3, r0
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 8000a8a:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	NRF24_Configurations_Struct.Actual.FIFO_STATUS  = NRF24_read(FIFO_STATUS);
 8000a8e:	2017      	movs	r0, #23
 8000a90:	f7ff fe50 	bl	8000734 <NRF24_read>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 8000a9a:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
	NRF24_Configurations_Struct.Actual.DYNPD  		= NRF24_read(DYNPD);
 8000a9e:	201c      	movs	r0, #28
 8000aa0:	f7ff fe48 	bl	8000734 <NRF24_read>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 8000aaa:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
	NRF24_Configurations_Struct.Actual.FEATURE  	= NRF24_read(FEATURE);
 8000aae:	201d      	movs	r0, #29
 8000ab0:	f7ff fe40 	bl	8000734 <NRF24_read>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b02      	ldr	r3, [pc, #8]	@ (8000ac4 <NRF24_ActualConfiguration+0x18c>)
 8000aba:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000030 	.word	0x20000030

08000ac8 <NRF24_config>:

void NRF24_config(NRF24_Address_Configurations_t Configuration_struct){
 8000ac8:	b084      	sub	sp, #16
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	f107 0c08 	add.w	ip, r7, #8
 8000ad2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	NRF24_write(CONFIG,	Configuration_struct.CONFIG);
 8000ad6:	7a3b      	ldrb	r3, [r7, #8]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff fdb6 	bl	800064c <NRF24_write>
	NRF24_write(EN_AA, Configuration_struct.EN_AA);
 8000ae0:	7a7b      	ldrb	r3, [r7, #9]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff fdb1 	bl	800064c <NRF24_write>
	NRF24_write(EN_RXADDR,Configuration_struct.EN_RXADDR);
 8000aea:	7abb      	ldrb	r3, [r7, #10]
 8000aec:	4619      	mov	r1, r3
 8000aee:	2002      	movs	r0, #2
 8000af0:	f7ff fdac 	bl	800064c <NRF24_write>
	NRF24_write(SETUP_AW,Configuration_struct.SETUP_AW);
 8000af4:	7afb      	ldrb	r3, [r7, #11]
 8000af6:	4619      	mov	r1, r3
 8000af8:	2003      	movs	r0, #3
 8000afa:	f7ff fda7 	bl	800064c <NRF24_write>
	NRF24_write(SETUP_RETR,Configuration_struct.SETUP_RETR);
 8000afe:	7b3b      	ldrb	r3, [r7, #12]
 8000b00:	4619      	mov	r1, r3
 8000b02:	2004      	movs	r0, #4
 8000b04:	f7ff fda2 	bl	800064c <NRF24_write>
	NRF24_write(RF_CH,Configuration_struct.RF_CH);
 8000b08:	7b7b      	ldrb	r3, [r7, #13]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	2005      	movs	r0, #5
 8000b0e:	f7ff fd9d 	bl	800064c <NRF24_write>
	NRF24_write(RF_SETUP,Configuration_struct.RF_SETUP);
 8000b12:	7bbb      	ldrb	r3, [r7, #14]
 8000b14:	4619      	mov	r1, r3
 8000b16:	2006      	movs	r0, #6
 8000b18:	f7ff fd98 	bl	800064c <NRF24_write>
	NRF24_write(STATUS,Configuration_struct.STATUS);
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	2007      	movs	r0, #7
 8000b22:	f7ff fd93 	bl	800064c <NRF24_write>
	NRF24_write(OBSERVE,Configuration_struct.OBSERVE);
 8000b26:	7c3b      	ldrb	r3, [r7, #16]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	2008      	movs	r0, #8
 8000b2c:	f7ff fd8e 	bl	800064c <NRF24_write>
	NRF24_write(CD,Configuration_struct.CD);
 8000b30:	7c7b      	ldrb	r3, [r7, #17]
 8000b32:	4619      	mov	r1, r3
 8000b34:	2009      	movs	r0, #9
 8000b36:	f7ff fd89 	bl	800064c <NRF24_write>
	NRF24_Addr_write(RX_ADDR_P0, Configuration_struct.RX_ADDR_P0);
 8000b3a:	f107 0312 	add.w	r3, r7, #18
 8000b3e:	4619      	mov	r1, r3
 8000b40:	200a      	movs	r0, #10
 8000b42:	f7ff fdb1 	bl	80006a8 <NRF24_Addr_write>
	NRF24_Addr_write(RX_ADDR_P1, Configuration_struct.RX_ADDR_P1);
 8000b46:	f107 0317 	add.w	r3, r7, #23
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	200b      	movs	r0, #11
 8000b4e:	f7ff fdab 	bl	80006a8 <NRF24_Addr_write>
	NRF24_write(RX_ADDR_P2,Configuration_struct.RX_ADDR_P2);
 8000b52:	7f3b      	ldrb	r3, [r7, #28]
 8000b54:	4619      	mov	r1, r3
 8000b56:	200c      	movs	r0, #12
 8000b58:	f7ff fd78 	bl	800064c <NRF24_write>
	NRF24_write(RX_ADDR_P3,Configuration_struct.RX_ADDR_P3);
 8000b5c:	7f7b      	ldrb	r3, [r7, #29]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	200d      	movs	r0, #13
 8000b62:	f7ff fd73 	bl	800064c <NRF24_write>
	NRF24_write(RX_ADDR_P4,Configuration_struct.RX_ADDR_P4);
 8000b66:	7fbb      	ldrb	r3, [r7, #30]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	200e      	movs	r0, #14
 8000b6c:	f7ff fd6e 	bl	800064c <NRF24_write>
	NRF24_write(RX_ADDR_P5,Configuration_struct.RX_ADDR_P5);
 8000b70:	7ffb      	ldrb	r3, [r7, #31]
 8000b72:	4619      	mov	r1, r3
 8000b74:	200f      	movs	r0, #15
 8000b76:	f7ff fd69 	bl	800064c <NRF24_write>
	NRF24_Addr_write(TX_ADDR, Configuration_struct.TX_ADDR);
 8000b7a:	f107 0320 	add.w	r3, r7, #32
 8000b7e:	4619      	mov	r1, r3
 8000b80:	2010      	movs	r0, #16
 8000b82:	f7ff fd91 	bl	80006a8 <NRF24_Addr_write>
	NRF24_write(RX_PW_P0,Configuration_struct.RX_PW_P0);
 8000b86:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	2011      	movs	r0, #17
 8000b8e:	f7ff fd5d 	bl	800064c <NRF24_write>
	NRF24_write(RX_PW_P1,Configuration_struct.RX_PW_P1);
 8000b92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000b96:	4619      	mov	r1, r3
 8000b98:	2012      	movs	r0, #18
 8000b9a:	f7ff fd57 	bl	800064c <NRF24_write>
	NRF24_write(RX_PW_P2,Configuration_struct.RX_PW_P2);
 8000b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	2013      	movs	r0, #19
 8000ba6:	f7ff fd51 	bl	800064c <NRF24_write>
	NRF24_write(RX_PW_P3,Configuration_struct.RX_PW_P3);
 8000baa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	2014      	movs	r0, #20
 8000bb2:	f7ff fd4b 	bl	800064c <NRF24_write>
	NRF24_write(RX_PW_P4,Configuration_struct.RX_PW_P4);
 8000bb6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000bba:	4619      	mov	r1, r3
 8000bbc:	2015      	movs	r0, #21
 8000bbe:	f7ff fd45 	bl	800064c <NRF24_write>
	NRF24_write(RX_PW_P5,Configuration_struct.RX_PW_P5);
 8000bc2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	2016      	movs	r0, #22
 8000bca:	f7ff fd3f 	bl	800064c <NRF24_write>
	NRF24_write(FIFO_STATUS,Configuration_struct.FIFO_STATUS);
 8000bce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	2017      	movs	r0, #23
 8000bd6:	f7ff fd39 	bl	800064c <NRF24_write>
	NRF24_write(DYNPD,Configuration_struct.DYNPD);
 8000bda:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000bde:	4619      	mov	r1, r3
 8000be0:	201c      	movs	r0, #28
 8000be2:	f7ff fd33 	bl	800064c <NRF24_write>
	NRF24_write(FEATURE,Configuration_struct.FEATURE);
 8000be6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000bea:	4619      	mov	r1, r3
 8000bec:	201d      	movs	r0, #29
 8000bee:	f7ff fd2d 	bl	800064c <NRF24_write>
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfa:	b004      	add	sp, #16
 8000bfc:	4770      	bx	lr
	...

08000c00 <NRF24_DefaultConfiguration>:

void NRF24_DefaultConfiguration(void){
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	b087      	sub	sp, #28
 8000c04:	af06      	add	r7, sp, #24
	NRF24_FlushTxFIFO();
 8000c06:	f7ff fe39 	bl	800087c <NRF24_FlushTxFIFO>
	NRF24_FlushRxFIFO();
 8000c0a:	f7ff fe57 	bl	80008bc <NRF24_FlushRxFIFO>
	NRF24_Configurations_Struct.Default.CONFIG 			= 0x78;
 8000c0e:	4b48      	ldr	r3, [pc, #288]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c10:	2278      	movs	r2, #120	@ 0x78
 8000c12:	701a      	strb	r2, [r3, #0]
	NRF24_Configurations_Struct.Default.EN_AA  			= 0x3F;
 8000c14:	4b46      	ldr	r3, [pc, #280]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c16:	223f      	movs	r2, #63	@ 0x3f
 8000c18:	705a      	strb	r2, [r3, #1]
	NRF24_Configurations_Struct.Default.EN_RXADDR  		= 0x03;
 8000c1a:	4b45      	ldr	r3, [pc, #276]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	709a      	strb	r2, [r3, #2]
	NRF24_Configurations_Struct.Default.SETUP_AW  		= 0x03;
 8000c20:	4b43      	ldr	r3, [pc, #268]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c22:	2203      	movs	r2, #3
 8000c24:	70da      	strb	r2, [r3, #3]
	NRF24_Configurations_Struct.Default.SETUP_RETR 		= 0x03;
 8000c26:	4b42      	ldr	r3, [pc, #264]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c28:	2203      	movs	r2, #3
 8000c2a:	711a      	strb	r2, [r3, #4]
	NRF24_Configurations_Struct.Default.RF_CH  			= 0x02;
 8000c2c:	4b40      	ldr	r3, [pc, #256]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c2e:	2202      	movs	r2, #2
 8000c30:	715a      	strb	r2, [r3, #5]
	NRF24_Configurations_Struct.Default.RF_SETUP  		= 0x09;
 8000c32:	4b3f      	ldr	r3, [pc, #252]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c34:	2209      	movs	r2, #9
 8000c36:	719a      	strb	r2, [r3, #6]
	NRF24_Configurations_Struct.Default.STATUS  		= 0X70;
 8000c38:	4b3d      	ldr	r3, [pc, #244]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c3a:	2270      	movs	r2, #112	@ 0x70
 8000c3c:	71da      	strb	r2, [r3, #7]
	NRF24_Configurations_Struct.Default.OBSERVE  		= 0X00;
 8000c3e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	721a      	strb	r2, [r3, #8]
	NRF24_Configurations_Struct.Default.CD  			= 0x00;
 8000c44:	4b3a      	ldr	r3, [pc, #232]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	725a      	strb	r2, [r3, #9]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[0]  	= 0xE7;
 8000c4a:	4b39      	ldr	r3, [pc, #228]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c4c:	22e7      	movs	r2, #231	@ 0xe7
 8000c4e:	729a      	strb	r2, [r3, #10]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[1]  	= 0xE7;
 8000c50:	4b37      	ldr	r3, [pc, #220]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c52:	22e7      	movs	r2, #231	@ 0xe7
 8000c54:	72da      	strb	r2, [r3, #11]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[2]  	= 0xE7;
 8000c56:	4b36      	ldr	r3, [pc, #216]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c58:	22e7      	movs	r2, #231	@ 0xe7
 8000c5a:	731a      	strb	r2, [r3, #12]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[3]  	= 0xE7;
 8000c5c:	4b34      	ldr	r3, [pc, #208]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c5e:	22e7      	movs	r2, #231	@ 0xe7
 8000c60:	735a      	strb	r2, [r3, #13]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[4]  	= 0xE7;
 8000c62:	4b33      	ldr	r3, [pc, #204]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c64:	22e7      	movs	r2, #231	@ 0xe7
 8000c66:	739a      	strb	r2, [r3, #14]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[0]  	= 0xC2;
 8000c68:	4b31      	ldr	r3, [pc, #196]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c6a:	22c2      	movs	r2, #194	@ 0xc2
 8000c6c:	73da      	strb	r2, [r3, #15]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[1]  	= 0xC2;
 8000c6e:	4b30      	ldr	r3, [pc, #192]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c70:	22c2      	movs	r2, #194	@ 0xc2
 8000c72:	741a      	strb	r2, [r3, #16]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[2]  	= 0xC2;
 8000c74:	4b2e      	ldr	r3, [pc, #184]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c76:	22c2      	movs	r2, #194	@ 0xc2
 8000c78:	745a      	strb	r2, [r3, #17]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[3]  	= 0xC2;
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c7c:	22c2      	movs	r2, #194	@ 0xc2
 8000c7e:	749a      	strb	r2, [r3, #18]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[4]  	= 0xC2;
 8000c80:	4b2b      	ldr	r3, [pc, #172]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c82:	22c2      	movs	r2, #194	@ 0xc2
 8000c84:	74da      	strb	r2, [r3, #19]
	NRF24_Configurations_Struct.Default.RX_ADDR_P2  	= 0xC3;
 8000c86:	4b2a      	ldr	r3, [pc, #168]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c88:	22c3      	movs	r2, #195	@ 0xc3
 8000c8a:	751a      	strb	r2, [r3, #20]
	NRF24_Configurations_Struct.Default.RX_ADDR_P3 		= 0xC4;
 8000c8c:	4b28      	ldr	r3, [pc, #160]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c8e:	22c4      	movs	r2, #196	@ 0xc4
 8000c90:	755a      	strb	r2, [r3, #21]
	NRF24_Configurations_Struct.Default.RX_ADDR_P4  	= 0xC5;
 8000c92:	4b27      	ldr	r3, [pc, #156]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c94:	22c5      	movs	r2, #197	@ 0xc5
 8000c96:	759a      	strb	r2, [r3, #22]
	NRF24_Configurations_Struct.Default.RX_ADDR_P5  	= 0xC6;
 8000c98:	4b25      	ldr	r3, [pc, #148]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000c9a:	22c6      	movs	r2, #198	@ 0xc6
 8000c9c:	75da      	strb	r2, [r3, #23]
	NRF24_Configurations_Struct.Default.TX_ADDR[0]   	= 0xE7;
 8000c9e:	4b24      	ldr	r3, [pc, #144]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000ca0:	22e7      	movs	r2, #231	@ 0xe7
 8000ca2:	761a      	strb	r2, [r3, #24]
	NRF24_Configurations_Struct.Default.TX_ADDR[1]   	= 0xE7;
 8000ca4:	4b22      	ldr	r3, [pc, #136]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000ca6:	22e7      	movs	r2, #231	@ 0xe7
 8000ca8:	765a      	strb	r2, [r3, #25]
	NRF24_Configurations_Struct.Default.TX_ADDR[2]   	= 0xE7;
 8000caa:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000cac:	22e7      	movs	r2, #231	@ 0xe7
 8000cae:	769a      	strb	r2, [r3, #26]
	NRF24_Configurations_Struct.Default.TX_ADDR[3]   	= 0xE7;
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000cb2:	22e7      	movs	r2, #231	@ 0xe7
 8000cb4:	76da      	strb	r2, [r3, #27]
	NRF24_Configurations_Struct.Default.TX_ADDR[4]   	= 0xE7;
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000cb8:	22e7      	movs	r2, #231	@ 0xe7
 8000cba:	771a      	strb	r2, [r3, #28]
	NRF24_Configurations_Struct.Default.RX_PW_P0  		= 0X20;
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000cbe:	2220      	movs	r2, #32
 8000cc0:	775a      	strb	r2, [r3, #29]
	NRF24_Configurations_Struct.Default.RX_PW_P1  		= 0X20;
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000cc4:	2220      	movs	r2, #32
 8000cc6:	779a      	strb	r2, [r3, #30]
	NRF24_Configurations_Struct.Default.RX_PW_P2  		= 0X00;
 8000cc8:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	77da      	strb	r2, [r3, #31]
	NRF24_Configurations_Struct.Default.RX_PW_P3  		= 0X00;
 8000cce:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 2020 	strb.w	r2, [r3, #32]
	NRF24_Configurations_Struct.Default.RX_PW_P4  		= 0X00;
 8000cd6:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	NRF24_Configurations_Struct.Default.RX_PW_P5  		= 0X00;
 8000cde:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	NRF24_Configurations_Struct.Default.FIFO_STATUS  	= 0X11;
 8000ce6:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000ce8:	2211      	movs	r2, #17
 8000cea:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	NRF24_Configurations_Struct.Default.DYNPD  			= 0X00;
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	NRF24_Configurations_Struct.Default.FEATURE  		= 0X00;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	NRF24_config(NRF24_Configurations_Struct.Default);
 8000cfe:	4e0c      	ldr	r6, [pc, #48]	@ (8000d30 <NRF24_DefaultConfiguration+0x130>)
 8000d00:	466c      	mov	r4, sp
 8000d02:	f106 0510 	add.w	r5, r6, #16
 8000d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d0e:	6020      	str	r0, [r4, #0]
 8000d10:	3404      	adds	r4, #4
 8000d12:	8021      	strh	r1, [r4, #0]
 8000d14:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d18:	f7ff fed6 	bl	8000ac8 <NRF24_config>
	NRF24_ActualConfiguration();
 8000d1c:	f7ff fe0c 	bl	8000938 <NRF24_ActualConfiguration>
	NRF24_mode = Init;
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <NRF24_DefaultConfiguration+0x134>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
}
 8000d26:	bf00      	nop
 8000d28:	3704      	adds	r7, #4
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000030 	.word	0x20000030
 8000d34:	200000d3 	.word	0x200000d3

08000d38 <NRF24_RxConfiguration>:
	NRF24_config(NRF24_Configurations_Struct.Tx_mode);
	NRF24_ActualConfiguration();
	NRF24_mode = TxMode;
}

void NRF24_RxConfiguration(void){
 8000d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af06      	add	r7, sp, #24
	NRF24_Configurations_Struct.Rx_mode.CONFIG 			= 0x79;
 8000d3e:	4b5b      	ldr	r3, [pc, #364]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000d40:	2279      	movs	r2, #121	@ 0x79
 8000d42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	NRF24_Configurations_Struct.Rx_mode.EN_AA  			= 0x03;
 8000d46:	4b59      	ldr	r3, [pc, #356]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000d48:	2203      	movs	r2, #3
 8000d4a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	NRF24_Configurations_Struct.Rx_mode.EN_RXADDR  		= 0x03;
 8000d4e:	4b57      	ldr	r3, [pc, #348]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000d50:	2203      	movs	r2, #3
 8000d52:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
	NRF24_Configurations_Struct.Rx_mode.SETUP_AW  		= 0x03;
 8000d56:	4b55      	ldr	r3, [pc, #340]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000d58:	2203      	movs	r2, #3
 8000d5a:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
	NRF24_Configurations_Struct.Rx_mode.SETUP_RETR 		= 0x33;
 8000d5e:	4b53      	ldr	r3, [pc, #332]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000d60:	2233      	movs	r2, #51	@ 0x33
 8000d62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	NRF24_Configurations_Struct.Rx_mode.RF_CH  			= 0x12;
 8000d66:	4b51      	ldr	r3, [pc, #324]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000d68:	2212      	movs	r2, #18
 8000d6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	NRF24_Configurations_Struct.Rx_mode.RF_SETUP  		= 0x09;
 8000d6e:	4b4f      	ldr	r3, [pc, #316]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000d70:	2209      	movs	r2, #9
 8000d72:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	NRF24_Configurations_Struct.Rx_mode.STATUS  		= 0X70;
 8000d76:	4b4d      	ldr	r3, [pc, #308]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000d78:	2270      	movs	r2, #112	@ 0x70
 8000d7a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
	NRF24_Configurations_Struct.Rx_mode.OBSERVE  		= 0X00;
 8000d7e:	4b4b      	ldr	r3, [pc, #300]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	NRF24_Configurations_Struct.Rx_mode.CD  			= 0x00;
 8000d86:	4b49      	ldr	r3, [pc, #292]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[0]  	= 0xE7;
 8000d8e:	4b47      	ldr	r3, [pc, #284]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000d90:	22e7      	movs	r2, #231	@ 0xe7
 8000d92:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[1]  	= 0xE7;
 8000d96:	4b45      	ldr	r3, [pc, #276]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000d98:	22e7      	movs	r2, #231	@ 0xe7
 8000d9a:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[2]  	= 0xE7;
 8000d9e:	4b43      	ldr	r3, [pc, #268]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000da0:	22e7      	movs	r2, #231	@ 0xe7
 8000da2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[3]  	= 0xE7;
 8000da6:	4b41      	ldr	r3, [pc, #260]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000da8:	22e7      	movs	r2, #231	@ 0xe7
 8000daa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[4]  	= 0xE7;
 8000dae:	4b3f      	ldr	r3, [pc, #252]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000db0:	22e7      	movs	r2, #231	@ 0xe7
 8000db2:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[0]  	= 0xC2;
 8000db6:	4b3d      	ldr	r3, [pc, #244]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000db8:	22c2      	movs	r2, #194	@ 0xc2
 8000dba:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[1]  	= 0xC2;
 8000dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000dc0:	22c2      	movs	r2, #194	@ 0xc2
 8000dc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[2]  	= 0xC2;
 8000dc6:	4b39      	ldr	r3, [pc, #228]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000dc8:	22c2      	movs	r2, #194	@ 0xc2
 8000dca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[3]  	= 0xC2;
 8000dce:	4b37      	ldr	r3, [pc, #220]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000dd0:	22c2      	movs	r2, #194	@ 0xc2
 8000dd2:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[4]  	= 0xC2;
 8000dd6:	4b35      	ldr	r3, [pc, #212]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000dd8:	22c2      	movs	r2, #194	@ 0xc2
 8000dda:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P2  	= 0xC3;
 8000dde:	4b33      	ldr	r3, [pc, #204]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000de0:	22c3      	movs	r2, #195	@ 0xc3
 8000de2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P3 		= 0xC4;
 8000de6:	4b31      	ldr	r3, [pc, #196]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000de8:	22c4      	movs	r2, #196	@ 0xc4
 8000dea:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P4  	= 0xC5;
 8000dee:	4b2f      	ldr	r3, [pc, #188]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000df0:	22c5      	movs	r2, #197	@ 0xc5
 8000df2:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P5  	= 0xC6;
 8000df6:	4b2d      	ldr	r3, [pc, #180]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000df8:	22c6      	movs	r2, #198	@ 0xc6
 8000dfa:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[0]   	= 0xE7;
 8000dfe:	4b2b      	ldr	r3, [pc, #172]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000e00:	22e7      	movs	r2, #231	@ 0xe7
 8000e02:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[1]   	= 0xE7;
 8000e06:	4b29      	ldr	r3, [pc, #164]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000e08:	22e7      	movs	r2, #231	@ 0xe7
 8000e0a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[2]   	= 0xE7;
 8000e0e:	4b27      	ldr	r3, [pc, #156]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000e10:	22e7      	movs	r2, #231	@ 0xe7
 8000e12:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[3]   	= 0xE7;
 8000e16:	4b25      	ldr	r3, [pc, #148]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000e18:	22e7      	movs	r2, #231	@ 0xe7
 8000e1a:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[4]   	= 0xE7;
 8000e1e:	4b23      	ldr	r3, [pc, #140]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000e20:	22e7      	movs	r2, #231	@ 0xe7
 8000e22:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P0  		= 0X20;
 8000e26:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000e28:	2220      	movs	r2, #32
 8000e2a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P1  		= 0X20;
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000e30:	2220      	movs	r2, #32
 8000e32:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P2  		= 0X00;
 8000e36:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P3  		= 0X00;
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P4  		= 0X00;
 8000e46:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P5  		= 0X00;
 8000e4e:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
	NRF24_Configurations_Struct.Rx_mode.FIFO_STATUS  	= 0X11;
 8000e56:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000e58:	2211      	movs	r2, #17
 8000e5a:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
	NRF24_Configurations_Struct.Rx_mode.DYNPD  			= 0X00;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	NRF24_Configurations_Struct.Rx_mode.FEATURE  		= 0X00;
 8000e66:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	NRF24_config(NRF24_Configurations_Struct.Rx_mode);
 8000e6e:	4e0f      	ldr	r6, [pc, #60]	@ (8000eac <NRF24_RxConfiguration+0x174>)
 8000e70:	466c      	mov	r4, sp
 8000e72:	f106 055c 	add.w	r5, r6, #92	@ 0x5c
 8000e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e7e:	6020      	str	r0, [r4, #0]
 8000e80:	3404      	adds	r4, #4
 8000e82:	8021      	strh	r1, [r4, #0]
 8000e84:	f106 034c 	add.w	r3, r6, #76	@ 0x4c
 8000e88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e8a:	f7ff fe1d 	bl	8000ac8 <NRF24_config>
	NRF24_ActualConfiguration();
 8000e8e:	f7ff fd53 	bl	8000938 <NRF24_ActualConfiguration>
	NRF24_Enable();
 8000e92:	2201      	movs	r2, #1
 8000e94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e98:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <NRF24_RxConfiguration+0x178>)
 8000e9a:	f001 fcbf 	bl	800281c <HAL_GPIO_WritePin>
	NRF24_mode = RxMode;
 8000e9e:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <NRF24_RxConfiguration+0x17c>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	701a      	strb	r2, [r3, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	3704      	adds	r7, #4
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eac:	20000030 	.word	0x20000030
 8000eb0:	40020400 	.word	0x40020400
 8000eb4:	200000d3 	.word	0x200000d3

08000eb8 <NRF24_CheckFlags>:

void NRF24_CheckFlags(void){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
	uint8_t buffer = NRF24_read(STATUS);
 8000ebe:	2007      	movs	r0, #7
 8000ec0:	f7ff fc38 	bl	8000734 <NRF24_read>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	71fb      	strb	r3, [r7, #7]
	TX_FULL =  buffer & 0x01;
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	4b28      	ldr	r3, [pc, #160]	@ (8000f74 <NRF24_CheckFlags+0xbc>)
 8000ed2:	701a      	strb	r2, [r3, #0]
	RX_P_NO = (buffer & 0x0E) >> 1;
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	105b      	asrs	r3, r3, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	4b25      	ldr	r3, [pc, #148]	@ (8000f78 <NRF24_CheckFlags+0xc0>)
 8000ee2:	701a      	strb	r2, [r3, #0]
	MAX_RT  = (buffer & 0x10) >> 4;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	111b      	asrs	r3, r3, #4
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b22      	ldr	r3, [pc, #136]	@ (8000f7c <NRF24_CheckFlags+0xc4>)
 8000ef2:	701a      	strb	r2, [r3, #0]
	TX_DS   = (buffer & 0x20) >> 5;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	115b      	asrs	r3, r3, #5
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b1f      	ldr	r3, [pc, #124]	@ (8000f80 <NRF24_CheckFlags+0xc8>)
 8000f02:	701a      	strb	r2, [r3, #0]
	RX_DR   = (buffer & 0x40) >> 6;
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	119b      	asrs	r3, r3, #6
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <NRF24_CheckFlags+0xcc>)
 8000f12:	701a      	strb	r2, [r3, #0]

	buffer   = NRF24_read(FIFO_STATUS);
 8000f14:	2017      	movs	r0, #23
 8000f16:	f7ff fc0d 	bl	8000734 <NRF24_read>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
	RX_EMPTY =  buffer & 0x01;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <NRF24_CheckFlags+0xd0>)
 8000f28:	701a      	strb	r2, [r3, #0]
	RX_FULL  = (buffer & 0x02) >> 1;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	105b      	asrs	r3, r3, #1
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <NRF24_CheckFlags+0xd4>)
 8000f38:	701a      	strb	r2, [r3, #0]
	TX_EMPTY = (buffer & 0x10) >> 4;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	111b      	asrs	r3, r3, #4
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <NRF24_CheckFlags+0xd8>)
 8000f48:	701a      	strb	r2, [r3, #0]
	TX_FULL  = (buffer & 0x20) >> 5;
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	115b      	asrs	r3, r3, #5
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <NRF24_CheckFlags+0xbc>)
 8000f58:	701a      	strb	r2, [r3, #0]
	TX_REUSE = (buffer & 0x40) >> 6;
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	119b      	asrs	r3, r3, #6
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <NRF24_CheckFlags+0xdc>)
 8000f68:	701a      	strb	r2, [r3, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000c9 	.word	0x200000c9
 8000f78:	200000ca 	.word	0x200000ca
 8000f7c:	200000cb 	.word	0x200000cb
 8000f80:	200000cc 	.word	0x200000cc
 8000f84:	200000cd 	.word	0x200000cd
 8000f88:	200000ce 	.word	0x200000ce
 8000f8c:	200000cf 	.word	0x200000cf
 8000f90:	200000d0 	.word	0x200000d0
 8000f94:	200000d1 	.word	0x200000d1

08000f98 <NRF24_FIFO_write>:

void NRF24_FIFO_write(uint8_t *pData, uint8_t size){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
	uint8_t Adr = W_TX_PAYLOAD;
 8000fa4:	23a0      	movs	r3, #160	@ 0xa0
 8000fa6:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fae:	4812      	ldr	r0, [pc, #72]	@ (8000ff8 <NRF24_FIFO_write+0x60>)
 8000fb0:	f001 fc34 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000fb4:	f107 030e 	add.w	r3, r7, #14
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480f      	ldr	r0, [pc, #60]	@ (8000ffc <NRF24_FIFO_write+0x64>)
 8000fbe:	f002 fd91 	bl	8003ae4 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	e00a      	b.n	8000fde <NRF24_FIFO_write+0x46>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &pData[n], 1);
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	480a      	ldr	r0, [pc, #40]	@ (8000ffc <NRF24_FIFO_write+0x64>)
 8000fd4:	f002 fd86 	bl	8003ae4 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	2b1f      	cmp	r3, #31
 8000fe2:	d9f1      	bls.n	8000fc8 <NRF24_FIFO_write+0x30>
	}
	NRF24_unselect();
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fea:	4803      	ldr	r0, [pc, #12]	@ (8000ff8 <NRF24_FIFO_write+0x60>)
 8000fec:	f001 fc16 	bl	800281c <HAL_GPIO_WritePin>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40020400 	.word	0x40020400
 8000ffc:	20000378 	.word	0x20000378

08001000 <NRF24_FIFO_read>:

void NRF24_FIFO_read(uint8_t *pData){
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	uint8_t Adr = R_RX_PAYLOAD;
 8001008:	2361      	movs	r3, #97	@ 0x61
 800100a:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001012:	4812      	ldr	r0, [pc, #72]	@ (800105c <NRF24_FIFO_read+0x5c>)
 8001014:	f001 fc02 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001018:	f107 030e 	add.w	r3, r7, #14
 800101c:	2201      	movs	r2, #1
 800101e:	4619      	mov	r1, r3
 8001020:	480f      	ldr	r0, [pc, #60]	@ (8001060 <NRF24_FIFO_read+0x60>)
 8001022:	f002 fd5f 	bl	8003ae4 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8001026:	2300      	movs	r3, #0
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e00a      	b.n	8001042 <NRF24_FIFO_read+0x42>
		HAL_SPI_Receive_DMA(SPI_NRF24, &pData[n], 1);
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	2201      	movs	r2, #1
 8001034:	4619      	mov	r1, r3
 8001036:	480a      	ldr	r0, [pc, #40]	@ (8001060 <NRF24_FIFO_read+0x60>)
 8001038:	f002 fe06 	bl	8003c48 <HAL_SPI_Receive_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	3301      	adds	r3, #1
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	2b1f      	cmp	r3, #31
 8001046:	d9f1      	bls.n	800102c <NRF24_FIFO_read+0x2c>
	}
	NRF24_unselect();
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800104e:	4803      	ldr	r0, [pc, #12]	@ (800105c <NRF24_FIFO_read+0x5c>)
 8001050:	f001 fbe4 	bl	800281c <HAL_GPIO_WritePin>
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40020400 	.word	0x40020400
 8001060:	20000378 	.word	0x20000378

08001064 <NRF24_init>:

void NRF24_init(void){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	NRF24_Disable();
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800106e:	4808      	ldr	r0, [pc, #32]	@ (8001090 <NRF24_init+0x2c>)
 8001070:	f001 fbd4 	bl	800281c <HAL_GPIO_WritePin>
	NRF24_unselect();
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800107a:	4805      	ldr	r0, [pc, #20]	@ (8001090 <NRF24_init+0x2c>)
 800107c:	f001 fbce 	bl	800281c <HAL_GPIO_WritePin>
	NRF24_DefaultConfiguration();
 8001080:	f7ff fdbe 	bl	8000c00 <NRF24_DefaultConfiguration>
	NRF24_mode = 0;
 8001084:	4b03      	ldr	r3, [pc, #12]	@ (8001094 <NRF24_init+0x30>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40020400 	.word	0x40020400
 8001094:	200000d3 	.word	0x200000d3

08001098 <NRF24_Transmit>:

void NRF24_Transmit(void){
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	NRF24_CheckFlags();
 800109c:	f7ff ff0c 	bl	8000eb8 <NRF24_CheckFlags>
	if(MAX_RT)  NRF24_write(STATUS, 0x70);
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <NRF24_Transmit+0x80>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <NRF24_Transmit+0x18>
 80010a8:	2170      	movs	r1, #112	@ 0x70
 80010aa:	2007      	movs	r0, #7
 80010ac:	f7ff face 	bl	800064c <NRF24_write>
	if(TX_FULL) NRF24_FlushTxFIFO();
 80010b0:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <NRF24_Transmit+0x84>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <NRF24_Transmit+0x24>
 80010b8:	f7ff fbe0 	bl	800087c <NRF24_FlushTxFIFO>
	if(Cont_TX > 10){
 80010bc:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <NRF24_Transmit+0x88>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b0a      	cmp	r3, #10
 80010c2:	d909      	bls.n	80010d8 <NRF24_Transmit+0x40>
		Cont_TX = 0;
 80010c4:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <NRF24_Transmit+0x88>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
		NRF24_FIFO_write(TxBuffer, 32);
 80010ca:	2120      	movs	r1, #32
 80010cc:	4815      	ldr	r0, [pc, #84]	@ (8001124 <NRF24_Transmit+0x8c>)
 80010ce:	f7ff ff63 	bl	8000f98 <NRF24_FIFO_write>
		Transmision_Flag = 0;
 80010d2:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <NRF24_Transmit+0x90>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
	}
	switch (Transmision_Flag) {
 80010d8:	4b13      	ldr	r3, [pc, #76]	@ (8001128 <NRF24_Transmit+0x90>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <NRF24_Transmit+0x4e>
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d00a      	beq.n	80010fa <NRF24_Transmit+0x62>
 80010e4:	e010      	b.n	8001108 <NRF24_Transmit+0x70>
		case 0:
			NRF24_Enable();
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ec:	480f      	ldr	r0, [pc, #60]	@ (800112c <NRF24_Transmit+0x94>)
 80010ee:	f001 fb95 	bl	800281c <HAL_GPIO_WritePin>
			Transmision_Flag = 1;
 80010f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <NRF24_Transmit+0x90>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
			break;
 80010f8:	e006      	b.n	8001108 <NRF24_Transmit+0x70>
		case 1:
			NRF24_Disable();
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001100:	480a      	ldr	r0, [pc, #40]	@ (800112c <NRF24_Transmit+0x94>)
 8001102:	f001 fb8b 	bl	800281c <HAL_GPIO_WritePin>
			break;
 8001106:	bf00      	nop
	}
	++Cont_TX;
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <NRF24_Transmit+0x88>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <NRF24_Transmit+0x88>)
 8001112:	701a      	strb	r2, [r3, #0]
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200000cb 	.word	0x200000cb
 800111c:	200000c9 	.word	0x200000c9
 8001120:	200000d2 	.word	0x200000d2
 8001124:	200000d4 	.word	0x200000d4
 8001128:	200000c8 	.word	0x200000c8
 800112c:	40020400 	.word	0x40020400

08001130 <NRF24_Receive>:

void NRF24_Receive(void){
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	NRF24_CheckFlags();
 8001134:	f7ff fec0 	bl	8000eb8 <NRF24_CheckFlags>
	if(RX_P_NO != 7){
 8001138:	4b04      	ldr	r3, [pc, #16]	@ (800114c <NRF24_Receive+0x1c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b07      	cmp	r3, #7
 800113e:	d002      	beq.n	8001146 <NRF24_Receive+0x16>
		NRF24_FIFO_read(RxBuffer);
 8001140:	4803      	ldr	r0, [pc, #12]	@ (8001150 <NRF24_Receive+0x20>)
 8001142:	f7ff ff5d 	bl	8001000 <NRF24_FIFO_read>
	}
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200000ca 	.word	0x200000ca
 8001150:	200000f4 	.word	0x200000f4

08001154 <NRF24_TxBuffer>:

void NRF24_TxBuffer(void){
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
	++TxBuffer[0];
 800115a:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <NRF24_TxBuffer+0x5c>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <NRF24_TxBuffer+0x5c>)
 8001164:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < 30; ++n) {
 8001166:	2300      	movs	r3, #0
 8001168:	71fb      	strb	r3, [r7, #7]
 800116a:	e016      	b.n	800119a <NRF24_TxBuffer+0x46>
		if(TxBuffer[n]==0xFF){
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	4a10      	ldr	r2, [pc, #64]	@ (80011b0 <NRF24_TxBuffer+0x5c>)
 8001170:	5cd3      	ldrb	r3, [r2, r3]
 8001172:	2bff      	cmp	r3, #255	@ 0xff
 8001174:	d10e      	bne.n	8001194 <NRF24_TxBuffer+0x40>
			++TxBuffer[n];
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	4a0d      	ldr	r2, [pc, #52]	@ (80011b0 <NRF24_TxBuffer+0x5c>)
 800117a:	5cd2      	ldrb	r2, [r2, r3]
 800117c:	3201      	adds	r2, #1
 800117e:	b2d1      	uxtb	r1, r2
 8001180:	4a0b      	ldr	r2, [pc, #44]	@ (80011b0 <NRF24_TxBuffer+0x5c>)
 8001182:	54d1      	strb	r1, [r2, r3]
			++TxBuffer[n+1];
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	3301      	adds	r3, #1
 8001188:	4a09      	ldr	r2, [pc, #36]	@ (80011b0 <NRF24_TxBuffer+0x5c>)
 800118a:	5cd2      	ldrb	r2, [r2, r3]
 800118c:	3201      	adds	r2, #1
 800118e:	b2d1      	uxtb	r1, r2
 8001190:	4a07      	ldr	r2, [pc, #28]	@ (80011b0 <NRF24_TxBuffer+0x5c>)
 8001192:	54d1      	strb	r1, [r2, r3]
	for (uint8_t n = 0; n < 30; ++n) {
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	3301      	adds	r3, #1
 8001198:	71fb      	strb	r3, [r7, #7]
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b1d      	cmp	r3, #29
 800119e:	d9e5      	bls.n	800116c <NRF24_TxBuffer+0x18>
		}
	}
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200000d4 	.word	0x200000d4

080011b4 <NRF24_StateMachine>:

void NRF24_StateMachine(void){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	switch (NRF24_mode){
 80011b8:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <NRF24_StateMachine+0x50>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d81a      	bhi.n	80011f6 <NRF24_StateMachine+0x42>
 80011c0:	a201      	add	r2, pc, #4	@ (adr r2, 80011c8 <NRF24_StateMachine+0x14>)
 80011c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c6:	bf00      	nop
 80011c8:	080011d9 	.word	0x080011d9
 80011cc:	080011ed 	.word	0x080011ed
 80011d0:	080011e7 	.word	0x080011e7
 80011d4:	080011fd 	.word	0x080011fd
		case Init:
			NRF24_RxConfiguration();
 80011d8:	f7ff fdae 	bl	8000d38 <NRF24_RxConfiguration>
			NRF24_PowerUp();
 80011dc:	f7ff fb8e 	bl	80008fc <NRF24_PowerUp>
			NRF24_ActualConfiguration();
 80011e0:	f7ff fbaa 	bl	8000938 <NRF24_ActualConfiguration>
			break;
 80011e4:	e00b      	b.n	80011fe <NRF24_StateMachine+0x4a>
		case RxMode:

			NRF24_Receive();
 80011e6:	f7ff ffa3 	bl	8001130 <NRF24_Receive>
			break;
 80011ea:	e008      	b.n	80011fe <NRF24_StateMachine+0x4a>
		case TxMode:
			NRF24_TxBuffer();
 80011ec:	f7ff ffb2 	bl	8001154 <NRF24_TxBuffer>
			NRF24_Transmit();
 80011f0:	f7ff ff52 	bl	8001098 <NRF24_Transmit>
			break;
 80011f4:	e003      	b.n	80011fe <NRF24_StateMachine+0x4a>
		case PowerSave:

			break;
		default:
			NRF24_init();
 80011f6:	f7ff ff35 	bl	8001064 <NRF24_init>
	}
}
 80011fa:	e000      	b.n	80011fe <NRF24_StateMachine+0x4a>
			break;
 80011fc:	bf00      	nop
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200000d3 	.word	0x200000d3

08001208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <MX_DMA_Init+0x78>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a1a      	ldr	r2, [pc, #104]	@ (8001280 <MX_DMA_Init+0x78>)
 8001218:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <MX_DMA_Init+0x78>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <MX_DMA_Init+0x78>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a13      	ldr	r2, [pc, #76]	@ (8001280 <MX_DMA_Init+0x78>)
 8001234:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <MX_DMA_Init+0x78>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2105      	movs	r1, #5
 800124a:	200e      	movs	r0, #14
 800124c:	f000 fda6 	bl	8001d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001250:	200e      	movs	r0, #14
 8001252:	f000 fdbf 	bl	8001dd4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2105      	movs	r1, #5
 800125a:	2038      	movs	r0, #56	@ 0x38
 800125c:	f000 fd9e 	bl	8001d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001260:	2038      	movs	r0, #56	@ 0x38
 8001262:	f000 fdb7 	bl	8001dd4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2105      	movs	r1, #5
 800126a:	203a      	movs	r0, #58	@ 0x3a
 800126c:	f000 fd96 	bl	8001d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001270:	203a      	movs	r0, #58	@ 0x3a
 8001272:	f000 fdaf 	bl	8001dd4 <HAL_NVIC_EnableIRQ>

}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800

08001284 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4a07      	ldr	r2, [pc, #28]	@ (80012b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001294:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	4a06      	ldr	r2, [pc, #24]	@ (80012b4 <vApplicationGetIdleTaskMemory+0x30>)
 800129a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2280      	movs	r2, #128	@ 0x80
 80012a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000124 	.word	0x20000124
 80012b4:	20000178 	.word	0x20000178

080012b8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012b8:	b5b0      	push	{r4, r5, r7, lr}
 80012ba:	b09c      	sub	sp, #112	@ 0x70
 80012bc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task10ms */
  osThreadDef(Task10ms, Task_10ms, osPriorityNormal, 0, 128);
 80012be:	4b27      	ldr	r3, [pc, #156]	@ (800135c <MX_FREERTOS_Init+0xa4>)
 80012c0:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80012c4:	461d      	mov	r5, r3
 80012c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task10msHandle = osThreadCreate(osThread(Task10ms), NULL);
 80012d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 fcd0 	bl	8004c7e <osThreadCreate>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001360 <MX_FREERTOS_Init+0xa8>)
 80012e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task100ms */
  osThreadDef(Task100ms, Task_100ms, osPriorityNormal, 0, 128);
 80012e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001364 <MX_FREERTOS_Init+0xac>)
 80012e6:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80012ea:	461d      	mov	r5, r3
 80012ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task100msHandle = osThreadCreate(osThread(Task100ms), NULL);
 80012f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f003 fcbd 	bl	8004c7e <osThreadCreate>
 8001304:	4603      	mov	r3, r0
 8001306:	4a18      	ldr	r2, [pc, #96]	@ (8001368 <MX_FREERTOS_Init+0xb0>)
 8001308:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1000ms */
  osThreadDef(Task1000ms, Task_1000ms, osPriorityIdle, 0, 128);
 800130a:	4b18      	ldr	r3, [pc, #96]	@ (800136c <MX_FREERTOS_Init+0xb4>)
 800130c:	f107 041c 	add.w	r4, r7, #28
 8001310:	461d      	mov	r5, r3
 8001312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001316:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800131a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1000msHandle = osThreadCreate(osThread(Task1000ms), NULL);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f003 fcaa 	bl	8004c7e <osThreadCreate>
 800132a:	4603      	mov	r3, r0
 800132c:	4a10      	ldr	r2, [pc, #64]	@ (8001370 <MX_FREERTOS_Init+0xb8>)
 800132e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1ms */
  osThreadDef(Task1ms, Task_1ms, osPriorityAboveNormal, 0, 128);
 8001330:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <MX_FREERTOS_Init+0xbc>)
 8001332:	463c      	mov	r4, r7
 8001334:	461d      	mov	r5, r3
 8001336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800133e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1msHandle = osThreadCreate(osThread(Task1ms), NULL);
 8001342:	463b      	mov	r3, r7
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f003 fc99 	bl	8004c7e <osThreadCreate>
 800134c:	4603      	mov	r3, r0
 800134e:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <MX_FREERTOS_Init+0xc0>)
 8001350:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001352:	bf00      	nop
 8001354:	3770      	adds	r7, #112	@ 0x70
 8001356:	46bd      	mov	sp, r7
 8001358:	bdb0      	pop	{r4, r5, r7, pc}
 800135a:	bf00      	nop
 800135c:	08006180 	.word	0x08006180
 8001360:	20000114 	.word	0x20000114
 8001364:	080061a8 	.word	0x080061a8
 8001368:	20000118 	.word	0x20000118
 800136c:	080061d0 	.word	0x080061d0
 8001370:	2000011c 	.word	0x2000011c
 8001374:	080061f4 	.word	0x080061f4
 8001378:	20000120 	.word	0x20000120

0800137c <Task_10ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_10ms */
void Task_10ms(void const * argument)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_10ms */
	task_init_10ms();
 8001384:	f7ff f8b1 	bl	80004ea <task_init_10ms>
  /* Infinite loop */
  for(;;)
  {
	task_10ms();
 8001388:	f7ff f8b6 	bl	80004f8 <task_10ms>
    osDelay(10);
 800138c:	200a      	movs	r0, #10
 800138e:	f003 fcc2 	bl	8004d16 <osDelay>
	task_10ms();
 8001392:	bf00      	nop
 8001394:	e7f8      	b.n	8001388 <Task_10ms+0xc>

08001396 <Task_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_100ms */
void Task_100ms(void const * argument)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_100ms */
	task_init_100ms();
 800139e:	f7ff f8b2 	bl	8000506 <task_init_100ms>
  /* Infinite loop */
  for(;;)
  {
	task_100ms();
 80013a2:	f7ff f8b7 	bl	8000514 <task_100ms>
    osDelay(100);
 80013a6:	2064      	movs	r0, #100	@ 0x64
 80013a8:	f003 fcb5 	bl	8004d16 <osDelay>
	task_100ms();
 80013ac:	bf00      	nop
 80013ae:	e7f8      	b.n	80013a2 <Task_100ms+0xc>

080013b0 <Task_1000ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1000ms */
void Task_1000ms(void const * argument)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1000ms */
	task_init_1000ms();
 80013b8:	f7ff f8b3 	bl	8000522 <task_init_1000ms>
  /* Infinite loop */
  for(;;)
  {
	task_1000ms();
 80013bc:	f7ff f8b8 	bl	8000530 <task_1000ms>
    osDelay(1000);
 80013c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013c4:	f003 fca7 	bl	8004d16 <osDelay>
	task_1000ms();
 80013c8:	bf00      	nop
 80013ca:	e7f7      	b.n	80013bc <Task_1000ms+0xc>

080013cc <Task_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1ms */
void Task_1ms(void const * argument)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1ms */
	task_init_1ms();
 80013d4:	f7ff f87c 	bl	80004d0 <task_init_1ms>
  /* Infinite loop */
  for(;;)
  {
	task_1ms();
 80013d8:	f7ff f881 	bl	80004de <task_1ms>
    osDelay(1);
 80013dc:	2001      	movs	r0, #1
 80013de:	f003 fc9a 	bl	8004d16 <osDelay>
	task_1ms();
 80013e2:	bf00      	nop
 80013e4:	e7f8      	b.n	80013d8 <Task_1ms+0xc>
	...

080013e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	@ 0x28
 80013ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	4b32      	ldr	r3, [pc, #200]	@ (80014cc <MX_GPIO_Init+0xe4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a31      	ldr	r2, [pc, #196]	@ (80014cc <MX_GPIO_Init+0xe4>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b2f      	ldr	r3, [pc, #188]	@ (80014cc <MX_GPIO_Init+0xe4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <MX_GPIO_Init+0xe4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4a2a      	ldr	r2, [pc, #168]	@ (80014cc <MX_GPIO_Init+0xe4>)
 8001424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <MX_GPIO_Init+0xe4>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	4b24      	ldr	r3, [pc, #144]	@ (80014cc <MX_GPIO_Init+0xe4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a23      	ldr	r2, [pc, #140]	@ (80014cc <MX_GPIO_Init+0xe4>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b21      	ldr	r3, [pc, #132]	@ (80014cc <MX_GPIO_Init+0xe4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <MX_GPIO_Init+0xe4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a1c      	ldr	r2, [pc, #112]	@ (80014cc <MX_GPIO_Init+0xe4>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <MX_GPIO_Init+0xe4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP280_CSN_GPIO_Port, BMP280_CSN_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001474:	4816      	ldr	r0, [pc, #88]	@ (80014d0 <MX_GPIO_Init+0xe8>)
 8001476:	f001 f9d1 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001480:	4814      	ldr	r0, [pc, #80]	@ (80014d4 <MX_GPIO_Init+0xec>)
 8001482:	f001 f9cb 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP280_CSN_Pin;
 8001486:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMP280_CSN_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	480c      	ldr	r0, [pc, #48]	@ (80014d0 <MX_GPIO_Init+0xe8>)
 80014a0:	f001 f838 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 80014a4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <MX_GPIO_Init+0xec>)
 80014be:	f001 f829 	bl	8002514 <HAL_GPIO_Init>

}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	@ 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020400 	.word	0x40020400

080014d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014dc:	f000 fb64 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e0:	f000 f812 	bl	8001508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e4:	f7ff ff80 	bl	80013e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80014e8:	f7ff fe8e 	bl	8001208 <MX_DMA_Init>
  MX_SPI1_Init();
 80014ec:	f000 f88c 	bl	8001608 <MX_SPI1_Init>
  MX_SPI2_Init();
 80014f0:	f000 f8c0 	bl	8001674 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  NRF24_init();
 80014f4:	f7ff fdb6 	bl	8001064 <NRF24_init>
  BMP280_init();
 80014f8:	f7ff f88a 	bl	8000610 <BMP280_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80014fc:	f7ff fedc 	bl	80012b8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001500:	f003 fbb6 	bl	8004c70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <main+0x2c>

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b094      	sub	sp, #80	@ 0x50
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	2230      	movs	r2, #48	@ 0x30
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f004 fdf4 	bl	8006104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <SystemClock_Config+0xc8>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001534:	4a26      	ldr	r2, [pc, #152]	@ (80015d0 <SystemClock_Config+0xc8>)
 8001536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800153a:	6413      	str	r3, [r2, #64]	@ 0x40
 800153c:	4b24      	ldr	r3, [pc, #144]	@ (80015d0 <SystemClock_Config+0xc8>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <SystemClock_Config+0xcc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a20      	ldr	r2, [pc, #128]	@ (80015d4 <SystemClock_Config+0xcc>)
 8001552:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <SystemClock_Config+0xcc>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001564:	2302      	movs	r3, #2
 8001566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001568:	2301      	movs	r3, #1
 800156a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800156c:	2310      	movs	r3, #16
 800156e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001570:	2302      	movs	r3, #2
 8001572:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001574:	2300      	movs	r3, #0
 8001576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001578:	2308      	movs	r3, #8
 800157a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800157c:	2364      	movs	r3, #100	@ 0x64
 800157e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001580:	2302      	movs	r3, #2
 8001582:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001584:	2304      	movs	r3, #4
 8001586:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001588:	f107 0320 	add.w	r3, r7, #32
 800158c:	4618      	mov	r0, r3
 800158e:	f001 f95f 	bl	8002850 <HAL_RCC_OscConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001598:	f000 f830 	bl	80015fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159c:	230f      	movs	r3, #15
 800159e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a0:	2302      	movs	r3, #2
 80015a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2103      	movs	r1, #3
 80015b8:	4618      	mov	r0, r3
 80015ba:	f001 fbc1 	bl	8002d40 <HAL_RCC_ClockConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015c4:	f000 f81a 	bl	80015fc <Error_Handler>
  }
}
 80015c8:	bf00      	nop
 80015ca:	3750      	adds	r7, #80	@ 0x50
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40007000 	.word	0x40007000

080015d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a04      	ldr	r2, [pc, #16]	@ (80015f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015ea:	f000 faff 	bl	8001bec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40014800 	.word	0x40014800

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <Error_Handler+0x8>

08001608 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800160c:	4b17      	ldr	r3, [pc, #92]	@ (800166c <MX_SPI1_Init+0x64>)
 800160e:	4a18      	ldr	r2, [pc, #96]	@ (8001670 <MX_SPI1_Init+0x68>)
 8001610:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001612:	4b16      	ldr	r3, [pc, #88]	@ (800166c <MX_SPI1_Init+0x64>)
 8001614:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001618:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800161a:	4b14      	ldr	r3, [pc, #80]	@ (800166c <MX_SPI1_Init+0x64>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <MX_SPI1_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <MX_SPI1_Init+0x64>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800162c:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <MX_SPI1_Init+0x64>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001632:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <MX_SPI1_Init+0x64>)
 8001634:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001638:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800163a:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <MX_SPI1_Init+0x64>)
 800163c:	2218      	movs	r2, #24
 800163e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001640:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <MX_SPI1_Init+0x64>)
 8001642:	2200      	movs	r2, #0
 8001644:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <MX_SPI1_Init+0x64>)
 8001648:	2200      	movs	r2, #0
 800164a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800164c:	4b07      	ldr	r3, [pc, #28]	@ (800166c <MX_SPI1_Init+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <MX_SPI1_Init+0x64>)
 8001654:	220a      	movs	r2, #10
 8001656:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001658:	4804      	ldr	r0, [pc, #16]	@ (800166c <MX_SPI1_Init+0x64>)
 800165a:	f001 fdaf 	bl	80031bc <HAL_SPI_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001664:	f7ff ffca 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000378 	.word	0x20000378
 8001670:	40013000 	.word	0x40013000

08001674 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001678:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <MX_SPI2_Init+0x64>)
 800167a:	4a18      	ldr	r2, [pc, #96]	@ (80016dc <MX_SPI2_Init+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800167e:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <MX_SPI2_Init+0x64>)
 8001680:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001684:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001686:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <MX_SPI2_Init+0x64>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800168c:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <MX_SPI2_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001692:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <MX_SPI2_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001698:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <MX_SPI2_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <MX_SPI2_Init+0x64>)
 80016a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <MX_SPI2_Init+0x64>)
 80016a8:	2218      	movs	r2, #24
 80016aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ac:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <MX_SPI2_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <MX_SPI2_Init+0x64>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016b8:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <MX_SPI2_Init+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <MX_SPI2_Init+0x64>)
 80016c0:	220a      	movs	r2, #10
 80016c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016c4:	4804      	ldr	r0, [pc, #16]	@ (80016d8 <MX_SPI2_Init+0x64>)
 80016c6:	f001 fd79 	bl	80031bc <HAL_SPI_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016d0:	f7ff ff94 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200003d0 	.word	0x200003d0
 80016dc:	40003800 	.word	0x40003800

080016e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	@ 0x30
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a8a      	ldr	r2, [pc, #552]	@ (8001928 <HAL_SPI_MspInit+0x248>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	f040 8089 	bne.w	8001816 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	61bb      	str	r3, [r7, #24]
 8001708:	4b88      	ldr	r3, [pc, #544]	@ (800192c <HAL_SPI_MspInit+0x24c>)
 800170a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170c:	4a87      	ldr	r2, [pc, #540]	@ (800192c <HAL_SPI_MspInit+0x24c>)
 800170e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001712:	6453      	str	r3, [r2, #68]	@ 0x44
 8001714:	4b85      	ldr	r3, [pc, #532]	@ (800192c <HAL_SPI_MspInit+0x24c>)
 8001716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001718:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	4b81      	ldr	r3, [pc, #516]	@ (800192c <HAL_SPI_MspInit+0x24c>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001728:	4a80      	ldr	r2, [pc, #512]	@ (800192c <HAL_SPI_MspInit+0x24c>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001730:	4b7e      	ldr	r3, [pc, #504]	@ (800192c <HAL_SPI_MspInit+0x24c>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MISO_Pin|NRF24_MOSI_Pin;
 800173c:	23e0      	movs	r3, #224	@ 0xe0
 800173e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800174c:	2305      	movs	r3, #5
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	4619      	mov	r1, r3
 8001756:	4876      	ldr	r0, [pc, #472]	@ (8001930 <HAL_SPI_MspInit+0x250>)
 8001758:	f000 fedc 	bl	8002514 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800175c:	4b75      	ldr	r3, [pc, #468]	@ (8001934 <HAL_SPI_MspInit+0x254>)
 800175e:	4a76      	ldr	r2, [pc, #472]	@ (8001938 <HAL_SPI_MspInit+0x258>)
 8001760:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001762:	4b74      	ldr	r3, [pc, #464]	@ (8001934 <HAL_SPI_MspInit+0x254>)
 8001764:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001768:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800176a:	4b72      	ldr	r3, [pc, #456]	@ (8001934 <HAL_SPI_MspInit+0x254>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001770:	4b70      	ldr	r3, [pc, #448]	@ (8001934 <HAL_SPI_MspInit+0x254>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001776:	4b6f      	ldr	r3, [pc, #444]	@ (8001934 <HAL_SPI_MspInit+0x254>)
 8001778:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800177c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800177e:	4b6d      	ldr	r3, [pc, #436]	@ (8001934 <HAL_SPI_MspInit+0x254>)
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001784:	4b6b      	ldr	r3, [pc, #428]	@ (8001934 <HAL_SPI_MspInit+0x254>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800178a:	4b6a      	ldr	r3, [pc, #424]	@ (8001934 <HAL_SPI_MspInit+0x254>)
 800178c:	2200      	movs	r2, #0
 800178e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001790:	4b68      	ldr	r3, [pc, #416]	@ (8001934 <HAL_SPI_MspInit+0x254>)
 8001792:	2200      	movs	r2, #0
 8001794:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001796:	4b67      	ldr	r3, [pc, #412]	@ (8001934 <HAL_SPI_MspInit+0x254>)
 8001798:	2200      	movs	r2, #0
 800179a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800179c:	4865      	ldr	r0, [pc, #404]	@ (8001934 <HAL_SPI_MspInit+0x254>)
 800179e:	f000 fb27 	bl	8001df0 <HAL_DMA_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80017a8:	f7ff ff28 	bl	80015fc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a61      	ldr	r2, [pc, #388]	@ (8001934 <HAL_SPI_MspInit+0x254>)
 80017b0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80017b2:	4a60      	ldr	r2, [pc, #384]	@ (8001934 <HAL_SPI_MspInit+0x254>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80017b8:	4b60      	ldr	r3, [pc, #384]	@ (800193c <HAL_SPI_MspInit+0x25c>)
 80017ba:	4a61      	ldr	r2, [pc, #388]	@ (8001940 <HAL_SPI_MspInit+0x260>)
 80017bc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80017be:	4b5f      	ldr	r3, [pc, #380]	@ (800193c <HAL_SPI_MspInit+0x25c>)
 80017c0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017c4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c6:	4b5d      	ldr	r3, [pc, #372]	@ (800193c <HAL_SPI_MspInit+0x25c>)
 80017c8:	2240      	movs	r2, #64	@ 0x40
 80017ca:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017cc:	4b5b      	ldr	r3, [pc, #364]	@ (800193c <HAL_SPI_MspInit+0x25c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017d2:	4b5a      	ldr	r3, [pc, #360]	@ (800193c <HAL_SPI_MspInit+0x25c>)
 80017d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017d8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017da:	4b58      	ldr	r3, [pc, #352]	@ (800193c <HAL_SPI_MspInit+0x25c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017e0:	4b56      	ldr	r3, [pc, #344]	@ (800193c <HAL_SPI_MspInit+0x25c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80017e6:	4b55      	ldr	r3, [pc, #340]	@ (800193c <HAL_SPI_MspInit+0x25c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017ec:	4b53      	ldr	r3, [pc, #332]	@ (800193c <HAL_SPI_MspInit+0x25c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017f2:	4b52      	ldr	r3, [pc, #328]	@ (800193c <HAL_SPI_MspInit+0x25c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80017f8:	4850      	ldr	r0, [pc, #320]	@ (800193c <HAL_SPI_MspInit+0x25c>)
 80017fa:	f000 faf9 	bl	8001df0 <HAL_DMA_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001804:	f7ff fefa 	bl	80015fc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a4c      	ldr	r2, [pc, #304]	@ (800193c <HAL_SPI_MspInit+0x25c>)
 800180c:	649a      	str	r2, [r3, #72]	@ 0x48
 800180e:	4a4b      	ldr	r2, [pc, #300]	@ (800193c <HAL_SPI_MspInit+0x25c>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001814:	e084      	b.n	8001920 <HAL_SPI_MspInit+0x240>
  else if(spiHandle->Instance==SPI2)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a4a      	ldr	r2, [pc, #296]	@ (8001944 <HAL_SPI_MspInit+0x264>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d17f      	bne.n	8001920 <HAL_SPI_MspInit+0x240>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	4b41      	ldr	r3, [pc, #260]	@ (800192c <HAL_SPI_MspInit+0x24c>)
 8001826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001828:	4a40      	ldr	r2, [pc, #256]	@ (800192c <HAL_SPI_MspInit+0x24c>)
 800182a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800182e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001830:	4b3e      	ldr	r3, [pc, #248]	@ (800192c <HAL_SPI_MspInit+0x24c>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	4b3a      	ldr	r3, [pc, #232]	@ (800192c <HAL_SPI_MspInit+0x24c>)
 8001842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001844:	4a39      	ldr	r2, [pc, #228]	@ (800192c <HAL_SPI_MspInit+0x24c>)
 8001846:	f043 0304 	orr.w	r3, r3, #4
 800184a:	6313      	str	r3, [r2, #48]	@ 0x30
 800184c:	4b37      	ldr	r3, [pc, #220]	@ (800192c <HAL_SPI_MspInit+0x24c>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	4b33      	ldr	r3, [pc, #204]	@ (800192c <HAL_SPI_MspInit+0x24c>)
 800185e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001860:	4a32      	ldr	r2, [pc, #200]	@ (800192c <HAL_SPI_MspInit+0x24c>)
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	6313      	str	r3, [r2, #48]	@ 0x30
 8001868:	4b30      	ldr	r3, [pc, #192]	@ (800192c <HAL_SPI_MspInit+0x24c>)
 800186a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP280_MISO_Pin|BMP280_MOSI_Pin;
 8001874:	230c      	movs	r3, #12
 8001876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001884:	2305      	movs	r3, #5
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	4619      	mov	r1, r3
 800188e:	482e      	ldr	r0, [pc, #184]	@ (8001948 <HAL_SPI_MspInit+0x268>)
 8001890:	f000 fe40 	bl	8002514 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BMP280_SCK_Pin;
 8001894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018a6:	2305      	movs	r3, #5
 80018a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BMP280_SCK_GPIO_Port, &GPIO_InitStruct);
 80018aa:	f107 031c 	add.w	r3, r7, #28
 80018ae:	4619      	mov	r1, r3
 80018b0:	4826      	ldr	r0, [pc, #152]	@ (800194c <HAL_SPI_MspInit+0x26c>)
 80018b2:	f000 fe2f 	bl	8002514 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80018b6:	4b26      	ldr	r3, [pc, #152]	@ (8001950 <HAL_SPI_MspInit+0x270>)
 80018b8:	4a26      	ldr	r2, [pc, #152]	@ (8001954 <HAL_SPI_MspInit+0x274>)
 80018ba:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80018bc:	4b24      	ldr	r3, [pc, #144]	@ (8001950 <HAL_SPI_MspInit+0x270>)
 80018be:	2200      	movs	r2, #0
 80018c0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c2:	4b23      	ldr	r3, [pc, #140]	@ (8001950 <HAL_SPI_MspInit+0x270>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c8:	4b21      	ldr	r3, [pc, #132]	@ (8001950 <HAL_SPI_MspInit+0x270>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018ce:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <HAL_SPI_MspInit+0x270>)
 80018d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018d4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001950 <HAL_SPI_MspInit+0x270>)
 80018d8:	2200      	movs	r2, #0
 80018da:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <HAL_SPI_MspInit+0x270>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80018e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <HAL_SPI_MspInit+0x270>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018e8:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <HAL_SPI_MspInit+0x270>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ee:	4b18      	ldr	r3, [pc, #96]	@ (8001950 <HAL_SPI_MspInit+0x270>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80018f4:	4816      	ldr	r0, [pc, #88]	@ (8001950 <HAL_SPI_MspInit+0x270>)
 80018f6:	f000 fa7b 	bl	8001df0 <HAL_DMA_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_SPI_MspInit+0x224>
      Error_Handler();
 8001900:	f7ff fe7c 	bl	80015fc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a12      	ldr	r2, [pc, #72]	@ (8001950 <HAL_SPI_MspInit+0x270>)
 8001908:	64da      	str	r2, [r3, #76]	@ 0x4c
 800190a:	4a11      	ldr	r2, [pc, #68]	@ (8001950 <HAL_SPI_MspInit+0x270>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2105      	movs	r1, #5
 8001914:	2024      	movs	r0, #36	@ 0x24
 8001916:	f000 fa41 	bl	8001d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800191a:	2024      	movs	r0, #36	@ 0x24
 800191c:	f000 fa5a 	bl	8001dd4 <HAL_NVIC_EnableIRQ>
}
 8001920:	bf00      	nop
 8001922:	3730      	adds	r7, #48	@ 0x30
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40013000 	.word	0x40013000
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000
 8001934:	20000428 	.word	0x20000428
 8001938:	40026410 	.word	0x40026410
 800193c:	20000488 	.word	0x20000488
 8001940:	40026440 	.word	0x40026440
 8001944:	40003800 	.word	0x40003800
 8001948:	40020800 	.word	0x40020800
 800194c:	40020400 	.word	0x40020400
 8001950:	200004e8 	.word	0x200004e8
 8001954:	40026058 	.word	0x40026058

08001958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_MspInit+0x54>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	4a11      	ldr	r2, [pc, #68]	@ (80019ac <HAL_MspInit+0x54>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800196c:	6453      	str	r3, [r2, #68]	@ 0x44
 800196e:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <HAL_MspInit+0x54>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HAL_MspInit+0x54>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <HAL_MspInit+0x54>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	@ 0x40
 800198a:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <HAL_MspInit+0x54>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	210f      	movs	r1, #15
 800199a:	f06f 0001 	mvn.w	r0, #1
 800199e:	f000 f9fd 	bl	8001d9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800

080019b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08c      	sub	sp, #48	@ 0x30
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a80 <HAL_InitTick+0xd0>)
 80019c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c8:	4a2d      	ldr	r2, [pc, #180]	@ (8001a80 <HAL_InitTick+0xd0>)
 80019ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a80 <HAL_InitTick+0xd0>)
 80019d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019dc:	f107 020c 	add.w	r2, r7, #12
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	4611      	mov	r1, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f001 fbb6 	bl	8003158 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80019ec:	f001 fba0 	bl	8003130 <HAL_RCC_GetPCLK2Freq>
 80019f0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019f4:	4a23      	ldr	r2, [pc, #140]	@ (8001a84 <HAL_InitTick+0xd4>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	0c9b      	lsrs	r3, r3, #18
 80019fc:	3b01      	subs	r3, #1
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001a00:	4b21      	ldr	r3, [pc, #132]	@ (8001a88 <HAL_InitTick+0xd8>)
 8001a02:	4a22      	ldr	r2, [pc, #136]	@ (8001a8c <HAL_InitTick+0xdc>)
 8001a04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001a06:	4b20      	ldr	r3, [pc, #128]	@ (8001a88 <HAL_InitTick+0xd8>)
 8001a08:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a0c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001a88 <HAL_InitTick+0xd8>)
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001a14:	4b1c      	ldr	r3, [pc, #112]	@ (8001a88 <HAL_InitTick+0xd8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <HAL_InitTick+0xd8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a20:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <HAL_InitTick+0xd8>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001a26:	4818      	ldr	r0, [pc, #96]	@ (8001a88 <HAL_InitTick+0xd8>)
 8001a28:	f002 fe96 	bl	8004758 <HAL_TIM_Base_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001a32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d11b      	bne.n	8001a72 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001a3a:	4813      	ldr	r0, [pc, #76]	@ (8001a88 <HAL_InitTick+0xd8>)
 8001a3c:	f002 fee6 	bl	800480c <HAL_TIM_Base_Start_IT>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001a46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d111      	bne.n	8001a72 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a4e:	201a      	movs	r0, #26
 8001a50:	f000 f9c0 	bl	8001dd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b0f      	cmp	r3, #15
 8001a58:	d808      	bhi.n	8001a6c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	201a      	movs	r0, #26
 8001a60:	f000 f99c 	bl	8001d9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a64:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <HAL_InitTick+0xe0>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e002      	b.n	8001a72 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3730      	adds	r7, #48	@ 0x30
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	431bde83 	.word	0x431bde83
 8001a88:	20000548 	.word	0x20000548
 8001a8c:	40014800 	.word	0x40014800
 8001a90:	20000004 	.word	0x20000004

08001a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <NMI_Handler+0x4>

08001a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <HardFault_Handler+0x4>

08001aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <MemManage_Handler+0x4>

08001aac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <BusFault_Handler+0x4>

08001ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <UsageFault_Handler+0x4>

08001abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001ad0:	4802      	ldr	r0, [pc, #8]	@ (8001adc <DMA1_Stream3_IRQHandler+0x10>)
 8001ad2:	f000 fab5 	bl	8002040 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200004e8 	.word	0x200004e8

08001ae0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001ae6:	f002 fef3 	bl	80048d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000548 	.word	0x20000548

08001af4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001af8:	4802      	ldr	r0, [pc, #8]	@ (8001b04 <SPI2_IRQHandler+0x10>)
 8001afa:	f002 fa63 	bl	8003fc4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200003d0 	.word	0x200003d0

08001b08 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001b0c:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <DMA2_Stream0_IRQHandler+0x10>)
 8001b0e:	f000 fa97 	bl	8002040 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000428 	.word	0x20000428

08001b1c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b20:	4802      	ldr	r0, [pc, #8]	@ (8001b2c <DMA2_Stream2_IRQHandler+0x10>)
 8001b22:	f000 fa8d 	bl	8002040 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000488 	.word	0x20000488

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <SystemInit+0x20>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b3a:	4a05      	ldr	r2, [pc, #20]	@ (8001b50 <SystemInit+0x20>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b58:	f7ff ffea 	bl	8001b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b5c:	480c      	ldr	r0, [pc, #48]	@ (8001b90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b5e:	490d      	ldr	r1, [pc, #52]	@ (8001b94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b60:	4a0d      	ldr	r2, [pc, #52]	@ (8001b98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b64:	e002      	b.n	8001b6c <LoopCopyDataInit>

08001b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6a:	3304      	adds	r3, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b70:	d3f9      	bcc.n	8001b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b72:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b74:	4c0a      	ldr	r4, [pc, #40]	@ (8001ba0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b78:	e001      	b.n	8001b7e <LoopFillZerobss>

08001b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b7c:	3204      	adds	r2, #4

08001b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b80:	d3fb      	bcc.n	8001b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b82:	f004 fac7 	bl	8006114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7ff fca7 	bl	80014d8 <main>
  bx  lr    
 8001b8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001b98:	08006248 	.word	0x08006248
  ldr r2, =_sbss
 8001b9c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ba0:	200042e8 	.word	0x200042e8

08001ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bac:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001be8 <HAL_Init+0x40>)
 8001bb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <HAL_Init+0x40>)
 8001bbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc4:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a07      	ldr	r2, [pc, #28]	@ (8001be8 <HAL_Init+0x40>)
 8001bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f000 f8d8 	bl	8001d86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd6:	200f      	movs	r0, #15
 8001bd8:	f7ff feea 	bl	80019b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bdc:	f7ff febc 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023c00 	.word	0x40023c00

08001bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <HAL_IncTick+0x20>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_IncTick+0x24>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a04      	ldr	r2, [pc, #16]	@ (8001c10 <HAL_IncTick+0x24>)
 8001bfe:	6013      	str	r3, [r2, #0]
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000008 	.word	0x20000008
 8001c10:	20000590 	.word	0x20000590

08001c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return uwTick;
 8001c18:	4b03      	ldr	r3, [pc, #12]	@ (8001c28 <HAL_GetTick+0x14>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000590 	.word	0x20000590

08001c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	@ (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	60d3      	str	r3, [r2, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c78:	4b04      	ldr	r3, [pc, #16]	@ (8001c8c <__NVIC_GetPriorityGrouping+0x18>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	f003 0307 	and.w	r3, r3, #7
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	db0b      	blt.n	8001cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	f003 021f 	and.w	r2, r3, #31
 8001ca8:	4907      	ldr	r1, [pc, #28]	@ (8001cc8 <__NVIC_EnableIRQ+0x38>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	095b      	lsrs	r3, r3, #5
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000e100 	.word	0xe000e100

08001ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db0a      	blt.n	8001cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	490c      	ldr	r1, [pc, #48]	@ (8001d18 <__NVIC_SetPriority+0x4c>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf4:	e00a      	b.n	8001d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4908      	ldr	r1, [pc, #32]	@ (8001d1c <__NVIC_SetPriority+0x50>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3b04      	subs	r3, #4
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	440b      	add	r3, r1
 8001d0a:	761a      	strb	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	@ 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f1c3 0307 	rsb	r3, r3, #7
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	bf28      	it	cs
 8001d3e:	2304      	movcs	r3, #4
 8001d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d902      	bls.n	8001d50 <NVIC_EncodePriority+0x30>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b03      	subs	r3, #3
 8001d4e:	e000      	b.n	8001d52 <NVIC_EncodePriority+0x32>
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	401a      	ands	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43d9      	mvns	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	4313      	orrs	r3, r2
         );
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	@ 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ff4c 	bl	8001c2c <__NVIC_SetPriorityGrouping>
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dae:	f7ff ff61 	bl	8001c74 <__NVIC_GetPriorityGrouping>
 8001db2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	68b9      	ldr	r1, [r7, #8]
 8001db8:	6978      	ldr	r0, [r7, #20]
 8001dba:	f7ff ffb1 	bl	8001d20 <NVIC_EncodePriority>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff80 	bl	8001ccc <__NVIC_SetPriority>
}
 8001dcc:	bf00      	nop
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff54 	bl	8001c90 <__NVIC_EnableIRQ>
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dfc:	f7ff ff0a 	bl	8001c14 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e099      	b.n	8001f40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0201 	bic.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e2c:	e00f      	b.n	8001e4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e2e:	f7ff fef1 	bl	8001c14 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b05      	cmp	r3, #5
 8001e3a:	d908      	bls.n	8001e4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2203      	movs	r2, #3
 8001e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e078      	b.n	8001f40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1e8      	bne.n	8001e2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	4b38      	ldr	r3, [pc, #224]	@ (8001f48 <HAL_DMA_Init+0x158>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d107      	bne.n	8001eb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f023 0307 	bic.w	r3, r3, #7
 8001ece:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d117      	bne.n	8001f12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00e      	beq.n	8001f12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 fa91 	bl	800241c <DMA_CheckFifoParam>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d008      	beq.n	8001f12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2240      	movs	r2, #64	@ 0x40
 8001f04:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e016      	b.n	8001f40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fa48 	bl	80023b0 <DMA_CalcBaseAndBitshift>
 8001f20:	4603      	mov	r3, r0
 8001f22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f28:	223f      	movs	r2, #63	@ 0x3f
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	f010803f 	.word	0xf010803f

08001f4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_DMA_Start_IT+0x26>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e040      	b.n	8001ff4 <HAL_DMA_Start_IT+0xa8>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d12f      	bne.n	8001fe6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 f9da 	bl	8002354 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa4:	223f      	movs	r2, #63	@ 0x3f
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0216 	orr.w	r2, r2, #22
 8001fba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d007      	beq.n	8001fd4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0208 	orr.w	r2, r2, #8
 8001fd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	e005      	b.n	8001ff2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d004      	beq.n	800201a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2280      	movs	r2, #128	@ 0x80
 8002014:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e00c      	b.n	8002034 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2205      	movs	r2, #5
 800201e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0201 	bic.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800204c:	4b8e      	ldr	r3, [pc, #568]	@ (8002288 <HAL_DMA_IRQHandler+0x248>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a8e      	ldr	r2, [pc, #568]	@ (800228c <HAL_DMA_IRQHandler+0x24c>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	0a9b      	lsrs	r3, r3, #10
 8002058:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206a:	2208      	movs	r2, #8
 800206c:	409a      	lsls	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4013      	ands	r3, r2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d01a      	beq.n	80020ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d013      	beq.n	80020ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0204 	bic.w	r2, r2, #4
 8002092:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002098:	2208      	movs	r2, #8
 800209a:	409a      	lsls	r2, r3
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a4:	f043 0201 	orr.w	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b0:	2201      	movs	r2, #1
 80020b2:	409a      	lsls	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d012      	beq.n	80020e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00b      	beq.n	80020e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ce:	2201      	movs	r2, #1
 80020d0:	409a      	lsls	r2, r3
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020da:	f043 0202 	orr.w	r2, r3, #2
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e6:	2204      	movs	r2, #4
 80020e8:	409a      	lsls	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d012      	beq.n	8002118 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00b      	beq.n	8002118 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002104:	2204      	movs	r2, #4
 8002106:	409a      	lsls	r2, r3
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002110:	f043 0204 	orr.w	r2, r3, #4
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211c:	2210      	movs	r2, #16
 800211e:	409a      	lsls	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d043      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d03c      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800213a:	2210      	movs	r2, #16
 800213c:	409a      	lsls	r2, r3
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d018      	beq.n	8002182 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d108      	bne.n	8002170 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	2b00      	cmp	r3, #0
 8002164:	d024      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4798      	blx	r3
 800216e:	e01f      	b.n	80021b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01b      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	4798      	blx	r3
 8002180:	e016      	b.n	80021b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218c:	2b00      	cmp	r3, #0
 800218e:	d107      	bne.n	80021a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0208 	bic.w	r2, r2, #8
 800219e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b4:	2220      	movs	r2, #32
 80021b6:	409a      	lsls	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 808f 	beq.w	80022e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 8087 	beq.w	80022e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d6:	2220      	movs	r2, #32
 80021d8:	409a      	lsls	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b05      	cmp	r3, #5
 80021e8:	d136      	bne.n	8002258 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0216 	bic.w	r2, r2, #22
 80021f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002208:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d103      	bne.n	800221a <HAL_DMA_IRQHandler+0x1da>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002216:	2b00      	cmp	r3, #0
 8002218:	d007      	beq.n	800222a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0208 	bic.w	r2, r2, #8
 8002228:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222e:	223f      	movs	r2, #63	@ 0x3f
 8002230:	409a      	lsls	r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800224a:	2b00      	cmp	r3, #0
 800224c:	d07e      	beq.n	800234c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	4798      	blx	r3
        }
        return;
 8002256:	e079      	b.n	800234c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d01d      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10d      	bne.n	8002290 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002278:	2b00      	cmp	r3, #0
 800227a:	d031      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4798      	blx	r3
 8002284:	e02c      	b.n	80022e0 <HAL_DMA_IRQHandler+0x2a0>
 8002286:	bf00      	nop
 8002288:	20000000 	.word	0x20000000
 800228c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d023      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	4798      	blx	r3
 80022a0:	e01e      	b.n	80022e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10f      	bne.n	80022d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0210 	bic.w	r2, r2, #16
 80022be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d032      	beq.n	800234e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d022      	beq.n	800233a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2205      	movs	r2, #5
 80022f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0201 	bic.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	3301      	adds	r3, #1
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	429a      	cmp	r2, r3
 8002316:	d307      	bcc.n	8002328 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f2      	bne.n	800230c <HAL_DMA_IRQHandler+0x2cc>
 8002326:	e000      	b.n	800232a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002328:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	4798      	blx	r3
 800234a:	e000      	b.n	800234e <HAL_DMA_IRQHandler+0x30e>
        return;
 800234c:	bf00      	nop
    }
  }
}
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002370:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b40      	cmp	r3, #64	@ 0x40
 8002380:	d108      	bne.n	8002394 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002392:	e007      	b.n	80023a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	60da      	str	r2, [r3, #12]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	3b10      	subs	r3, #16
 80023c0:	4a14      	ldr	r2, [pc, #80]	@ (8002414 <DMA_CalcBaseAndBitshift+0x64>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023ca:	4a13      	ldr	r2, [pc, #76]	@ (8002418 <DMA_CalcBaseAndBitshift+0x68>)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4413      	add	r3, r2
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d909      	bls.n	80023f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023e6:	f023 0303 	bic.w	r3, r3, #3
 80023ea:	1d1a      	adds	r2, r3, #4
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80023f0:	e007      	b.n	8002402 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023fa:	f023 0303 	bic.w	r3, r3, #3
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	aaaaaaab 	.word	0xaaaaaaab
 8002418:	08006230 	.word	0x08006230

0800241c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d11f      	bne.n	8002476 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d856      	bhi.n	80024ea <DMA_CheckFifoParam+0xce>
 800243c:	a201      	add	r2, pc, #4	@ (adr r2, 8002444 <DMA_CheckFifoParam+0x28>)
 800243e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002442:	bf00      	nop
 8002444:	08002455 	.word	0x08002455
 8002448:	08002467 	.word	0x08002467
 800244c:	08002455 	.word	0x08002455
 8002450:	080024eb 	.word	0x080024eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002458:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d046      	beq.n	80024ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002464:	e043      	b.n	80024ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800246e:	d140      	bne.n	80024f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002474:	e03d      	b.n	80024f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800247e:	d121      	bne.n	80024c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b03      	cmp	r3, #3
 8002484:	d837      	bhi.n	80024f6 <DMA_CheckFifoParam+0xda>
 8002486:	a201      	add	r2, pc, #4	@ (adr r2, 800248c <DMA_CheckFifoParam+0x70>)
 8002488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248c:	0800249d 	.word	0x0800249d
 8002490:	080024a3 	.word	0x080024a3
 8002494:	0800249d 	.word	0x0800249d
 8002498:	080024b5 	.word	0x080024b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
      break;
 80024a0:	e030      	b.n	8002504 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d025      	beq.n	80024fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b2:	e022      	b.n	80024fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024bc:	d11f      	bne.n	80024fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024c2:	e01c      	b.n	80024fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d903      	bls.n	80024d2 <DMA_CheckFifoParam+0xb6>
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d003      	beq.n	80024d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024d0:	e018      	b.n	8002504 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
      break;
 80024d6:	e015      	b.n	8002504 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00e      	beq.n	8002502 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
      break;
 80024e8:	e00b      	b.n	8002502 <DMA_CheckFifoParam+0xe6>
      break;
 80024ea:	bf00      	nop
 80024ec:	e00a      	b.n	8002504 <DMA_CheckFifoParam+0xe8>
      break;
 80024ee:	bf00      	nop
 80024f0:	e008      	b.n	8002504 <DMA_CheckFifoParam+0xe8>
      break;
 80024f2:	bf00      	nop
 80024f4:	e006      	b.n	8002504 <DMA_CheckFifoParam+0xe8>
      break;
 80024f6:	bf00      	nop
 80024f8:	e004      	b.n	8002504 <DMA_CheckFifoParam+0xe8>
      break;
 80024fa:	bf00      	nop
 80024fc:	e002      	b.n	8002504 <DMA_CheckFifoParam+0xe8>
      break;   
 80024fe:	bf00      	nop
 8002500:	e000      	b.n	8002504 <DMA_CheckFifoParam+0xe8>
      break;
 8002502:	bf00      	nop
    }
  } 
  
  return status; 
 8002504:	7bfb      	ldrb	r3, [r7, #15]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop

08002514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	@ 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	e159      	b.n	80027e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002530:	2201      	movs	r2, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	429a      	cmp	r2, r3
 800254a:	f040 8148 	bne.w	80027de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b01      	cmp	r3, #1
 8002558:	d005      	beq.n	8002566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002562:	2b02      	cmp	r3, #2
 8002564:	d130      	bne.n	80025c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	2203      	movs	r2, #3
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800259c:	2201      	movs	r2, #1
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 0201 	and.w	r2, r3, #1
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d017      	beq.n	8002604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	2203      	movs	r2, #3
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d123      	bne.n	8002658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	08da      	lsrs	r2, r3, #3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3208      	adds	r2, #8
 8002618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	220f      	movs	r2, #15
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	08da      	lsrs	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3208      	adds	r2, #8
 8002652:	69b9      	ldr	r1, [r7, #24]
 8002654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	2203      	movs	r2, #3
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0203 	and.w	r2, r3, #3
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 80a2 	beq.w	80027de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	4b57      	ldr	r3, [pc, #348]	@ (80027fc <HAL_GPIO_Init+0x2e8>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a2:	4a56      	ldr	r2, [pc, #344]	@ (80027fc <HAL_GPIO_Init+0x2e8>)
 80026a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026aa:	4b54      	ldr	r3, [pc, #336]	@ (80027fc <HAL_GPIO_Init+0x2e8>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b6:	4a52      	ldr	r2, [pc, #328]	@ (8002800 <HAL_GPIO_Init+0x2ec>)
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	3302      	adds	r3, #2
 80026be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	220f      	movs	r2, #15
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a49      	ldr	r2, [pc, #292]	@ (8002804 <HAL_GPIO_Init+0x2f0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d019      	beq.n	8002716 <HAL_GPIO_Init+0x202>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a48      	ldr	r2, [pc, #288]	@ (8002808 <HAL_GPIO_Init+0x2f4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d013      	beq.n	8002712 <HAL_GPIO_Init+0x1fe>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a47      	ldr	r2, [pc, #284]	@ (800280c <HAL_GPIO_Init+0x2f8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00d      	beq.n	800270e <HAL_GPIO_Init+0x1fa>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a46      	ldr	r2, [pc, #280]	@ (8002810 <HAL_GPIO_Init+0x2fc>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d007      	beq.n	800270a <HAL_GPIO_Init+0x1f6>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a45      	ldr	r2, [pc, #276]	@ (8002814 <HAL_GPIO_Init+0x300>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d101      	bne.n	8002706 <HAL_GPIO_Init+0x1f2>
 8002702:	2304      	movs	r3, #4
 8002704:	e008      	b.n	8002718 <HAL_GPIO_Init+0x204>
 8002706:	2307      	movs	r3, #7
 8002708:	e006      	b.n	8002718 <HAL_GPIO_Init+0x204>
 800270a:	2303      	movs	r3, #3
 800270c:	e004      	b.n	8002718 <HAL_GPIO_Init+0x204>
 800270e:	2302      	movs	r3, #2
 8002710:	e002      	b.n	8002718 <HAL_GPIO_Init+0x204>
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_GPIO_Init+0x204>
 8002716:	2300      	movs	r3, #0
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	f002 0203 	and.w	r2, r2, #3
 800271e:	0092      	lsls	r2, r2, #2
 8002720:	4093      	lsls	r3, r2
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002728:	4935      	ldr	r1, [pc, #212]	@ (8002800 <HAL_GPIO_Init+0x2ec>)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	089b      	lsrs	r3, r3, #2
 800272e:	3302      	adds	r3, #2
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002736:	4b38      	ldr	r3, [pc, #224]	@ (8002818 <HAL_GPIO_Init+0x304>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800275a:	4a2f      	ldr	r2, [pc, #188]	@ (8002818 <HAL_GPIO_Init+0x304>)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002760:	4b2d      	ldr	r3, [pc, #180]	@ (8002818 <HAL_GPIO_Init+0x304>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002784:	4a24      	ldr	r2, [pc, #144]	@ (8002818 <HAL_GPIO_Init+0x304>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800278a:	4b23      	ldr	r3, [pc, #140]	@ (8002818 <HAL_GPIO_Init+0x304>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002818 <HAL_GPIO_Init+0x304>)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b4:	4b18      	ldr	r3, [pc, #96]	@ (8002818 <HAL_GPIO_Init+0x304>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002818 <HAL_GPIO_Init+0x304>)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3301      	adds	r3, #1
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	2b0f      	cmp	r3, #15
 80027e8:	f67f aea2 	bls.w	8002530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	3724      	adds	r7, #36	@ 0x24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40023800 	.word	0x40023800
 8002800:	40013800 	.word	0x40013800
 8002804:	40020000 	.word	0x40020000
 8002808:	40020400 	.word	0x40020400
 800280c:	40020800 	.word	0x40020800
 8002810:	40020c00 	.word	0x40020c00
 8002814:	40021000 	.word	0x40021000
 8002818:	40013c00 	.word	0x40013c00

0800281c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
 8002828:	4613      	mov	r3, r2
 800282a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800282c:	787b      	ldrb	r3, [r7, #1]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002832:	887a      	ldrh	r2, [r7, #2]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002838:	e003      	b.n	8002842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800283a:	887b      	ldrh	r3, [r7, #2]
 800283c:	041a      	lsls	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	619a      	str	r2, [r3, #24]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e267      	b.n	8002d32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d075      	beq.n	800295a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800286e:	4b88      	ldr	r3, [pc, #544]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b04      	cmp	r3, #4
 8002878:	d00c      	beq.n	8002894 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287a:	4b85      	ldr	r3, [pc, #532]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002882:	2b08      	cmp	r3, #8
 8002884:	d112      	bne.n	80028ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002886:	4b82      	ldr	r3, [pc, #520]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800288e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002892:	d10b      	bne.n	80028ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	4b7e      	ldr	r3, [pc, #504]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d05b      	beq.n	8002958 <HAL_RCC_OscConfig+0x108>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d157      	bne.n	8002958 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e242      	b.n	8002d32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028b4:	d106      	bne.n	80028c4 <HAL_RCC_OscConfig+0x74>
 80028b6:	4b76      	ldr	r3, [pc, #472]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a75      	ldr	r2, [pc, #468]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e01d      	b.n	8002900 <HAL_RCC_OscConfig+0xb0>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x98>
 80028ce:	4b70      	ldr	r3, [pc, #448]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a6f      	ldr	r2, [pc, #444]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 80028d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	4b6d      	ldr	r3, [pc, #436]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a6c      	ldr	r2, [pc, #432]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e00b      	b.n	8002900 <HAL_RCC_OscConfig+0xb0>
 80028e8:	4b69      	ldr	r3, [pc, #420]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a68      	ldr	r2, [pc, #416]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 80028ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	4b66      	ldr	r3, [pc, #408]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a65      	ldr	r2, [pc, #404]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 80028fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d013      	beq.n	8002930 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7ff f984 	bl	8001c14 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002910:	f7ff f980 	bl	8001c14 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	@ 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e207      	b.n	8002d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002922:	4b5b      	ldr	r3, [pc, #364]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0xc0>
 800292e:	e014      	b.n	800295a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7ff f970 	bl	8001c14 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002938:	f7ff f96c 	bl	8001c14 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	@ 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e1f3      	b.n	8002d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294a:	4b51      	ldr	r3, [pc, #324]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0xe8>
 8002956:	e000      	b.n	800295a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d063      	beq.n	8002a2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002966:	4b4a      	ldr	r3, [pc, #296]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00b      	beq.n	800298a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002972:	4b47      	ldr	r3, [pc, #284]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800297a:	2b08      	cmp	r3, #8
 800297c:	d11c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800297e:	4b44      	ldr	r3, [pc, #272]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d116      	bne.n	80029b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298a:	4b41      	ldr	r3, [pc, #260]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_RCC_OscConfig+0x152>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d001      	beq.n	80029a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e1c7      	b.n	8002d32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4937      	ldr	r1, [pc, #220]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b6:	e03a      	b.n	8002a2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d020      	beq.n	8002a02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c0:	4b34      	ldr	r3, [pc, #208]	@ (8002a94 <HAL_RCC_OscConfig+0x244>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c6:	f7ff f925 	bl	8001c14 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ce:	f7ff f921 	bl	8001c14 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e1a8      	b.n	8002d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ec:	4b28      	ldr	r3, [pc, #160]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4925      	ldr	r1, [pc, #148]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	600b      	str	r3, [r1, #0]
 8002a00:	e015      	b.n	8002a2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a02:	4b24      	ldr	r3, [pc, #144]	@ (8002a94 <HAL_RCC_OscConfig+0x244>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7ff f904 	bl	8001c14 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a10:	f7ff f900 	bl	8001c14 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e187      	b.n	8002d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a22:	4b1b      	ldr	r3, [pc, #108]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d036      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d016      	beq.n	8002a70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a42:	4b15      	ldr	r3, [pc, #84]	@ (8002a98 <HAL_RCC_OscConfig+0x248>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a48:	f7ff f8e4 	bl	8001c14 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a50:	f7ff f8e0 	bl	8001c14 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e167      	b.n	8002d32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a62:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <HAL_RCC_OscConfig+0x240>)
 8002a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0x200>
 8002a6e:	e01b      	b.n	8002aa8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a70:	4b09      	ldr	r3, [pc, #36]	@ (8002a98 <HAL_RCC_OscConfig+0x248>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a76:	f7ff f8cd 	bl	8001c14 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7c:	e00e      	b.n	8002a9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a7e:	f7ff f8c9 	bl	8001c14 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d907      	bls.n	8002a9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e150      	b.n	8002d32 <HAL_RCC_OscConfig+0x4e2>
 8002a90:	40023800 	.word	0x40023800
 8002a94:	42470000 	.word	0x42470000
 8002a98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a9c:	4b88      	ldr	r3, [pc, #544]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1ea      	bne.n	8002a7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 8097 	beq.w	8002be4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aba:	4b81      	ldr	r3, [pc, #516]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10f      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	4b7d      	ldr	r3, [pc, #500]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	4a7c      	ldr	r2, [pc, #496]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ad6:	4b7a      	ldr	r3, [pc, #488]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae6:	4b77      	ldr	r3, [pc, #476]	@ (8002cc4 <HAL_RCC_OscConfig+0x474>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d118      	bne.n	8002b24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002af2:	4b74      	ldr	r3, [pc, #464]	@ (8002cc4 <HAL_RCC_OscConfig+0x474>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a73      	ldr	r2, [pc, #460]	@ (8002cc4 <HAL_RCC_OscConfig+0x474>)
 8002af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afe:	f7ff f889 	bl	8001c14 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b06:	f7ff f885 	bl	8001c14 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e10c      	b.n	8002d32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b18:	4b6a      	ldr	r3, [pc, #424]	@ (8002cc4 <HAL_RCC_OscConfig+0x474>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d106      	bne.n	8002b3a <HAL_RCC_OscConfig+0x2ea>
 8002b2c:	4b64      	ldr	r3, [pc, #400]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b30:	4a63      	ldr	r2, [pc, #396]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b38:	e01c      	b.n	8002b74 <HAL_RCC_OscConfig+0x324>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2b05      	cmp	r3, #5
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x30c>
 8002b42:	4b5f      	ldr	r3, [pc, #380]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b46:	4a5e      	ldr	r2, [pc, #376]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002b48:	f043 0304 	orr.w	r3, r3, #4
 8002b4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b4e:	4b5c      	ldr	r3, [pc, #368]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b52:	4a5b      	ldr	r2, [pc, #364]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b5a:	e00b      	b.n	8002b74 <HAL_RCC_OscConfig+0x324>
 8002b5c:	4b58      	ldr	r3, [pc, #352]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b60:	4a57      	ldr	r2, [pc, #348]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002b62:	f023 0301 	bic.w	r3, r3, #1
 8002b66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b68:	4b55      	ldr	r3, [pc, #340]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6c:	4a54      	ldr	r2, [pc, #336]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002b6e:	f023 0304 	bic.w	r3, r3, #4
 8002b72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d015      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7c:	f7ff f84a 	bl	8001c14 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b84:	f7ff f846 	bl	8001c14 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e0cb      	b.n	8002d32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9a:	4b49      	ldr	r3, [pc, #292]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0ee      	beq.n	8002b84 <HAL_RCC_OscConfig+0x334>
 8002ba6:	e014      	b.n	8002bd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba8:	f7ff f834 	bl	8001c14 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb0:	f7ff f830 	bl	8001c14 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e0b5      	b.n	8002d32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1ee      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bd2:	7dfb      	ldrb	r3, [r7, #23]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d105      	bne.n	8002be4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd8:	4b39      	ldr	r3, [pc, #228]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	4a38      	ldr	r2, [pc, #224]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002bde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002be2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 80a1 	beq.w	8002d30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bee:	4b34      	ldr	r3, [pc, #208]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d05c      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d141      	bne.n	8002c86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c02:	4b31      	ldr	r3, [pc, #196]	@ (8002cc8 <HAL_RCC_OscConfig+0x478>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7ff f804 	bl	8001c14 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c10:	f7ff f800 	bl	8001c14 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e087      	b.n	8002d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c22:	4b27      	ldr	r3, [pc, #156]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69da      	ldr	r2, [r3, #28]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3c:	019b      	lsls	r3, r3, #6
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c44:	085b      	lsrs	r3, r3, #1
 8002c46:	3b01      	subs	r3, #1
 8002c48:	041b      	lsls	r3, r3, #16
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	061b      	lsls	r3, r3, #24
 8002c52:	491b      	ldr	r1, [pc, #108]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c58:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <HAL_RCC_OscConfig+0x478>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5e:	f7fe ffd9 	bl	8001c14 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c66:	f7fe ffd5 	bl	8001c14 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e05c      	b.n	8002d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c78:	4b11      	ldr	r3, [pc, #68]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x416>
 8002c84:	e054      	b.n	8002d30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c86:	4b10      	ldr	r3, [pc, #64]	@ (8002cc8 <HAL_RCC_OscConfig+0x478>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe ffc2 	bl	8001c14 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c94:	f7fe ffbe 	bl	8001c14 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e045      	b.n	8002d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca6:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x444>
 8002cb2:	e03d      	b.n	8002d30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d107      	bne.n	8002ccc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e038      	b.n	8002d32 <HAL_RCC_OscConfig+0x4e2>
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40007000 	.word	0x40007000
 8002cc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d3c <HAL_RCC_OscConfig+0x4ec>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d028      	beq.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d121      	bne.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d11a      	bne.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d111      	bne.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d12:	085b      	lsrs	r3, r3, #1
 8002d14:	3b01      	subs	r3, #1
 8002d16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d107      	bne.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800

08002d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0cc      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d54:	4b68      	ldr	r3, [pc, #416]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d90c      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b65      	ldr	r3, [pc, #404]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b63      	ldr	r3, [pc, #396]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0b8      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d020      	beq.n	8002dca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d94:	4b59      	ldr	r3, [pc, #356]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	4a58      	ldr	r2, [pc, #352]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dac:	4b53      	ldr	r3, [pc, #332]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4a52      	ldr	r2, [pc, #328]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002db6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db8:	4b50      	ldr	r3, [pc, #320]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	494d      	ldr	r1, [pc, #308]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d044      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	4b47      	ldr	r3, [pc, #284]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d119      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e07f      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d003      	beq.n	8002dfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d107      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfe:	4b3f      	ldr	r3, [pc, #252]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e06f      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e067      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e1e:	4b37      	ldr	r3, [pc, #220]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f023 0203 	bic.w	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	4934      	ldr	r1, [pc, #208]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e30:	f7fe fef0 	bl	8001c14 <HAL_GetTick>
 8002e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e38:	f7fe feec 	bl	8001c14 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e04f      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	4b2b      	ldr	r3, [pc, #172]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 020c 	and.w	r2, r3, #12
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d1eb      	bne.n	8002e38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e60:	4b25      	ldr	r3, [pc, #148]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d20c      	bcs.n	8002e88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b22      	ldr	r3, [pc, #136]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	4b20      	ldr	r3, [pc, #128]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e032      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e94:	4b19      	ldr	r3, [pc, #100]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4916      	ldr	r1, [pc, #88]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eb2:	4b12      	ldr	r3, [pc, #72]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	490e      	ldr	r1, [pc, #56]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ec6:	f000 f821 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	490a      	ldr	r1, [pc, #40]	@ (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	5ccb      	ldrb	r3, [r1, r3]
 8002eda:	fa22 f303 	lsr.w	r3, r2, r3
 8002ede:	4a09      	ldr	r2, [pc, #36]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ee2:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fd62 	bl	80019b0 <HAL_InitTick>

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40023c00 	.word	0x40023c00
 8002efc:	40023800 	.word	0x40023800
 8002f00:	08006218 	.word	0x08006218
 8002f04:	20000000 	.word	0x20000000
 8002f08:	20000004 	.word	0x20000004

08002f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f10:	b094      	sub	sp, #80	@ 0x50
 8002f12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f18:	2300      	movs	r3, #0
 8002f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f24:	4b79      	ldr	r3, [pc, #484]	@ (800310c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d00d      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x40>
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	f200 80e1 	bhi.w	80030f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x34>
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d003      	beq.n	8002f46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f3e:	e0db      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f40:	4b73      	ldr	r3, [pc, #460]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f42:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002f44:	e0db      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f46:	4b73      	ldr	r3, [pc, #460]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f4a:	e0d8      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f4c:	4b6f      	ldr	r3, [pc, #444]	@ (800310c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f54:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f56:	4b6d      	ldr	r3, [pc, #436]	@ (800310c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d063      	beq.n	800302a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f62:	4b6a      	ldr	r3, [pc, #424]	@ (800310c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	099b      	lsrs	r3, r3, #6
 8002f68:	2200      	movs	r2, #0
 8002f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f74:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f76:	2300      	movs	r3, #0
 8002f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f7e:	4622      	mov	r2, r4
 8002f80:	462b      	mov	r3, r5
 8002f82:	f04f 0000 	mov.w	r0, #0
 8002f86:	f04f 0100 	mov.w	r1, #0
 8002f8a:	0159      	lsls	r1, r3, #5
 8002f8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f90:	0150      	lsls	r0, r2, #5
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4621      	mov	r1, r4
 8002f98:	1a51      	subs	r1, r2, r1
 8002f9a:	6139      	str	r1, [r7, #16]
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fb0:	4659      	mov	r1, fp
 8002fb2:	018b      	lsls	r3, r1, #6
 8002fb4:	4651      	mov	r1, sl
 8002fb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fba:	4651      	mov	r1, sl
 8002fbc:	018a      	lsls	r2, r1, #6
 8002fbe:	4651      	mov	r1, sl
 8002fc0:	ebb2 0801 	subs.w	r8, r2, r1
 8002fc4:	4659      	mov	r1, fp
 8002fc6:	eb63 0901 	sbc.w	r9, r3, r1
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fde:	4690      	mov	r8, r2
 8002fe0:	4699      	mov	r9, r3
 8002fe2:	4623      	mov	r3, r4
 8002fe4:	eb18 0303 	adds.w	r3, r8, r3
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	462b      	mov	r3, r5
 8002fec:	eb49 0303 	adc.w	r3, r9, r3
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ffe:	4629      	mov	r1, r5
 8003000:	024b      	lsls	r3, r1, #9
 8003002:	4621      	mov	r1, r4
 8003004:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003008:	4621      	mov	r1, r4
 800300a:	024a      	lsls	r2, r1, #9
 800300c:	4610      	mov	r0, r2
 800300e:	4619      	mov	r1, r3
 8003010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003012:	2200      	movs	r2, #0
 8003014:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003016:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003018:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800301c:	f7fd f8e0 	bl	80001e0 <__aeabi_uldivmod>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4613      	mov	r3, r2
 8003026:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003028:	e058      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302a:	4b38      	ldr	r3, [pc, #224]	@ (800310c <HAL_RCC_GetSysClockFreq+0x200>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	099b      	lsrs	r3, r3, #6
 8003030:	2200      	movs	r2, #0
 8003032:	4618      	mov	r0, r3
 8003034:	4611      	mov	r1, r2
 8003036:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800303a:	623b      	str	r3, [r7, #32]
 800303c:	2300      	movs	r3, #0
 800303e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003040:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003044:	4642      	mov	r2, r8
 8003046:	464b      	mov	r3, r9
 8003048:	f04f 0000 	mov.w	r0, #0
 800304c:	f04f 0100 	mov.w	r1, #0
 8003050:	0159      	lsls	r1, r3, #5
 8003052:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003056:	0150      	lsls	r0, r2, #5
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4641      	mov	r1, r8
 800305e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003062:	4649      	mov	r1, r9
 8003064:	eb63 0b01 	sbc.w	fp, r3, r1
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003074:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003078:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800307c:	ebb2 040a 	subs.w	r4, r2, sl
 8003080:	eb63 050b 	sbc.w	r5, r3, fp
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	00eb      	lsls	r3, r5, #3
 800308e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003092:	00e2      	lsls	r2, r4, #3
 8003094:	4614      	mov	r4, r2
 8003096:	461d      	mov	r5, r3
 8003098:	4643      	mov	r3, r8
 800309a:	18e3      	adds	r3, r4, r3
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	464b      	mov	r3, r9
 80030a0:	eb45 0303 	adc.w	r3, r5, r3
 80030a4:	607b      	str	r3, [r7, #4]
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030b2:	4629      	mov	r1, r5
 80030b4:	028b      	lsls	r3, r1, #10
 80030b6:	4621      	mov	r1, r4
 80030b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030bc:	4621      	mov	r1, r4
 80030be:	028a      	lsls	r2, r1, #10
 80030c0:	4610      	mov	r0, r2
 80030c2:	4619      	mov	r1, r3
 80030c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030c6:	2200      	movs	r2, #0
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	61fa      	str	r2, [r7, #28]
 80030cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030d0:	f7fd f886 	bl	80001e0 <__aeabi_uldivmod>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4613      	mov	r3, r2
 80030da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030dc:	4b0b      	ldr	r3, [pc, #44]	@ (800310c <HAL_RCC_GetSysClockFreq+0x200>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	0c1b      	lsrs	r3, r3, #16
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	3301      	adds	r3, #1
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80030ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030f6:	e002      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030f8:	4b05      	ldr	r3, [pc, #20]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x204>)
 80030fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003100:	4618      	mov	r0, r3
 8003102:	3750      	adds	r7, #80	@ 0x50
 8003104:	46bd      	mov	sp, r7
 8003106:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800
 8003110:	00f42400 	.word	0x00f42400
 8003114:	007a1200 	.word	0x007a1200

08003118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800311c:	4b03      	ldr	r3, [pc, #12]	@ (800312c <HAL_RCC_GetHCLKFreq+0x14>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000000 	.word	0x20000000

08003130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003134:	f7ff fff0 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 8003138:	4602      	mov	r2, r0
 800313a:	4b05      	ldr	r3, [pc, #20]	@ (8003150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	0b5b      	lsrs	r3, r3, #13
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	4903      	ldr	r1, [pc, #12]	@ (8003154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003146:	5ccb      	ldrb	r3, [r1, r3]
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800314c:	4618      	mov	r0, r3
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40023800 	.word	0x40023800
 8003154:	08006228 	.word	0x08006228

08003158 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	220f      	movs	r2, #15
 8003166:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003168:	4b12      	ldr	r3, [pc, #72]	@ (80031b4 <HAL_RCC_GetClockConfig+0x5c>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0203 	and.w	r2, r3, #3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003174:	4b0f      	ldr	r3, [pc, #60]	@ (80031b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003180:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800318c:	4b09      	ldr	r3, [pc, #36]	@ (80031b4 <HAL_RCC_GetClockConfig+0x5c>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	08db      	lsrs	r3, r3, #3
 8003192:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800319a:	4b07      	ldr	r3, [pc, #28]	@ (80031b8 <HAL_RCC_GetClockConfig+0x60>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0207 	and.w	r2, r3, #7
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	601a      	str	r2, [r3, #0]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40023c00 	.word	0x40023c00

080031bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e07b      	b.n	80032c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d108      	bne.n	80031e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031de:	d009      	beq.n	80031f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	61da      	str	r2, [r3, #28]
 80031e6:	e005      	b.n	80031f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fe fa66 	bl	80016e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800322a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003278:	ea42 0103 	orr.w	r1, r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003280:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	0c1b      	lsrs	r3, r3, #16
 8003292:	f003 0104 	and.w	r1, r3, #4
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329a:	f003 0210 	and.w	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b088      	sub	sp, #32
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	603b      	str	r3, [r7, #0]
 80032da:	4613      	mov	r3, r2
 80032dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_SPI_Transmit+0x22>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e12d      	b.n	800354c <HAL_SPI_Transmit+0x27e>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032f8:	f7fe fc8c 	bl	8001c14 <HAL_GetTick>
 80032fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b01      	cmp	r3, #1
 800330c:	d002      	beq.n	8003314 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800330e:	2302      	movs	r3, #2
 8003310:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003312:	e116      	b.n	8003542 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_SPI_Transmit+0x52>
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003324:	e10d      	b.n	8003542 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2203      	movs	r2, #3
 800332a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	88fa      	ldrh	r2, [r7, #6]
 800333e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	88fa      	ldrh	r2, [r7, #6]
 8003344:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800336c:	d10f      	bne.n	800338e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800337c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800338c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003398:	2b40      	cmp	r3, #64	@ 0x40
 800339a:	d007      	beq.n	80033ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033b4:	d14f      	bne.n	8003456 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <HAL_SPI_Transmit+0xf6>
 80033be:	8afb      	ldrh	r3, [r7, #22]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d142      	bne.n	800344a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c8:	881a      	ldrh	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d4:	1c9a      	adds	r2, r3, #2
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033e8:	e02f      	b.n	800344a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d112      	bne.n	800341e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fc:	881a      	ldrh	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003408:	1c9a      	adds	r2, r3, #2
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800341c:	e015      	b.n	800344a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800341e:	f7fe fbf9 	bl	8001c14 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d803      	bhi.n	8003436 <HAL_SPI_Transmit+0x168>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d102      	bne.n	800343c <HAL_SPI_Transmit+0x16e>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d106      	bne.n	800344a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003448:	e07b      	b.n	8003542 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1ca      	bne.n	80033ea <HAL_SPI_Transmit+0x11c>
 8003454:	e050      	b.n	80034f8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <HAL_SPI_Transmit+0x196>
 800345e:	8afb      	ldrh	r3, [r7, #22]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d144      	bne.n	80034ee <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	330c      	adds	r3, #12
 800346e:	7812      	ldrb	r2, [r2, #0]
 8003470:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800348a:	e030      	b.n	80034ee <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b02      	cmp	r3, #2
 8003498:	d113      	bne.n	80034c2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	330c      	adds	r3, #12
 80034a4:	7812      	ldrb	r2, [r2, #0]
 80034a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80034c0:	e015      	b.n	80034ee <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034c2:	f7fe fba7 	bl	8001c14 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d803      	bhi.n	80034da <HAL_SPI_Transmit+0x20c>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d102      	bne.n	80034e0 <HAL_SPI_Transmit+0x212>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d106      	bne.n	80034ee <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80034ec:	e029      	b.n	8003542 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1c9      	bne.n	800348c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	6839      	ldr	r1, [r7, #0]
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f001 f8d7 	bl	80046b0 <SPI_EndRxTxTransaction>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10a      	bne.n	800352c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	77fb      	strb	r3, [r7, #31]
 8003538:	e003      	b.n	8003542 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800354a:	7ffb      	ldrb	r3, [r7, #31]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3720      	adds	r7, #32
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d002      	beq.n	800357a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003574:	2302      	movs	r3, #2
 8003576:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003578:	e0fb      	b.n	8003772 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003582:	d112      	bne.n	80035aa <HAL_SPI_Receive+0x56>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10e      	bne.n	80035aa <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2204      	movs	r2, #4
 8003590:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003594:	88fa      	ldrh	r2, [r7, #6]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f8ef 	bl	8003784 <HAL_SPI_TransmitReceive>
 80035a6:	4603      	mov	r3, r0
 80035a8:	e0e8      	b.n	800377c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_SPI_Receive+0x64>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e0e1      	b.n	800377c <HAL_SPI_Receive+0x228>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035c0:	f7fe fb28 	bl	8001c14 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_SPI_Receive+0x7e>
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d102      	bne.n	80035d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035d6:	e0cc      	b.n	8003772 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2204      	movs	r2, #4
 80035dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	88fa      	ldrh	r2, [r7, #6]
 80035f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	88fa      	ldrh	r2, [r7, #6]
 80035f6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800361e:	d10f      	bne.n	8003640 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800362e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800363e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800364a:	2b40      	cmp	r3, #64	@ 0x40
 800364c:	d007      	beq.n	800365e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800365c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d16a      	bne.n	800373c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003666:	e032      	b.n	80036ce <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b01      	cmp	r3, #1
 8003674:	d115      	bne.n	80036a2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f103 020c 	add.w	r2, r3, #12
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003682:	7812      	ldrb	r2, [r2, #0]
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036a0:	e015      	b.n	80036ce <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036a2:	f7fe fab7 	bl	8001c14 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d803      	bhi.n	80036ba <HAL_SPI_Receive+0x166>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d102      	bne.n	80036c0 <HAL_SPI_Receive+0x16c>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d106      	bne.n	80036ce <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80036cc:	e051      	b.n	8003772 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1c7      	bne.n	8003668 <HAL_SPI_Receive+0x114>
 80036d8:	e035      	b.n	8003746 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d113      	bne.n	8003710 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f2:	b292      	uxth	r2, r2
 80036f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fa:	1c9a      	adds	r2, r3, #2
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800370e:	e015      	b.n	800373c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003710:	f7fe fa80 	bl	8001c14 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d803      	bhi.n	8003728 <HAL_SPI_Receive+0x1d4>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003726:	d102      	bne.n	800372e <HAL_SPI_Receive+0x1da>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800373a:	e01a      	b.n	8003772 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1c9      	bne.n	80036da <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	6839      	ldr	r1, [r7, #0]
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 ff4a 	bl	80045e4 <SPI_EndRxTransaction>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	75fb      	strb	r3, [r7, #23]
 8003768:	e003      	b.n	8003772 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800377a:	7dfb      	ldrb	r3, [r7, #23]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08c      	sub	sp, #48	@ 0x30
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003792:	2301      	movs	r3, #1
 8003794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_SPI_TransmitReceive+0x26>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e198      	b.n	8003adc <HAL_SPI_TransmitReceive+0x358>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037b2:	f7fe fa2f 	bl	8001c14 <HAL_GetTick>
 80037b6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80037c8:	887b      	ldrh	r3, [r7, #2]
 80037ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d00f      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x70>
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037da:	d107      	bne.n	80037ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d103      	bne.n	80037ec <HAL_SPI_TransmitReceive+0x68>
 80037e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d003      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
 80037ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80037f2:	e16d      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <HAL_SPI_TransmitReceive+0x82>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_SPI_TransmitReceive+0x82>
 8003800:	887b      	ldrh	r3, [r7, #2]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d103      	bne.n	800380e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800380c:	e160      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b04      	cmp	r3, #4
 8003818:	d003      	beq.n	8003822 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2205      	movs	r2, #5
 800381e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	887a      	ldrh	r2, [r7, #2]
 8003832:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	887a      	ldrh	r2, [r7, #2]
 8003838:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	887a      	ldrh	r2, [r7, #2]
 8003844:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	887a      	ldrh	r2, [r7, #2]
 800384a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003862:	2b40      	cmp	r3, #64	@ 0x40
 8003864:	d007      	beq.n	8003876 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003874:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800387e:	d17c      	bne.n	800397a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <HAL_SPI_TransmitReceive+0x10a>
 8003888:	8b7b      	ldrh	r3, [r7, #26]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d16a      	bne.n	8003964 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003892:	881a      	ldrh	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	1c9a      	adds	r2, r3, #2
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038b2:	e057      	b.n	8003964 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d11b      	bne.n	80038fa <HAL_SPI_TransmitReceive+0x176>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d016      	beq.n	80038fa <HAL_SPI_TransmitReceive+0x176>
 80038cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d113      	bne.n	80038fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	881a      	ldrh	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e2:	1c9a      	adds	r2, r3, #2
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b01      	cmp	r3, #1
 8003906:	d119      	bne.n	800393c <HAL_SPI_TransmitReceive+0x1b8>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d014      	beq.n	800393c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391c:	b292      	uxth	r2, r2
 800391e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003924:	1c9a      	adds	r2, r3, #2
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800392e:	b29b      	uxth	r3, r3
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003938:	2301      	movs	r3, #1
 800393a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800393c:	f7fe f96a 	bl	8001c14 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003948:	429a      	cmp	r2, r3
 800394a:	d80b      	bhi.n	8003964 <HAL_SPI_TransmitReceive+0x1e0>
 800394c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003952:	d007      	beq.n	8003964 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003962:	e0b5      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1a2      	bne.n	80038b4 <HAL_SPI_TransmitReceive+0x130>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d19d      	bne.n	80038b4 <HAL_SPI_TransmitReceive+0x130>
 8003978:	e080      	b.n	8003a7c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_SPI_TransmitReceive+0x204>
 8003982:	8b7b      	ldrh	r3, [r7, #26]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d16f      	bne.n	8003a68 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	330c      	adds	r3, #12
 8003992:	7812      	ldrb	r2, [r2, #0]
 8003994:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039ae:	e05b      	b.n	8003a68 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d11c      	bne.n	80039f8 <HAL_SPI_TransmitReceive+0x274>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d017      	beq.n	80039f8 <HAL_SPI_TransmitReceive+0x274>
 80039c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d114      	bne.n	80039f8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	7812      	ldrb	r2, [r2, #0]
 80039da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d119      	bne.n	8003a3a <HAL_SPI_TransmitReceive+0x2b6>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d014      	beq.n	8003a3a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a36:	2301      	movs	r3, #1
 8003a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a3a:	f7fe f8eb 	bl	8001c14 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d803      	bhi.n	8003a52 <HAL_SPI_TransmitReceive+0x2ce>
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a50:	d102      	bne.n	8003a58 <HAL_SPI_TransmitReceive+0x2d4>
 8003a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d107      	bne.n	8003a68 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003a66:	e033      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d19e      	bne.n	80039b0 <HAL_SPI_TransmitReceive+0x22c>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d199      	bne.n	80039b0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 fe15 	bl	80046b0 <SPI_EndRxTxTransaction>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d006      	beq.n	8003a9a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003a98:	e01a      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10a      	bne.n	8003ab8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ac6:	e003      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003ad8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3730      	adds	r7, #48	@ 0x30
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	4613      	mov	r3, r2
 8003af0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_SPI_Transmit_DMA+0x20>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e097      	b.n	8003c34 <HAL_SPI_Transmit_DMA+0x150>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d002      	beq.n	8003b1e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b1c:	e085      	b.n	8003c2a <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_SPI_Transmit_DMA+0x46>
 8003b24:	88fb      	ldrh	r3, [r7, #6]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b2e:	e07c      	b.n	8003c2a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2203      	movs	r2, #3
 8003b34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	88fa      	ldrh	r2, [r7, #6]
 8003b48:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	88fa      	ldrh	r2, [r7, #6]
 8003b4e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b76:	d10f      	bne.n	8003b98 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b9c:	4a27      	ldr	r2, [pc, #156]	@ (8003c3c <HAL_SPI_Transmit_DMA+0x158>)
 8003b9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba4:	4a26      	ldr	r2, [pc, #152]	@ (8003c40 <HAL_SPI_Transmit_DMA+0x15c>)
 8003ba6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bac:	4a25      	ldr	r2, [pc, #148]	@ (8003c44 <HAL_SPI_Transmit_DMA+0x160>)
 8003bae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	330c      	adds	r3, #12
 8003bc8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003bd0:	f7fe f9bc 	bl	8001f4c <HAL_DMA_Start_IT>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bde:	f043 0210 	orr.w	r2, r3, #16
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003bea:	e01e      	b.n	8003c2a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf6:	2b40      	cmp	r3, #64	@ 0x40
 8003bf8:	d007      	beq.n	8003c0a <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c08:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0220 	orr.w	r2, r2, #32
 8003c18:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0202 	orr.w	r2, r2, #2
 8003c28:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	08004419 	.word	0x08004419
 8003c40:	08004239 	.word	0x08004239
 8003c44:	0800446d 	.word	0x0800446d

08003c48 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	4613      	mov	r3, r2
 8003c54:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d002      	beq.n	8003c6c <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8003c66:	2302      	movs	r3, #2
 8003c68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c6a:	e0a2      	b.n	8003db2 <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d110      	bne.n	8003c96 <HAL_SPI_Receive_DMA+0x4e>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c7c:	d10b      	bne.n	8003c96 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2204      	movs	r2, #4
 8003c82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f89f 	bl	8003dd0 <HAL_SPI_TransmitReceive_DMA>
 8003c92:	4603      	mov	r3, r0
 8003c94:	e092      	b.n	8003dbc <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_SPI_Receive_DMA+0x5c>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e08b      	b.n	8003dbc <HAL_SPI_Receive_DMA+0x174>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if ((pData == NULL) || (Size == 0U))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_SPI_Receive_DMA+0x70>
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003cbc:	e079      	b.n	8003db2 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	88fa      	ldrh	r2, [r7, #6]
 8003cdc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cfe:	d10f      	bne.n	8003d20 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d24:	4a27      	ldr	r2, [pc, #156]	@ (8003dc4 <HAL_SPI_Receive_DMA+0x17c>)
 8003d26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2c:	4a26      	ldr	r2, [pc, #152]	@ (8003dc8 <HAL_SPI_Receive_DMA+0x180>)
 8003d2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d34:	4a25      	ldr	r2, [pc, #148]	@ (8003dcc <HAL_SPI_Receive_DMA+0x184>)
 8003d36:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d50:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d56:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003d58:	f7fe f8f8 	bl	8001f4c <HAL_DMA_Start_IT>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d66:	f043 0210 	orr.w	r2, r3, #16
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003d72:	e01e      	b.n	8003db2 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7e:	2b40      	cmp	r3, #64	@ 0x40
 8003d80:	d007      	beq.n	8003d92 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d90:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0220 	orr.w	r2, r2, #32
 8003da0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0201 	orr.w	r2, r2, #1
 8003db0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	08004435 	.word	0x08004435
 8003dc8:	080042e1 	.word	0x080042e1
 8003dcc:	0800446d 	.word	0x0800446d

08003dd0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e0db      	b.n	8003fa8 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dfe:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003e06:	7dbb      	ldrb	r3, [r7, #22]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d00d      	beq.n	8003e28 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e12:	d106      	bne.n	8003e22 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d102      	bne.n	8003e22 <HAL_SPI_TransmitReceive_DMA+0x52>
 8003e1c:	7dbb      	ldrb	r3, [r7, #22]
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d002      	beq.n	8003e28 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
 8003e24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e26:	e0ba      	b.n	8003f9e <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003e34:	887b      	ldrh	r3, [r7, #2]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d102      	bne.n	8003e40 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e3e:	e0ae      	b.n	8003f9e <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d003      	beq.n	8003e54 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2205      	movs	r2, #5
 8003e50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	887a      	ldrh	r2, [r7, #2]
 8003e64:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	887a      	ldrh	r2, [r7, #2]
 8003e6a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	887a      	ldrh	r2, [r7, #2]
 8003e76:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	887a      	ldrh	r2, [r7, #2]
 8003e7c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d108      	bne.n	8003ea8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e9a:	4a45      	ldr	r2, [pc, #276]	@ (8003fb0 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8003e9c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea2:	4a44      	ldr	r2, [pc, #272]	@ (8003fb4 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8003ea4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ea6:	e007      	b.n	8003eb8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eac:	4a42      	ldr	r2, [pc, #264]	@ (8003fb8 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8003eae:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eb4:	4a41      	ldr	r2, [pc, #260]	@ (8003fbc <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8003eb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ebc:	4a40      	ldr	r2, [pc, #256]	@ (8003fc0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003ebe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	330c      	adds	r3, #12
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ede:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003ee0:	f7fe f834 	bl	8001f4c <HAL_DMA_Start_IT>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d008      	beq.n	8003efc <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eee:	f043 0210 	orr.w	r2, r3, #16
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003efa:	e050      	b.n	8003f9e <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f10:	2200      	movs	r2, #0
 8003f12:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f18:	2200      	movs	r2, #0
 8003f1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f20:	2200      	movs	r2, #0
 8003f22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f28:	2200      	movs	r2, #0
 8003f2a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	4619      	mov	r1, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	330c      	adds	r3, #12
 8003f3c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f42:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003f44:	f7fe f802 	bl	8001f4c <HAL_DMA_Start_IT>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f52:	f043 0210 	orr.w	r2, r3, #16
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003f5e:	e01e      	b.n	8003f9e <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f6a:	2b40      	cmp	r3, #64	@ 0x40
 8003f6c:	d007      	beq.n	8003f7e <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f7c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0220 	orr.w	r2, r2, #32
 8003f8c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0202 	orr.w	r2, r2, #2
 8003f9c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	08004435 	.word	0x08004435
 8003fb4:	080042e1 	.word	0x080042e1
 8003fb8:	08004451 	.word	0x08004451
 8003fbc:	08004389 	.word	0x08004389
 8003fc0:	0800446d 	.word	0x0800446d

08003fc4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10e      	bne.n	8004004 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d004      	beq.n	8004004 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	4798      	blx	r3
    return;
 8004002:	e0ce      	b.n	80041a2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <HAL_SPI_IRQHandler+0x5e>
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004014:	2b00      	cmp	r3, #0
 8004016:	d004      	beq.n	8004022 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	4798      	blx	r3
    return;
 8004020:	e0bf      	b.n	80041a2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <HAL_SPI_IRQHandler+0x7e>
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d105      	bne.n	8004042 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80b0 	beq.w	80041a2 <HAL_SPI_IRQHandler+0x1de>
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 80aa 	beq.w	80041a2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d023      	beq.n	80040a0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b03      	cmp	r3, #3
 8004062:	d011      	beq.n	8004088 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004068:	f043 0204 	orr.w	r2, r3, #4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	e00b      	b.n	80040a0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004088:	2300      	movs	r3, #0
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	693b      	ldr	r3, [r7, #16]
        return;
 800409e:	e080      	b.n	80041a2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d014      	beq.n	80040d4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ae:	f043 0201 	orr.w	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00c      	beq.n	80040f8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e2:	f043 0208 	orr.w	r2, r3, #8
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80040ea:	2300      	movs	r3, #0
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d04f      	beq.n	80041a0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800410e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d104      	bne.n	800412c <HAL_SPI_IRQHandler+0x168>
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d034      	beq.n	8004196 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0203 	bic.w	r2, r2, #3
 800413a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004140:	2b00      	cmp	r3, #0
 8004142:	d011      	beq.n	8004168 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004148:	4a17      	ldr	r2, [pc, #92]	@ (80041a8 <HAL_SPI_IRQHandler+0x1e4>)
 800414a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004150:	4618      	mov	r0, r3
 8004152:	f7fd ff53 	bl	8001ffc <HAL_DMA_Abort_IT>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004160:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800416c:	2b00      	cmp	r3, #0
 800416e:	d016      	beq.n	800419e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004174:	4a0c      	ldr	r2, [pc, #48]	@ (80041a8 <HAL_SPI_IRQHandler+0x1e4>)
 8004176:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800417c:	4618      	mov	r0, r3
 800417e:	f7fd ff3d 	bl	8001ffc <HAL_DMA_Abort_IT>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004194:	e003      	b.n	800419e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f844 	bl	8004224 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800419c:	e000      	b.n	80041a0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800419e:	bf00      	nop
    return;
 80041a0:	bf00      	nop
  }
}
 80041a2:	3720      	adds	r7, #32
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	080044ad 	.word	0x080044ad

080041ac <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004244:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004246:	f7fd fce5 	bl	8001c14 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800425a:	d03b      	beq.n	80042d4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0220 	bic.w	r2, r2, #32
 800426a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0202 	bic.w	r2, r2, #2
 800427a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	2164      	movs	r1, #100	@ 0x64
 8004280:	6978      	ldr	r0, [r7, #20]
 8004282:	f000 fa15 	bl	80046b0 <SPI_EndRxTxTransaction>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004290:	f043 0220 	orr.w	r2, r3, #32
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2200      	movs	r2, #0
 80042ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80042cc:	6978      	ldr	r0, [r7, #20]
 80042ce:	f7ff ffa9 	bl	8004224 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80042d2:	e002      	b.n	80042da <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80042d4:	6978      	ldr	r0, [r7, #20]
 80042d6:	f7ff ff69 	bl	80041ac <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ec:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042ee:	f7fd fc91 	bl	8001c14 <HAL_GetTick>
 80042f2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004302:	d03b      	beq.n	800437c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0220 	bic.w	r2, r2, #32
 8004312:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10d      	bne.n	8004338 <SPI_DMAReceiveCplt+0x58>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004324:	d108      	bne.n	8004338 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0203 	bic.w	r2, r2, #3
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	e007      	b.n	8004348 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	2164      	movs	r1, #100	@ 0x64
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f949 	bl	80045e4 <SPI_EndRxTransaction>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7ff ff55 	bl	8004224 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800437a:	e002      	b.n	8004382 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f7ff ff1f 	bl	80041c0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004394:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004396:	f7fd fc3d 	bl	8001c14 <HAL_GetTick>
 800439a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043aa:	d02f      	beq.n	800440c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0220 	bic.w	r2, r2, #32
 80043ba:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	2164      	movs	r1, #100	@ 0x64
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f975 	bl	80046b0 <SPI_EndRxTxTransaction>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d0:	f043 0220 	orr.w	r2, r3, #32
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0203 	bic.w	r2, r2, #3
 80043e6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7ff ff0d 	bl	8004224 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800440a:	e002      	b.n	8004412 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f7ff fee1 	bl	80041d4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004424:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f7ff fede 	bl	80041e8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800442c:	bf00      	nop
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004440:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f7ff feda 	bl	80041fc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f7ff fed6 	bl	8004210 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004478:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0203 	bic.w	r2, r2, #3
 8004488:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800448e:	f043 0210 	orr.w	r2, r3, #16
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f7ff fec0 	bl	8004224 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f7ff feac 	bl	8004224 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	4613      	mov	r3, r2
 80044e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044e4:	f7fd fb96 	bl	8001c14 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	4413      	add	r3, r2
 80044f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044f4:	f7fd fb8e 	bl	8001c14 <HAL_GetTick>
 80044f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044fa:	4b39      	ldr	r3, [pc, #228]	@ (80045e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	015b      	lsls	r3, r3, #5
 8004500:	0d1b      	lsrs	r3, r3, #20
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	fb02 f303 	mul.w	r3, r2, r3
 8004508:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800450a:	e054      	b.n	80045b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004512:	d050      	beq.n	80045b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004514:	f7fd fb7e 	bl	8001c14 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	429a      	cmp	r2, r3
 8004522:	d902      	bls.n	800452a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d13d      	bne.n	80045a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004538:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004542:	d111      	bne.n	8004568 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800454c:	d004      	beq.n	8004558 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004556:	d107      	bne.n	8004568 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004566:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004570:	d10f      	bne.n	8004592 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004590:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e017      	b.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4013      	ands	r3, r2
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	bf0c      	ite	eq
 80045c6:	2301      	moveq	r3, #1
 80045c8:	2300      	movne	r3, #0
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	461a      	mov	r2, r3
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d19b      	bne.n	800450c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3720      	adds	r7, #32
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000000 	.word	0x20000000

080045e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045f8:	d111      	bne.n	800461e <SPI_EndRxTransaction+0x3a>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004602:	d004      	beq.n	800460e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800460c:	d107      	bne.n	800461e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800461c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004626:	d12a      	bne.n	800467e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004630:	d012      	beq.n	8004658 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2200      	movs	r2, #0
 800463a:	2180      	movs	r1, #128	@ 0x80
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7ff ff49 	bl	80044d4 <SPI_WaitFlagStateUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d02d      	beq.n	80046a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464c:	f043 0220 	orr.w	r2, r3, #32
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e026      	b.n	80046a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2200      	movs	r2, #0
 8004660:	2101      	movs	r1, #1
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f7ff ff36 	bl	80044d4 <SPI_WaitFlagStateUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d01a      	beq.n	80046a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004672:	f043 0220 	orr.w	r2, r3, #32
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e013      	b.n	80046a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2200      	movs	r2, #0
 8004686:	2101      	movs	r1, #1
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f7ff ff23 	bl	80044d4 <SPI_WaitFlagStateUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004698:	f043 0220 	orr.w	r2, r3, #32
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e000      	b.n	80046a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2201      	movs	r2, #1
 80046c4:	2102      	movs	r1, #2
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f7ff ff04 	bl	80044d4 <SPI_WaitFlagStateUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d6:	f043 0220 	orr.w	r2, r3, #32
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e032      	b.n	8004748 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004750 <SPI_EndRxTxTransaction+0xa0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004754 <SPI_EndRxTxTransaction+0xa4>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	0d5b      	lsrs	r3, r3, #21
 80046ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046f2:	fb02 f303 	mul.w	r3, r2, r3
 80046f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004700:	d112      	bne.n	8004728 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2200      	movs	r2, #0
 800470a:	2180      	movs	r1, #128	@ 0x80
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f7ff fee1 	bl	80044d4 <SPI_WaitFlagStateUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d016      	beq.n	8004746 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800471c:	f043 0220 	orr.w	r2, r3, #32
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e00f      	b.n	8004748 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	3b01      	subs	r3, #1
 8004732:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473e:	2b80      	cmp	r3, #128	@ 0x80
 8004740:	d0f2      	beq.n	8004728 <SPI_EndRxTxTransaction+0x78>
 8004742:	e000      	b.n	8004746 <SPI_EndRxTxTransaction+0x96>
        break;
 8004744:	bf00      	nop
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	20000000 	.word	0x20000000
 8004754:	165e9f81 	.word	0x165e9f81

08004758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e041      	b.n	80047ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f839 	bl	80047f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3304      	adds	r3, #4
 8004794:	4619      	mov	r1, r3
 8004796:	4610      	mov	r0, r2
 8004798:	f000 f9b2 	bl	8004b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d001      	beq.n	8004824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e044      	b.n	80048ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1e      	ldr	r2, [pc, #120]	@ (80048bc <HAL_TIM_Base_Start_IT+0xb0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d018      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x6c>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800484e:	d013      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x6c>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1a      	ldr	r2, [pc, #104]	@ (80048c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00e      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x6c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a19      	ldr	r2, [pc, #100]	@ (80048c4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d009      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x6c>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a17      	ldr	r2, [pc, #92]	@ (80048c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d004      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x6c>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a16      	ldr	r2, [pc, #88]	@ (80048cc <HAL_TIM_Base_Start_IT+0xc0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d111      	bne.n	800489c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b06      	cmp	r3, #6
 8004888:	d010      	beq.n	80048ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0201 	orr.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489a:	e007      	b.n	80048ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40010000 	.word	0x40010000
 80048c0:	40000400 	.word	0x40000400
 80048c4:	40000800 	.word	0x40000800
 80048c8:	40000c00 	.word	0x40000c00
 80048cc:	40014000 	.word	0x40014000

080048d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d020      	beq.n	8004934 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01b      	beq.n	8004934 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f06f 0202 	mvn.w	r2, #2
 8004904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f8d2 	bl	8004ac4 <HAL_TIM_IC_CaptureCallback>
 8004920:	e005      	b.n	800492e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f8c4 	bl	8004ab0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f8d5 	bl	8004ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b00      	cmp	r3, #0
 800493c:	d020      	beq.n	8004980 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01b      	beq.n	8004980 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f06f 0204 	mvn.w	r2, #4
 8004950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2202      	movs	r2, #2
 8004956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f8ac 	bl	8004ac4 <HAL_TIM_IC_CaptureCallback>
 800496c:	e005      	b.n	800497a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f89e 	bl	8004ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f8af 	bl	8004ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d020      	beq.n	80049cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b00      	cmp	r3, #0
 8004992:	d01b      	beq.n	80049cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0208 	mvn.w	r2, #8
 800499c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2204      	movs	r2, #4
 80049a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f886 	bl	8004ac4 <HAL_TIM_IC_CaptureCallback>
 80049b8:	e005      	b.n	80049c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f878 	bl	8004ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f889 	bl	8004ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d020      	beq.n	8004a18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01b      	beq.n	8004a18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0210 	mvn.w	r2, #16
 80049e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2208      	movs	r2, #8
 80049ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f860 	bl	8004ac4 <HAL_TIM_IC_CaptureCallback>
 8004a04:	e005      	b.n	8004a12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f852 	bl	8004ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f863 	bl	8004ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00c      	beq.n	8004a3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0201 	mvn.w	r2, #1
 8004a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fc fdce 	bl	80015d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00c      	beq.n	8004a60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d007      	beq.n	8004a60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f8e6 	bl	8004c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00c      	beq.n	8004a84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f834 	bl	8004aec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00c      	beq.n	8004aa8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d007      	beq.n	8004aa8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0220 	mvn.w	r2, #32
 8004aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f8b8 	bl	8004c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aa8:	bf00      	nop
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a3a      	ldr	r2, [pc, #232]	@ (8004bfc <TIM_Base_SetConfig+0xfc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00f      	beq.n	8004b38 <TIM_Base_SetConfig+0x38>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b1e:	d00b      	beq.n	8004b38 <TIM_Base_SetConfig+0x38>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a37      	ldr	r2, [pc, #220]	@ (8004c00 <TIM_Base_SetConfig+0x100>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d007      	beq.n	8004b38 <TIM_Base_SetConfig+0x38>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a36      	ldr	r2, [pc, #216]	@ (8004c04 <TIM_Base_SetConfig+0x104>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_Base_SetConfig+0x38>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a35      	ldr	r2, [pc, #212]	@ (8004c08 <TIM_Base_SetConfig+0x108>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d108      	bne.n	8004b4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a2b      	ldr	r2, [pc, #172]	@ (8004bfc <TIM_Base_SetConfig+0xfc>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d01b      	beq.n	8004b8a <TIM_Base_SetConfig+0x8a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b58:	d017      	beq.n	8004b8a <TIM_Base_SetConfig+0x8a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a28      	ldr	r2, [pc, #160]	@ (8004c00 <TIM_Base_SetConfig+0x100>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d013      	beq.n	8004b8a <TIM_Base_SetConfig+0x8a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a27      	ldr	r2, [pc, #156]	@ (8004c04 <TIM_Base_SetConfig+0x104>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00f      	beq.n	8004b8a <TIM_Base_SetConfig+0x8a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a26      	ldr	r2, [pc, #152]	@ (8004c08 <TIM_Base_SetConfig+0x108>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00b      	beq.n	8004b8a <TIM_Base_SetConfig+0x8a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a25      	ldr	r2, [pc, #148]	@ (8004c0c <TIM_Base_SetConfig+0x10c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d007      	beq.n	8004b8a <TIM_Base_SetConfig+0x8a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a24      	ldr	r2, [pc, #144]	@ (8004c10 <TIM_Base_SetConfig+0x110>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d003      	beq.n	8004b8a <TIM_Base_SetConfig+0x8a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a23      	ldr	r2, [pc, #140]	@ (8004c14 <TIM_Base_SetConfig+0x114>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d108      	bne.n	8004b9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8004bfc <TIM_Base_SetConfig+0xfc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d103      	bne.n	8004bd0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d105      	bne.n	8004bee <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f023 0201 	bic.w	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	611a      	str	r2, [r3, #16]
  }
}
 8004bee:	bf00      	nop
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40010000 	.word	0x40010000
 8004c00:	40000400 	.word	0x40000400
 8004c04:	40000800 	.word	0x40000800
 8004c08:	40000c00 	.word	0x40000c00
 8004c0c:	40014000 	.word	0x40014000
 8004c10:	40014400 	.word	0x40014400
 8004c14:	40014800 	.word	0x40014800

08004c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c52:	2b84      	cmp	r3, #132	@ 0x84
 8004c54:	d005      	beq.n	8004c62 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004c56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	3303      	adds	r3, #3
 8004c60:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004c62:	68fb      	ldr	r3, [r7, #12]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004c74:	f000 fae4 	bl	8005240 <vTaskStartScheduler>
  
  return osOK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c80:	b089      	sub	sp, #36	@ 0x24
 8004c82:	af04      	add	r7, sp, #16
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d020      	beq.n	8004cd2 <osThreadCreate+0x54>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01c      	beq.n	8004cd2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685c      	ldr	r4, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691e      	ldr	r6, [r3, #16]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff ffc8 	bl	8004c40 <makeFreeRtosPriority>
 8004cb0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cba:	9202      	str	r2, [sp, #8]
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	9100      	str	r1, [sp, #0]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	4632      	mov	r2, r6
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f000 f8ed 	bl	8004ea6 <xTaskCreateStatic>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	e01c      	b.n	8004d0c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685c      	ldr	r4, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cde:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff ffaa 	bl	8004c40 <makeFreeRtosPriority>
 8004cec:	4602      	mov	r2, r0
 8004cee:	f107 030c 	add.w	r3, r7, #12
 8004cf2:	9301      	str	r3, [sp, #4]
 8004cf4:	9200      	str	r2, [sp, #0]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	4632      	mov	r2, r6
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	f000 f932 	bl	8004f66 <xTaskCreate>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d001      	beq.n	8004d0c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	e000      	b.n	8004d0e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d16 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <osDelay+0x16>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	e000      	b.n	8004d2e <osDelay+0x18>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fa50 	bl	80051d4 <vTaskDelay>
  
  return osOK;
 8004d34:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f103 0208 	add.w	r2, r3, #8
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f04f 32ff 	mov.w	r2, #4294967295
 8004d56:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f103 0208 	add.w	r2, r3, #8
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f103 0208 	add.w	r2, r3, #8
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	601a      	str	r2, [r3, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df6:	d103      	bne.n	8004e00 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	e00c      	b.n	8004e1a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3308      	adds	r3, #8
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	e002      	b.n	8004e0e <vListInsert+0x2e>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d2f6      	bcs.n	8004e08 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	601a      	str	r2, [r3, #0]
}
 8004e46:	bf00      	nop
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e52:	b480      	push	{r7}
 8004e54:	b085      	sub	sp, #20
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6892      	ldr	r2, [r2, #8]
 8004e68:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6852      	ldr	r2, [r2, #4]
 8004e72:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d103      	bne.n	8004e86 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	1e5a      	subs	r2, r3, #1
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b08e      	sub	sp, #56	@ 0x38
 8004eaa:	af04      	add	r7, sp, #16
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	607a      	str	r2, [r7, #4]
 8004eb2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10b      	bne.n	8004ed2 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	e7fd      	b.n	8004ece <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10b      	bne.n	8004ef0 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	61fb      	str	r3, [r7, #28]
}
 8004eea:	bf00      	nop
 8004eec:	bf00      	nop
 8004eee:	e7fd      	b.n	8004eec <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ef0:	2354      	movs	r3, #84	@ 0x54
 8004ef2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	2b54      	cmp	r3, #84	@ 0x54
 8004ef8:	d00b      	beq.n	8004f12 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	61bb      	str	r3, [r7, #24]
}
 8004f0c:	bf00      	nop
 8004f0e:	bf00      	nop
 8004f10:	e7fd      	b.n	8004f0e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d01e      	beq.n	8004f58 <xTaskCreateStatic+0xb2>
 8004f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01b      	beq.n	8004f58 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f22:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f28:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f32:	2300      	movs	r3, #0
 8004f34:	9303      	str	r3, [sp, #12]
 8004f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f38:	9302      	str	r3, [sp, #8]
 8004f3a:	f107 0314 	add.w	r3, r7, #20
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 f850 	bl	8004ff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f52:	f000 f8d5 	bl	8005100 <prvAddNewTaskToReadyList>
 8004f56:	e001      	b.n	8004f5c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f5c:	697b      	ldr	r3, [r7, #20]
	}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3728      	adds	r7, #40	@ 0x28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b08c      	sub	sp, #48	@ 0x30
 8004f6a:	af04      	add	r7, sp, #16
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	603b      	str	r3, [r7, #0]
 8004f72:	4613      	mov	r3, r2
 8004f74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fed4 	bl	8005d28 <pvPortMalloc>
 8004f80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00e      	beq.n	8004fa6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f88:	2054      	movs	r0, #84	@ 0x54
 8004f8a:	f000 fecd 	bl	8005d28 <pvPortMalloc>
 8004f8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f9c:	e005      	b.n	8004faa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f9e:	6978      	ldr	r0, [r7, #20]
 8004fa0:	f000 ff90 	bl	8005ec4 <vPortFree>
 8004fa4:	e001      	b.n	8004faa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d017      	beq.n	8004fe0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fb8:	88fa      	ldrh	r2, [r7, #6]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	9303      	str	r3, [sp, #12]
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	9302      	str	r3, [sp, #8]
 8004fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc4:	9301      	str	r3, [sp, #4]
 8004fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68b9      	ldr	r1, [r7, #8]
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 f80e 	bl	8004ff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fd4:	69f8      	ldr	r0, [r7, #28]
 8004fd6:	f000 f893 	bl	8005100 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	61bb      	str	r3, [r7, #24]
 8004fde:	e002      	b.n	8004fe6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
	}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3720      	adds	r7, #32
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005000:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005008:	3b01      	subs	r3, #1
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f023 0307 	bic.w	r3, r3, #7
 8005016:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00b      	beq.n	800503a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	617b      	str	r3, [r7, #20]
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop
 8005038:	e7fd      	b.n	8005036 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01f      	beq.n	8005080 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005040:	2300      	movs	r3, #0
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	e012      	b.n	800506c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	4413      	add	r3, r2
 800504c:	7819      	ldrb	r1, [r3, #0]
 800504e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	4413      	add	r3, r2
 8005054:	3334      	adds	r3, #52	@ 0x34
 8005056:	460a      	mov	r2, r1
 8005058:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d006      	beq.n	8005074 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	3301      	adds	r3, #1
 800506a:	61fb      	str	r3, [r7, #28]
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	2b0f      	cmp	r3, #15
 8005070:	d9e9      	bls.n	8005046 <prvInitialiseNewTask+0x56>
 8005072:	e000      	b.n	8005076 <prvInitialiseNewTask+0x86>
			{
				break;
 8005074:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800507e:	e003      	b.n	8005088 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508a:	2b06      	cmp	r3, #6
 800508c:	d901      	bls.n	8005092 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800508e:	2306      	movs	r3, #6
 8005090:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005094:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005096:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800509c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800509e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a0:	2200      	movs	r2, #0
 80050a2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a6:	3304      	adds	r3, #4
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fe68 	bl	8004d7e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b0:	3318      	adds	r3, #24
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff fe63 	bl	8004d7e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c0:	f1c3 0207 	rsb	r2, r3, #7
 80050c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050cc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d0:	2200      	movs	r2, #0
 80050d2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	68f9      	ldr	r1, [r7, #12]
 80050e0:	69b8      	ldr	r0, [r7, #24]
 80050e2:	f000 fc0d 	bl	8005900 <pxPortInitialiseStack>
 80050e6:	4602      	mov	r2, r0
 80050e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050f8:	bf00      	nop
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005108:	f000 fd2e 	bl	8005b68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800510c:	4b2a      	ldr	r3, [pc, #168]	@ (80051b8 <prvAddNewTaskToReadyList+0xb8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3301      	adds	r3, #1
 8005112:	4a29      	ldr	r2, [pc, #164]	@ (80051b8 <prvAddNewTaskToReadyList+0xb8>)
 8005114:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005116:	4b29      	ldr	r3, [pc, #164]	@ (80051bc <prvAddNewTaskToReadyList+0xbc>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d109      	bne.n	8005132 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800511e:	4a27      	ldr	r2, [pc, #156]	@ (80051bc <prvAddNewTaskToReadyList+0xbc>)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005124:	4b24      	ldr	r3, [pc, #144]	@ (80051b8 <prvAddNewTaskToReadyList+0xb8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d110      	bne.n	800514e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800512c:	f000 fac4 	bl	80056b8 <prvInitialiseTaskLists>
 8005130:	e00d      	b.n	800514e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005132:	4b23      	ldr	r3, [pc, #140]	@ (80051c0 <prvAddNewTaskToReadyList+0xc0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d109      	bne.n	800514e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800513a:	4b20      	ldr	r3, [pc, #128]	@ (80051bc <prvAddNewTaskToReadyList+0xbc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005144:	429a      	cmp	r2, r3
 8005146:	d802      	bhi.n	800514e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005148:	4a1c      	ldr	r2, [pc, #112]	@ (80051bc <prvAddNewTaskToReadyList+0xbc>)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800514e:	4b1d      	ldr	r3, [pc, #116]	@ (80051c4 <prvAddNewTaskToReadyList+0xc4>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3301      	adds	r3, #1
 8005154:	4a1b      	ldr	r2, [pc, #108]	@ (80051c4 <prvAddNewTaskToReadyList+0xc4>)
 8005156:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515c:	2201      	movs	r2, #1
 800515e:	409a      	lsls	r2, r3
 8005160:	4b19      	ldr	r3, [pc, #100]	@ (80051c8 <prvAddNewTaskToReadyList+0xc8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4313      	orrs	r3, r2
 8005166:	4a18      	ldr	r2, [pc, #96]	@ (80051c8 <prvAddNewTaskToReadyList+0xc8>)
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800516e:	4613      	mov	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4a15      	ldr	r2, [pc, #84]	@ (80051cc <prvAddNewTaskToReadyList+0xcc>)
 8005178:	441a      	add	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3304      	adds	r3, #4
 800517e:	4619      	mov	r1, r3
 8005180:	4610      	mov	r0, r2
 8005182:	f7ff fe09 	bl	8004d98 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005186:	f000 fd21 	bl	8005bcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800518a:	4b0d      	ldr	r3, [pc, #52]	@ (80051c0 <prvAddNewTaskToReadyList+0xc0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00e      	beq.n	80051b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005192:	4b0a      	ldr	r3, [pc, #40]	@ (80051bc <prvAddNewTaskToReadyList+0xbc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519c:	429a      	cmp	r2, r3
 800519e:	d207      	bcs.n	80051b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051a0:	4b0b      	ldr	r3, [pc, #44]	@ (80051d0 <prvAddNewTaskToReadyList+0xd0>)
 80051a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	20000694 	.word	0x20000694
 80051bc:	20000594 	.word	0x20000594
 80051c0:	200006a0 	.word	0x200006a0
 80051c4:	200006b0 	.word	0x200006b0
 80051c8:	2000069c 	.word	0x2000069c
 80051cc:	20000598 	.word	0x20000598
 80051d0:	e000ed04 	.word	0xe000ed04

080051d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d018      	beq.n	8005218 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051e6:	4b14      	ldr	r3, [pc, #80]	@ (8005238 <vTaskDelay+0x64>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00b      	beq.n	8005206 <vTaskDelay+0x32>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	60bb      	str	r3, [r7, #8]
}
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	e7fd      	b.n	8005202 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005206:	f000 f87d 	bl	8005304 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800520a:	2100      	movs	r1, #0
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fb11 	bl	8005834 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005212:	f000 f885 	bl	8005320 <xTaskResumeAll>
 8005216:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d107      	bne.n	800522e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800521e:	4b07      	ldr	r3, [pc, #28]	@ (800523c <vTaskDelay+0x68>)
 8005220:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800522e:	bf00      	nop
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	200006bc 	.word	0x200006bc
 800523c:	e000ed04 	.word	0xe000ed04

08005240 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	@ 0x28
 8005244:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005246:	2300      	movs	r3, #0
 8005248:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800524a:	2300      	movs	r3, #0
 800524c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800524e:	463a      	mov	r2, r7
 8005250:	1d39      	adds	r1, r7, #4
 8005252:	f107 0308 	add.w	r3, r7, #8
 8005256:	4618      	mov	r0, r3
 8005258:	f7fc f814 	bl	8001284 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800525c:	6839      	ldr	r1, [r7, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	9202      	str	r2, [sp, #8]
 8005264:	9301      	str	r3, [sp, #4]
 8005266:	2300      	movs	r3, #0
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	2300      	movs	r3, #0
 800526c:	460a      	mov	r2, r1
 800526e:	491f      	ldr	r1, [pc, #124]	@ (80052ec <vTaskStartScheduler+0xac>)
 8005270:	481f      	ldr	r0, [pc, #124]	@ (80052f0 <vTaskStartScheduler+0xb0>)
 8005272:	f7ff fe18 	bl	8004ea6 <xTaskCreateStatic>
 8005276:	4603      	mov	r3, r0
 8005278:	4a1e      	ldr	r2, [pc, #120]	@ (80052f4 <vTaskStartScheduler+0xb4>)
 800527a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800527c:	4b1d      	ldr	r3, [pc, #116]	@ (80052f4 <vTaskStartScheduler+0xb4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005284:	2301      	movs	r3, #1
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	e001      	b.n	800528e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800528a:	2300      	movs	r3, #0
 800528c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d116      	bne.n	80052c2 <vTaskStartScheduler+0x82>
	__asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	613b      	str	r3, [r7, #16]
}
 80052a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052a8:	4b13      	ldr	r3, [pc, #76]	@ (80052f8 <vTaskStartScheduler+0xb8>)
 80052aa:	f04f 32ff 	mov.w	r2, #4294967295
 80052ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052b0:	4b12      	ldr	r3, [pc, #72]	@ (80052fc <vTaskStartScheduler+0xbc>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052b6:	4b12      	ldr	r3, [pc, #72]	@ (8005300 <vTaskStartScheduler+0xc0>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052bc:	f000 fbb0 	bl	8005a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052c0:	e00f      	b.n	80052e2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c8:	d10b      	bne.n	80052e2 <vTaskStartScheduler+0xa2>
	__asm volatile
 80052ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	60fb      	str	r3, [r7, #12]
}
 80052dc:	bf00      	nop
 80052de:	bf00      	nop
 80052e0:	e7fd      	b.n	80052de <vTaskStartScheduler+0x9e>
}
 80052e2:	bf00      	nop
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	08006210 	.word	0x08006210
 80052f0:	08005689 	.word	0x08005689
 80052f4:	200006b8 	.word	0x200006b8
 80052f8:	200006b4 	.word	0x200006b4
 80052fc:	200006a0 	.word	0x200006a0
 8005300:	20000698 	.word	0x20000698

08005304 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005308:	4b04      	ldr	r3, [pc, #16]	@ (800531c <vTaskSuspendAll+0x18>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3301      	adds	r3, #1
 800530e:	4a03      	ldr	r2, [pc, #12]	@ (800531c <vTaskSuspendAll+0x18>)
 8005310:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005312:	bf00      	nop
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	200006bc 	.word	0x200006bc

08005320 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800532a:	2300      	movs	r3, #0
 800532c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800532e:	4b42      	ldr	r3, [pc, #264]	@ (8005438 <xTaskResumeAll+0x118>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10b      	bne.n	800534e <xTaskResumeAll+0x2e>
	__asm volatile
 8005336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	603b      	str	r3, [r7, #0]
}
 8005348:	bf00      	nop
 800534a:	bf00      	nop
 800534c:	e7fd      	b.n	800534a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800534e:	f000 fc0b 	bl	8005b68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005352:	4b39      	ldr	r3, [pc, #228]	@ (8005438 <xTaskResumeAll+0x118>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3b01      	subs	r3, #1
 8005358:	4a37      	ldr	r2, [pc, #220]	@ (8005438 <xTaskResumeAll+0x118>)
 800535a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800535c:	4b36      	ldr	r3, [pc, #216]	@ (8005438 <xTaskResumeAll+0x118>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d161      	bne.n	8005428 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005364:	4b35      	ldr	r3, [pc, #212]	@ (800543c <xTaskResumeAll+0x11c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d05d      	beq.n	8005428 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800536c:	e02e      	b.n	80053cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800536e:	4b34      	ldr	r3, [pc, #208]	@ (8005440 <xTaskResumeAll+0x120>)
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3318      	adds	r3, #24
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff fd69 	bl	8004e52 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	3304      	adds	r3, #4
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff fd64 	bl	8004e52 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538e:	2201      	movs	r2, #1
 8005390:	409a      	lsls	r2, r3
 8005392:	4b2c      	ldr	r3, [pc, #176]	@ (8005444 <xTaskResumeAll+0x124>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4313      	orrs	r3, r2
 8005398:	4a2a      	ldr	r2, [pc, #168]	@ (8005444 <xTaskResumeAll+0x124>)
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a0:	4613      	mov	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4a27      	ldr	r2, [pc, #156]	@ (8005448 <xTaskResumeAll+0x128>)
 80053aa:	441a      	add	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	3304      	adds	r3, #4
 80053b0:	4619      	mov	r1, r3
 80053b2:	4610      	mov	r0, r2
 80053b4:	f7ff fcf0 	bl	8004d98 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053bc:	4b23      	ldr	r3, [pc, #140]	@ (800544c <xTaskResumeAll+0x12c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d302      	bcc.n	80053cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80053c6:	4b22      	ldr	r3, [pc, #136]	@ (8005450 <xTaskResumeAll+0x130>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005440 <xTaskResumeAll+0x120>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1cc      	bne.n	800536e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053da:	f000 fa0b 	bl	80057f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80053de:	4b1d      	ldr	r3, [pc, #116]	@ (8005454 <xTaskResumeAll+0x134>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d010      	beq.n	800540c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053ea:	f000 f837 	bl	800545c <xTaskIncrementTick>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80053f4:	4b16      	ldr	r3, [pc, #88]	@ (8005450 <xTaskResumeAll+0x130>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f1      	bne.n	80053ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005406:	4b13      	ldr	r3, [pc, #76]	@ (8005454 <xTaskResumeAll+0x134>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800540c:	4b10      	ldr	r3, [pc, #64]	@ (8005450 <xTaskResumeAll+0x130>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d009      	beq.n	8005428 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005414:	2301      	movs	r3, #1
 8005416:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005418:	4b0f      	ldr	r3, [pc, #60]	@ (8005458 <xTaskResumeAll+0x138>)
 800541a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005428:	f000 fbd0 	bl	8005bcc <vPortExitCritical>

	return xAlreadyYielded;
 800542c:	68bb      	ldr	r3, [r7, #8]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	200006bc 	.word	0x200006bc
 800543c:	20000694 	.word	0x20000694
 8005440:	20000654 	.word	0x20000654
 8005444:	2000069c 	.word	0x2000069c
 8005448:	20000598 	.word	0x20000598
 800544c:	20000594 	.word	0x20000594
 8005450:	200006a8 	.word	0x200006a8
 8005454:	200006a4 	.word	0x200006a4
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005462:	2300      	movs	r3, #0
 8005464:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005466:	4b4f      	ldr	r3, [pc, #316]	@ (80055a4 <xTaskIncrementTick+0x148>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f040 808f 	bne.w	800558e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005470:	4b4d      	ldr	r3, [pc, #308]	@ (80055a8 <xTaskIncrementTick+0x14c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3301      	adds	r3, #1
 8005476:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005478:	4a4b      	ldr	r2, [pc, #300]	@ (80055a8 <xTaskIncrementTick+0x14c>)
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d121      	bne.n	80054c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005484:	4b49      	ldr	r3, [pc, #292]	@ (80055ac <xTaskIncrementTick+0x150>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00b      	beq.n	80054a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	603b      	str	r3, [r7, #0]
}
 80054a0:	bf00      	nop
 80054a2:	bf00      	nop
 80054a4:	e7fd      	b.n	80054a2 <xTaskIncrementTick+0x46>
 80054a6:	4b41      	ldr	r3, [pc, #260]	@ (80055ac <xTaskIncrementTick+0x150>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	4b40      	ldr	r3, [pc, #256]	@ (80055b0 <xTaskIncrementTick+0x154>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a3e      	ldr	r2, [pc, #248]	@ (80055ac <xTaskIncrementTick+0x150>)
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	4a3e      	ldr	r2, [pc, #248]	@ (80055b0 <xTaskIncrementTick+0x154>)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	4b3e      	ldr	r3, [pc, #248]	@ (80055b4 <xTaskIncrementTick+0x158>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3301      	adds	r3, #1
 80054c0:	4a3c      	ldr	r2, [pc, #240]	@ (80055b4 <xTaskIncrementTick+0x158>)
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	f000 f996 	bl	80057f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054c8:	4b3b      	ldr	r3, [pc, #236]	@ (80055b8 <xTaskIncrementTick+0x15c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d348      	bcc.n	8005564 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054d2:	4b36      	ldr	r3, [pc, #216]	@ (80055ac <xTaskIncrementTick+0x150>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d104      	bne.n	80054e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054dc:	4b36      	ldr	r3, [pc, #216]	@ (80055b8 <xTaskIncrementTick+0x15c>)
 80054de:	f04f 32ff 	mov.w	r2, #4294967295
 80054e2:	601a      	str	r2, [r3, #0]
					break;
 80054e4:	e03e      	b.n	8005564 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054e6:	4b31      	ldr	r3, [pc, #196]	@ (80055ac <xTaskIncrementTick+0x150>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d203      	bcs.n	8005506 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054fe:	4a2e      	ldr	r2, [pc, #184]	@ (80055b8 <xTaskIncrementTick+0x15c>)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005504:	e02e      	b.n	8005564 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	3304      	adds	r3, #4
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff fca1 	bl	8004e52 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005514:	2b00      	cmp	r3, #0
 8005516:	d004      	beq.n	8005522 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	3318      	adds	r3, #24
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff fc98 	bl	8004e52 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005526:	2201      	movs	r2, #1
 8005528:	409a      	lsls	r2, r3
 800552a:	4b24      	ldr	r3, [pc, #144]	@ (80055bc <xTaskIncrementTick+0x160>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4313      	orrs	r3, r2
 8005530:	4a22      	ldr	r2, [pc, #136]	@ (80055bc <xTaskIncrementTick+0x160>)
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4a1f      	ldr	r2, [pc, #124]	@ (80055c0 <xTaskIncrementTick+0x164>)
 8005542:	441a      	add	r2, r3
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	3304      	adds	r3, #4
 8005548:	4619      	mov	r1, r3
 800554a:	4610      	mov	r0, r2
 800554c:	f7ff fc24 	bl	8004d98 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005554:	4b1b      	ldr	r3, [pc, #108]	@ (80055c4 <xTaskIncrementTick+0x168>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555a:	429a      	cmp	r2, r3
 800555c:	d3b9      	bcc.n	80054d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800555e:	2301      	movs	r3, #1
 8005560:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005562:	e7b6      	b.n	80054d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005564:	4b17      	ldr	r3, [pc, #92]	@ (80055c4 <xTaskIncrementTick+0x168>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800556a:	4915      	ldr	r1, [pc, #84]	@ (80055c0 <xTaskIncrementTick+0x164>)
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d901      	bls.n	8005580 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800557c:	2301      	movs	r3, #1
 800557e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005580:	4b11      	ldr	r3, [pc, #68]	@ (80055c8 <xTaskIncrementTick+0x16c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d007      	beq.n	8005598 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005588:	2301      	movs	r3, #1
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	e004      	b.n	8005598 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800558e:	4b0f      	ldr	r3, [pc, #60]	@ (80055cc <xTaskIncrementTick+0x170>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	4a0d      	ldr	r2, [pc, #52]	@ (80055cc <xTaskIncrementTick+0x170>)
 8005596:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005598:	697b      	ldr	r3, [r7, #20]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	200006bc 	.word	0x200006bc
 80055a8:	20000698 	.word	0x20000698
 80055ac:	2000064c 	.word	0x2000064c
 80055b0:	20000650 	.word	0x20000650
 80055b4:	200006ac 	.word	0x200006ac
 80055b8:	200006b4 	.word	0x200006b4
 80055bc:	2000069c 	.word	0x2000069c
 80055c0:	20000598 	.word	0x20000598
 80055c4:	20000594 	.word	0x20000594
 80055c8:	200006a8 	.word	0x200006a8
 80055cc:	200006a4 	.word	0x200006a4

080055d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055d6:	4b27      	ldr	r3, [pc, #156]	@ (8005674 <vTaskSwitchContext+0xa4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055de:	4b26      	ldr	r3, [pc, #152]	@ (8005678 <vTaskSwitchContext+0xa8>)
 80055e0:	2201      	movs	r2, #1
 80055e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055e4:	e040      	b.n	8005668 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80055e6:	4b24      	ldr	r3, [pc, #144]	@ (8005678 <vTaskSwitchContext+0xa8>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ec:	4b23      	ldr	r3, [pc, #140]	@ (800567c <vTaskSwitchContext+0xac>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	fab3 f383 	clz	r3, r3
 80055f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80055fa:	7afb      	ldrb	r3, [r7, #11]
 80055fc:	f1c3 031f 	rsb	r3, r3, #31
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	491f      	ldr	r1, [pc, #124]	@ (8005680 <vTaskSwitchContext+0xb0>)
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10b      	bne.n	800562e <vTaskSwitchContext+0x5e>
	__asm volatile
 8005616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	607b      	str	r3, [r7, #4]
}
 8005628:	bf00      	nop
 800562a:	bf00      	nop
 800562c:	e7fd      	b.n	800562a <vTaskSwitchContext+0x5a>
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4a11      	ldr	r2, [pc, #68]	@ (8005680 <vTaskSwitchContext+0xb0>)
 800563a:	4413      	add	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	605a      	str	r2, [r3, #4]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	3308      	adds	r3, #8
 8005650:	429a      	cmp	r2, r3
 8005652:	d104      	bne.n	800565e <vTaskSwitchContext+0x8e>
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	605a      	str	r2, [r3, #4]
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	4a07      	ldr	r2, [pc, #28]	@ (8005684 <vTaskSwitchContext+0xb4>)
 8005666:	6013      	str	r3, [r2, #0]
}
 8005668:	bf00      	nop
 800566a:	371c      	adds	r7, #28
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	200006bc 	.word	0x200006bc
 8005678:	200006a8 	.word	0x200006a8
 800567c:	2000069c 	.word	0x2000069c
 8005680:	20000598 	.word	0x20000598
 8005684:	20000594 	.word	0x20000594

08005688 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005690:	f000 f852 	bl	8005738 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005694:	4b06      	ldr	r3, [pc, #24]	@ (80056b0 <prvIdleTask+0x28>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d9f9      	bls.n	8005690 <prvIdleTask+0x8>
			{
				taskYIELD();
 800569c:	4b05      	ldr	r3, [pc, #20]	@ (80056b4 <prvIdleTask+0x2c>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056ac:	e7f0      	b.n	8005690 <prvIdleTask+0x8>
 80056ae:	bf00      	nop
 80056b0:	20000598 	.word	0x20000598
 80056b4:	e000ed04 	.word	0xe000ed04

080056b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056be:	2300      	movs	r3, #0
 80056c0:	607b      	str	r3, [r7, #4]
 80056c2:	e00c      	b.n	80056de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4a12      	ldr	r2, [pc, #72]	@ (8005718 <prvInitialiseTaskLists+0x60>)
 80056d0:	4413      	add	r3, r2
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff fb33 	bl	8004d3e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3301      	adds	r3, #1
 80056dc:	607b      	str	r3, [r7, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b06      	cmp	r3, #6
 80056e2:	d9ef      	bls.n	80056c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056e4:	480d      	ldr	r0, [pc, #52]	@ (800571c <prvInitialiseTaskLists+0x64>)
 80056e6:	f7ff fb2a 	bl	8004d3e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056ea:	480d      	ldr	r0, [pc, #52]	@ (8005720 <prvInitialiseTaskLists+0x68>)
 80056ec:	f7ff fb27 	bl	8004d3e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056f0:	480c      	ldr	r0, [pc, #48]	@ (8005724 <prvInitialiseTaskLists+0x6c>)
 80056f2:	f7ff fb24 	bl	8004d3e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056f6:	480c      	ldr	r0, [pc, #48]	@ (8005728 <prvInitialiseTaskLists+0x70>)
 80056f8:	f7ff fb21 	bl	8004d3e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80056fc:	480b      	ldr	r0, [pc, #44]	@ (800572c <prvInitialiseTaskLists+0x74>)
 80056fe:	f7ff fb1e 	bl	8004d3e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005702:	4b0b      	ldr	r3, [pc, #44]	@ (8005730 <prvInitialiseTaskLists+0x78>)
 8005704:	4a05      	ldr	r2, [pc, #20]	@ (800571c <prvInitialiseTaskLists+0x64>)
 8005706:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005708:	4b0a      	ldr	r3, [pc, #40]	@ (8005734 <prvInitialiseTaskLists+0x7c>)
 800570a:	4a05      	ldr	r2, [pc, #20]	@ (8005720 <prvInitialiseTaskLists+0x68>)
 800570c:	601a      	str	r2, [r3, #0]
}
 800570e:	bf00      	nop
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000598 	.word	0x20000598
 800571c:	20000624 	.word	0x20000624
 8005720:	20000638 	.word	0x20000638
 8005724:	20000654 	.word	0x20000654
 8005728:	20000668 	.word	0x20000668
 800572c:	20000680 	.word	0x20000680
 8005730:	2000064c 	.word	0x2000064c
 8005734:	20000650 	.word	0x20000650

08005738 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800573e:	e019      	b.n	8005774 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005740:	f000 fa12 	bl	8005b68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005744:	4b10      	ldr	r3, [pc, #64]	@ (8005788 <prvCheckTasksWaitingTermination+0x50>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3304      	adds	r3, #4
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff fb7e 	bl	8004e52 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005756:	4b0d      	ldr	r3, [pc, #52]	@ (800578c <prvCheckTasksWaitingTermination+0x54>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3b01      	subs	r3, #1
 800575c:	4a0b      	ldr	r2, [pc, #44]	@ (800578c <prvCheckTasksWaitingTermination+0x54>)
 800575e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005760:	4b0b      	ldr	r3, [pc, #44]	@ (8005790 <prvCheckTasksWaitingTermination+0x58>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3b01      	subs	r3, #1
 8005766:	4a0a      	ldr	r2, [pc, #40]	@ (8005790 <prvCheckTasksWaitingTermination+0x58>)
 8005768:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800576a:	f000 fa2f 	bl	8005bcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f810 	bl	8005794 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005774:	4b06      	ldr	r3, [pc, #24]	@ (8005790 <prvCheckTasksWaitingTermination+0x58>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1e1      	bne.n	8005740 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800577c:	bf00      	nop
 800577e:	bf00      	nop
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000668 	.word	0x20000668
 800578c:	20000694 	.word	0x20000694
 8005790:	2000067c 	.word	0x2000067c

08005794 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d108      	bne.n	80057b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fb8a 	bl	8005ec4 <vPortFree>
				vPortFree( pxTCB );
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fb87 	bl	8005ec4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057b6:	e019      	b.n	80057ec <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d103      	bne.n	80057ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fb7e 	bl	8005ec4 <vPortFree>
	}
 80057c8:	e010      	b.n	80057ec <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d00b      	beq.n	80057ec <prvDeleteTCB+0x58>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	60fb      	str	r3, [r7, #12]
}
 80057e6:	bf00      	nop
 80057e8:	bf00      	nop
 80057ea:	e7fd      	b.n	80057e8 <prvDeleteTCB+0x54>
	}
 80057ec:	bf00      	nop
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057fa:	4b0c      	ldr	r3, [pc, #48]	@ (800582c <prvResetNextTaskUnblockTime+0x38>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d104      	bne.n	800580e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005804:	4b0a      	ldr	r3, [pc, #40]	@ (8005830 <prvResetNextTaskUnblockTime+0x3c>)
 8005806:	f04f 32ff 	mov.w	r2, #4294967295
 800580a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800580c:	e008      	b.n	8005820 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800580e:	4b07      	ldr	r3, [pc, #28]	@ (800582c <prvResetNextTaskUnblockTime+0x38>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	4a04      	ldr	r2, [pc, #16]	@ (8005830 <prvResetNextTaskUnblockTime+0x3c>)
 800581e:	6013      	str	r3, [r2, #0]
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	2000064c 	.word	0x2000064c
 8005830:	200006b4 	.word	0x200006b4

08005834 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800583e:	4b29      	ldr	r3, [pc, #164]	@ (80058e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005844:	4b28      	ldr	r3, [pc, #160]	@ (80058e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3304      	adds	r3, #4
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff fb01 	bl	8004e52 <uxListRemove>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005856:	4b24      	ldr	r3, [pc, #144]	@ (80058e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585c:	2201      	movs	r2, #1
 800585e:	fa02 f303 	lsl.w	r3, r2, r3
 8005862:	43da      	mvns	r2, r3
 8005864:	4b21      	ldr	r3, [pc, #132]	@ (80058ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4013      	ands	r3, r2
 800586a:	4a20      	ldr	r2, [pc, #128]	@ (80058ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800586c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005874:	d10a      	bne.n	800588c <prvAddCurrentTaskToDelayedList+0x58>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d007      	beq.n	800588c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800587c:	4b1a      	ldr	r3, [pc, #104]	@ (80058e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3304      	adds	r3, #4
 8005882:	4619      	mov	r1, r3
 8005884:	481a      	ldr	r0, [pc, #104]	@ (80058f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005886:	f7ff fa87 	bl	8004d98 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800588a:	e026      	b.n	80058da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4413      	add	r3, r2
 8005892:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005894:	4b14      	ldr	r3, [pc, #80]	@ (80058e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d209      	bcs.n	80058b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058a4:	4b13      	ldr	r3, [pc, #76]	@ (80058f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	4b0f      	ldr	r3, [pc, #60]	@ (80058e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3304      	adds	r3, #4
 80058ae:	4619      	mov	r1, r3
 80058b0:	4610      	mov	r0, r2
 80058b2:	f7ff fa95 	bl	8004de0 <vListInsert>
}
 80058b6:	e010      	b.n	80058da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058b8:	4b0f      	ldr	r3, [pc, #60]	@ (80058f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	4b0a      	ldr	r3, [pc, #40]	@ (80058e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3304      	adds	r3, #4
 80058c2:	4619      	mov	r1, r3
 80058c4:	4610      	mov	r0, r2
 80058c6:	f7ff fa8b 	bl	8004de0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058ca:	4b0c      	ldr	r3, [pc, #48]	@ (80058fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d202      	bcs.n	80058da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80058d4:	4a09      	ldr	r2, [pc, #36]	@ (80058fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	6013      	str	r3, [r2, #0]
}
 80058da:	bf00      	nop
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20000698 	.word	0x20000698
 80058e8:	20000594 	.word	0x20000594
 80058ec:	2000069c 	.word	0x2000069c
 80058f0:	20000680 	.word	0x20000680
 80058f4:	20000650 	.word	0x20000650
 80058f8:	2000064c 	.word	0x2000064c
 80058fc:	200006b4 	.word	0x200006b4

08005900 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3b04      	subs	r3, #4
 8005910:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005918:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	3b04      	subs	r3, #4
 800591e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f023 0201 	bic.w	r2, r3, #1
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3b04      	subs	r3, #4
 800592e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005930:	4a0c      	ldr	r2, [pc, #48]	@ (8005964 <pxPortInitialiseStack+0x64>)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3b14      	subs	r3, #20
 800593a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3b04      	subs	r3, #4
 8005946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f06f 0202 	mvn.w	r2, #2
 800594e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3b20      	subs	r3, #32
 8005954:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005956:	68fb      	ldr	r3, [r7, #12]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	08005969 	.word	0x08005969

08005968 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800596e:	2300      	movs	r3, #0
 8005970:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005972:	4b13      	ldr	r3, [pc, #76]	@ (80059c0 <prvTaskExitError+0x58>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597a:	d00b      	beq.n	8005994 <prvTaskExitError+0x2c>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	60fb      	str	r3, [r7, #12]
}
 800598e:	bf00      	nop
 8005990:	bf00      	nop
 8005992:	e7fd      	b.n	8005990 <prvTaskExitError+0x28>
	__asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	60bb      	str	r3, [r7, #8]
}
 80059a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059a8:	bf00      	nop
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0fc      	beq.n	80059aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059b0:	bf00      	nop
 80059b2:	bf00      	nop
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	2000000c 	.word	0x2000000c
	...

080059d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80059d0:	4b07      	ldr	r3, [pc, #28]	@ (80059f0 <pxCurrentTCBConst2>)
 80059d2:	6819      	ldr	r1, [r3, #0]
 80059d4:	6808      	ldr	r0, [r1, #0]
 80059d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059da:	f380 8809 	msr	PSP, r0
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f04f 0000 	mov.w	r0, #0
 80059e6:	f380 8811 	msr	BASEPRI, r0
 80059ea:	4770      	bx	lr
 80059ec:	f3af 8000 	nop.w

080059f0 <pxCurrentTCBConst2>:
 80059f0:	20000594 	.word	0x20000594
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop

080059f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80059f8:	4808      	ldr	r0, [pc, #32]	@ (8005a1c <prvPortStartFirstTask+0x24>)
 80059fa:	6800      	ldr	r0, [r0, #0]
 80059fc:	6800      	ldr	r0, [r0, #0]
 80059fe:	f380 8808 	msr	MSP, r0
 8005a02:	f04f 0000 	mov.w	r0, #0
 8005a06:	f380 8814 	msr	CONTROL, r0
 8005a0a:	b662      	cpsie	i
 8005a0c:	b661      	cpsie	f
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	df00      	svc	0
 8005a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a1a:	bf00      	nop
 8005a1c:	e000ed08 	.word	0xe000ed08

08005a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a26:	4b47      	ldr	r3, [pc, #284]	@ (8005b44 <xPortStartScheduler+0x124>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a47      	ldr	r2, [pc, #284]	@ (8005b48 <xPortStartScheduler+0x128>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d10b      	bne.n	8005a48 <xPortStartScheduler+0x28>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	613b      	str	r3, [r7, #16]
}
 8005a42:	bf00      	nop
 8005a44:	bf00      	nop
 8005a46:	e7fd      	b.n	8005a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a48:	4b3e      	ldr	r3, [pc, #248]	@ (8005b44 <xPortStartScheduler+0x124>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a3f      	ldr	r2, [pc, #252]	@ (8005b4c <xPortStartScheduler+0x12c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d10b      	bne.n	8005a6a <xPortStartScheduler+0x4a>
	__asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	60fb      	str	r3, [r7, #12]
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop
 8005a68:	e7fd      	b.n	8005a66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a6a:	4b39      	ldr	r3, [pc, #228]	@ (8005b50 <xPortStartScheduler+0x130>)
 8005a6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	22ff      	movs	r2, #255	@ 0xff
 8005a7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	4b31      	ldr	r3, [pc, #196]	@ (8005b54 <xPortStartScheduler+0x134>)
 8005a90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a92:	4b31      	ldr	r3, [pc, #196]	@ (8005b58 <xPortStartScheduler+0x138>)
 8005a94:	2207      	movs	r2, #7
 8005a96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a98:	e009      	b.n	8005aae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b58 <xPortStartScheduler+0x138>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8005b58 <xPortStartScheduler+0x138>)
 8005aa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005aa4:	78fb      	ldrb	r3, [r7, #3]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab6:	2b80      	cmp	r3, #128	@ 0x80
 8005ab8:	d0ef      	beq.n	8005a9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005aba:	4b27      	ldr	r3, [pc, #156]	@ (8005b58 <xPortStartScheduler+0x138>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f1c3 0307 	rsb	r3, r3, #7
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d00b      	beq.n	8005ade <xPortStartScheduler+0xbe>
	__asm volatile
 8005ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	60bb      	str	r3, [r7, #8]
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	e7fd      	b.n	8005ada <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ade:	4b1e      	ldr	r3, [pc, #120]	@ (8005b58 <xPortStartScheduler+0x138>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	021b      	lsls	r3, r3, #8
 8005ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8005b58 <xPortStartScheduler+0x138>)
 8005ae6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b58 <xPortStartScheduler+0x138>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005af0:	4a19      	ldr	r2, [pc, #100]	@ (8005b58 <xPortStartScheduler+0x138>)
 8005af2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005afc:	4b17      	ldr	r3, [pc, #92]	@ (8005b5c <xPortStartScheduler+0x13c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a16      	ldr	r2, [pc, #88]	@ (8005b5c <xPortStartScheduler+0x13c>)
 8005b02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005b06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b08:	4b14      	ldr	r3, [pc, #80]	@ (8005b5c <xPortStartScheduler+0x13c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a13      	ldr	r2, [pc, #76]	@ (8005b5c <xPortStartScheduler+0x13c>)
 8005b0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005b12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b14:	f000 f8da 	bl	8005ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b18:	4b11      	ldr	r3, [pc, #68]	@ (8005b60 <xPortStartScheduler+0x140>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b1e:	f000 f8f9 	bl	8005d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b22:	4b10      	ldr	r3, [pc, #64]	@ (8005b64 <xPortStartScheduler+0x144>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a0f      	ldr	r2, [pc, #60]	@ (8005b64 <xPortStartScheduler+0x144>)
 8005b28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005b2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b2e:	f7ff ff63 	bl	80059f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b32:	f7ff fd4d 	bl	80055d0 <vTaskSwitchContext>
	prvTaskExitError();
 8005b36:	f7ff ff17 	bl	8005968 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	e000ed00 	.word	0xe000ed00
 8005b48:	410fc271 	.word	0x410fc271
 8005b4c:	410fc270 	.word	0x410fc270
 8005b50:	e000e400 	.word	0xe000e400
 8005b54:	200006c0 	.word	0x200006c0
 8005b58:	200006c4 	.word	0x200006c4
 8005b5c:	e000ed20 	.word	0xe000ed20
 8005b60:	2000000c 	.word	0x2000000c
 8005b64:	e000ef34 	.word	0xe000ef34

08005b68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	607b      	str	r3, [r7, #4]
}
 8005b80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b82:	4b10      	ldr	r3, [pc, #64]	@ (8005bc4 <vPortEnterCritical+0x5c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3301      	adds	r3, #1
 8005b88:	4a0e      	ldr	r2, [pc, #56]	@ (8005bc4 <vPortEnterCritical+0x5c>)
 8005b8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc4 <vPortEnterCritical+0x5c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d110      	bne.n	8005bb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b94:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc8 <vPortEnterCritical+0x60>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00b      	beq.n	8005bb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	603b      	str	r3, [r7, #0]
}
 8005bb0:	bf00      	nop
 8005bb2:	bf00      	nop
 8005bb4:	e7fd      	b.n	8005bb2 <vPortEnterCritical+0x4a>
	}
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	2000000c 	.word	0x2000000c
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005bd2:	4b12      	ldr	r3, [pc, #72]	@ (8005c1c <vPortExitCritical+0x50>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10b      	bne.n	8005bf2 <vPortExitCritical+0x26>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	607b      	str	r3, [r7, #4]
}
 8005bec:	bf00      	nop
 8005bee:	bf00      	nop
 8005bf0:	e7fd      	b.n	8005bee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8005c1c <vPortExitCritical+0x50>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	4a08      	ldr	r2, [pc, #32]	@ (8005c1c <vPortExitCritical+0x50>)
 8005bfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bfc:	4b07      	ldr	r3, [pc, #28]	@ (8005c1c <vPortExitCritical+0x50>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d105      	bne.n	8005c10 <vPortExitCritical+0x44>
 8005c04:	2300      	movs	r3, #0
 8005c06:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	2000000c 	.word	0x2000000c

08005c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c20:	f3ef 8009 	mrs	r0, PSP
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	4b15      	ldr	r3, [pc, #84]	@ (8005c80 <pxCurrentTCBConst>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	f01e 0f10 	tst.w	lr, #16
 8005c30:	bf08      	it	eq
 8005c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3a:	6010      	str	r0, [r2, #0]
 8005c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005c44:	f380 8811 	msr	BASEPRI, r0
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f7ff fcbe 	bl	80055d0 <vTaskSwitchContext>
 8005c54:	f04f 0000 	mov.w	r0, #0
 8005c58:	f380 8811 	msr	BASEPRI, r0
 8005c5c:	bc09      	pop	{r0, r3}
 8005c5e:	6819      	ldr	r1, [r3, #0]
 8005c60:	6808      	ldr	r0, [r1, #0]
 8005c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c66:	f01e 0f10 	tst.w	lr, #16
 8005c6a:	bf08      	it	eq
 8005c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c70:	f380 8809 	msr	PSP, r0
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	f3af 8000 	nop.w

08005c80 <pxCurrentTCBConst>:
 8005c80:	20000594 	.word	0x20000594
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop

08005c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	607b      	str	r3, [r7, #4]
}
 8005ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ca2:	f7ff fbdb 	bl	800545c <xTaskIncrementTick>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cac:	4b06      	ldr	r3, [pc, #24]	@ (8005cc8 <SysTick_Handler+0x40>)
 8005cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	f383 8811 	msr	BASEPRI, r3
}
 8005cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005cc0:	bf00      	nop
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005d00 <vPortSetupTimerInterrupt+0x34>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005d04 <vPortSetupTimerInterrupt+0x38>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005d08 <vPortSetupTimerInterrupt+0x3c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8005d0c <vPortSetupTimerInterrupt+0x40>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	099b      	lsrs	r3, r3, #6
 8005ce8:	4a09      	ldr	r2, [pc, #36]	@ (8005d10 <vPortSetupTimerInterrupt+0x44>)
 8005cea:	3b01      	subs	r3, #1
 8005cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cee:	4b04      	ldr	r3, [pc, #16]	@ (8005d00 <vPortSetupTimerInterrupt+0x34>)
 8005cf0:	2207      	movs	r2, #7
 8005cf2:	601a      	str	r2, [r3, #0]
}
 8005cf4:	bf00      	nop
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	e000e010 	.word	0xe000e010
 8005d04:	e000e018 	.word	0xe000e018
 8005d08:	20000000 	.word	0x20000000
 8005d0c:	10624dd3 	.word	0x10624dd3
 8005d10:	e000e014 	.word	0xe000e014

08005d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005d24 <vPortEnableVFP+0x10>
 8005d18:	6801      	ldr	r1, [r0, #0]
 8005d1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005d1e:	6001      	str	r1, [r0, #0]
 8005d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d22:	bf00      	nop
 8005d24:	e000ed88 	.word	0xe000ed88

08005d28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08a      	sub	sp, #40	@ 0x28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d30:	2300      	movs	r3, #0
 8005d32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d34:	f7ff fae6 	bl	8005304 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d38:	4b5c      	ldr	r3, [pc, #368]	@ (8005eac <pvPortMalloc+0x184>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d40:	f000 f924 	bl	8005f8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d44:	4b5a      	ldr	r3, [pc, #360]	@ (8005eb0 <pvPortMalloc+0x188>)
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f040 8095 	bne.w	8005e7c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d01e      	beq.n	8005d96 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005d58:	2208      	movs	r2, #8
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d015      	beq.n	8005d96 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f023 0307 	bic.w	r3, r3, #7
 8005d70:	3308      	adds	r3, #8
 8005d72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00b      	beq.n	8005d96 <pvPortMalloc+0x6e>
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	617b      	str	r3, [r7, #20]
}
 8005d90:	bf00      	nop
 8005d92:	bf00      	nop
 8005d94:	e7fd      	b.n	8005d92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d06f      	beq.n	8005e7c <pvPortMalloc+0x154>
 8005d9c:	4b45      	ldr	r3, [pc, #276]	@ (8005eb4 <pvPortMalloc+0x18c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d86a      	bhi.n	8005e7c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005da6:	4b44      	ldr	r3, [pc, #272]	@ (8005eb8 <pvPortMalloc+0x190>)
 8005da8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005daa:	4b43      	ldr	r3, [pc, #268]	@ (8005eb8 <pvPortMalloc+0x190>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005db0:	e004      	b.n	8005dbc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d903      	bls.n	8005dce <pvPortMalloc+0xa6>
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1f1      	bne.n	8005db2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005dce:	4b37      	ldr	r3, [pc, #220]	@ (8005eac <pvPortMalloc+0x184>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d051      	beq.n	8005e7c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2208      	movs	r2, #8
 8005dde:	4413      	add	r3, r2
 8005de0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	1ad2      	subs	r2, r2, r3
 8005df2:	2308      	movs	r3, #8
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d920      	bls.n	8005e3c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4413      	add	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00b      	beq.n	8005e24 <pvPortMalloc+0xfc>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	613b      	str	r3, [r7, #16]
}
 8005e1e:	bf00      	nop
 8005e20:	bf00      	nop
 8005e22:	e7fd      	b.n	8005e20 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	1ad2      	subs	r2, r2, r3
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e36:	69b8      	ldr	r0, [r7, #24]
 8005e38:	f000 f90a 	bl	8006050 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb4 <pvPortMalloc+0x18c>)
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	4a1b      	ldr	r2, [pc, #108]	@ (8005eb4 <pvPortMalloc+0x18c>)
 8005e48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8005eb4 <pvPortMalloc+0x18c>)
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8005ebc <pvPortMalloc+0x194>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d203      	bcs.n	8005e5e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e56:	4b17      	ldr	r3, [pc, #92]	@ (8005eb4 <pvPortMalloc+0x18c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a18      	ldr	r2, [pc, #96]	@ (8005ebc <pvPortMalloc+0x194>)
 8005e5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	4b13      	ldr	r3, [pc, #76]	@ (8005eb0 <pvPortMalloc+0x188>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	431a      	orrs	r2, r3
 8005e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6e:	2200      	movs	r2, #0
 8005e70:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e72:	4b13      	ldr	r3, [pc, #76]	@ (8005ec0 <pvPortMalloc+0x198>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3301      	adds	r3, #1
 8005e78:	4a11      	ldr	r2, [pc, #68]	@ (8005ec0 <pvPortMalloc+0x198>)
 8005e7a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e7c:	f7ff fa50 	bl	8005320 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00b      	beq.n	8005ea2 <pvPortMalloc+0x17a>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	60fb      	str	r3, [r7, #12]
}
 8005e9c:	bf00      	nop
 8005e9e:	bf00      	nop
 8005ea0:	e7fd      	b.n	8005e9e <pvPortMalloc+0x176>
	return pvReturn;
 8005ea2:	69fb      	ldr	r3, [r7, #28]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3728      	adds	r7, #40	@ 0x28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	200042d0 	.word	0x200042d0
 8005eb0:	200042e4 	.word	0x200042e4
 8005eb4:	200042d4 	.word	0x200042d4
 8005eb8:	200042c8 	.word	0x200042c8
 8005ebc:	200042d8 	.word	0x200042d8
 8005ec0:	200042dc 	.word	0x200042dc

08005ec4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d04f      	beq.n	8005f76 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ed6:	2308      	movs	r3, #8
 8005ed8:	425b      	negs	r3, r3
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4413      	add	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	4b25      	ldr	r3, [pc, #148]	@ (8005f80 <vPortFree+0xbc>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4013      	ands	r3, r2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10b      	bne.n	8005f0a <vPortFree+0x46>
	__asm volatile
 8005ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	60fb      	str	r3, [r7, #12]
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop
 8005f08:	e7fd      	b.n	8005f06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00b      	beq.n	8005f2a <vPortFree+0x66>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	60bb      	str	r3, [r7, #8]
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop
 8005f28:	e7fd      	b.n	8005f26 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	4b14      	ldr	r3, [pc, #80]	@ (8005f80 <vPortFree+0xbc>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4013      	ands	r3, r2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01e      	beq.n	8005f76 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d11a      	bne.n	8005f76 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	4b0e      	ldr	r3, [pc, #56]	@ (8005f80 <vPortFree+0xbc>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	401a      	ands	r2, r3
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f50:	f7ff f9d8 	bl	8005304 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	4b0a      	ldr	r3, [pc, #40]	@ (8005f84 <vPortFree+0xc0>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	4a09      	ldr	r2, [pc, #36]	@ (8005f84 <vPortFree+0xc0>)
 8005f60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f62:	6938      	ldr	r0, [r7, #16]
 8005f64:	f000 f874 	bl	8006050 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f68:	4b07      	ldr	r3, [pc, #28]	@ (8005f88 <vPortFree+0xc4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	4a06      	ldr	r2, [pc, #24]	@ (8005f88 <vPortFree+0xc4>)
 8005f70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f72:	f7ff f9d5 	bl	8005320 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f76:	bf00      	nop
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	200042e4 	.word	0x200042e4
 8005f84:	200042d4 	.word	0x200042d4
 8005f88:	200042e0 	.word	0x200042e0

08005f8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f92:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005f96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f98:	4b27      	ldr	r3, [pc, #156]	@ (8006038 <prvHeapInit+0xac>)
 8005f9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f003 0307 	and.w	r3, r3, #7
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00c      	beq.n	8005fc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3307      	adds	r3, #7
 8005faa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 0307 	bic.w	r3, r3, #7
 8005fb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	4a1f      	ldr	r2, [pc, #124]	@ (8006038 <prvHeapInit+0xac>)
 8005fbc:	4413      	add	r3, r2
 8005fbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800603c <prvHeapInit+0xb0>)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005fca:	4b1c      	ldr	r3, [pc, #112]	@ (800603c <prvHeapInit+0xb0>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005fd8:	2208      	movs	r2, #8
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1a9b      	subs	r3, r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0307 	bic.w	r3, r3, #7
 8005fe6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4a15      	ldr	r2, [pc, #84]	@ (8006040 <prvHeapInit+0xb4>)
 8005fec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005fee:	4b14      	ldr	r3, [pc, #80]	@ (8006040 <prvHeapInit+0xb4>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ff6:	4b12      	ldr	r3, [pc, #72]	@ (8006040 <prvHeapInit+0xb4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	1ad2      	subs	r2, r2, r3
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800600c:	4b0c      	ldr	r3, [pc, #48]	@ (8006040 <prvHeapInit+0xb4>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	4a0a      	ldr	r2, [pc, #40]	@ (8006044 <prvHeapInit+0xb8>)
 800601a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	4a09      	ldr	r2, [pc, #36]	@ (8006048 <prvHeapInit+0xbc>)
 8006022:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006024:	4b09      	ldr	r3, [pc, #36]	@ (800604c <prvHeapInit+0xc0>)
 8006026:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800602a:	601a      	str	r2, [r3, #0]
}
 800602c:	bf00      	nop
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	200006c8 	.word	0x200006c8
 800603c:	200042c8 	.word	0x200042c8
 8006040:	200042d0 	.word	0x200042d0
 8006044:	200042d8 	.word	0x200042d8
 8006048:	200042d4 	.word	0x200042d4
 800604c:	200042e4 	.word	0x200042e4

08006050 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006058:	4b28      	ldr	r3, [pc, #160]	@ (80060fc <prvInsertBlockIntoFreeList+0xac>)
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	e002      	b.n	8006064 <prvInsertBlockIntoFreeList+0x14>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	429a      	cmp	r2, r3
 800606c:	d8f7      	bhi.n	800605e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	4413      	add	r3, r2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	429a      	cmp	r2, r3
 800607e:	d108      	bne.n	8006092 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	441a      	add	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	441a      	add	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d118      	bne.n	80060d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4b15      	ldr	r3, [pc, #84]	@ (8006100 <prvInsertBlockIntoFreeList+0xb0>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d00d      	beq.n	80060ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	441a      	add	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	e008      	b.n	80060e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006100 <prvInsertBlockIntoFreeList+0xb0>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	e003      	b.n	80060e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d002      	beq.n	80060ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060ee:	bf00      	nop
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	200042c8 	.word	0x200042c8
 8006100:	200042d0 	.word	0x200042d0

08006104 <memset>:
 8006104:	4402      	add	r2, r0
 8006106:	4603      	mov	r3, r0
 8006108:	4293      	cmp	r3, r2
 800610a:	d100      	bne.n	800610e <memset+0xa>
 800610c:	4770      	bx	lr
 800610e:	f803 1b01 	strb.w	r1, [r3], #1
 8006112:	e7f9      	b.n	8006108 <memset+0x4>

08006114 <__libc_init_array>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	4d0d      	ldr	r5, [pc, #52]	@ (800614c <__libc_init_array+0x38>)
 8006118:	4c0d      	ldr	r4, [pc, #52]	@ (8006150 <__libc_init_array+0x3c>)
 800611a:	1b64      	subs	r4, r4, r5
 800611c:	10a4      	asrs	r4, r4, #2
 800611e:	2600      	movs	r6, #0
 8006120:	42a6      	cmp	r6, r4
 8006122:	d109      	bne.n	8006138 <__libc_init_array+0x24>
 8006124:	4d0b      	ldr	r5, [pc, #44]	@ (8006154 <__libc_init_array+0x40>)
 8006126:	4c0c      	ldr	r4, [pc, #48]	@ (8006158 <__libc_init_array+0x44>)
 8006128:	f000 f818 	bl	800615c <_init>
 800612c:	1b64      	subs	r4, r4, r5
 800612e:	10a4      	asrs	r4, r4, #2
 8006130:	2600      	movs	r6, #0
 8006132:	42a6      	cmp	r6, r4
 8006134:	d105      	bne.n	8006142 <__libc_init_array+0x2e>
 8006136:	bd70      	pop	{r4, r5, r6, pc}
 8006138:	f855 3b04 	ldr.w	r3, [r5], #4
 800613c:	4798      	blx	r3
 800613e:	3601      	adds	r6, #1
 8006140:	e7ee      	b.n	8006120 <__libc_init_array+0xc>
 8006142:	f855 3b04 	ldr.w	r3, [r5], #4
 8006146:	4798      	blx	r3
 8006148:	3601      	adds	r6, #1
 800614a:	e7f2      	b.n	8006132 <__libc_init_array+0x1e>
 800614c:	08006240 	.word	0x08006240
 8006150:	08006240 	.word	0x08006240
 8006154:	08006240 	.word	0x08006240
 8006158:	08006244 	.word	0x08006244

0800615c <_init>:
 800615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615e:	bf00      	nop
 8006160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006162:	bc08      	pop	{r3}
 8006164:	469e      	mov	lr, r3
 8006166:	4770      	bx	lr

08006168 <_fini>:
 8006168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616a:	bf00      	nop
 800616c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616e:	bc08      	pop	{r3}
 8006170:	469e      	mov	lr, r3
 8006172:	4770      	bx	lr
