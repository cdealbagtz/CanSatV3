
CanSat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08006a54  08006a54  00007a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b18  08006b18  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006b18  08006b18  00007b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b20  08006b20  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b20  08006b20  00007b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b24  08006b24  00007b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006b28  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004304  20000010  08006b38  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004314  08006b38  00008314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126a2  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000343c  00000000  00000000  0001a6e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0001db20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e52  00000000  00000000  0001edd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018db0  00000000  00000000  0001fc2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162b4  00000000  00000000  000389da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096de2  00000000  00000000  0004ec8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5a70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c10  00000000  00000000  000e5ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ea6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a3c 	.word	0x08006a3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006a3c 	.word	0x08006a3c

080001e0 <__aeabi_ldivmod>:
 80001e0:	b97b      	cbnz	r3, 8000202 <__aeabi_ldivmod+0x22>
 80001e2:	b972      	cbnz	r2, 8000202 <__aeabi_ldivmod+0x22>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bfbe      	ittt	lt
 80001e8:	2000      	movlt	r0, #0
 80001ea:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80001ee:	e006      	blt.n	80001fe <__aeabi_ldivmod+0x1e>
 80001f0:	bf08      	it	eq
 80001f2:	2800      	cmpeq	r0, #0
 80001f4:	bf1c      	itt	ne
 80001f6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80001fa:	f04f 30ff 	movne.w	r0, #4294967295
 80001fe:	f000 b9b5 	b.w	800056c <__aeabi_idiv0>
 8000202:	f1ad 0c08 	sub.w	ip, sp, #8
 8000206:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020a:	2900      	cmp	r1, #0
 800020c:	db09      	blt.n	8000222 <__aeabi_ldivmod+0x42>
 800020e:	2b00      	cmp	r3, #0
 8000210:	db1a      	blt.n	8000248 <__aeabi_ldivmod+0x68>
 8000212:	f000 f84d 	bl	80002b0 <__udivmoddi4>
 8000216:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021e:	b004      	add	sp, #16
 8000220:	4770      	bx	lr
 8000222:	4240      	negs	r0, r0
 8000224:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000228:	2b00      	cmp	r3, #0
 800022a:	db1b      	blt.n	8000264 <__aeabi_ldivmod+0x84>
 800022c:	f000 f840 	bl	80002b0 <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4240      	negs	r0, r0
 800023c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000240:	4252      	negs	r2, r2
 8000242:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000246:	4770      	bx	lr
 8000248:	4252      	negs	r2, r2
 800024a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800024e:	f000 f82f 	bl	80002b0 <__udivmoddi4>
 8000252:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000256:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025a:	b004      	add	sp, #16
 800025c:	4240      	negs	r0, r0
 800025e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000262:	4770      	bx	lr
 8000264:	4252      	negs	r2, r2
 8000266:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026a:	f000 f821 	bl	80002b0 <__udivmoddi4>
 800026e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000272:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000276:	b004      	add	sp, #16
 8000278:	4252      	negs	r2, r2
 800027a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <task_init_1ms>:

/**
  * @fn  	task_init_1ms
  * @brief  Inicializaciones para tarea de 1 milisegundo
  */
void task_init_1ms(void){
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <task_1ms>:

/**
  * @fn  	task_1ms
  * @brief  Ejecucion de tareas de 1 milisegundo
  */
void task_1ms(void){
 800057e:	b580      	push	{r7, lr}
 8000580:	af00      	add	r7, sp, #0
	NRF24_StateMachine();
 8000582:	f001 fa8b 	bl	8001a9c <NRF24_StateMachine>
	BMP280_calculate();
 8000586:	f000 fcb3 	bl	8000ef0 <BMP280_calculate>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}

0800058e <task_init_10ms>:

/**
  * @fn  	task_init_10ms
  * @brief  Inicializaciones para tarea de 10 milisegundos
  */
void task_init_10ms(void){
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <task_10ms>:

/**
  * @fn  	task_10ms
  * @brief  Ejecucion de tareas de 10 milisegundos
  */
void task_10ms(void){
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <task_init_100ms>:

/**
  * @fn  	task_init_100ms
  * @brief  Inicializaciones para tarea de 100 milisegundos
  */
void task_init_100ms(void){
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <task_100ms>:

/**
  * @fn  	task_100ms
  * @brief  Ejecucion de tareas de 100 milisegundos
  */
void task_100ms(void){
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <task_init_1000ms>:

/**
  * @fn  	task_init_1000ms
  * @brief  Inicializaciones para tarea de 1000 milisegundos
  */
void task_init_1000ms(void){
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0

}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <task_1000ms>:

/**
  * @fn  	task_1000ms
  * @brief  Ejecucion de tareas de 1000 milisegundos
  */
void task_1000ms(void){
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <BMP280_write>:

int32_t T_raw, P_raw, t_fine,Temperature, Altitud;
uint32_t Presure;


void BMP280_write(uint8_t Address, uint8_t Data){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	460a      	mov	r2, r1
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	4613      	mov	r3, r2
 80005f2:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005fa:	480f      	ldr	r0, [pc, #60]	@ (8000638 <BMP280_write+0x54>)
 80005fc:	f002 fd82 	bl	8003104 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000606:	b2db      	uxtb	r3, r3
 8000608:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800060a:	1df9      	adds	r1, r7, #7
 800060c:	2364      	movs	r3, #100	@ 0x64
 800060e:	2201      	movs	r2, #1
 8000610:	480a      	ldr	r0, [pc, #40]	@ (800063c <BMP280_write+0x58>)
 8000612:	f003 fad0 	bl	8003bb6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8000616:	1db9      	adds	r1, r7, #6
 8000618:	2364      	movs	r3, #100	@ 0x64
 800061a:	2201      	movs	r2, #1
 800061c:	4807      	ldr	r0, [pc, #28]	@ (800063c <BMP280_write+0x58>)
 800061e:	f003 faca 	bl	8003bb6 <HAL_SPI_Transmit>

	BMP280_unselect();
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000628:	4803      	ldr	r0, [pc, #12]	@ (8000638 <BMP280_write+0x54>)
 800062a:	f002 fd6b 	bl	8003104 <HAL_GPIO_WritePin>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40020000 	.word	0x40020000
 800063c:	200003fc 	.word	0x200003fc

08000640 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000650:	b2db      	uxtb	r3, r3
 8000652:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800065a:	480e      	ldr	r0, [pc, #56]	@ (8000694 <BMP280_read+0x54>)
 800065c:	f002 fd52 	bl	8003104 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8000660:	f107 010f 	add.w	r1, r7, #15
 8000664:	2364      	movs	r3, #100	@ 0x64
 8000666:	2201      	movs	r2, #1
 8000668:	480b      	ldr	r0, [pc, #44]	@ (8000698 <BMP280_read+0x58>)
 800066a:	f003 faa4 	bl	8003bb6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800066e:	f107 010f 	add.w	r1, r7, #15
 8000672:	2364      	movs	r3, #100	@ 0x64
 8000674:	2201      	movs	r2, #1
 8000676:	4808      	ldr	r0, [pc, #32]	@ (8000698 <BMP280_read+0x58>)
 8000678:	f003 fbe0 	bl	8003e3c <HAL_SPI_Receive>
	BMP280_unselect();
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000682:	4804      	ldr	r0, [pc, #16]	@ (8000694 <BMP280_read+0x54>)
 8000684:	f002 fd3e 	bl	8003104 <HAL_GPIO_WritePin>

	return Buffer;
 8000688:	7bfb      	ldrb	r3, [r7, #15]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40020000 	.word	0x40020000
 8000698:	200003fc 	.word	0x200003fc

0800069c <BMP280_config>:

void BMP280_config(void){
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 80006a0:	2157      	movs	r1, #87	@ 0x57
 80006a2:	20f4      	movs	r0, #244	@ 0xf4
 80006a4:	f7ff ff9e 	bl	80005e4 <BMP280_write>
	BMP280_write(config, 0x10);
 80006a8:	2110      	movs	r1, #16
 80006aa:	20f5      	movs	r0, #245	@ 0xf5
 80006ac:	f7ff ff9a 	bl	80005e4 <BMP280_write>
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <BMP280_calibrationData>:
	uint8_t Buffer   = BMP280_read(status);
	BMP280_im_update = (Buffer&0x01);
	BMP280_measuring = (Buffer&0x08)>>3;
}

void BMP280_calibrationData(void){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 80006ba:	2388      	movs	r3, #136	@ 0x88
 80006bc:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]
	BMP280_select();
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006d8:	4843      	ldr	r0, [pc, #268]	@ (80007e8 <BMP280_calibrationData+0x134>)
 80006da:	f002 fd13 	bl	8003104 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80006de:	f107 011f 	add.w	r1, r7, #31
 80006e2:	2364      	movs	r3, #100	@ 0x64
 80006e4:	2201      	movs	r2, #1
 80006e6:	4841      	ldr	r0, [pc, #260]	@ (80007ec <BMP280_calibrationData+0x138>)
 80006e8:	f003 fa65 	bl	8003bb6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 80006ec:	1d39      	adds	r1, r7, #4
 80006ee:	2364      	movs	r3, #100	@ 0x64
 80006f0:	2218      	movs	r2, #24
 80006f2:	483e      	ldr	r0, [pc, #248]	@ (80007ec <BMP280_calibrationData+0x138>)
 80006f4:	f003 fba2 	bl	8003e3c <HAL_SPI_Receive>
	BMP280_unselect();
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006fe:	483a      	ldr	r0, [pc, #232]	@ (80007e8 <BMP280_calibrationData+0x134>)
 8000700:	f002 fd00 	bl	8003104 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8000704:	797b      	ldrb	r3, [r7, #5]
 8000706:	021b      	lsls	r3, r3, #8
 8000708:	b21a      	sxth	r2, r3
 800070a:	793b      	ldrb	r3, [r7, #4]
 800070c:	b21b      	sxth	r3, r3
 800070e:	4313      	orrs	r3, r2
 8000710:	b21b      	sxth	r3, r3
 8000712:	b29a      	uxth	r2, r3
 8000714:	4b36      	ldr	r3, [pc, #216]	@ (80007f0 <BMP280_calibrationData+0x13c>)
 8000716:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	b21a      	sxth	r2, r3
 800071e:	79bb      	ldrb	r3, [r7, #6]
 8000720:	b21b      	sxth	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	b21a      	sxth	r2, r3
 8000726:	4b33      	ldr	r3, [pc, #204]	@ (80007f4 <BMP280_calibrationData+0x140>)
 8000728:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 800072a:	7a7b      	ldrb	r3, [r7, #9]
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	b21a      	sxth	r2, r3
 8000730:	7a3b      	ldrb	r3, [r7, #8]
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21a      	sxth	r2, r3
 8000738:	4b2f      	ldr	r3, [pc, #188]	@ (80007f8 <BMP280_calibrationData+0x144>)
 800073a:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	021b      	lsls	r3, r3, #8
 8000740:	b21a      	sxth	r2, r3
 8000742:	7abb      	ldrb	r3, [r7, #10]
 8000744:	b21b      	sxth	r3, r3
 8000746:	4313      	orrs	r3, r2
 8000748:	b21b      	sxth	r3, r3
 800074a:	b29a      	uxth	r2, r3
 800074c:	4b2b      	ldr	r3, [pc, #172]	@ (80007fc <BMP280_calibrationData+0x148>)
 800074e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8000750:	7b7b      	ldrb	r3, [r7, #13]
 8000752:	021b      	lsls	r3, r3, #8
 8000754:	b21a      	sxth	r2, r3
 8000756:	7b3b      	ldrb	r3, [r7, #12]
 8000758:	b21b      	sxth	r3, r3
 800075a:	4313      	orrs	r3, r2
 800075c:	b21a      	sxth	r2, r3
 800075e:	4b28      	ldr	r3, [pc, #160]	@ (8000800 <BMP280_calibrationData+0x14c>)
 8000760:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	021b      	lsls	r3, r3, #8
 8000766:	b21a      	sxth	r2, r3
 8000768:	7bbb      	ldrb	r3, [r7, #14]
 800076a:	b21b      	sxth	r3, r3
 800076c:	4313      	orrs	r3, r2
 800076e:	b21a      	sxth	r2, r3
 8000770:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <BMP280_calibrationData+0x150>)
 8000772:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000774:	7c7b      	ldrb	r3, [r7, #17]
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	b21a      	sxth	r2, r3
 800077a:	7c3b      	ldrb	r3, [r7, #16]
 800077c:	b21b      	sxth	r3, r3
 800077e:	4313      	orrs	r3, r2
 8000780:	b21a      	sxth	r2, r3
 8000782:	4b21      	ldr	r3, [pc, #132]	@ (8000808 <BMP280_calibrationData+0x154>)
 8000784:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000786:	7cfb      	ldrb	r3, [r7, #19]
 8000788:	021b      	lsls	r3, r3, #8
 800078a:	b21a      	sxth	r2, r3
 800078c:	7cbb      	ldrb	r3, [r7, #18]
 800078e:	b21b      	sxth	r3, r3
 8000790:	4313      	orrs	r3, r2
 8000792:	b21a      	sxth	r2, r3
 8000794:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <BMP280_calibrationData+0x158>)
 8000796:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000798:	7d7b      	ldrb	r3, [r7, #21]
 800079a:	021b      	lsls	r3, r3, #8
 800079c:	b21a      	sxth	r2, r3
 800079e:	7d3b      	ldrb	r3, [r7, #20]
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <BMP280_calibrationData+0x15c>)
 80007a8:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 80007aa:	7dfb      	ldrb	r3, [r7, #23]
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	b21a      	sxth	r2, r3
 80007b0:	7dbb      	ldrb	r3, [r7, #22]
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	4b16      	ldr	r3, [pc, #88]	@ (8000814 <BMP280_calibrationData+0x160>)
 80007ba:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 80007bc:	7e7b      	ldrb	r3, [r7, #25]
 80007be:	021b      	lsls	r3, r3, #8
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	7e3b      	ldrb	r3, [r7, #24]
 80007c4:	b21b      	sxth	r3, r3
 80007c6:	4313      	orrs	r3, r2
 80007c8:	b21a      	sxth	r2, r3
 80007ca:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <BMP280_calibrationData+0x164>)
 80007cc:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 80007ce:	7efb      	ldrb	r3, [r7, #27]
 80007d0:	021b      	lsls	r3, r3, #8
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	7ebb      	ldrb	r3, [r7, #26]
 80007d6:	b21b      	sxth	r3, r3
 80007d8:	4313      	orrs	r3, r2
 80007da:	b21a      	sxth	r2, r3
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <BMP280_calibrationData+0x168>)
 80007de:	801a      	strh	r2, [r3, #0]
}
 80007e0:	bf00      	nop
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40020000 	.word	0x40020000
 80007ec:	200003fc 	.word	0x200003fc
 80007f0:	2000002e 	.word	0x2000002e
 80007f4:	20000032 	.word	0x20000032
 80007f8:	20000034 	.word	0x20000034
 80007fc:	20000030 	.word	0x20000030
 8000800:	20000036 	.word	0x20000036
 8000804:	20000038 	.word	0x20000038
 8000808:	2000003a 	.word	0x2000003a
 800080c:	2000003c 	.word	0x2000003c
 8000810:	2000003e 	.word	0x2000003e
 8000814:	20000040 	.word	0x20000040
 8000818:	20000042 	.word	0x20000042
 800081c:	20000044 	.word	0x20000044

08000820 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8000826:	23f7      	movs	r3, #247	@ 0xf7
 8000828:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	2300      	movs	r3, #0
 8000830:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000838:	4817      	ldr	r0, [pc, #92]	@ (8000898 <BMP280_readRawValues+0x78>)
 800083a:	f002 fc63 	bl	8003104 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800083e:	1df9      	adds	r1, r7, #7
 8000840:	2364      	movs	r3, #100	@ 0x64
 8000842:	2201      	movs	r2, #1
 8000844:	4815      	ldr	r0, [pc, #84]	@ (800089c <BMP280_readRawValues+0x7c>)
 8000846:	f003 f9b6 	bl	8003bb6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 800084a:	4639      	mov	r1, r7
 800084c:	2364      	movs	r3, #100	@ 0x64
 800084e:	2206      	movs	r2, #6
 8000850:	4812      	ldr	r0, [pc, #72]	@ (800089c <BMP280_readRawValues+0x7c>)
 8000852:	f003 faf3 	bl	8003e3c <HAL_SPI_Receive>
	BMP280_unselect();
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800085c:	480e      	ldr	r0, [pc, #56]	@ (8000898 <BMP280_readRawValues+0x78>)
 800085e:	f002 fc51 	bl	8003104 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8000862:	783b      	ldrb	r3, [r7, #0]
 8000864:	031a      	lsls	r2, r3, #12
 8000866:	787b      	ldrb	r3, [r7, #1]
 8000868:	011b      	lsls	r3, r3, #4
 800086a:	4313      	orrs	r3, r2
 800086c:	78ba      	ldrb	r2, [r7, #2]
 800086e:	0912      	lsrs	r2, r2, #4
 8000870:	b2d2      	uxtb	r2, r2
 8000872:	4313      	orrs	r3, r2
 8000874:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <BMP280_readRawValues+0x80>)
 8000876:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	031a      	lsls	r2, r3, #12
 800087c:	793b      	ldrb	r3, [r7, #4]
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	4313      	orrs	r3, r2
 8000882:	797a      	ldrb	r2, [r7, #5]
 8000884:	0912      	lsrs	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	4313      	orrs	r3, r2
 800088a:	4a06      	ldr	r2, [pc, #24]	@ (80008a4 <BMP280_readRawValues+0x84>)
 800088c:	6013      	str	r3, [r2, #0]
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40020000 	.word	0x40020000
 800089c:	200003fc 	.word	0x200003fc
 80008a0:	2000004c 	.word	0x2000004c
 80008a4:	20000048 	.word	0x20000048

080008a8 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 80008a8:	b480      	push	{r7}
 80008aa:	b087      	sub	sp, #28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <BMP280_measureT+0x74>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	10da      	asrs	r2, r3, #3
 80008b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <BMP280_measureT+0x78>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	4a19      	ldr	r2, [pc, #100]	@ (8000924 <BMP280_measureT+0x7c>)
 80008c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80008c4:	fb02 f303 	mul.w	r3, r2, r3
 80008c8:	12db      	asrs	r3, r3, #11
 80008ca:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	111b      	asrs	r3, r3, #4
 80008d0:	4a13      	ldr	r2, [pc, #76]	@ (8000920 <BMP280_measureT+0x78>)
 80008d2:	8812      	ldrh	r2, [r2, #0]
 80008d4:	1a9b      	subs	r3, r3, r2
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	1112      	asrs	r2, r2, #4
 80008da:	4911      	ldr	r1, [pc, #68]	@ (8000920 <BMP280_measureT+0x78>)
 80008dc:	8809      	ldrh	r1, [r1, #0]
 80008de:	1a52      	subs	r2, r2, r1
 80008e0:	fb02 f303 	mul.w	r3, r2, r3
 80008e4:	131b      	asrs	r3, r3, #12
 80008e6:	4a10      	ldr	r2, [pc, #64]	@ (8000928 <BMP280_measureT+0x80>)
 80008e8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80008ec:	fb02 f303 	mul.w	r3, r2, r3
 80008f0:	139b      	asrs	r3, r3, #14
 80008f2:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	4413      	add	r3, r2
 80008fa:	4a0c      	ldr	r2, [pc, #48]	@ (800092c <BMP280_measureT+0x84>)
 80008fc:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <BMP280_measureT+0x84>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	4613      	mov	r3, r2
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	4413      	add	r3, r2
 8000908:	3380      	adds	r3, #128	@ 0x80
 800090a:	121b      	asrs	r3, r3, #8
 800090c:	60fb      	str	r3, [r7, #12]
	return T;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	4618      	mov	r0, r3
 8000912:	371c      	adds	r7, #28
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	20000048 	.word	0x20000048
 8000920:	2000002e 	.word	0x2000002e
 8000924:	20000032 	.word	0x20000032
 8000928:	20000034 	.word	0x20000034
 800092c:	20000050 	.word	0x20000050

08000930 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8000930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000934:	b0ca      	sub	sp, #296	@ 0x128
 8000936:	af00      	add	r7, sp, #0
 8000938:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 800093c:	4baf      	ldr	r3, [pc, #700]	@ (8000bfc <BMP280_measureP+0x2cc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	17da      	asrs	r2, r3, #31
 8000942:	461c      	mov	r4, r3
 8000944:	4615      	mov	r5, r2
 8000946:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800094a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800094e:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8000952:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000956:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800095a:	fb03 f102 	mul.w	r1, r3, r2
 800095e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000962:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000966:	fb02 f303 	mul.w	r3, r2, r3
 800096a:	18ca      	adds	r2, r1, r3
 800096c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000970:	fba3 8903 	umull	r8, r9, r3, r3
 8000974:	eb02 0309 	add.w	r3, r2, r9
 8000978:	4699      	mov	r9, r3
 800097a:	4ba1      	ldr	r3, [pc, #644]	@ (8000c00 <BMP280_measureP+0x2d0>)
 800097c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000980:	b21b      	sxth	r3, r3
 8000982:	17da      	asrs	r2, r3, #31
 8000984:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000988:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800098c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000990:	4603      	mov	r3, r0
 8000992:	fb03 f209 	mul.w	r2, r3, r9
 8000996:	460b      	mov	r3, r1
 8000998:	fb08 f303 	mul.w	r3, r8, r3
 800099c:	4413      	add	r3, r2
 800099e:	4602      	mov	r2, r0
 80009a0:	fba8 1202 	umull	r1, r2, r8, r2
 80009a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80009a8:	460a      	mov	r2, r1
 80009aa:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80009ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80009b2:	4413      	add	r3, r2
 80009b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80009b8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80009bc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80009c0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80009c4:	4b8f      	ldr	r3, [pc, #572]	@ (8000c04 <BMP280_measureP+0x2d4>)
 80009c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	17da      	asrs	r2, r3, #31
 80009ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80009d2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80009d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009da:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80009de:	462a      	mov	r2, r5
 80009e0:	fb02 f203 	mul.w	r2, r2, r3
 80009e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80009e8:	4621      	mov	r1, r4
 80009ea:	fb01 f303 	mul.w	r3, r1, r3
 80009ee:	441a      	add	r2, r3
 80009f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009f4:	4621      	mov	r1, r4
 80009f6:	fba3 1301 	umull	r1, r3, r3, r1
 80009fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80009fe:	460b      	mov	r3, r1
 8000a00:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000a08:	18d3      	adds	r3, r2, r3
 8000a0a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	f04f 0100 	mov.w	r1, #0
 8000a16:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000a1a:	462b      	mov	r3, r5
 8000a1c:	0459      	lsls	r1, r3, #17
 8000a1e:	4623      	mov	r3, r4
 8000a20:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000a24:	4623      	mov	r3, r4
 8000a26:	0458      	lsls	r0, r3, #17
 8000a28:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000a2c:	1814      	adds	r4, r2, r0
 8000a2e:	643c      	str	r4, [r7, #64]	@ 0x40
 8000a30:	414b      	adcs	r3, r1
 8000a32:	647b      	str	r3, [r7, #68]	@ 0x44
 8000a34:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000a38:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000a3c:	4b72      	ldr	r3, [pc, #456]	@ (8000c08 <BMP280_measureP+0x2d8>)
 8000a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a42:	b21b      	sxth	r3, r3
 8000a44:	17da      	asrs	r2, r3, #31
 8000a46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000a4a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000a4e:	f04f 0000 	mov.w	r0, #0
 8000a52:	f04f 0100 	mov.w	r1, #0
 8000a56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000a5a:	00d9      	lsls	r1, r3, #3
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000a62:	1814      	adds	r4, r2, r0
 8000a64:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000a66:	414b      	adcs	r3, r1
 8000a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a6a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000a6e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000a72:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000a76:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a7a:	fb03 f102 	mul.w	r1, r3, r2
 8000a7e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000a82:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a86:	fb02 f303 	mul.w	r3, r2, r3
 8000a8a:	18ca      	adds	r2, r1, r3
 8000a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a90:	fba3 1303 	umull	r1, r3, r3, r3
 8000a94:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000a98:	460b      	mov	r3, r1
 8000a9a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000aa2:	18d3      	adds	r3, r2, r3
 8000aa4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000aa8:	4b58      	ldr	r3, [pc, #352]	@ (8000c0c <BMP280_measureP+0x2dc>)
 8000aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	17da      	asrs	r2, r3, #31
 8000ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000ab6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000aba:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000abe:	462b      	mov	r3, r5
 8000ac0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000ac4:	4642      	mov	r2, r8
 8000ac6:	fb02 f203 	mul.w	r2, r2, r3
 8000aca:	464b      	mov	r3, r9
 8000acc:	4621      	mov	r1, r4
 8000ace:	fb01 f303 	mul.w	r3, r1, r3
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4622      	mov	r2, r4
 8000ad6:	4641      	mov	r1, r8
 8000ad8:	fba2 1201 	umull	r1, r2, r2, r1
 8000adc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000ae0:	460a      	mov	r2, r1
 8000ae2:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000ae6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000aea:	4413      	add	r3, r2
 8000aec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	f04f 0100 	mov.w	r1, #0
 8000af8:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000afc:	4623      	mov	r3, r4
 8000afe:	0a18      	lsrs	r0, r3, #8
 8000b00:	462b      	mov	r3, r5
 8000b02:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000b06:	462b      	mov	r3, r5
 8000b08:	1219      	asrs	r1, r3, #8
 8000b0a:	4b41      	ldr	r3, [pc, #260]	@ (8000c10 <BMP280_measureP+0x2e0>)
 8000b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b10:	b21b      	sxth	r3, r3
 8000b12:	17da      	asrs	r2, r3, #31
 8000b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000b18:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000b1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b20:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000b24:	464a      	mov	r2, r9
 8000b26:	fb02 f203 	mul.w	r2, r2, r3
 8000b2a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000b2e:	4644      	mov	r4, r8
 8000b30:	fb04 f303 	mul.w	r3, r4, r3
 8000b34:	441a      	add	r2, r3
 8000b36:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b3a:	4644      	mov	r4, r8
 8000b3c:	fba3 4304 	umull	r4, r3, r3, r4
 8000b40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000b44:	4623      	mov	r3, r4
 8000b46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000b4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000b4e:	18d3      	adds	r3, r2, r3
 8000b50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000b54:	f04f 0200 	mov.w	r2, #0
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000b60:	464c      	mov	r4, r9
 8000b62:	0323      	lsls	r3, r4, #12
 8000b64:	4644      	mov	r4, r8
 8000b66:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000b6a:	4644      	mov	r4, r8
 8000b6c:	0322      	lsls	r2, r4, #12
 8000b6e:	1884      	adds	r4, r0, r2
 8000b70:	633c      	str	r4, [r7, #48]	@ 0x30
 8000b72:	eb41 0303 	adc.w	r3, r1, r3
 8000b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8000b78:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000b7c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000b80:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000b84:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000b88:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000b8c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000b90:	4b20      	ldr	r3, [pc, #128]	@ (8000c14 <BMP280_measureP+0x2e4>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	2200      	movs	r2, #0
 8000b98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000b9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000ba0:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000ba4:	462b      	mov	r3, r5
 8000ba6:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000baa:	4642      	mov	r2, r8
 8000bac:	fb02 f203 	mul.w	r2, r2, r3
 8000bb0:	464b      	mov	r3, r9
 8000bb2:	4621      	mov	r1, r4
 8000bb4:	fb01 f303 	mul.w	r3, r1, r3
 8000bb8:	4413      	add	r3, r2
 8000bba:	4622      	mov	r2, r4
 8000bbc:	4641      	mov	r1, r8
 8000bbe:	fba2 1201 	umull	r1, r2, r2, r1
 8000bc2:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000bc6:	460a      	mov	r2, r1
 8000bc8:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000bcc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000bd0:	4413      	add	r3, r2
 8000bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000bd6:	f04f 0200 	mov.w	r2, #0
 8000bda:	f04f 0300 	mov.w	r3, #0
 8000bde:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000be2:	4629      	mov	r1, r5
 8000be4:	104a      	asrs	r2, r1, #1
 8000be6:	4629      	mov	r1, r5
 8000be8:	17cb      	asrs	r3, r1, #31
 8000bea:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000bee:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	d110      	bne.n	8000c18 <BMP280_measureP+0x2e8>
	{
	return 0; // avoid exception caused by division by zero
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e154      	b.n	8000ea4 <BMP280_measureP+0x574>
 8000bfa:	bf00      	nop
 8000bfc:	20000050 	.word	0x20000050
 8000c00:	2000003e 	.word	0x2000003e
 8000c04:	2000003c 	.word	0x2000003c
 8000c08:	2000003a 	.word	0x2000003a
 8000c0c:	20000038 	.word	0x20000038
 8000c10:	20000036 	.word	0x20000036
 8000c14:	20000030 	.word	0x20000030
	}
	p = 1048576-adc_P;
 8000c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000c1c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000c20:	17da      	asrs	r2, r3, #31
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000c26:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000c2a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000c2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000c32:	105b      	asrs	r3, r3, #1
 8000c34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000c38:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000c3c:	07db      	lsls	r3, r3, #31
 8000c3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000c42:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000c46:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000c4a:	4621      	mov	r1, r4
 8000c4c:	1a89      	subs	r1, r1, r2
 8000c4e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000c50:	4629      	mov	r1, r5
 8000c52:	eb61 0303 	sbc.w	r3, r1, r3
 8000c56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000c58:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000c5c:	4622      	mov	r2, r4
 8000c5e:	462b      	mov	r3, r5
 8000c60:	1891      	adds	r1, r2, r2
 8000c62:	6239      	str	r1, [r7, #32]
 8000c64:	415b      	adcs	r3, r3
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c68:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	1851      	adds	r1, r2, r1
 8000c70:	61b9      	str	r1, [r7, #24]
 8000c72:	4629      	mov	r1, r5
 8000c74:	414b      	adcs	r3, r1
 8000c76:	61fb      	str	r3, [r7, #28]
 8000c78:	f04f 0200 	mov.w	r2, #0
 8000c7c:	f04f 0300 	mov.w	r3, #0
 8000c80:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000c84:	4649      	mov	r1, r9
 8000c86:	018b      	lsls	r3, r1, #6
 8000c88:	4641      	mov	r1, r8
 8000c8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000c8e:	4641      	mov	r1, r8
 8000c90:	018a      	lsls	r2, r1, #6
 8000c92:	4641      	mov	r1, r8
 8000c94:	1889      	adds	r1, r1, r2
 8000c96:	6139      	str	r1, [r7, #16]
 8000c98:	4649      	mov	r1, r9
 8000c9a:	eb43 0101 	adc.w	r1, r3, r1
 8000c9e:	6179      	str	r1, [r7, #20]
 8000ca0:	f04f 0200 	mov.w	r2, #0
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000cac:	4649      	mov	r1, r9
 8000cae:	008b      	lsls	r3, r1, #2
 8000cb0:	4641      	mov	r1, r8
 8000cb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000cb6:	4641      	mov	r1, r8
 8000cb8:	008a      	lsls	r2, r1, #2
 8000cba:	4610      	mov	r0, r2
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4622      	mov	r2, r4
 8000cc2:	189b      	adds	r3, r3, r2
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	462a      	mov	r2, r5
 8000cca:	eb42 0303 	adc.w	r3, r2, r3
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000cdc:	4649      	mov	r1, r9
 8000cde:	008b      	lsls	r3, r1, #2
 8000ce0:	4641      	mov	r1, r8
 8000ce2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000ce6:	4641      	mov	r1, r8
 8000ce8:	008a      	lsls	r2, r1, #2
 8000cea:	4610      	mov	r0, r2
 8000cec:	4619      	mov	r1, r3
 8000cee:	4603      	mov	r3, r0
 8000cf0:	4622      	mov	r2, r4
 8000cf2:	189b      	adds	r3, r3, r2
 8000cf4:	673b      	str	r3, [r7, #112]	@ 0x70
 8000cf6:	462b      	mov	r3, r5
 8000cf8:	460a      	mov	r2, r1
 8000cfa:	eb42 0303 	adc.w	r3, r2, r3
 8000cfe:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d00:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000d04:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000d08:	f7ff fa6a 	bl	80001e0 <__aeabi_ldivmod>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000d14:	4b66      	ldr	r3, [pc, #408]	@ (8000eb0 <BMP280_measureP+0x580>)
 8000d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	17da      	asrs	r2, r3, #31
 8000d1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000d20:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000d22:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000d26:	f04f 0000 	mov.w	r0, #0
 8000d2a:	f04f 0100 	mov.w	r1, #0
 8000d2e:	0b50      	lsrs	r0, r2, #13
 8000d30:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000d34:	1359      	asrs	r1, r3, #13
 8000d36:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000d3a:	462b      	mov	r3, r5
 8000d3c:	fb00 f203 	mul.w	r2, r0, r3
 8000d40:	4623      	mov	r3, r4
 8000d42:	fb03 f301 	mul.w	r3, r3, r1
 8000d46:	4413      	add	r3, r2
 8000d48:	4622      	mov	r2, r4
 8000d4a:	fba2 1200 	umull	r1, r2, r2, r0
 8000d4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000d52:	460a      	mov	r2, r1
 8000d54:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000d58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000d5c:	4413      	add	r3, r2
 8000d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000d62:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000d66:	f04f 0000 	mov.w	r0, #0
 8000d6a:	f04f 0100 	mov.w	r1, #0
 8000d6e:	0b50      	lsrs	r0, r2, #13
 8000d70:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000d74:	1359      	asrs	r1, r3, #13
 8000d76:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000d7a:	462b      	mov	r3, r5
 8000d7c:	fb00 f203 	mul.w	r2, r0, r3
 8000d80:	4623      	mov	r3, r4
 8000d82:	fb03 f301 	mul.w	r3, r3, r1
 8000d86:	4413      	add	r3, r2
 8000d88:	4622      	mov	r2, r4
 8000d8a:	fba2 1200 	umull	r1, r2, r2, r0
 8000d8e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000d92:	460a      	mov	r2, r1
 8000d94:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000d98:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000d9c:	4413      	add	r3, r2
 8000d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000da2:	f04f 0200 	mov.w	r2, #0
 8000da6:	f04f 0300 	mov.w	r3, #0
 8000daa:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000dae:	4621      	mov	r1, r4
 8000db0:	0e4a      	lsrs	r2, r1, #25
 8000db2:	4629      	mov	r1, r5
 8000db4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000db8:	4629      	mov	r1, r5
 8000dba:	164b      	asrs	r3, r1, #25
 8000dbc:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8000eb4 <BMP280_measureP+0x584>)
 8000dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	17da      	asrs	r2, r3, #31
 8000dca:	663b      	str	r3, [r7, #96]	@ 0x60
 8000dcc:	667a      	str	r2, [r7, #100]	@ 0x64
 8000dce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000dd2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000dd6:	462a      	mov	r2, r5
 8000dd8:	fb02 f203 	mul.w	r2, r2, r3
 8000ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000de0:	4621      	mov	r1, r4
 8000de2:	fb01 f303 	mul.w	r3, r1, r3
 8000de6:	4413      	add	r3, r2
 8000de8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000dec:	4621      	mov	r1, r4
 8000dee:	fba2 1201 	umull	r1, r2, r2, r1
 8000df2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000df6:	460a      	mov	r2, r1
 8000df8:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000dfc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e00:	4413      	add	r3, r2
 8000e02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	f04f 0300 	mov.w	r3, #0
 8000e0e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000e12:	4621      	mov	r1, r4
 8000e14:	0cca      	lsrs	r2, r1, #19
 8000e16:	4629      	mov	r1, r5
 8000e18:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	14cb      	asrs	r3, r1, #19
 8000e20:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000e24:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000e28:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000e2c:	1884      	adds	r4, r0, r2
 8000e2e:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000e30:	eb41 0303 	adc.w	r3, r1, r3
 8000e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000e36:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000e3a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000e3e:	4621      	mov	r1, r4
 8000e40:	1889      	adds	r1, r1, r2
 8000e42:	6539      	str	r1, [r7, #80]	@ 0x50
 8000e44:	4629      	mov	r1, r5
 8000e46:	eb43 0101 	adc.w	r1, r3, r1
 8000e4a:	6579      	str	r1, [r7, #84]	@ 0x54
 8000e4c:	f04f 0000 	mov.w	r0, #0
 8000e50:	f04f 0100 	mov.w	r1, #0
 8000e54:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000e58:	4623      	mov	r3, r4
 8000e5a:	0a18      	lsrs	r0, r3, #8
 8000e5c:	462b      	mov	r3, r5
 8000e5e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000e62:	462b      	mov	r3, r5
 8000e64:	1219      	asrs	r1, r3, #8
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <BMP280_measureP+0x588>)
 8000e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	17da      	asrs	r2, r3, #31
 8000e70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000e72:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000e74:	f04f 0200 	mov.w	r2, #0
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000e80:	464c      	mov	r4, r9
 8000e82:	0123      	lsls	r3, r4, #4
 8000e84:	4644      	mov	r4, r8
 8000e86:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000e8a:	4644      	mov	r4, r8
 8000e8c:	0122      	lsls	r2, r4, #4
 8000e8e:	1884      	adds	r4, r0, r2
 8000e90:	603c      	str	r4, [r7, #0]
 8000e92:	eb41 0303 	adc.w	r3, r1, r3
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000e9c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8000ea0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000eb0:	20000044 	.word	0x20000044
 8000eb4:	20000042 	.word	0x20000042
 8000eb8:	20000040 	.word	0x20000040

08000ebc <BMP280_init>:


void BMP280_init(void){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ec6:	4808      	ldr	r0, [pc, #32]	@ (8000ee8 <BMP280_init+0x2c>)
 8000ec8:	f002 f91c 	bl	8003104 <HAL_GPIO_WritePin>
	BMP280_config();
 8000ecc:	f7ff fbe6 	bl	800069c <BMP280_config>
	BMP280_ID = BMP280_read(0x89);
 8000ed0:	2089      	movs	r0, #137	@ 0x89
 8000ed2:	f7ff fbb5 	bl	8000640 <BMP280_read>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <BMP280_init+0x30>)
 8000edc:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8000ede:	f7ff fbe9 	bl	80006b4 <BMP280_calibrationData>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	2000002c 	.word	0x2000002c

08000ef0 <BMP280_calculate>:

void BMP280_calculate(void){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	BMP280_readRawValues();
 8000ef4:	f7ff fc94 	bl	8000820 <BMP280_readRawValues>
	Temperature = BMP280_measureT(T_raw);
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <BMP280_calculate+0x34>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fcd3 	bl	80008a8 <BMP280_measureT>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a08      	ldr	r2, [pc, #32]	@ (8000f28 <BMP280_calculate+0x38>)
 8000f06:	6013      	str	r3, [r2, #0]
	Presure     = (BMP280_measureP(P_raw)*100)/256;
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <BMP280_calculate+0x3c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fd0f 	bl	8000930 <BMP280_measureP>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2264      	movs	r2, #100	@ 0x64
 8000f16:	fb02 f303 	mul.w	r3, r2, r3
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <BMP280_calculate+0x40>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000048 	.word	0x20000048
 8000f28:	20000054 	.word	0x20000054
 8000f2c:	2000004c 	.word	0x2000004c
 8000f30:	20000058 	.word	0x20000058

08000f34 <NRF24_write>:
uint8_t NRF24_mode;

uint8_t TxBuffer[32];
uint8_t RxBuffer[32];

void NRF24_write(uint8_t Adr, uint8_t data){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	71fb      	strb	r3, [r7, #7]
 8000f40:	4613      	mov	r3, r2
 8000f42:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f043 0320 	orr.w	r3, r3, #32
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f54:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <NRF24_write+0x54>)
 8000f56:	f002 f8d5 	bl	8003104 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480a      	ldr	r0, [pc, #40]	@ (8000f8c <NRF24_write+0x58>)
 8000f62:	f003 fa33 	bl	80043cc <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &data, 1);
 8000f66:	1dbb      	adds	r3, r7, #6
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4807      	ldr	r0, [pc, #28]	@ (8000f8c <NRF24_write+0x58>)
 8000f6e:	f003 fa2d 	bl	80043cc <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 8000f72:	2201      	movs	r2, #1
 8000f74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f78:	4803      	ldr	r0, [pc, #12]	@ (8000f88 <NRF24_write+0x54>)
 8000f7a:	f002 f8c3 	bl	8003104 <HAL_GPIO_WritePin>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	200003a4 	.word	0x200003a4

08000f90 <NRF24_Addr_write>:

void NRF24_Addr_write(uint8_t Adr,uint8_t *ADDRESS){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
	Adr |= W_REGISTER;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f043 0320 	orr.w	r3, r3, #32
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[5];
	buffer[0] = ADDRESS[4];
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	791b      	ldrb	r3, [r3, #4]
 8000faa:	723b      	strb	r3, [r7, #8]
	buffer[1] = ADDRESS[3];
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	78db      	ldrb	r3, [r3, #3]
 8000fb0:	727b      	strb	r3, [r7, #9]
	buffer[2] = ADDRESS[2];
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	789b      	ldrb	r3, [r3, #2]
 8000fb6:	72bb      	strb	r3, [r7, #10]
	buffer[3] = ADDRESS[1];
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	785b      	ldrb	r3, [r3, #1]
 8000fbc:	72fb      	strb	r3, [r7, #11]
	buffer[4] = ADDRESS[0];
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	733b      	strb	r3, [r7, #12]

	NRF24_select();
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fca:	4812      	ldr	r0, [pc, #72]	@ (8001014 <NRF24_Addr_write+0x84>)
 8000fcc:	f002 f89a 	bl	8003104 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8000fd0:	1dfb      	adds	r3, r7, #7
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4810      	ldr	r0, [pc, #64]	@ (8001018 <NRF24_Addr_write+0x88>)
 8000fd8:	f003 f9f8 	bl	80043cc <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	e00b      	b.n	8000ffa <NRF24_Addr_write+0x6a>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &buffer[n], 1);
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	f107 0208 	add.w	r2, r7, #8
 8000fe8:	4413      	add	r3, r2
 8000fea:	2201      	movs	r2, #1
 8000fec:	4619      	mov	r1, r3
 8000fee:	480a      	ldr	r0, [pc, #40]	@ (8001018 <NRF24_Addr_write+0x88>)
 8000ff0:	f003 f9ec 	bl	80043cc <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	d9f0      	bls.n	8000fe2 <NRF24_Addr_write+0x52>
	}

	NRF24_unselect();
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001006:	4803      	ldr	r0, [pc, #12]	@ (8001014 <NRF24_Addr_write+0x84>)
 8001008:	f002 f87c 	bl	8003104 <HAL_GPIO_WritePin>

}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40020400 	.word	0x40020400
 8001018:	200003a4 	.word	0x200003a4

0800101c <NRF24_read>:

uint8_t NRF24_read(uint8_t Adr){
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	uint8_t Replay;
	NRF24_select();
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800102c:	480d      	ldr	r0, [pc, #52]	@ (8001064 <NRF24_read+0x48>)
 800102e:	f002 f869 	bl	8003104 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	2201      	movs	r2, #1
 8001036:	4619      	mov	r1, r3
 8001038:	480b      	ldr	r0, [pc, #44]	@ (8001068 <NRF24_read+0x4c>)
 800103a:	f003 f9c7 	bl	80043cc <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(SPI_NRF24, &Replay, 1);
 800103e:	f107 030f 	add.w	r3, r7, #15
 8001042:	2201      	movs	r2, #1
 8001044:	4619      	mov	r1, r3
 8001046:	4808      	ldr	r0, [pc, #32]	@ (8001068 <NRF24_read+0x4c>)
 8001048:	f003 fa72 	bl	8004530 <HAL_SPI_Receive_DMA>
	NRF24_unselect();
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001052:	4804      	ldr	r0, [pc, #16]	@ (8001064 <NRF24_read+0x48>)
 8001054:	f002 f856 	bl	8003104 <HAL_GPIO_WritePin>
	return Replay;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40020400 	.word	0x40020400
 8001068:	200003a4 	.word	0x200003a4

0800106c <NRF24_Addr_read>:

void NRF24_Addr_read(uint8_t Adr){
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[5];
	NRF24_select();
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800107c:	4836      	ldr	r0, [pc, #216]	@ (8001158 <NRF24_Addr_read+0xec>)
 800107e:	f002 f841 	bl	8003104 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	2201      	movs	r2, #1
 8001086:	4619      	mov	r1, r3
 8001088:	4834      	ldr	r0, [pc, #208]	@ (800115c <NRF24_Addr_read+0xf0>)
 800108a:	f003 f99f 	bl	80043cc <HAL_SPI_Transmit_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	e00b      	b.n	80010ac <NRF24_Addr_read+0x40>
		HAL_SPI_Receive_DMA(SPI_NRF24, &Buffer[i], 1);
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	f107 0208 	add.w	r2, r7, #8
 800109a:	4413      	add	r3, r2
 800109c:	2201      	movs	r2, #1
 800109e:	4619      	mov	r1, r3
 80010a0:	482e      	ldr	r0, [pc, #184]	@ (800115c <NRF24_Addr_read+0xf0>)
 80010a2:	f003 fa45 	bl	8004530 <HAL_SPI_Receive_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	3301      	adds	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d9f0      	bls.n	8001094 <NRF24_Addr_read+0x28>
	}
	NRF24_unselect();
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b8:	4827      	ldr	r0, [pc, #156]	@ (8001158 <NRF24_Addr_read+0xec>)
 80010ba:	f002 f823 	bl	8003104 <HAL_GPIO_WritePin>
	switch (Adr) {
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b10      	cmp	r3, #16
 80010c2:	d030      	beq.n	8001126 <NRF24_Addr_read+0xba>
 80010c4:	2b10      	cmp	r3, #16
 80010c6:	dc43      	bgt.n	8001150 <NRF24_Addr_read+0xe4>
 80010c8:	2b0a      	cmp	r3, #10
 80010ca:	d002      	beq.n	80010d2 <NRF24_Addr_read+0x66>
 80010cc:	2b0b      	cmp	r3, #11
 80010ce:	d015      	beq.n	80010fc <NRF24_Addr_read+0x90>
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
			break;
	}
}
 80010d0:	e03e      	b.n	8001150 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[4]=Buffer[0];
 80010d2:	7a3a      	ldrb	r2, [r7, #8]
 80010d4:	4b22      	ldr	r3, [pc, #136]	@ (8001160 <NRF24_Addr_read+0xf4>)
 80010d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[3]=Buffer[1];
 80010da:	7a7a      	ldrb	r2, [r7, #9]
 80010dc:	4b20      	ldr	r3, [pc, #128]	@ (8001160 <NRF24_Addr_read+0xf4>)
 80010de:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[2]=Buffer[2];
 80010e2:	7aba      	ldrb	r2, [r7, #10]
 80010e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001160 <NRF24_Addr_read+0xf4>)
 80010e6:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[1]=Buffer[3];
 80010ea:	7afa      	ldrb	r2, [r7, #11]
 80010ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001160 <NRF24_Addr_read+0xf4>)
 80010ee:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[0]=Buffer[4];
 80010f2:	7b3a      	ldrb	r2, [r7, #12]
 80010f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <NRF24_Addr_read+0xf4>)
 80010f6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
			break;
 80010fa:	e029      	b.n	8001150 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[4]=Buffer[0];
 80010fc:	7a3a      	ldrb	r2, [r7, #8]
 80010fe:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <NRF24_Addr_read+0xf4>)
 8001100:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[3]=Buffer[1];
 8001104:	7a7a      	ldrb	r2, [r7, #9]
 8001106:	4b16      	ldr	r3, [pc, #88]	@ (8001160 <NRF24_Addr_read+0xf4>)
 8001108:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[2]=Buffer[2];
 800110c:	7aba      	ldrb	r2, [r7, #10]
 800110e:	4b14      	ldr	r3, [pc, #80]	@ (8001160 <NRF24_Addr_read+0xf4>)
 8001110:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[1]=Buffer[3];
 8001114:	7afa      	ldrb	r2, [r7, #11]
 8001116:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <NRF24_Addr_read+0xf4>)
 8001118:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[0]=Buffer[4];
 800111c:	7b3a      	ldrb	r2, [r7, #12]
 800111e:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <NRF24_Addr_read+0xf4>)
 8001120:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			break;
 8001124:	e014      	b.n	8001150 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.TX_ADDR[4]=Buffer[0];
 8001126:	7a3a      	ldrb	r2, [r7, #8]
 8001128:	4b0d      	ldr	r3, [pc, #52]	@ (8001160 <NRF24_Addr_read+0xf4>)
 800112a:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
			NRF24_Configurations_Struct.Actual.TX_ADDR[3]=Buffer[1];
 800112e:	7a7a      	ldrb	r2, [r7, #9]
 8001130:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <NRF24_Addr_read+0xf4>)
 8001132:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
 8001136:	7aba      	ldrb	r2, [r7, #10]
 8001138:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <NRF24_Addr_read+0xf4>)
 800113a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
 800113e:	7afa      	ldrb	r2, [r7, #11]
 8001140:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <NRF24_Addr_read+0xf4>)
 8001142:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
 8001146:	7b3a      	ldrb	r2, [r7, #12]
 8001148:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <NRF24_Addr_read+0xf4>)
 800114a:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
			break;
 800114e:	bf00      	nop
}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40020400 	.word	0x40020400
 800115c:	200003a4 	.word	0x200003a4
 8001160:	2000005c 	.word	0x2000005c

08001164 <NRF24_FlushTxFIFO>:

void NRF24_FlushTxFIFO(void){
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_TX;
 800116a:	23e1      	movs	r3, #225	@ 0xe1
 800116c:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001174:	4809      	ldr	r0, [pc, #36]	@ (800119c <NRF24_FlushTxFIFO+0x38>)
 8001176:	f001 ffc5 	bl	8003104 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	2201      	movs	r2, #1
 800117e:	4619      	mov	r1, r3
 8001180:	4807      	ldr	r0, [pc, #28]	@ (80011a0 <NRF24_FlushTxFIFO+0x3c>)
 8001182:	f003 f923 	bl	80043cc <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800118c:	4803      	ldr	r0, [pc, #12]	@ (800119c <NRF24_FlushTxFIFO+0x38>)
 800118e:	f001 ffb9 	bl	8003104 <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40020400 	.word	0x40020400
 80011a0:	200003a4 	.word	0x200003a4

080011a4 <NRF24_FlushRxFIFO>:

void NRF24_FlushRxFIFO(void){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_RX;
 80011aa:	23e2      	movs	r3, #226	@ 0xe2
 80011ac:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011b4:	4809      	ldr	r0, [pc, #36]	@ (80011dc <NRF24_FlushRxFIFO+0x38>)
 80011b6:	f001 ffa5 	bl	8003104 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 80011ba:	1dfb      	adds	r3, r7, #7
 80011bc:	2201      	movs	r2, #1
 80011be:	4619      	mov	r1, r3
 80011c0:	4807      	ldr	r0, [pc, #28]	@ (80011e0 <NRF24_FlushRxFIFO+0x3c>)
 80011c2:	f003 f903 	bl	80043cc <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011cc:	4803      	ldr	r0, [pc, #12]	@ (80011dc <NRF24_FlushRxFIFO+0x38>)
 80011ce:	f001 ff99 	bl	8003104 <HAL_GPIO_WritePin>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40020400 	.word	0x40020400
 80011e0:	200003a4 	.word	0x200003a4

080011e4 <NRF24_PowerUp>:

void NRF24_PowerUp(void){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
	uint8_t Adr = 0x00;
 80011ea:	2300      	movs	r3, #0
 80011ec:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer= NRF24_read(Adr);
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff13 	bl	800101c <NRF24_read>
 80011f6:	4603      	mov	r3, r0
 80011f8:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f043 0320 	orr.w	r3, r3, #32
 8001200:	71fb      	strb	r3, [r7, #7]
	Buffer |= 0x02;
 8001202:	79bb      	ldrb	r3, [r7, #6]
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	71bb      	strb	r3, [r7, #6]
	NRF24_write(Adr, Buffer);
 800120a:	79ba      	ldrb	r2, [r7, #6]
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fe8f 	bl	8000f34 <NRF24_write>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <NRF24_ActualConfiguration>:

void NRF24_ActualConfiguration(void){
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	NRF24_Configurations_Struct.Actual.CONFIG 		= NRF24_read(CONFIG);
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff fef9 	bl	800101c <NRF24_read>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	4b5f      	ldr	r3, [pc, #380]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 8001230:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	NRF24_Configurations_Struct.Actual.EN_AA  		= NRF24_read(EN_AA);
 8001234:	2001      	movs	r0, #1
 8001236:	f7ff fef1 	bl	800101c <NRF24_read>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	4b5b      	ldr	r3, [pc, #364]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 8001240:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	NRF24_Configurations_Struct.Actual.EN_RXADDR  	= NRF24_read(EN_RXADDR);
 8001244:	2002      	movs	r0, #2
 8001246:	f7ff fee9 	bl	800101c <NRF24_read>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	4b57      	ldr	r3, [pc, #348]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 8001250:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	NRF24_Configurations_Struct.Actual.SETUP_AW  	= NRF24_read(SETUP_AW);
 8001254:	2003      	movs	r0, #3
 8001256:	f7ff fee1 	bl	800101c <NRF24_read>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	4b53      	ldr	r3, [pc, #332]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 8001260:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	NRF24_Configurations_Struct.Actual.SETUP_RETR 	= NRF24_read(SETUP_RETR);
 8001264:	2004      	movs	r0, #4
 8001266:	f7ff fed9 	bl	800101c <NRF24_read>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	4b4f      	ldr	r3, [pc, #316]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 8001270:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	NRF24_Configurations_Struct.Actual.RF_CH  		= NRF24_read(RF_CH);
 8001274:	2005      	movs	r0, #5
 8001276:	f7ff fed1 	bl	800101c <NRF24_read>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	4b4b      	ldr	r3, [pc, #300]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 8001280:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
	NRF24_Configurations_Struct.Actual.RF_SETUP  	= NRF24_read(RF_SETUP);
 8001284:	2006      	movs	r0, #6
 8001286:	f7ff fec9 	bl	800101c <NRF24_read>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	4b47      	ldr	r3, [pc, #284]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 8001290:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	NRF24_Configurations_Struct.Actual.STATUS  		= NRF24_read(STATUS);
 8001294:	2007      	movs	r0, #7
 8001296:	f7ff fec1 	bl	800101c <NRF24_read>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	4b43      	ldr	r3, [pc, #268]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 80012a0:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	NRF24_Configurations_Struct.Actual.OBSERVE  	= NRF24_read(OBSERVE);
 80012a4:	2008      	movs	r0, #8
 80012a6:	f7ff feb9 	bl	800101c <NRF24_read>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b3f      	ldr	r3, [pc, #252]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 80012b0:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	NRF24_Configurations_Struct.Actual.CD  			= NRF24_read(CD);
 80012b4:	2009      	movs	r0, #9
 80012b6:	f7ff feb1 	bl	800101c <NRF24_read>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	4b3b      	ldr	r3, [pc, #236]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 80012c0:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
	NRF24_Addr_read(RX_ADDR_P0);
 80012c4:	200a      	movs	r0, #10
 80012c6:	f7ff fed1 	bl	800106c <NRF24_Addr_read>
	NRF24_Addr_read(RX_ADDR_P1);
 80012ca:	200b      	movs	r0, #11
 80012cc:	f7ff fece 	bl	800106c <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_ADDR_P2  	= NRF24_read(RX_ADDR_P2);
 80012d0:	200c      	movs	r0, #12
 80012d2:	f7ff fea3 	bl	800101c <NRF24_read>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	4b34      	ldr	r3, [pc, #208]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 80012dc:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	NRF24_Configurations_Struct.Actual.RX_ADDR_P3 	= NRF24_read(RX_ADDR_P3);
 80012e0:	200d      	movs	r0, #13
 80012e2:	f7ff fe9b 	bl	800101c <NRF24_read>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b30      	ldr	r3, [pc, #192]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 80012ec:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	NRF24_Configurations_Struct.Actual.RX_ADDR_P4  	= NRF24_read(RX_ADDR_P4);
 80012f0:	200e      	movs	r0, #14
 80012f2:	f7ff fe93 	bl	800101c <NRF24_read>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b2c      	ldr	r3, [pc, #176]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 80012fc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	NRF24_Configurations_Struct.Actual.RX_ADDR_P5  	= NRF24_read(RX_ADDR_P5);
 8001300:	200f      	movs	r0, #15
 8001302:	f7ff fe8b 	bl	800101c <NRF24_read>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 800130c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	NRF24_Addr_read(TX_ADDR);
 8001310:	2010      	movs	r0, #16
 8001312:	f7ff feab 	bl	800106c <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_PW_P0  	= NRF24_read(RX_PW_P0);
 8001316:	2011      	movs	r0, #17
 8001318:	f7ff fe80 	bl	800101c <NRF24_read>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	4b22      	ldr	r3, [pc, #136]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 8001322:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
	NRF24_Configurations_Struct.Actual.RX_PW_P1  	= NRF24_read(RX_PW_P1);
 8001326:	2012      	movs	r0, #18
 8001328:	f7ff fe78 	bl	800101c <NRF24_read>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 8001332:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	NRF24_Configurations_Struct.Actual.RX_PW_P2  	= NRF24_read(RX_PW_P2);
 8001336:	2013      	movs	r0, #19
 8001338:	f7ff fe70 	bl	800101c <NRF24_read>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
 8001340:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 8001342:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
	NRF24_Configurations_Struct.Actual.RX_PW_P3  	= NRF24_read(RX_PW_P3);
 8001346:	2014      	movs	r0, #20
 8001348:	f7ff fe68 	bl	800101c <NRF24_read>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 8001352:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	NRF24_Configurations_Struct.Actual.RX_PW_P4  	= NRF24_read(RX_PW_P4);
 8001356:	2015      	movs	r0, #21
 8001358:	f7ff fe60 	bl	800101c <NRF24_read>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 8001362:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	NRF24_Configurations_Struct.Actual.RX_PW_P5  	= NRF24_read(RX_PW_P5);
 8001366:	2016      	movs	r0, #22
 8001368:	f7ff fe58 	bl	800101c <NRF24_read>
 800136c:	4603      	mov	r3, r0
 800136e:	461a      	mov	r2, r3
 8001370:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 8001372:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	NRF24_Configurations_Struct.Actual.FIFO_STATUS  = NRF24_read(FIFO_STATUS);
 8001376:	2017      	movs	r0, #23
 8001378:	f7ff fe50 	bl	800101c <NRF24_read>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 8001382:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
	NRF24_Configurations_Struct.Actual.DYNPD  		= NRF24_read(DYNPD);
 8001386:	201c      	movs	r0, #28
 8001388:	f7ff fe48 	bl	800101c <NRF24_read>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 8001392:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
	NRF24_Configurations_Struct.Actual.FEATURE  	= NRF24_read(FEATURE);
 8001396:	201d      	movs	r0, #29
 8001398:	f7ff fe40 	bl	800101c <NRF24_read>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	4b02      	ldr	r3, [pc, #8]	@ (80013ac <NRF24_ActualConfiguration+0x18c>)
 80013a2:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2000005c 	.word	0x2000005c

080013b0 <NRF24_config>:

void NRF24_config(NRF24_Address_Configurations_t Configuration_struct){
 80013b0:	b084      	sub	sp, #16
 80013b2:	b580      	push	{r7, lr}
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	f107 0c08 	add.w	ip, r7, #8
 80013ba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	NRF24_write(CONFIG,	Configuration_struct.CONFIG);
 80013be:	7a3b      	ldrb	r3, [r7, #8]
 80013c0:	4619      	mov	r1, r3
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff fdb6 	bl	8000f34 <NRF24_write>
	NRF24_write(EN_AA, Configuration_struct.EN_AA);
 80013c8:	7a7b      	ldrb	r3, [r7, #9]
 80013ca:	4619      	mov	r1, r3
 80013cc:	2001      	movs	r0, #1
 80013ce:	f7ff fdb1 	bl	8000f34 <NRF24_write>
	NRF24_write(EN_RXADDR,Configuration_struct.EN_RXADDR);
 80013d2:	7abb      	ldrb	r3, [r7, #10]
 80013d4:	4619      	mov	r1, r3
 80013d6:	2002      	movs	r0, #2
 80013d8:	f7ff fdac 	bl	8000f34 <NRF24_write>
	NRF24_write(SETUP_AW,Configuration_struct.SETUP_AW);
 80013dc:	7afb      	ldrb	r3, [r7, #11]
 80013de:	4619      	mov	r1, r3
 80013e0:	2003      	movs	r0, #3
 80013e2:	f7ff fda7 	bl	8000f34 <NRF24_write>
	NRF24_write(SETUP_RETR,Configuration_struct.SETUP_RETR);
 80013e6:	7b3b      	ldrb	r3, [r7, #12]
 80013e8:	4619      	mov	r1, r3
 80013ea:	2004      	movs	r0, #4
 80013ec:	f7ff fda2 	bl	8000f34 <NRF24_write>
	NRF24_write(RF_CH,Configuration_struct.RF_CH);
 80013f0:	7b7b      	ldrb	r3, [r7, #13]
 80013f2:	4619      	mov	r1, r3
 80013f4:	2005      	movs	r0, #5
 80013f6:	f7ff fd9d 	bl	8000f34 <NRF24_write>
	NRF24_write(RF_SETUP,Configuration_struct.RF_SETUP);
 80013fa:	7bbb      	ldrb	r3, [r7, #14]
 80013fc:	4619      	mov	r1, r3
 80013fe:	2006      	movs	r0, #6
 8001400:	f7ff fd98 	bl	8000f34 <NRF24_write>
	NRF24_write(STATUS,Configuration_struct.STATUS);
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	4619      	mov	r1, r3
 8001408:	2007      	movs	r0, #7
 800140a:	f7ff fd93 	bl	8000f34 <NRF24_write>
	NRF24_write(OBSERVE,Configuration_struct.OBSERVE);
 800140e:	7c3b      	ldrb	r3, [r7, #16]
 8001410:	4619      	mov	r1, r3
 8001412:	2008      	movs	r0, #8
 8001414:	f7ff fd8e 	bl	8000f34 <NRF24_write>
	NRF24_write(CD,Configuration_struct.CD);
 8001418:	7c7b      	ldrb	r3, [r7, #17]
 800141a:	4619      	mov	r1, r3
 800141c:	2009      	movs	r0, #9
 800141e:	f7ff fd89 	bl	8000f34 <NRF24_write>
	NRF24_Addr_write(RX_ADDR_P0, Configuration_struct.RX_ADDR_P0);
 8001422:	f107 0312 	add.w	r3, r7, #18
 8001426:	4619      	mov	r1, r3
 8001428:	200a      	movs	r0, #10
 800142a:	f7ff fdb1 	bl	8000f90 <NRF24_Addr_write>
	NRF24_Addr_write(RX_ADDR_P1, Configuration_struct.RX_ADDR_P1);
 800142e:	f107 0317 	add.w	r3, r7, #23
 8001432:	4619      	mov	r1, r3
 8001434:	200b      	movs	r0, #11
 8001436:	f7ff fdab 	bl	8000f90 <NRF24_Addr_write>
	NRF24_write(RX_ADDR_P2,Configuration_struct.RX_ADDR_P2);
 800143a:	7f3b      	ldrb	r3, [r7, #28]
 800143c:	4619      	mov	r1, r3
 800143e:	200c      	movs	r0, #12
 8001440:	f7ff fd78 	bl	8000f34 <NRF24_write>
	NRF24_write(RX_ADDR_P3,Configuration_struct.RX_ADDR_P3);
 8001444:	7f7b      	ldrb	r3, [r7, #29]
 8001446:	4619      	mov	r1, r3
 8001448:	200d      	movs	r0, #13
 800144a:	f7ff fd73 	bl	8000f34 <NRF24_write>
	NRF24_write(RX_ADDR_P4,Configuration_struct.RX_ADDR_P4);
 800144e:	7fbb      	ldrb	r3, [r7, #30]
 8001450:	4619      	mov	r1, r3
 8001452:	200e      	movs	r0, #14
 8001454:	f7ff fd6e 	bl	8000f34 <NRF24_write>
	NRF24_write(RX_ADDR_P5,Configuration_struct.RX_ADDR_P5);
 8001458:	7ffb      	ldrb	r3, [r7, #31]
 800145a:	4619      	mov	r1, r3
 800145c:	200f      	movs	r0, #15
 800145e:	f7ff fd69 	bl	8000f34 <NRF24_write>
	NRF24_Addr_write(TX_ADDR, Configuration_struct.TX_ADDR);
 8001462:	f107 0320 	add.w	r3, r7, #32
 8001466:	4619      	mov	r1, r3
 8001468:	2010      	movs	r0, #16
 800146a:	f7ff fd91 	bl	8000f90 <NRF24_Addr_write>
	NRF24_write(RX_PW_P0,Configuration_struct.RX_PW_P0);
 800146e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001472:	4619      	mov	r1, r3
 8001474:	2011      	movs	r0, #17
 8001476:	f7ff fd5d 	bl	8000f34 <NRF24_write>
	NRF24_write(RX_PW_P1,Configuration_struct.RX_PW_P1);
 800147a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800147e:	4619      	mov	r1, r3
 8001480:	2012      	movs	r0, #18
 8001482:	f7ff fd57 	bl	8000f34 <NRF24_write>
	NRF24_write(RX_PW_P2,Configuration_struct.RX_PW_P2);
 8001486:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800148a:	4619      	mov	r1, r3
 800148c:	2013      	movs	r0, #19
 800148e:	f7ff fd51 	bl	8000f34 <NRF24_write>
	NRF24_write(RX_PW_P3,Configuration_struct.RX_PW_P3);
 8001492:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001496:	4619      	mov	r1, r3
 8001498:	2014      	movs	r0, #20
 800149a:	f7ff fd4b 	bl	8000f34 <NRF24_write>
	NRF24_write(RX_PW_P4,Configuration_struct.RX_PW_P4);
 800149e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80014a2:	4619      	mov	r1, r3
 80014a4:	2015      	movs	r0, #21
 80014a6:	f7ff fd45 	bl	8000f34 <NRF24_write>
	NRF24_write(RX_PW_P5,Configuration_struct.RX_PW_P5);
 80014aa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80014ae:	4619      	mov	r1, r3
 80014b0:	2016      	movs	r0, #22
 80014b2:	f7ff fd3f 	bl	8000f34 <NRF24_write>
	NRF24_write(FIFO_STATUS,Configuration_struct.FIFO_STATUS);
 80014b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80014ba:	4619      	mov	r1, r3
 80014bc:	2017      	movs	r0, #23
 80014be:	f7ff fd39 	bl	8000f34 <NRF24_write>
	NRF24_write(DYNPD,Configuration_struct.DYNPD);
 80014c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014c6:	4619      	mov	r1, r3
 80014c8:	201c      	movs	r0, #28
 80014ca:	f7ff fd33 	bl	8000f34 <NRF24_write>
	NRF24_write(FEATURE,Configuration_struct.FEATURE);
 80014ce:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80014d2:	4619      	mov	r1, r3
 80014d4:	201d      	movs	r0, #29
 80014d6:	f7ff fd2d 	bl	8000f34 <NRF24_write>
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014e2:	b004      	add	sp, #16
 80014e4:	4770      	bx	lr
	...

080014e8 <NRF24_DefaultConfiguration>:

void NRF24_DefaultConfiguration(void){
 80014e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af06      	add	r7, sp, #24
	NRF24_FlushTxFIFO();
 80014ee:	f7ff fe39 	bl	8001164 <NRF24_FlushTxFIFO>
	NRF24_FlushRxFIFO();
 80014f2:	f7ff fe57 	bl	80011a4 <NRF24_FlushRxFIFO>
	NRF24_Configurations_Struct.Default.CONFIG 			= 0x78;
 80014f6:	4b48      	ldr	r3, [pc, #288]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 80014f8:	2278      	movs	r2, #120	@ 0x78
 80014fa:	701a      	strb	r2, [r3, #0]
	NRF24_Configurations_Struct.Default.EN_AA  			= 0x3F;
 80014fc:	4b46      	ldr	r3, [pc, #280]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 80014fe:	223f      	movs	r2, #63	@ 0x3f
 8001500:	705a      	strb	r2, [r3, #1]
	NRF24_Configurations_Struct.Default.EN_RXADDR  		= 0x03;
 8001502:	4b45      	ldr	r3, [pc, #276]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 8001504:	2203      	movs	r2, #3
 8001506:	709a      	strb	r2, [r3, #2]
	NRF24_Configurations_Struct.Default.SETUP_AW  		= 0x03;
 8001508:	4b43      	ldr	r3, [pc, #268]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 800150a:	2203      	movs	r2, #3
 800150c:	70da      	strb	r2, [r3, #3]
	NRF24_Configurations_Struct.Default.SETUP_RETR 		= 0x03;
 800150e:	4b42      	ldr	r3, [pc, #264]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 8001510:	2203      	movs	r2, #3
 8001512:	711a      	strb	r2, [r3, #4]
	NRF24_Configurations_Struct.Default.RF_CH  			= 0x02;
 8001514:	4b40      	ldr	r3, [pc, #256]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 8001516:	2202      	movs	r2, #2
 8001518:	715a      	strb	r2, [r3, #5]
	NRF24_Configurations_Struct.Default.RF_SETUP  		= 0x09;
 800151a:	4b3f      	ldr	r3, [pc, #252]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 800151c:	2209      	movs	r2, #9
 800151e:	719a      	strb	r2, [r3, #6]
	NRF24_Configurations_Struct.Default.STATUS  		= 0X70;
 8001520:	4b3d      	ldr	r3, [pc, #244]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 8001522:	2270      	movs	r2, #112	@ 0x70
 8001524:	71da      	strb	r2, [r3, #7]
	NRF24_Configurations_Struct.Default.OBSERVE  		= 0X00;
 8001526:	4b3c      	ldr	r3, [pc, #240]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 8001528:	2200      	movs	r2, #0
 800152a:	721a      	strb	r2, [r3, #8]
	NRF24_Configurations_Struct.Default.CD  			= 0x00;
 800152c:	4b3a      	ldr	r3, [pc, #232]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 800152e:	2200      	movs	r2, #0
 8001530:	725a      	strb	r2, [r3, #9]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[0]  	= 0xE7;
 8001532:	4b39      	ldr	r3, [pc, #228]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 8001534:	22e7      	movs	r2, #231	@ 0xe7
 8001536:	729a      	strb	r2, [r3, #10]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[1]  	= 0xE7;
 8001538:	4b37      	ldr	r3, [pc, #220]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 800153a:	22e7      	movs	r2, #231	@ 0xe7
 800153c:	72da      	strb	r2, [r3, #11]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[2]  	= 0xE7;
 800153e:	4b36      	ldr	r3, [pc, #216]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 8001540:	22e7      	movs	r2, #231	@ 0xe7
 8001542:	731a      	strb	r2, [r3, #12]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[3]  	= 0xE7;
 8001544:	4b34      	ldr	r3, [pc, #208]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 8001546:	22e7      	movs	r2, #231	@ 0xe7
 8001548:	735a      	strb	r2, [r3, #13]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[4]  	= 0xE7;
 800154a:	4b33      	ldr	r3, [pc, #204]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 800154c:	22e7      	movs	r2, #231	@ 0xe7
 800154e:	739a      	strb	r2, [r3, #14]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[0]  	= 0xC2;
 8001550:	4b31      	ldr	r3, [pc, #196]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 8001552:	22c2      	movs	r2, #194	@ 0xc2
 8001554:	73da      	strb	r2, [r3, #15]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[1]  	= 0xC2;
 8001556:	4b30      	ldr	r3, [pc, #192]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 8001558:	22c2      	movs	r2, #194	@ 0xc2
 800155a:	741a      	strb	r2, [r3, #16]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[2]  	= 0xC2;
 800155c:	4b2e      	ldr	r3, [pc, #184]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 800155e:	22c2      	movs	r2, #194	@ 0xc2
 8001560:	745a      	strb	r2, [r3, #17]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[3]  	= 0xC2;
 8001562:	4b2d      	ldr	r3, [pc, #180]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 8001564:	22c2      	movs	r2, #194	@ 0xc2
 8001566:	749a      	strb	r2, [r3, #18]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[4]  	= 0xC2;
 8001568:	4b2b      	ldr	r3, [pc, #172]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 800156a:	22c2      	movs	r2, #194	@ 0xc2
 800156c:	74da      	strb	r2, [r3, #19]
	NRF24_Configurations_Struct.Default.RX_ADDR_P2  	= 0xC3;
 800156e:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 8001570:	22c3      	movs	r2, #195	@ 0xc3
 8001572:	751a      	strb	r2, [r3, #20]
	NRF24_Configurations_Struct.Default.RX_ADDR_P3 		= 0xC4;
 8001574:	4b28      	ldr	r3, [pc, #160]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 8001576:	22c4      	movs	r2, #196	@ 0xc4
 8001578:	755a      	strb	r2, [r3, #21]
	NRF24_Configurations_Struct.Default.RX_ADDR_P4  	= 0xC5;
 800157a:	4b27      	ldr	r3, [pc, #156]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 800157c:	22c5      	movs	r2, #197	@ 0xc5
 800157e:	759a      	strb	r2, [r3, #22]
	NRF24_Configurations_Struct.Default.RX_ADDR_P5  	= 0xC6;
 8001580:	4b25      	ldr	r3, [pc, #148]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 8001582:	22c6      	movs	r2, #198	@ 0xc6
 8001584:	75da      	strb	r2, [r3, #23]
	NRF24_Configurations_Struct.Default.TX_ADDR[0]   	= 0xE7;
 8001586:	4b24      	ldr	r3, [pc, #144]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 8001588:	22e7      	movs	r2, #231	@ 0xe7
 800158a:	761a      	strb	r2, [r3, #24]
	NRF24_Configurations_Struct.Default.TX_ADDR[1]   	= 0xE7;
 800158c:	4b22      	ldr	r3, [pc, #136]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 800158e:	22e7      	movs	r2, #231	@ 0xe7
 8001590:	765a      	strb	r2, [r3, #25]
	NRF24_Configurations_Struct.Default.TX_ADDR[2]   	= 0xE7;
 8001592:	4b21      	ldr	r3, [pc, #132]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 8001594:	22e7      	movs	r2, #231	@ 0xe7
 8001596:	769a      	strb	r2, [r3, #26]
	NRF24_Configurations_Struct.Default.TX_ADDR[3]   	= 0xE7;
 8001598:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 800159a:	22e7      	movs	r2, #231	@ 0xe7
 800159c:	76da      	strb	r2, [r3, #27]
	NRF24_Configurations_Struct.Default.TX_ADDR[4]   	= 0xE7;
 800159e:	4b1e      	ldr	r3, [pc, #120]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 80015a0:	22e7      	movs	r2, #231	@ 0xe7
 80015a2:	771a      	strb	r2, [r3, #28]
	NRF24_Configurations_Struct.Default.RX_PW_P0  		= 0X20;
 80015a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 80015a6:	2220      	movs	r2, #32
 80015a8:	775a      	strb	r2, [r3, #29]
	NRF24_Configurations_Struct.Default.RX_PW_P1  		= 0X20;
 80015aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 80015ac:	2220      	movs	r2, #32
 80015ae:	779a      	strb	r2, [r3, #30]
	NRF24_Configurations_Struct.Default.RX_PW_P2  		= 0X00;
 80015b0:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	77da      	strb	r2, [r3, #31]
	NRF24_Configurations_Struct.Default.RX_PW_P3  		= 0X00;
 80015b6:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2020 	strb.w	r2, [r3, #32]
	NRF24_Configurations_Struct.Default.RX_PW_P4  		= 0X00;
 80015be:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	NRF24_Configurations_Struct.Default.RX_PW_P5  		= 0X00;
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	NRF24_Configurations_Struct.Default.FIFO_STATUS  	= 0X11;
 80015ce:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 80015d0:	2211      	movs	r2, #17
 80015d2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	NRF24_Configurations_Struct.Default.DYNPD  			= 0X00;
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	NRF24_Configurations_Struct.Default.FEATURE  		= 0X00;
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	NRF24_config(NRF24_Configurations_Struct.Default);
 80015e6:	4e0c      	ldr	r6, [pc, #48]	@ (8001618 <NRF24_DefaultConfiguration+0x130>)
 80015e8:	466c      	mov	r4, sp
 80015ea:	f106 0510 	add.w	r5, r6, #16
 80015ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015f6:	6020      	str	r0, [r4, #0]
 80015f8:	3404      	adds	r4, #4
 80015fa:	8021      	strh	r1, [r4, #0]
 80015fc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001600:	f7ff fed6 	bl	80013b0 <NRF24_config>
	NRF24_ActualConfiguration();
 8001604:	f7ff fe0c 	bl	8001220 <NRF24_ActualConfiguration>
	NRF24_mode = Init;
 8001608:	4b04      	ldr	r3, [pc, #16]	@ (800161c <NRF24_DefaultConfiguration+0x134>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
}
 800160e:	bf00      	nop
 8001610:	3704      	adds	r7, #4
 8001612:	46bd      	mov	sp, r7
 8001614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001616:	bf00      	nop
 8001618:	2000005c 	.word	0x2000005c
 800161c:	200000ff 	.word	0x200000ff

08001620 <NRF24_RxConfiguration>:
	NRF24_config(NRF24_Configurations_Struct.Tx_mode);
	NRF24_ActualConfiguration();
	NRF24_mode = TxMode;
}

void NRF24_RxConfiguration(void){
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	b087      	sub	sp, #28
 8001624:	af06      	add	r7, sp, #24
	NRF24_Configurations_Struct.Rx_mode.CONFIG 			= 0x79;
 8001626:	4b5b      	ldr	r3, [pc, #364]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001628:	2279      	movs	r2, #121	@ 0x79
 800162a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	NRF24_Configurations_Struct.Rx_mode.EN_AA  			= 0x03;
 800162e:	4b59      	ldr	r3, [pc, #356]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001630:	2203      	movs	r2, #3
 8001632:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	NRF24_Configurations_Struct.Rx_mode.EN_RXADDR  		= 0x03;
 8001636:	4b57      	ldr	r3, [pc, #348]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001638:	2203      	movs	r2, #3
 800163a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
	NRF24_Configurations_Struct.Rx_mode.SETUP_AW  		= 0x03;
 800163e:	4b55      	ldr	r3, [pc, #340]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001640:	2203      	movs	r2, #3
 8001642:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
	NRF24_Configurations_Struct.Rx_mode.SETUP_RETR 		= 0x33;
 8001646:	4b53      	ldr	r3, [pc, #332]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001648:	2233      	movs	r2, #51	@ 0x33
 800164a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	NRF24_Configurations_Struct.Rx_mode.RF_CH  			= 0x12;
 800164e:	4b51      	ldr	r3, [pc, #324]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001650:	2212      	movs	r2, #18
 8001652:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	NRF24_Configurations_Struct.Rx_mode.RF_SETUP  		= 0x09;
 8001656:	4b4f      	ldr	r3, [pc, #316]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001658:	2209      	movs	r2, #9
 800165a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	NRF24_Configurations_Struct.Rx_mode.STATUS  		= 0X70;
 800165e:	4b4d      	ldr	r3, [pc, #308]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001660:	2270      	movs	r2, #112	@ 0x70
 8001662:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
	NRF24_Configurations_Struct.Rx_mode.OBSERVE  		= 0X00;
 8001666:	4b4b      	ldr	r3, [pc, #300]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	NRF24_Configurations_Struct.Rx_mode.CD  			= 0x00;
 800166e:	4b49      	ldr	r3, [pc, #292]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[0]  	= 0xE7;
 8001676:	4b47      	ldr	r3, [pc, #284]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001678:	22e7      	movs	r2, #231	@ 0xe7
 800167a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[1]  	= 0xE7;
 800167e:	4b45      	ldr	r3, [pc, #276]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001680:	22e7      	movs	r2, #231	@ 0xe7
 8001682:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[2]  	= 0xE7;
 8001686:	4b43      	ldr	r3, [pc, #268]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001688:	22e7      	movs	r2, #231	@ 0xe7
 800168a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[3]  	= 0xE7;
 800168e:	4b41      	ldr	r3, [pc, #260]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001690:	22e7      	movs	r2, #231	@ 0xe7
 8001692:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P0[4]  	= 0xE7;
 8001696:	4b3f      	ldr	r3, [pc, #252]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001698:	22e7      	movs	r2, #231	@ 0xe7
 800169a:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[0]  	= 0xC2;
 800169e:	4b3d      	ldr	r3, [pc, #244]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 80016a0:	22c2      	movs	r2, #194	@ 0xc2
 80016a2:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[1]  	= 0xC2;
 80016a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 80016a8:	22c2      	movs	r2, #194	@ 0xc2
 80016aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[2]  	= 0xC2;
 80016ae:	4b39      	ldr	r3, [pc, #228]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 80016b0:	22c2      	movs	r2, #194	@ 0xc2
 80016b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[3]  	= 0xC2;
 80016b6:	4b37      	ldr	r3, [pc, #220]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 80016b8:	22c2      	movs	r2, #194	@ 0xc2
 80016ba:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P1[4]  	= 0xC2;
 80016be:	4b35      	ldr	r3, [pc, #212]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 80016c0:	22c2      	movs	r2, #194	@ 0xc2
 80016c2:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P2  	= 0xC3;
 80016c6:	4b33      	ldr	r3, [pc, #204]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 80016c8:	22c3      	movs	r2, #195	@ 0xc3
 80016ca:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P3 		= 0xC4;
 80016ce:	4b31      	ldr	r3, [pc, #196]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 80016d0:	22c4      	movs	r2, #196	@ 0xc4
 80016d2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P4  	= 0xC5;
 80016d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 80016d8:	22c5      	movs	r2, #197	@ 0xc5
 80016da:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
	NRF24_Configurations_Struct.Rx_mode.RX_ADDR_P5  	= 0xC6;
 80016de:	4b2d      	ldr	r3, [pc, #180]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 80016e0:	22c6      	movs	r2, #198	@ 0xc6
 80016e2:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[0]   	= 0xE7;
 80016e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 80016e8:	22e7      	movs	r2, #231	@ 0xe7
 80016ea:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[1]   	= 0xE7;
 80016ee:	4b29      	ldr	r3, [pc, #164]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 80016f0:	22e7      	movs	r2, #231	@ 0xe7
 80016f2:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[2]   	= 0xE7;
 80016f6:	4b27      	ldr	r3, [pc, #156]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 80016f8:	22e7      	movs	r2, #231	@ 0xe7
 80016fa:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[3]   	= 0xE7;
 80016fe:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001700:	22e7      	movs	r2, #231	@ 0xe7
 8001702:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
	NRF24_Configurations_Struct.Rx_mode.TX_ADDR[4]   	= 0xE7;
 8001706:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001708:	22e7      	movs	r2, #231	@ 0xe7
 800170a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P0  		= 0X20;
 800170e:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001710:	2220      	movs	r2, #32
 8001712:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P1  		= 0X20;
 8001716:	4b1f      	ldr	r3, [pc, #124]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001718:	2220      	movs	r2, #32
 800171a:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P2  		= 0X00;
 800171e:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001720:	2200      	movs	r2, #0
 8001722:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P3  		= 0X00;
 8001726:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001728:	2200      	movs	r2, #0
 800172a:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P4  		= 0X00;
 800172e:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001730:	2200      	movs	r2, #0
 8001732:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
	NRF24_Configurations_Struct.Rx_mode.RX_PW_P5  		= 0X00;
 8001736:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001738:	2200      	movs	r2, #0
 800173a:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
	NRF24_Configurations_Struct.Rx_mode.FIFO_STATUS  	= 0X11;
 800173e:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001740:	2211      	movs	r2, #17
 8001742:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
	NRF24_Configurations_Struct.Rx_mode.DYNPD  			= 0X00;
 8001746:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	NRF24_Configurations_Struct.Rx_mode.FEATURE  		= 0X00;
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	NRF24_config(NRF24_Configurations_Struct.Rx_mode);
 8001756:	4e0f      	ldr	r6, [pc, #60]	@ (8001794 <NRF24_RxConfiguration+0x174>)
 8001758:	466c      	mov	r4, sp
 800175a:	f106 055c 	add.w	r5, r6, #92	@ 0x5c
 800175e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001762:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001766:	6020      	str	r0, [r4, #0]
 8001768:	3404      	adds	r4, #4
 800176a:	8021      	strh	r1, [r4, #0]
 800176c:	f106 034c 	add.w	r3, r6, #76	@ 0x4c
 8001770:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001772:	f7ff fe1d 	bl	80013b0 <NRF24_config>
	NRF24_ActualConfiguration();
 8001776:	f7ff fd53 	bl	8001220 <NRF24_ActualConfiguration>
	NRF24_Enable();
 800177a:	2201      	movs	r2, #1
 800177c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001780:	4805      	ldr	r0, [pc, #20]	@ (8001798 <NRF24_RxConfiguration+0x178>)
 8001782:	f001 fcbf 	bl	8003104 <HAL_GPIO_WritePin>
	NRF24_mode = RxMode;
 8001786:	4b05      	ldr	r3, [pc, #20]	@ (800179c <NRF24_RxConfiguration+0x17c>)
 8001788:	2202      	movs	r2, #2
 800178a:	701a      	strb	r2, [r3, #0]
}
 800178c:	bf00      	nop
 800178e:	3704      	adds	r7, #4
 8001790:	46bd      	mov	sp, r7
 8001792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001794:	2000005c 	.word	0x2000005c
 8001798:	40020400 	.word	0x40020400
 800179c:	200000ff 	.word	0x200000ff

080017a0 <NRF24_CheckFlags>:

void NRF24_CheckFlags(void){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
	uint8_t buffer = NRF24_read(STATUS);
 80017a6:	2007      	movs	r0, #7
 80017a8:	f7ff fc38 	bl	800101c <NRF24_read>
 80017ac:	4603      	mov	r3, r0
 80017ae:	71fb      	strb	r3, [r7, #7]
	TX_FULL =  buffer & 0x01;
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b28      	ldr	r3, [pc, #160]	@ (800185c <NRF24_CheckFlags+0xbc>)
 80017ba:	701a      	strb	r2, [r3, #0]
	RX_P_NO = (buffer & 0x0E) >> 1;
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	105b      	asrs	r3, r3, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b25      	ldr	r3, [pc, #148]	@ (8001860 <NRF24_CheckFlags+0xc0>)
 80017ca:	701a      	strb	r2, [r3, #0]
	MAX_RT  = (buffer & 0x10) >> 4;
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	111b      	asrs	r3, r3, #4
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b22      	ldr	r3, [pc, #136]	@ (8001864 <NRF24_CheckFlags+0xc4>)
 80017da:	701a      	strb	r2, [r3, #0]
	TX_DS   = (buffer & 0x20) >> 5;
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	115b      	asrs	r3, r3, #5
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001868 <NRF24_CheckFlags+0xc8>)
 80017ea:	701a      	strb	r2, [r3, #0]
	RX_DR   = (buffer & 0x40) >> 6;
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	119b      	asrs	r3, r3, #6
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b1c      	ldr	r3, [pc, #112]	@ (800186c <NRF24_CheckFlags+0xcc>)
 80017fa:	701a      	strb	r2, [r3, #0]

	buffer   = NRF24_read(FIFO_STATUS);
 80017fc:	2017      	movs	r0, #23
 80017fe:	f7ff fc0d 	bl	800101c <NRF24_read>
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
	RX_EMPTY =  buffer & 0x01;
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b18      	ldr	r3, [pc, #96]	@ (8001870 <NRF24_CheckFlags+0xd0>)
 8001810:	701a      	strb	r2, [r3, #0]
	RX_FULL  = (buffer & 0x02) >> 1;
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	105b      	asrs	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <NRF24_CheckFlags+0xd4>)
 8001820:	701a      	strb	r2, [r3, #0]
	TX_EMPTY = (buffer & 0x10) >> 4;
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	111b      	asrs	r3, r3, #4
 8001826:	b2db      	uxtb	r3, r3
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <NRF24_CheckFlags+0xd8>)
 8001830:	701a      	strb	r2, [r3, #0]
	TX_FULL  = (buffer & 0x20) >> 5;
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	115b      	asrs	r3, r3, #5
 8001836:	b2db      	uxtb	r3, r3
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <NRF24_CheckFlags+0xbc>)
 8001840:	701a      	strb	r2, [r3, #0]
	TX_REUSE = (buffer & 0x40) >> 6;
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	119b      	asrs	r3, r3, #6
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <NRF24_CheckFlags+0xdc>)
 8001850:	701a      	strb	r2, [r3, #0]
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200000f5 	.word	0x200000f5
 8001860:	200000f6 	.word	0x200000f6
 8001864:	200000f7 	.word	0x200000f7
 8001868:	200000f8 	.word	0x200000f8
 800186c:	200000f9 	.word	0x200000f9
 8001870:	200000fa 	.word	0x200000fa
 8001874:	200000fb 	.word	0x200000fb
 8001878:	200000fc 	.word	0x200000fc
 800187c:	200000fd 	.word	0x200000fd

08001880 <NRF24_FIFO_write>:

void NRF24_FIFO_write(uint8_t *pData, uint8_t size){
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	70fb      	strb	r3, [r7, #3]
	uint8_t Adr = W_TX_PAYLOAD;
 800188c:	23a0      	movs	r3, #160	@ 0xa0
 800188e:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 8001890:	2200      	movs	r2, #0
 8001892:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001896:	4812      	ldr	r0, [pc, #72]	@ (80018e0 <NRF24_FIFO_write+0x60>)
 8001898:	f001 fc34 	bl	8003104 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 800189c:	f107 030e 	add.w	r3, r7, #14
 80018a0:	2201      	movs	r2, #1
 80018a2:	4619      	mov	r1, r3
 80018a4:	480f      	ldr	r0, [pc, #60]	@ (80018e4 <NRF24_FIFO_write+0x64>)
 80018a6:	f002 fd91 	bl	80043cc <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]
 80018ae:	e00a      	b.n	80018c6 <NRF24_FIFO_write+0x46>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &pData[n], 1);
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	2201      	movs	r2, #1
 80018b8:	4619      	mov	r1, r3
 80018ba:	480a      	ldr	r0, [pc, #40]	@ (80018e4 <NRF24_FIFO_write+0x64>)
 80018bc:	f002 fd86 	bl	80043cc <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	3301      	adds	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	2b1f      	cmp	r3, #31
 80018ca:	d9f1      	bls.n	80018b0 <NRF24_FIFO_write+0x30>
	}
	NRF24_unselect();
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018d2:	4803      	ldr	r0, [pc, #12]	@ (80018e0 <NRF24_FIFO_write+0x60>)
 80018d4:	f001 fc16 	bl	8003104 <HAL_GPIO_WritePin>
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40020400 	.word	0x40020400
 80018e4:	200003a4 	.word	0x200003a4

080018e8 <NRF24_FIFO_read>:

void NRF24_FIFO_read(uint8_t *pData){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	uint8_t Adr = R_RX_PAYLOAD;
 80018f0:	2361      	movs	r3, #97	@ 0x61
 80018f2:	73bb      	strb	r3, [r7, #14]
	NRF24_select();
 80018f4:	2200      	movs	r2, #0
 80018f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018fa:	4812      	ldr	r0, [pc, #72]	@ (8001944 <NRF24_FIFO_read+0x5c>)
 80018fc:	f001 fc02 	bl	8003104 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8001900:	f107 030e 	add.w	r3, r7, #14
 8001904:	2201      	movs	r2, #1
 8001906:	4619      	mov	r1, r3
 8001908:	480f      	ldr	r0, [pc, #60]	@ (8001948 <NRF24_FIFO_read+0x60>)
 800190a:	f002 fd5f 	bl	80043cc <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
 8001912:	e00a      	b.n	800192a <NRF24_FIFO_read+0x42>
		HAL_SPI_Receive_DMA(SPI_NRF24, &pData[n], 1);
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	2201      	movs	r2, #1
 800191c:	4619      	mov	r1, r3
 800191e:	480a      	ldr	r0, [pc, #40]	@ (8001948 <NRF24_FIFO_read+0x60>)
 8001920:	f002 fe06 	bl	8004530 <HAL_SPI_Receive_DMA>
	for (uint8_t n = 0; n < 32; ++n) {
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	3301      	adds	r3, #1
 8001928:	73fb      	strb	r3, [r7, #15]
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	2b1f      	cmp	r3, #31
 800192e:	d9f1      	bls.n	8001914 <NRF24_FIFO_read+0x2c>
	}
	NRF24_unselect();
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001936:	4803      	ldr	r0, [pc, #12]	@ (8001944 <NRF24_FIFO_read+0x5c>)
 8001938:	f001 fbe4 	bl	8003104 <HAL_GPIO_WritePin>
}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40020400 	.word	0x40020400
 8001948:	200003a4 	.word	0x200003a4

0800194c <NRF24_init>:

void NRF24_init(void){
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	NRF24_Disable();
 8001950:	2200      	movs	r2, #0
 8001952:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001956:	4808      	ldr	r0, [pc, #32]	@ (8001978 <NRF24_init+0x2c>)
 8001958:	f001 fbd4 	bl	8003104 <HAL_GPIO_WritePin>
	NRF24_unselect();
 800195c:	2201      	movs	r2, #1
 800195e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001962:	4805      	ldr	r0, [pc, #20]	@ (8001978 <NRF24_init+0x2c>)
 8001964:	f001 fbce 	bl	8003104 <HAL_GPIO_WritePin>
	NRF24_DefaultConfiguration();
 8001968:	f7ff fdbe 	bl	80014e8 <NRF24_DefaultConfiguration>
	NRF24_mode = 0;
 800196c:	4b03      	ldr	r3, [pc, #12]	@ (800197c <NRF24_init+0x30>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40020400 	.word	0x40020400
 800197c:	200000ff 	.word	0x200000ff

08001980 <NRF24_Transmit>:

void NRF24_Transmit(void){
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	NRF24_CheckFlags();
 8001984:	f7ff ff0c 	bl	80017a0 <NRF24_CheckFlags>
	if(MAX_RT)  NRF24_write(STATUS, 0x70);
 8001988:	4b1d      	ldr	r3, [pc, #116]	@ (8001a00 <NRF24_Transmit+0x80>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <NRF24_Transmit+0x18>
 8001990:	2170      	movs	r1, #112	@ 0x70
 8001992:	2007      	movs	r0, #7
 8001994:	f7ff face 	bl	8000f34 <NRF24_write>
	if(TX_FULL) NRF24_FlushTxFIFO();
 8001998:	4b1a      	ldr	r3, [pc, #104]	@ (8001a04 <NRF24_Transmit+0x84>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <NRF24_Transmit+0x24>
 80019a0:	f7ff fbe0 	bl	8001164 <NRF24_FlushTxFIFO>
	if(Cont_TX > 10){
 80019a4:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <NRF24_Transmit+0x88>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b0a      	cmp	r3, #10
 80019aa:	d909      	bls.n	80019c0 <NRF24_Transmit+0x40>
		Cont_TX = 0;
 80019ac:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <NRF24_Transmit+0x88>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
		NRF24_FIFO_write(TxBuffer, 32);
 80019b2:	2120      	movs	r1, #32
 80019b4:	4815      	ldr	r0, [pc, #84]	@ (8001a0c <NRF24_Transmit+0x8c>)
 80019b6:	f7ff ff63 	bl	8001880 <NRF24_FIFO_write>
		Transmision_Flag = 0;
 80019ba:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <NRF24_Transmit+0x90>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
	}
	switch (Transmision_Flag) {
 80019c0:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <NRF24_Transmit+0x90>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <NRF24_Transmit+0x4e>
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d00a      	beq.n	80019e2 <NRF24_Transmit+0x62>
 80019cc:	e010      	b.n	80019f0 <NRF24_Transmit+0x70>
		case 0:
			NRF24_Enable();
 80019ce:	2201      	movs	r2, #1
 80019d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019d4:	480f      	ldr	r0, [pc, #60]	@ (8001a14 <NRF24_Transmit+0x94>)
 80019d6:	f001 fb95 	bl	8003104 <HAL_GPIO_WritePin>
			Transmision_Flag = 1;
 80019da:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <NRF24_Transmit+0x90>)
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
			break;
 80019e0:	e006      	b.n	80019f0 <NRF24_Transmit+0x70>
		case 1:
			NRF24_Disable();
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019e8:	480a      	ldr	r0, [pc, #40]	@ (8001a14 <NRF24_Transmit+0x94>)
 80019ea:	f001 fb8b 	bl	8003104 <HAL_GPIO_WritePin>
			break;
 80019ee:	bf00      	nop
	}
	++Cont_TX;
 80019f0:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <NRF24_Transmit+0x88>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <NRF24_Transmit+0x88>)
 80019fa:	701a      	strb	r2, [r3, #0]
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	200000f7 	.word	0x200000f7
 8001a04:	200000f5 	.word	0x200000f5
 8001a08:	200000fe 	.word	0x200000fe
 8001a0c:	20000100 	.word	0x20000100
 8001a10:	200000f4 	.word	0x200000f4
 8001a14:	40020400 	.word	0x40020400

08001a18 <NRF24_Receive>:

void NRF24_Receive(void){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	NRF24_CheckFlags();
 8001a1c:	f7ff fec0 	bl	80017a0 <NRF24_CheckFlags>
	if(RX_P_NO != 7){
 8001a20:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <NRF24_Receive+0x1c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b07      	cmp	r3, #7
 8001a26:	d002      	beq.n	8001a2e <NRF24_Receive+0x16>
		NRF24_FIFO_read(RxBuffer);
 8001a28:	4803      	ldr	r0, [pc, #12]	@ (8001a38 <NRF24_Receive+0x20>)
 8001a2a:	f7ff ff5d 	bl	80018e8 <NRF24_FIFO_read>
	}
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200000f6 	.word	0x200000f6
 8001a38:	20000120 	.word	0x20000120

08001a3c <NRF24_TxBuffer>:

void NRF24_TxBuffer(void){
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
	++TxBuffer[0];
 8001a42:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <NRF24_TxBuffer+0x5c>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	3301      	adds	r3, #1
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <NRF24_TxBuffer+0x5c>)
 8001a4c:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < 30; ++n) {
 8001a4e:	2300      	movs	r3, #0
 8001a50:	71fb      	strb	r3, [r7, #7]
 8001a52:	e016      	b.n	8001a82 <NRF24_TxBuffer+0x46>
		if(TxBuffer[n]==0xFF){
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	4a10      	ldr	r2, [pc, #64]	@ (8001a98 <NRF24_TxBuffer+0x5c>)
 8001a58:	5cd3      	ldrb	r3, [r2, r3]
 8001a5a:	2bff      	cmp	r3, #255	@ 0xff
 8001a5c:	d10e      	bne.n	8001a7c <NRF24_TxBuffer+0x40>
			++TxBuffer[n];
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	4a0d      	ldr	r2, [pc, #52]	@ (8001a98 <NRF24_TxBuffer+0x5c>)
 8001a62:	5cd2      	ldrb	r2, [r2, r3]
 8001a64:	3201      	adds	r2, #1
 8001a66:	b2d1      	uxtb	r1, r2
 8001a68:	4a0b      	ldr	r2, [pc, #44]	@ (8001a98 <NRF24_TxBuffer+0x5c>)
 8001a6a:	54d1      	strb	r1, [r2, r3]
			++TxBuffer[n+1];
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	4a09      	ldr	r2, [pc, #36]	@ (8001a98 <NRF24_TxBuffer+0x5c>)
 8001a72:	5cd2      	ldrb	r2, [r2, r3]
 8001a74:	3201      	adds	r2, #1
 8001a76:	b2d1      	uxtb	r1, r2
 8001a78:	4a07      	ldr	r2, [pc, #28]	@ (8001a98 <NRF24_TxBuffer+0x5c>)
 8001a7a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t n = 0; n < 30; ++n) {
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	71fb      	strb	r3, [r7, #7]
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b1d      	cmp	r3, #29
 8001a86:	d9e5      	bls.n	8001a54 <NRF24_TxBuffer+0x18>
		}
	}
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000100 	.word	0x20000100

08001a9c <NRF24_StateMachine>:

void NRF24_StateMachine(void){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	switch (NRF24_mode){
 8001aa0:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <NRF24_StateMachine+0x50>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d81a      	bhi.n	8001ade <NRF24_StateMachine+0x42>
 8001aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab0 <NRF24_StateMachine+0x14>)
 8001aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aae:	bf00      	nop
 8001ab0:	08001ac1 	.word	0x08001ac1
 8001ab4:	08001ad5 	.word	0x08001ad5
 8001ab8:	08001acf 	.word	0x08001acf
 8001abc:	08001ae5 	.word	0x08001ae5
		case Init:
			NRF24_RxConfiguration();
 8001ac0:	f7ff fdae 	bl	8001620 <NRF24_RxConfiguration>
			NRF24_PowerUp();
 8001ac4:	f7ff fb8e 	bl	80011e4 <NRF24_PowerUp>
			NRF24_ActualConfiguration();
 8001ac8:	f7ff fbaa 	bl	8001220 <NRF24_ActualConfiguration>
			break;
 8001acc:	e00b      	b.n	8001ae6 <NRF24_StateMachine+0x4a>
		case RxMode:

			NRF24_Receive();
 8001ace:	f7ff ffa3 	bl	8001a18 <NRF24_Receive>
			break;
 8001ad2:	e008      	b.n	8001ae6 <NRF24_StateMachine+0x4a>
		case TxMode:
			NRF24_TxBuffer();
 8001ad4:	f7ff ffb2 	bl	8001a3c <NRF24_TxBuffer>
			NRF24_Transmit();
 8001ad8:	f7ff ff52 	bl	8001980 <NRF24_Transmit>
			break;
 8001adc:	e003      	b.n	8001ae6 <NRF24_StateMachine+0x4a>
		case PowerSave:

			break;
		default:
			NRF24_init();
 8001ade:	f7ff ff35 	bl	800194c <NRF24_init>
	}
}
 8001ae2:	e000      	b.n	8001ae6 <NRF24_StateMachine+0x4a>
			break;
 8001ae4:	bf00      	nop
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200000ff 	.word	0x200000ff

08001af0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <MX_DMA_Init+0x78>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	4a1a      	ldr	r2, [pc, #104]	@ (8001b68 <MX_DMA_Init+0x78>)
 8001b00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b06:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <MX_DMA_Init+0x78>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <MX_DMA_Init+0x78>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	4a13      	ldr	r2, [pc, #76]	@ (8001b68 <MX_DMA_Init+0x78>)
 8001b1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b22:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <MX_DMA_Init+0x78>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2105      	movs	r1, #5
 8001b32:	200e      	movs	r0, #14
 8001b34:	f000 fda6 	bl	8002684 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001b38:	200e      	movs	r0, #14
 8001b3a:	f000 fdbf 	bl	80026bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2105      	movs	r1, #5
 8001b42:	2038      	movs	r0, #56	@ 0x38
 8001b44:	f000 fd9e 	bl	8002684 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b48:	2038      	movs	r0, #56	@ 0x38
 8001b4a:	f000 fdb7 	bl	80026bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2105      	movs	r1, #5
 8001b52:	203a      	movs	r0, #58	@ 0x3a
 8001b54:	f000 fd96 	bl	8002684 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b58:	203a      	movs	r0, #58	@ 0x3a
 8001b5a:	f000 fdaf 	bl	80026bc <HAL_NVIC_EnableIRQ>

}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800

08001b6c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4a07      	ldr	r2, [pc, #28]	@ (8001b98 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	4a06      	ldr	r2, [pc, #24]	@ (8001b9c <vApplicationGetIdleTaskMemory+0x30>)
 8001b82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2280      	movs	r2, #128	@ 0x80
 8001b88:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000150 	.word	0x20000150
 8001b9c:	200001a4 	.word	0x200001a4

08001ba0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001ba0:	b5b0      	push	{r4, r5, r7, lr}
 8001ba2:	b09c      	sub	sp, #112	@ 0x70
 8001ba4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task10ms */
  osThreadDef(Task10ms, Task_10ms, osPriorityNormal, 0, 128);
 8001ba6:	4b27      	ldr	r3, [pc, #156]	@ (8001c44 <MX_FREERTOS_Init+0xa4>)
 8001ba8:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001bac:	461d      	mov	r5, r3
 8001bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task10msHandle = osThreadCreate(osThread(Task10ms), NULL);
 8001bba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 fcd0 	bl	8005566 <osThreadCreate>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c48 <MX_FREERTOS_Init+0xa8>)
 8001bca:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task100ms */
  osThreadDef(Task100ms, Task_100ms, osPriorityNormal, 0, 128);
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c4c <MX_FREERTOS_Init+0xac>)
 8001bce:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001bd2:	461d      	mov	r5, r3
 8001bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task100msHandle = osThreadCreate(osThread(Task100ms), NULL);
 8001be0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f003 fcbd 	bl	8005566 <osThreadCreate>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4a18      	ldr	r2, [pc, #96]	@ (8001c50 <MX_FREERTOS_Init+0xb0>)
 8001bf0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1000ms */
  osThreadDef(Task1000ms, Task_1000ms, osPriorityIdle, 0, 128);
 8001bf2:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <MX_FREERTOS_Init+0xb4>)
 8001bf4:	f107 041c 	add.w	r4, r7, #28
 8001bf8:	461d      	mov	r5, r3
 8001bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1000msHandle = osThreadCreate(osThread(Task1000ms), NULL);
 8001c06:	f107 031c 	add.w	r3, r7, #28
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f003 fcaa 	bl	8005566 <osThreadCreate>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4a10      	ldr	r2, [pc, #64]	@ (8001c58 <MX_FREERTOS_Init+0xb8>)
 8001c16:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1ms */
  osThreadDef(Task1ms, Task_1ms, osPriorityAboveNormal, 0, 128);
 8001c18:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <MX_FREERTOS_Init+0xbc>)
 8001c1a:	463c      	mov	r4, r7
 8001c1c:	461d      	mov	r5, r3
 8001c1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1msHandle = osThreadCreate(osThread(Task1ms), NULL);
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 fc99 	bl	8005566 <osThreadCreate>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4a0a      	ldr	r2, [pc, #40]	@ (8001c60 <MX_FREERTOS_Init+0xc0>)
 8001c38:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001c3a:	bf00      	nop
 8001c3c:	3770      	adds	r7, #112	@ 0x70
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bdb0      	pop	{r4, r5, r7, pc}
 8001c42:	bf00      	nop
 8001c44:	08006a60 	.word	0x08006a60
 8001c48:	20000140 	.word	0x20000140
 8001c4c:	08006a88 	.word	0x08006a88
 8001c50:	20000144 	.word	0x20000144
 8001c54:	08006ab0 	.word	0x08006ab0
 8001c58:	20000148 	.word	0x20000148
 8001c5c:	08006ad4 	.word	0x08006ad4
 8001c60:	2000014c 	.word	0x2000014c

08001c64 <Task_10ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_10ms */
void Task_10ms(void const * argument)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_10ms */
	task_init_10ms();
 8001c6c:	f7fe fc8f 	bl	800058e <task_init_10ms>
  /* Infinite loop */
  for(;;)
  {
	task_10ms();
 8001c70:	f7fe fc94 	bl	800059c <task_10ms>
    osDelay(10);
 8001c74:	200a      	movs	r0, #10
 8001c76:	f003 fcc2 	bl	80055fe <osDelay>
	task_10ms();
 8001c7a:	bf00      	nop
 8001c7c:	e7f8      	b.n	8001c70 <Task_10ms+0xc>

08001c7e <Task_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_100ms */
void Task_100ms(void const * argument)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_100ms */
	task_init_100ms();
 8001c86:	f7fe fc90 	bl	80005aa <task_init_100ms>
  /* Infinite loop */
  for(;;)
  {
	task_100ms();
 8001c8a:	f7fe fc95 	bl	80005b8 <task_100ms>
    osDelay(100);
 8001c8e:	2064      	movs	r0, #100	@ 0x64
 8001c90:	f003 fcb5 	bl	80055fe <osDelay>
	task_100ms();
 8001c94:	bf00      	nop
 8001c96:	e7f8      	b.n	8001c8a <Task_100ms+0xc>

08001c98 <Task_1000ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1000ms */
void Task_1000ms(void const * argument)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1000ms */
	task_init_1000ms();
 8001ca0:	f7fe fc91 	bl	80005c6 <task_init_1000ms>
  /* Infinite loop */
  for(;;)
  {
	task_1000ms();
 8001ca4:	f7fe fc96 	bl	80005d4 <task_1000ms>
    osDelay(1000);
 8001ca8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cac:	f003 fca7 	bl	80055fe <osDelay>
	task_1000ms();
 8001cb0:	bf00      	nop
 8001cb2:	e7f7      	b.n	8001ca4 <Task_1000ms+0xc>

08001cb4 <Task_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_1ms */
void Task_1ms(void const * argument)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_1ms */
	task_init_1ms();
 8001cbc:	f7fe fc58 	bl	8000570 <task_init_1ms>
  /* Infinite loop */
  for(;;)
  {
	task_1ms();
 8001cc0:	f7fe fc5d 	bl	800057e <task_1ms>
    osDelay(1);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f003 fc9a 	bl	80055fe <osDelay>
	task_1ms();
 8001cca:	bf00      	nop
 8001ccc:	e7f8      	b.n	8001cc0 <Task_1ms+0xc>
	...

08001cd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	@ 0x28
 8001cd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	4b32      	ldr	r3, [pc, #200]	@ (8001db4 <MX_GPIO_Init+0xe4>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a31      	ldr	r2, [pc, #196]	@ (8001db4 <MX_GPIO_Init+0xe4>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8001db4 <MX_GPIO_Init+0xe4>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b2b      	ldr	r3, [pc, #172]	@ (8001db4 <MX_GPIO_Init+0xe4>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a2a      	ldr	r2, [pc, #168]	@ (8001db4 <MX_GPIO_Init+0xe4>)
 8001d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b28      	ldr	r3, [pc, #160]	@ (8001db4 <MX_GPIO_Init+0xe4>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	4b24      	ldr	r3, [pc, #144]	@ (8001db4 <MX_GPIO_Init+0xe4>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	4a23      	ldr	r2, [pc, #140]	@ (8001db4 <MX_GPIO_Init+0xe4>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2e:	4b21      	ldr	r3, [pc, #132]	@ (8001db4 <MX_GPIO_Init+0xe4>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001db4 <MX_GPIO_Init+0xe4>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	4a1c      	ldr	r2, [pc, #112]	@ (8001db4 <MX_GPIO_Init+0xe4>)
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001db4 <MX_GPIO_Init+0xe4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP280_CSN_GPIO_Port, BMP280_CSN_Pin, GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d5c:	4816      	ldr	r0, [pc, #88]	@ (8001db8 <MX_GPIO_Init+0xe8>)
 8001d5e:	f001 f9d1 	bl	8003104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001d62:	2200      	movs	r2, #0
 8001d64:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001d68:	4814      	ldr	r0, [pc, #80]	@ (8001dbc <MX_GPIO_Init+0xec>)
 8001d6a:	f001 f9cb 	bl	8003104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP280_CSN_Pin;
 8001d6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d74:	2301      	movs	r3, #1
 8001d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMP280_CSN_GPIO_Port, &GPIO_InitStruct);
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	4619      	mov	r1, r3
 8001d86:	480c      	ldr	r0, [pc, #48]	@ (8001db8 <MX_GPIO_Init+0xe8>)
 8001d88:	f001 f838 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 8001d8c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d92:	2301      	movs	r3, #1
 8001d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	4805      	ldr	r0, [pc, #20]	@ (8001dbc <MX_GPIO_Init+0xec>)
 8001da6:	f001 f829 	bl	8002dfc <HAL_GPIO_Init>

}
 8001daa:	bf00      	nop
 8001dac:	3728      	adds	r7, #40	@ 0x28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020000 	.word	0x40020000
 8001dbc:	40020400 	.word	0x40020400

08001dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dc4:	f000 fb64 	bl	8002490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dc8:	f000 f812 	bl	8001df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dcc:	f7ff ff80 	bl	8001cd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dd0:	f7ff fe8e 	bl	8001af0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001dd4:	f000 f88c 	bl	8001ef0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001dd8:	f000 f8c0 	bl	8001f5c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  NRF24_init();
 8001ddc:	f7ff fdb6 	bl	800194c <NRF24_init>
  BMP280_init();
 8001de0:	f7ff f86c 	bl	8000ebc <BMP280_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001de4:	f7ff fedc 	bl	8001ba0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001de8:	f003 fbb6 	bl	8005558 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <main+0x2c>

08001df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b094      	sub	sp, #80	@ 0x50
 8001df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df6:	f107 0320 	add.w	r3, r7, #32
 8001dfa:	2230      	movs	r2, #48	@ 0x30
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 fdf0 	bl	80069e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	4b27      	ldr	r3, [pc, #156]	@ (8001eb8 <SystemClock_Config+0xc8>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1c:	4a26      	ldr	r2, [pc, #152]	@ (8001eb8 <SystemClock_Config+0xc8>)
 8001e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e24:	4b24      	ldr	r3, [pc, #144]	@ (8001eb8 <SystemClock_Config+0xc8>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e30:	2300      	movs	r3, #0
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	4b21      	ldr	r3, [pc, #132]	@ (8001ebc <SystemClock_Config+0xcc>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a20      	ldr	r2, [pc, #128]	@ (8001ebc <SystemClock_Config+0xcc>)
 8001e3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b1e      	ldr	r3, [pc, #120]	@ (8001ebc <SystemClock_Config+0xcc>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e50:	2301      	movs	r3, #1
 8001e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e54:	2310      	movs	r3, #16
 8001e56:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e60:	2308      	movs	r3, #8
 8001e62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001e64:	2364      	movs	r3, #100	@ 0x64
 8001e66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e70:	f107 0320 	add.w	r3, r7, #32
 8001e74:	4618      	mov	r0, r3
 8001e76:	f001 f95f 	bl	8003138 <HAL_RCC_OscConfig>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e80:	f000 f830 	bl	8001ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e84:	230f      	movs	r3, #15
 8001e86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e9a:	f107 030c 	add.w	r3, r7, #12
 8001e9e:	2103      	movs	r1, #3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f001 fbc1 	bl	8003628 <HAL_RCC_ClockConfig>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001eac:	f000 f81a 	bl	8001ee4 <Error_Handler>
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	3750      	adds	r7, #80	@ 0x50
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40007000 	.word	0x40007000

08001ec0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d101      	bne.n	8001ed6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ed2:	f000 faff 	bl	80024d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40014800 	.word	0x40014800

08001ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee8:	b672      	cpsid	i
}
 8001eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <Error_Handler+0x8>

08001ef0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ef4:	4b17      	ldr	r3, [pc, #92]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001ef6:	4a18      	ldr	r2, [pc, #96]	@ (8001f58 <MX_SPI1_Init+0x68>)
 8001ef8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001efa:	4b16      	ldr	r3, [pc, #88]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001efc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f02:	4b14      	ldr	r3, [pc, #80]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f22:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f24:	2218      	movs	r2, #24
 8001f26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f28:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f2e:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f34:	4b07      	ldr	r3, [pc, #28]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f3a:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f3c:	220a      	movs	r2, #10
 8001f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f40:	4804      	ldr	r0, [pc, #16]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f42:	f001 fdaf 	bl	8003aa4 <HAL_SPI_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f4c:	f7ff ffca 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	200003a4 	.word	0x200003a4
 8001f58:	40013000 	.word	0x40013000

08001f5c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001f60:	4b17      	ldr	r3, [pc, #92]	@ (8001fc0 <MX_SPI2_Init+0x64>)
 8001f62:	4a18      	ldr	r2, [pc, #96]	@ (8001fc4 <MX_SPI2_Init+0x68>)
 8001f64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f66:	4b16      	ldr	r3, [pc, #88]	@ (8001fc0 <MX_SPI2_Init+0x64>)
 8001f68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f6e:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <MX_SPI2_Init+0x64>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f74:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <MX_SPI2_Init+0x64>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f7a:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <MX_SPI2_Init+0x64>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f80:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc0 <MX_SPI2_Init+0x64>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <MX_SPI2_Init+0x64>)
 8001f88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <MX_SPI2_Init+0x64>)
 8001f90:	2218      	movs	r2, #24
 8001f92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f94:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc0 <MX_SPI2_Init+0x64>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f9a:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <MX_SPI2_Init+0x64>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa0:	4b07      	ldr	r3, [pc, #28]	@ (8001fc0 <MX_SPI2_Init+0x64>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001fa6:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <MX_SPI2_Init+0x64>)
 8001fa8:	220a      	movs	r2, #10
 8001faa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fac:	4804      	ldr	r0, [pc, #16]	@ (8001fc0 <MX_SPI2_Init+0x64>)
 8001fae:	f001 fd79 	bl	8003aa4 <HAL_SPI_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001fb8:	f7ff ff94 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	200003fc 	.word	0x200003fc
 8001fc4:	40003800 	.word	0x40003800

08001fc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	@ 0x30
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a8a      	ldr	r2, [pc, #552]	@ (8002210 <HAL_SPI_MspInit+0x248>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	f040 8089 	bne.w	80020fe <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	4b88      	ldr	r3, [pc, #544]	@ (8002214 <HAL_SPI_MspInit+0x24c>)
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff4:	4a87      	ldr	r2, [pc, #540]	@ (8002214 <HAL_SPI_MspInit+0x24c>)
 8001ff6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ffa:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ffc:	4b85      	ldr	r3, [pc, #532]	@ (8002214 <HAL_SPI_MspInit+0x24c>)
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002000:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	4b81      	ldr	r3, [pc, #516]	@ (8002214 <HAL_SPI_MspInit+0x24c>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002010:	4a80      	ldr	r2, [pc, #512]	@ (8002214 <HAL_SPI_MspInit+0x24c>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6313      	str	r3, [r2, #48]	@ 0x30
 8002018:	4b7e      	ldr	r3, [pc, #504]	@ (8002214 <HAL_SPI_MspInit+0x24c>)
 800201a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MISO_Pin|NRF24_MOSI_Pin;
 8002024:	23e0      	movs	r3, #224	@ 0xe0
 8002026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002030:	2303      	movs	r3, #3
 8002032:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002034:	2305      	movs	r3, #5
 8002036:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	4876      	ldr	r0, [pc, #472]	@ (8002218 <HAL_SPI_MspInit+0x250>)
 8002040:	f000 fedc 	bl	8002dfc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002044:	4b75      	ldr	r3, [pc, #468]	@ (800221c <HAL_SPI_MspInit+0x254>)
 8002046:	4a76      	ldr	r2, [pc, #472]	@ (8002220 <HAL_SPI_MspInit+0x258>)
 8002048:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800204a:	4b74      	ldr	r3, [pc, #464]	@ (800221c <HAL_SPI_MspInit+0x254>)
 800204c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002050:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002052:	4b72      	ldr	r3, [pc, #456]	@ (800221c <HAL_SPI_MspInit+0x254>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002058:	4b70      	ldr	r3, [pc, #448]	@ (800221c <HAL_SPI_MspInit+0x254>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800205e:	4b6f      	ldr	r3, [pc, #444]	@ (800221c <HAL_SPI_MspInit+0x254>)
 8002060:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002064:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002066:	4b6d      	ldr	r3, [pc, #436]	@ (800221c <HAL_SPI_MspInit+0x254>)
 8002068:	2200      	movs	r2, #0
 800206a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800206c:	4b6b      	ldr	r3, [pc, #428]	@ (800221c <HAL_SPI_MspInit+0x254>)
 800206e:	2200      	movs	r2, #0
 8002070:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002072:	4b6a      	ldr	r3, [pc, #424]	@ (800221c <HAL_SPI_MspInit+0x254>)
 8002074:	2200      	movs	r2, #0
 8002076:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002078:	4b68      	ldr	r3, [pc, #416]	@ (800221c <HAL_SPI_MspInit+0x254>)
 800207a:	2200      	movs	r2, #0
 800207c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800207e:	4b67      	ldr	r3, [pc, #412]	@ (800221c <HAL_SPI_MspInit+0x254>)
 8002080:	2200      	movs	r2, #0
 8002082:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002084:	4865      	ldr	r0, [pc, #404]	@ (800221c <HAL_SPI_MspInit+0x254>)
 8002086:	f000 fb27 	bl	80026d8 <HAL_DMA_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002090:	f7ff ff28 	bl	8001ee4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a61      	ldr	r2, [pc, #388]	@ (800221c <HAL_SPI_MspInit+0x254>)
 8002098:	64da      	str	r2, [r3, #76]	@ 0x4c
 800209a:	4a60      	ldr	r2, [pc, #384]	@ (800221c <HAL_SPI_MspInit+0x254>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80020a0:	4b60      	ldr	r3, [pc, #384]	@ (8002224 <HAL_SPI_MspInit+0x25c>)
 80020a2:	4a61      	ldr	r2, [pc, #388]	@ (8002228 <HAL_SPI_MspInit+0x260>)
 80020a4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80020a6:	4b5f      	ldr	r3, [pc, #380]	@ (8002224 <HAL_SPI_MspInit+0x25c>)
 80020a8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80020ac:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002224 <HAL_SPI_MspInit+0x25c>)
 80020b0:	2240      	movs	r2, #64	@ 0x40
 80020b2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b4:	4b5b      	ldr	r3, [pc, #364]	@ (8002224 <HAL_SPI_MspInit+0x25c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002224 <HAL_SPI_MspInit+0x25c>)
 80020bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020c0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020c2:	4b58      	ldr	r3, [pc, #352]	@ (8002224 <HAL_SPI_MspInit+0x25c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020c8:	4b56      	ldr	r3, [pc, #344]	@ (8002224 <HAL_SPI_MspInit+0x25c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80020ce:	4b55      	ldr	r3, [pc, #340]	@ (8002224 <HAL_SPI_MspInit+0x25c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020d4:	4b53      	ldr	r3, [pc, #332]	@ (8002224 <HAL_SPI_MspInit+0x25c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020da:	4b52      	ldr	r3, [pc, #328]	@ (8002224 <HAL_SPI_MspInit+0x25c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80020e0:	4850      	ldr	r0, [pc, #320]	@ (8002224 <HAL_SPI_MspInit+0x25c>)
 80020e2:	f000 faf9 	bl	80026d8 <HAL_DMA_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80020ec:	f7ff fefa 	bl	8001ee4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a4c      	ldr	r2, [pc, #304]	@ (8002224 <HAL_SPI_MspInit+0x25c>)
 80020f4:	649a      	str	r2, [r3, #72]	@ 0x48
 80020f6:	4a4b      	ldr	r2, [pc, #300]	@ (8002224 <HAL_SPI_MspInit+0x25c>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80020fc:	e084      	b.n	8002208 <HAL_SPI_MspInit+0x240>
  else if(spiHandle->Instance==SPI2)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a4a      	ldr	r2, [pc, #296]	@ (800222c <HAL_SPI_MspInit+0x264>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d17f      	bne.n	8002208 <HAL_SPI_MspInit+0x240>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	4b41      	ldr	r3, [pc, #260]	@ (8002214 <HAL_SPI_MspInit+0x24c>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	4a40      	ldr	r2, [pc, #256]	@ (8002214 <HAL_SPI_MspInit+0x24c>)
 8002112:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002116:	6413      	str	r3, [r2, #64]	@ 0x40
 8002118:	4b3e      	ldr	r3, [pc, #248]	@ (8002214 <HAL_SPI_MspInit+0x24c>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	4b3a      	ldr	r3, [pc, #232]	@ (8002214 <HAL_SPI_MspInit+0x24c>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212c:	4a39      	ldr	r2, [pc, #228]	@ (8002214 <HAL_SPI_MspInit+0x24c>)
 800212e:	f043 0304 	orr.w	r3, r3, #4
 8002132:	6313      	str	r3, [r2, #48]	@ 0x30
 8002134:	4b37      	ldr	r3, [pc, #220]	@ (8002214 <HAL_SPI_MspInit+0x24c>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	4b33      	ldr	r3, [pc, #204]	@ (8002214 <HAL_SPI_MspInit+0x24c>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002148:	4a32      	ldr	r2, [pc, #200]	@ (8002214 <HAL_SPI_MspInit+0x24c>)
 800214a:	f043 0302 	orr.w	r3, r3, #2
 800214e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002150:	4b30      	ldr	r3, [pc, #192]	@ (8002214 <HAL_SPI_MspInit+0x24c>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP280_MISO_Pin|BMP280_MOSI_Pin;
 800215c:	230c      	movs	r3, #12
 800215e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002168:	2303      	movs	r3, #3
 800216a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800216c:	2305      	movs	r3, #5
 800216e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002170:	f107 031c 	add.w	r3, r7, #28
 8002174:	4619      	mov	r1, r3
 8002176:	482e      	ldr	r0, [pc, #184]	@ (8002230 <HAL_SPI_MspInit+0x268>)
 8002178:	f000 fe40 	bl	8002dfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BMP280_SCK_Pin;
 800217c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218a:	2303      	movs	r3, #3
 800218c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800218e:	2305      	movs	r3, #5
 8002190:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BMP280_SCK_GPIO_Port, &GPIO_InitStruct);
 8002192:	f107 031c 	add.w	r3, r7, #28
 8002196:	4619      	mov	r1, r3
 8002198:	4826      	ldr	r0, [pc, #152]	@ (8002234 <HAL_SPI_MspInit+0x26c>)
 800219a:	f000 fe2f 	bl	8002dfc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800219e:	4b26      	ldr	r3, [pc, #152]	@ (8002238 <HAL_SPI_MspInit+0x270>)
 80021a0:	4a26      	ldr	r2, [pc, #152]	@ (800223c <HAL_SPI_MspInit+0x274>)
 80021a2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80021a4:	4b24      	ldr	r3, [pc, #144]	@ (8002238 <HAL_SPI_MspInit+0x270>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021aa:	4b23      	ldr	r3, [pc, #140]	@ (8002238 <HAL_SPI_MspInit+0x270>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b0:	4b21      	ldr	r3, [pc, #132]	@ (8002238 <HAL_SPI_MspInit+0x270>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021b6:	4b20      	ldr	r3, [pc, #128]	@ (8002238 <HAL_SPI_MspInit+0x270>)
 80021b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021bc:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021be:	4b1e      	ldr	r3, [pc, #120]	@ (8002238 <HAL_SPI_MspInit+0x270>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002238 <HAL_SPI_MspInit+0x270>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80021ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002238 <HAL_SPI_MspInit+0x270>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021d0:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <HAL_SPI_MspInit+0x270>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021d6:	4b18      	ldr	r3, [pc, #96]	@ (8002238 <HAL_SPI_MspInit+0x270>)
 80021d8:	2200      	movs	r2, #0
 80021da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80021dc:	4816      	ldr	r0, [pc, #88]	@ (8002238 <HAL_SPI_MspInit+0x270>)
 80021de:	f000 fa7b 	bl	80026d8 <HAL_DMA_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_SPI_MspInit+0x224>
      Error_Handler();
 80021e8:	f7ff fe7c 	bl	8001ee4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a12      	ldr	r2, [pc, #72]	@ (8002238 <HAL_SPI_MspInit+0x270>)
 80021f0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80021f2:	4a11      	ldr	r2, [pc, #68]	@ (8002238 <HAL_SPI_MspInit+0x270>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80021f8:	2200      	movs	r2, #0
 80021fa:	2105      	movs	r1, #5
 80021fc:	2024      	movs	r0, #36	@ 0x24
 80021fe:	f000 fa41 	bl	8002684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002202:	2024      	movs	r0, #36	@ 0x24
 8002204:	f000 fa5a 	bl	80026bc <HAL_NVIC_EnableIRQ>
}
 8002208:	bf00      	nop
 800220a:	3730      	adds	r7, #48	@ 0x30
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40013000 	.word	0x40013000
 8002214:	40023800 	.word	0x40023800
 8002218:	40020000 	.word	0x40020000
 800221c:	20000454 	.word	0x20000454
 8002220:	40026410 	.word	0x40026410
 8002224:	200004b4 	.word	0x200004b4
 8002228:	40026440 	.word	0x40026440
 800222c:	40003800 	.word	0x40003800
 8002230:	40020800 	.word	0x40020800
 8002234:	40020400 	.word	0x40020400
 8002238:	20000514 	.word	0x20000514
 800223c:	40026058 	.word	0x40026058

08002240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	4b12      	ldr	r3, [pc, #72]	@ (8002294 <HAL_MspInit+0x54>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	4a11      	ldr	r2, [pc, #68]	@ (8002294 <HAL_MspInit+0x54>)
 8002250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002254:	6453      	str	r3, [r2, #68]	@ 0x44
 8002256:	4b0f      	ldr	r3, [pc, #60]	@ (8002294 <HAL_MspInit+0x54>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <HAL_MspInit+0x54>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	4a0a      	ldr	r2, [pc, #40]	@ (8002294 <HAL_MspInit+0x54>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002270:	6413      	str	r3, [r2, #64]	@ 0x40
 8002272:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <HAL_MspInit+0x54>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	210f      	movs	r1, #15
 8002282:	f06f 0001 	mvn.w	r0, #1
 8002286:	f000 f9fd 	bl	8002684 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800

08002298 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08c      	sub	sp, #48	@ 0x30
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80022a8:	2300      	movs	r3, #0
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002368 <HAL_InitTick+0xd0>)
 80022ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002368 <HAL_InitTick+0xd0>)
 80022b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80022b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002368 <HAL_InitTick+0xd0>)
 80022ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022c4:	f107 020c 	add.w	r2, r7, #12
 80022c8:	f107 0310 	add.w	r3, r7, #16
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f001 fbb6 	bl	8003a40 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80022d4:	f001 fba0 	bl	8003a18 <HAL_RCC_GetPCLK2Freq>
 80022d8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022dc:	4a23      	ldr	r2, [pc, #140]	@ (800236c <HAL_InitTick+0xd4>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0c9b      	lsrs	r3, r3, #18
 80022e4:	3b01      	subs	r3, #1
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80022e8:	4b21      	ldr	r3, [pc, #132]	@ (8002370 <HAL_InitTick+0xd8>)
 80022ea:	4a22      	ldr	r2, [pc, #136]	@ (8002374 <HAL_InitTick+0xdc>)
 80022ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80022ee:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <HAL_InitTick+0xd8>)
 80022f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022f4:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80022f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002370 <HAL_InitTick+0xd8>)
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80022fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002370 <HAL_InitTick+0xd8>)
 80022fe:	2200      	movs	r2, #0
 8002300:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002302:	4b1b      	ldr	r3, [pc, #108]	@ (8002370 <HAL_InitTick+0xd8>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002308:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <HAL_InitTick+0xd8>)
 800230a:	2200      	movs	r2, #0
 800230c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800230e:	4818      	ldr	r0, [pc, #96]	@ (8002370 <HAL_InitTick+0xd8>)
 8002310:	f002 fe96 	bl	8005040 <HAL_TIM_Base_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800231a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800231e:	2b00      	cmp	r3, #0
 8002320:	d11b      	bne.n	800235a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8002322:	4813      	ldr	r0, [pc, #76]	@ (8002370 <HAL_InitTick+0xd8>)
 8002324:	f002 fee6 	bl	80050f4 <HAL_TIM_Base_Start_IT>
 8002328:	4603      	mov	r3, r0
 800232a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800232e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002332:	2b00      	cmp	r3, #0
 8002334:	d111      	bne.n	800235a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002336:	201a      	movs	r0, #26
 8002338:	f000 f9c0 	bl	80026bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b0f      	cmp	r3, #15
 8002340:	d808      	bhi.n	8002354 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8002342:	2200      	movs	r2, #0
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	201a      	movs	r0, #26
 8002348:	f000 f99c 	bl	8002684 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800234c:	4a0a      	ldr	r2, [pc, #40]	@ (8002378 <HAL_InitTick+0xe0>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e002      	b.n	800235a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800235a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800235e:	4618      	mov	r0, r3
 8002360:	3730      	adds	r7, #48	@ 0x30
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	431bde83 	.word	0x431bde83
 8002370:	20000574 	.word	0x20000574
 8002374:	40014800 	.word	0x40014800
 8002378:	20000004 	.word	0x20000004

0800237c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002380:	bf00      	nop
 8002382:	e7fd      	b.n	8002380 <NMI_Handler+0x4>

08002384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002388:	bf00      	nop
 800238a:	e7fd      	b.n	8002388 <HardFault_Handler+0x4>

0800238c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002390:	bf00      	nop
 8002392:	e7fd      	b.n	8002390 <MemManage_Handler+0x4>

08002394 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <BusFault_Handler+0x4>

0800239c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <UsageFault_Handler+0x4>

080023a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80023b8:	4802      	ldr	r0, [pc, #8]	@ (80023c4 <DMA1_Stream3_IRQHandler+0x10>)
 80023ba:	f000 fab5 	bl	8002928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000514 	.word	0x20000514

080023c8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80023cc:	4802      	ldr	r0, [pc, #8]	@ (80023d8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80023ce:	f002 fef3 	bl	80051b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000574 	.word	0x20000574

080023dc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80023e0:	4802      	ldr	r0, [pc, #8]	@ (80023ec <SPI2_IRQHandler+0x10>)
 80023e2:	f002 fa63 	bl	80048ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200003fc 	.word	0x200003fc

080023f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80023f4:	4802      	ldr	r0, [pc, #8]	@ (8002400 <DMA2_Stream0_IRQHandler+0x10>)
 80023f6:	f000 fa97 	bl	8002928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000454 	.word	0x20000454

08002404 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002408:	4802      	ldr	r0, [pc, #8]	@ (8002414 <DMA2_Stream2_IRQHandler+0x10>)
 800240a:	f000 fa8d 	bl	8002928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200004b4 	.word	0x200004b4

08002418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800241c:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <SystemInit+0x20>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002422:	4a05      	ldr	r2, [pc, #20]	@ (8002438 <SystemInit+0x20>)
 8002424:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002428:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800243c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002474 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002440:	f7ff ffea 	bl	8002418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002444:	480c      	ldr	r0, [pc, #48]	@ (8002478 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002446:	490d      	ldr	r1, [pc, #52]	@ (800247c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002448:	4a0d      	ldr	r2, [pc, #52]	@ (8002480 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800244c:	e002      	b.n	8002454 <LoopCopyDataInit>

0800244e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800244e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002452:	3304      	adds	r3, #4

08002454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002458:	d3f9      	bcc.n	800244e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245a:	4a0a      	ldr	r2, [pc, #40]	@ (8002484 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800245c:	4c0a      	ldr	r4, [pc, #40]	@ (8002488 <LoopFillZerobss+0x22>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002460:	e001      	b.n	8002466 <LoopFillZerobss>

08002462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002464:	3204      	adds	r2, #4

08002466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002468:	d3fb      	bcc.n	8002462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800246a:	f004 fac3 	bl	80069f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800246e:	f7ff fca7 	bl	8001dc0 <main>
  bx  lr    
 8002472:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002474:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800247c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002480:	08006b28 	.word	0x08006b28
  ldr r2, =_sbss
 8002484:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002488:	20004314 	.word	0x20004314

0800248c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800248c:	e7fe      	b.n	800248c <ADC_IRQHandler>
	...

08002490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002494:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <HAL_Init+0x40>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0d      	ldr	r2, [pc, #52]	@ (80024d0 <HAL_Init+0x40>)
 800249a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800249e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024a0:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <HAL_Init+0x40>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0a      	ldr	r2, [pc, #40]	@ (80024d0 <HAL_Init+0x40>)
 80024a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ac:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <HAL_Init+0x40>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a07      	ldr	r2, [pc, #28]	@ (80024d0 <HAL_Init+0x40>)
 80024b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b8:	2003      	movs	r0, #3
 80024ba:	f000 f8d8 	bl	800266e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024be:	200f      	movs	r0, #15
 80024c0:	f7ff feea 	bl	8002298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c4:	f7ff febc 	bl	8002240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023c00 	.word	0x40023c00

080024d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d8:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_IncTick+0x20>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <HAL_IncTick+0x24>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	4a04      	ldr	r2, [pc, #16]	@ (80024f8 <HAL_IncTick+0x24>)
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000008 	.word	0x20000008
 80024f8:	200005bc 	.word	0x200005bc

080024fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b03      	ldr	r3, [pc, #12]	@ (8002510 <HAL_GetTick+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	200005bc 	.word	0x200005bc

08002514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002524:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002530:	4013      	ands	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800253c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002546:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	60d3      	str	r3, [r2, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002560:	4b04      	ldr	r3, [pc, #16]	@ (8002574 <__NVIC_GetPriorityGrouping+0x18>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 0307 	and.w	r3, r3, #7
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	2b00      	cmp	r3, #0
 8002588:	db0b      	blt.n	80025a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	f003 021f 	and.w	r2, r3, #31
 8002590:	4907      	ldr	r1, [pc, #28]	@ (80025b0 <__NVIC_EnableIRQ+0x38>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2001      	movs	r0, #1
 800259a:	fa00 f202 	lsl.w	r2, r0, r2
 800259e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e100 	.word	0xe000e100

080025b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	db0a      	blt.n	80025de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	490c      	ldr	r1, [pc, #48]	@ (8002600 <__NVIC_SetPriority+0x4c>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	0112      	lsls	r2, r2, #4
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	440b      	add	r3, r1
 80025d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025dc:	e00a      	b.n	80025f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4908      	ldr	r1, [pc, #32]	@ (8002604 <__NVIC_SetPriority+0x50>)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	3b04      	subs	r3, #4
 80025ec:	0112      	lsls	r2, r2, #4
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	440b      	add	r3, r1
 80025f2:	761a      	strb	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000e100 	.word	0xe000e100
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	@ 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f1c3 0307 	rsb	r3, r3, #7
 8002622:	2b04      	cmp	r3, #4
 8002624:	bf28      	it	cs
 8002626:	2304      	movcs	r3, #4
 8002628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3304      	adds	r3, #4
 800262e:	2b06      	cmp	r3, #6
 8002630:	d902      	bls.n	8002638 <NVIC_EncodePriority+0x30>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3b03      	subs	r3, #3
 8002636:	e000      	b.n	800263a <NVIC_EncodePriority+0x32>
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	f04f 32ff 	mov.w	r2, #4294967295
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	401a      	ands	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002650:	f04f 31ff 	mov.w	r1, #4294967295
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43d9      	mvns	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	4313      	orrs	r3, r2
         );
}
 8002662:	4618      	mov	r0, r3
 8002664:	3724      	adds	r7, #36	@ 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff ff4c 	bl	8002514 <__NVIC_SetPriorityGrouping>
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002696:	f7ff ff61 	bl	800255c <__NVIC_GetPriorityGrouping>
 800269a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	6978      	ldr	r0, [r7, #20]
 80026a2:	f7ff ffb1 	bl	8002608 <NVIC_EncodePriority>
 80026a6:	4602      	mov	r2, r0
 80026a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ac:	4611      	mov	r1, r2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff80 	bl	80025b4 <__NVIC_SetPriority>
}
 80026b4:	bf00      	nop
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff ff54 	bl	8002578 <__NVIC_EnableIRQ>
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7ff ff0a 	bl	80024fc <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e099      	b.n	8002828 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002714:	e00f      	b.n	8002736 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002716:	f7ff fef1 	bl	80024fc <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b05      	cmp	r3, #5
 8002722:	d908      	bls.n	8002736 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2220      	movs	r2, #32
 8002728:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2203      	movs	r2, #3
 800272e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e078      	b.n	8002828 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1e8      	bne.n	8002716 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4b38      	ldr	r3, [pc, #224]	@ (8002830 <HAL_DMA_Init+0x158>)
 8002750:	4013      	ands	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002762:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	2b04      	cmp	r3, #4
 800278e:	d107      	bne.n	80027a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	4313      	orrs	r3, r2
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f023 0307 	bic.w	r3, r3, #7
 80027b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d117      	bne.n	80027fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00e      	beq.n	80027fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fa91 	bl	8002d04 <DMA_CheckFifoParam>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2240      	movs	r2, #64	@ 0x40
 80027ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80027f6:	2301      	movs	r3, #1
 80027f8:	e016      	b.n	8002828 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fa48 	bl	8002c98 <DMA_CalcBaseAndBitshift>
 8002808:	4603      	mov	r3, r0
 800280a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002810:	223f      	movs	r2, #63	@ 0x3f
 8002812:	409a      	lsls	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	f010803f 	.word	0xf010803f

08002834 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_DMA_Start_IT+0x26>
 8002856:	2302      	movs	r3, #2
 8002858:	e040      	b.n	80028dc <HAL_DMA_Start_IT+0xa8>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d12f      	bne.n	80028ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2202      	movs	r2, #2
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f9da 	bl	8002c3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288c:	223f      	movs	r2, #63	@ 0x3f
 800288e:	409a      	lsls	r2, r3
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0216 	orr.w	r2, r2, #22
 80028a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0208 	orr.w	r2, r2, #8
 80028ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e005      	b.n	80028da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028d6:	2302      	movs	r3, #2
 80028d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028da:	7dfb      	ldrb	r3, [r7, #23]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d004      	beq.n	8002902 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2280      	movs	r2, #128	@ 0x80
 80028fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e00c      	b.n	800291c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2205      	movs	r2, #5
 8002906:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0201 	bic.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002934:	4b8e      	ldr	r3, [pc, #568]	@ (8002b70 <HAL_DMA_IRQHandler+0x248>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a8e      	ldr	r2, [pc, #568]	@ (8002b74 <HAL_DMA_IRQHandler+0x24c>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	0a9b      	lsrs	r3, r3, #10
 8002940:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002946:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002952:	2208      	movs	r2, #8
 8002954:	409a      	lsls	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4013      	ands	r3, r2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d01a      	beq.n	8002994 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d013      	beq.n	8002994 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0204 	bic.w	r2, r2, #4
 800297a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002980:	2208      	movs	r2, #8
 8002982:	409a      	lsls	r2, r3
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298c:	f043 0201 	orr.w	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002998:	2201      	movs	r2, #1
 800299a:	409a      	lsls	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d012      	beq.n	80029ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b6:	2201      	movs	r2, #1
 80029b8:	409a      	lsls	r2, r3
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c2:	f043 0202 	orr.w	r2, r3, #2
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ce:	2204      	movs	r2, #4
 80029d0:	409a      	lsls	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d012      	beq.n	8002a00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00b      	beq.n	8002a00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ec:	2204      	movs	r2, #4
 80029ee:	409a      	lsls	r2, r3
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f8:	f043 0204 	orr.w	r2, r3, #4
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a04:	2210      	movs	r2, #16
 8002a06:	409a      	lsls	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d043      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d03c      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a22:	2210      	movs	r2, #16
 8002a24:	409a      	lsls	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d018      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d108      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d024      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4798      	blx	r3
 8002a56:	e01f      	b.n	8002a98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01b      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
 8002a68:	e016      	b.n	8002a98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d107      	bne.n	8002a88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0208 	bic.w	r2, r2, #8
 8002a86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 808f 	beq.w	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8087 	beq.w	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abe:	2220      	movs	r2, #32
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b05      	cmp	r3, #5
 8002ad0:	d136      	bne.n	8002b40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0216 	bic.w	r2, r2, #22
 8002ae0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002af0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d103      	bne.n	8002b02 <HAL_DMA_IRQHandler+0x1da>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d007      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0208 	bic.w	r2, r2, #8
 8002b10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b16:	223f      	movs	r2, #63	@ 0x3f
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d07e      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
        }
        return;
 8002b3e:	e079      	b.n	8002c34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01d      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10d      	bne.n	8002b78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d031      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
 8002b6c:	e02c      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
 8002b6e:	bf00      	nop
 8002b70:	20000000 	.word	0x20000000
 8002b74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d023      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
 8002b88:	e01e      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10f      	bne.n	8002bb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0210 	bic.w	r2, r2, #16
 8002ba6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d032      	beq.n	8002c36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d022      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2205      	movs	r2, #5
 8002be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0201 	bic.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d307      	bcc.n	8002c10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f2      	bne.n	8002bf4 <HAL_DMA_IRQHandler+0x2cc>
 8002c0e:	e000      	b.n	8002c12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d005      	beq.n	8002c36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
 8002c32:	e000      	b.n	8002c36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c34:	bf00      	nop
    }
  }
}
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b40      	cmp	r3, #64	@ 0x40
 8002c68:	d108      	bne.n	8002c7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c7a:	e007      	b.n	8002c8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	60da      	str	r2, [r3, #12]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	3b10      	subs	r3, #16
 8002ca8:	4a14      	ldr	r2, [pc, #80]	@ (8002cfc <DMA_CalcBaseAndBitshift+0x64>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	091b      	lsrs	r3, r3, #4
 8002cb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cb2:	4a13      	ldr	r2, [pc, #76]	@ (8002d00 <DMA_CalcBaseAndBitshift+0x68>)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d909      	bls.n	8002cda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cce:	f023 0303 	bic.w	r3, r3, #3
 8002cd2:	1d1a      	adds	r2, r3, #4
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cd8:	e007      	b.n	8002cea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ce2:	f023 0303 	bic.w	r3, r3, #3
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	aaaaaaab 	.word	0xaaaaaaab
 8002d00:	08006b10 	.word	0x08006b10

08002d04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d11f      	bne.n	8002d5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d856      	bhi.n	8002dd2 <DMA_CheckFifoParam+0xce>
 8002d24:	a201      	add	r2, pc, #4	@ (adr r2, 8002d2c <DMA_CheckFifoParam+0x28>)
 8002d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2a:	bf00      	nop
 8002d2c:	08002d3d 	.word	0x08002d3d
 8002d30:	08002d4f 	.word	0x08002d4f
 8002d34:	08002d3d 	.word	0x08002d3d
 8002d38:	08002dd3 	.word	0x08002dd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d046      	beq.n	8002dd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4c:	e043      	b.n	8002dd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d56:	d140      	bne.n	8002dda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d5c:	e03d      	b.n	8002dda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d66:	d121      	bne.n	8002dac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d837      	bhi.n	8002dde <DMA_CheckFifoParam+0xda>
 8002d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d74 <DMA_CheckFifoParam+0x70>)
 8002d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d74:	08002d85 	.word	0x08002d85
 8002d78:	08002d8b 	.word	0x08002d8b
 8002d7c:	08002d85 	.word	0x08002d85
 8002d80:	08002d9d 	.word	0x08002d9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
      break;
 8002d88:	e030      	b.n	8002dec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d025      	beq.n	8002de2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d9a:	e022      	b.n	8002de2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002da4:	d11f      	bne.n	8002de6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002daa:	e01c      	b.n	8002de6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d903      	bls.n	8002dba <DMA_CheckFifoParam+0xb6>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d003      	beq.n	8002dc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002db8:	e018      	b.n	8002dec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8002dbe:	e015      	b.n	8002dec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00e      	beq.n	8002dea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd0:	e00b      	b.n	8002dea <DMA_CheckFifoParam+0xe6>
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e00a      	b.n	8002dec <DMA_CheckFifoParam+0xe8>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e008      	b.n	8002dec <DMA_CheckFifoParam+0xe8>
      break;
 8002dda:	bf00      	nop
 8002ddc:	e006      	b.n	8002dec <DMA_CheckFifoParam+0xe8>
      break;
 8002dde:	bf00      	nop
 8002de0:	e004      	b.n	8002dec <DMA_CheckFifoParam+0xe8>
      break;
 8002de2:	bf00      	nop
 8002de4:	e002      	b.n	8002dec <DMA_CheckFifoParam+0xe8>
      break;   
 8002de6:	bf00      	nop
 8002de8:	e000      	b.n	8002dec <DMA_CheckFifoParam+0xe8>
      break;
 8002dea:	bf00      	nop
    }
  } 
  
  return status; 
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop

08002dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	@ 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	e159      	b.n	80030cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e18:	2201      	movs	r2, #1
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	f040 8148 	bne.w	80030c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d005      	beq.n	8002e4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d130      	bne.n	8002eb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	2203      	movs	r2, #3
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e84:	2201      	movs	r2, #1
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f003 0201 	and.w	r2, r3, #1
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d017      	beq.n	8002eec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d123      	bne.n	8002f40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	08da      	lsrs	r2, r3, #3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3208      	adds	r2, #8
 8002f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	220f      	movs	r2, #15
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	08da      	lsrs	r2, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3208      	adds	r2, #8
 8002f3a:	69b9      	ldr	r1, [r7, #24]
 8002f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0203 	and.w	r2, r3, #3
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80a2 	beq.w	80030c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	4b57      	ldr	r3, [pc, #348]	@ (80030e4 <HAL_GPIO_Init+0x2e8>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8a:	4a56      	ldr	r2, [pc, #344]	@ (80030e4 <HAL_GPIO_Init+0x2e8>)
 8002f8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f92:	4b54      	ldr	r3, [pc, #336]	@ (80030e4 <HAL_GPIO_Init+0x2e8>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f9e:	4a52      	ldr	r2, [pc, #328]	@ (80030e8 <HAL_GPIO_Init+0x2ec>)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	089b      	lsrs	r3, r3, #2
 8002fa4:	3302      	adds	r3, #2
 8002fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	220f      	movs	r2, #15
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a49      	ldr	r2, [pc, #292]	@ (80030ec <HAL_GPIO_Init+0x2f0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d019      	beq.n	8002ffe <HAL_GPIO_Init+0x202>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a48      	ldr	r2, [pc, #288]	@ (80030f0 <HAL_GPIO_Init+0x2f4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d013      	beq.n	8002ffa <HAL_GPIO_Init+0x1fe>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a47      	ldr	r2, [pc, #284]	@ (80030f4 <HAL_GPIO_Init+0x2f8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00d      	beq.n	8002ff6 <HAL_GPIO_Init+0x1fa>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a46      	ldr	r2, [pc, #280]	@ (80030f8 <HAL_GPIO_Init+0x2fc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d007      	beq.n	8002ff2 <HAL_GPIO_Init+0x1f6>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a45      	ldr	r2, [pc, #276]	@ (80030fc <HAL_GPIO_Init+0x300>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d101      	bne.n	8002fee <HAL_GPIO_Init+0x1f2>
 8002fea:	2304      	movs	r3, #4
 8002fec:	e008      	b.n	8003000 <HAL_GPIO_Init+0x204>
 8002fee:	2307      	movs	r3, #7
 8002ff0:	e006      	b.n	8003000 <HAL_GPIO_Init+0x204>
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e004      	b.n	8003000 <HAL_GPIO_Init+0x204>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e002      	b.n	8003000 <HAL_GPIO_Init+0x204>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <HAL_GPIO_Init+0x204>
 8002ffe:	2300      	movs	r3, #0
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	f002 0203 	and.w	r2, r2, #3
 8003006:	0092      	lsls	r2, r2, #2
 8003008:	4093      	lsls	r3, r2
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003010:	4935      	ldr	r1, [pc, #212]	@ (80030e8 <HAL_GPIO_Init+0x2ec>)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	089b      	lsrs	r3, r3, #2
 8003016:	3302      	adds	r3, #2
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800301e:	4b38      	ldr	r3, [pc, #224]	@ (8003100 <HAL_GPIO_Init+0x304>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003042:	4a2f      	ldr	r2, [pc, #188]	@ (8003100 <HAL_GPIO_Init+0x304>)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003048:	4b2d      	ldr	r3, [pc, #180]	@ (8003100 <HAL_GPIO_Init+0x304>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800306c:	4a24      	ldr	r2, [pc, #144]	@ (8003100 <HAL_GPIO_Init+0x304>)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003072:	4b23      	ldr	r3, [pc, #140]	@ (8003100 <HAL_GPIO_Init+0x304>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003096:	4a1a      	ldr	r2, [pc, #104]	@ (8003100 <HAL_GPIO_Init+0x304>)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800309c:	4b18      	ldr	r3, [pc, #96]	@ (8003100 <HAL_GPIO_Init+0x304>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003100 <HAL_GPIO_Init+0x304>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3301      	adds	r3, #1
 80030ca:	61fb      	str	r3, [r7, #28]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	2b0f      	cmp	r3, #15
 80030d0:	f67f aea2 	bls.w	8002e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop
 80030d8:	3724      	adds	r7, #36	@ 0x24
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40013800 	.word	0x40013800
 80030ec:	40020000 	.word	0x40020000
 80030f0:	40020400 	.word	0x40020400
 80030f4:	40020800 	.word	0x40020800
 80030f8:	40020c00 	.word	0x40020c00
 80030fc:	40021000 	.word	0x40021000
 8003100:	40013c00 	.word	0x40013c00

08003104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	807b      	strh	r3, [r7, #2]
 8003110:	4613      	mov	r3, r2
 8003112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003114:	787b      	ldrb	r3, [r7, #1]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800311a:	887a      	ldrh	r2, [r7, #2]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003120:	e003      	b.n	800312a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003122:	887b      	ldrh	r3, [r7, #2]
 8003124:	041a      	lsls	r2, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	619a      	str	r2, [r3, #24]
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e267      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d075      	beq.n	8003242 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003156:	4b88      	ldr	r3, [pc, #544]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b04      	cmp	r3, #4
 8003160:	d00c      	beq.n	800317c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003162:	4b85      	ldr	r3, [pc, #532]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800316a:	2b08      	cmp	r3, #8
 800316c:	d112      	bne.n	8003194 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316e:	4b82      	ldr	r3, [pc, #520]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003176:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800317a:	d10b      	bne.n	8003194 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800317c:	4b7e      	ldr	r3, [pc, #504]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d05b      	beq.n	8003240 <HAL_RCC_OscConfig+0x108>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d157      	bne.n	8003240 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e242      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800319c:	d106      	bne.n	80031ac <HAL_RCC_OscConfig+0x74>
 800319e:	4b76      	ldr	r3, [pc, #472]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a75      	ldr	r2, [pc, #468]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e01d      	b.n	80031e8 <HAL_RCC_OscConfig+0xb0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x98>
 80031b6:	4b70      	ldr	r3, [pc, #448]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a6f      	ldr	r2, [pc, #444]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a6c      	ldr	r2, [pc, #432]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	e00b      	b.n	80031e8 <HAL_RCC_OscConfig+0xb0>
 80031d0:	4b69      	ldr	r3, [pc, #420]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a68      	ldr	r2, [pc, #416]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b66      	ldr	r3, [pc, #408]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a65      	ldr	r2, [pc, #404]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d013      	beq.n	8003218 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7ff f984 	bl	80024fc <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f8:	f7ff f980 	bl	80024fc <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	@ 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e207      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320a:	4b5b      	ldr	r3, [pc, #364]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0xc0>
 8003216:	e014      	b.n	8003242 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7ff f970 	bl	80024fc <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003220:	f7ff f96c 	bl	80024fc <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	@ 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e1f3      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003232:	4b51      	ldr	r3, [pc, #324]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0xe8>
 800323e:	e000      	b.n	8003242 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d063      	beq.n	8003316 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800324e:	4b4a      	ldr	r3, [pc, #296]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00b      	beq.n	8003272 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325a:	4b47      	ldr	r3, [pc, #284]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003262:	2b08      	cmp	r3, #8
 8003264:	d11c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003266:	4b44      	ldr	r3, [pc, #272]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d116      	bne.n	80032a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003272:	4b41      	ldr	r3, [pc, #260]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_RCC_OscConfig+0x152>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d001      	beq.n	800328a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e1c7      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328a:	4b3b      	ldr	r3, [pc, #236]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4937      	ldr	r1, [pc, #220]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 800329a:	4313      	orrs	r3, r2
 800329c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329e:	e03a      	b.n	8003316 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a8:	4b34      	ldr	r3, [pc, #208]	@ (800337c <HAL_RCC_OscConfig+0x244>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ae:	f7ff f925 	bl	80024fc <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b6:	f7ff f921 	bl	80024fc <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e1a8      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d4:	4b28      	ldr	r3, [pc, #160]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4925      	ldr	r1, [pc, #148]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]
 80032e8:	e015      	b.n	8003316 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ea:	4b24      	ldr	r3, [pc, #144]	@ (800337c <HAL_RCC_OscConfig+0x244>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7ff f904 	bl	80024fc <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f8:	f7ff f900 	bl	80024fc <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e187      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330a:	4b1b      	ldr	r3, [pc, #108]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d036      	beq.n	8003390 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d016      	beq.n	8003358 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332a:	4b15      	ldr	r3, [pc, #84]	@ (8003380 <HAL_RCC_OscConfig+0x248>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003330:	f7ff f8e4 	bl	80024fc <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003338:	f7ff f8e0 	bl	80024fc <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e167      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334a:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 800334c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x200>
 8003356:	e01b      	b.n	8003390 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003358:	4b09      	ldr	r3, [pc, #36]	@ (8003380 <HAL_RCC_OscConfig+0x248>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335e:	f7ff f8cd 	bl	80024fc <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003364:	e00e      	b.n	8003384 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003366:	f7ff f8c9 	bl	80024fc <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d907      	bls.n	8003384 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e150      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
 8003378:	40023800 	.word	0x40023800
 800337c:	42470000 	.word	0x42470000
 8003380:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003384:	4b88      	ldr	r3, [pc, #544]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1ea      	bne.n	8003366 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 8097 	beq.w	80034cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339e:	2300      	movs	r3, #0
 80033a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a2:	4b81      	ldr	r3, [pc, #516]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10f      	bne.n	80033ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	4b7d      	ldr	r3, [pc, #500]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	4a7c      	ldr	r2, [pc, #496]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80033be:	4b7a      	ldr	r3, [pc, #488]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ce:	4b77      	ldr	r3, [pc, #476]	@ (80035ac <HAL_RCC_OscConfig+0x474>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d118      	bne.n	800340c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033da:	4b74      	ldr	r3, [pc, #464]	@ (80035ac <HAL_RCC_OscConfig+0x474>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a73      	ldr	r2, [pc, #460]	@ (80035ac <HAL_RCC_OscConfig+0x474>)
 80033e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e6:	f7ff f889 	bl	80024fc <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ee:	f7ff f885 	bl	80024fc <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e10c      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	4b6a      	ldr	r3, [pc, #424]	@ (80035ac <HAL_RCC_OscConfig+0x474>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d106      	bne.n	8003422 <HAL_RCC_OscConfig+0x2ea>
 8003414:	4b64      	ldr	r3, [pc, #400]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003418:	4a63      	ldr	r2, [pc, #396]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003420:	e01c      	b.n	800345c <HAL_RCC_OscConfig+0x324>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b05      	cmp	r3, #5
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x30c>
 800342a:	4b5f      	ldr	r3, [pc, #380]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342e:	4a5e      	ldr	r2, [pc, #376]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003430:	f043 0304 	orr.w	r3, r3, #4
 8003434:	6713      	str	r3, [r2, #112]	@ 0x70
 8003436:	4b5c      	ldr	r3, [pc, #368]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343a:	4a5b      	ldr	r2, [pc, #364]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	6713      	str	r3, [r2, #112]	@ 0x70
 8003442:	e00b      	b.n	800345c <HAL_RCC_OscConfig+0x324>
 8003444:	4b58      	ldr	r3, [pc, #352]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003448:	4a57      	ldr	r2, [pc, #348]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 800344a:	f023 0301 	bic.w	r3, r3, #1
 800344e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003450:	4b55      	ldr	r3, [pc, #340]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003454:	4a54      	ldr	r2, [pc, #336]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003456:	f023 0304 	bic.w	r3, r3, #4
 800345a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d015      	beq.n	8003490 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7ff f84a 	bl	80024fc <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346a:	e00a      	b.n	8003482 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7ff f846 	bl	80024fc <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e0cb      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003482:	4b49      	ldr	r3, [pc, #292]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0ee      	beq.n	800346c <HAL_RCC_OscConfig+0x334>
 800348e:	e014      	b.n	80034ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003490:	f7ff f834 	bl	80024fc <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003496:	e00a      	b.n	80034ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003498:	f7ff f830 	bl	80024fc <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e0b5      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ae:	4b3e      	ldr	r3, [pc, #248]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1ee      	bne.n	8003498 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ba:	7dfb      	ldrb	r3, [r7, #23]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d105      	bne.n	80034cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c0:	4b39      	ldr	r3, [pc, #228]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	4a38      	ldr	r2, [pc, #224]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80a1 	beq.w	8003618 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034d6:	4b34      	ldr	r3, [pc, #208]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d05c      	beq.n	800359c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d141      	bne.n	800356e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b31      	ldr	r3, [pc, #196]	@ (80035b0 <HAL_RCC_OscConfig+0x478>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7ff f804 	bl	80024fc <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f8:	f7ff f800 	bl	80024fc <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e087      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	4b27      	ldr	r3, [pc, #156]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	019b      	lsls	r3, r3, #6
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	3b01      	subs	r3, #1
 8003530:	041b      	lsls	r3, r3, #16
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003538:	061b      	lsls	r3, r3, #24
 800353a:	491b      	ldr	r1, [pc, #108]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 800353c:	4313      	orrs	r3, r2
 800353e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003540:	4b1b      	ldr	r3, [pc, #108]	@ (80035b0 <HAL_RCC_OscConfig+0x478>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003546:	f7fe ffd9 	bl	80024fc <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354e:	f7fe ffd5 	bl	80024fc <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e05c      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003560:	4b11      	ldr	r3, [pc, #68]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x416>
 800356c:	e054      	b.n	8003618 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356e:	4b10      	ldr	r3, [pc, #64]	@ (80035b0 <HAL_RCC_OscConfig+0x478>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7fe ffc2 	bl	80024fc <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357c:	f7fe ffbe 	bl	80024fc <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e045      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x444>
 800359a:	e03d      	b.n	8003618 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e038      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40007000 	.word	0x40007000
 80035b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003624 <HAL_RCC_OscConfig+0x4ec>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d028      	beq.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d121      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d11a      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035e4:	4013      	ands	r3, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d111      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fa:	085b      	lsrs	r3, r3, #1
 80035fc:	3b01      	subs	r3, #1
 80035fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d107      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800

08003628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0cc      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800363c:	4b68      	ldr	r3, [pc, #416]	@ (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d90c      	bls.n	8003664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b65      	ldr	r3, [pc, #404]	@ (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b63      	ldr	r3, [pc, #396]	@ (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0b8      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d020      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800367c:	4b59      	ldr	r3, [pc, #356]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a58      	ldr	r2, [pc, #352]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003686:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003694:	4b53      	ldr	r3, [pc, #332]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a52      	ldr	r2, [pc, #328]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800369e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a0:	4b50      	ldr	r3, [pc, #320]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	494d      	ldr	r1, [pc, #308]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d044      	beq.n	8003748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	4b47      	ldr	r3, [pc, #284]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d119      	bne.n	8003706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e07f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d003      	beq.n	80036e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e6:	4b3f      	ldr	r3, [pc, #252]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e06f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f6:	4b3b      	ldr	r3, [pc, #236]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e067      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003706:	4b37      	ldr	r3, [pc, #220]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f023 0203 	bic.w	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	4934      	ldr	r1, [pc, #208]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	4313      	orrs	r3, r2
 8003716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003718:	f7fe fef0 	bl	80024fc <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	e00a      	b.n	8003736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003720:	f7fe feec 	bl	80024fc <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e04f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	4b2b      	ldr	r3, [pc, #172]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 020c 	and.w	r2, r3, #12
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	429a      	cmp	r2, r3
 8003746:	d1eb      	bne.n	8003720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003748:	4b25      	ldr	r3, [pc, #148]	@ (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d20c      	bcs.n	8003770 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b22      	ldr	r3, [pc, #136]	@ (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b20      	ldr	r3, [pc, #128]	@ (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e032      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800377c:	4b19      	ldr	r3, [pc, #100]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4916      	ldr	r1, [pc, #88]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800379a:	4b12      	ldr	r3, [pc, #72]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	490e      	ldr	r1, [pc, #56]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ae:	f000 f821 	bl	80037f4 <HAL_RCC_GetSysClockFreq>
 80037b2:	4602      	mov	r2, r0
 80037b4:	4b0b      	ldr	r3, [pc, #44]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	490a      	ldr	r1, [pc, #40]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c0>)
 80037c0:	5ccb      	ldrb	r3, [r1, r3]
 80037c2:	fa22 f303 	lsr.w	r3, r2, r3
 80037c6:	4a09      	ldr	r2, [pc, #36]	@ (80037ec <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ca:	4b09      	ldr	r3, [pc, #36]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe fd62 	bl	8002298 <HAL_InitTick>

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40023c00 	.word	0x40023c00
 80037e4:	40023800 	.word	0x40023800
 80037e8:	08006af8 	.word	0x08006af8
 80037ec:	20000000 	.word	0x20000000
 80037f0:	20000004 	.word	0x20000004

080037f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f8:	b094      	sub	sp, #80	@ 0x50
 80037fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003800:	2300      	movs	r3, #0
 8003802:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003804:	2300      	movs	r3, #0
 8003806:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800380c:	4b79      	ldr	r3, [pc, #484]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 030c 	and.w	r3, r3, #12
 8003814:	2b08      	cmp	r3, #8
 8003816:	d00d      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x40>
 8003818:	2b08      	cmp	r3, #8
 800381a:	f200 80e1 	bhi.w	80039e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0x34>
 8003822:	2b04      	cmp	r3, #4
 8003824:	d003      	beq.n	800382e <HAL_RCC_GetSysClockFreq+0x3a>
 8003826:	e0db      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003828:	4b73      	ldr	r3, [pc, #460]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800382a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800382c:	e0db      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800382e:	4b73      	ldr	r3, [pc, #460]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x208>)
 8003830:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003832:	e0d8      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003834:	4b6f      	ldr	r3, [pc, #444]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800383c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800383e:	4b6d      	ldr	r3, [pc, #436]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d063      	beq.n	8003912 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384a:	4b6a      	ldr	r3, [pc, #424]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	099b      	lsrs	r3, r3, #6
 8003850:	2200      	movs	r2, #0
 8003852:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003854:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385c:	633b      	str	r3, [r7, #48]	@ 0x30
 800385e:	2300      	movs	r3, #0
 8003860:	637b      	str	r3, [r7, #52]	@ 0x34
 8003862:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003866:	4622      	mov	r2, r4
 8003868:	462b      	mov	r3, r5
 800386a:	f04f 0000 	mov.w	r0, #0
 800386e:	f04f 0100 	mov.w	r1, #0
 8003872:	0159      	lsls	r1, r3, #5
 8003874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003878:	0150      	lsls	r0, r2, #5
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4621      	mov	r1, r4
 8003880:	1a51      	subs	r1, r2, r1
 8003882:	6139      	str	r1, [r7, #16]
 8003884:	4629      	mov	r1, r5
 8003886:	eb63 0301 	sbc.w	r3, r3, r1
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003898:	4659      	mov	r1, fp
 800389a:	018b      	lsls	r3, r1, #6
 800389c:	4651      	mov	r1, sl
 800389e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038a2:	4651      	mov	r1, sl
 80038a4:	018a      	lsls	r2, r1, #6
 80038a6:	4651      	mov	r1, sl
 80038a8:	ebb2 0801 	subs.w	r8, r2, r1
 80038ac:	4659      	mov	r1, fp
 80038ae:	eb63 0901 	sbc.w	r9, r3, r1
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038c6:	4690      	mov	r8, r2
 80038c8:	4699      	mov	r9, r3
 80038ca:	4623      	mov	r3, r4
 80038cc:	eb18 0303 	adds.w	r3, r8, r3
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	462b      	mov	r3, r5
 80038d4:	eb49 0303 	adc.w	r3, r9, r3
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038e6:	4629      	mov	r1, r5
 80038e8:	024b      	lsls	r3, r1, #9
 80038ea:	4621      	mov	r1, r4
 80038ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038f0:	4621      	mov	r1, r4
 80038f2:	024a      	lsls	r2, r1, #9
 80038f4:	4610      	mov	r0, r2
 80038f6:	4619      	mov	r1, r3
 80038f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038fa:	2200      	movs	r2, #0
 80038fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003900:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003904:	f7fc fcbc 	bl	8000280 <__aeabi_uldivmod>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4613      	mov	r3, r2
 800390e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003910:	e058      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003912:	4b38      	ldr	r3, [pc, #224]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	099b      	lsrs	r3, r3, #6
 8003918:	2200      	movs	r2, #0
 800391a:	4618      	mov	r0, r3
 800391c:	4611      	mov	r1, r2
 800391e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003922:	623b      	str	r3, [r7, #32]
 8003924:	2300      	movs	r3, #0
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24
 8003928:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800392c:	4642      	mov	r2, r8
 800392e:	464b      	mov	r3, r9
 8003930:	f04f 0000 	mov.w	r0, #0
 8003934:	f04f 0100 	mov.w	r1, #0
 8003938:	0159      	lsls	r1, r3, #5
 800393a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800393e:	0150      	lsls	r0, r2, #5
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4641      	mov	r1, r8
 8003946:	ebb2 0a01 	subs.w	sl, r2, r1
 800394a:	4649      	mov	r1, r9
 800394c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800395c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003960:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003964:	ebb2 040a 	subs.w	r4, r2, sl
 8003968:	eb63 050b 	sbc.w	r5, r3, fp
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	00eb      	lsls	r3, r5, #3
 8003976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800397a:	00e2      	lsls	r2, r4, #3
 800397c:	4614      	mov	r4, r2
 800397e:	461d      	mov	r5, r3
 8003980:	4643      	mov	r3, r8
 8003982:	18e3      	adds	r3, r4, r3
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	464b      	mov	r3, r9
 8003988:	eb45 0303 	adc.w	r3, r5, r3
 800398c:	607b      	str	r3, [r7, #4]
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	e9d7 4500 	ldrd	r4, r5, [r7]
 800399a:	4629      	mov	r1, r5
 800399c:	028b      	lsls	r3, r1, #10
 800399e:	4621      	mov	r1, r4
 80039a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039a4:	4621      	mov	r1, r4
 80039a6:	028a      	lsls	r2, r1, #10
 80039a8:	4610      	mov	r0, r2
 80039aa:	4619      	mov	r1, r3
 80039ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039ae:	2200      	movs	r2, #0
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	61fa      	str	r2, [r7, #28]
 80039b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039b8:	f7fc fc62 	bl	8000280 <__aeabi_uldivmod>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4613      	mov	r3, r2
 80039c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039c4:	4b0b      	ldr	r3, [pc, #44]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	0c1b      	lsrs	r3, r3, #16
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	3301      	adds	r3, #1
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80039d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039de:	e002      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e0:	4b05      	ldr	r3, [pc, #20]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80039e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3750      	adds	r7, #80	@ 0x50
 80039ec:	46bd      	mov	sp, r7
 80039ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039f2:	bf00      	nop
 80039f4:	40023800 	.word	0x40023800
 80039f8:	00f42400 	.word	0x00f42400
 80039fc:	007a1200 	.word	0x007a1200

08003a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a04:	4b03      	ldr	r3, [pc, #12]	@ (8003a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a06:	681b      	ldr	r3, [r3, #0]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	20000000 	.word	0x20000000

08003a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a1c:	f7ff fff0 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	0b5b      	lsrs	r3, r3, #13
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4903      	ldr	r1, [pc, #12]	@ (8003a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	08006b08 	.word	0x08006b08

08003a40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	220f      	movs	r2, #15
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a50:	4b12      	ldr	r3, [pc, #72]	@ (8003a9c <HAL_RCC_GetClockConfig+0x5c>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0203 	and.w	r2, r3, #3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a9c <HAL_RCC_GetClockConfig+0x5c>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a68:	4b0c      	ldr	r3, [pc, #48]	@ (8003a9c <HAL_RCC_GetClockConfig+0x5c>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a74:	4b09      	ldr	r3, [pc, #36]	@ (8003a9c <HAL_RCC_GetClockConfig+0x5c>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	08db      	lsrs	r3, r3, #3
 8003a7a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a82:	4b07      	ldr	r3, [pc, #28]	@ (8003aa0 <HAL_RCC_GetClockConfig+0x60>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0207 	and.w	r2, r3, #7
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	601a      	str	r2, [r3, #0]
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40023c00 	.word	0x40023c00

08003aa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e07b      	b.n	8003bae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d108      	bne.n	8003ad0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ac6:	d009      	beq.n	8003adc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	61da      	str	r2, [r3, #28]
 8003ace:	e005      	b.n	8003adc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fe fa66 	bl	8001fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b60:	ea42 0103 	orr.w	r1, r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b68:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	0c1b      	lsrs	r3, r3, #16
 8003b7a:	f003 0104 	and.w	r1, r3, #4
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b82:	f003 0210 	and.w	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b088      	sub	sp, #32
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	603b      	str	r3, [r7, #0]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_SPI_Transmit+0x22>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e12d      	b.n	8003e34 <HAL_SPI_Transmit+0x27e>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003be0:	f7fe fc8c 	bl	80024fc <HAL_GetTick>
 8003be4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d002      	beq.n	8003bfc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bfa:	e116      	b.n	8003e2a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_SPI_Transmit+0x52>
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d102      	bne.n	8003c0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c0c:	e10d      	b.n	8003e2a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2203      	movs	r2, #3
 8003c12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	88fa      	ldrh	r2, [r7, #6]
 8003c26:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	88fa      	ldrh	r2, [r7, #6]
 8003c2c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c54:	d10f      	bne.n	8003c76 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c80:	2b40      	cmp	r3, #64	@ 0x40
 8003c82:	d007      	beq.n	8003c94 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c9c:	d14f      	bne.n	8003d3e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <HAL_SPI_Transmit+0xf6>
 8003ca6:	8afb      	ldrh	r3, [r7, #22]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d142      	bne.n	8003d32 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb0:	881a      	ldrh	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbc:	1c9a      	adds	r2, r3, #2
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cd0:	e02f      	b.n	8003d32 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d112      	bne.n	8003d06 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce4:	881a      	ldrh	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf0:	1c9a      	adds	r2, r3, #2
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d04:	e015      	b.n	8003d32 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d06:	f7fe fbf9 	bl	80024fc <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d803      	bhi.n	8003d1e <HAL_SPI_Transmit+0x168>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1c:	d102      	bne.n	8003d24 <HAL_SPI_Transmit+0x16e>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d106      	bne.n	8003d32 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003d30:	e07b      	b.n	8003e2a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1ca      	bne.n	8003cd2 <HAL_SPI_Transmit+0x11c>
 8003d3c:	e050      	b.n	8003de0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_SPI_Transmit+0x196>
 8003d46:	8afb      	ldrh	r3, [r7, #22]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d144      	bne.n	8003dd6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	330c      	adds	r3, #12
 8003d56:	7812      	ldrb	r2, [r2, #0]
 8003d58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d72:	e030      	b.n	8003dd6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d113      	bne.n	8003daa <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	330c      	adds	r3, #12
 8003d8c:	7812      	ldrb	r2, [r2, #0]
 8003d8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003da8:	e015      	b.n	8003dd6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003daa:	f7fe fba7 	bl	80024fc <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d803      	bhi.n	8003dc2 <HAL_SPI_Transmit+0x20c>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc0:	d102      	bne.n	8003dc8 <HAL_SPI_Transmit+0x212>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d106      	bne.n	8003dd6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003dd4:	e029      	b.n	8003e2a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1c9      	bne.n	8003d74 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	6839      	ldr	r1, [r7, #0]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f001 f8d7 	bl	8004f98 <SPI_EndRxTxTransaction>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10a      	bne.n	8003e14 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	e003      	b.n	8003e2a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003e32:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3720      	adds	r7, #32
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d002      	beq.n	8003e62 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e60:	e0fb      	b.n	800405a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e6a:	d112      	bne.n	8003e92 <HAL_SPI_Receive+0x56>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10e      	bne.n	8003e92 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2204      	movs	r2, #4
 8003e78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e7c:	88fa      	ldrh	r2, [r7, #6]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	4613      	mov	r3, r2
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 f8ef 	bl	800406c <HAL_SPI_TransmitReceive>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	e0e8      	b.n	8004064 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_SPI_Receive+0x64>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e0e1      	b.n	8004064 <HAL_SPI_Receive+0x228>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ea8:	f7fe fb28 	bl	80024fc <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <HAL_SPI_Receive+0x7e>
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d102      	bne.n	8003ec0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ebe:	e0cc      	b.n	800405a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	88fa      	ldrh	r2, [r7, #6]
 8003ed8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	88fa      	ldrh	r2, [r7, #6]
 8003ede:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f06:	d10f      	bne.n	8003f28 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f26:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f32:	2b40      	cmp	r3, #64	@ 0x40
 8003f34:	d007      	beq.n	8003f46 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f44:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d16a      	bne.n	8004024 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f4e:	e032      	b.n	8003fb6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d115      	bne.n	8003f8a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f103 020c 	add.w	r2, r3, #12
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6a:	7812      	ldrb	r2, [r2, #0]
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f88:	e015      	b.n	8003fb6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f8a:	f7fe fab7 	bl	80024fc <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d803      	bhi.n	8003fa2 <HAL_SPI_Receive+0x166>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa0:	d102      	bne.n	8003fa8 <HAL_SPI_Receive+0x16c>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003fb4:	e051      	b.n	800405a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1c7      	bne.n	8003f50 <HAL_SPI_Receive+0x114>
 8003fc0:	e035      	b.n	800402e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d113      	bne.n	8003ff8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fda:	b292      	uxth	r2, r2
 8003fdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe2:	1c9a      	adds	r2, r3, #2
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ff6:	e015      	b.n	8004024 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ff8:	f7fe fa80 	bl	80024fc <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d803      	bhi.n	8004010 <HAL_SPI_Receive+0x1d4>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400e:	d102      	bne.n	8004016 <HAL_SPI_Receive+0x1da>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004022:	e01a      	b.n	800405a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1c9      	bne.n	8003fc2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	6839      	ldr	r1, [r7, #0]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 ff4a 	bl	8004ecc <SPI_EndRxTransaction>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2220      	movs	r2, #32
 8004042:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	75fb      	strb	r3, [r7, #23]
 8004050:	e003      	b.n	800405a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004062:	7dfb      	ldrb	r3, [r7, #23]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08c      	sub	sp, #48	@ 0x30
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800407a:	2301      	movs	r3, #1
 800407c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_SPI_TransmitReceive+0x26>
 800408e:	2302      	movs	r3, #2
 8004090:	e198      	b.n	80043c4 <HAL_SPI_TransmitReceive+0x358>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800409a:	f7fe fa2f 	bl	80024fc <HAL_GetTick>
 800409e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80040b0:	887b      	ldrh	r3, [r7, #2]
 80040b2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d00f      	beq.n	80040dc <HAL_SPI_TransmitReceive+0x70>
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040c2:	d107      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d103      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x68>
 80040cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d003      	beq.n	80040dc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80040d4:	2302      	movs	r3, #2
 80040d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80040da:	e16d      	b.n	80043b8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d005      	beq.n	80040ee <HAL_SPI_TransmitReceive+0x82>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <HAL_SPI_TransmitReceive+0x82>
 80040e8:	887b      	ldrh	r3, [r7, #2]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d103      	bne.n	80040f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80040f4:	e160      	b.n	80043b8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d003      	beq.n	800410a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2205      	movs	r2, #5
 8004106:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	887a      	ldrh	r2, [r7, #2]
 800411a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	887a      	ldrh	r2, [r7, #2]
 8004120:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	887a      	ldrh	r2, [r7, #2]
 800412c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	887a      	ldrh	r2, [r7, #2]
 8004132:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414a:	2b40      	cmp	r3, #64	@ 0x40
 800414c:	d007      	beq.n	800415e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800415c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004166:	d17c      	bne.n	8004262 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <HAL_SPI_TransmitReceive+0x10a>
 8004170:	8b7b      	ldrh	r3, [r7, #26]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d16a      	bne.n	800424c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417a:	881a      	ldrh	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004186:	1c9a      	adds	r2, r3, #2
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800419a:	e057      	b.n	800424c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d11b      	bne.n	80041e2 <HAL_SPI_TransmitReceive+0x176>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d016      	beq.n	80041e2 <HAL_SPI_TransmitReceive+0x176>
 80041b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d113      	bne.n	80041e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041be:	881a      	ldrh	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ca:	1c9a      	adds	r2, r3, #2
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d119      	bne.n	8004224 <HAL_SPI_TransmitReceive+0x1b8>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d014      	beq.n	8004224 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004204:	b292      	uxth	r2, r2
 8004206:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420c:	1c9a      	adds	r2, r3, #2
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004220:	2301      	movs	r3, #1
 8004222:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004224:	f7fe f96a 	bl	80024fc <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004230:	429a      	cmp	r2, r3
 8004232:	d80b      	bhi.n	800424c <HAL_SPI_TransmitReceive+0x1e0>
 8004234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423a:	d007      	beq.n	800424c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800424a:	e0b5      	b.n	80043b8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1a2      	bne.n	800419c <HAL_SPI_TransmitReceive+0x130>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d19d      	bne.n	800419c <HAL_SPI_TransmitReceive+0x130>
 8004260:	e080      	b.n	8004364 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <HAL_SPI_TransmitReceive+0x204>
 800426a:	8b7b      	ldrh	r3, [r7, #26]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d16f      	bne.n	8004350 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	330c      	adds	r3, #12
 800427a:	7812      	ldrb	r2, [r2, #0]
 800427c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004296:	e05b      	b.n	8004350 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d11c      	bne.n	80042e0 <HAL_SPI_TransmitReceive+0x274>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d017      	beq.n	80042e0 <HAL_SPI_TransmitReceive+0x274>
 80042b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d114      	bne.n	80042e0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	330c      	adds	r3, #12
 80042c0:	7812      	ldrb	r2, [r2, #0]
 80042c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d119      	bne.n	8004322 <HAL_SPI_TransmitReceive+0x2b6>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d014      	beq.n	8004322 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800431e:	2301      	movs	r3, #1
 8004320:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004322:	f7fe f8eb 	bl	80024fc <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800432e:	429a      	cmp	r2, r3
 8004330:	d803      	bhi.n	800433a <HAL_SPI_TransmitReceive+0x2ce>
 8004332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004338:	d102      	bne.n	8004340 <HAL_SPI_TransmitReceive+0x2d4>
 800433a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800433c:	2b00      	cmp	r3, #0
 800433e:	d107      	bne.n	8004350 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800434e:	e033      	b.n	80043b8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d19e      	bne.n	8004298 <HAL_SPI_TransmitReceive+0x22c>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d199      	bne.n	8004298 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004366:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fe15 	bl	8004f98 <SPI_EndRxTxTransaction>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d006      	beq.n	8004382 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004380:	e01a      	b.n	80043b8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10a      	bne.n	80043a0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800438a:	2300      	movs	r3, #0
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ae:	e003      	b.n	80043b8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80043c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3730      	adds	r7, #48	@ 0x30
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	4613      	mov	r3, r2
 80043d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_SPI_Transmit_DMA+0x20>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e097      	b.n	800451c <HAL_SPI_Transmit_DMA+0x150>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d002      	beq.n	8004406 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004400:	2302      	movs	r3, #2
 8004402:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004404:	e085      	b.n	8004512 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <HAL_SPI_Transmit_DMA+0x46>
 800440c:	88fb      	ldrh	r3, [r7, #6]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d102      	bne.n	8004418 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004416:	e07c      	b.n	8004512 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2203      	movs	r2, #3
 800441c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	88fa      	ldrh	r2, [r7, #6]
 8004430:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	88fa      	ldrh	r2, [r7, #6]
 8004436:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800445e:	d10f      	bne.n	8004480 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800446e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800447e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004484:	4a27      	ldr	r2, [pc, #156]	@ (8004524 <HAL_SPI_Transmit_DMA+0x158>)
 8004486:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800448c:	4a26      	ldr	r2, [pc, #152]	@ (8004528 <HAL_SPI_Transmit_DMA+0x15c>)
 800448e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004494:	4a25      	ldr	r2, [pc, #148]	@ (800452c <HAL_SPI_Transmit_DMA+0x160>)
 8004496:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800449c:	2200      	movs	r2, #0
 800449e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a8:	4619      	mov	r1, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	330c      	adds	r3, #12
 80044b0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044b6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80044b8:	f7fe f9bc 	bl	8002834 <HAL_DMA_Start_IT>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c6:	f043 0210 	orr.w	r2, r3, #16
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]

    goto error;
 80044d2:	e01e      	b.n	8004512 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044de:	2b40      	cmp	r3, #64	@ 0x40
 80044e0:	d007      	beq.n	80044f2 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044f0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0220 	orr.w	r2, r2, #32
 8004500:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0202 	orr.w	r2, r2, #2
 8004510:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800451a:	7dfb      	ldrb	r3, [r7, #23]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	08004d01 	.word	0x08004d01
 8004528:	08004b21 	.word	0x08004b21
 800452c:	08004d55 	.word	0x08004d55

08004530 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	4613      	mov	r3, r2
 800453c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b01      	cmp	r3, #1
 800454c:	d002      	beq.n	8004554 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800454e:	2302      	movs	r3, #2
 8004550:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004552:	e0a2      	b.n	800469a <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d110      	bne.n	800457e <HAL_SPI_Receive_DMA+0x4e>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004564:	d10b      	bne.n	800457e <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2204      	movs	r2, #4
 800456a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f89f 	bl	80046b8 <HAL_SPI_TransmitReceive_DMA>
 800457a:	4603      	mov	r3, r0
 800457c:	e092      	b.n	80046a4 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_SPI_Receive_DMA+0x5c>
 8004588:	2302      	movs	r3, #2
 800458a:	e08b      	b.n	80046a4 <HAL_SPI_Receive_DMA+0x174>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if ((pData == NULL) || (Size == 0U))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <HAL_SPI_Receive_DMA+0x70>
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d102      	bne.n	80045a6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045a4:	e079      	b.n	800469a <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2204      	movs	r2, #4
 80045aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	88fa      	ldrh	r2, [r7, #6]
 80045be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	88fa      	ldrh	r2, [r7, #6]
 80045c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045e6:	d10f      	bne.n	8004608 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004606:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800460c:	4a27      	ldr	r2, [pc, #156]	@ (80046ac <HAL_SPI_Receive_DMA+0x17c>)
 800460e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004614:	4a26      	ldr	r2, [pc, #152]	@ (80046b0 <HAL_SPI_Receive_DMA+0x180>)
 8004616:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461c:	4a25      	ldr	r2, [pc, #148]	@ (80046b4 <HAL_SPI_Receive_DMA+0x184>)
 800461e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004624:	2200      	movs	r2, #0
 8004626:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	330c      	adds	r3, #12
 8004632:	4619      	mov	r1, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004638:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800463e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004640:	f7fe f8f8 	bl	8002834 <HAL_DMA_Start_IT>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464e:	f043 0210 	orr.w	r2, r3, #16
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	75fb      	strb	r3, [r7, #23]

    goto error;
 800465a:	e01e      	b.n	800469a <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004666:	2b40      	cmp	r3, #64	@ 0x40
 8004668:	d007      	beq.n	800467a <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004678:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0220 	orr.w	r2, r2, #32
 8004688:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	08004d1d 	.word	0x08004d1d
 80046b0:	08004bc9 	.word	0x08004bc9
 80046b4:	08004d55 	.word	0x08004d55

080046b8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e0db      	b.n	8004890 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046e6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80046ee:	7dbb      	ldrb	r3, [r7, #22]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d00d      	beq.n	8004710 <HAL_SPI_TransmitReceive_DMA+0x58>
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046fa:	d106      	bne.n	800470a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d102      	bne.n	800470a <HAL_SPI_TransmitReceive_DMA+0x52>
 8004704:	7dbb      	ldrb	r3, [r7, #22]
 8004706:	2b04      	cmp	r3, #4
 8004708:	d002      	beq.n	8004710 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800470a:	2302      	movs	r3, #2
 800470c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800470e:	e0ba      	b.n	8004886 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800471c:	887b      	ldrh	r3, [r7, #2]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d102      	bne.n	8004728 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004726:	e0ae      	b.n	8004886 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b04      	cmp	r3, #4
 8004732:	d003      	beq.n	800473c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2205      	movs	r2, #5
 8004738:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	887a      	ldrh	r2, [r7, #2]
 800474c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	887a      	ldrh	r2, [r7, #2]
 8004752:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	887a      	ldrh	r2, [r7, #2]
 800475e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	887a      	ldrh	r2, [r7, #2]
 8004764:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b04      	cmp	r3, #4
 800477c:	d108      	bne.n	8004790 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004782:	4a45      	ldr	r2, [pc, #276]	@ (8004898 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8004784:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800478a:	4a44      	ldr	r2, [pc, #272]	@ (800489c <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 800478c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800478e:	e007      	b.n	80047a0 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004794:	4a42      	ldr	r2, [pc, #264]	@ (80048a0 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8004796:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800479c:	4a41      	ldr	r2, [pc, #260]	@ (80048a4 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 800479e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a4:	4a40      	ldr	r2, [pc, #256]	@ (80048a8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80047a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ac:	2200      	movs	r2, #0
 80047ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	330c      	adds	r3, #12
 80047ba:	4619      	mov	r1, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047c6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80047c8:	f7fe f834 	bl	8002834 <HAL_DMA_Start_IT>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d008      	beq.n	80047e4 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d6:	f043 0210 	orr.w	r2, r3, #16
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	75fb      	strb	r3, [r7, #23]

    goto error;
 80047e2:	e050      	b.n	8004886 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047f8:	2200      	movs	r2, #0
 80047fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004800:	2200      	movs	r2, #0
 8004802:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004808:	2200      	movs	r2, #0
 800480a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004810:	2200      	movs	r2, #0
 8004812:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481c:	4619      	mov	r1, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	330c      	adds	r3, #12
 8004824:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800482a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800482c:	f7fe f802 	bl	8002834 <HAL_DMA_Start_IT>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d008      	beq.n	8004848 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483a:	f043 0210 	orr.w	r2, r3, #16
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]

    goto error;
 8004846:	e01e      	b.n	8004886 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004852:	2b40      	cmp	r3, #64	@ 0x40
 8004854:	d007      	beq.n	8004866 <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004864:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0220 	orr.w	r2, r2, #32
 8004874:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0202 	orr.w	r2, r2, #2
 8004884:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800488e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	08004d1d 	.word	0x08004d1d
 800489c:	08004bc9 	.word	0x08004bc9
 80048a0:	08004d39 	.word	0x08004d39
 80048a4:	08004c71 	.word	0x08004c71
 80048a8:	08004d55 	.word	0x08004d55

080048ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10e      	bne.n	80048ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d009      	beq.n	80048ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d004      	beq.n	80048ec <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4798      	blx	r3
    return;
 80048ea:	e0ce      	b.n	8004a8a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d009      	beq.n	800490a <HAL_SPI_IRQHandler+0x5e>
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d004      	beq.n	800490a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	4798      	blx	r3
    return;
 8004908:	e0bf      	b.n	8004a8a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10a      	bne.n	800492a <HAL_SPI_IRQHandler+0x7e>
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d105      	bne.n	800492a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80b0 	beq.w	8004a8a <HAL_SPI_IRQHandler+0x1de>
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	f003 0320 	and.w	r3, r3, #32
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80aa 	beq.w	8004a8a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	d023      	beq.n	8004988 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b03      	cmp	r3, #3
 800494a:	d011      	beq.n	8004970 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004950:	f043 0204 	orr.w	r2, r3, #4
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	e00b      	b.n	8004988 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004970:	2300      	movs	r3, #0
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	693b      	ldr	r3, [r7, #16]
        return;
 8004986:	e080      	b.n	8004a8a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d014      	beq.n	80049bc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004996:	f043 0201 	orr.w	r2, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00c      	beq.n	80049e0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ca:	f043 0208 	orr.w	r2, r3, #8
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80049d2:	2300      	movs	r3, #0
 80049d4:	60bb      	str	r3, [r7, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	60bb      	str	r3, [r7, #8]
 80049de:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d04f      	beq.n	8004a88 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049f6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d104      	bne.n	8004a14 <HAL_SPI_IRQHandler+0x168>
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d034      	beq.n	8004a7e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0203 	bic.w	r2, r2, #3
 8004a22:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d011      	beq.n	8004a50 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a30:	4a17      	ldr	r2, [pc, #92]	@ (8004a90 <HAL_SPI_IRQHandler+0x1e4>)
 8004a32:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fd ff53 	bl	80028e4 <HAL_DMA_Abort_IT>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d016      	beq.n	8004a86 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8004a90 <HAL_SPI_IRQHandler+0x1e4>)
 8004a5e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fd ff3d 	bl	80028e4 <HAL_DMA_Abort_IT>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004a7c:	e003      	b.n	8004a86 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f844 	bl	8004b0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004a84:	e000      	b.n	8004a88 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004a86:	bf00      	nop
    return;
 8004a88:	bf00      	nop
  }
}
 8004a8a:	3720      	adds	r7, #32
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	08004d95 	.word	0x08004d95

08004a94 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b2e:	f7fd fce5 	bl	80024fc <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b42:	d03b      	beq.n	8004bbc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0220 	bic.w	r2, r2, #32
 8004b52:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0202 	bic.w	r2, r2, #2
 8004b62:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	2164      	movs	r1, #100	@ 0x64
 8004b68:	6978      	ldr	r0, [r7, #20]
 8004b6a:	f000 fa15 	bl	8004f98 <SPI_EndRxTxTransaction>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b78:	f043 0220 	orr.w	r2, r3, #32
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10a      	bne.n	8004b9e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004bb4:	6978      	ldr	r0, [r7, #20]
 8004bb6:	f7ff ffa9 	bl	8004b0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004bba:	e002      	b.n	8004bc2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004bbc:	6978      	ldr	r0, [r7, #20]
 8004bbe:	f7ff ff69 	bl	8004a94 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bd6:	f7fd fc91 	bl	80024fc <HAL_GetTick>
 8004bda:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bea:	d03b      	beq.n	8004c64 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0220 	bic.w	r2, r2, #32
 8004bfa:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10d      	bne.n	8004c20 <SPI_DMAReceiveCplt+0x58>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c0c:	d108      	bne.n	8004c20 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0203 	bic.w	r2, r2, #3
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	e007      	b.n	8004c30 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	2164      	movs	r1, #100	@ 0x64
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f949 	bl	8004ecc <SPI_EndRxTransaction>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7ff ff55 	bl	8004b0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004c62:	e002      	b.n	8004c6a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f7ff ff1f 	bl	8004aa8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c7e:	f7fd fc3d 	bl	80024fc <HAL_GetTick>
 8004c82:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c92:	d02f      	beq.n	8004cf4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0220 	bic.w	r2, r2, #32
 8004ca2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	2164      	movs	r1, #100	@ 0x64
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f975 	bl	8004f98 <SPI_EndRxTxTransaction>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb8:	f043 0220 	orr.w	r2, r3, #32
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0203 	bic.w	r2, r2, #3
 8004cce:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f7ff ff0d 	bl	8004b0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004cf2:	e002      	b.n	8004cfa <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f7ff fee1 	bl	8004abc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff fede 	bl	8004ad0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d14:	bf00      	nop
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f7ff feda 	bl	8004ae4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d30:	bf00      	nop
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f7ff fed6 	bl	8004af8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d4c:	bf00      	nop
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0203 	bic.w	r2, r2, #3
 8004d70:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d76:	f043 0210 	orr.w	r2, r3, #16
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f7ff fec0 	bl	8004b0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f7ff feac 	bl	8004b0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dcc:	f7fd fb96 	bl	80024fc <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd4:	1a9b      	subs	r3, r3, r2
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	4413      	add	r3, r2
 8004dda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ddc:	f7fd fb8e 	bl	80024fc <HAL_GetTick>
 8004de0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004de2:	4b39      	ldr	r3, [pc, #228]	@ (8004ec8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	015b      	lsls	r3, r3, #5
 8004de8:	0d1b      	lsrs	r3, r3, #20
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	fb02 f303 	mul.w	r3, r2, r3
 8004df0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004df2:	e054      	b.n	8004e9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfa:	d050      	beq.n	8004e9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dfc:	f7fd fb7e 	bl	80024fc <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d902      	bls.n	8004e12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d13d      	bne.n	8004e8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e2a:	d111      	bne.n	8004e50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e34:	d004      	beq.n	8004e40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e3e:	d107      	bne.n	8004e50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e58:	d10f      	bne.n	8004e7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e017      	b.n	8004ebe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	bf0c      	ite	eq
 8004eae:	2301      	moveq	r3, #1
 8004eb0:	2300      	movne	r3, #0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d19b      	bne.n	8004df4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3720      	adds	r7, #32
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20000000 	.word	0x20000000

08004ecc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af02      	add	r7, sp, #8
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ee0:	d111      	bne.n	8004f06 <SPI_EndRxTransaction+0x3a>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eea:	d004      	beq.n	8004ef6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ef4:	d107      	bne.n	8004f06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f04:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f0e:	d12a      	bne.n	8004f66 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f18:	d012      	beq.n	8004f40 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2200      	movs	r2, #0
 8004f22:	2180      	movs	r1, #128	@ 0x80
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f7ff ff49 	bl	8004dbc <SPI_WaitFlagStateUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d02d      	beq.n	8004f8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f34:	f043 0220 	orr.w	r2, r3, #32
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e026      	b.n	8004f8e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2200      	movs	r2, #0
 8004f48:	2101      	movs	r1, #1
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f7ff ff36 	bl	8004dbc <SPI_WaitFlagStateUntilTimeout>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d01a      	beq.n	8004f8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5a:	f043 0220 	orr.w	r2, r3, #32
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e013      	b.n	8004f8e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2101      	movs	r1, #1
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7ff ff23 	bl	8004dbc <SPI_WaitFlagStateUntilTimeout>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d007      	beq.n	8004f8c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f80:	f043 0220 	orr.w	r2, r3, #32
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e000      	b.n	8004f8e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2201      	movs	r2, #1
 8004fac:	2102      	movs	r1, #2
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f7ff ff04 	bl	8004dbc <SPI_WaitFlagStateUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d007      	beq.n	8004fca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fbe:	f043 0220 	orr.w	r2, r3, #32
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e032      	b.n	8005030 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fca:	4b1b      	ldr	r3, [pc, #108]	@ (8005038 <SPI_EndRxTxTransaction+0xa0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a1b      	ldr	r2, [pc, #108]	@ (800503c <SPI_EndRxTxTransaction+0xa4>)
 8004fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd4:	0d5b      	lsrs	r3, r3, #21
 8004fd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004fda:	fb02 f303 	mul.w	r3, r2, r3
 8004fde:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fe8:	d112      	bne.n	8005010 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2180      	movs	r1, #128	@ 0x80
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f7ff fee1 	bl	8004dbc <SPI_WaitFlagStateUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d016      	beq.n	800502e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005004:	f043 0220 	orr.w	r2, r3, #32
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e00f      	b.n	8005030 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	3b01      	subs	r3, #1
 800501a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005026:	2b80      	cmp	r3, #128	@ 0x80
 8005028:	d0f2      	beq.n	8005010 <SPI_EndRxTxTransaction+0x78>
 800502a:	e000      	b.n	800502e <SPI_EndRxTxTransaction+0x96>
        break;
 800502c:	bf00      	nop
  }

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	20000000 	.word	0x20000000
 800503c:	165e9f81 	.word	0x165e9f81

08005040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e041      	b.n	80050d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f839 	bl	80050de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f000 f9b2 	bl	80053e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
	...

080050f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b01      	cmp	r3, #1
 8005106:	d001      	beq.n	800510c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e044      	b.n	8005196 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1e      	ldr	r2, [pc, #120]	@ (80051a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d018      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x6c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005136:	d013      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x6c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1a      	ldr	r2, [pc, #104]	@ (80051a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00e      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x6c>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a19      	ldr	r2, [pc, #100]	@ (80051ac <HAL_TIM_Base_Start_IT+0xb8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d009      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x6c>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a17      	ldr	r2, [pc, #92]	@ (80051b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d004      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x6c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a16      	ldr	r2, [pc, #88]	@ (80051b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d111      	bne.n	8005184 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b06      	cmp	r3, #6
 8005170:	d010      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f042 0201 	orr.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005182:	e007      	b.n	8005194 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40010000 	.word	0x40010000
 80051a8:	40000400 	.word	0x40000400
 80051ac:	40000800 	.word	0x40000800
 80051b0:	40000c00 	.word	0x40000c00
 80051b4:	40014000 	.word	0x40014000

080051b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d020      	beq.n	800521c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01b      	beq.n	800521c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0202 	mvn.w	r2, #2
 80051ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f8d2 	bl	80053ac <HAL_TIM_IC_CaptureCallback>
 8005208:	e005      	b.n	8005216 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f8c4 	bl	8005398 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f8d5 	bl	80053c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	2b00      	cmp	r3, #0
 8005224:	d020      	beq.n	8005268 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d01b      	beq.n	8005268 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0204 	mvn.w	r2, #4
 8005238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2202      	movs	r2, #2
 800523e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f8ac 	bl	80053ac <HAL_TIM_IC_CaptureCallback>
 8005254:	e005      	b.n	8005262 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f89e 	bl	8005398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f8af 	bl	80053c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d020      	beq.n	80052b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01b      	beq.n	80052b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0208 	mvn.w	r2, #8
 8005284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2204      	movs	r2, #4
 800528a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f886 	bl	80053ac <HAL_TIM_IC_CaptureCallback>
 80052a0:	e005      	b.n	80052ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f878 	bl	8005398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f889 	bl	80053c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f003 0310 	and.w	r3, r3, #16
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d020      	beq.n	8005300 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01b      	beq.n	8005300 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0210 	mvn.w	r2, #16
 80052d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2208      	movs	r2, #8
 80052d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f860 	bl	80053ac <HAL_TIM_IC_CaptureCallback>
 80052ec:	e005      	b.n	80052fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f852 	bl	8005398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f863 	bl	80053c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00c      	beq.n	8005324 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d007      	beq.n	8005324 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0201 	mvn.w	r2, #1
 800531c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7fc fdce 	bl	8001ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00c      	beq.n	8005348 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005334:	2b00      	cmp	r3, #0
 8005336:	d007      	beq.n	8005348 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f8e6 	bl	8005514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00c      	beq.n	800536c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f834 	bl	80053d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00c      	beq.n	8005390 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0220 	mvn.w	r2, #32
 8005388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f8b8 	bl	8005500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005390:	bf00      	nop
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a3a      	ldr	r2, [pc, #232]	@ (80054e4 <TIM_Base_SetConfig+0xfc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d00f      	beq.n	8005420 <TIM_Base_SetConfig+0x38>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005406:	d00b      	beq.n	8005420 <TIM_Base_SetConfig+0x38>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a37      	ldr	r2, [pc, #220]	@ (80054e8 <TIM_Base_SetConfig+0x100>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d007      	beq.n	8005420 <TIM_Base_SetConfig+0x38>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a36      	ldr	r2, [pc, #216]	@ (80054ec <TIM_Base_SetConfig+0x104>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_Base_SetConfig+0x38>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a35      	ldr	r2, [pc, #212]	@ (80054f0 <TIM_Base_SetConfig+0x108>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d108      	bne.n	8005432 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a2b      	ldr	r2, [pc, #172]	@ (80054e4 <TIM_Base_SetConfig+0xfc>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01b      	beq.n	8005472 <TIM_Base_SetConfig+0x8a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005440:	d017      	beq.n	8005472 <TIM_Base_SetConfig+0x8a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a28      	ldr	r2, [pc, #160]	@ (80054e8 <TIM_Base_SetConfig+0x100>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d013      	beq.n	8005472 <TIM_Base_SetConfig+0x8a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a27      	ldr	r2, [pc, #156]	@ (80054ec <TIM_Base_SetConfig+0x104>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00f      	beq.n	8005472 <TIM_Base_SetConfig+0x8a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a26      	ldr	r2, [pc, #152]	@ (80054f0 <TIM_Base_SetConfig+0x108>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00b      	beq.n	8005472 <TIM_Base_SetConfig+0x8a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a25      	ldr	r2, [pc, #148]	@ (80054f4 <TIM_Base_SetConfig+0x10c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d007      	beq.n	8005472 <TIM_Base_SetConfig+0x8a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a24      	ldr	r2, [pc, #144]	@ (80054f8 <TIM_Base_SetConfig+0x110>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d003      	beq.n	8005472 <TIM_Base_SetConfig+0x8a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a23      	ldr	r2, [pc, #140]	@ (80054fc <TIM_Base_SetConfig+0x114>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d108      	bne.n	8005484 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a0e      	ldr	r2, [pc, #56]	@ (80054e4 <TIM_Base_SetConfig+0xfc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d103      	bne.n	80054b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d105      	bne.n	80054d6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f023 0201 	bic.w	r2, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	611a      	str	r2, [r3, #16]
  }
}
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	40010000 	.word	0x40010000
 80054e8:	40000400 	.word	0x40000400
 80054ec:	40000800 	.word	0x40000800
 80054f0:	40000c00 	.word	0x40000c00
 80054f4:	40014000 	.word	0x40014000
 80054f8:	40014400 	.word	0x40014400
 80054fc:	40014800 	.word	0x40014800

08005500 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	4603      	mov	r3, r0
 8005530:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800553a:	2b84      	cmp	r3, #132	@ 0x84
 800553c:	d005      	beq.n	800554a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800553e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	3303      	adds	r3, #3
 8005548:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800554a:	68fb      	ldr	r3, [r7, #12]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800555c:	f000 fae4 	bl	8005b28 <vTaskStartScheduler>
  
  return osOK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	bd80      	pop	{r7, pc}

08005566 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005568:	b089      	sub	sp, #36	@ 0x24
 800556a:	af04      	add	r7, sp, #16
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d020      	beq.n	80055ba <osThreadCreate+0x54>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01c      	beq.n	80055ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685c      	ldr	r4, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691e      	ldr	r6, [r3, #16]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff ffc8 	bl	8005528 <makeFreeRtosPriority>
 8005598:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055a2:	9202      	str	r2, [sp, #8]
 80055a4:	9301      	str	r3, [sp, #4]
 80055a6:	9100      	str	r1, [sp, #0]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	4632      	mov	r2, r6
 80055ac:	4629      	mov	r1, r5
 80055ae:	4620      	mov	r0, r4
 80055b0:	f000 f8ed 	bl	800578e <xTaskCreateStatic>
 80055b4:	4603      	mov	r3, r0
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	e01c      	b.n	80055f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685c      	ldr	r4, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055c6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff ffaa 	bl	8005528 <makeFreeRtosPriority>
 80055d4:	4602      	mov	r2, r0
 80055d6:	f107 030c 	add.w	r3, r7, #12
 80055da:	9301      	str	r3, [sp, #4]
 80055dc:	9200      	str	r2, [sp, #0]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	4632      	mov	r2, r6
 80055e2:	4629      	mov	r1, r5
 80055e4:	4620      	mov	r0, r4
 80055e6:	f000 f932 	bl	800584e <xTaskCreate>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d001      	beq.n	80055f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	e000      	b.n	80055f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80055f4:	68fb      	ldr	r3, [r7, #12]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <osDelay+0x16>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	e000      	b.n	8005616 <osDelay+0x18>
 8005614:	2301      	movs	r3, #1
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fa50 	bl	8005abc <vTaskDelay>
  
  return osOK;
 800561c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f103 0208 	add.w	r2, r3, #8
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f04f 32ff 	mov.w	r2, #4294967295
 800563e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f103 0208 	add.w	r2, r3, #8
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f103 0208 	add.w	r2, r3, #8
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005666:	b480      	push	{r7}
 8005668:	b083      	sub	sp, #12
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	601a      	str	r2, [r3, #0]
}
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056de:	d103      	bne.n	80056e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	e00c      	b.n	8005702 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3308      	adds	r3, #8
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	e002      	b.n	80056f6 <vListInsert+0x2e>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d2f6      	bcs.n	80056f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	601a      	str	r2, [r3, #0]
}
 800572e:	bf00      	nop
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800573a:	b480      	push	{r7}
 800573c:	b085      	sub	sp, #20
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6892      	ldr	r2, [r2, #8]
 8005750:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6852      	ldr	r2, [r2, #4]
 800575a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	429a      	cmp	r2, r3
 8005764:	d103      	bne.n	800576e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	1e5a      	subs	r2, r3, #1
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800578e:	b580      	push	{r7, lr}
 8005790:	b08e      	sub	sp, #56	@ 0x38
 8005792:	af04      	add	r7, sp, #16
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	607a      	str	r2, [r7, #4]
 800579a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800579c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10b      	bne.n	80057ba <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop
 80057b8:	e7fd      	b.n	80057b6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80057ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10b      	bne.n	80057d8 <xTaskCreateStatic+0x4a>
	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	61fb      	str	r3, [r7, #28]
}
 80057d2:	bf00      	nop
 80057d4:	bf00      	nop
 80057d6:	e7fd      	b.n	80057d4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057d8:	2354      	movs	r3, #84	@ 0x54
 80057da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2b54      	cmp	r3, #84	@ 0x54
 80057e0:	d00b      	beq.n	80057fa <xTaskCreateStatic+0x6c>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	61bb      	str	r3, [r7, #24]
}
 80057f4:	bf00      	nop
 80057f6:	bf00      	nop
 80057f8:	e7fd      	b.n	80057f6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d01e      	beq.n	8005840 <xTaskCreateStatic+0xb2>
 8005802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01b      	beq.n	8005840 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800580c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005810:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	2202      	movs	r2, #2
 8005816:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800581a:	2300      	movs	r3, #0
 800581c:	9303      	str	r3, [sp, #12]
 800581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005820:	9302      	str	r3, [sp, #8]
 8005822:	f107 0314 	add.w	r3, r7, #20
 8005826:	9301      	str	r3, [sp, #4]
 8005828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 f850 	bl	80058d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005838:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800583a:	f000 f8d5 	bl	80059e8 <prvAddNewTaskToReadyList>
 800583e:	e001      	b.n	8005844 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005844:	697b      	ldr	r3, [r7, #20]
	}
 8005846:	4618      	mov	r0, r3
 8005848:	3728      	adds	r7, #40	@ 0x28
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800584e:	b580      	push	{r7, lr}
 8005850:	b08c      	sub	sp, #48	@ 0x30
 8005852:	af04      	add	r7, sp, #16
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	603b      	str	r3, [r7, #0]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800585e:	88fb      	ldrh	r3, [r7, #6]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fed0 	bl	8006608 <pvPortMalloc>
 8005868:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00e      	beq.n	800588e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005870:	2054      	movs	r0, #84	@ 0x54
 8005872:	f000 fec9 	bl	8006608 <pvPortMalloc>
 8005876:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	631a      	str	r2, [r3, #48]	@ 0x30
 8005884:	e005      	b.n	8005892 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005886:	6978      	ldr	r0, [r7, #20]
 8005888:	f000 ff8c 	bl	80067a4 <vPortFree>
 800588c:	e001      	b.n	8005892 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d017      	beq.n	80058c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058a0:	88fa      	ldrh	r2, [r7, #6]
 80058a2:	2300      	movs	r3, #0
 80058a4:	9303      	str	r3, [sp, #12]
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	9302      	str	r3, [sp, #8]
 80058aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ac:	9301      	str	r3, [sp, #4]
 80058ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f80e 	bl	80058d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058bc:	69f8      	ldr	r0, [r7, #28]
 80058be:	f000 f893 	bl	80059e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058c2:	2301      	movs	r3, #1
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	e002      	b.n	80058ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295
 80058cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058ce:	69bb      	ldr	r3, [r7, #24]
	}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3720      	adds	r7, #32
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058f0:	3b01      	subs	r3, #1
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f023 0307 	bic.w	r3, r3, #7
 80058fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00b      	beq.n	8005922 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	617b      	str	r3, [r7, #20]
}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	e7fd      	b.n	800591e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01f      	beq.n	8005968 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005928:	2300      	movs	r3, #0
 800592a:	61fb      	str	r3, [r7, #28]
 800592c:	e012      	b.n	8005954 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	4413      	add	r3, r2
 8005934:	7819      	ldrb	r1, [r3, #0]
 8005936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	4413      	add	r3, r2
 800593c:	3334      	adds	r3, #52	@ 0x34
 800593e:	460a      	mov	r2, r1
 8005940:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	4413      	add	r3, r2
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d006      	beq.n	800595c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	3301      	adds	r3, #1
 8005952:	61fb      	str	r3, [r7, #28]
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	2b0f      	cmp	r3, #15
 8005958:	d9e9      	bls.n	800592e <prvInitialiseNewTask+0x56>
 800595a:	e000      	b.n	800595e <prvInitialiseNewTask+0x86>
			{
				break;
 800595c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800595e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005966:	e003      	b.n	8005970 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005972:	2b06      	cmp	r3, #6
 8005974:	d901      	bls.n	800597a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005976:	2306      	movs	r3, #6
 8005978:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800597a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800597e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005982:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005984:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005988:	2200      	movs	r2, #0
 800598a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800598c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598e:	3304      	adds	r3, #4
 8005990:	4618      	mov	r0, r3
 8005992:	f7ff fe68 	bl	8005666 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005998:	3318      	adds	r3, #24
 800599a:	4618      	mov	r0, r3
 800599c:	f7ff fe63 	bl	8005666 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a8:	f1c3 0207 	rsb	r2, r3, #7
 80059ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b8:	2200      	movs	r2, #0
 80059ba:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	68f9      	ldr	r1, [r7, #12]
 80059c8:	69b8      	ldr	r0, [r7, #24]
 80059ca:	f000 fc0d 	bl	80061e8 <pxPortInitialiseStack>
 80059ce:	4602      	mov	r2, r0
 80059d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059e0:	bf00      	nop
 80059e2:	3720      	adds	r7, #32
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059f0:	f000 fd2a 	bl	8006448 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059f4:	4b2a      	ldr	r3, [pc, #168]	@ (8005aa0 <prvAddNewTaskToReadyList+0xb8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3301      	adds	r3, #1
 80059fa:	4a29      	ldr	r2, [pc, #164]	@ (8005aa0 <prvAddNewTaskToReadyList+0xb8>)
 80059fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059fe:	4b29      	ldr	r3, [pc, #164]	@ (8005aa4 <prvAddNewTaskToReadyList+0xbc>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d109      	bne.n	8005a1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a06:	4a27      	ldr	r2, [pc, #156]	@ (8005aa4 <prvAddNewTaskToReadyList+0xbc>)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a0c:	4b24      	ldr	r3, [pc, #144]	@ (8005aa0 <prvAddNewTaskToReadyList+0xb8>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d110      	bne.n	8005a36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a14:	f000 fac4 	bl	8005fa0 <prvInitialiseTaskLists>
 8005a18:	e00d      	b.n	8005a36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a1a:	4b23      	ldr	r3, [pc, #140]	@ (8005aa8 <prvAddNewTaskToReadyList+0xc0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d109      	bne.n	8005a36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a22:	4b20      	ldr	r3, [pc, #128]	@ (8005aa4 <prvAddNewTaskToReadyList+0xbc>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d802      	bhi.n	8005a36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a30:	4a1c      	ldr	r2, [pc, #112]	@ (8005aa4 <prvAddNewTaskToReadyList+0xbc>)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a36:	4b1d      	ldr	r3, [pc, #116]	@ (8005aac <prvAddNewTaskToReadyList+0xc4>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005aac <prvAddNewTaskToReadyList+0xc4>)
 8005a3e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a44:	2201      	movs	r2, #1
 8005a46:	409a      	lsls	r2, r3
 8005a48:	4b19      	ldr	r3, [pc, #100]	@ (8005ab0 <prvAddNewTaskToReadyList+0xc8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	4a18      	ldr	r2, [pc, #96]	@ (8005ab0 <prvAddNewTaskToReadyList+0xc8>)
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4a15      	ldr	r2, [pc, #84]	@ (8005ab4 <prvAddNewTaskToReadyList+0xcc>)
 8005a60:	441a      	add	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	3304      	adds	r3, #4
 8005a66:	4619      	mov	r1, r3
 8005a68:	4610      	mov	r0, r2
 8005a6a:	f7ff fe09 	bl	8005680 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a6e:	f000 fd1d 	bl	80064ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a72:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa8 <prvAddNewTaskToReadyList+0xc0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00e      	beq.n	8005a98 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa4 <prvAddNewTaskToReadyList+0xbc>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d207      	bcs.n	8005a98 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a88:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab8 <prvAddNewTaskToReadyList+0xd0>)
 8005a8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a98:	bf00      	nop
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	200006c0 	.word	0x200006c0
 8005aa4:	200005c0 	.word	0x200005c0
 8005aa8:	200006cc 	.word	0x200006cc
 8005aac:	200006dc 	.word	0x200006dc
 8005ab0:	200006c8 	.word	0x200006c8
 8005ab4:	200005c4 	.word	0x200005c4
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d018      	beq.n	8005b00 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ace:	4b14      	ldr	r3, [pc, #80]	@ (8005b20 <vTaskDelay+0x64>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00b      	beq.n	8005aee <vTaskDelay+0x32>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	60bb      	str	r3, [r7, #8]
}
 8005ae8:	bf00      	nop
 8005aea:	bf00      	nop
 8005aec:	e7fd      	b.n	8005aea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005aee:	f000 f87d 	bl	8005bec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005af2:	2100      	movs	r1, #0
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fb11 	bl	800611c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005afa:	f000 f885 	bl	8005c08 <xTaskResumeAll>
 8005afe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d107      	bne.n	8005b16 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005b06:	4b07      	ldr	r3, [pc, #28]	@ (8005b24 <vTaskDelay+0x68>)
 8005b08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b16:	bf00      	nop
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	200006e8 	.word	0x200006e8
 8005b24:	e000ed04 	.word	0xe000ed04

08005b28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08a      	sub	sp, #40	@ 0x28
 8005b2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b36:	463a      	mov	r2, r7
 8005b38:	1d39      	adds	r1, r7, #4
 8005b3a:	f107 0308 	add.w	r3, r7, #8
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fc f814 	bl	8001b6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	9202      	str	r2, [sp, #8]
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	2300      	movs	r3, #0
 8005b54:	460a      	mov	r2, r1
 8005b56:	491f      	ldr	r1, [pc, #124]	@ (8005bd4 <vTaskStartScheduler+0xac>)
 8005b58:	481f      	ldr	r0, [pc, #124]	@ (8005bd8 <vTaskStartScheduler+0xb0>)
 8005b5a:	f7ff fe18 	bl	800578e <xTaskCreateStatic>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	4a1e      	ldr	r2, [pc, #120]	@ (8005bdc <vTaskStartScheduler+0xb4>)
 8005b62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b64:	4b1d      	ldr	r3, [pc, #116]	@ (8005bdc <vTaskStartScheduler+0xb4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	e001      	b.n	8005b76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d116      	bne.n	8005baa <vTaskStartScheduler+0x82>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	613b      	str	r3, [r7, #16]
}
 8005b8e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b90:	4b13      	ldr	r3, [pc, #76]	@ (8005be0 <vTaskStartScheduler+0xb8>)
 8005b92:	f04f 32ff 	mov.w	r2, #4294967295
 8005b96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b98:	4b12      	ldr	r3, [pc, #72]	@ (8005be4 <vTaskStartScheduler+0xbc>)
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b9e:	4b12      	ldr	r3, [pc, #72]	@ (8005be8 <vTaskStartScheduler+0xc0>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ba4:	f000 fbac 	bl	8006300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ba8:	e00f      	b.n	8005bca <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d10b      	bne.n	8005bca <vTaskStartScheduler+0xa2>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	60fb      	str	r3, [r7, #12]
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop
 8005bc8:	e7fd      	b.n	8005bc6 <vTaskStartScheduler+0x9e>
}
 8005bca:	bf00      	nop
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	08006af0 	.word	0x08006af0
 8005bd8:	08005f71 	.word	0x08005f71
 8005bdc:	200006e4 	.word	0x200006e4
 8005be0:	200006e0 	.word	0x200006e0
 8005be4:	200006cc 	.word	0x200006cc
 8005be8:	200006c4 	.word	0x200006c4

08005bec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005bf0:	4b04      	ldr	r3, [pc, #16]	@ (8005c04 <vTaskSuspendAll+0x18>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	4a03      	ldr	r2, [pc, #12]	@ (8005c04 <vTaskSuspendAll+0x18>)
 8005bf8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005bfa:	bf00      	nop
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	200006e8 	.word	0x200006e8

08005c08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c16:	4b42      	ldr	r3, [pc, #264]	@ (8005d20 <xTaskResumeAll+0x118>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10b      	bne.n	8005c36 <xTaskResumeAll+0x2e>
	__asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	603b      	str	r3, [r7, #0]
}
 8005c30:	bf00      	nop
 8005c32:	bf00      	nop
 8005c34:	e7fd      	b.n	8005c32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c36:	f000 fc07 	bl	8006448 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c3a:	4b39      	ldr	r3, [pc, #228]	@ (8005d20 <xTaskResumeAll+0x118>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	4a37      	ldr	r2, [pc, #220]	@ (8005d20 <xTaskResumeAll+0x118>)
 8005c42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c44:	4b36      	ldr	r3, [pc, #216]	@ (8005d20 <xTaskResumeAll+0x118>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d161      	bne.n	8005d10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c4c:	4b35      	ldr	r3, [pc, #212]	@ (8005d24 <xTaskResumeAll+0x11c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d05d      	beq.n	8005d10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c54:	e02e      	b.n	8005cb4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c56:	4b34      	ldr	r3, [pc, #208]	@ (8005d28 <xTaskResumeAll+0x120>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3318      	adds	r3, #24
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff fd69 	bl	800573a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fd64 	bl	800573a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c76:	2201      	movs	r2, #1
 8005c78:	409a      	lsls	r2, r3
 8005c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8005d2c <xTaskResumeAll+0x124>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	4a2a      	ldr	r2, [pc, #168]	@ (8005d2c <xTaskResumeAll+0x124>)
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c88:	4613      	mov	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4a27      	ldr	r2, [pc, #156]	@ (8005d30 <xTaskResumeAll+0x128>)
 8005c92:	441a      	add	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3304      	adds	r3, #4
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	f7ff fcf0 	bl	8005680 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ca4:	4b23      	ldr	r3, [pc, #140]	@ (8005d34 <xTaskResumeAll+0x12c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d302      	bcc.n	8005cb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005cae:	4b22      	ldr	r3, [pc, #136]	@ (8005d38 <xTaskResumeAll+0x130>)
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8005d28 <xTaskResumeAll+0x120>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1cc      	bne.n	8005c56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cc2:	f000 fa0b 	bl	80060dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8005d3c <xTaskResumeAll+0x134>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d010      	beq.n	8005cf4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cd2:	f000 f837 	bl	8005d44 <xTaskIncrementTick>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005cdc:	4b16      	ldr	r3, [pc, #88]	@ (8005d38 <xTaskResumeAll+0x130>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1f1      	bne.n	8005cd2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005cee:	4b13      	ldr	r3, [pc, #76]	@ (8005d3c <xTaskResumeAll+0x134>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cf4:	4b10      	ldr	r3, [pc, #64]	@ (8005d38 <xTaskResumeAll+0x130>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d009      	beq.n	8005d10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d00:	4b0f      	ldr	r3, [pc, #60]	@ (8005d40 <xTaskResumeAll+0x138>)
 8005d02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d10:	f000 fbcc 	bl	80064ac <vPortExitCritical>

	return xAlreadyYielded;
 8005d14:	68bb      	ldr	r3, [r7, #8]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	200006e8 	.word	0x200006e8
 8005d24:	200006c0 	.word	0x200006c0
 8005d28:	20000680 	.word	0x20000680
 8005d2c:	200006c8 	.word	0x200006c8
 8005d30:	200005c4 	.word	0x200005c4
 8005d34:	200005c0 	.word	0x200005c0
 8005d38:	200006d4 	.word	0x200006d4
 8005d3c:	200006d0 	.word	0x200006d0
 8005d40:	e000ed04 	.word	0xe000ed04

08005d44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d4e:	4b4f      	ldr	r3, [pc, #316]	@ (8005e8c <xTaskIncrementTick+0x148>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f040 808f 	bne.w	8005e76 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d58:	4b4d      	ldr	r3, [pc, #308]	@ (8005e90 <xTaskIncrementTick+0x14c>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d60:	4a4b      	ldr	r2, [pc, #300]	@ (8005e90 <xTaskIncrementTick+0x14c>)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d121      	bne.n	8005db0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d6c:	4b49      	ldr	r3, [pc, #292]	@ (8005e94 <xTaskIncrementTick+0x150>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00b      	beq.n	8005d8e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	603b      	str	r3, [r7, #0]
}
 8005d88:	bf00      	nop
 8005d8a:	bf00      	nop
 8005d8c:	e7fd      	b.n	8005d8a <xTaskIncrementTick+0x46>
 8005d8e:	4b41      	ldr	r3, [pc, #260]	@ (8005e94 <xTaskIncrementTick+0x150>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	4b40      	ldr	r3, [pc, #256]	@ (8005e98 <xTaskIncrementTick+0x154>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a3e      	ldr	r2, [pc, #248]	@ (8005e94 <xTaskIncrementTick+0x150>)
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	4a3e      	ldr	r2, [pc, #248]	@ (8005e98 <xTaskIncrementTick+0x154>)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	4b3e      	ldr	r3, [pc, #248]	@ (8005e9c <xTaskIncrementTick+0x158>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3301      	adds	r3, #1
 8005da8:	4a3c      	ldr	r2, [pc, #240]	@ (8005e9c <xTaskIncrementTick+0x158>)
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	f000 f996 	bl	80060dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005db0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ea0 <xTaskIncrementTick+0x15c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d348      	bcc.n	8005e4c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dba:	4b36      	ldr	r3, [pc, #216]	@ (8005e94 <xTaskIncrementTick+0x150>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d104      	bne.n	8005dce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dc4:	4b36      	ldr	r3, [pc, #216]	@ (8005ea0 <xTaskIncrementTick+0x15c>)
 8005dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dca:	601a      	str	r2, [r3, #0]
					break;
 8005dcc:	e03e      	b.n	8005e4c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dce:	4b31      	ldr	r3, [pc, #196]	@ (8005e94 <xTaskIncrementTick+0x150>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d203      	bcs.n	8005dee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005de6:	4a2e      	ldr	r2, [pc, #184]	@ (8005ea0 <xTaskIncrementTick+0x15c>)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005dec:	e02e      	b.n	8005e4c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	3304      	adds	r3, #4
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff fca1 	bl	800573a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d004      	beq.n	8005e0a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	3318      	adds	r3, #24
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff fc98 	bl	800573a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0e:	2201      	movs	r2, #1
 8005e10:	409a      	lsls	r2, r3
 8005e12:	4b24      	ldr	r3, [pc, #144]	@ (8005ea4 <xTaskIncrementTick+0x160>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	4a22      	ldr	r2, [pc, #136]	@ (8005ea4 <xTaskIncrementTick+0x160>)
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4a1f      	ldr	r2, [pc, #124]	@ (8005ea8 <xTaskIncrementTick+0x164>)
 8005e2a:	441a      	add	r2, r3
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	4619      	mov	r1, r3
 8005e32:	4610      	mov	r0, r2
 8005e34:	f7ff fc24 	bl	8005680 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005eac <xTaskIncrementTick+0x168>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d3b9      	bcc.n	8005dba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005e46:	2301      	movs	r3, #1
 8005e48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e4a:	e7b6      	b.n	8005dba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e4c:	4b17      	ldr	r3, [pc, #92]	@ (8005eac <xTaskIncrementTick+0x168>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e52:	4915      	ldr	r1, [pc, #84]	@ (8005ea8 <xTaskIncrementTick+0x164>)
 8005e54:	4613      	mov	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	440b      	add	r3, r1
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d901      	bls.n	8005e68 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005e64:	2301      	movs	r3, #1
 8005e66:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e68:	4b11      	ldr	r3, [pc, #68]	@ (8005eb0 <xTaskIncrementTick+0x16c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d007      	beq.n	8005e80 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005e70:	2301      	movs	r3, #1
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	e004      	b.n	8005e80 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e76:	4b0f      	ldr	r3, [pc, #60]	@ (8005eb4 <xTaskIncrementTick+0x170>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8005eb4 <xTaskIncrementTick+0x170>)
 8005e7e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e80:	697b      	ldr	r3, [r7, #20]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	200006e8 	.word	0x200006e8
 8005e90:	200006c4 	.word	0x200006c4
 8005e94:	20000678 	.word	0x20000678
 8005e98:	2000067c 	.word	0x2000067c
 8005e9c:	200006d8 	.word	0x200006d8
 8005ea0:	200006e0 	.word	0x200006e0
 8005ea4:	200006c8 	.word	0x200006c8
 8005ea8:	200005c4 	.word	0x200005c4
 8005eac:	200005c0 	.word	0x200005c0
 8005eb0:	200006d4 	.word	0x200006d4
 8005eb4:	200006d0 	.word	0x200006d0

08005eb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ebe:	4b27      	ldr	r3, [pc, #156]	@ (8005f5c <vTaskSwitchContext+0xa4>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ec6:	4b26      	ldr	r3, [pc, #152]	@ (8005f60 <vTaskSwitchContext+0xa8>)
 8005ec8:	2201      	movs	r2, #1
 8005eca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ecc:	e040      	b.n	8005f50 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005ece:	4b24      	ldr	r3, [pc, #144]	@ (8005f60 <vTaskSwitchContext+0xa8>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ed4:	4b23      	ldr	r3, [pc, #140]	@ (8005f64 <vTaskSwitchContext+0xac>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	fab3 f383 	clz	r3, r3
 8005ee0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ee2:	7afb      	ldrb	r3, [r7, #11]
 8005ee4:	f1c3 031f 	rsb	r3, r3, #31
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	491f      	ldr	r1, [pc, #124]	@ (8005f68 <vTaskSwitchContext+0xb0>)
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	440b      	add	r3, r1
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10b      	bne.n	8005f16 <vTaskSwitchContext+0x5e>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	607b      	str	r3, [r7, #4]
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop
 8005f14:	e7fd      	b.n	8005f12 <vTaskSwitchContext+0x5a>
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4a11      	ldr	r2, [pc, #68]	@ (8005f68 <vTaskSwitchContext+0xb0>)
 8005f22:	4413      	add	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	605a      	str	r2, [r3, #4]
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	3308      	adds	r3, #8
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d104      	bne.n	8005f46 <vTaskSwitchContext+0x8e>
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	605a      	str	r2, [r3, #4]
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	4a07      	ldr	r2, [pc, #28]	@ (8005f6c <vTaskSwitchContext+0xb4>)
 8005f4e:	6013      	str	r3, [r2, #0]
}
 8005f50:	bf00      	nop
 8005f52:	371c      	adds	r7, #28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	200006e8 	.word	0x200006e8
 8005f60:	200006d4 	.word	0x200006d4
 8005f64:	200006c8 	.word	0x200006c8
 8005f68:	200005c4 	.word	0x200005c4
 8005f6c:	200005c0 	.word	0x200005c0

08005f70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f78:	f000 f852 	bl	8006020 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f7c:	4b06      	ldr	r3, [pc, #24]	@ (8005f98 <prvIdleTask+0x28>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d9f9      	bls.n	8005f78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f84:	4b05      	ldr	r3, [pc, #20]	@ (8005f9c <prvIdleTask+0x2c>)
 8005f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f94:	e7f0      	b.n	8005f78 <prvIdleTask+0x8>
 8005f96:	bf00      	nop
 8005f98:	200005c4 	.word	0x200005c4
 8005f9c:	e000ed04 	.word	0xe000ed04

08005fa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	607b      	str	r3, [r7, #4]
 8005faa:	e00c      	b.n	8005fc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4a12      	ldr	r2, [pc, #72]	@ (8006000 <prvInitialiseTaskLists+0x60>)
 8005fb8:	4413      	add	r3, r2
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7ff fb33 	bl	8005626 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b06      	cmp	r3, #6
 8005fca:	d9ef      	bls.n	8005fac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fcc:	480d      	ldr	r0, [pc, #52]	@ (8006004 <prvInitialiseTaskLists+0x64>)
 8005fce:	f7ff fb2a 	bl	8005626 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fd2:	480d      	ldr	r0, [pc, #52]	@ (8006008 <prvInitialiseTaskLists+0x68>)
 8005fd4:	f7ff fb27 	bl	8005626 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fd8:	480c      	ldr	r0, [pc, #48]	@ (800600c <prvInitialiseTaskLists+0x6c>)
 8005fda:	f7ff fb24 	bl	8005626 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fde:	480c      	ldr	r0, [pc, #48]	@ (8006010 <prvInitialiseTaskLists+0x70>)
 8005fe0:	f7ff fb21 	bl	8005626 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fe4:	480b      	ldr	r0, [pc, #44]	@ (8006014 <prvInitialiseTaskLists+0x74>)
 8005fe6:	f7ff fb1e 	bl	8005626 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fea:	4b0b      	ldr	r3, [pc, #44]	@ (8006018 <prvInitialiseTaskLists+0x78>)
 8005fec:	4a05      	ldr	r2, [pc, #20]	@ (8006004 <prvInitialiseTaskLists+0x64>)
 8005fee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800601c <prvInitialiseTaskLists+0x7c>)
 8005ff2:	4a05      	ldr	r2, [pc, #20]	@ (8006008 <prvInitialiseTaskLists+0x68>)
 8005ff4:	601a      	str	r2, [r3, #0]
}
 8005ff6:	bf00      	nop
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	200005c4 	.word	0x200005c4
 8006004:	20000650 	.word	0x20000650
 8006008:	20000664 	.word	0x20000664
 800600c:	20000680 	.word	0x20000680
 8006010:	20000694 	.word	0x20000694
 8006014:	200006ac 	.word	0x200006ac
 8006018:	20000678 	.word	0x20000678
 800601c:	2000067c 	.word	0x2000067c

08006020 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006026:	e019      	b.n	800605c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006028:	f000 fa0e 	bl	8006448 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800602c:	4b10      	ldr	r3, [pc, #64]	@ (8006070 <prvCheckTasksWaitingTermination+0x50>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3304      	adds	r3, #4
 8006038:	4618      	mov	r0, r3
 800603a:	f7ff fb7e 	bl	800573a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800603e:	4b0d      	ldr	r3, [pc, #52]	@ (8006074 <prvCheckTasksWaitingTermination+0x54>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3b01      	subs	r3, #1
 8006044:	4a0b      	ldr	r2, [pc, #44]	@ (8006074 <prvCheckTasksWaitingTermination+0x54>)
 8006046:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006048:	4b0b      	ldr	r3, [pc, #44]	@ (8006078 <prvCheckTasksWaitingTermination+0x58>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3b01      	subs	r3, #1
 800604e:	4a0a      	ldr	r2, [pc, #40]	@ (8006078 <prvCheckTasksWaitingTermination+0x58>)
 8006050:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006052:	f000 fa2b 	bl	80064ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f810 	bl	800607c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800605c:	4b06      	ldr	r3, [pc, #24]	@ (8006078 <prvCheckTasksWaitingTermination+0x58>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e1      	bne.n	8006028 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006064:	bf00      	nop
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20000694 	.word	0x20000694
 8006074:	200006c0 	.word	0x200006c0
 8006078:	200006a8 	.word	0x200006a8

0800607c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800608a:	2b00      	cmp	r3, #0
 800608c:	d108      	bne.n	80060a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fb86 	bl	80067a4 <vPortFree>
				vPortFree( pxTCB );
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fb83 	bl	80067a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800609e:	e019      	b.n	80060d4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d103      	bne.n	80060b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fb7a 	bl	80067a4 <vPortFree>
	}
 80060b0:	e010      	b.n	80060d4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d00b      	beq.n	80060d4 <prvDeleteTCB+0x58>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	60fb      	str	r3, [r7, #12]
}
 80060ce:	bf00      	nop
 80060d0:	bf00      	nop
 80060d2:	e7fd      	b.n	80060d0 <prvDeleteTCB+0x54>
	}
 80060d4:	bf00      	nop
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006114 <prvResetNextTaskUnblockTime+0x38>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d104      	bne.n	80060f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006118 <prvResetNextTaskUnblockTime+0x3c>)
 80060ee:	f04f 32ff 	mov.w	r2, #4294967295
 80060f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060f4:	e008      	b.n	8006108 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f6:	4b07      	ldr	r3, [pc, #28]	@ (8006114 <prvResetNextTaskUnblockTime+0x38>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	4a04      	ldr	r2, [pc, #16]	@ (8006118 <prvResetNextTaskUnblockTime+0x3c>)
 8006106:	6013      	str	r3, [r2, #0]
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	20000678 	.word	0x20000678
 8006118:	200006e0 	.word	0x200006e0

0800611c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006126:	4b29      	ldr	r3, [pc, #164]	@ (80061cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800612c:	4b28      	ldr	r3, [pc, #160]	@ (80061d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3304      	adds	r3, #4
 8006132:	4618      	mov	r0, r3
 8006134:	f7ff fb01 	bl	800573a <uxListRemove>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10b      	bne.n	8006156 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800613e:	4b24      	ldr	r3, [pc, #144]	@ (80061d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006144:	2201      	movs	r2, #1
 8006146:	fa02 f303 	lsl.w	r3, r2, r3
 800614a:	43da      	mvns	r2, r3
 800614c:	4b21      	ldr	r3, [pc, #132]	@ (80061d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4013      	ands	r3, r2
 8006152:	4a20      	ldr	r2, [pc, #128]	@ (80061d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006154:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615c:	d10a      	bne.n	8006174 <prvAddCurrentTaskToDelayedList+0x58>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d007      	beq.n	8006174 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006164:	4b1a      	ldr	r3, [pc, #104]	@ (80061d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3304      	adds	r3, #4
 800616a:	4619      	mov	r1, r3
 800616c:	481a      	ldr	r0, [pc, #104]	@ (80061d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800616e:	f7ff fa87 	bl	8005680 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006172:	e026      	b.n	80061c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4413      	add	r3, r2
 800617a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800617c:	4b14      	ldr	r3, [pc, #80]	@ (80061d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	429a      	cmp	r2, r3
 800618a:	d209      	bcs.n	80061a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800618c:	4b13      	ldr	r3, [pc, #76]	@ (80061dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	4b0f      	ldr	r3, [pc, #60]	@ (80061d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3304      	adds	r3, #4
 8006196:	4619      	mov	r1, r3
 8006198:	4610      	mov	r0, r2
 800619a:	f7ff fa95 	bl	80056c8 <vListInsert>
}
 800619e:	e010      	b.n	80061c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061a0:	4b0f      	ldr	r3, [pc, #60]	@ (80061e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4b0a      	ldr	r3, [pc, #40]	@ (80061d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3304      	adds	r3, #4
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f7ff fa8b 	bl	80056c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061b2:	4b0c      	ldr	r3, [pc, #48]	@ (80061e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d202      	bcs.n	80061c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80061bc:	4a09      	ldr	r2, [pc, #36]	@ (80061e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	6013      	str	r3, [r2, #0]
}
 80061c2:	bf00      	nop
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	200006c4 	.word	0x200006c4
 80061d0:	200005c0 	.word	0x200005c0
 80061d4:	200006c8 	.word	0x200006c8
 80061d8:	200006ac 	.word	0x200006ac
 80061dc:	2000067c 	.word	0x2000067c
 80061e0:	20000678 	.word	0x20000678
 80061e4:	200006e0 	.word	0x200006e0

080061e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3b04      	subs	r3, #4
 80061f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3b04      	subs	r3, #4
 8006206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f023 0201 	bic.w	r2, r3, #1
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3b04      	subs	r3, #4
 8006216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006218:	4a0c      	ldr	r2, [pc, #48]	@ (800624c <pxPortInitialiseStack+0x64>)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3b14      	subs	r3, #20
 8006222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3b04      	subs	r3, #4
 800622e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f06f 0202 	mvn.w	r2, #2
 8006236:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3b20      	subs	r3, #32
 800623c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800623e:	68fb      	ldr	r3, [r7, #12]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	08006251 	.word	0x08006251

08006250 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800625a:	4b13      	ldr	r3, [pc, #76]	@ (80062a8 <prvTaskExitError+0x58>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	d00b      	beq.n	800627c <prvTaskExitError+0x2c>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	60fb      	str	r3, [r7, #12]
}
 8006276:	bf00      	nop
 8006278:	bf00      	nop
 800627a:	e7fd      	b.n	8006278 <prvTaskExitError+0x28>
	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	60bb      	str	r3, [r7, #8]
}
 800628e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006290:	bf00      	nop
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0fc      	beq.n	8006292 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006298:	bf00      	nop
 800629a:	bf00      	nop
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	2000000c 	.word	0x2000000c
 80062ac:	00000000 	.word	0x00000000

080062b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062b0:	4b07      	ldr	r3, [pc, #28]	@ (80062d0 <pxCurrentTCBConst2>)
 80062b2:	6819      	ldr	r1, [r3, #0]
 80062b4:	6808      	ldr	r0, [r1, #0]
 80062b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ba:	f380 8809 	msr	PSP, r0
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f04f 0000 	mov.w	r0, #0
 80062c6:	f380 8811 	msr	BASEPRI, r0
 80062ca:	4770      	bx	lr
 80062cc:	f3af 8000 	nop.w

080062d0 <pxCurrentTCBConst2>:
 80062d0:	200005c0 	.word	0x200005c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop

080062d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062d8:	4808      	ldr	r0, [pc, #32]	@ (80062fc <prvPortStartFirstTask+0x24>)
 80062da:	6800      	ldr	r0, [r0, #0]
 80062dc:	6800      	ldr	r0, [r0, #0]
 80062de:	f380 8808 	msr	MSP, r0
 80062e2:	f04f 0000 	mov.w	r0, #0
 80062e6:	f380 8814 	msr	CONTROL, r0
 80062ea:	b662      	cpsie	i
 80062ec:	b661      	cpsie	f
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	df00      	svc	0
 80062f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062fa:	bf00      	nop
 80062fc:	e000ed08 	.word	0xe000ed08

08006300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006306:	4b47      	ldr	r3, [pc, #284]	@ (8006424 <xPortStartScheduler+0x124>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a47      	ldr	r2, [pc, #284]	@ (8006428 <xPortStartScheduler+0x128>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d10b      	bne.n	8006328 <xPortStartScheduler+0x28>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	613b      	str	r3, [r7, #16]
}
 8006322:	bf00      	nop
 8006324:	bf00      	nop
 8006326:	e7fd      	b.n	8006324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006328:	4b3e      	ldr	r3, [pc, #248]	@ (8006424 <xPortStartScheduler+0x124>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a3f      	ldr	r2, [pc, #252]	@ (800642c <xPortStartScheduler+0x12c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d10b      	bne.n	800634a <xPortStartScheduler+0x4a>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	60fb      	str	r3, [r7, #12]
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop
 8006348:	e7fd      	b.n	8006346 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800634a:	4b39      	ldr	r3, [pc, #228]	@ (8006430 <xPortStartScheduler+0x130>)
 800634c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	22ff      	movs	r2, #255	@ 0xff
 800635a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	b2db      	uxtb	r3, r3
 8006362:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	b2db      	uxtb	r3, r3
 8006368:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800636c:	b2da      	uxtb	r2, r3
 800636e:	4b31      	ldr	r3, [pc, #196]	@ (8006434 <xPortStartScheduler+0x134>)
 8006370:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006372:	4b31      	ldr	r3, [pc, #196]	@ (8006438 <xPortStartScheduler+0x138>)
 8006374:	2207      	movs	r2, #7
 8006376:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006378:	e009      	b.n	800638e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800637a:	4b2f      	ldr	r3, [pc, #188]	@ (8006438 <xPortStartScheduler+0x138>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3b01      	subs	r3, #1
 8006380:	4a2d      	ldr	r2, [pc, #180]	@ (8006438 <xPortStartScheduler+0x138>)
 8006382:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	b2db      	uxtb	r3, r3
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	b2db      	uxtb	r3, r3
 800638c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	b2db      	uxtb	r3, r3
 8006392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006396:	2b80      	cmp	r3, #128	@ 0x80
 8006398:	d0ef      	beq.n	800637a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800639a:	4b27      	ldr	r3, [pc, #156]	@ (8006438 <xPortStartScheduler+0x138>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f1c3 0307 	rsb	r3, r3, #7
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d00b      	beq.n	80063be <xPortStartScheduler+0xbe>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	60bb      	str	r3, [r7, #8]
}
 80063b8:	bf00      	nop
 80063ba:	bf00      	nop
 80063bc:	e7fd      	b.n	80063ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063be:	4b1e      	ldr	r3, [pc, #120]	@ (8006438 <xPortStartScheduler+0x138>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	021b      	lsls	r3, r3, #8
 80063c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006438 <xPortStartScheduler+0x138>)
 80063c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006438 <xPortStartScheduler+0x138>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80063d0:	4a19      	ldr	r2, [pc, #100]	@ (8006438 <xPortStartScheduler+0x138>)
 80063d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063dc:	4b17      	ldr	r3, [pc, #92]	@ (800643c <xPortStartScheduler+0x13c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a16      	ldr	r2, [pc, #88]	@ (800643c <xPortStartScheduler+0x13c>)
 80063e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80063e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063e8:	4b14      	ldr	r3, [pc, #80]	@ (800643c <xPortStartScheduler+0x13c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a13      	ldr	r2, [pc, #76]	@ (800643c <xPortStartScheduler+0x13c>)
 80063ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80063f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063f4:	f000 f8da 	bl	80065ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063f8:	4b11      	ldr	r3, [pc, #68]	@ (8006440 <xPortStartScheduler+0x140>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063fe:	f000 f8f9 	bl	80065f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006402:	4b10      	ldr	r3, [pc, #64]	@ (8006444 <xPortStartScheduler+0x144>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a0f      	ldr	r2, [pc, #60]	@ (8006444 <xPortStartScheduler+0x144>)
 8006408:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800640c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800640e:	f7ff ff63 	bl	80062d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006412:	f7ff fd51 	bl	8005eb8 <vTaskSwitchContext>
	prvTaskExitError();
 8006416:	f7ff ff1b 	bl	8006250 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	e000ed00 	.word	0xe000ed00
 8006428:	410fc271 	.word	0x410fc271
 800642c:	410fc270 	.word	0x410fc270
 8006430:	e000e400 	.word	0xe000e400
 8006434:	200006ec 	.word	0x200006ec
 8006438:	200006f0 	.word	0x200006f0
 800643c:	e000ed20 	.word	0xe000ed20
 8006440:	2000000c 	.word	0x2000000c
 8006444:	e000ef34 	.word	0xe000ef34

08006448 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	607b      	str	r3, [r7, #4]
}
 8006460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006462:	4b10      	ldr	r3, [pc, #64]	@ (80064a4 <vPortEnterCritical+0x5c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3301      	adds	r3, #1
 8006468:	4a0e      	ldr	r2, [pc, #56]	@ (80064a4 <vPortEnterCritical+0x5c>)
 800646a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800646c:	4b0d      	ldr	r3, [pc, #52]	@ (80064a4 <vPortEnterCritical+0x5c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d110      	bne.n	8006496 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006474:	4b0c      	ldr	r3, [pc, #48]	@ (80064a8 <vPortEnterCritical+0x60>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00b      	beq.n	8006496 <vPortEnterCritical+0x4e>
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	603b      	str	r3, [r7, #0]
}
 8006490:	bf00      	nop
 8006492:	bf00      	nop
 8006494:	e7fd      	b.n	8006492 <vPortEnterCritical+0x4a>
	}
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	2000000c 	.word	0x2000000c
 80064a8:	e000ed04 	.word	0xe000ed04

080064ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064b2:	4b12      	ldr	r3, [pc, #72]	@ (80064fc <vPortExitCritical+0x50>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10b      	bne.n	80064d2 <vPortExitCritical+0x26>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	607b      	str	r3, [r7, #4]
}
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	e7fd      	b.n	80064ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064d2:	4b0a      	ldr	r3, [pc, #40]	@ (80064fc <vPortExitCritical+0x50>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	4a08      	ldr	r2, [pc, #32]	@ (80064fc <vPortExitCritical+0x50>)
 80064da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064dc:	4b07      	ldr	r3, [pc, #28]	@ (80064fc <vPortExitCritical+0x50>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d105      	bne.n	80064f0 <vPortExitCritical+0x44>
 80064e4:	2300      	movs	r3, #0
 80064e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	2000000c 	.word	0x2000000c

08006500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006500:	f3ef 8009 	mrs	r0, PSP
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	4b15      	ldr	r3, [pc, #84]	@ (8006560 <pxCurrentTCBConst>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	f01e 0f10 	tst.w	lr, #16
 8006510:	bf08      	it	eq
 8006512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651a:	6010      	str	r0, [r2, #0]
 800651c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006520:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006524:	f380 8811 	msr	BASEPRI, r0
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f7ff fcc2 	bl	8005eb8 <vTaskSwitchContext>
 8006534:	f04f 0000 	mov.w	r0, #0
 8006538:	f380 8811 	msr	BASEPRI, r0
 800653c:	bc09      	pop	{r0, r3}
 800653e:	6819      	ldr	r1, [r3, #0]
 8006540:	6808      	ldr	r0, [r1, #0]
 8006542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006546:	f01e 0f10 	tst.w	lr, #16
 800654a:	bf08      	it	eq
 800654c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006550:	f380 8809 	msr	PSP, r0
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	f3af 8000 	nop.w

08006560 <pxCurrentTCBConst>:
 8006560:	200005c0 	.word	0x200005c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop

08006568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	607b      	str	r3, [r7, #4]
}
 8006580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006582:	f7ff fbdf 	bl	8005d44 <xTaskIncrementTick>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800658c:	4b06      	ldr	r3, [pc, #24]	@ (80065a8 <SysTick_Handler+0x40>)
 800658e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	2300      	movs	r3, #0
 8006596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	f383 8811 	msr	BASEPRI, r3
}
 800659e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065b0:	4b0b      	ldr	r3, [pc, #44]	@ (80065e0 <vPortSetupTimerInterrupt+0x34>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065b6:	4b0b      	ldr	r3, [pc, #44]	@ (80065e4 <vPortSetupTimerInterrupt+0x38>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065bc:	4b0a      	ldr	r3, [pc, #40]	@ (80065e8 <vPortSetupTimerInterrupt+0x3c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a0a      	ldr	r2, [pc, #40]	@ (80065ec <vPortSetupTimerInterrupt+0x40>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	099b      	lsrs	r3, r3, #6
 80065c8:	4a09      	ldr	r2, [pc, #36]	@ (80065f0 <vPortSetupTimerInterrupt+0x44>)
 80065ca:	3b01      	subs	r3, #1
 80065cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065ce:	4b04      	ldr	r3, [pc, #16]	@ (80065e0 <vPortSetupTimerInterrupt+0x34>)
 80065d0:	2207      	movs	r2, #7
 80065d2:	601a      	str	r2, [r3, #0]
}
 80065d4:	bf00      	nop
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	e000e010 	.word	0xe000e010
 80065e4:	e000e018 	.word	0xe000e018
 80065e8:	20000000 	.word	0x20000000
 80065ec:	10624dd3 	.word	0x10624dd3
 80065f0:	e000e014 	.word	0xe000e014

080065f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006604 <vPortEnableVFP+0x10>
 80065f8:	6801      	ldr	r1, [r0, #0]
 80065fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80065fe:	6001      	str	r1, [r0, #0]
 8006600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006602:	bf00      	nop
 8006604:	e000ed88 	.word	0xe000ed88

08006608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08a      	sub	sp, #40	@ 0x28
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006610:	2300      	movs	r3, #0
 8006612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006614:	f7ff faea 	bl	8005bec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006618:	4b5c      	ldr	r3, [pc, #368]	@ (800678c <pvPortMalloc+0x184>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006620:	f000 f924 	bl	800686c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006624:	4b5a      	ldr	r3, [pc, #360]	@ (8006790 <pvPortMalloc+0x188>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4013      	ands	r3, r2
 800662c:	2b00      	cmp	r3, #0
 800662e:	f040 8095 	bne.w	800675c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d01e      	beq.n	8006676 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006638:	2208      	movs	r2, #8
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4413      	add	r3, r2
 800663e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	2b00      	cmp	r3, #0
 8006648:	d015      	beq.n	8006676 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f023 0307 	bic.w	r3, r3, #7
 8006650:	3308      	adds	r3, #8
 8006652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00b      	beq.n	8006676 <pvPortMalloc+0x6e>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	617b      	str	r3, [r7, #20]
}
 8006670:	bf00      	nop
 8006672:	bf00      	nop
 8006674:	e7fd      	b.n	8006672 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d06f      	beq.n	800675c <pvPortMalloc+0x154>
 800667c:	4b45      	ldr	r3, [pc, #276]	@ (8006794 <pvPortMalloc+0x18c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	429a      	cmp	r2, r3
 8006684:	d86a      	bhi.n	800675c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006686:	4b44      	ldr	r3, [pc, #272]	@ (8006798 <pvPortMalloc+0x190>)
 8006688:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800668a:	4b43      	ldr	r3, [pc, #268]	@ (8006798 <pvPortMalloc+0x190>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006690:	e004      	b.n	800669c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006694:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800669c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d903      	bls.n	80066ae <pvPortMalloc+0xa6>
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1f1      	bne.n	8006692 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066ae:	4b37      	ldr	r3, [pc, #220]	@ (800678c <pvPortMalloc+0x184>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d051      	beq.n	800675c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2208      	movs	r2, #8
 80066be:	4413      	add	r3, r2
 80066c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	1ad2      	subs	r2, r2, r3
 80066d2:	2308      	movs	r3, #8
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d920      	bls.n	800671c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4413      	add	r3, r2
 80066e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <pvPortMalloc+0xfc>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	613b      	str	r3, [r7, #16]
}
 80066fe:	bf00      	nop
 8006700:	bf00      	nop
 8006702:	e7fd      	b.n	8006700 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	1ad2      	subs	r2, r2, r3
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006716:	69b8      	ldr	r0, [r7, #24]
 8006718:	f000 f90a 	bl	8006930 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800671c:	4b1d      	ldr	r3, [pc, #116]	@ (8006794 <pvPortMalloc+0x18c>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	4a1b      	ldr	r2, [pc, #108]	@ (8006794 <pvPortMalloc+0x18c>)
 8006728:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800672a:	4b1a      	ldr	r3, [pc, #104]	@ (8006794 <pvPortMalloc+0x18c>)
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	4b1b      	ldr	r3, [pc, #108]	@ (800679c <pvPortMalloc+0x194>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	429a      	cmp	r2, r3
 8006734:	d203      	bcs.n	800673e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006736:	4b17      	ldr	r3, [pc, #92]	@ (8006794 <pvPortMalloc+0x18c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a18      	ldr	r2, [pc, #96]	@ (800679c <pvPortMalloc+0x194>)
 800673c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	4b13      	ldr	r3, [pc, #76]	@ (8006790 <pvPortMalloc+0x188>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	431a      	orrs	r2, r3
 8006748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800674c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006752:	4b13      	ldr	r3, [pc, #76]	@ (80067a0 <pvPortMalloc+0x198>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3301      	adds	r3, #1
 8006758:	4a11      	ldr	r2, [pc, #68]	@ (80067a0 <pvPortMalloc+0x198>)
 800675a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800675c:	f7ff fa54 	bl	8005c08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	f003 0307 	and.w	r3, r3, #7
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00b      	beq.n	8006782 <pvPortMalloc+0x17a>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	60fb      	str	r3, [r7, #12]
}
 800677c:	bf00      	nop
 800677e:	bf00      	nop
 8006780:	e7fd      	b.n	800677e <pvPortMalloc+0x176>
	return pvReturn;
 8006782:	69fb      	ldr	r3, [r7, #28]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3728      	adds	r7, #40	@ 0x28
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	200042fc 	.word	0x200042fc
 8006790:	20004310 	.word	0x20004310
 8006794:	20004300 	.word	0x20004300
 8006798:	200042f4 	.word	0x200042f4
 800679c:	20004304 	.word	0x20004304
 80067a0:	20004308 	.word	0x20004308

080067a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d04f      	beq.n	8006856 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067b6:	2308      	movs	r3, #8
 80067b8:	425b      	negs	r3, r3
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	4413      	add	r3, r2
 80067be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	4b25      	ldr	r3, [pc, #148]	@ (8006860 <vPortFree+0xbc>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4013      	ands	r3, r2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10b      	bne.n	80067ea <vPortFree+0x46>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	60fb      	str	r3, [r7, #12]
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	e7fd      	b.n	80067e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00b      	beq.n	800680a <vPortFree+0x66>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	60bb      	str	r3, [r7, #8]
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop
 8006808:	e7fd      	b.n	8006806 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	4b14      	ldr	r3, [pc, #80]	@ (8006860 <vPortFree+0xbc>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4013      	ands	r3, r2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d01e      	beq.n	8006856 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d11a      	bne.n	8006856 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	4b0e      	ldr	r3, [pc, #56]	@ (8006860 <vPortFree+0xbc>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	43db      	mvns	r3, r3
 800682a:	401a      	ands	r2, r3
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006830:	f7ff f9dc 	bl	8005bec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	4b0a      	ldr	r3, [pc, #40]	@ (8006864 <vPortFree+0xc0>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4413      	add	r3, r2
 800683e:	4a09      	ldr	r2, [pc, #36]	@ (8006864 <vPortFree+0xc0>)
 8006840:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006842:	6938      	ldr	r0, [r7, #16]
 8006844:	f000 f874 	bl	8006930 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006848:	4b07      	ldr	r3, [pc, #28]	@ (8006868 <vPortFree+0xc4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3301      	adds	r3, #1
 800684e:	4a06      	ldr	r2, [pc, #24]	@ (8006868 <vPortFree+0xc4>)
 8006850:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006852:	f7ff f9d9 	bl	8005c08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006856:	bf00      	nop
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20004310 	.word	0x20004310
 8006864:	20004300 	.word	0x20004300
 8006868:	2000430c 	.word	0x2000430c

0800686c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006872:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006876:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006878:	4b27      	ldr	r3, [pc, #156]	@ (8006918 <prvHeapInit+0xac>)
 800687a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f003 0307 	and.w	r3, r3, #7
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00c      	beq.n	80068a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3307      	adds	r3, #7
 800688a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0307 	bic.w	r3, r3, #7
 8006892:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	4a1f      	ldr	r2, [pc, #124]	@ (8006918 <prvHeapInit+0xac>)
 800689c:	4413      	add	r3, r2
 800689e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068a4:	4a1d      	ldr	r2, [pc, #116]	@ (800691c <prvHeapInit+0xb0>)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068aa:	4b1c      	ldr	r3, [pc, #112]	@ (800691c <prvHeapInit+0xb0>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	4413      	add	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068b8:	2208      	movs	r2, #8
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	1a9b      	subs	r3, r3, r2
 80068be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f023 0307 	bic.w	r3, r3, #7
 80068c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4a15      	ldr	r2, [pc, #84]	@ (8006920 <prvHeapInit+0xb4>)
 80068cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068ce:	4b14      	ldr	r3, [pc, #80]	@ (8006920 <prvHeapInit+0xb4>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2200      	movs	r2, #0
 80068d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068d6:	4b12      	ldr	r3, [pc, #72]	@ (8006920 <prvHeapInit+0xb4>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2200      	movs	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	1ad2      	subs	r2, r2, r3
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006920 <prvHeapInit+0xb4>)
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	4a0a      	ldr	r2, [pc, #40]	@ (8006924 <prvHeapInit+0xb8>)
 80068fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	4a09      	ldr	r2, [pc, #36]	@ (8006928 <prvHeapInit+0xbc>)
 8006902:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006904:	4b09      	ldr	r3, [pc, #36]	@ (800692c <prvHeapInit+0xc0>)
 8006906:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800690a:	601a      	str	r2, [r3, #0]
}
 800690c:	bf00      	nop
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	200006f4 	.word	0x200006f4
 800691c:	200042f4 	.word	0x200042f4
 8006920:	200042fc 	.word	0x200042fc
 8006924:	20004304 	.word	0x20004304
 8006928:	20004300 	.word	0x20004300
 800692c:	20004310 	.word	0x20004310

08006930 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006938:	4b28      	ldr	r3, [pc, #160]	@ (80069dc <prvInsertBlockIntoFreeList+0xac>)
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	e002      	b.n	8006944 <prvInsertBlockIntoFreeList+0x14>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	429a      	cmp	r2, r3
 800694c:	d8f7      	bhi.n	800693e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	4413      	add	r3, r2
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	429a      	cmp	r2, r3
 800695e:	d108      	bne.n	8006972 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	441a      	add	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	441a      	add	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d118      	bne.n	80069b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	4b15      	ldr	r3, [pc, #84]	@ (80069e0 <prvInsertBlockIntoFreeList+0xb0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	d00d      	beq.n	80069ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	441a      	add	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	e008      	b.n	80069c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069ae:	4b0c      	ldr	r3, [pc, #48]	@ (80069e0 <prvInsertBlockIntoFreeList+0xb0>)
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	e003      	b.n	80069c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d002      	beq.n	80069ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069ce:	bf00      	nop
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	200042f4 	.word	0x200042f4
 80069e0:	200042fc 	.word	0x200042fc

080069e4 <memset>:
 80069e4:	4402      	add	r2, r0
 80069e6:	4603      	mov	r3, r0
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d100      	bne.n	80069ee <memset+0xa>
 80069ec:	4770      	bx	lr
 80069ee:	f803 1b01 	strb.w	r1, [r3], #1
 80069f2:	e7f9      	b.n	80069e8 <memset+0x4>

080069f4 <__libc_init_array>:
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	4d0d      	ldr	r5, [pc, #52]	@ (8006a2c <__libc_init_array+0x38>)
 80069f8:	4c0d      	ldr	r4, [pc, #52]	@ (8006a30 <__libc_init_array+0x3c>)
 80069fa:	1b64      	subs	r4, r4, r5
 80069fc:	10a4      	asrs	r4, r4, #2
 80069fe:	2600      	movs	r6, #0
 8006a00:	42a6      	cmp	r6, r4
 8006a02:	d109      	bne.n	8006a18 <__libc_init_array+0x24>
 8006a04:	4d0b      	ldr	r5, [pc, #44]	@ (8006a34 <__libc_init_array+0x40>)
 8006a06:	4c0c      	ldr	r4, [pc, #48]	@ (8006a38 <__libc_init_array+0x44>)
 8006a08:	f000 f818 	bl	8006a3c <_init>
 8006a0c:	1b64      	subs	r4, r4, r5
 8006a0e:	10a4      	asrs	r4, r4, #2
 8006a10:	2600      	movs	r6, #0
 8006a12:	42a6      	cmp	r6, r4
 8006a14:	d105      	bne.n	8006a22 <__libc_init_array+0x2e>
 8006a16:	bd70      	pop	{r4, r5, r6, pc}
 8006a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a1c:	4798      	blx	r3
 8006a1e:	3601      	adds	r6, #1
 8006a20:	e7ee      	b.n	8006a00 <__libc_init_array+0xc>
 8006a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a26:	4798      	blx	r3
 8006a28:	3601      	adds	r6, #1
 8006a2a:	e7f2      	b.n	8006a12 <__libc_init_array+0x1e>
 8006a2c:	08006b20 	.word	0x08006b20
 8006a30:	08006b20 	.word	0x08006b20
 8006a34:	08006b20 	.word	0x08006b20
 8006a38:	08006b24 	.word	0x08006b24

08006a3c <_init>:
 8006a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3e:	bf00      	nop
 8006a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a42:	bc08      	pop	{r3}
 8006a44:	469e      	mov	lr, r3
 8006a46:	4770      	bx	lr

08006a48 <_fini>:
 8006a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4a:	bf00      	nop
 8006a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a4e:	bc08      	pop	{r3}
 8006a50:	469e      	mov	lr, r3
 8006a52:	4770      	bx	lr
